/*@ begin PerfTuning (spec unroll_vectorize {
 def build {
   arg build_command = 'gcc -O0';
   arg libs = '-lrt';
 }
 def performance_counter {
   #arg method = 'bgp counter';
   arg repetitions = 500;
 }
 def performance_params {
   param UF[] = range(1,10);
   param VEC[] = [False,True];
   param CFLAGS[] = ['-O0', '-O1','-O2','-O3'];
   #constraint divisible_by_two = (UF % 2 == 0);
 }
 def input_params {
   param N[] = [22];
 }
 def input_vars {
   decl static int a_input[22] = random;
   decl static int b_input[22] = random;
   decl static int z_input[22] = random;
 }
 def search {
  arg algorithm = 'Randomsearch';
  arg total_runs = 300;
 }
}

)
@*/
/**-- (Generated by Orio) 
Best performance cost: 
  [5.64e-07, 2.56e-07, 2.52e-07, 2.49e-07, 2.51e-07, 2.5e-07, 2.53e-07, 2.57e-07, 2.7e-07, 2.54e-07, 2.54e-07, 2.52e-07, 2.53e-07, 2.52e-07, 2.51e-07, 2.52e-07, 2.56e-07, 2.51e-07, 2.52e-07, 2.5e-07, 2.51e-07, 2.52e-07, 2.54e-07, 2.51e-07, 2.53e-07, 2.54e-07, 2.51e-07, 2.49e-07, 2.48e-07, 2.52e-07, 2.52e-07, 2.54e-07, 2.5e-07, 2.54e-07, 2.54e-07, 2.54e-07, 2.49e-07, 2.5e-07, 2.5e-07, 2.48e-07, 2.51e-07, 2.54e-07, 2.52e-07, 2.5e-07, 2.53e-07, 2.54e-07, 2.52e-07, 2.54e-07, 2.51e-07, 2.51e-07, 2.52e-07, 2.53e-07, 2.53e-07, 2.5e-07, 2.54e-07, 2.51e-07, 2.49e-07, 2.51e-07, 2.54e-07, 2.52e-07, 2.51e-07, 2.51e-07, 2.54e-07, 2.55e-07, 2.55e-07, 2.54e-07, 2.54e-07, 2.52e-07, 2.51e-07, 2.54e-07, 2.51e-07, 2.71e-07, 2.52e-07, 2.54e-07, 2.51e-07, 2.52e-07, 2.53e-07, 2.54e-07, 2.53e-07, 2.51e-07, 2.53e-07, 2.51e-07, 2.56e-07, 2.5e-07, 2.49e-07, 2.51e-07, 2.5e-07, 2.51e-07, 2.54e-07, 2.54e-07, 2.57e-07, 2.52e-07, 2.56e-07, 2.52e-07, 2.58e-07, 2.53e-07, 2.53e-07, 2.52e-07, 2.49e-07, 2.49e-07, 2.57e-07, 2.5e-07, 2.5e-07, 2.54e-07, 2.51e-07, 2.52e-07, 2.52e-07, 2.54e-07, 2.51e-07, 2.58e-07, 2.53e-07, 2.57e-07, 2.55e-07, 2.53e-07, 2.53e-07, 2.54e-07, 2.53e-07, 2.53e-07, 2.5e-07, 2.54e-07, 2.54e-07, 2.54e-07, 2.51e-07, 2.52e-07, 2.53e-07, 2.5e-07, 2.55e-07, 2.54e-07, 2.7e-07, 2.56e-07, 2.51e-07, 2.53e-07, 2.53e-07, 2.54e-07, 2.51e-07, 2.5e-07, 2.5e-07, 2.54e-07, 2.54e-07, 2.51e-07, 2.53e-07, 2.54e-07, 2.5e-07, 2.53e-07, 2.51e-07, 2.54e-07, 2.53e-07, 2.53e-07, 2.48e-07, 2.52e-07, 2.49e-07, 2.5e-07, 2.52e-07, 2.54e-07, 2.51e-07, 2.52e-07, 2.55e-07, 2.5e-07, 2.51e-07, 2.55e-07, 2.54e-07, 2.51e-07, 2.51e-07, 2.53e-07, 2.49e-07, 2.7e-07, 2.55e-07, 2.51e-07, 2.55e-07, 2.54e-07, 2.54e-07, 2.5e-07, 2.51e-07, 2.53e-07, 2.77e-07, 2.51e-07, 2.51e-07, 2.54e-07, 2.51e-07, 2.55e-07, 2.52e-07, 2.52e-07, 2.54e-07, 2.48e-07, 2.53e-07, 2.53e-07, 2.52e-07, 2.52e-07, 2.51e-07, 2.5e-07, 2.53e-07, 2.51e-07, 2.51e-07, 2.51e-07, 2.54e-07, 2.51e-07, 2.52e-07, 2.54e-07, 2.52e-07, 2.49e-07, 2.54e-07, 2.53e-07, 2.53e-07, 2.5e-07, 2.57e-07, 2.48e-07, 2.53e-07, 2.47e-07, 2.5e-07, 2.54e-07, 2.55e-07, 2.55e-07, 2.47e-07, 2.53e-07, 2.51e-07, 2.54e-07, 2.52e-07, 2.57e-07, 2.5e-07, 2.53e-07, 2.5e-07, 2.48e-07, 2.52e-07, 2.51e-07, 2.51e-07, 2.54e-07, 2.53e-07, 2.5e-07, 2.5e-07, 2.51e-07, 2.54e-07, 2.55e-07, 2.53e-07, 2.48e-07, 2.49e-07, 2.51e-07, 2.54e-07, 2.51e-07, 2.5e-07, 2.51e-07, 2.49e-07, 2.53e-07, 2.5e-07, 2.52e-07, 2.51e-07, 2.51e-07, 2.51e-07, 2.53e-07, 2.49e-07, 2.51e-07, 2.5e-07, 2.47e-07, 2.52e-07, 2.56e-07, 2.51e-07, 2.55e-07, 2.51e-07, 2.52e-07, 2.52e-07, 2.55e-07, 2.53e-07, 2.53e-07, 2.54e-07, 2.52e-07, 2.51e-07, 2.54e-07, 2.53e-07, 2.49e-07, 2.56e-07, 2.57e-07, 2.52e-07, 2.52e-07, 2.52e-07, 2.5e-07, 2.71e-07, 2.53e-07, 2.52e-07, 2.53e-07, 2.57e-07, 2.52e-07, 2.69e-07, 2.52e-07, 2.53e-07, 2.5e-07, 2.52e-07, 2.55e-07, 2.52e-07, 2.54e-07, 2.52e-07, 2.54e-07, 2.53e-07, 2.54e-07, 2.55e-07, 2.51e-07, 2.53e-07, 2.54e-07, 2.51e-07, 2.56e-07, 2.54e-07, 2.52e-07, 2.53e-07, 2.5e-07, 2.51e-07, 2.5e-07, 2.54e-07, 2.5e-07, 2.57e-07, 2.5e-07, 2.52e-07, 2.52e-07, 2.53e-07, 2.53e-07, 2.53e-07, 2.54e-07, 2.54e-07, 2.51e-07, 2.51e-07, 2.55e-07, 2.54e-07, 2.5e-07, 2.48e-07, 2.53e-07, 2.51e-07, 2.52e-07, 2.5e-07, 2.49e-07, 2.49e-07, 2.5e-07, 2.52e-07, 2.5e-07, 2.9e-07, 2.52e-07, 2.49e-07, 2.5e-07, 2.5e-07, 2.54e-07, 2.54e-07, 2.53e-07, 2.52e-07, 2.54e-07, 2.51e-07, 2.51e-07, 2.51e-07, 2.48e-07, 2.49e-07, 2.51e-07, 2.54e-07, 2.54e-07, 2.53e-07, 2.54e-07, 2.49e-07, 2.51e-07, 2.53e-07, 2.5e-07, 2.51e-07, 2.52e-07, 2.5e-07, 2.54e-07, 2.51e-07, 2.54e-07, 2.56e-07, 2.53e-07, 2.53e-07, 2.57e-07, 2.55e-07, 2.5e-07, 2.5e-07, 2.54e-07, 2.53e-07, 2.55e-07, 2.49e-07, 2.49e-07, 2.55e-07, 2.51e-07, 2.52e-07, 2.5e-07, 2.51e-07, 2.52e-07, 2.53e-07, 2.52e-07, 2.53e-07, 2.55e-07, 2.51e-07, 2.5e-07, 2.53e-07, 2.51e-07, 2.5e-07, 2.53e-07, 2.53e-07, 2.52e-07, 2.54e-07, 2.51e-07, 2.49e-07, 2.51e-07, 2.53e-07, 2.54e-07, 2.51e-07, 2.56e-07, 2.56e-07, 2.51e-07, 2.54e-07, 2.54e-07, 2.53e-07, 2.5e-07, 2.54e-07, 2.51e-07, 2.52e-07, 2.53e-07, 2.5e-07, 2.5e-07, 2.53e-07, 2.54e-07, 2.52e-07, 2.52e-07, 2.54e-07, 2.53e-07, 2.51e-07, 2.5e-07, 2.56e-07, 2.53e-07, 2.52e-07, 2.53e-07, 2.52e-07, 2.5e-07, 2.52e-07, 2.55e-07, 2.53e-07, 2.5e-07, 2.53e-07, 2.52e-07, 2.51e-07, 2.5e-07, 2.5e-07, 2.52e-07, 2.52e-07, 2.55e-07, 2.53e-07, 2.54e-07, 2.54e-07, 2.54e-07, 2.52e-07, 2.56e-07, 2.53e-07, 2.56e-07, 2.54e-07, 2.53e-07, 2.53e-07, 2.52e-07, 2.51e-07, 2.55e-07, 2.5e-07, 2.52e-07, 2.55e-07, 2.53e-07, 2.51e-07, 2.55e-07, 2.5e-07, 2.54e-07, 2.52e-07, 2.53e-07, 2.54e-07, 2.47e-07, 2.48e-07, 2.53e-07, 2.49e-07, 2.5e-07, 2.72e-07, 2.72e-07, 2.54e-07, 2.5e-07, 2.52e-07, 2.48e-07, 2.53e-07, 2.54e-07, 2.53e-07, 2.56e-07, 2.51e-07, 2.52e-07, 2.56e-07, 2.53e-07, 2.54e-07, 2.54e-07, 2.51e-07, 2.52e-07, 2.51e-07, 2.5e-07, 2.49e-07, 2.51e-07, 2.52e-07, 2.52e-07, 2.53e-07, 2.53e-07, 2.53e-07, 2.55e-07, 2.49e-07, 2.65e-07, 2.51e-07, 2.51e-07, 2.55e-07, 2.52e-07] 
Tuned for specific problem sizes: 
  N = 22 
Best performance parameters: 
  CFLAGS = -O2 
  UF = 2 
  VEC = True 
--**/

#include <stdio.h>
#include "softfloat.c"

#define N 22

const float64 a_input[N] = {
  0x7FFF000000000000ULL,	/* nan */
  0x7FF0000000000000ULL,	/* inf */
  0x7FF0000000000000ULL,	/* inf */
  0x7FF0000000000000ULL,	/* inf */
  0x3FF0000000000000ULL,	/* 1.0 */
  0x3FF0000000000000ULL,	/* 1.0 */
  0x0000000000000000ULL,	/* 0.0 */
  0x3FF0000000000000ULL,	/* 1.0 */
  0x0000000000000000ULL,	/* 0.0 */
  0x8000000000000000ULL,	/* -0.0 */
  0x4008000000000000ULL,	/* 3.0 */
  0xC008000000000000ULL,	/* -3.0 */
  0x4008000000000000ULL,	/* 3.0 */
  0xC008000000000000ULL,	/* -3.0 */
  0x4000000000000000ULL,	/* 2.0 */
  0xC000000000000000ULL,	/* -2.0 */
  0x4000000000000000ULL,	/* 2.0 */
  0xC000000000000000ULL,	/* -2.0 */
  0x3FF0000000000000ULL,	/* 1.0 */
  0xBFF0000000000000ULL,	/* -1.0 */
  0x3FF0000000000000ULL,	/* 1.0 */
  0xBFF0000000000000ULL		/* -1.0 */
};

const float64 b_input[N] = {
  0x3FF0000000000000ULL,	/* 1.0 */
  0x7FF8000000000000ULL,	/* nan */
  0x7FF0000000000000ULL,	/* inf */
  0x3FF0000000000000ULL,	/* 1.0 */
  0x7FF8000000000000ULL,	/* nan */
  0x7FF0000000000000ULL,	/* inf */
  0x0000000000000000ULL,	/* 0.0 */
  0x0000000000000000ULL,	/* 0.0 */
  0x3FF0000000000000ULL,	/* 1.0 */
  0x3FF0000000000000ULL,	/* 1.0 */
  0x4000000000000000ULL,	/* 2.0 */
  0x4000000000000000ULL,	/* 2.0 */
  0xC000000000000000ULL,	/* 2.0 */
  0xC000000000000000ULL,	/* -2.0 */
  0x4010000000000000ULL,	/* 4.0 */
  0x4010000000000000ULL,	/* 4.0 */
  0xC010000000000000ULL,	/* -4.0 */
  0xC010000000000000ULL,	/* -4.0 */
  0x3FF8000000000000ULL,	/* 1.5 */
  0x3FF8000000000000ULL,	/* 1.5 */
  0xBFF8000000000000ULL,	/* -1.5 */
  0xBFF8000000000000ULL		/* -1.5 */
};

const float64 z_output[N] = {
  0x7FFF000000000000ULL,	/* nan */
  0x7FF8000000000000ULL,	/* nan */
  0x7FFFFFFFFFFFFFFFULL,	/* nan */
  0x7FF0000000000000ULL,	/* inf */
  0x7FF8000000000000ULL,	/* nan */
  0x0000000000000000ULL,	/* 0.0 */
  0x7FFFFFFFFFFFFFFFULL,	/* nan */
  0x7FF0000000000000ULL,	/* inf */
  0x0000000000000000ULL,	/* 0.0 */
  0x8000000000000000ULL,	/* -0.0 */
  0x3FF8000000000000ULL,	/* 1.5 */
  0xBFF8000000000000ULL,	/* -1.5 */
  0xBFF8000000000000ULL,	/* 1.5 */
  0x3FF8000000000000ULL,	/* -1.5 */
  0x3FE0000000000000ULL,	/* 0.5 */
  0xBFE0000000000000ULL,	/* 5.0 */
  0xBFE0000000000000ULL,	/* -5.0 */
  0x3FE0000000000000ULL,	/* 0.5 */
  0x3FE5555555555555ULL,	/* 0.666667 */
  0xBFE5555555555555ULL,	/* -0.666667 */
  0xBFE5555555555555ULL,	/* -0.666667 */
  0x3FE5555555555555ULL		/* 0.666667 */
};

int
main ()
{
  int main_result;
  int i;
  float64 x1, x2;
      main_result = 0;

  /*@ begin Loop (
      transform Composite(
        unrolljam = (['i'],[UF]),
        vector = (VEC, ['ivdep','vector always'])
       )
      for (i = 0; i <= N-1; i=i+1)
	{
	  float64 result;
	  x1 = a_input[i];
	  x2 = b_input[i];
	  result = float64_div (x1, x2);
	  main_result += (result == z_output[i]);
	}
  ) @*/
  {
    int i;
    register int cbv_1;
    cbv_1=N-2;
#pragma ivdep
#pragma vector always
    for (i=0; i<=cbv_1; i=i+2) {
            float64 result;
;
      x1=a_input[i];
      x2=b_input[i];
      result=float64_div(x1,x2);
      main_result=main_result+(result==z_output[i]);
      ;
      x1=a_input[(i+1)];
      x2=b_input[(i+1)];
      result=float64_div(x1,x2);
      main_result=main_result+(result==z_output[(i+1)]);
    }
    register int cbv_2, cbv_3;
    cbv_2=N-((N-(0))%2);
    cbv_3=N-1;
#pragma ivdep
#pragma vector always
    for (i=cbv_2; i<=cbv_3; i=i+1) {
            float64 result;
;
      x1=a_input[i];
      x2=b_input[i];
      result=float64_div(x1,x2);
      main_result=main_result+(result==z_output[i]);
    }
  }
  /*@ end @*/

      printf ("Result: %d", main_result);
      if (main_result == 22) {
          printf("RESULT: PASS");
      } else {
          printf("RESULT: FAIL");
      }
      return main_result;
    }

/*@ end @*/
