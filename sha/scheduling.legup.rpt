//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Apr 23 10:50:58 2017
//----------------------------------------------------------------------------//

Target Family: CycloneV
Clock period constraint: 2.000000e+01ns
Start Function: sha_transform
state: LEGUP_0
   Transition: if (start): LEGUP_F_sha_transform_BB__0_1 default: LEGUP_0
state: LEGUP_F_sha_transform_BB__0_1
   %W = alloca [80 x i32], align 4 (endState: LEGUP_F_sha_transform_BB__0_1)
   br label %1
   Transition: default: LEGUP_F_sha_transform_BB__1_2
state: LEGUP_F_sha_transform_BB__1_2
   %i.029 = phi i32 [ 0, %0 ], [ %3, %1 ] (endState: LEGUP_F_sha_transform_BB__1_2)
   %scevgep26 = getelementptr [80 x i32]* %W, i32 0, i32 %i.029 (endState: LEGUP_F_sha_transform_BB__1_2)
   %scevgep27 = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %i.029 (endState: LEGUP_F_sha_transform_BB__1_2)
   %2 = load i32* %scevgep27, align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__1_4)
   %3 = add nsw i32 %i.029, 1 (endState: LEGUP_F_sha_transform_BB__1_2)
   %exitcond25 = icmp eq i32 %3, 16 (endState: LEGUP_F_sha_transform_BB__1_2)
   Transition: default: LEGUP_F_sha_transform_BB__1_3
state: LEGUP_F_sha_transform_BB__1_3
   Transition: default: LEGUP_F_sha_transform_BB__1_4
state: LEGUP_F_sha_transform_BB__1_4
   store i32 %2, i32* %scevgep26, align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__1_5)
   Transition: default: LEGUP_F_sha_transform_BB__1_5
state: LEGUP_F_sha_transform_BB__1_5
   br i1 %exitcond25, label %.preheader3.preheader, label %1
   Transition: if (%exitcond25): LEGUP_F_sha_transform_BB_preheader3preheader_6 default: LEGUP_F_sha_transform_BB__1_2
state: LEGUP_F_sha_transform_BB_preheader3preheader_6
   br label %.preheader3
   Transition: default: LEGUP_F_sha_transform_BB_preheader3_7
state: LEGUP_F_sha_transform_BB_preheader3_7
   %indvar17 = phi i32 [ 0, %.preheader3.preheader ], [ %indvar.next18, %.preheader3 ] (endState: LEGUP_F_sha_transform_BB_preheader3_7)
   %4 = add i32 %indvar17, 16 (endState: LEGUP_F_sha_transform_BB_preheader3_7)
   %scevgep21 = getelementptr [80 x i32]* %W, i32 0, i32 %indvar17 (endState: LEGUP_F_sha_transform_BB_preheader3_7)
   %5 = add i32 %indvar17, 2 (endState: LEGUP_F_sha_transform_BB_preheader3_7)
   %6 = add i32 %indvar17, 8 (endState: LEGUP_F_sha_transform_BB_preheader3_7)
   %7 = add i32 %indvar17, 13 (endState: LEGUP_F_sha_transform_BB_preheader3_7)
   %indvar.next18 = add i32 %indvar17, 1 (endState: LEGUP_F_sha_transform_BB_preheader3_7)
   %exitcond19 = icmp eq i32 %indvar.next18, 64 (endState: LEGUP_F_sha_transform_BB_preheader3_7)
   Transition: default: LEGUP_F_sha_transform_BB_preheader3_8
state: LEGUP_F_sha_transform_BB_preheader3_8
   %scevgep20 = getelementptr [80 x i32]* %W, i32 0, i32 %4 (endState: LEGUP_F_sha_transform_BB_preheader3_8)
   %scevgep22 = getelementptr [80 x i32]* %W, i32 0, i32 %5 (endState: LEGUP_F_sha_transform_BB_preheader3_8)
   %scevgep23 = getelementptr [80 x i32]* %W, i32 0, i32 %6 (endState: LEGUP_F_sha_transform_BB_preheader3_8)
   %scevgep24 = getelementptr [80 x i32]* %W, i32 0, i32 %7 (endState: LEGUP_F_sha_transform_BB_preheader3_8)
   %8 = load i32* %scevgep24, align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB_preheader3_9)
   %9 = load i32* %scevgep23, align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB_preheader3_9)
   Transition: default: LEGUP_F_sha_transform_BB_preheader3_9
state: LEGUP_F_sha_transform_BB_preheader3_9
   %10 = xor i32 %9, %8 (endState: LEGUP_F_sha_transform_BB_preheader3_9)
   %11 = load i32* %scevgep22, align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB_preheader3_10)
   %13 = load i32* %scevgep21, align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB_preheader3_10)
   Transition: default: LEGUP_F_sha_transform_BB_preheader3_10
state: LEGUP_F_sha_transform_BB_preheader3_10
   %12 = xor i32 %10, %11 (endState: LEGUP_F_sha_transform_BB_preheader3_10)
   %14 = xor i32 %12, %13 (endState: LEGUP_F_sha_transform_BB_preheader3_10)
   store i32 %14, i32* %scevgep20, align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB_preheader3_11)
   Transition: default: LEGUP_F_sha_transform_BB_preheader3_11
state: LEGUP_F_sha_transform_BB_preheader3_11
   br i1 %exitcond19, label %15, label %.preheader3
   Transition: if (%exitcond19): LEGUP_F_sha_transform_BB__15_12 default: LEGUP_F_sha_transform_BB_preheader3_7
state: LEGUP_F_sha_transform_BB__15_12
   %16 = load i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 0), align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__15_14)
   %17 = load i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 1), align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__15_14)
   Transition: default: LEGUP_F_sha_transform_BB__15_13
state: LEGUP_F_sha_transform_BB__15_13
   %18 = load i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 2), align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__15_15)
   %19 = load i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 3), align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__15_15)
   Transition: default: LEGUP_F_sha_transform_BB__15_14
state: LEGUP_F_sha_transform_BB__15_14
   %20 = load i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 4), align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__15_16)
   Transition: default: LEGUP_F_sha_transform_BB__15_15
state: LEGUP_F_sha_transform_BB__15_15
   Transition: default: LEGUP_F_sha_transform_BB__15_16
state: LEGUP_F_sha_transform_BB__15_16
   br label %21
   Transition: default: LEGUP_F_sha_transform_BB__21_17
state: LEGUP_F_sha_transform_BB__21_17
   %E.027 = phi i32 [ %20, %15 ], [ %D.026, %21 ] (endState: LEGUP_F_sha_transform_BB__21_17)
   %D.026 = phi i32 [ %19, %15 ], [ %C.025, %21 ] (endState: LEGUP_F_sha_transform_BB__21_17)
   %C.025 = phi i32 [ %18, %15 ], [ %36, %21 ] (endState: LEGUP_F_sha_transform_BB__21_17)
   %B.024 = phi i32 [ %17, %15 ], [ %A.023, %21 ] (endState: LEGUP_F_sha_transform_BB__21_17)
   %A.023 = phi i32 [ %16, %15 ], [ %33, %21 ] (endState: LEGUP_F_sha_transform_BB__21_17)
   %i.222 = phi i32 [ 0, %15 ], [ %37, %21 ] (endState: LEGUP_F_sha_transform_BB__21_17)
   %scevgep16 = getelementptr [80 x i32]* %W, i32 0, i32 %i.222 (endState: LEGUP_F_sha_transform_BB__21_17)
   %22 = shl i32 %A.023, 5 (endState: LEGUP_F_sha_transform_BB__21_17)
   %23 = lshr i32 %A.023, 27 (endState: LEGUP_F_sha_transform_BB__21_17)
   %24 = or i32 %22, %23 (endState: LEGUP_F_sha_transform_BB__21_17)
   %25 = and i32 %C.025, %B.024 (endState: LEGUP_F_sha_transform_BB__21_17)
   %26 = xor i32 %B.024, -1 (endState: LEGUP_F_sha_transform_BB__21_17)
   %27 = and i32 %D.026, %26 (endState: LEGUP_F_sha_transform_BB__21_17)
   %28 = or i32 %27, %25 (endState: LEGUP_F_sha_transform_BB__21_17)
   %29 = load i32* %scevgep16, align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__21_18)
   %30 = add i32 %24, 1518500249 (endState: LEGUP_F_sha_transform_BB__21_17)
   %31 = add i32 %30, %E.027 (endState: LEGUP_F_sha_transform_BB__21_17)
   %32 = add i32 %31, %28 (endState: LEGUP_F_sha_transform_BB__21_17)
   %34 = shl i32 %B.024, 30 (endState: LEGUP_F_sha_transform_BB__21_17)
   %35 = lshr i32 %B.024, 2 (endState: LEGUP_F_sha_transform_BB__21_17)
   %36 = or i32 %34, %35 (endState: LEGUP_F_sha_transform_BB__21_17)
   %37 = add nsw i32 %i.222, 1 (endState: LEGUP_F_sha_transform_BB__21_17)
   %exitcond15 = icmp eq i32 %37, 20 (endState: LEGUP_F_sha_transform_BB__21_17)
   Transition: default: LEGUP_F_sha_transform_BB__21_18
state: LEGUP_F_sha_transform_BB__21_18
   %33 = add i32 %32, %29 (endState: LEGUP_F_sha_transform_BB__21_18)
   br i1 %exitcond15, label %.preheader2.preheader, label %21
   Transition: if (%exitcond15): LEGUP_F_sha_transform_BB_preheader2preheader_19 default: LEGUP_F_sha_transform_BB__21_17
state: LEGUP_F_sha_transform_BB_preheader2preheader_19
   br label %.preheader2
   Transition: default: LEGUP_F_sha_transform_BB_preheader2_20
state: LEGUP_F_sha_transform_BB_preheader2_20
   %indvar11 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next12, %.preheader2 ] (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %E.121 = phi i32 [ %D.026, %.preheader2.preheader ], [ %D.120, %.preheader2 ] (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %D.120 = phi i32 [ %C.025, %.preheader2.preheader ], [ %C.119, %.preheader2 ] (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %C.119 = phi i32 [ %36, %.preheader2.preheader ], [ %51, %.preheader2 ] (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %B.118 = phi i32 [ %A.023, %.preheader2.preheader ], [ %A.117, %.preheader2 ] (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %A.117 = phi i32 [ %33, %.preheader2.preheader ], [ %48, %.preheader2 ] (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %38 = add i32 %indvar11, 20 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %39 = shl i32 %A.117, 5 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %40 = lshr i32 %A.117, 27 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %41 = or i32 %39, %40 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %42 = xor i32 %C.119, %B.118 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %43 = xor i32 %42, %D.120 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %45 = add i32 %41, 1859775393 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %46 = add i32 %45, %43 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %47 = add i32 %46, %E.121 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %49 = shl i32 %B.118, 30 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %50 = lshr i32 %B.118, 2 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %51 = or i32 %49, %50 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %indvar.next12 = add i32 %indvar11, 1 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   %exitcond13 = icmp eq i32 %indvar.next12, 20 (endState: LEGUP_F_sha_transform_BB_preheader2_20)
   Transition: default: LEGUP_F_sha_transform_BB_preheader2_21
state: LEGUP_F_sha_transform_BB_preheader2_21
   %scevgep14 = getelementptr [80 x i32]* %W, i32 0, i32 %38 (endState: LEGUP_F_sha_transform_BB_preheader2_21)
   %44 = load i32* %scevgep14, align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB_preheader2_22)
   Transition: default: LEGUP_F_sha_transform_BB_preheader2_22
state: LEGUP_F_sha_transform_BB_preheader2_22
   %48 = add i32 %47, %44 (endState: LEGUP_F_sha_transform_BB_preheader2_22)
   br i1 %exitcond13, label %.preheader1.preheader, label %.preheader2
   Transition: if (%exitcond13): LEGUP_F_sha_transform_BB_preheader1preheader_23 default: LEGUP_F_sha_transform_BB_preheader2_20
state: LEGUP_F_sha_transform_BB_preheader1preheader_23
   br label %.preheader1
   Transition: default: LEGUP_F_sha_transform_BB_preheader1_24
state: LEGUP_F_sha_transform_BB_preheader1_24
   %indvar8 = phi i32 [ 0, %.preheader1.preheader ], [ %indvar.next9, %.preheader1 ] (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %E.215 = phi i32 [ %D.120, %.preheader1.preheader ], [ %D.214, %.preheader1 ] (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %D.214 = phi i32 [ %C.119, %.preheader1.preheader ], [ %C.213, %.preheader1 ] (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %C.213 = phi i32 [ %51, %.preheader1.preheader ], [ %67, %.preheader1 ] (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %B.212 = phi i32 [ %A.117, %.preheader1.preheader ], [ %A.211, %.preheader1 ] (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %A.211 = phi i32 [ %48, %.preheader1.preheader ], [ %64, %.preheader1 ] (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %52 = add i32 %indvar8, 40 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %53 = shl i32 %A.211, 5 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %54 = lshr i32 %A.211, 27 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %55 = or i32 %53, %54 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %56 = or i32 %D.214, %C.213 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %57 = and i32 %56, %B.212 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %58 = and i32 %D.214, %C.213 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %59 = or i32 %57, %58 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %61 = add i32 %55, -1894007588 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %62 = add i32 %61, %E.215 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %63 = add i32 %62, %59 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %65 = shl i32 %B.212, 30 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %66 = lshr i32 %B.212, 2 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %67 = or i32 %65, %66 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %indvar.next9 = add i32 %indvar8, 1 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   %exitcond = icmp eq i32 %indvar.next9, 20 (endState: LEGUP_F_sha_transform_BB_preheader1_24)
   Transition: default: LEGUP_F_sha_transform_BB_preheader1_25
state: LEGUP_F_sha_transform_BB_preheader1_25
   %scevgep10 = getelementptr [80 x i32]* %W, i32 0, i32 %52 (endState: LEGUP_F_sha_transform_BB_preheader1_25)
   %60 = load i32* %scevgep10, align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB_preheader1_26)
   Transition: default: LEGUP_F_sha_transform_BB_preheader1_26
state: LEGUP_F_sha_transform_BB_preheader1_26
   %64 = add i32 %63, %60 (endState: LEGUP_F_sha_transform_BB_preheader1_26)
   br i1 %exitcond, label %.preheader.preheader, label %.preheader1
   Transition: if (%exitcond): LEGUP_F_sha_transform_BB_preheaderpreheader_27 default: LEGUP_F_sha_transform_BB_preheader1_24
state: LEGUP_F_sha_transform_BB_preheaderpreheader_27
   br label %.preheader
   Transition: default: LEGUP_F_sha_transform_BB_preheader_28
state: LEGUP_F_sha_transform_BB_preheader_28
   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %.preheader ] (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %E.39 = phi i32 [ %D.214, %.preheader.preheader ], [ %D.38, %.preheader ] (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %D.38 = phi i32 [ %C.213, %.preheader.preheader ], [ %C.37, %.preheader ] (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %C.37 = phi i32 [ %67, %.preheader.preheader ], [ %81, %.preheader ] (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %B.36 = phi i32 [ %A.211, %.preheader.preheader ], [ %A.35, %.preheader ] (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %A.35 = phi i32 [ %64, %.preheader.preheader ], [ %78, %.preheader ] (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %68 = add i32 %indvar, 60 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %69 = shl i32 %A.35, 5 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %70 = lshr i32 %A.35, 27 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %71 = or i32 %69, %70 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %72 = xor i32 %C.37, %B.36 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %73 = xor i32 %72, %D.38 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %75 = add i32 %71, -899497514 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %76 = add i32 %75, %73 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %77 = add i32 %76, %E.39 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %79 = shl i32 %B.36, 30 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %80 = lshr i32 %B.36, 2 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %81 = or i32 %79, %80 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %indvar.next = add i32 %indvar, 1 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   %exitcond7 = icmp eq i32 %indvar.next, 20 (endState: LEGUP_F_sha_transform_BB_preheader_28)
   Transition: default: LEGUP_F_sha_transform_BB_preheader_29
state: LEGUP_F_sha_transform_BB_preheader_29
   %scevgep = getelementptr [80 x i32]* %W, i32 0, i32 %68 (endState: LEGUP_F_sha_transform_BB_preheader_29)
   %74 = load i32* %scevgep, align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB_preheader_30)
   Transition: default: LEGUP_F_sha_transform_BB_preheader_30
state: LEGUP_F_sha_transform_BB_preheader_30
   %78 = add i32 %77, %74 (endState: LEGUP_F_sha_transform_BB_preheader_30)
   br i1 %exitcond7, label %82, label %.preheader
   Transition: if (%exitcond7): LEGUP_F_sha_transform_BB__82_31 default: LEGUP_F_sha_transform_BB_preheader_28
state: LEGUP_F_sha_transform_BB__82_31
   %83 = add i32 %16, %78 (endState: LEGUP_F_sha_transform_BB__82_31)
   store i32 %83, i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 0), align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__82_32)
   %84 = add i32 %17, %A.35 (endState: LEGUP_F_sha_transform_BB__82_31)
   store i32 %84, i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 1), align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__82_32)
   %85 = add i32 %18, %81 (endState: LEGUP_F_sha_transform_BB__82_31)
   %86 = add i32 %19, %C.37 (endState: LEGUP_F_sha_transform_BB__82_31)
   %87 = add i32 %20, %D.38 (endState: LEGUP_F_sha_transform_BB__82_31)
   Transition: default: LEGUP_F_sha_transform_BB__82_32
state: LEGUP_F_sha_transform_BB__82_32
   store i32 %85, i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 2), align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__82_33)
   store i32 %86, i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 3), align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__82_33)
   Transition: default: LEGUP_F_sha_transform_BB__82_33
state: LEGUP_F_sha_transform_BB__82_33
   store i32 %87, i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 4), align 4, !tbaa !1 (endState: LEGUP_F_sha_transform_BB__82_34)
   Transition: default: LEGUP_F_sha_transform_BB__82_34
state: LEGUP_F_sha_transform_BB__82_34
   ret void
   Transition: default: LEGUP_0

Basic Block: %0 Num States: 1
Basic Block: %1 Num States: 4
Basic Block: %.preheader3.preheader Num States: 1
Basic Block: %.preheader3 Num States: 5
Basic Block: %15 Num States: 5
Basic Block: %21 Num States: 2
Basic Block: %.preheader2.preheader Num States: 1
Basic Block: %.preheader2 Num States: 3
Basic Block: %.preheader1.preheader Num States: 1
Basic Block: %.preheader1 Num States: 3
Basic Block: %.preheader.preheader Num States: 1
Basic Block: %.preheader Num States: 3
Basic Block: %82 Num States: 4
End Function: sha_transform
--------------------------------------------------------------------------------

Target Family: CycloneV
Clock period constraint: 2.000000e+01ns
Start Function: main
state: LEGUP_0
   Transition: if (start): LEGUP_F_main_BB__0_1 default: LEGUP_0
state: LEGUP_F_main_BB__0_1
   store i32 1732584193, i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 0), align 4, !tbaa !1 (endState: LEGUP_F_main_BB__0_2)
   store i32 -271733879, i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 1), align 4, !tbaa !1 (endState: LEGUP_F_main_BB__0_2)
   Transition: default: LEGUP_F_main_BB__0_2
state: LEGUP_F_main_BB__0_2
   store i32 -1732584194, i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 2), align 4, !tbaa !1 (endState: LEGUP_F_main_BB__0_3)
   store i32 271733878, i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 3), align 4, !tbaa !1 (endState: LEGUP_F_main_BB__0_3)
   Transition: default: LEGUP_F_main_BB__0_3
state: LEGUP_F_main_BB__0_3
   store i32 -1009589776, i32* getelementptr inbounds ([5 x i32]* @sha_info_digest, i32 0, i32 4), align 4, !tbaa !1 (endState: LEGUP_F_main_BB__0_4)
   Transition: default: LEGUP_F_main_BB__0_4
state: LEGUP_F_main_BB__0_4
   br label %.preheader.lr.ph.i.i
   Transition: default: LEGUP_F_main_BB_preheaderlrphii_5
state: LEGUP_F_main_BB_preheaderlrphii_5
   %j.02.i = phi i32 [ 0, %0 ], [ %32, %sha_update.exit.i ] (endState: LEGUP_F_main_BB_preheaderlrphii_5)
   %scevgep35 = getelementptr [2 x i32]* @in_i, i32 0, i32 %j.02.i (endState: LEGUP_F_main_BB_preheaderlrphii_5)
   %1 = load i32* %scevgep35, align 4, !tbaa !1 (endState: LEGUP_F_main_BB_preheaderlrphii_6)
   Transition: default: LEGUP_F_main_BB_preheaderlrphii_6
state: LEGUP_F_main_BB_preheaderlrphii_6
   %2 = add i32 %1, -64 (endState: LEGUP_F_main_BB_preheaderlrphii_6)
   br label %.preheader.i.i
   Transition: default: LEGUP_F_main_BB_preheaderii_7
state: LEGUP_F_main_BB_preheaderii_7
   %indvar8 = phi i32 [ %indvar.next9, %memcpy.exit.i.i ], [ 0, %.preheader.lr.ph.i.i ] (endState: LEGUP_F_main_BB_preheaderii_7)
   %3 = shl i32 %indvar8, 6 (endState: LEGUP_F_main_BB_preheaderii_7)
   %4 = or i32 %3, 3 (endState: LEGUP_F_main_BB_preheaderii_7)
   %5 = or i32 %3, 2 (endState: LEGUP_F_main_BB_preheaderii_7)
   %6 = or i32 %3, 1 (endState: LEGUP_F_main_BB_preheaderii_7)
   %7 = mul i32 %indvar8, -64 (endState: LEGUP_F_main_BB_preheaderii_8)
   Transition: default: LEGUP_F_main_BB_preheaderii_8
state: LEGUP_F_main_BB_preheaderii_8
   %8 = add i32 %2, %7 (endState: LEGUP_F_main_BB_preheaderii_8)
   br label %9
   Transition: default: LEGUP_F_main_BB__9_9
state: LEGUP_F_main_BB__9_9
   %indvar4 = phi i32 [ %indvar.next5, %9 ], [ 0, %.preheader.i.i ] (endState: LEGUP_F_main_BB__9_9)
   %10 = shl i32 %indvar4, 2 (endState: LEGUP_F_main_BB__9_9)
   %11 = add i32 %4, %10 (endState: LEGUP_F_main_BB__9_9)
   %12 = add i32 %5, %10 (endState: LEGUP_F_main_BB__9_9)
   %13 = add i32 %3, %10 (endState: LEGUP_F_main_BB__9_9)
   %14 = add i32 %6, %10 (endState: LEGUP_F_main_BB__9_9)
   %p1.02.i.i.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar4 (endState: LEGUP_F_main_BB__9_9)
   %indvar.next5 = add i32 %indvar4, 1 (endState: LEGUP_F_main_BB__9_9)
   %exitcond6 = icmp eq i32 %indvar.next5, 16 (endState: LEGUP_F_main_BB__9_9)
   Transition: default: LEGUP_F_main_BB__9_10
state: LEGUP_F_main_BB__9_10
   %scevgep10 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 %j.02.i, i32 %11 (endState: LEGUP_F_main_BB__9_10)
   %scevgep11 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 %j.02.i, i32 %12 (endState: LEGUP_F_main_BB__9_10)
   %p2.01.i.i.i = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 %j.02.i, i32 %13 (endState: LEGUP_F_main_BB__9_10)
   %scevgep13 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 %j.02.i, i32 %14 (endState: LEGUP_F_main_BB__9_10)
   %15 = load i8* %p2.01.i.i.i, align 1, !tbaa !5 (endState: LEGUP_F_main_BB__9_11)
   %17 = load i8* %scevgep13, align 1, !tbaa !5 (endState: LEGUP_F_main_BB__9_11)
   Transition: default: LEGUP_F_main_BB__9_11
state: LEGUP_F_main_BB__9_11
   %16 = zext i8 %15 to i32 (endState: LEGUP_F_main_BB__9_11)
   %18 = zext i8 %17 to i32 (endState: LEGUP_F_main_BB__9_11)
   %19 = shl nuw nsw i32 %18, 8 (endState: LEGUP_F_main_BB__9_11)
   %20 = or i32 %19, %16 (endState: LEGUP_F_main_BB__9_11)
   %21 = load i8* %scevgep11, align 1, !tbaa !5 (endState: LEGUP_F_main_BB__9_12)
   %25 = load i8* %scevgep10, align 1, !tbaa !5 (endState: LEGUP_F_main_BB__9_12)
   Transition: default: LEGUP_F_main_BB__9_12
state: LEGUP_F_main_BB__9_12
   %22 = zext i8 %21 to i32 (endState: LEGUP_F_main_BB__9_12)
   %23 = shl nuw nsw i32 %22, 16 (endState: LEGUP_F_main_BB__9_12)
   %24 = or i32 %20, %23 (endState: LEGUP_F_main_BB__9_12)
   %26 = zext i8 %25 to i32 (endState: LEGUP_F_main_BB__9_12)
   %27 = shl nuw i32 %26, 24 (endState: LEGUP_F_main_BB__9_12)
   %28 = or i32 %24, %27 (endState: LEGUP_F_main_BB__9_12)
   store i32 %28, i32* %p1.02.i.i.i, align 4, !tbaa !1 (endState: LEGUP_F_main_BB__9_13)
   Transition: default: LEGUP_F_main_BB__9_13
state: LEGUP_F_main_BB__9_13
   br i1 %exitcond6, label %memcpy.exit.i.i, label %9
   Transition: if (%exitcond6): LEGUP_F_main_BB_memcpyexitii_14 default: LEGUP_F_main_BB__9_9
state: LEGUP_F_main_BB_memcpyexitii_14
   %29 = icmp sgt i32 %8, 63 (endState: LEGUP_F_main_BB_memcpyexitii_14)
   %indvar.next9 = add i32 %indvar8, 1 (endState: LEGUP_F_main_BB_memcpyexitii_14)
   Transition: default: LEGUP_function_call_15
state: LEGUP_function_call_15
   tail call fastcc void @sha_transform() #1 (endState: LEGUP_function_call_15)
   Transition: if (sha_transform_finish_final): LEGUP_F_main_BB_memcpyexitii_16 default: LEGUP_function_call_15
state: LEGUP_F_main_BB_memcpyexitii_16
   br i1 %29, label %.preheader.i.i, label %30
   Transition: if (%29): LEGUP_F_main_BB_preheaderii_7 default: LEGUP_F_main_BB__30_17
state: LEGUP_F_main_BB__30_17
   br i1 false, label %.lr.ph.i.i1.i, label %sha_update.exit.i
   Transition: if (false): LEGUP_F_main_BB_lrphii1i_18 default: LEGUP_F_main_BB_sha_updateexiti_21
state: LEGUP_F_main_BB_lrphii1i_18
   br label %31
   Transition: default: LEGUP_F_main_BB__31_19
state: LEGUP_F_main_BB__31_19
   br i1 undef, label %sha_update.exit.i.loopexit, label %31
   Transition: if (undef): LEGUP_F_main_BB_sha_updateexitiloopexit_20 default: LEGUP_F_main_BB__31_19
state: LEGUP_F_main_BB_sha_updateexitiloopexit_20
   br label %sha_update.exit.i
   Transition: default: LEGUP_F_main_BB_sha_updateexiti_21
state: LEGUP_F_main_BB_sha_updateexiti_21
   %32 = add nsw i32 %j.02.i, 1 (endState: LEGUP_F_main_BB_sha_updateexiti_21)
   %exitcond26 = icmp eq i32 %32, 2 (endState: LEGUP_F_main_BB_sha_updateexiti_21)
   br i1 %exitcond26, label %.lr.ph.i8.preheader.i.i, label %.preheader.lr.ph.i.i
   Transition: if (%exitcond26): LEGUP_F_main_BB_lrphi8preheaderii_22 default: LEGUP_F_main_BB_preheaderlrphii_5
state: LEGUP_F_main_BB_lrphi8preheaderii_22
   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1 (endState: LEGUP_F_main_BB_lrphi8preheaderii_23)
   Transition: default: LEGUP_F_main_BB_lrphi8preheaderii_23
state: LEGUP_F_main_BB_lrphi8preheaderii_23
   br label %.lr.ph.i8.i.i
   Transition: default: LEGUP_F_main_BB_lrphi8ii_24
state: LEGUP_F_main_BB_lrphi8ii_24
   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i.i ], [ 0, %.lr.ph.i8.preheader.i.i ] (endState: LEGUP_F_main_BB_lrphi8ii_24)
   %33 = add i32 %indvar, 1 (endState: LEGUP_F_main_BB_lrphi8ii_24)
   %indvar.next = add i32 %indvar, 1 (endState: LEGUP_F_main_BB_lrphi8ii_24)
   %exitcond = icmp eq i32 %indvar.next, 13 (endState: LEGUP_F_main_BB_lrphi8ii_24)
   Transition: default: LEGUP_F_main_BB_lrphi8ii_25
state: LEGUP_F_main_BB_lrphi8ii_25
   %p.11.i7.i.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %33 (endState: LEGUP_F_main_BB_lrphi8ii_25)
   store i32 0, i32* %p.11.i7.i.i, align 4, !tbaa !1 (endState: LEGUP_F_main_BB_lrphi8ii_26)
   Transition: default: LEGUP_F_main_BB_lrphi8ii_26
state: LEGUP_F_main_BB_lrphi8ii_26
   br i1 %exitcond, label %sha_stream.exit, label %.lr.ph.i8.i.i
   Transition: if (%exitcond): LEGUP_F_main_BB_sha_streamexit_27 default: LEGUP_F_main_BB_lrphi8ii_24
state: LEGUP_F_main_BB_sha_streamexit_27
   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1 (endState: LEGUP_F_main_BB_sha_streamexit_28)
   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1 (endState: LEGUP_F_main_BB_sha_streamexit_28)
   Transition: default: LEGUP_F_main_BB_sha_streamexit_28
state: LEGUP_F_main_BB_sha_streamexit_28
   Transition: default: LEGUP_function_call_29
state: LEGUP_function_call_29
   tail call fastcc void @sha_transform() #1 (endState: LEGUP_function_call_29)
   Transition: if (sha_transform_finish_final): LEGUP_F_main_BB_sha_streamexit_30 default: LEGUP_function_call_29
state: LEGUP_F_main_BB_sha_streamexit_30
   br label %34
   Transition: default: LEGUP_F_main_BB__34_31
state: LEGUP_F_main_BB__34_31
   %main_result.02 = phi i32 [ 0, %sha_stream.exit ], [ %39, %34 ] (endState: LEGUP_F_main_BB__34_31)
   %i.01 = phi i32 [ 0, %sha_stream.exit ], [ %40, %34 ] (endState: LEGUP_F_main_BB__34_31)
   %scevgep = getelementptr [5 x i32]* @outData, i32 0, i32 %i.01 (endState: LEGUP_F_main_BB__34_31)
   %scevgep2 = getelementptr [5 x i32]* @sha_info_digest, i32 0, i32 %i.01 (endState: LEGUP_F_main_BB__34_31)
   %35 = load i32* %scevgep2, align 4, !tbaa !1 (endState: LEGUP_F_main_BB__34_33)
   %36 = load i32* %scevgep, align 4, !tbaa !1 (endState: LEGUP_F_main_BB__34_32)
   %40 = add nsw i32 %i.01, 1 (endState: LEGUP_F_main_BB__34_31)
   %exitcond1 = icmp eq i32 %40, 5 (endState: LEGUP_F_main_BB__34_31)
   Transition: default: LEGUP_F_main_BB__34_32
state: LEGUP_F_main_BB__34_32
   Transition: default: LEGUP_F_main_BB__34_33
state: LEGUP_F_main_BB__34_33
   %37 = icmp eq i32 %35, %36 (endState: LEGUP_F_main_BB__34_33)
   %38 = zext i1 %37 to i32 (endState: LEGUP_F_main_BB__34_33)
   %39 = add nsw i32 %38, %main_result.02 (endState: LEGUP_F_main_BB__34_33)
   br i1 %exitcond1, label %41, label %34
   Transition: if (%exitcond1): LEGUP_F_main_BB__41_34 default: LEGUP_F_main_BB__34_31
state: LEGUP_F_main_BB__41_34
   %42 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %39) #1 (endState: LEGUP_F_main_BB__41_34)
   %43 = icmp eq i32 %39, 5 (endState: LEGUP_F_main_BB__41_34)
   br i1 %43, label %44, label %46
   Transition: if (%43): LEGUP_F_main_BB__44_35 default: LEGUP_F_main_BB__46_36
state: LEGUP_F_main_BB__44_35
   %45 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1 (endState: LEGUP_F_main_BB__44_35)
   br label %48
   Transition: default: LEGUP_F_main_BB__48_37
state: LEGUP_F_main_BB__46_36
   %47 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1 (endState: LEGUP_F_main_BB__46_36)
   br label %48
   Transition: default: LEGUP_F_main_BB__48_37
state: LEGUP_F_main_BB__48_37
   ret i32 %39
   Transition: default: LEGUP_0

Basic Block: %.preheader.lr.ph.i.i Num States: 2
Basic Block: %.lr.ph.i.i1.i Num States: 1
Basic Block: %31 Num States: 1
Basic Block: %sha_update.exit.i.loopexit Num States: 1
Basic Block: %sha_update.exit.i Num States: 1
Basic Block: %.lr.ph.i8.preheader.i.i Num States: 2
Basic Block: %30 Num States: 1
Basic Block: %.preheader.i.i Num States: 2
Basic Block: %memcpy.exit.i.i Num States: 3
Basic Block: %.lr.ph.i8.i.i Num States: 3
Basic Block: %sha_stream.exit Num States: 4
Basic Block: %34 Num States: 3
Basic Block: %41 Num States: 1
Basic Block: %44 Num States: 1
Basic Block: %46 Num States: 1
Basic Block: %48 Num States: 1
Basic Block: %0 Num States: 4
Basic Block: %9 Num States: 5
End Function: main
--------------------------------------------------------------------------------

