Flat profile:

Each sample counts as 0.01 seconds.
 no time accumulated

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  Ts/call  Ts/call  name    
  0.00      0.00     0.00     2216     0.00     0.00  extractFloat64Exp
  0.00      0.00     0.00     2216     0.00     0.00  extractFloat64Sign
  0.00      0.00     0.00     1680     0.00     0.00  extractFloat64Frac
  0.00      0.00     0.00     1108     0.00     0.00  packFloat64
  0.00      0.00     0.00      836     0.00     0.00  roundAndPackFloat64
  0.00      0.00     0.00      594     0.00     0.00  mul64To128
  0.00      0.00     0.00      451     0.00     0.00  countLeadingZeros32
  0.00      0.00     0.00      304     0.00     0.00  float64_mul
  0.00      0.00     0.00      292     0.00     0.00  sub128
  0.00      0.00     0.00      268     0.00     0.00  float64_abs
  0.00      0.00     0.00      268     0.00     0.00  float64_add
  0.00      0.00     0.00      268     0.00     0.00  float64_div
  0.00      0.00     0.00      268     0.00     0.00  float64_ge
  0.00      0.00     0.00      268     0.00     0.00  float64_le
  0.00      0.00     0.00      268     0.00     0.00  int32_to_float64
  0.00      0.00     0.00      267     0.00     0.00  estimateDiv128To64
  0.00      0.00     0.00      231     0.00     0.00  shift64RightJamming
  0.00      0.00     0.00      184     0.00     0.00  subFloat64Sigs
  0.00      0.00     0.00      183     0.00     0.00  countLeadingZeros64
  0.00      0.00     0.00      183     0.00     0.00  normalizeRoundAndPackFloat64
  0.00      0.00     0.00       84     0.00     0.00  addFloat64Sigs
  0.00      0.00     0.00       36     0.00     0.00  dfsin
  0.00      0.00     0.00       36     0.00     0.00  float64_neg

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) no time propagated

index % time    self  children    called     name
                0.00    0.00     168/2216        addFloat64Sigs [21]
                0.00    0.00     368/2216        subFloat64Sigs [18]
                0.00    0.00     536/2216        float64_div [12]
                0.00    0.00     536/2216        float64_le [14]
                0.00    0.00     608/2216        float64_mul [8]
[1]      0.0    0.00    0.00    2216         extractFloat64Exp [1]
-----------------------------------------------
                0.00    0.00     536/2216        float64_add [11]
                0.00    0.00     536/2216        float64_div [12]
                0.00    0.00     536/2216        float64_le [14]
                0.00    0.00     608/2216        float64_mul [8]
[2]      0.0    0.00    0.00    2216         extractFloat64Sign [2]
-----------------------------------------------
                0.00    0.00     168/1680        addFloat64Sigs [21]
                0.00    0.00     368/1680        subFloat64Sigs [18]
                0.00    0.00     536/1680        float64_div [12]
                0.00    0.00     608/1680        float64_mul [8]
[3]      0.0    0.00    0.00    1680         extractFloat64Frac [3]
-----------------------------------------------
                0.00    0.00       1/1108        subFloat64Sigs [18]
                0.00    0.00       1/1108        float64_div [12]
                0.00    0.00       2/1108        float64_mul [8]
                0.00    0.00     268/1108        int32_to_float64 [15]
                0.00    0.00     836/1108        roundAndPackFloat64 [5]
[4]      0.0    0.00    0.00    1108         packFloat64 [4]
-----------------------------------------------
                0.00    0.00      84/836         addFloat64Sigs [21]
                0.00    0.00     183/836         normalizeRoundAndPackFloat64 [20]
                0.00    0.00     267/836         float64_div [12]
                0.00    0.00     302/836         float64_mul [8]
[5]      0.0    0.00    0.00     836         roundAndPackFloat64 [5]
                0.00    0.00     836/1108        packFloat64 [4]
-----------------------------------------------
                0.00    0.00      25/594         float64_div [12]
                0.00    0.00     267/594         estimateDiv128To64 [16]
                0.00    0.00     302/594         float64_mul [8]
[6]      0.0    0.00    0.00     594         mul64To128 [6]
-----------------------------------------------
                0.00    0.00     183/451         countLeadingZeros64 [19]
                0.00    0.00     268/451         int32_to_float64 [15]
[7]      0.0    0.00    0.00     451         countLeadingZeros32 [7]
-----------------------------------------------
                0.00    0.00     304/304         dfsin [22]
[8]      0.0    0.00    0.00     304         float64_mul [8]
                0.00    0.00     608/1680        extractFloat64Frac [3]
                0.00    0.00     608/2216        extractFloat64Exp [1]
                0.00    0.00     608/2216        extractFloat64Sign [2]
                0.00    0.00     302/594         mul64To128 [6]
                0.00    0.00     302/836         roundAndPackFloat64 [5]
                0.00    0.00       2/1108        packFloat64 [4]
-----------------------------------------------
                0.00    0.00      25/292         float64_div [12]
                0.00    0.00     267/292         estimateDiv128To64 [16]
[9]      0.0    0.00    0.00     292         sub128 [9]
-----------------------------------------------
                0.00    0.00     268/268         dfsin [22]
[10]     0.0    0.00    0.00     268         float64_abs [10]
-----------------------------------------------
                0.00    0.00     268/268         dfsin [22]
[11]     0.0    0.00    0.00     268         float64_add [11]
                0.00    0.00     536/2216        extractFloat64Sign [2]
                0.00    0.00     184/184         subFloat64Sigs [18]
                0.00    0.00      84/84          addFloat64Sigs [21]
-----------------------------------------------
                0.00    0.00     268/268         dfsin [22]
[12]     0.0    0.00    0.00     268         float64_div [12]
                0.00    0.00     536/1680        extractFloat64Frac [3]
                0.00    0.00     536/2216        extractFloat64Exp [1]
                0.00    0.00     536/2216        extractFloat64Sign [2]
                0.00    0.00     267/267         estimateDiv128To64 [16]
                0.00    0.00     267/836         roundAndPackFloat64 [5]
                0.00    0.00      25/594         mul64To128 [6]
                0.00    0.00      25/292         sub128 [9]
                0.00    0.00       1/1108        packFloat64 [4]
-----------------------------------------------
                0.00    0.00     268/268         dfsin [22]
[13]     0.0    0.00    0.00     268         float64_ge [13]
                0.00    0.00     268/268         float64_le [14]
-----------------------------------------------
                0.00    0.00     268/268         float64_ge [13]
[14]     0.0    0.00    0.00     268         float64_le [14]
                0.00    0.00     536/2216        extractFloat64Exp [1]
                0.00    0.00     536/2216        extractFloat64Sign [2]
-----------------------------------------------
                0.00    0.00     268/268         dfsin [22]
[15]     0.0    0.00    0.00     268         int32_to_float64 [15]
                0.00    0.00     268/451         countLeadingZeros32 [7]
                0.00    0.00     268/1108        packFloat64 [4]
-----------------------------------------------
                0.00    0.00     267/267         float64_div [12]
[16]     0.0    0.00    0.00     267         estimateDiv128To64 [16]
                0.00    0.00     267/594         mul64To128 [6]
                0.00    0.00     267/292         sub128 [9]
-----------------------------------------------
                0.00    0.00      84/231         addFloat64Sigs [21]
                0.00    0.00     147/231         subFloat64Sigs [18]
[17]     0.0    0.00    0.00     231         shift64RightJamming [17]
-----------------------------------------------
                0.00    0.00     184/184         float64_add [11]
[18]     0.0    0.00    0.00     184         subFloat64Sigs [18]
                0.00    0.00     368/1680        extractFloat64Frac [3]
                0.00    0.00     368/2216        extractFloat64Exp [1]
                0.00    0.00     183/183         normalizeRoundAndPackFloat64 [20]
                0.00    0.00     147/231         shift64RightJamming [17]
                0.00    0.00       1/1108        packFloat64 [4]
-----------------------------------------------
                0.00    0.00     183/183         normalizeRoundAndPackFloat64 [20]
[19]     0.0    0.00    0.00     183         countLeadingZeros64 [19]
                0.00    0.00     183/451         countLeadingZeros32 [7]
-----------------------------------------------
                0.00    0.00     183/183         subFloat64Sigs [18]
[20]     0.0    0.00    0.00     183         normalizeRoundAndPackFloat64 [20]
                0.00    0.00     183/183         countLeadingZeros64 [19]
                0.00    0.00     183/836         roundAndPackFloat64 [5]
-----------------------------------------------
                0.00    0.00      84/84          float64_add [11]
[21]     0.0    0.00    0.00      84         addFloat64Sigs [21]
                0.00    0.00     168/1680        extractFloat64Frac [3]
                0.00    0.00     168/2216        extractFloat64Exp [1]
                0.00    0.00      84/231         shift64RightJamming [17]
                0.00    0.00      84/836         roundAndPackFloat64 [5]
-----------------------------------------------
                0.00    0.00      36/36          main [33]
[22]     0.0    0.00    0.00      36         dfsin [22]
                0.00    0.00     304/304         float64_mul [8]
                0.00    0.00     268/268         int32_to_float64 [15]
                0.00    0.00     268/268         float64_div [12]
                0.00    0.00     268/268         float64_add [11]
                0.00    0.00     268/268         float64_abs [10]
                0.00    0.00     268/268         float64_ge [13]
                0.00    0.00      36/36          float64_neg [23]
-----------------------------------------------
                0.00    0.00      36/36          dfsin [22]
[23]     0.0    0.00    0.00      36         float64_neg [23]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [21] addFloat64Sigs (softfloat.c) [10] float64_abs       [6] mul64To128
   [7] countLeadingZeros32 (softfloat-macros) [11] float64_add [20] normalizeRoundAndPackFloat64 (softfloat.c)
  [19] countLeadingZeros64 (softfloat-macros) [12] float64_div [4] packFloat64
  [22] dfsin                  [13] float64_ge              [5] roundAndPackFloat64 (softfloat.c)
  [16] estimateDiv128To64 (softfloat-macros) [14] float64_le [17] shift64RightJamming
   [1] extractFloat64Exp       [8] float64_mul             [9] sub128
   [3] extractFloat64Frac     [23] float64_neg            [18] subFloat64Sigs (softfloat.c)
   [2] extractFloat64Sign     [15] int32_to_float64
