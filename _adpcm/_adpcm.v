//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 15 11:37:16 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 43
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @ah1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_ah1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ah1_a {`TAG_g_ah1, 23'd216}
// @ah2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_ah2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ah2_a {`TAG_g_ah2, 23'd184}
// @al1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_al1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_al1_a {`TAG_g_al1, 23'd252}
// @al2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_al2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_al2_a {`TAG_g_al2, 23'd244}
// @delay_bph = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bph `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_bph_a {`TAG_g_delay_bph, 23'd192}
// @delay_bpl = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bpl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_bpl_a {`TAG_g_delay_bpl, 23'd96}
// @delay_dhx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dhx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_dhx_a {`TAG_g_delay_dhx, 23'd160}
// @delay_dltx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dltx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_dltx_a {`TAG_g_delay_dltx, 23'd128}
// @deth = internal unnamed_addr global i32 0, align 4
`define TAG_g_deth `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_deth_a {`TAG_g_deth, 23'd156}
// @detl = internal unnamed_addr global i32 0, align 4
`define TAG_g_detl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_detl_a {`TAG_g_detl, 23'd240}
// @h = internal unnamed_addr constant [24 x i32] [i32 12, i32 -44, i32 -44, i32 212, i32 48, i32 -624, i32 128, i32 1448, i32 -840, i32 -3220, i32 3804, i32 15504, i32 15504, i32 3804, i32 -3220, i32 -8...
`define TAG_g_h `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_h_a {`TAG_g_h, 23'd384}
// @il = internal unnamed_addr global i32 0, align 4
`define TAG_g_il `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_il_a {`TAG_g_il, 23'd236}
// @ilb_table = internal unnamed_addr constant [32 x i32] [i32 2048, i32 2093, i32 2139, i32 2186, i32 2233, i32 2282, i32 2332, i32 2383, i32 2435, i32 2489, i32 2543, i32 2599, i32 2656, i32 2714, i32 ...
`define TAG_g_ilb_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_ilb_table_a {`TAG_g_ilb_table, 23'd0}
// @nbh = internal unnamed_addr global i32 0, align 4
`define TAG_g_nbh `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_nbh_a {`TAG_g_nbh, 23'd152}
// @nbl = internal unnamed_addr global i32 0, align 4
`define TAG_g_nbl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_nbl_a {`TAG_g_nbl, 23'd232}
// @ph1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_ph1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ph1_a {`TAG_g_ph1, 23'd124}
// @ph2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_ph2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ph2_a {`TAG_g_ph2, 23'd120}
// @plt1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_plt1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_plt1_a {`TAG_g_plt1, 23'd228}
// @plt2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_plt2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_plt2_a {`TAG_g_plt2, 23'd224}
// @qq2_code2_table = internal unnamed_addr constant [4 x i32] [i32 -7408, i32 -1616, i32 7408, i32 1616], align 4
`define TAG_g_qq2_code2_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_qq2_code2_table_a {`TAG_g_qq2_code2_table, 23'd480}
// @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, ...
`define TAG_g_qq4_code4_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_qq4_code4_table_a {`TAG_g_qq4_code4_table, 23'd512}
// @quant26bt_neg = internal unnamed_addr constant [31 x i32] [i32 63, i32 62, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 ...
`define TAG_g_quant26bt_neg `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_quant26bt_neg_a {`TAG_g_quant26bt_neg, 23'd256}
// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
`define TAG_g_quant26bt_pos `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_quant26bt_pos_a {`TAG_g_quant26bt_pos, 23'd128}
// @rh1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_rh1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rh1_a {`TAG_g_rh1, 23'd220}
// @rh2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_rh2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rh2_a {`TAG_g_rh2, 23'd188}
// @rlt1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_rlt1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rlt1_a {`TAG_g_rlt1, 23'd256}
// @rlt2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_rlt2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rlt2_a {`TAG_g_rlt2, 23'd248}
// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
`define TAG_g_tqmf `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_tqmf_a {`TAG_g_tqmf, 23'd0}
// @wh_code_table = internal unnamed_addr constant [4 x i32] [i32 798, i32 -214, i32 798, i32 -214], align 4
`define TAG_g_wh_code_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_wh_code_table_a {`TAG_g_wh_code_table, 23'd496}
// @wl_code_table = internal unnamed_addr constant [16 x i32] [i32 -60, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32...
`define TAG_g_wl_code_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_wl_code_table_a {`TAG_g_wl_code_table, 23'd576}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [7:0] rom_32_address_a;
reg [7:0] rom_32_address_b;
reg rom_32_write_enable_a;
reg rom_32_write_enable_b;
reg [31:0] rom_32_in_a;
reg [31:0] rom_32_in_b;
wire [31:0] rom_32_out_a;
wire [31:0] rom_32_out_b;

// @h = internal unnamed_addr constant [24 x i32] [i32 12, i32 -44, i32 -44, i32 212, i32 48, i32 -624, i32 128, i32 1448, i32 -840, i32 -3220, i32 3804, i32 15504, i32 15504, i32 3804, i32 -3220, i32 -8...
rom_dual_port rom_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_32_address_a ),
	.address_b( rom_32_address_b ),
	.q_a( rom_32_out_a ),
	.q_b( rom_32_out_b)
);
defparam rom_32.width_a = 32;
defparam rom_32.width_b = 32;
defparam rom_32.widthad_a = 8;
defparam rom_32.widthad_b = 8;
defparam rom_32.numwords_a = 160;
defparam rom_32.numwords_b = 160;
defparam rom_32.latency = ram_latency;
defparam rom_32.init_file = "rom_32.mif";

reg [6:0] ram_32_address_a;
reg [6:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 7;
defparam ram_32.widthad_b = 7;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 65;
defparam ram_32.numwords_b = 65;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_32_a;
assign select_rom_32_a = (tag_a == 2);
reg [ram_latency:0] select_rom_32_reg_a;
wire [31:0] memory_controller_rom_32_out_a;
assign memory_controller_rom_32_out_a = {32{ select_rom_32_reg_a[ram_latency]}} & rom_32_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 3);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	rom_32_address_a = memory_controller_address_a [8-1+2:2] & {8{select_rom_32_a}};
	rom_32_write_enable_a = memory_controller_write_enable_a & select_rom_32_a;
	rom_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ram_32_address_a = memory_controller_address_a [7-1+2:2] & {7{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_rom_32_reg_a[ram_latency]}} | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_32_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_32_b;
assign select_rom_32_b = (tag_b == 2);
reg [ram_latency:0] select_rom_32_reg_b;
wire [31:0] memory_controller_rom_32_out_b;
assign memory_controller_rom_32_out_b = {32{ select_rom_32_reg_b[ram_latency]}} & rom_32_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 3);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	rom_32_address_b = memory_controller_address_b [8-1+2:2] & {8{select_rom_32_b}};
	rom_32_write_enable_b = memory_controller_write_enable_b & select_rom_32_b;
	rom_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ram_32_address_b = memory_controller_address_b [7-1+2:2] & {7{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_rom_32_reg_b[ram_latency]}} | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_32_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module encode
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_xin1,
	arg_xin2
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_encode_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_encode_BB__0_2 = 8'd2;
parameter [7:0] LEGUP_F_encode_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_encode_BB__0_4 = 8'd4;
parameter [7:0] LEGUP_F_encode_BB__5_5 = 8'd5;
parameter [7:0] LEGUP_F_encode_BB__10_6 = 8'd6;
parameter [7:0] LEGUP_F_encode_BB__10_7 = 8'd7;
parameter [7:0] LEGUP_F_encode_BB__10_8 = 8'd8;
parameter [7:0] LEGUP_F_encode_BB__10_9 = 8'd9;
parameter [7:0] LEGUP_F_encode_BB__10_10 = 8'd10;
parameter [7:0] LEGUP_F_encode_BB__20_11 = 8'd11;
parameter [7:0] LEGUP_F_encode_BB__20_12 = 8'd12;
parameter [7:0] LEGUP_F_encode_BB__20_13 = 8'd13;
parameter [7:0] LEGUP_F_encode_BB__23_14 = 8'd14;
parameter [7:0] LEGUP_F_encode_BB__25_15 = 8'd15;
parameter [7:0] LEGUP_F_encode_BB__25_16 = 8'd16;
parameter [7:0] LEGUP_F_encode_BB__25_17 = 8'd17;
parameter [7:0] LEGUP_F_encode_BB__25_18 = 8'd18;
parameter [7:0] LEGUP_F_encode_BB__25_19 = 8'd19;
parameter [7:0] LEGUP_F_encode_BB__30_20 = 8'd20;
parameter [7:0] LEGUP_F_encode_BB__30_21 = 8'd21;
parameter [7:0] LEGUP_F_encode_BB__30_22 = 8'd22;
parameter [7:0] LEGUP_F_encode_BB__30_23 = 8'd23;
parameter [7:0] LEGUP_F_encode_BB__30_24 = 8'd24;
parameter [7:0] LEGUP_F_encode_BB__36_25 = 8'd25;
parameter [7:0] LEGUP_F_encode_BB__37_26 = 8'd26;
parameter [7:0] LEGUP_F_encode_BB__37_27 = 8'd27;
parameter [7:0] LEGUP_F_encode_BB__37_28 = 8'd28;
parameter [7:0] LEGUP_F_encode_BB__37_29 = 8'd29;
parameter [7:0] LEGUP_F_encode_BB_filtezexit_30 = 8'd30;
parameter [7:0] LEGUP_F_encode_BB_filtezexit_31 = 8'd31;
parameter [7:0] LEGUP_F_encode_BB_filtezexit_32 = 8'd32;
parameter [7:0] LEGUP_F_encode_BB_filtezexit_33 = 8'd33;
parameter [7:0] LEGUP_F_encode_BB_filtezexit_34 = 8'd34;
parameter [7:0] LEGUP_F_encode_BB__64_35 = 8'd35;
parameter [7:0] LEGUP_F_encode_BB__67_36 = 8'd36;
parameter [7:0] LEGUP_F_encode_BB__67_37 = 8'd37;
parameter [7:0] LEGUP_F_encode_BB__67_38 = 8'd38;
parameter [7:0] LEGUP_F_encode_BB__72_39 = 8'd39;
parameter [7:0] LEGUP_F_encode_BB_loopexiti_40 = 8'd40;
parameter [7:0] LEGUP_F_encode_BB_loopexiti_41 = 8'd41;
parameter [7:0] LEGUP_F_encode_BB_loopexiti_42 = 8'd42;
parameter [7:0] LEGUP_F_encode_BB_loopexiti_43 = 8'd43;
parameter [7:0] LEGUP_F_encode_BB_loopexiti_44 = 8'd44;
parameter [7:0] LEGUP_F_encode_BB_loopexiti_45 = 8'd45;
parameter [7:0] LEGUP_F_encode_BB_loopexiti_46 = 8'd46;
parameter [7:0] LEGUP_F_encode_BB__87_47 = 8'd47;
parameter [7:0] LEGUP_F_encode_BB_logsclexit_48 = 8'd48;
parameter [7:0] LEGUP_F_encode_BB_logsclexit_49 = 8'd49;
parameter [7:0] LEGUP_F_encode_BB_logsclexit_50 = 8'd50;
parameter [7:0] LEGUP_F_encode_BB_logsclexit_51 = 8'd51;
parameter [7:0] LEGUP_F_encode_BB_preheader30preheader_52 = 8'd52;
parameter [7:0] LEGUP_F_encode_BB_preheader29preheader_53 = 8'd53;
parameter [7:0] LEGUP_F_encode_BB_preheader29_54 = 8'd54;
parameter [7:0] LEGUP_F_encode_BB__100_55 = 8'd55;
parameter [7:0] LEGUP_F_encode_BB__100_56 = 8'd56;
parameter [7:0] LEGUP_F_encode_BB__100_57 = 8'd57;
parameter [7:0] LEGUP_F_encode_BB__100_58 = 8'd58;
parameter [7:0] LEGUP_F_encode_BB__100_59 = 8'd59;
parameter [7:0] LEGUP_F_encode_BB_preheader30_60 = 8'd60;
parameter [7:0] LEGUP_F_encode_BB__106_61 = 8'd61;
parameter [7:0] LEGUP_F_encode_BB__106_62 = 8'd62;
parameter [7:0] LEGUP_F_encode_BB__106_63 = 8'd63;
parameter [7:0] LEGUP_F_encode_BB__106_64 = 8'd64;
parameter [7:0] LEGUP_F_encode_BB__106_65 = 8'd65;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit21loopexit_66 = 8'd66;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit21loopexit2_67 = 8'd67;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit21_68 = 8'd68;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit21_69 = 8'd69;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit21_70 = 8'd70;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit21_71 = 8'd71;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit21_72 = 8'd72;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit21_73 = 8'd73;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit21_74 = 8'd74;
parameter [7:0] LEGUP_F_encode_BB__135_75 = 8'd75;
parameter [7:0] LEGUP_F_encode_BB_uppol2exit17_76 = 8'd76;
parameter [7:0] LEGUP_F_encode_BB_uppol2exit17_77 = 8'd77;
parameter [7:0] LEGUP_F_encode_BB_uppol2exit17_78 = 8'd78;
parameter [7:0] LEGUP_F_encode_BB_uppol2exit17_79 = 8'd79;
parameter [7:0] LEGUP_F_encode_BB_uppol2exit17_80 = 8'd80;
parameter [7:0] LEGUP_F_encode_BB_uppol2exit17_81 = 8'd81;
parameter [7:0] LEGUP_F_encode_BB__150_82 = 8'd82;
parameter [7:0] LEGUP_F_encode_BB__151_83 = 8'd83;
parameter [7:0] LEGUP_F_encode_BB__151_84 = 8'd84;
parameter [7:0] LEGUP_F_encode_BB__151_85 = 8'd85;
parameter [7:0] LEGUP_F_encode_BB__151_86 = 8'd86;
parameter [7:0] LEGUP_F_encode_BB_filtezexit8_87 = 8'd87;
parameter [7:0] LEGUP_F_encode_BB_filtezexit8_88 = 8'd88;
parameter [7:0] LEGUP_F_encode_BB_filtezexit8_89 = 8'd89;
parameter [7:0] LEGUP_F_encode_BB_filtezexit8_90 = 8'd90;
parameter [7:0] LEGUP_F_encode_BB_filtezexit8_91 = 8'd91;
parameter [7:0] LEGUP_F_encode_BB_filtezexit8_92 = 8'd92;
parameter [7:0] LEGUP_F_encode_BB_filtezexit8_93 = 8'd93;
parameter [7:0] LEGUP_F_encode_BB_filtezexit8_94 = 8'd94;
parameter [7:0] LEGUP_F_encode_BB_filtezexit8_95 = 8'd95;
parameter [7:0] LEGUP_F_encode_BB_filtezexit8_96 = 8'd96;
parameter [7:0] LEGUP_F_encode_BB__188_97 = 8'd97;
parameter [7:0] LEGUP_F_encode_BB_logschexit_98 = 8'd98;
parameter [7:0] LEGUP_F_encode_BB_logschexit_99 = 8'd99;
parameter [7:0] LEGUP_F_encode_BB_logschexit_100 = 8'd100;
parameter [7:0] LEGUP_F_encode_BB_logschexit_101 = 8'd101;
parameter [7:0] LEGUP_F_encode_BB_preheader27preheader_102 = 8'd102;
parameter [7:0] LEGUP_F_encode_BB_preheaderpreheader_103 = 8'd103;
parameter [7:0] LEGUP_F_encode_BB_preheader_104 = 8'd104;
parameter [7:0] LEGUP_F_encode_BB__201_105 = 8'd105;
parameter [7:0] LEGUP_F_encode_BB__201_106 = 8'd106;
parameter [7:0] LEGUP_F_encode_BB__201_107 = 8'd107;
parameter [7:0] LEGUP_F_encode_BB__201_108 = 8'd108;
parameter [7:0] LEGUP_F_encode_BB__201_109 = 8'd109;
parameter [7:0] LEGUP_F_encode_BB_preheader27_110 = 8'd110;
parameter [7:0] LEGUP_F_encode_BB__207_111 = 8'd111;
parameter [7:0] LEGUP_F_encode_BB__207_112 = 8'd112;
parameter [7:0] LEGUP_F_encode_BB__207_113 = 8'd113;
parameter [7:0] LEGUP_F_encode_BB__207_114 = 8'd114;
parameter [7:0] LEGUP_F_encode_BB__207_115 = 8'd115;
parameter [7:0] LEGUP_F_encode_BB_upzeroexitloopexit_116 = 8'd116;
parameter [7:0] LEGUP_F_encode_BB_upzeroexitloopexit1_117 = 8'd117;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit_118 = 8'd118;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit_119 = 8'd119;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit_120 = 8'd120;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit_121 = 8'd121;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit_122 = 8'd122;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit_123 = 8'd123;
parameter [7:0] LEGUP_F_encode_BB_upzeroexit_124 = 8'd124;
parameter [7:0] LEGUP_F_encode_BB__236_125 = 8'd125;
parameter [7:0] LEGUP_F_encode_BB_uppol2exit_126 = 8'd126;
parameter [7:0] LEGUP_F_encode_BB_uppol2exit_127 = 8'd127;
parameter [7:0] LEGUP_F_encode_BB_uppol2exit_128 = 8'd128;
parameter [7:0] LEGUP_F_encode_BB_uppol2exit_129 = 8'd129;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_xin1;
input [31:0] arg_xin2;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] encode_0_1;
reg [31:0] encode_0_1_reg;
reg [31:0] encode_0_2;
reg [31:0] encode_0_2_reg;
reg [31:0] encode_0_3;
reg [31:0] encode_0_3_reg;
reg [31:0] encode_0_4;
reg [31:0] encode_0_4_reg;
reg [31:0] encode_5_6;
reg [31:0] encode_5_6_reg;
reg [31:0] encode_5_xa0;
reg [31:0] encode_5_xa0_reg;
reg [31:0] encode_5_xb0;
reg [31:0] encode_5_xb0_reg;
reg [31:0] encode_5_7;
reg [31:0] encode_5_7_reg;
reg [31:0] encode_5_8;
reg [31:0] encode_5_8_reg;
reg [31:0] encode_5_9;
reg [31:0] encode_5_9_reg;
reg  encode_5_exitcond23;
reg  encode_5_exitcond23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_10_scevgep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_10_scevgep27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_10_h_ptr0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_10_h_ptr0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_10_scevgep25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_10_scevgep25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_10_tqmf_ptr0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_10_tqmf_ptr0_reg;
reg [31:0] encode_10_11;
reg [31:0] encode_10_11_reg;
reg [31:0] encode_10_12;
reg [31:0] encode_10_12_reg;
reg [31:0] encode_10_13;
reg [31:0] encode_10_13_reg;
reg [31:0] encode_10_14;
reg [31:0] encode_10_14_reg;
reg [31:0] encode_10_15;
reg [31:0] encode_10_15_reg;
reg [31:0] encode_10_16;
reg [31:0] encode_10_16_reg;
reg [31:0] encode_10_17;
reg [31:0] encode_10_17_reg;
reg [31:0] encode_10_18;
reg [31:0] encode_10_18_reg;
reg [31:0] encode_10_19;
reg [31:0] encode_10_19_reg;
reg [31:0] encode_20_21;
reg [31:0] encode_20_21_reg;
reg [31:0] encode_20_22;
reg [31:0] encode_20_22_reg;
reg [31:0] encode_23_24;
reg [31:0] encode_23_24_reg;
reg  encode_23_exitcond20;
reg  encode_23_exitcond20_reg;
reg [31:0] encode_25_26;
reg [31:0] encode_25_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_25_tqmf_ptr1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_25_tqmf_ptr1_reg;
reg [31:0] encode_25_27;
reg [31:0] encode_25_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_25_tqmf_ptr10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_25_tqmf_ptr10_reg;
reg [31:0] encode_25_28;
reg [31:0] encode_25_28_reg;
reg [31:0] encode_25_29;
reg [31:0] encode_25_29_reg;
reg [31:0] encode_30_31;
reg [31:0] encode_30_31_reg;
reg [31:0] encode_30_32;
reg [31:0] encode_30_32_reg;
reg [31:0] encode_30_33;
reg [31:0] encode_30_33_reg;
reg [31:0] encode_30_34;
reg [31:0] encode_30_34_reg;
reg [31:0] encode_30_35;
reg [31:0] encode_30_35_reg;
reg [31:0] encode_36_indvar15;
reg [31:0] encode_36_indvar15_reg;
reg [31:0] encode_36_zl0i;
reg [31:0] encode_36_zl0i_reg;
reg [31:0] encode_36_i0i;
reg [31:0] encode_36_i0i_reg;
reg  encode_36_exitcond17;
reg  encode_36_exitcond17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_37_0i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_37_0i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_37_01i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_37_01i_reg;
reg [31:0] encode_37_38;
reg [31:0] encode_37_38_reg;
reg [31:0] encode_37_39;
reg [31:0] encode_37_39_reg;
reg [31:0] encode_37_40;
reg [31:0] encode_37_40_reg;
reg [31:0] encode_37_41;
reg [31:0] encode_37_41_reg;
reg [31:0] encode_37_indvarnext16;
reg [31:0] encode_37_indvarnext16_reg;
reg [31:0] encode_filtezexit_42;
reg [31:0] encode_filtezexit_42_reg;
reg [31:0] encode_filtezexit_43;
reg [31:0] encode_filtezexit_43_reg;
reg [31:0] encode_filtezexit_44;
reg [31:0] encode_filtezexit_44_reg;
reg [31:0] encode_filtezexit_45;
reg [31:0] encode_filtezexit_45_reg;
reg [31:0] encode_filtezexit_46;
reg [31:0] encode_filtezexit_46_reg;
reg [31:0] encode_filtezexit_47;
reg [31:0] encode_filtezexit_47_reg;
reg [31:0] encode_filtezexit_48;
reg [31:0] encode_filtezexit_48_reg;
reg [31:0] encode_filtezexit_49;
reg [31:0] encode_filtezexit_49_reg;
reg [31:0] encode_filtezexit_50;
reg [31:0] encode_filtezexit_50_reg;
reg [31:0] encode_filtezexit_51;
reg [31:0] encode_filtezexit_51_reg;
reg [31:0] encode_filtezexit_52;
reg [31:0] encode_filtezexit_52_reg;
reg [31:0] encode_filtezexit_53;
reg [31:0] encode_filtezexit_53_reg;
reg [31:0] encode_filtezexit_54;
reg [31:0] encode_filtezexit_54_reg;
reg [31:0] encode_filtezexit_55;
reg [31:0] encode_filtezexit_55_reg;
reg [31:0] encode_filtezexit_56;
reg [31:0] encode_filtezexit_56_reg;
reg [31:0] encode_filtezexit_57;
reg [31:0] encode_filtezexit_57_reg;
reg [31:0] encode_filtezexit_58;
reg [31:0] encode_filtezexit_58_reg;
reg [31:0] encode_filtezexit_59;
reg [31:0] encode_filtezexit_59_reg;
reg [31:0] encode_filtezexit_60;
reg [31:0] encode_filtezexit_60_reg;
reg [31:0] encode_filtezexit_61;
reg [31:0] encode_filtezexit_61_reg;
reg  encode_filtezexit_62;
reg  encode_filtezexit_62_reg;
reg [31:0] encode_filtezexit_63;
reg [31:0] encode_filtezexit_63_reg;
reg [31:0] encode_filtezexit_;
reg [31:0] encode_filtezexit__reg;
reg [31:0] encode_64_65;
reg [31:0] encode_64_65_reg;
reg  encode_64_66;
reg  encode_64_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_67_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_67_scevgep14_reg;
reg [31:0] encode_67_68;
reg [31:0] encode_67_68_reg;
reg [31:0] encode_67_69;
reg [31:0] encode_67_69_reg;
reg [31:0] encode_67_70;
reg [31:0] encode_67_70_reg;
reg  encode_67_71;
reg  encode_67_71_reg;
reg [31:0] encode_72_73;
reg [31:0] encode_72_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_loopexiti_quant26bt_posquant26bt_neg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_loopexiti_quant26bt_posquant26bt_neg_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_loopexiti_in;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_loopexiti_in_reg;
reg [31:0] encode_loopexiti_74;
reg [31:0] encode_loopexiti_74_reg;
reg [31:0] encode_loopexiti_75;
reg [31:0] encode_loopexiti_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_loopexiti_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_loopexiti_76_reg;
reg [31:0] encode_loopexiti_77;
reg [31:0] encode_loopexiti_77_reg;
reg [31:0] encode_loopexiti_78;
reg [31:0] encode_loopexiti_78_reg;
reg [31:0] encode_loopexiti_79;
reg [31:0] encode_loopexiti_79_reg;
reg [31:0] encode_loopexiti_80;
reg [31:0] encode_loopexiti_80_reg;
reg [31:0] encode_loopexiti_81;
reg [31:0] encode_loopexiti_81_reg;
reg [31:0] encode_loopexiti_82;
reg [31:0] encode_loopexiti_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_loopexiti_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_loopexiti_83_reg;
reg [31:0] encode_loopexiti_84;
reg [31:0] encode_loopexiti_84_reg;
reg [31:0] encode_loopexiti_85;
reg [31:0] encode_loopexiti_85_reg;
reg  encode_loopexiti_86;
reg  encode_loopexiti_86_reg;
reg  encode_87_88;
reg  encode_87_88_reg;
reg [31:0] encode_87_39;
reg [31:0] encode_87_39_reg;
reg [31:0] encode_logsclexit_1i23;
reg [31:0] encode_logsclexit_1i23_reg;
reg [31:0] encode_logsclexit_89;
reg [31:0] encode_logsclexit_89_reg;
reg [31:0] encode_logsclexit_90;
reg [31:0] encode_logsclexit_90_reg;
reg [31:0] encode_logsclexit_91;
reg [31:0] encode_logsclexit_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_logsclexit_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_logsclexit_92_reg;
reg [31:0] encode_logsclexit_93;
reg [31:0] encode_logsclexit_93_reg;
reg [31:0] encode_logsclexit_94;
reg [31:0] encode_logsclexit_94_reg;
reg [31:0] encode_logsclexit_95;
reg [31:0] encode_logsclexit_95_reg;
reg [31:0] encode_logsclexit_96;
reg [31:0] encode_logsclexit_96_reg;
reg [31:0] encode_logsclexit_97;
reg [31:0] encode_logsclexit_97_reg;
reg  encode_logsclexit_98;
reg  encode_logsclexit_98_reg;
reg [31:0] encode_preheader29_99;
reg [31:0] encode_preheader29_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader29_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader29_scevgep10_reg;
reg  encode_preheader29_exitcond9;
reg  encode_preheader29_exitcond9_reg;
reg [31:0] encode_100_101;
reg [31:0] encode_100_101_reg;
reg [31:0] encode_100_102;
reg [31:0] encode_100_102_reg;
reg [31:0] encode_100_103;
reg [31:0] encode_100_103_reg;
reg [31:0] encode_100_104;
reg [31:0] encode_100_104_reg;
reg [31:0] encode_preheader30_105;
reg [31:0] encode_preheader30_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader30_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader30_scevgep12_reg;
reg  encode_preheader30_exitcond11;
reg  encode_preheader30_exitcond11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_106_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_106_scevgep13_reg;
reg [31:0] encode_106_107;
reg [31:0] encode_106_107_reg;
reg [31:0] encode_106_108;
reg [31:0] encode_106_108_reg;
reg [31:0] encode_106_109;
reg [31:0] encode_106_109_reg;
reg [31:0] encode_106_110;
reg [31:0] encode_106_110_reg;
reg [31:0] encode_106_111;
reg [31:0] encode_106_111_reg;
reg [31:0] encode_106_112;
reg [31:0] encode_106_112_reg;
reg [31:0] encode_106_113;
reg [31:0] encode_106_113_reg;
reg [31:0] encode_106_114;
reg [31:0] encode_106_114_reg;
reg [31:0] encode_106_115;
reg [31:0] encode_106_115_reg;
reg [31:0] encode_106_116;
reg [31:0] encode_106_116_reg;
reg [31:0] encode_upzeroexit21_117;
reg [31:0] encode_upzeroexit21_117_reg;
reg [31:0] encode_upzeroexit21_118;
reg [31:0] encode_upzeroexit21_118_reg;
reg [31:0] encode_upzeroexit21_119;
reg [31:0] encode_upzeroexit21_119_reg;
reg [31:0] encode_upzeroexit21_120;
reg [31:0] encode_upzeroexit21_120_reg;
reg [31:0] encode_upzeroexit21_121;
reg [31:0] encode_upzeroexit21_121_reg;
reg [31:0] encode_upzeroexit21_122;
reg [31:0] encode_upzeroexit21_122_reg;
reg [31:0] encode_upzeroexit21_123;
reg [31:0] encode_upzeroexit21_123_reg;
reg  encode_upzeroexit21_124;
reg  encode_upzeroexit21_124_reg;
reg [31:0] encode_upzeroexit21_125;
reg [31:0] encode_upzeroexit21_125_reg;
reg [31:0] encode_upzeroexit21_41;
reg [31:0] encode_upzeroexit21_41_reg;
reg [31:0] encode_upzeroexit21_126;
reg [31:0] encode_upzeroexit21_126_reg;
reg [31:0] encode_upzeroexit21_127;
reg [31:0] encode_upzeroexit21_127_reg;
reg [31:0] encode_upzeroexit21_128;
reg [31:0] encode_upzeroexit21_128_reg;
reg [31:0] encode_upzeroexit21_129;
reg [31:0] encode_upzeroexit21_129_reg;
reg [31:0] encode_upzeroexit21_130;
reg [31:0] encode_upzeroexit21_130_reg;
reg [31:0] encode_upzeroexit21_wd40i14;
reg [31:0] encode_upzeroexit21_wd40i14_reg;
reg [31:0] encode_upzeroexit21_131;
reg [31:0] encode_upzeroexit21_131_reg;
reg [31:0] encode_upzeroexit21_132;
reg [31:0] encode_upzeroexit21_132_reg;
reg [31:0] encode_upzeroexit21_133;
reg [31:0] encode_upzeroexit21_133_reg;
reg  encode_upzeroexit21_134;
reg  encode_upzeroexit21_134_reg;
reg  encode_135_136;
reg  encode_135_136_reg;
reg [31:0] encode_135_42;
reg [31:0] encode_135_42_reg;
reg [31:0] encode_uppol2exit17_apl21i16;
reg [31:0] encode_uppol2exit17_apl21i16_reg;
reg [31:0] encode_uppol2exit17_137;
reg [31:0] encode_uppol2exit17_137_reg;
reg [31:0] encode_uppol2exit17_138;
reg [31:0] encode_uppol2exit17_138_reg;
reg [31:0] encode_uppol2exit17_139;
reg [31:0] encode_uppol2exit17_139_reg;
reg [31:0] encode_uppol2exit17_140;
reg [31:0] encode_uppol2exit17_140_reg;
reg [31:0] encode_uppol2exit17_141;
reg [31:0] encode_uppol2exit17_141_reg;
reg [31:0] encode_uppol2exit17_apl10i9;
reg [31:0] encode_uppol2exit17_apl10i9_reg;
reg [31:0] encode_uppol2exit17_142;
reg [31:0] encode_uppol2exit17_142_reg;
reg  encode_uppol2exit17_143;
reg  encode_uppol2exit17_143_reg;
reg [31:0] encode_uppol2exit17_apl10i9_var0;
reg [31:0] encode_uppol2exit17_apl10i9_var0_reg;
reg [31:0] encode_uppol2exit17_144;
reg [31:0] encode_uppol2exit17_144_reg;
reg  encode_uppol2exit17_145;
reg  encode_uppol2exit17_145_reg;
reg [31:0] encode_uppol2exit17_apl12i11;
reg [31:0] encode_uppol2exit17_apl12i11_reg;
reg [31:0] encode_uppol2exit17_146;
reg [31:0] encode_uppol2exit17_146_reg;
reg [31:0] encode_uppol2exit17_147;
reg [31:0] encode_uppol2exit17_147_reg;
reg [31:0] encode_uppol2exit17_148;
reg [31:0] encode_uppol2exit17_148_reg;
reg [31:0] encode_uppol2exit17_149;
reg [31:0] encode_uppol2exit17_149_reg;
reg [31:0] encode_150_indvar;
reg [31:0] encode_150_indvar_reg;
reg [31:0] encode_150_zl0i4;
reg [31:0] encode_150_zl0i4_reg;
reg [31:0] encode_150_i0i5;
reg [31:0] encode_150_i0i5_reg;
reg  encode_150_exitcond6;
reg  encode_150_exitcond6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_151_0i7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_151_0i7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_151_01i6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_151_01i6_reg;
reg [31:0] encode_151_152;
reg [31:0] encode_151_152_reg;
reg [31:0] encode_151_153;
reg [31:0] encode_151_153_reg;
reg [31:0] encode_151_154;
reg [31:0] encode_151_154_reg;
reg [31:0] encode_151_155;
reg [31:0] encode_151_155_reg;
reg [31:0] encode_151_indvarnext;
reg [31:0] encode_151_indvarnext_reg;
reg [31:0] encode_filtezexit8_156;
reg [31:0] encode_filtezexit8_156_reg;
reg [31:0] encode_filtezexit8_157;
reg [31:0] encode_filtezexit8_157_reg;
reg [31:0] encode_filtezexit8_158;
reg [31:0] encode_filtezexit8_158_reg;
reg [31:0] encode_filtezexit8_159;
reg [31:0] encode_filtezexit8_159_reg;
reg [31:0] encode_filtezexit8_160;
reg [31:0] encode_filtezexit8_160_reg;
reg [31:0] encode_filtezexit8_161;
reg [31:0] encode_filtezexit8_161_reg;
reg [31:0] encode_filtezexit8_162;
reg [31:0] encode_filtezexit8_162_reg;
reg [31:0] encode_filtezexit8_163;
reg [31:0] encode_filtezexit8_163_reg;
reg [31:0] encode_filtezexit8_164;
reg [31:0] encode_filtezexit8_164_reg;
reg [31:0] encode_filtezexit8_165;
reg [31:0] encode_filtezexit8_165_reg;
reg [31:0] encode_filtezexit8_166;
reg [31:0] encode_filtezexit8_166_reg;
reg [31:0] encode_filtezexit8_167;
reg [31:0] encode_filtezexit8_167_reg;
reg [31:0] encode_filtezexit8_168;
reg [31:0] encode_filtezexit8_168_reg;
reg  encode_filtezexit8_169;
reg  encode_filtezexit8_169_reg;
reg [31:0] encode_filtezexit8_170;
reg [31:0] encode_filtezexit8_170_reg;
reg [31:0] encode_filtezexit8_171;
reg [31:0] encode_filtezexit8_171_reg;
reg [31:0] encode_filtezexit8_172;
reg [31:0] encode_filtezexit8_172_reg;
reg [31:0] encode_filtezexit8_173;
reg [31:0] encode_filtezexit8_173_reg;
reg [31:0] encode_filtezexit8_174;
reg [31:0] encode_filtezexit8_174_reg;
reg [31:0] encode_filtezexit8_175;
reg [31:0] encode_filtezexit8_175_reg;
reg [31:0] encode_filtezexit8_5;
reg [31:0] encode_filtezexit8_5_reg;
reg  encode_filtezexit8_176;
reg  encode_filtezexit8_176_reg;
reg [31:0] encode_filtezexit8_3v;
reg [31:0] encode_filtezexit8_3v_reg;
reg [31:0] encode_filtezexit8_3;
reg [31:0] encode_filtezexit8_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_filtezexit8_177;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_filtezexit8_177_reg;
reg [31:0] encode_filtezexit8_178;
reg [31:0] encode_filtezexit8_178_reg;
reg [31:0] encode_filtezexit8_179;
reg [31:0] encode_filtezexit8_179_reg;
reg [31:0] encode_filtezexit8_180;
reg [31:0] encode_filtezexit8_180_reg;
reg [31:0] encode_filtezexit8_181;
reg [31:0] encode_filtezexit8_181_reg;
reg [31:0] encode_filtezexit8_182;
reg [31:0] encode_filtezexit8_182_reg;
reg [31:0] encode_filtezexit8_183;
reg [31:0] encode_filtezexit8_183_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_filtezexit8_184;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_filtezexit8_184_reg;
reg [31:0] encode_filtezexit8_185;
reg [31:0] encode_filtezexit8_185_reg;
reg [31:0] encode_filtezexit8_186;
reg [31:0] encode_filtezexit8_186_reg;
reg  encode_filtezexit8_187;
reg  encode_filtezexit8_187_reg;
reg  encode_188_189;
reg  encode_188_189_reg;
reg [31:0] encode_188_43;
reg [31:0] encode_188_43_reg;
reg [31:0] encode_logschexit_1i;
reg [31:0] encode_logschexit_1i_reg;
reg [31:0] encode_logschexit_190;
reg [31:0] encode_logschexit_190_reg;
reg [31:0] encode_logschexit_191;
reg [31:0] encode_logschexit_191_reg;
reg [31:0] encode_logschexit_192;
reg [31:0] encode_logschexit_192_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_logschexit_193;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_logschexit_193_reg;
reg [31:0] encode_logschexit_194;
reg [31:0] encode_logschexit_194_reg;
reg [31:0] encode_logschexit_195;
reg [31:0] encode_logschexit_195_reg;
reg [31:0] encode_logschexit_196;
reg [31:0] encode_logschexit_196_reg;
reg [31:0] encode_logschexit_197;
reg [31:0] encode_logschexit_197_reg;
reg [31:0] encode_logschexit_198;
reg [31:0] encode_logschexit_198_reg;
reg  encode_logschexit_199;
reg  encode_logschexit_199_reg;
reg [31:0] encode_preheader_200;
reg [31:0] encode_preheader_200_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader_scevgep_reg;
reg  encode_preheader_exitcond3;
reg  encode_preheader_exitcond3_reg;
reg [31:0] encode_201_202;
reg [31:0] encode_201_202_reg;
reg [31:0] encode_201_203;
reg [31:0] encode_201_203_reg;
reg [31:0] encode_201_204;
reg [31:0] encode_201_204_reg;
reg [31:0] encode_201_205;
reg [31:0] encode_201_205_reg;
reg [31:0] encode_preheader27_206;
reg [31:0] encode_preheader27_206_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader27_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader27_scevgep4_reg;
reg  encode_preheader27_exitcond;
reg  encode_preheader27_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_207_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_207_scevgep5_reg;
reg [31:0] encode_207_208;
reg [31:0] encode_207_208_reg;
reg [31:0] encode_207_209;
reg [31:0] encode_207_209_reg;
reg [31:0] encode_207_210;
reg [31:0] encode_207_210_reg;
reg [31:0] encode_207_211;
reg [31:0] encode_207_211_reg;
reg [31:0] encode_207_212;
reg [31:0] encode_207_212_reg;
reg [31:0] encode_207_213;
reg [31:0] encode_207_213_reg;
reg [31:0] encode_207_214;
reg [31:0] encode_207_214_reg;
reg [31:0] encode_207_215;
reg [31:0] encode_207_215_reg;
reg [31:0] encode_207_216;
reg [31:0] encode_207_216_reg;
reg [31:0] encode_207_217;
reg [31:0] encode_207_217_reg;
reg [31:0] encode_upzeroexit_218;
reg [31:0] encode_upzeroexit_218_reg;
reg [31:0] encode_upzeroexit_219;
reg [31:0] encode_upzeroexit_219_reg;
reg [31:0] encode_upzeroexit_220;
reg [31:0] encode_upzeroexit_220_reg;
reg [31:0] encode_upzeroexit_221;
reg [31:0] encode_upzeroexit_221_reg;
reg [31:0] encode_upzeroexit_222;
reg [31:0] encode_upzeroexit_222_reg;
reg [31:0] encode_upzeroexit_223;
reg [31:0] encode_upzeroexit_223_reg;
reg [31:0] encode_upzeroexit_224;
reg [31:0] encode_upzeroexit_224_reg;
reg  encode_upzeroexit_225;
reg  encode_upzeroexit_225_reg;
reg [31:0] encode_upzeroexit_226;
reg [31:0] encode_upzeroexit_226_reg;
reg [31:0] encode_upzeroexit_45;
reg [31:0] encode_upzeroexit_45_reg;
reg [31:0] encode_upzeroexit_227;
reg [31:0] encode_upzeroexit_227_reg;
reg [31:0] encode_upzeroexit_228;
reg [31:0] encode_upzeroexit_228_reg;
reg [31:0] encode_upzeroexit_229;
reg [31:0] encode_upzeroexit_229_reg;
reg [31:0] encode_upzeroexit_230;
reg [31:0] encode_upzeroexit_230_reg;
reg [31:0] encode_upzeroexit_231;
reg [31:0] encode_upzeroexit_231_reg;
reg [31:0] encode_upzeroexit_wd40i;
reg [31:0] encode_upzeroexit_wd40i_reg;
reg [31:0] encode_upzeroexit_232;
reg [31:0] encode_upzeroexit_232_reg;
reg [31:0] encode_upzeroexit_233;
reg [31:0] encode_upzeroexit_233_reg;
reg [31:0] encode_upzeroexit_234;
reg [31:0] encode_upzeroexit_234_reg;
reg  encode_upzeroexit_235;
reg  encode_upzeroexit_235_reg;
reg  encode_236_237;
reg  encode_236_237_reg;
reg [31:0] encode_236_46;
reg [31:0] encode_236_46_reg;
reg [31:0] encode_uppol2exit_apl21i;
reg [31:0] encode_uppol2exit_apl21i_reg;
reg [31:0] encode_uppol2exit_238;
reg [31:0] encode_uppol2exit_238_reg;
reg [31:0] encode_uppol2exit_239;
reg [31:0] encode_uppol2exit_239_reg;
reg [31:0] encode_uppol2exit_240;
reg [31:0] encode_uppol2exit_240_reg;
reg [31:0] encode_uppol2exit_241;
reg [31:0] encode_uppol2exit_241_reg;
reg [31:0] encode_uppol2exit_242;
reg [31:0] encode_uppol2exit_242_reg;
reg [31:0] encode_uppol2exit_apl10i;
reg [31:0] encode_uppol2exit_apl10i_reg;
reg [31:0] encode_uppol2exit_243;
reg [31:0] encode_uppol2exit_243_reg;
reg  encode_uppol2exit_244;
reg  encode_uppol2exit_244_reg;
reg [31:0] encode_uppol2exit_apl10i_var1;
reg [31:0] encode_uppol2exit_apl10i_var1_reg;
reg [31:0] encode_uppol2exit_245;
reg [31:0] encode_uppol2exit_245_reg;
reg  encode_uppol2exit_246;
reg  encode_uppol2exit_246_reg;
reg [31:0] encode_uppol2exit_apl12i;
reg [31:0] encode_uppol2exit_apl12i_reg;
reg [31:0] encode_uppol2exit_247;
reg [31:0] encode_uppol2exit_247_reg;
reg [31:0] encode_uppol2exit_248;
reg [31:0] encode_uppol2exit_248_reg;
reg [31:0] encode_uppol2exit_249;
reg [31:0] encode_uppol2exit_249_reg;
wire [1:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [1:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
wire [5:0] qq6_code6_table_address_a;
wire  qq6_code6_table_write_enable_a;
wire [31:0] qq6_code6_table_in_a;
wire [31:0] qq6_code6_table_out_a;
wire [5:0] qq6_code6_table_address_b;
wire  qq6_code6_table_write_enable_b;
wire [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_b;
reg [4:0] decis_levl_address_a;
reg  decis_levl_write_enable_a;
wire [31:0] decis_levl_in_a;
wire [31:0] decis_levl_out_a;
wire [4:0] decis_levl_address_b;
wire  decis_levl_write_enable_b;
wire [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_b;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [2:0] dec_del_bpl_address_a;
wire  dec_del_bpl_write_enable_a;
wire [31:0] dec_del_bpl_in_a;
wire [31:0] dec_del_bpl_out_a;
wire [2:0] dec_del_bpl_address_b;
wire  dec_del_bpl_write_enable_b;
wire [31:0] dec_del_bpl_in_b;
wire [31:0] dec_del_bpl_out_b;
wire [2:0] dec_del_dltx_address_a;
wire  dec_del_dltx_write_enable_a;
wire [31:0] dec_del_dltx_in_a;
wire [31:0] dec_del_dltx_out_a;
wire [2:0] dec_del_dltx_address_b;
wire  dec_del_dltx_write_enable_b;
wire [31:0] dec_del_dltx_in_b;
wire [31:0] dec_del_dltx_out_b;
wire [2:0] dec_del_bph_address_a;
wire  dec_del_bph_write_enable_a;
wire [31:0] dec_del_bph_in_a;
wire [31:0] dec_del_bph_out_a;
wire [2:0] dec_del_bph_address_b;
wire  dec_del_bph_write_enable_b;
wire [31:0] dec_del_bph_in_b;
wire [31:0] dec_del_bph_out_b;
wire [2:0] dec_del_dhx_address_a;
wire  dec_del_dhx_write_enable_a;
wire [31:0] dec_del_dhx_in_a;
wire [31:0] dec_del_dhx_out_a;
wire [2:0] dec_del_dhx_address_b;
wire  dec_del_dhx_write_enable_b;
wire [31:0] dec_del_dhx_in_b;
wire [31:0] dec_del_dhx_out_b;
wire [3:0] accumc_address_a;
wire  accumc_write_enable_a;
wire [31:0] accumc_in_a;
wire [31:0] accumc_out_a;
wire [3:0] accumc_address_b;
wire  accumc_write_enable_b;
wire [31:0] accumc_in_b;
wire [31:0] accumc_out_b;
wire [3:0] accumd_address_a;
wire  accumd_write_enable_a;
wire [31:0] accumd_in_a;
wire [31:0] accumd_out_a;
wire [3:0] accumd_address_b;
wire  accumd_write_enable_b;
wire [31:0] accumd_in_b;
wire [31:0] accumd_out_b;
wire [6:0] test_data_address_a;
wire  test_data_write_enable_a;
wire [31:0] test_data_in_a;
wire [31:0] test_data_out_a;
wire [6:0] test_data_address_b;
wire  test_data_write_enable_b;
wire [31:0] test_data_in_b;
wire [31:0] test_data_out_b;
wire [6:0] test_compressed_address_a;
wire  test_compressed_write_enable_a;
wire [31:0] test_compressed_in_a;
wire [31:0] test_compressed_out_a;
wire [6:0] test_compressed_address_b;
wire  test_compressed_write_enable_b;
wire [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_b;
wire [6:0] test_result_address_a;
wire  test_result_write_enable_a;
wire [31:0] test_result_in_a;
wire [31:0] test_result_out_a;
wire [6:0] test_result_address_b;
wire  test_result_write_enable_b;
wire [31:0] test_result_in_b;
wire [31:0] test_result_out_b;
wire [6:0] compressed_address_a;
wire  compressed_write_enable_a;
wire [31:0] compressed_in_a;
wire [31:0] compressed_out_a;
wire [6:0] compressed_address_b;
wire  compressed_write_enable_b;
wire [31:0] compressed_in_b;
wire [31:0] compressed_out_b;
wire [6:0] result_address_a;
wire  result_write_enable_a;
wire [31:0] result_in_a;
wire [31:0] result_out_a;
wire [6:0] result_address_b;
wire  result_write_enable_b;
wire [31:0] result_in_b;
wire [31:0] result_out_b;
reg  lpm_mult_encode_0_2_en;
reg [31:0] encode_0_2_stage0_reg;
reg  lpm_mult_encode_0_4_en;
reg [31:0] encode_0_4_stage0_reg;
reg  lpm_mult_encode_10_13_en;
reg [31:0] encode_10_13_stage0_reg;
reg  lpm_mult_encode_10_17_en;
reg [31:0] encode_10_17_stage0_reg;
reg  lpm_mult_encode_30_31_en;
reg [31:0] encode_30_31_stage0_reg;
reg  lpm_mult_encode_30_35_en;
reg [31:0] encode_30_35_stage0_reg;
reg  lpm_mult_encode_37_40_en;
reg [31:0] encode_37_40_stage0_reg;
reg  lpm_mult_encode_filtezexit_42_en;
reg [31:0] encode_filtezexit_42_stage0_reg;
reg  lpm_mult_encode_filtezexit_54_en;
reg [31:0] encode_filtezexit_54_stage0_reg;
reg  lpm_mult_encode_filtezexit_56_en;
reg [31:0] encode_filtezexit_56_stage0_reg;
reg  lpm_mult_encode_67_69_en;
reg [31:0] encode_67_69_stage0_reg;
reg  lpm_mult_encode_loopexiti_81_en;
reg [31:0] encode_loopexiti_81_stage0_reg;
reg  lpm_mult_encode_loopexiti_78_en;
reg [31:0] encode_loopexiti_78_stage0_reg;
reg  lpm_mult_encode_100_102_en;
reg [31:0] encode_100_102_stage0_reg;
reg  lpm_mult_encode_106_108_en;
reg [31:0] encode_106_108_stage0_reg;
reg  lpm_mult_encode_106_113_en;
reg [31:0] encode_106_113_stage0_reg;
reg  lpm_mult_encode_upzeroexit21_131_en;
reg [31:0] encode_upzeroexit21_131_stage0_reg;
reg  lpm_mult_encode_upzeroexit21_123_en;
reg [31:0] encode_upzeroexit21_123_stage0_reg;
reg  lpm_mult_encode_upzeroexit21_127_en;
reg [31:0] encode_upzeroexit21_127_stage0_reg;
reg  lpm_mult_encode_uppol2exit17_137_en;
reg [31:0] encode_uppol2exit17_137_stage0_reg;
reg  lpm_mult_encode_uppol2exit17_149_en;
reg [31:0] encode_uppol2exit17_149_stage0_reg;
reg  lpm_mult_encode_151_154_en;
reg [31:0] encode_151_154_stage0_reg;
reg  lpm_mult_encode_filtezexit8_162_en;
reg [31:0] encode_filtezexit8_162_stage0_reg;
reg  lpm_mult_encode_filtezexit8_164_en;
reg [31:0] encode_filtezexit8_164_stage0_reg;
reg  lpm_mult_encode_filtezexit8_171_en;
reg [31:0] encode_filtezexit8_171_stage0_reg;
reg  lpm_mult_encode_filtezexit8_182_en;
reg [31:0] encode_filtezexit8_182_stage0_reg;
reg  lpm_mult_encode_filtezexit8_179_en;
reg [31:0] encode_filtezexit8_179_stage0_reg;
reg  lpm_mult_encode_201_203_en;
reg [31:0] encode_201_203_stage0_reg;
reg  lpm_mult_encode_207_209_en;
reg [31:0] encode_207_209_stage0_reg;
reg  lpm_mult_encode_207_214_en;
reg [31:0] encode_207_214_stage0_reg;
reg  lpm_mult_encode_upzeroexit_232_en;
reg [31:0] encode_upzeroexit_232_stage0_reg;
reg  lpm_mult_encode_upzeroexit_224_en;
reg [31:0] encode_upzeroexit_224_stage0_reg;
reg  lpm_mult_encode_upzeroexit_228_en;
reg [31:0] encode_upzeroexit_228_stage0_reg;
reg  lpm_mult_encode_uppol2exit_238_en;
reg [31:0] encode_uppol2exit_238_stage0_reg;

// Local Rams


// @decis_levl = internal unnamed_addr constant [30 x i32] [i32 280, i32 576, i32 880, i32 1200, i32 1520, i32 1864, i32 2208, i32 2584, i32 2960, i32 3376, i32 3784, i32 4240, i32 4696, i32 5200, i32 57...
rom_dual_port decis_levl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( decis_levl_address_a ),
	.address_b( decis_levl_address_b ),
	.q_a( decis_levl_out_a ),
	.q_b( decis_levl_out_b)
);
defparam decis_levl.width_a = 32;
defparam decis_levl.width_b = 32;
defparam decis_levl.widthad_a = 5;
defparam decis_levl.widthad_b = 5;
defparam decis_levl.numwords_a = 30;
defparam decis_levl.numwords_b = 30;
defparam decis_levl.latency = 1;
defparam decis_levl.init_file = "decis_levl.mif";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_encode_BB__0_1;
LEGUP_F_encode_BB__0_1:
		next_state = LEGUP_F_encode_BB__0_2;
LEGUP_F_encode_BB__0_2:
		next_state = LEGUP_F_encode_BB__0_3;
LEGUP_F_encode_BB__0_3:
		next_state = LEGUP_F_encode_BB__0_4;
LEGUP_F_encode_BB__0_4:
		next_state = LEGUP_F_encode_BB__5_5;
LEGUP_F_encode_BB__100_55:
		next_state = LEGUP_F_encode_BB__100_56;
LEGUP_F_encode_BB__100_56:
		next_state = LEGUP_F_encode_BB__100_57;
LEGUP_F_encode_BB__100_57:
		next_state = LEGUP_F_encode_BB__100_58;
LEGUP_F_encode_BB__100_58:
		next_state = LEGUP_F_encode_BB__100_59;
LEGUP_F_encode_BB__100_59:
		next_state = LEGUP_F_encode_BB_preheader29_54;
LEGUP_F_encode_BB__106_61:
		next_state = LEGUP_F_encode_BB__106_62;
LEGUP_F_encode_BB__106_62:
		next_state = LEGUP_F_encode_BB__106_63;
LEGUP_F_encode_BB__106_63:
		next_state = LEGUP_F_encode_BB__106_64;
LEGUP_F_encode_BB__106_64:
		next_state = LEGUP_F_encode_BB__106_65;
LEGUP_F_encode_BB__106_65:
		next_state = LEGUP_F_encode_BB_preheader30_60;
LEGUP_F_encode_BB__10_10:
		next_state = LEGUP_F_encode_BB__5_5;
LEGUP_F_encode_BB__10_6:
		next_state = LEGUP_F_encode_BB__10_7;
LEGUP_F_encode_BB__10_7:
		next_state = LEGUP_F_encode_BB__10_8;
LEGUP_F_encode_BB__10_8:
		next_state = LEGUP_F_encode_BB__10_9;
LEGUP_F_encode_BB__10_9:
		next_state = LEGUP_F_encode_BB__10_10;
LEGUP_F_encode_BB__135_75:
		next_state = LEGUP_F_encode_BB_uppol2exit17_76;
LEGUP_F_encode_BB__150_82:
	if ((encode_150_exitcond6 == 1'd1))
		next_state = LEGUP_F_encode_BB_filtezexit8_87;
	else if ((encode_150_exitcond6 == 1'd0))
		next_state = LEGUP_F_encode_BB__151_83;
LEGUP_F_encode_BB__151_83:
		next_state = LEGUP_F_encode_BB__151_84;
LEGUP_F_encode_BB__151_84:
		next_state = LEGUP_F_encode_BB__151_85;
LEGUP_F_encode_BB__151_85:
		next_state = LEGUP_F_encode_BB__151_86;
LEGUP_F_encode_BB__151_86:
		next_state = LEGUP_F_encode_BB__150_82;
LEGUP_F_encode_BB__188_97:
		next_state = LEGUP_F_encode_BB_logschexit_98;
LEGUP_F_encode_BB__201_105:
		next_state = LEGUP_F_encode_BB__201_106;
LEGUP_F_encode_BB__201_106:
		next_state = LEGUP_F_encode_BB__201_107;
LEGUP_F_encode_BB__201_107:
		next_state = LEGUP_F_encode_BB__201_108;
LEGUP_F_encode_BB__201_108:
		next_state = LEGUP_F_encode_BB__201_109;
LEGUP_F_encode_BB__201_109:
		next_state = LEGUP_F_encode_BB_preheader_104;
LEGUP_F_encode_BB__207_111:
		next_state = LEGUP_F_encode_BB__207_112;
LEGUP_F_encode_BB__207_112:
		next_state = LEGUP_F_encode_BB__207_113;
LEGUP_F_encode_BB__207_113:
		next_state = LEGUP_F_encode_BB__207_114;
LEGUP_F_encode_BB__207_114:
		next_state = LEGUP_F_encode_BB__207_115;
LEGUP_F_encode_BB__207_115:
		next_state = LEGUP_F_encode_BB_preheader27_110;
LEGUP_F_encode_BB__20_11:
		next_state = LEGUP_F_encode_BB__20_12;
LEGUP_F_encode_BB__20_12:
		next_state = LEGUP_F_encode_BB__20_13;
LEGUP_F_encode_BB__20_13:
		next_state = LEGUP_F_encode_BB__23_14;
LEGUP_F_encode_BB__236_125:
		next_state = LEGUP_F_encode_BB_uppol2exit_126;
LEGUP_F_encode_BB__23_14:
	if ((encode_23_exitcond20 == 1'd1))
		next_state = LEGUP_F_encode_BB__30_20;
	else if ((encode_23_exitcond20 == 1'd0))
		next_state = LEGUP_F_encode_BB__25_15;
LEGUP_F_encode_BB__25_15:
		next_state = LEGUP_F_encode_BB__25_16;
LEGUP_F_encode_BB__25_16:
		next_state = LEGUP_F_encode_BB__25_17;
LEGUP_F_encode_BB__25_17:
		next_state = LEGUP_F_encode_BB__25_18;
LEGUP_F_encode_BB__25_18:
		next_state = LEGUP_F_encode_BB__25_19;
LEGUP_F_encode_BB__25_19:
		next_state = LEGUP_F_encode_BB__23_14;
LEGUP_F_encode_BB__30_20:
		next_state = LEGUP_F_encode_BB__30_21;
LEGUP_F_encode_BB__30_21:
		next_state = LEGUP_F_encode_BB__30_22;
LEGUP_F_encode_BB__30_22:
		next_state = LEGUP_F_encode_BB__30_23;
LEGUP_F_encode_BB__30_23:
		next_state = LEGUP_F_encode_BB__30_24;
LEGUP_F_encode_BB__30_24:
		next_state = LEGUP_F_encode_BB__36_25;
LEGUP_F_encode_BB__36_25:
	if ((encode_36_exitcond17 == 1'd1))
		next_state = LEGUP_F_encode_BB_filtezexit_30;
	else if ((encode_36_exitcond17 == 1'd0))
		next_state = LEGUP_F_encode_BB__37_26;
LEGUP_F_encode_BB__37_26:
		next_state = LEGUP_F_encode_BB__37_27;
LEGUP_F_encode_BB__37_27:
		next_state = LEGUP_F_encode_BB__37_28;
LEGUP_F_encode_BB__37_28:
		next_state = LEGUP_F_encode_BB__37_29;
LEGUP_F_encode_BB__37_29:
		next_state = LEGUP_F_encode_BB__36_25;
LEGUP_F_encode_BB__5_5:
	if ((encode_5_exitcond23 == 1'd1))
		next_state = LEGUP_F_encode_BB__20_11;
	else if ((encode_5_exitcond23 == 1'd0))
		next_state = LEGUP_F_encode_BB__10_6;
LEGUP_F_encode_BB__64_35:
	if ((encode_64_66 == 1'd1))
		next_state = LEGUP_F_encode_BB__67_36;
	else if ((encode_64_66 == 1'd0))
		next_state = LEGUP_F_encode_BB_loopexiti_40;
LEGUP_F_encode_BB__67_36:
		next_state = LEGUP_F_encode_BB__67_37;
LEGUP_F_encode_BB__67_37:
		next_state = LEGUP_F_encode_BB__67_38;
LEGUP_F_encode_BB__67_38:
	if ((encode_67_71 == 1'd1))
		next_state = LEGUP_F_encode_BB__72_39;
	else if ((encode_67_71 == 1'd0))
		next_state = LEGUP_F_encode_BB_loopexiti_40;
LEGUP_F_encode_BB__72_39:
		next_state = LEGUP_F_encode_BB__64_35;
LEGUP_F_encode_BB__87_47:
		next_state = LEGUP_F_encode_BB_logsclexit_48;
LEGUP_F_encode_BB_filtezexit8_87:
		next_state = LEGUP_F_encode_BB_filtezexit8_88;
LEGUP_F_encode_BB_filtezexit8_88:
		next_state = LEGUP_F_encode_BB_filtezexit8_89;
LEGUP_F_encode_BB_filtezexit8_89:
		next_state = LEGUP_F_encode_BB_filtezexit8_90;
LEGUP_F_encode_BB_filtezexit8_90:
		next_state = LEGUP_F_encode_BB_filtezexit8_91;
LEGUP_F_encode_BB_filtezexit8_91:
		next_state = LEGUP_F_encode_BB_filtezexit8_92;
LEGUP_F_encode_BB_filtezexit8_92:
		next_state = LEGUP_F_encode_BB_filtezexit8_93;
LEGUP_F_encode_BB_filtezexit8_93:
		next_state = LEGUP_F_encode_BB_filtezexit8_94;
LEGUP_F_encode_BB_filtezexit8_94:
		next_state = LEGUP_F_encode_BB_filtezexit8_95;
LEGUP_F_encode_BB_filtezexit8_95:
		next_state = LEGUP_F_encode_BB_filtezexit8_96;
LEGUP_F_encode_BB_filtezexit8_96:
	if ((encode_filtezexit8_187_reg == 1'd1))
		next_state = LEGUP_F_encode_BB_logschexit_98;
	else if ((encode_filtezexit8_187_reg == 1'd0))
		next_state = LEGUP_F_encode_BB__188_97;
LEGUP_F_encode_BB_filtezexit_30:
		next_state = LEGUP_F_encode_BB_filtezexit_31;
LEGUP_F_encode_BB_filtezexit_31:
		next_state = LEGUP_F_encode_BB_filtezexit_32;
LEGUP_F_encode_BB_filtezexit_32:
		next_state = LEGUP_F_encode_BB_filtezexit_33;
LEGUP_F_encode_BB_filtezexit_33:
		next_state = LEGUP_F_encode_BB_filtezexit_34;
LEGUP_F_encode_BB_filtezexit_34:
		next_state = LEGUP_F_encode_BB__64_35;
LEGUP_F_encode_BB_logschexit_100:
		next_state = LEGUP_F_encode_BB_logschexit_101;
LEGUP_F_encode_BB_logschexit_101:
	if ((encode_logschexit_199_reg == 1'd1))
		next_state = LEGUP_F_encode_BB_preheaderpreheader_103;
	else if ((encode_logschexit_199_reg == 1'd0))
		next_state = LEGUP_F_encode_BB_preheader27preheader_102;
LEGUP_F_encode_BB_logschexit_98:
		next_state = LEGUP_F_encode_BB_logschexit_99;
LEGUP_F_encode_BB_logschexit_99:
		next_state = LEGUP_F_encode_BB_logschexit_100;
LEGUP_F_encode_BB_logsclexit_48:
		next_state = LEGUP_F_encode_BB_logsclexit_49;
LEGUP_F_encode_BB_logsclexit_49:
		next_state = LEGUP_F_encode_BB_logsclexit_50;
LEGUP_F_encode_BB_logsclexit_50:
		next_state = LEGUP_F_encode_BB_logsclexit_51;
LEGUP_F_encode_BB_logsclexit_51:
	if ((encode_logsclexit_98_reg == 1'd1))
		next_state = LEGUP_F_encode_BB_preheader29preheader_53;
	else if ((encode_logsclexit_98_reg == 1'd0))
		next_state = LEGUP_F_encode_BB_preheader30preheader_52;
LEGUP_F_encode_BB_loopexiti_40:
		next_state = LEGUP_F_encode_BB_loopexiti_41;
LEGUP_F_encode_BB_loopexiti_41:
		next_state = LEGUP_F_encode_BB_loopexiti_42;
LEGUP_F_encode_BB_loopexiti_42:
		next_state = LEGUP_F_encode_BB_loopexiti_43;
LEGUP_F_encode_BB_loopexiti_43:
		next_state = LEGUP_F_encode_BB_loopexiti_44;
LEGUP_F_encode_BB_loopexiti_44:
		next_state = LEGUP_F_encode_BB_loopexiti_45;
LEGUP_F_encode_BB_loopexiti_45:
		next_state = LEGUP_F_encode_BB_loopexiti_46;
LEGUP_F_encode_BB_loopexiti_46:
	if ((encode_loopexiti_86_reg == 1'd1))
		next_state = LEGUP_F_encode_BB_logsclexit_48;
	else if ((encode_loopexiti_86_reg == 1'd0))
		next_state = LEGUP_F_encode_BB__87_47;
LEGUP_F_encode_BB_preheader27_110:
	if ((encode_preheader27_exitcond == 1'd1))
		next_state = LEGUP_F_encode_BB_upzeroexitloopexit1_117;
	else if ((encode_preheader27_exitcond == 1'd0))
		next_state = LEGUP_F_encode_BB__207_111;
LEGUP_F_encode_BB_preheader27preheader_102:
		next_state = LEGUP_F_encode_BB_preheader27_110;
LEGUP_F_encode_BB_preheader29_54:
	if ((encode_preheader29_exitcond9 == 1'd1))
		next_state = LEGUP_F_encode_BB_upzeroexit21loopexit_66;
	else if ((encode_preheader29_exitcond9 == 1'd0))
		next_state = LEGUP_F_encode_BB__100_55;
LEGUP_F_encode_BB_preheader29preheader_53:
		next_state = LEGUP_F_encode_BB_preheader29_54;
LEGUP_F_encode_BB_preheader30_60:
	if ((encode_preheader30_exitcond11 == 1'd1))
		next_state = LEGUP_F_encode_BB_upzeroexit21loopexit2_67;
	else if ((encode_preheader30_exitcond11 == 1'd0))
		next_state = LEGUP_F_encode_BB__106_61;
LEGUP_F_encode_BB_preheader30preheader_52:
		next_state = LEGUP_F_encode_BB_preheader30_60;
LEGUP_F_encode_BB_preheader_104:
	if ((encode_preheader_exitcond3 == 1'd1))
		next_state = LEGUP_F_encode_BB_upzeroexitloopexit_116;
	else if ((encode_preheader_exitcond3 == 1'd0))
		next_state = LEGUP_F_encode_BB__201_105;
LEGUP_F_encode_BB_preheaderpreheader_103:
		next_state = LEGUP_F_encode_BB_preheader_104;
LEGUP_F_encode_BB_uppol2exit17_76:
		next_state = LEGUP_F_encode_BB_uppol2exit17_77;
LEGUP_F_encode_BB_uppol2exit17_77:
		next_state = LEGUP_F_encode_BB_uppol2exit17_78;
LEGUP_F_encode_BB_uppol2exit17_78:
		next_state = LEGUP_F_encode_BB_uppol2exit17_79;
LEGUP_F_encode_BB_uppol2exit17_79:
		next_state = LEGUP_F_encode_BB_uppol2exit17_80;
LEGUP_F_encode_BB_uppol2exit17_80:
		next_state = LEGUP_F_encode_BB_uppol2exit17_81;
LEGUP_F_encode_BB_uppol2exit17_81:
		next_state = LEGUP_F_encode_BB__150_82;
LEGUP_F_encode_BB_uppol2exit_126:
		next_state = LEGUP_F_encode_BB_uppol2exit_127;
LEGUP_F_encode_BB_uppol2exit_127:
		next_state = LEGUP_F_encode_BB_uppol2exit_128;
LEGUP_F_encode_BB_uppol2exit_128:
		next_state = LEGUP_F_encode_BB_uppol2exit_129;
LEGUP_F_encode_BB_uppol2exit_129:
		next_state = LEGUP_0;
LEGUP_F_encode_BB_upzeroexit21_68:
		next_state = LEGUP_F_encode_BB_upzeroexit21_69;
LEGUP_F_encode_BB_upzeroexit21_69:
		next_state = LEGUP_F_encode_BB_upzeroexit21_70;
LEGUP_F_encode_BB_upzeroexit21_70:
		next_state = LEGUP_F_encode_BB_upzeroexit21_71;
LEGUP_F_encode_BB_upzeroexit21_71:
		next_state = LEGUP_F_encode_BB_upzeroexit21_72;
LEGUP_F_encode_BB_upzeroexit21_72:
		next_state = LEGUP_F_encode_BB_upzeroexit21_73;
LEGUP_F_encode_BB_upzeroexit21_73:
		next_state = LEGUP_F_encode_BB_upzeroexit21_74;
LEGUP_F_encode_BB_upzeroexit21_74:
	if ((encode_upzeroexit21_134 == 1'd1))
		next_state = LEGUP_F_encode_BB_uppol2exit17_76;
	else if ((encode_upzeroexit21_134 == 1'd0))
		next_state = LEGUP_F_encode_BB__135_75;
LEGUP_F_encode_BB_upzeroexit21loopexit2_67:
		next_state = LEGUP_F_encode_BB_upzeroexit21_68;
LEGUP_F_encode_BB_upzeroexit21loopexit_66:
		next_state = LEGUP_F_encode_BB_upzeroexit21_68;
LEGUP_F_encode_BB_upzeroexit_118:
		next_state = LEGUP_F_encode_BB_upzeroexit_119;
LEGUP_F_encode_BB_upzeroexit_119:
		next_state = LEGUP_F_encode_BB_upzeroexit_120;
LEGUP_F_encode_BB_upzeroexit_120:
		next_state = LEGUP_F_encode_BB_upzeroexit_121;
LEGUP_F_encode_BB_upzeroexit_121:
		next_state = LEGUP_F_encode_BB_upzeroexit_122;
LEGUP_F_encode_BB_upzeroexit_122:
		next_state = LEGUP_F_encode_BB_upzeroexit_123;
LEGUP_F_encode_BB_upzeroexit_123:
		next_state = LEGUP_F_encode_BB_upzeroexit_124;
LEGUP_F_encode_BB_upzeroexit_124:
	if ((encode_upzeroexit_235 == 1'd1))
		next_state = LEGUP_F_encode_BB_uppol2exit_126;
	else if ((encode_upzeroexit_235 == 1'd0))
		next_state = LEGUP_F_encode_BB__236_125;
LEGUP_F_encode_BB_upzeroexitloopexit1_117:
		next_state = LEGUP_F_encode_BB_upzeroexit_118;
LEGUP_F_encode_BB_upzeroexitloopexit_116:
		next_state = LEGUP_F_encode_BB_upzeroexit_118;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
		encode_0_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		encode_0_1_reg <= encode_0_1;
		if (start == 1'b0 && ^(encode_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_1_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_2 = encode_0_2_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %2 = mul nsw i32 %1, 12*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_2_reg <= encode_0_2;
		if (start == 1'b0 && ^(encode_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_2_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %2 = mul nsw i32 %1, 12*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_2_reg <= encode_0_2;
		if (start == 1'b0 && ^(encode_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
		encode_0_3 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		encode_0_3_reg <= encode_0_3;
		if (start == 1'b0 && ^(encode_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_3_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_4 = encode_0_4_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %4 = mul nsw i32 %3, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_4_reg <= encode_0_4;
		if (start == 1'b0 && ^(encode_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_4_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %4 = mul nsw i32 %3, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_4_reg <= encode_0_4;
		if (start == 1'b0 && ^(encode_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %5*/
	/*   %6 = phi i32 [ 0, %0 ], [ %19, %10 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_4) & (memory_controller_waitrequest == 1'd0))) begin
		encode_5_6 = 32'd0;
	end
	/* encode: %5*/
	/*   %6 = phi i32 [ 0, %0 ], [ %19, %10 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__10_10) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_5_6 = encode_10_19_reg;
	end
end
always @(posedge clk) begin
	/* encode: %5*/
	/*   %6 = phi i32 [ 0, %0 ], [ %19, %10 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_4) & (memory_controller_waitrequest == 1'd0))) begin
		encode_5_6_reg <= encode_5_6;
		if (start == 1'b0 && ^(encode_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_5_6_reg"); $finish; end
	end
	/* encode: %5*/
	/*   %6 = phi i32 [ 0, %0 ], [ %19, %10 ]*/
	if (((cur_state == LEGUP_F_encode_BB__10_10) & (memory_controller_waitrequest == 1'd0))) begin
		encode_5_6_reg <= encode_5_6;
		if (start == 1'b0 && ^(encode_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_5_6_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %5*/
	/*   %xa.0 = phi i32 [ %2, %0 ], [ %14, %10 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_4) & (memory_controller_waitrequest == 1'd0))) begin
		encode_5_xa0 = encode_0_2;
	end
	/* encode: %5*/
	/*   %xa.0 = phi i32 [ %2, %0 ], [ %14, %10 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__10_10) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_5_xa0 = encode_10_14_reg;
	end
end
always @(posedge clk) begin
	/* encode: %5*/
	/*   %xa.0 = phi i32 [ %2, %0 ], [ %14, %10 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_4) & (memory_controller_waitrequest == 1'd0))) begin
		encode_5_xa0_reg <= encode_5_xa0;
		if (start == 1'b0 && ^(encode_5_xa0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_5_xa0_reg"); $finish; end
	end
	/* encode: %5*/
	/*   %xa.0 = phi i32 [ %2, %0 ], [ %14, %10 ]*/
	if (((cur_state == LEGUP_F_encode_BB__10_10) & (memory_controller_waitrequest == 1'd0))) begin
		encode_5_xa0_reg <= encode_5_xa0;
		if (start == 1'b0 && ^(encode_5_xa0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_5_xa0_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %5*/
	/*   %xb.0 = phi i32 [ %4, %0 ], [ %18, %10 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_4) & (memory_controller_waitrequest == 1'd0))) begin
		encode_5_xb0 = encode_0_4;
	end
	/* encode: %5*/
	/*   %xb.0 = phi i32 [ %4, %0 ], [ %18, %10 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__10_10) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_5_xb0 = encode_10_18;
	end
end
always @(posedge clk) begin
	/* encode: %5*/
	/*   %xb.0 = phi i32 [ %4, %0 ], [ %18, %10 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_4) & (memory_controller_waitrequest == 1'd0))) begin
		encode_5_xb0_reg <= encode_5_xb0;
		if (start == 1'b0 && ^(encode_5_xb0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_5_xb0_reg"); $finish; end
	end
	/* encode: %5*/
	/*   %xb.0 = phi i32 [ %4, %0 ], [ %18, %10 ]*/
	if (((cur_state == LEGUP_F_encode_BB__10_10) & (memory_controller_waitrequest == 1'd0))) begin
		encode_5_xb0_reg <= encode_5_xb0;
		if (start == 1'b0 && ^(encode_5_xb0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_5_xb0_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %5*/
	/*   %7 = shl i32 %6, 1*/
		encode_5_7 = (encode_5_6_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* encode: %5*/
	/*   %7 = shl i32 %6, 1*/
	if ((cur_state == LEGUP_F_encode_BB__5_5)) begin
		encode_5_7_reg <= encode_5_7;
		if (start == 1'b0 && ^(encode_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_5_7_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %5*/
	/*   %8 = add i32 %7, 2*/
		encode_5_8 = (encode_5_7 + 32'd2);
end
always @(posedge clk) begin
	/* encode: %5*/
	/*   %8 = add i32 %7, 2*/
	if ((cur_state == LEGUP_F_encode_BB__5_5)) begin
		encode_5_8_reg <= encode_5_8;
		if (start == 1'b0 && ^(encode_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_5_8_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %5*/
	/*   %9 = add i32 %7, 3*/
		encode_5_9 = (encode_5_7 + 32'd3);
end
always @(posedge clk) begin
	/* encode: %5*/
	/*   %9 = add i32 %7, 3*/
	if ((cur_state == LEGUP_F_encode_BB__5_5)) begin
		encode_5_9_reg <= encode_5_9;
		if (start == 1'b0 && ^(encode_5_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_5_9_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %5*/
	/*   %exitcond23 = icmp eq i32 %6, 10*/
		encode_5_exitcond23 = (encode_5_6_reg == 32'd10);
end
always @(posedge clk) begin
	/* encode: %5*/
	/*   %exitcond23 = icmp eq i32 %6, 10*/
	if ((cur_state == LEGUP_F_encode_BB__5_5)) begin
		encode_5_exitcond23_reg <= encode_5_exitcond23;
		if (start == 1'b0 && ^(encode_5_exitcond23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_5_exitcond23_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %10*/
	/*   %scevgep27 = getelementptr [24 x i32]* @h, i32 0, i32 %9*/
		encode_10_scevgep27 = (`TAG_g_h_a | (4 * encode_5_9_reg));
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %scevgep27 = getelementptr [24 x i32]* @h, i32 0, i32 %9*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		encode_10_scevgep27_reg <= encode_10_scevgep27;
		if (start == 1'b0 && ^(encode_10_scevgep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_scevgep27_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %10*/
	/*   %h_ptr.0 = getelementptr [24 x i32]* @h, i32 0, i32 %8*/
		encode_10_h_ptr0 = (`TAG_g_h_a | (4 * encode_5_8_reg));
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %h_ptr.0 = getelementptr [24 x i32]* @h, i32 0, i32 %8*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		encode_10_h_ptr0_reg <= encode_10_h_ptr0;
		if (start == 1'b0 && ^(encode_10_h_ptr0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_h_ptr0_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %10*/
	/*   %scevgep25 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %9*/
		encode_10_scevgep25 = (`TAG_g_tqmf_a | (4 * encode_5_9_reg));
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %scevgep25 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %9*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		encode_10_scevgep25_reg <= encode_10_scevgep25;
		if (start == 1'b0 && ^(encode_10_scevgep25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_scevgep25_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %10*/
	/*   %tqmf_ptr.0 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %8*/
		encode_10_tqmf_ptr0 = (`TAG_g_tqmf_a | (4 * encode_5_8_reg));
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %tqmf_ptr.0 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %8*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		encode_10_tqmf_ptr0_reg <= encode_10_tqmf_ptr0;
		if (start == 1'b0 && ^(encode_10_tqmf_ptr0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_tqmf_ptr0_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %10*/
	/*   %11 = load i32* %tqmf_ptr.0, align 4*/
		encode_10_11 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %11 = load i32* %tqmf_ptr.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_8)) begin
		encode_10_11_reg <= encode_10_11;
		if (start == 1'b0 && ^(encode_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_11_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %10*/
	/*   %12 = load i32* %h_ptr.0, align 4*/
		encode_10_12 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %12 = load i32* %h_ptr.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_8)) begin
		encode_10_12_reg <= encode_10_12;
		if (start == 1'b0 && ^(encode_10_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_12_reg"); $finish; end
	end
end
always @(*) begin
	encode_10_13 = encode_10_13_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %13 = mul nsw i32 %11, %12*/
	if ((cur_state == LEGUP_F_encode_BB__10_9)) begin
		encode_10_13_reg <= encode_10_13;
		if (start == 1'b0 && ^(encode_10_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_13_reg"); $finish; end
	end
	/* encode: %10*/
	/*   %13 = mul nsw i32 %11, %12*/
	if ((cur_state == LEGUP_F_encode_BB__10_9)) begin
		encode_10_13_reg <= encode_10_13;
		if (start == 1'b0 && ^(encode_10_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_13_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %10*/
	/*   %14 = add nsw i32 %xa.0, %13*/
		encode_10_14 = (encode_5_xa0_reg + encode_10_13);
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %14 = add nsw i32 %xa.0, %13*/
	if ((cur_state == LEGUP_F_encode_BB__10_9)) begin
		encode_10_14_reg <= encode_10_14;
		if (start == 1'b0 && ^(encode_10_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_14_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %10*/
	/*   %15 = load i32* %scevgep25, align 4*/
		encode_10_15 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %15 = load i32* %scevgep25, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_9)) begin
		encode_10_15_reg <= encode_10_15;
		if (start == 1'b0 && ^(encode_10_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_15_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %10*/
	/*   %16 = load i32* %scevgep27, align 4*/
		encode_10_16 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %16 = load i32* %scevgep27, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_9)) begin
		encode_10_16_reg <= encode_10_16;
		if (start == 1'b0 && ^(encode_10_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_16_reg"); $finish; end
	end
end
always @(*) begin
	encode_10_17 = encode_10_17_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %17 = mul nsw i32 %15, %16*/
	if ((cur_state == LEGUP_F_encode_BB__10_10)) begin
		encode_10_17_reg <= encode_10_17;
		if (start == 1'b0 && ^(encode_10_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_17_reg"); $finish; end
	end
	/* encode: %10*/
	/*   %17 = mul nsw i32 %15, %16*/
	if ((cur_state == LEGUP_F_encode_BB__10_10)) begin
		encode_10_17_reg <= encode_10_17;
		if (start == 1'b0 && ^(encode_10_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_17_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %10*/
	/*   %18 = add nsw i32 %xb.0, %17*/
		encode_10_18 = (encode_5_xb0_reg + encode_10_17);
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %18 = add nsw i32 %xb.0, %17*/
	if ((cur_state == LEGUP_F_encode_BB__10_10)) begin
		encode_10_18_reg <= encode_10_18;
		if (start == 1'b0 && ^(encode_10_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_18_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %10*/
	/*   %19 = add nsw i32 %6, 1*/
		encode_10_19 = (encode_5_6_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %19 = add nsw i32 %6, 1*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		encode_10_19_reg <= encode_10_19;
		if (start == 1'b0 && ^(encode_10_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_10_19_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %20*/
	/*   %21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4*/
		encode_20_21 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %20*/
	/*   %21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__20_13)) begin
		encode_20_21_reg <= encode_20_21;
		if (start == 1'b0 && ^(encode_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_20_21_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %20*/
	/*   %22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4*/
		encode_20_22 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %20*/
	/*   %22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__20_13)) begin
		encode_20_22_reg <= encode_20_22;
		if (start == 1'b0 && ^(encode_20_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_20_22_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %23*/
	/*   %24 = phi i32 [ 0, %20 ], [ %29, %25 ]*/
	if (((cur_state == LEGUP_F_encode_BB__20_13) & (memory_controller_waitrequest == 1'd0))) begin
		encode_23_24 = 32'd0;
	end
	/* encode: %23*/
	/*   %24 = phi i32 [ 0, %20 ], [ %29, %25 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__25_19) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_23_24 = encode_25_29_reg;
	end
end
always @(posedge clk) begin
	/* encode: %23*/
	/*   %24 = phi i32 [ 0, %20 ], [ %29, %25 ]*/
	if (((cur_state == LEGUP_F_encode_BB__20_13) & (memory_controller_waitrequest == 1'd0))) begin
		encode_23_24_reg <= encode_23_24;
		if (start == 1'b0 && ^(encode_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_23_24_reg"); $finish; end
	end
	/* encode: %23*/
	/*   %24 = phi i32 [ 0, %20 ], [ %29, %25 ]*/
	if (((cur_state == LEGUP_F_encode_BB__25_19) & (memory_controller_waitrequest == 1'd0))) begin
		encode_23_24_reg <= encode_23_24;
		if (start == 1'b0 && ^(encode_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_23_24_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %23*/
	/*   %exitcond20 = icmp eq i32 %24, 22*/
		encode_23_exitcond20 = (encode_23_24_reg == 32'd22);
end
always @(posedge clk) begin
	/* encode: %23*/
	/*   %exitcond20 = icmp eq i32 %24, 22*/
	if ((cur_state == LEGUP_F_encode_BB__23_14)) begin
		encode_23_exitcond20_reg <= encode_23_exitcond20;
		if (start == 1'b0 && ^(encode_23_exitcond20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_23_exitcond20_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %25*/
	/*   %26 = sub i32 23, %24*/
		encode_25_26 = (32'd23 - encode_23_24_reg);
end
always @(posedge clk) begin
	/* encode: %25*/
	/*   %26 = sub i32 23, %24*/
	if ((cur_state == LEGUP_F_encode_BB__25_15)) begin
		encode_25_26_reg <= encode_25_26;
		if (start == 1'b0 && ^(encode_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_25_26_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %25*/
	/*   %tqmf_ptr.1 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %26*/
		encode_25_tqmf_ptr1 = (`TAG_g_tqmf_a | (4 * encode_25_26_reg));
end
always @(posedge clk) begin
	/* encode: %25*/
	/*   %tqmf_ptr.1 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %26*/
	if ((cur_state == LEGUP_F_encode_BB__25_16)) begin
		encode_25_tqmf_ptr1_reg <= encode_25_tqmf_ptr1;
		if (start == 1'b0 && ^(encode_25_tqmf_ptr1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_25_tqmf_ptr1_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %25*/
	/*   %27 = sub i32 21, %24*/
		encode_25_27 = (32'd21 - encode_23_24_reg);
end
always @(posedge clk) begin
	/* encode: %25*/
	/*   %27 = sub i32 21, %24*/
	if ((cur_state == LEGUP_F_encode_BB__25_15)) begin
		encode_25_27_reg <= encode_25_27;
		if (start == 1'b0 && ^(encode_25_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_25_27_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %25*/
	/*   %tqmf_ptr1.0 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %27*/
		encode_25_tqmf_ptr10 = (`TAG_g_tqmf_a | (4 * encode_25_27_reg));
end
always @(posedge clk) begin
	/* encode: %25*/
	/*   %tqmf_ptr1.0 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %27*/
	if ((cur_state == LEGUP_F_encode_BB__25_16)) begin
		encode_25_tqmf_ptr10_reg <= encode_25_tqmf_ptr10;
		if (start == 1'b0 && ^(encode_25_tqmf_ptr10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_25_tqmf_ptr10_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %25*/
	/*   %28 = load i32* %tqmf_ptr1.0, align 4*/
		encode_25_28 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %25*/
	/*   %28 = load i32* %tqmf_ptr1.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__25_18)) begin
		encode_25_28_reg <= encode_25_28;
		if (start == 1'b0 && ^(encode_25_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_25_28_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %25*/
	/*   %29 = add nsw i32 %24, 1*/
		encode_25_29 = (encode_23_24_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %25*/
	/*   %29 = add nsw i32 %24, 1*/
	if ((cur_state == LEGUP_F_encode_BB__25_15)) begin
		encode_25_29_reg <= encode_25_29;
		if (start == 1'b0 && ^(encode_25_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_25_29_reg"); $finish; end
	end
end
always @(*) begin
	encode_30_31 = encode_30_31_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %30*/
	/*   %31 = mul nsw i32 %21, -44*/
	if ((cur_state == LEGUP_F_encode_BB__30_21)) begin
		encode_30_31_reg <= encode_30_31;
		if (start == 1'b0 && ^(encode_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_30_31_reg"); $finish; end
	end
	/* encode: %30*/
	/*   %31 = mul nsw i32 %21, -44*/
	if ((cur_state == LEGUP_F_encode_BB__30_21)) begin
		encode_30_31_reg <= encode_30_31;
		if (start == 1'b0 && ^(encode_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_30_31_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %30*/
	/*   %32 = add nsw i32 %xa.0, %31*/
		encode_30_32 = (encode_5_xa0_reg + encode_30_31);
end
always @(posedge clk) begin
	/* encode: %30*/
	/*   %32 = add nsw i32 %xa.0, %31*/
	if ((cur_state == LEGUP_F_encode_BB__30_21)) begin
		encode_30_32_reg <= encode_30_32;
		if (start == 1'b0 && ^(encode_30_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_30_32_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %30*/
	/*   %33 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4*/
		encode_30_33 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %30*/
	/*   %33 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_23)) begin
		encode_30_33_reg <= encode_30_33;
		if (start == 1'b0 && ^(encode_30_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_30_33_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %30*/
	/*   %34 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
		encode_30_34 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %30*/
	/*   %34 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_23)) begin
		encode_30_34_reg <= encode_30_34;
		if (start == 1'b0 && ^(encode_30_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_30_34_reg"); $finish; end
	end
end
always @(*) begin
	encode_30_35 = encode_30_35_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %30*/
	/*   %35 = mul nsw i32 %33, %34*/
	if ((cur_state == LEGUP_F_encode_BB__30_24)) begin
		encode_30_35_reg <= encode_30_35;
		if (start == 1'b0 && ^(encode_30_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_30_35_reg"); $finish; end
	end
	/* encode: %30*/
	/*   %35 = mul nsw i32 %33, %34*/
	if ((cur_state == LEGUP_F_encode_BB__30_24)) begin
		encode_30_35_reg <= encode_30_35;
		if (start == 1'b0 && ^(encode_30_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_30_35_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %36*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %37 ], [ 0, %30 ]*/
	if (((cur_state == LEGUP_F_encode_BB__30_24) & (memory_controller_waitrequest == 1'd0))) begin
		encode_36_indvar15 = 32'd0;
	end
	/* encode: %36*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %37 ], [ 0, %30 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__37_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_36_indvar15 = encode_37_indvarnext16_reg;
	end
end
always @(posedge clk) begin
	/* encode: %36*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %37 ], [ 0, %30 ]*/
	if (((cur_state == LEGUP_F_encode_BB__30_24) & (memory_controller_waitrequest == 1'd0))) begin
		encode_36_indvar15_reg <= encode_36_indvar15;
		if (start == 1'b0 && ^(encode_36_indvar15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_36_indvar15_reg"); $finish; end
	end
	/* encode: %36*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %37 ], [ 0, %30 ]*/
	if (((cur_state == LEGUP_F_encode_BB__37_29) & (memory_controller_waitrequest == 1'd0))) begin
		encode_36_indvar15_reg <= encode_36_indvar15;
		if (start == 1'b0 && ^(encode_36_indvar15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_36_indvar15_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %36*/
	/*   %zl.0.i = phi i32 [ %41, %37 ], [ %35, %30 ]*/
	if (((cur_state == LEGUP_F_encode_BB__30_24) & (memory_controller_waitrequest == 1'd0))) begin
		encode_36_zl0i = encode_30_35;
	end
	/* encode: %36*/
	/*   %zl.0.i = phi i32 [ %41, %37 ], [ %35, %30 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__37_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_36_zl0i = encode_37_41;
	end
end
always @(posedge clk) begin
	/* encode: %36*/
	/*   %zl.0.i = phi i32 [ %41, %37 ], [ %35, %30 ]*/
	if (((cur_state == LEGUP_F_encode_BB__30_24) & (memory_controller_waitrequest == 1'd0))) begin
		encode_36_zl0i_reg <= encode_36_zl0i;
		if (start == 1'b0 && ^(encode_36_zl0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_36_zl0i_reg"); $finish; end
	end
	/* encode: %36*/
	/*   %zl.0.i = phi i32 [ %41, %37 ], [ %35, %30 ]*/
	if (((cur_state == LEGUP_F_encode_BB__37_29) & (memory_controller_waitrequest == 1'd0))) begin
		encode_36_zl0i_reg <= encode_36_zl0i;
		if (start == 1'b0 && ^(encode_36_zl0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_36_zl0i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %36*/
	/*   %i.0.i = add i32 %indvar15, 1*/
		encode_36_i0i = (encode_36_indvar15_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %36*/
	/*   %i.0.i = add i32 %indvar15, 1*/
	if ((cur_state == LEGUP_F_encode_BB__36_25)) begin
		encode_36_i0i_reg <= encode_36_i0i;
		if (start == 1'b0 && ^(encode_36_i0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_36_i0i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %36*/
	/*   %exitcond17 = icmp eq i32 %indvar15, 5*/
		encode_36_exitcond17 = (encode_36_indvar15_reg == 32'd5);
end
always @(posedge clk) begin
	/* encode: %36*/
	/*   %exitcond17 = icmp eq i32 %indvar15, 5*/
	if ((cur_state == LEGUP_F_encode_BB__36_25)) begin
		encode_36_exitcond17_reg <= encode_36_exitcond17;
		if (start == 1'b0 && ^(encode_36_exitcond17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_36_exitcond17_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %37*/
	/*   %.0.i = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %i.0.i*/
		encode_37_0i = (`TAG_g_delay_bpl_a | (4 * encode_36_i0i_reg));
end
always @(posedge clk) begin
	/* encode: %37*/
	/*   %.0.i = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %i.0.i*/
	if ((cur_state == LEGUP_F_encode_BB__37_26)) begin
		encode_37_0i_reg <= encode_37_0i;
		if (start == 1'b0 && ^(encode_37_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_37_0i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %37*/
	/*   %.01.i = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %i.0.i*/
		encode_37_01i = (`TAG_g_delay_dltx_a | (4 * encode_36_i0i_reg));
end
always @(posedge clk) begin
	/* encode: %37*/
	/*   %.01.i = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %i.0.i*/
	if ((cur_state == LEGUP_F_encode_BB__37_26)) begin
		encode_37_01i_reg <= encode_37_01i;
		if (start == 1'b0 && ^(encode_37_01i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_37_01i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %37*/
	/*   %38 = load i32* %.0.i, align 4*/
		encode_37_38 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %37*/
	/*   %38 = load i32* %.0.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__37_28)) begin
		encode_37_38_reg <= encode_37_38;
		if (start == 1'b0 && ^(encode_37_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_37_38_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %37*/
	/*   %39 = load i32* %.01.i, align 4*/
		encode_37_39 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %37*/
	/*   %39 = load i32* %.01.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__37_28)) begin
		encode_37_39_reg <= encode_37_39;
		if (start == 1'b0 && ^(encode_37_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_37_39_reg"); $finish; end
	end
end
always @(*) begin
	encode_37_40 = encode_37_40_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %37*/
	/*   %40 = mul nsw i32 %38, %39*/
	if ((cur_state == LEGUP_F_encode_BB__37_29)) begin
		encode_37_40_reg <= encode_37_40;
		if (start == 1'b0 && ^(encode_37_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_37_40_reg"); $finish; end
	end
	/* encode: %37*/
	/*   %40 = mul nsw i32 %38, %39*/
	if ((cur_state == LEGUP_F_encode_BB__37_29)) begin
		encode_37_40_reg <= encode_37_40;
		if (start == 1'b0 && ^(encode_37_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_37_40_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %37*/
	/*   %41 = add nsw i32 %zl.0.i, %40*/
		encode_37_41 = (encode_36_zl0i_reg + encode_37_40);
end
always @(posedge clk) begin
	/* encode: %37*/
	/*   %41 = add nsw i32 %zl.0.i, %40*/
	if ((cur_state == LEGUP_F_encode_BB__37_29)) begin
		encode_37_41_reg <= encode_37_41;
		if (start == 1'b0 && ^(encode_37_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_37_41_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %37*/
	/*   %indvar.next16 = add i32 %indvar15, 1*/
		encode_37_indvarnext16 = (encode_36_indvar15_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %37*/
	/*   %indvar.next16 = add i32 %indvar15, 1*/
	if ((cur_state == LEGUP_F_encode_BB__37_26)) begin
		encode_37_indvarnext16_reg <= encode_37_indvarnext16;
		if (start == 1'b0 && ^(encode_37_indvarnext16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_37_indvarnext16_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit_42 = encode_filtezexit_42_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %42 = mul nsw i32 %22, 12*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_42_reg <= encode_filtezexit_42;
		if (start == 1'b0 && ^(encode_filtezexit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_42_reg"); $finish; end
	end
	/* encode: %filtez.exit*/
	/*   %42 = mul nsw i32 %22, 12*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_42_reg <= encode_filtezexit_42;
		if (start == 1'b0 && ^(encode_filtezexit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_42_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %43 = add nsw i32 %xb.0, %42*/
		encode_filtezexit_43 = (encode_5_xb0_reg + encode_filtezexit_42);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %43 = add nsw i32 %xb.0, %42*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_43_reg <= encode_filtezexit_43;
		if (start == 1'b0 && ^(encode_filtezexit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_43_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %44 = add nsw i32 %32, %43*/
		encode_filtezexit_44 = (encode_30_32_reg + encode_filtezexit_43);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %44 = add nsw i32 %32, %43*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_44_reg <= encode_filtezexit_44;
		if (start == 1'b0 && ^(encode_filtezexit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_44_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %45 = sub nsw i32 %32, %43*/
		encode_filtezexit_45 = (encode_30_32_reg - encode_filtezexit_43);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %45 = sub nsw i32 %32, %43*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_45_reg <= encode_filtezexit_45;
		if (start == 1'b0 && ^(encode_filtezexit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_45_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %46 = ashr i32 %44, 15*/
		encode_filtezexit_46 = ($signed(encode_filtezexit_44) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %46 = ashr i32 %44, 15*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_46_reg <= encode_filtezexit_46;
		if (start == 1'b0 && ^(encode_filtezexit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_46_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %47 = ashr i32 %45, 15*/
		encode_filtezexit_47 = ($signed(encode_filtezexit_45) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %47 = ashr i32 %45, 15*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_47_reg <= encode_filtezexit_47;
		if (start == 1'b0 && ^(encode_filtezexit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_47_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %48 = ashr i32 %zl.0.i, 14*/
		encode_filtezexit_48 = ($signed(encode_36_zl0i_reg) >>> 32'd14);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %48 = ashr i32 %zl.0.i, 14*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		encode_filtezexit_48_reg <= encode_filtezexit_48;
		if (start == 1'b0 && ^(encode_filtezexit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_48_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %49 = load i32* @rlt1, align 4*/
		encode_filtezexit_49 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %49 = load i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		encode_filtezexit_49_reg <= encode_filtezexit_49;
		if (start == 1'b0 && ^(encode_filtezexit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_49_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %50 = load i32* @al1, align 4*/
		encode_filtezexit_50 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %50 = load i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		encode_filtezexit_50_reg <= encode_filtezexit_50;
		if (start == 1'b0 && ^(encode_filtezexit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_50_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %51 = load i32* @rlt2, align 4*/
		encode_filtezexit_51 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %51 = load i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_33)) begin
		encode_filtezexit_51_reg <= encode_filtezexit_51;
		if (start == 1'b0 && ^(encode_filtezexit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_51_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %52 = load i32* @al2, align 4*/
		encode_filtezexit_52 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %52 = load i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_33)) begin
		encode_filtezexit_52_reg <= encode_filtezexit_52;
		if (start == 1'b0 && ^(encode_filtezexit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_52_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %53 = shl nsw i32 %49, 1*/
		encode_filtezexit_53 = (encode_filtezexit_49 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %53 = shl nsw i32 %49, 1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		encode_filtezexit_53_reg <= encode_filtezexit_53;
		if (start == 1'b0 && ^(encode_filtezexit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_53_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit_54 = encode_filtezexit_54_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %54 = mul nsw i32 %50, %53*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_33)) begin
		encode_filtezexit_54_reg <= encode_filtezexit_54;
		if (start == 1'b0 && ^(encode_filtezexit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_54_reg"); $finish; end
	end
	/* encode: %filtez.exit*/
	/*   %54 = mul nsw i32 %50, %53*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_33)) begin
		encode_filtezexit_54_reg <= encode_filtezexit_54;
		if (start == 1'b0 && ^(encode_filtezexit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_54_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %55 = shl nsw i32 %51, 1*/
		encode_filtezexit_55 = (encode_filtezexit_51 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %55 = shl nsw i32 %51, 1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_33)) begin
		encode_filtezexit_55_reg <= encode_filtezexit_55;
		if (start == 1'b0 && ^(encode_filtezexit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_55_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit_56 = encode_filtezexit_56_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %56 = mul nsw i32 %52, %55*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_56_reg <= encode_filtezexit_56;
		if (start == 1'b0 && ^(encode_filtezexit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_56_reg"); $finish; end
	end
	/* encode: %filtez.exit*/
	/*   %56 = mul nsw i32 %52, %55*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_56_reg <= encode_filtezexit_56;
		if (start == 1'b0 && ^(encode_filtezexit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_56_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %57 = add nsw i32 %54, %56*/
		encode_filtezexit_57 = (encode_filtezexit_54_reg + encode_filtezexit_56);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %57 = add nsw i32 %54, %56*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_57_reg <= encode_filtezexit_57;
		if (start == 1'b0 && ^(encode_filtezexit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_57_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %58 = ashr i32 %57, 15*/
		encode_filtezexit_58 = ($signed(encode_filtezexit_57) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %58 = ashr i32 %57, 15*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_58_reg <= encode_filtezexit_58;
		if (start == 1'b0 && ^(encode_filtezexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_58_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %59 = add nsw i32 %48, %58*/
		encode_filtezexit_59 = (encode_filtezexit_48_reg + encode_filtezexit_58);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %59 = add nsw i32 %48, %58*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_59_reg <= encode_filtezexit_59;
		if (start == 1'b0 && ^(encode_filtezexit_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_59_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %60 = sub nsw i32 %46, %59*/
		encode_filtezexit_60 = (encode_filtezexit_46_reg - encode_filtezexit_59);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %60 = sub nsw i32 %46, %59*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_60_reg <= encode_filtezexit_60;
		if (start == 1'b0 && ^(encode_filtezexit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_60_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %61 = load i32* @detl, align 4*/
		encode_filtezexit_61 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %61 = load i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_61_reg <= encode_filtezexit_61;
		if (start == 1'b0 && ^(encode_filtezexit_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_61_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %62 = icmp sgt i32 %60, -1*/
		encode_filtezexit_62 = ($signed(encode_filtezexit_60) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %62 = icmp sgt i32 %60, -1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_62_reg <= encode_filtezexit_62;
		if (start == 1'b0 && ^(encode_filtezexit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_62_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %63 = sub nsw i32 0, %60*/
		encode_filtezexit_63 = (32'd0 - encode_filtezexit_60);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %63 = sub nsw i32 0, %60*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_63_reg <= encode_filtezexit_63;
		if (start == 1'b0 && ^(encode_filtezexit_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_63_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %. = select i1 %62, i32 %60, i32 %63*/
		encode_filtezexit_ = (encode_filtezexit_62 ? encode_filtezexit_60 : encode_filtezexit_63);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %. = select i1 %62, i32 %60, i32 %63*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit__reg <= encode_filtezexit_;
		if (start == 1'b0 && ^(encode_filtezexit_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit__reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %64*/
	/*   %65 = phi i32 [ 0, %filtez.exit ], [ %73, %72 ]*/
	if (((cur_state == LEGUP_F_encode_BB_filtezexit_34) & (memory_controller_waitrequest == 1'd0))) begin
		encode_64_65 = 32'd0;
	end
	/* encode: %64*/
	/*   %65 = phi i32 [ 0, %filtez.exit ], [ %73, %72 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__72_39) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_64_65 = encode_72_73;
	end
end
always @(posedge clk) begin
	/* encode: %64*/
	/*   %65 = phi i32 [ 0, %filtez.exit ], [ %73, %72 ]*/
	if (((cur_state == LEGUP_F_encode_BB_filtezexit_34) & (memory_controller_waitrequest == 1'd0))) begin
		encode_64_65_reg <= encode_64_65;
		if (start == 1'b0 && ^(encode_64_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_64_65_reg"); $finish; end
	end
	/* encode: %64*/
	/*   %65 = phi i32 [ 0, %filtez.exit ], [ %73, %72 ]*/
	if (((cur_state == LEGUP_F_encode_BB__72_39) & (memory_controller_waitrequest == 1'd0))) begin
		encode_64_65_reg <= encode_64_65;
		if (start == 1'b0 && ^(encode_64_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_64_65_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %64*/
	/*   %66 = icmp slt i32 %65, 30*/
		encode_64_66 = ($signed(encode_64_65_reg) < $signed(32'd30));
end
always @(posedge clk) begin
	/* encode: %64*/
	/*   %66 = icmp slt i32 %65, 30*/
	if ((cur_state == LEGUP_F_encode_BB__64_35)) begin
		encode_64_66_reg <= encode_64_66;
		if (start == 1'b0 && ^(encode_64_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_64_66_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %67*/
	/*   %scevgep14 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %65*/
		encode_67_scevgep14 = (1'd0 | (4 * encode_64_65_reg));
end
always @(posedge clk) begin
	/* encode: %67*/
	/*   %scevgep14 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %65*/
	if ((cur_state == LEGUP_F_encode_BB__67_36)) begin
		encode_67_scevgep14_reg <= encode_67_scevgep14;
		if (start == 1'b0 && ^(encode_67_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_67_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %67*/
	/*   %68 = load i32* %scevgep14, align 4*/
		encode_67_68 = decis_levl_out_a;
end
always @(posedge clk) begin
	/* encode: %67*/
	/*   %68 = load i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__67_37)) begin
		encode_67_68_reg <= encode_67_68;
		if (start == 1'b0 && ^(encode_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_67_68_reg"); $finish; end
	end
end
always @(*) begin
	encode_67_69 = encode_67_69_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %67*/
	/*   %69 = mul nsw i32 %68, %61*/
	if ((cur_state == LEGUP_F_encode_BB__67_38)) begin
		encode_67_69_reg <= encode_67_69;
		if (start == 1'b0 && ^(encode_67_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_67_69_reg"); $finish; end
	end
	/* encode: %67*/
	/*   %69 = mul nsw i32 %68, %61*/
	if ((cur_state == LEGUP_F_encode_BB__67_38)) begin
		encode_67_69_reg <= encode_67_69;
		if (start == 1'b0 && ^(encode_67_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_67_69_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %67*/
	/*   %70 = ashr i32 %69, 15*/
		encode_67_70 = ($signed(encode_67_69) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %67*/
	/*   %70 = ashr i32 %69, 15*/
	if ((cur_state == LEGUP_F_encode_BB__67_38)) begin
		encode_67_70_reg <= encode_67_70;
		if (start == 1'b0 && ^(encode_67_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_67_70_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %67*/
	/*   %71 = icmp sgt i32 %., %70*/
		encode_67_71 = ($signed(encode_filtezexit__reg) > $signed(encode_67_70));
end
always @(posedge clk) begin
	/* encode: %67*/
	/*   %71 = icmp sgt i32 %., %70*/
	if ((cur_state == LEGUP_F_encode_BB__67_38)) begin
		encode_67_71_reg <= encode_67_71;
		if (start == 1'b0 && ^(encode_67_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_67_71_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %72*/
	/*   %73 = add nsw i32 %65, 1*/
		encode_72_73 = (encode_64_65_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %72*/
	/*   %73 = add nsw i32 %65, 1*/
	if ((cur_state == LEGUP_F_encode_BB__72_39)) begin
		encode_72_73_reg <= encode_72_73;
		if (start == 1'b0 && ^(encode_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_72_73_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %quant26bt_pos.quant26bt_neg = select i1 %62, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
		encode_loopexiti_quant26bt_posquant26bt_neg = (encode_filtezexit_62_reg ? `TAG_g_quant26bt_pos_a : `TAG_g_quant26bt_neg_a);
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %quant26bt_pos.quant26bt_neg = select i1 %62, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_40)) begin
		encode_loopexiti_quant26bt_posquant26bt_neg_reg <= encode_loopexiti_quant26bt_posquant26bt_neg;
		if (start == 1'b0 && ^(encode_loopexiti_quant26bt_posquant26bt_neg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_quant26bt_posquant26bt_neg_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %.in = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg, i32 0, i32 %65*/
		encode_loopexiti_in = (encode_loopexiti_quant26bt_posquant26bt_neg_reg + (4 * encode_64_65_reg));
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %.in = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg, i32 0, i32 %65*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_41)) begin
		encode_loopexiti_in_reg <= encode_loopexiti_in;
		if (start == 1'b0 && ^(encode_loopexiti_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_in_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %74 = load i32* %.in, align 4*/
		encode_loopexiti_74 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %74 = load i32* %.in, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		encode_loopexiti_74_reg <= encode_loopexiti_74;
		if (start == 1'b0 && ^(encode_loopexiti_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_74_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %75 = ashr i32 %74, 2*/
		encode_loopexiti_75 = ($signed(encode_loopexiti_74) >>> 32'd2);
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %75 = ashr i32 %74, 2*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		encode_loopexiti_75_reg <= encode_loopexiti_75;
		if (start == 1'b0 && ^(encode_loopexiti_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_75_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %76 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %75*/
		encode_loopexiti_76 = (`TAG_g_qq4_code4_table_a | (4 * encode_loopexiti_75));
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %76 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %75*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		encode_loopexiti_76_reg <= encode_loopexiti_76;
		if (start == 1'b0 && ^(encode_loopexiti_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_76_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %77 = load i32* %76, align 4*/
		encode_loopexiti_77 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %77 = load i32* %76, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_45)) begin
		encode_loopexiti_77_reg <= encode_loopexiti_77;
		if (start == 1'b0 && ^(encode_loopexiti_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_77_reg"); $finish; end
	end
end
always @(*) begin
	encode_loopexiti_78 = encode_loopexiti_78_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %78 = mul nsw i32 %61, %77*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_46)) begin
		encode_loopexiti_78_reg <= encode_loopexiti_78;
		if (start == 1'b0 && ^(encode_loopexiti_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_78_reg"); $finish; end
	end
	/* encode: %.loopexit.i*/
	/*   %78 = mul nsw i32 %61, %77*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_46)) begin
		encode_loopexiti_78_reg <= encode_loopexiti_78;
		if (start == 1'b0 && ^(encode_loopexiti_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_78_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %79 = ashr i32 %78, 15*/
		encode_loopexiti_79 = ($signed(encode_loopexiti_78) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %79 = ashr i32 %78, 15*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_46)) begin
		encode_loopexiti_79_reg <= encode_loopexiti_79;
		if (start == 1'b0 && ^(encode_loopexiti_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_79_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %80 = load i32* @nbl, align 4*/
		encode_loopexiti_80 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %80 = load i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_42)) begin
		encode_loopexiti_80_reg <= encode_loopexiti_80;
		if (start == 1'b0 && ^(encode_loopexiti_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_80_reg"); $finish; end
	end
end
always @(*) begin
	encode_loopexiti_81 = encode_loopexiti_81_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %81 = mul nsw i32 %80, 127*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		encode_loopexiti_81_reg <= encode_loopexiti_81;
		if (start == 1'b0 && ^(encode_loopexiti_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_81_reg"); $finish; end
	end
	/* encode: %.loopexit.i*/
	/*   %81 = mul nsw i32 %80, 127*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		encode_loopexiti_81_reg <= encode_loopexiti_81;
		if (start == 1'b0 && ^(encode_loopexiti_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_81_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %82 = ashr i32 %81, 7*/
		encode_loopexiti_82 = ($signed(encode_loopexiti_81) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %82 = ashr i32 %81, 7*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		encode_loopexiti_82_reg <= encode_loopexiti_82;
		if (start == 1'b0 && ^(encode_loopexiti_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_82_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %83 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %75*/
		encode_loopexiti_83 = (`TAG_g_wl_code_table_a | (4 * encode_loopexiti_75));
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %83 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %75*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		encode_loopexiti_83_reg <= encode_loopexiti_83;
		if (start == 1'b0 && ^(encode_loopexiti_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_83_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %84 = load i32* %83, align 4*/
		encode_loopexiti_84 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %84 = load i32* %83, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_45)) begin
		encode_loopexiti_84_reg <= encode_loopexiti_84;
		if (start == 1'b0 && ^(encode_loopexiti_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_84_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %85 = add nsw i32 %82, %84*/
		encode_loopexiti_85 = (encode_loopexiti_82_reg + encode_loopexiti_84);
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %85 = add nsw i32 %82, %84*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_45)) begin
		encode_loopexiti_85_reg <= encode_loopexiti_85;
		if (start == 1'b0 && ^(encode_loopexiti_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_85_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.loopexit.i*/
	/*   %86 = icmp slt i32 %85, 0*/
		encode_loopexiti_86 = ($signed(encode_loopexiti_85) < $signed(32'd0));
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %86 = icmp slt i32 %85, 0*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_45)) begin
		encode_loopexiti_86_reg <= encode_loopexiti_86;
		if (start == 1'b0 && ^(encode_loopexiti_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_loopexiti_86_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %87*/
	/*   %88 = icmp sgt i32 %85, 18432*/
		encode_87_88 = ($signed(encode_loopexiti_85_reg) > $signed(32'd18432));
end
always @(posedge clk) begin
	/* encode: %87*/
	/*   %88 = icmp sgt i32 %85, 18432*/
	if ((cur_state == LEGUP_F_encode_BB__87_47)) begin
		encode_87_88_reg <= encode_87_88;
		if (start == 1'b0 && ^(encode_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_87_88_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %87*/
	/*   %.39 = select i1 %88, i32 18432, i32 %85*/
		encode_87_39 = (encode_87_88 ? 32'd18432 : encode_loopexiti_85_reg);
end
always @(posedge clk) begin
	/* encode: %87*/
	/*   %.39 = select i1 %88, i32 18432, i32 %85*/
	if ((cur_state == LEGUP_F_encode_BB__87_47)) begin
		encode_87_39_reg <= encode_87_39;
		if (start == 1'b0 && ^(encode_87_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_87_39_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logscl.exit*/
	/*   %.1.i23 = phi i32 [ 0, %.loopexit.i ], [ %.39, %87 ]*/
	if ((((cur_state == LEGUP_F_encode_BB_loopexiti_46) & (memory_controller_waitrequest == 1'd0)) & (encode_loopexiti_86_reg == 1'd1))) begin
		encode_logsclexit_1i23 = 32'd0;
	end
	/* encode: %logscl.exit*/
	/*   %.1.i23 = phi i32 [ 0, %.loopexit.i ], [ %.39, %87 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__87_47) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_logsclexit_1i23 = encode_87_39;
	end
end
always @(posedge clk) begin
	/* encode: %logscl.exit*/
	/*   %.1.i23 = phi i32 [ 0, %.loopexit.i ], [ %.39, %87 ]*/
	if ((((cur_state == LEGUP_F_encode_BB_loopexiti_46) & (memory_controller_waitrequest == 1'd0)) & (encode_loopexiti_86_reg == 1'd1))) begin
		encode_logsclexit_1i23_reg <= encode_logsclexit_1i23;
		if (start == 1'b0 && ^(encode_logsclexit_1i23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logsclexit_1i23_reg"); $finish; end
	end
	/* encode: %logscl.exit*/
	/*   %.1.i23 = phi i32 [ 0, %.loopexit.i ], [ %.39, %87 ]*/
	if (((cur_state == LEGUP_F_encode_BB__87_47) & (memory_controller_waitrequest == 1'd0))) begin
		encode_logsclexit_1i23_reg <= encode_logsclexit_1i23;
		if (start == 1'b0 && ^(encode_logsclexit_1i23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logsclexit_1i23_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logscl.exit*/
	/*   %89 = lshr i32 %.1.i23, 6*/
		encode_logsclexit_89 = (encode_logsclexit_1i23_reg >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* encode: %logscl.exit*/
	/*   %89 = lshr i32 %.1.i23, 6*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		encode_logsclexit_89_reg <= encode_logsclexit_89;
		if (start == 1'b0 && ^(encode_logsclexit_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logsclexit_89_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logscl.exit*/
	/*   %90 = and i32 %89, 31*/
		encode_logsclexit_90 = (encode_logsclexit_89 & 32'd31);
end
always @(posedge clk) begin
	/* encode: %logscl.exit*/
	/*   %90 = and i32 %89, 31*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		encode_logsclexit_90_reg <= encode_logsclexit_90;
		if (start == 1'b0 && ^(encode_logsclexit_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logsclexit_90_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logscl.exit*/
	/*   %91 = ashr i32 %.1.i23, 11*/
		encode_logsclexit_91 = ($signed(encode_logsclexit_1i23_reg) >>> 32'd11);
end
always @(posedge clk) begin
	/* encode: %logscl.exit*/
	/*   %91 = ashr i32 %.1.i23, 11*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		encode_logsclexit_91_reg <= encode_logsclexit_91;
		if (start == 1'b0 && ^(encode_logsclexit_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logsclexit_91_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logscl.exit*/
	/*   %92 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %90*/
		encode_logsclexit_92 = (`TAG_g_ilb_table_a | (4 * encode_logsclexit_90));
end
always @(posedge clk) begin
	/* encode: %logscl.exit*/
	/*   %92 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %90*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		encode_logsclexit_92_reg <= encode_logsclexit_92;
		if (start == 1'b0 && ^(encode_logsclexit_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logsclexit_92_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logscl.exit*/
	/*   %93 = load i32* %92, align 4*/
		encode_logsclexit_93 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %logscl.exit*/
	/*   %93 = load i32* %92, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_50)) begin
		encode_logsclexit_93_reg <= encode_logsclexit_93;
		if (start == 1'b0 && ^(encode_logsclexit_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logsclexit_93_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logscl.exit*/
	/*   %94 = sub nsw i32 9, %91*/
		encode_logsclexit_94 = (32'd9 - encode_logsclexit_91);
end
always @(posedge clk) begin
	/* encode: %logscl.exit*/
	/*   %94 = sub nsw i32 9, %91*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		encode_logsclexit_94_reg <= encode_logsclexit_94;
		if (start == 1'b0 && ^(encode_logsclexit_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logsclexit_94_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logscl.exit*/
	/*   %95 = ashr i32 %93, %94*/
		encode_logsclexit_95 = ($signed(encode_logsclexit_93) >>> encode_logsclexit_94_reg);
end
always @(posedge clk) begin
	/* encode: %logscl.exit*/
	/*   %95 = ashr i32 %93, %94*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_50)) begin
		encode_logsclexit_95_reg <= encode_logsclexit_95;
		if (start == 1'b0 && ^(encode_logsclexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logsclexit_95_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logscl.exit*/
	/*   %96 = shl i32 %95, 3*/
		encode_logsclexit_96 = (encode_logsclexit_95 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* encode: %logscl.exit*/
	/*   %96 = shl i32 %95, 3*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_50)) begin
		encode_logsclexit_96_reg <= encode_logsclexit_96;
		if (start == 1'b0 && ^(encode_logsclexit_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logsclexit_96_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logscl.exit*/
	/*   %97 = add nsw i32 %79, %48*/
		encode_logsclexit_97 = (encode_loopexiti_79_reg + encode_filtezexit_48_reg);
end
always @(posedge clk) begin
	/* encode: %logscl.exit*/
	/*   %97 = add nsw i32 %79, %48*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		encode_logsclexit_97_reg <= encode_logsclexit_97;
		if (start == 1'b0 && ^(encode_logsclexit_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logsclexit_97_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logscl.exit*/
	/*   %98 = icmp eq i32 %79, 0*/
		encode_logsclexit_98 = (encode_loopexiti_79_reg == 32'd0);
end
always @(posedge clk) begin
	/* encode: %logscl.exit*/
	/*   %98 = icmp eq i32 %79, 0*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		encode_logsclexit_98_reg <= encode_logsclexit_98;
		if (start == 1'b0 && ^(encode_logsclexit_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logsclexit_98_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader29*/
	/*   %99 = phi i32 [ %104, %100 ], [ 0, %.preheader29.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader29preheader_53) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader29_99 = 32'd0;
	end
	/* encode: %.preheader29*/
	/*   %99 = phi i32 [ %104, %100 ], [ 0, %.preheader29.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__100_59) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheader29_99 = encode_100_104_reg;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader29*/
	/*   %99 = phi i32 [ %104, %100 ], [ 0, %.preheader29.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader29preheader_53) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader29_99_reg <= encode_preheader29_99;
		if (start == 1'b0 && ^(encode_preheader29_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader29_99_reg"); $finish; end
	end
	/* encode: %.preheader29*/
	/*   %99 = phi i32 [ %104, %100 ], [ 0, %.preheader29.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB__100_59) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader29_99_reg <= encode_preheader29_99;
		if (start == 1'b0 && ^(encode_preheader29_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader29_99_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader29*/
	/*   %scevgep10 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %99*/
		encode_preheader29_scevgep10 = (`TAG_g_delay_bpl_a | (4 * encode_preheader29_99_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader29*/
	/*   %scevgep10 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %99*/
	if ((cur_state == LEGUP_F_encode_BB_preheader29_54)) begin
		encode_preheader29_scevgep10_reg <= encode_preheader29_scevgep10;
		if (start == 1'b0 && ^(encode_preheader29_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader29_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader29*/
	/*   %exitcond9 = icmp eq i32 %99, 6*/
		encode_preheader29_exitcond9 = (encode_preheader29_99_reg == 32'd6);
end
always @(posedge clk) begin
	/* encode: %.preheader29*/
	/*   %exitcond9 = icmp eq i32 %99, 6*/
	if ((cur_state == LEGUP_F_encode_BB_preheader29_54)) begin
		encode_preheader29_exitcond9_reg <= encode_preheader29_exitcond9;
		if (start == 1'b0 && ^(encode_preheader29_exitcond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader29_exitcond9_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %100*/
	/*   %101 = load i32* %scevgep10, align 4*/
		encode_100_101 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %100*/
	/*   %101 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__100_57)) begin
		encode_100_101_reg <= encode_100_101;
		if (start == 1'b0 && ^(encode_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_100_101_reg"); $finish; end
	end
end
always @(*) begin
	encode_100_102 = encode_100_102_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %100*/
	/*   %102 = mul nsw i32 %101, 255*/
	if ((cur_state == LEGUP_F_encode_BB__100_58)) begin
		encode_100_102_reg <= encode_100_102;
		if (start == 1'b0 && ^(encode_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_100_102_reg"); $finish; end
	end
	/* encode: %100*/
	/*   %102 = mul nsw i32 %101, 255*/
	if ((cur_state == LEGUP_F_encode_BB__100_58)) begin
		encode_100_102_reg <= encode_100_102;
		if (start == 1'b0 && ^(encode_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_100_102_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %100*/
	/*   %103 = ashr i32 %102, 8*/
		encode_100_103 = ($signed(encode_100_102) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %100*/
	/*   %103 = ashr i32 %102, 8*/
	if ((cur_state == LEGUP_F_encode_BB__100_58)) begin
		encode_100_103_reg <= encode_100_103;
		if (start == 1'b0 && ^(encode_100_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_100_103_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %100*/
	/*   %104 = add nsw i32 %99, 1*/
		encode_100_104 = (encode_preheader29_99_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %100*/
	/*   %104 = add nsw i32 %99, 1*/
	if ((cur_state == LEGUP_F_encode_BB__100_55)) begin
		encode_100_104_reg <= encode_100_104;
		if (start == 1'b0 && ^(encode_100_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_100_104_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader30*/
	/*   %105 = phi i32 [ %116, %106 ], [ 0, %.preheader30.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader30preheader_52) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader30_105 = 32'd0;
	end
	/* encode: %.preheader30*/
	/*   %105 = phi i32 [ %116, %106 ], [ 0, %.preheader30.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__106_65) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheader30_105 = encode_106_116_reg;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader30*/
	/*   %105 = phi i32 [ %116, %106 ], [ 0, %.preheader30.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader30preheader_52) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader30_105_reg <= encode_preheader30_105;
		if (start == 1'b0 && ^(encode_preheader30_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader30_105_reg"); $finish; end
	end
	/* encode: %.preheader30*/
	/*   %105 = phi i32 [ %116, %106 ], [ 0, %.preheader30.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB__106_65) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader30_105_reg <= encode_preheader30_105;
		if (start == 1'b0 && ^(encode_preheader30_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader30_105_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader30*/
	/*   %scevgep12 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %105*/
		encode_preheader30_scevgep12 = (`TAG_g_delay_bpl_a | (4 * encode_preheader30_105_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader30*/
	/*   %scevgep12 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %105*/
	if ((cur_state == LEGUP_F_encode_BB_preheader30_60)) begin
		encode_preheader30_scevgep12_reg <= encode_preheader30_scevgep12;
		if (start == 1'b0 && ^(encode_preheader30_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader30_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader30*/
	/*   %exitcond11 = icmp eq i32 %105, 6*/
		encode_preheader30_exitcond11 = (encode_preheader30_105_reg == 32'd6);
end
always @(posedge clk) begin
	/* encode: %.preheader30*/
	/*   %exitcond11 = icmp eq i32 %105, 6*/
	if ((cur_state == LEGUP_F_encode_BB_preheader30_60)) begin
		encode_preheader30_exitcond11_reg <= encode_preheader30_exitcond11;
		if (start == 1'b0 && ^(encode_preheader30_exitcond11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader30_exitcond11_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %106*/
	/*   %scevgep13 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %105*/
		encode_106_scevgep13 = (`TAG_g_delay_dltx_a | (4 * encode_preheader30_105_reg));
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %scevgep13 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %105*/
	if ((cur_state == LEGUP_F_encode_BB__106_61)) begin
		encode_106_scevgep13_reg <= encode_106_scevgep13;
		if (start == 1'b0 && ^(encode_106_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %106*/
	/*   %107 = load i32* %scevgep13, align 4*/
		encode_106_107 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %107 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_63)) begin
		encode_106_107_reg <= encode_106_107;
		if (start == 1'b0 && ^(encode_106_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_107_reg"); $finish; end
	end
end
always @(*) begin
	encode_106_108 = encode_106_108_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %108 = mul nsw i32 %79, %107*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		encode_106_108_reg <= encode_106_108;
		if (start == 1'b0 && ^(encode_106_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_108_reg"); $finish; end
	end
	/* encode: %106*/
	/*   %108 = mul nsw i32 %79, %107*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		encode_106_108_reg <= encode_106_108;
		if (start == 1'b0 && ^(encode_106_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_108_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %106*/
	/*   %109 = ashr i32 %108, 31*/
		encode_106_109 = ($signed(encode_106_108) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %109 = ashr i32 %108, 31*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		encode_106_109_reg <= encode_106_109;
		if (start == 1'b0 && ^(encode_106_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_109_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %106*/
	/*   %110 = and i32 %109, -256*/
		encode_106_110 = (encode_106_109 & -32'd256);
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %110 = and i32 %109, -256*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		encode_106_110_reg <= encode_106_110;
		if (start == 1'b0 && ^(encode_106_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_110_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %106*/
	/*   %111 = or i32 %110, 128*/
		encode_106_111 = (encode_106_110 | 32'd128);
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %111 = or i32 %110, 128*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		encode_106_111_reg <= encode_106_111;
		if (start == 1'b0 && ^(encode_106_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_111_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %106*/
	/*   %112 = load i32* %scevgep12, align 4*/
		encode_106_112 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %112 = load i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_63)) begin
		encode_106_112_reg <= encode_106_112;
		if (start == 1'b0 && ^(encode_106_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_112_reg"); $finish; end
	end
end
always @(*) begin
	encode_106_113 = encode_106_113_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %113 = mul nsw i32 %112, 255*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		encode_106_113_reg <= encode_106_113;
		if (start == 1'b0 && ^(encode_106_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_113_reg"); $finish; end
	end
	/* encode: %106*/
	/*   %113 = mul nsw i32 %112, 255*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		encode_106_113_reg <= encode_106_113;
		if (start == 1'b0 && ^(encode_106_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_113_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %106*/
	/*   %114 = ashr i32 %113, 8*/
		encode_106_114 = ($signed(encode_106_113) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %114 = ashr i32 %113, 8*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		encode_106_114_reg <= encode_106_114;
		if (start == 1'b0 && ^(encode_106_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_114_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %106*/
	/*   %115 = add nsw i32 %111, %114*/
		encode_106_115 = (encode_106_111 + encode_106_114);
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %115 = add nsw i32 %111, %114*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		encode_106_115_reg <= encode_106_115;
		if (start == 1'b0 && ^(encode_106_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_115_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %106*/
	/*   %116 = add nsw i32 %105, 1*/
		encode_106_116 = (encode_preheader30_105_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %116 = add nsw i32 %105, 1*/
	if ((cur_state == LEGUP_F_encode_BB__106_61)) begin
		encode_106_116_reg <= encode_106_116;
		if (start == 1'b0 && ^(encode_106_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_106_116_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %117 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
		encode_upzeroexit21_117 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %117 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_70)) begin
		encode_upzeroexit21_117_reg <= encode_upzeroexit21_117;
		if (start == 1'b0 && ^(encode_upzeroexit21_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_117_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %118 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
		encode_upzeroexit21_118 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %118 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_70)) begin
		encode_upzeroexit21_118_reg <= encode_upzeroexit21_118;
		if (start == 1'b0 && ^(encode_upzeroexit21_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_118_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %119 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4*/
		encode_upzeroexit21_119 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %119 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_71)) begin
		encode_upzeroexit21_119_reg <= encode_upzeroexit21_119;
		if (start == 1'b0 && ^(encode_upzeroexit21_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_119_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %120 = load i32* @plt1, align 4*/
		encode_upzeroexit21_120 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %120 = load i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_72)) begin
		encode_upzeroexit21_120_reg <= encode_upzeroexit21_120;
		if (start == 1'b0 && ^(encode_upzeroexit21_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_120_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %121 = load i32* @plt2, align 4*/
		encode_upzeroexit21_121 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %121 = load i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_73)) begin
		encode_upzeroexit21_121_reg <= encode_upzeroexit21_121;
		if (start == 1'b0 && ^(encode_upzeroexit21_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_121_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %122 = shl nsw i32 %50, 2*/
		encode_upzeroexit21_122 = (encode_filtezexit_50_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %122 = shl nsw i32 %50, 2*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_68)) begin
		encode_upzeroexit21_122_reg <= encode_upzeroexit21_122;
		if (start == 1'b0 && ^(encode_upzeroexit21_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_122_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit21_123 = encode_upzeroexit21_123_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %123 = mul nsw i32 %97, %120*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_73)) begin
		encode_upzeroexit21_123_reg <= encode_upzeroexit21_123;
		if (start == 1'b0 && ^(encode_upzeroexit21_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_123_reg"); $finish; end
	end
	/* encode: %upzero.exit21*/
	/*   %123 = mul nsw i32 %97, %120*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_73)) begin
		encode_upzeroexit21_123_reg <= encode_upzeroexit21_123;
		if (start == 1'b0 && ^(encode_upzeroexit21_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_123_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %124 = icmp sgt i32 %123, -1*/
		encode_upzeroexit21_124 = ($signed(encode_upzeroexit21_123) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %124 = icmp sgt i32 %123, -1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_73)) begin
		encode_upzeroexit21_124_reg <= encode_upzeroexit21_124;
		if (start == 1'b0 && ^(encode_upzeroexit21_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_124_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %125 = sub nsw i32 0, %122*/
		encode_upzeroexit21_125 = (32'd0 - encode_upzeroexit21_122);
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %125 = sub nsw i32 0, %122*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_68)) begin
		encode_upzeroexit21_125_reg <= encode_upzeroexit21_125;
		if (start == 1'b0 && ^(encode_upzeroexit21_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_125_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %.41 = select i1 %124, i32 %125, i32 %122*/
		encode_upzeroexit21_41 = (encode_upzeroexit21_124 ? encode_upzeroexit21_125_reg : encode_upzeroexit21_122_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %.41 = select i1 %124, i32 %125, i32 %122*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_73)) begin
		encode_upzeroexit21_41_reg <= encode_upzeroexit21_41;
		if (start == 1'b0 && ^(encode_upzeroexit21_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_41_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %126 = ashr i32 %.41, 7*/
		encode_upzeroexit21_126 = ($signed(encode_upzeroexit21_41) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %126 = ashr i32 %.41, 7*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_73)) begin
		encode_upzeroexit21_126_reg <= encode_upzeroexit21_126;
		if (start == 1'b0 && ^(encode_upzeroexit21_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_126_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit21_127 = encode_upzeroexit21_127_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %127 = mul nsw i32 %97, %121*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_74)) begin
		encode_upzeroexit21_127_reg <= encode_upzeroexit21_127;
		if (start == 1'b0 && ^(encode_upzeroexit21_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_127_reg"); $finish; end
	end
	/* encode: %upzero.exit21*/
	/*   %127 = mul nsw i32 %97, %121*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_74)) begin
		encode_upzeroexit21_127_reg <= encode_upzeroexit21_127;
		if (start == 1'b0 && ^(encode_upzeroexit21_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_127_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %128 = ashr i32 %127, 31*/
		encode_upzeroexit21_128 = ($signed(encode_upzeroexit21_127) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %128 = ashr i32 %127, 31*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_74)) begin
		encode_upzeroexit21_128_reg <= encode_upzeroexit21_128;
		if (start == 1'b0 && ^(encode_upzeroexit21_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_128_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %129 = and i32 %128, -256*/
		encode_upzeroexit21_129 = (encode_upzeroexit21_128 & -32'd256);
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %129 = and i32 %128, -256*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_74)) begin
		encode_upzeroexit21_129_reg <= encode_upzeroexit21_129;
		if (start == 1'b0 && ^(encode_upzeroexit21_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_129_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %130 = or i32 %129, 128*/
		encode_upzeroexit21_130 = (encode_upzeroexit21_129 | 32'd128);
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %130 = or i32 %129, 128*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_74)) begin
		encode_upzeroexit21_130_reg <= encode_upzeroexit21_130;
		if (start == 1'b0 && ^(encode_upzeroexit21_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_130_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %wd4.0.i14 = add nsw i32 %126, %130*/
		encode_upzeroexit21_wd40i14 = (encode_upzeroexit21_126_reg + encode_upzeroexit21_130);
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %wd4.0.i14 = add nsw i32 %126, %130*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_74)) begin
		encode_upzeroexit21_wd40i14_reg <= encode_upzeroexit21_wd40i14;
		if (start == 1'b0 && ^(encode_upzeroexit21_wd40i14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_wd40i14_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit21_131 = encode_upzeroexit21_131_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %131 = mul nsw i32 %52, 127*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_69)) begin
		encode_upzeroexit21_131_reg <= encode_upzeroexit21_131;
		if (start == 1'b0 && ^(encode_upzeroexit21_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_131_reg"); $finish; end
	end
	/* encode: %upzero.exit21*/
	/*   %131 = mul nsw i32 %52, 127*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_69)) begin
		encode_upzeroexit21_131_reg <= encode_upzeroexit21_131;
		if (start == 1'b0 && ^(encode_upzeroexit21_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_131_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %132 = ashr i32 %131, 7*/
		encode_upzeroexit21_132 = ($signed(encode_upzeroexit21_131) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %132 = ashr i32 %131, 7*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_69)) begin
		encode_upzeroexit21_132_reg <= encode_upzeroexit21_132;
		if (start == 1'b0 && ^(encode_upzeroexit21_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_132_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %133 = add nsw i32 %wd4.0.i14, %132*/
		encode_upzeroexit21_133 = (encode_upzeroexit21_wd40i14 + encode_upzeroexit21_132_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %133 = add nsw i32 %wd4.0.i14, %132*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_74)) begin
		encode_upzeroexit21_133_reg <= encode_upzeroexit21_133;
		if (start == 1'b0 && ^(encode_upzeroexit21_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_133_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit21*/
	/*   %134 = icmp sgt i32 %133, 12288*/
		encode_upzeroexit21_134 = ($signed(encode_upzeroexit21_133) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %134 = icmp sgt i32 %133, 12288*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_74)) begin
		encode_upzeroexit21_134_reg <= encode_upzeroexit21_134;
		if (start == 1'b0 && ^(encode_upzeroexit21_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit21_134_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %135*/
	/*   %136 = icmp slt i32 %133, -12288*/
		encode_135_136 = ($signed(encode_upzeroexit21_133_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* encode: %135*/
	/*   %136 = icmp slt i32 %133, -12288*/
	if ((cur_state == LEGUP_F_encode_BB__135_75)) begin
		encode_135_136_reg <= encode_135_136;
		if (start == 1'b0 && ^(encode_135_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_135_136_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %135*/
	/*   %.42 = select i1 %136, i32 -12288, i32 %133*/
		encode_135_42 = (encode_135_136 ? -32'd12288 : encode_upzeroexit21_133_reg);
end
always @(posedge clk) begin
	/* encode: %135*/
	/*   %.42 = select i1 %136, i32 -12288, i32 %133*/
	if ((cur_state == LEGUP_F_encode_BB__135_75)) begin
		encode_135_42_reg <= encode_135_42;
		if (start == 1'b0 && ^(encode_135_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_135_42_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %apl2.1.i16 = phi i32 [ 12288, %upzero.exit21 ], [ %.42, %135 ]*/
	if ((((cur_state == LEGUP_F_encode_BB_upzeroexit21_74) & (memory_controller_waitrequest == 1'd0)) & (encode_upzeroexit21_134 == 1'd1))) begin
		encode_uppol2exit17_apl21i16 = 32'd12288;
	end
	/* encode: %uppol2.exit17*/
	/*   %apl2.1.i16 = phi i32 [ 12288, %upzero.exit21 ], [ %.42, %135 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__135_75) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_uppol2exit17_apl21i16 = encode_135_42;
	end
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %apl2.1.i16 = phi i32 [ 12288, %upzero.exit21 ], [ %.42, %135 ]*/
	if ((((cur_state == LEGUP_F_encode_BB_upzeroexit21_74) & (memory_controller_waitrequest == 1'd0)) & (encode_upzeroexit21_134 == 1'd1))) begin
		encode_uppol2exit17_apl21i16_reg <= encode_uppol2exit17_apl21i16;
		if (start == 1'b0 && ^(encode_uppol2exit17_apl21i16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_apl21i16_reg"); $finish; end
	end
	/* encode: %uppol2.exit17*/
	/*   %apl2.1.i16 = phi i32 [ 12288, %upzero.exit21 ], [ %.42, %135 ]*/
	if (((cur_state == LEGUP_F_encode_BB__135_75) & (memory_controller_waitrequest == 1'd0))) begin
		encode_uppol2exit17_apl21i16_reg <= encode_uppol2exit17_apl21i16;
		if (start == 1'b0 && ^(encode_uppol2exit17_apl21i16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_apl21i16_reg"); $finish; end
	end
end
always @(*) begin
	encode_uppol2exit17_137 = encode_uppol2exit17_137_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %137 = mul nsw i32 %50, 255*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		encode_uppol2exit17_137_reg <= encode_uppol2exit17_137;
		if (start == 1'b0 && ^(encode_uppol2exit17_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_137_reg"); $finish; end
	end
	/* encode: %uppol2.exit17*/
	/*   %137 = mul nsw i32 %50, 255*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		encode_uppol2exit17_137_reg <= encode_uppol2exit17_137;
		if (start == 1'b0 && ^(encode_uppol2exit17_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_137_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %138 = ashr i32 %137, 8*/
		encode_uppol2exit17_138 = ($signed(encode_uppol2exit17_137) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %138 = ashr i32 %137, 8*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		encode_uppol2exit17_138_reg <= encode_uppol2exit17_138;
		if (start == 1'b0 && ^(encode_uppol2exit17_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_138_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %139 = ashr i32 %123, 31*/
		encode_uppol2exit17_139 = ($signed(encode_upzeroexit21_123_reg) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %139 = ashr i32 %123, 31*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		encode_uppol2exit17_139_reg <= encode_uppol2exit17_139;
		if (start == 1'b0 && ^(encode_uppol2exit17_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_139_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %140 = and i32 %139, -384*/
		encode_uppol2exit17_140 = (encode_uppol2exit17_139 & -32'd384);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %140 = and i32 %139, -384*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		encode_uppol2exit17_140_reg <= encode_uppol2exit17_140;
		if (start == 1'b0 && ^(encode_uppol2exit17_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_140_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %141 = add nsw i32 %140, 192*/
		encode_uppol2exit17_141 = (encode_uppol2exit17_140 + 32'd192);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %141 = add nsw i32 %140, 192*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		encode_uppol2exit17_141_reg <= encode_uppol2exit17_141;
		if (start == 1'b0 && ^(encode_uppol2exit17_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_141_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %apl1.0.i9 = add nsw i32 %138, %141*/
		encode_uppol2exit17_apl10i9 = (encode_uppol2exit17_138 + encode_uppol2exit17_141_reg);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %apl1.0.i9 = add nsw i32 %138, %141*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		encode_uppol2exit17_apl10i9_reg <= encode_uppol2exit17_apl10i9;
		if (start == 1'b0 && ^(encode_uppol2exit17_apl10i9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_apl10i9_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %142 = sub nsw i32 15360, %apl2.1.i16*/
		encode_uppol2exit17_142 = (32'd15360 - encode_uppol2exit17_apl21i16_reg);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %142 = sub nsw i32 15360, %apl2.1.i16*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		encode_uppol2exit17_142_reg <= encode_uppol2exit17_142;
		if (start == 1'b0 && ^(encode_uppol2exit17_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_142_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %143 = icmp sgt i32 %apl1.0.i9, %142*/
		encode_uppol2exit17_143 = ($signed(encode_uppol2exit17_apl10i9) > $signed(encode_uppol2exit17_142_reg));
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %143 = icmp sgt i32 %apl1.0.i9, %142*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		encode_uppol2exit17_143_reg <= encode_uppol2exit17_143;
		if (start == 1'b0 && ^(encode_uppol2exit17_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_143_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %.apl1.0.i9 = select i1 %143, i32 %142, i32 %apl1.0.i9*/
		encode_uppol2exit17_apl10i9_var0 = (encode_uppol2exit17_143 ? encode_uppol2exit17_142_reg : encode_uppol2exit17_apl10i9);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %.apl1.0.i9 = select i1 %143, i32 %142, i32 %apl1.0.i9*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		encode_uppol2exit17_apl10i9_var0_reg <= encode_uppol2exit17_apl10i9_var0;
		if (start == 1'b0 && ^(encode_uppol2exit17_apl10i9_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_apl10i9_var0_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %144 = sub nsw i32 0, %142*/
		encode_uppol2exit17_144 = (32'd0 - encode_uppol2exit17_142);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %144 = sub nsw i32 0, %142*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		encode_uppol2exit17_144_reg <= encode_uppol2exit17_144;
		if (start == 1'b0 && ^(encode_uppol2exit17_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_144_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %145 = icmp slt i32 %.apl1.0.i9, %144*/
		encode_uppol2exit17_145 = ($signed(encode_uppol2exit17_apl10i9_var0) < $signed(encode_uppol2exit17_144_reg));
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %145 = icmp slt i32 %.apl1.0.i9, %144*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		encode_uppol2exit17_145_reg <= encode_uppol2exit17_145;
		if (start == 1'b0 && ^(encode_uppol2exit17_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_145_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %apl1.2.i11 = select i1 %145, i32 %144, i32 %.apl1.0.i9*/
		encode_uppol2exit17_apl12i11 = (encode_uppol2exit17_145 ? encode_uppol2exit17_144_reg : encode_uppol2exit17_apl10i9_var0);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %apl1.2.i11 = select i1 %145, i32 %144, i32 %.apl1.0.i9*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		encode_uppol2exit17_apl12i11_reg <= encode_uppol2exit17_apl12i11;
		if (start == 1'b0 && ^(encode_uppol2exit17_apl12i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_apl12i11_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %146 = add nsw i32 %59, %79*/
		encode_uppol2exit17_146 = (encode_filtezexit_59_reg + encode_loopexiti_79_reg);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %146 = add nsw i32 %59, %79*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		encode_uppol2exit17_146_reg <= encode_uppol2exit17_146;
		if (start == 1'b0 && ^(encode_uppol2exit17_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_146_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %147 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4*/
		encode_uppol2exit17_147 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %147 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_79)) begin
		encode_uppol2exit17_147_reg <= encode_uppol2exit17_147;
		if (start == 1'b0 && ^(encode_uppol2exit17_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_147_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit17*/
	/*   %148 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
		encode_uppol2exit17_148 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %148 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_80)) begin
		encode_uppol2exit17_148_reg <= encode_uppol2exit17_148;
		if (start == 1'b0 && ^(encode_uppol2exit17_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_148_reg"); $finish; end
	end
end
always @(*) begin
	encode_uppol2exit17_149 = encode_uppol2exit17_149_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %149 = mul nsw i32 %147, %148*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_81)) begin
		encode_uppol2exit17_149_reg <= encode_uppol2exit17_149;
		if (start == 1'b0 && ^(encode_uppol2exit17_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_149_reg"); $finish; end
	end
	/* encode: %uppol2.exit17*/
	/*   %149 = mul nsw i32 %147, %148*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_81)) begin
		encode_uppol2exit17_149_reg <= encode_uppol2exit17_149;
		if (start == 1'b0 && ^(encode_uppol2exit17_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit17_149_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %150*/
	/*   %indvar = phi i32 [ %indvar.next, %151 ], [ 0, %uppol2.exit17 ]*/
	if (((cur_state == LEGUP_F_encode_BB_uppol2exit17_81) & (memory_controller_waitrequest == 1'd0))) begin
		encode_150_indvar = 32'd0;
	end
	/* encode: %150*/
	/*   %indvar = phi i32 [ %indvar.next, %151 ], [ 0, %uppol2.exit17 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__151_86) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_150_indvar = encode_151_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* encode: %150*/
	/*   %indvar = phi i32 [ %indvar.next, %151 ], [ 0, %uppol2.exit17 ]*/
	if (((cur_state == LEGUP_F_encode_BB_uppol2exit17_81) & (memory_controller_waitrequest == 1'd0))) begin
		encode_150_indvar_reg <= encode_150_indvar;
		if (start == 1'b0 && ^(encode_150_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_150_indvar_reg"); $finish; end
	end
	/* encode: %150*/
	/*   %indvar = phi i32 [ %indvar.next, %151 ], [ 0, %uppol2.exit17 ]*/
	if (((cur_state == LEGUP_F_encode_BB__151_86) & (memory_controller_waitrequest == 1'd0))) begin
		encode_150_indvar_reg <= encode_150_indvar;
		if (start == 1'b0 && ^(encode_150_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_150_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %150*/
	/*   %zl.0.i4 = phi i32 [ %155, %151 ], [ %149, %uppol2.exit17 ]*/
	if (((cur_state == LEGUP_F_encode_BB_uppol2exit17_81) & (memory_controller_waitrequest == 1'd0))) begin
		encode_150_zl0i4 = encode_uppol2exit17_149;
	end
	/* encode: %150*/
	/*   %zl.0.i4 = phi i32 [ %155, %151 ], [ %149, %uppol2.exit17 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__151_86) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_150_zl0i4 = encode_151_155;
	end
end
always @(posedge clk) begin
	/* encode: %150*/
	/*   %zl.0.i4 = phi i32 [ %155, %151 ], [ %149, %uppol2.exit17 ]*/
	if (((cur_state == LEGUP_F_encode_BB_uppol2exit17_81) & (memory_controller_waitrequest == 1'd0))) begin
		encode_150_zl0i4_reg <= encode_150_zl0i4;
		if (start == 1'b0 && ^(encode_150_zl0i4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_150_zl0i4_reg"); $finish; end
	end
	/* encode: %150*/
	/*   %zl.0.i4 = phi i32 [ %155, %151 ], [ %149, %uppol2.exit17 ]*/
	if (((cur_state == LEGUP_F_encode_BB__151_86) & (memory_controller_waitrequest == 1'd0))) begin
		encode_150_zl0i4_reg <= encode_150_zl0i4;
		if (start == 1'b0 && ^(encode_150_zl0i4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_150_zl0i4_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %150*/
	/*   %i.0.i5 = add i32 %indvar, 1*/
		encode_150_i0i5 = (encode_150_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %150*/
	/*   %i.0.i5 = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_encode_BB__150_82)) begin
		encode_150_i0i5_reg <= encode_150_i0i5;
		if (start == 1'b0 && ^(encode_150_i0i5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_150_i0i5_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %150*/
	/*   %exitcond6 = icmp eq i32 %indvar, 5*/
		encode_150_exitcond6 = (encode_150_indvar_reg == 32'd5);
end
always @(posedge clk) begin
	/* encode: %150*/
	/*   %exitcond6 = icmp eq i32 %indvar, 5*/
	if ((cur_state == LEGUP_F_encode_BB__150_82)) begin
		encode_150_exitcond6_reg <= encode_150_exitcond6;
		if (start == 1'b0 && ^(encode_150_exitcond6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_150_exitcond6_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %151*/
	/*   %.0.i7 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %i.0.i5*/
		encode_151_0i7 = (`TAG_g_delay_bph_a | (4 * encode_150_i0i5_reg));
end
always @(posedge clk) begin
	/* encode: %151*/
	/*   %.0.i7 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %i.0.i5*/
	if ((cur_state == LEGUP_F_encode_BB__151_83)) begin
		encode_151_0i7_reg <= encode_151_0i7;
		if (start == 1'b0 && ^(encode_151_0i7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_151_0i7_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %151*/
	/*   %.01.i6 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %i.0.i5*/
		encode_151_01i6 = (`TAG_g_delay_dhx_a | (4 * encode_150_i0i5_reg));
end
always @(posedge clk) begin
	/* encode: %151*/
	/*   %.01.i6 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %i.0.i5*/
	if ((cur_state == LEGUP_F_encode_BB__151_83)) begin
		encode_151_01i6_reg <= encode_151_01i6;
		if (start == 1'b0 && ^(encode_151_01i6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_151_01i6_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %151*/
	/*   %152 = load i32* %.0.i7, align 4*/
		encode_151_152 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %151*/
	/*   %152 = load i32* %.0.i7, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__151_85)) begin
		encode_151_152_reg <= encode_151_152;
		if (start == 1'b0 && ^(encode_151_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_151_152_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %151*/
	/*   %153 = load i32* %.01.i6, align 4*/
		encode_151_153 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %151*/
	/*   %153 = load i32* %.01.i6, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__151_85)) begin
		encode_151_153_reg <= encode_151_153;
		if (start == 1'b0 && ^(encode_151_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_151_153_reg"); $finish; end
	end
end
always @(*) begin
	encode_151_154 = encode_151_154_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %151*/
	/*   %154 = mul nsw i32 %152, %153*/
	if ((cur_state == LEGUP_F_encode_BB__151_86)) begin
		encode_151_154_reg <= encode_151_154;
		if (start == 1'b0 && ^(encode_151_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_151_154_reg"); $finish; end
	end
	/* encode: %151*/
	/*   %154 = mul nsw i32 %152, %153*/
	if ((cur_state == LEGUP_F_encode_BB__151_86)) begin
		encode_151_154_reg <= encode_151_154;
		if (start == 1'b0 && ^(encode_151_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_151_154_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %151*/
	/*   %155 = add nsw i32 %zl.0.i4, %154*/
		encode_151_155 = (encode_150_zl0i4_reg + encode_151_154);
end
always @(posedge clk) begin
	/* encode: %151*/
	/*   %155 = add nsw i32 %zl.0.i4, %154*/
	if ((cur_state == LEGUP_F_encode_BB__151_86)) begin
		encode_151_155_reg <= encode_151_155;
		if (start == 1'b0 && ^(encode_151_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_151_155_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %151*/
	/*   %indvar.next = add i32 %indvar, 1*/
		encode_151_indvarnext = (encode_150_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %151*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_encode_BB__151_83)) begin
		encode_151_indvarnext_reg <= encode_151_indvarnext;
		if (start == 1'b0 && ^(encode_151_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_151_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %156 = ashr i32 %zl.0.i4, 14*/
		encode_filtezexit8_156 = ($signed(encode_150_zl0i4_reg) >>> 32'd14);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %156 = ashr i32 %zl.0.i4, 14*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_87)) begin
		encode_filtezexit8_156_reg <= encode_filtezexit8_156;
		if (start == 1'b0 && ^(encode_filtezexit8_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_156_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %157 = load i32* @rh1, align 4*/
		encode_filtezexit8_157 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %157 = load i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_89)) begin
		encode_filtezexit8_157_reg <= encode_filtezexit8_157;
		if (start == 1'b0 && ^(encode_filtezexit8_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_157_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %158 = load i32* @ah1, align 4*/
		encode_filtezexit8_158 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %158 = load i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_89)) begin
		encode_filtezexit8_158_reg <= encode_filtezexit8_158;
		if (start == 1'b0 && ^(encode_filtezexit8_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_158_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %159 = load i32* @rh2, align 4*/
		encode_filtezexit8_159 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %159 = load i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_90)) begin
		encode_filtezexit8_159_reg <= encode_filtezexit8_159;
		if (start == 1'b0 && ^(encode_filtezexit8_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_159_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %160 = load i32* @ah2, align 4*/
		encode_filtezexit8_160 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %160 = load i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_90)) begin
		encode_filtezexit8_160_reg <= encode_filtezexit8_160;
		if (start == 1'b0 && ^(encode_filtezexit8_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_160_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %161 = shl nsw i32 %157, 1*/
		encode_filtezexit8_161 = (encode_filtezexit8_157 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %161 = shl nsw i32 %157, 1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_89)) begin
		encode_filtezexit8_161_reg <= encode_filtezexit8_161;
		if (start == 1'b0 && ^(encode_filtezexit8_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_161_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit8_162 = encode_filtezexit8_162_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %162 = mul nsw i32 %158, %161*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_90)) begin
		encode_filtezexit8_162_reg <= encode_filtezexit8_162;
		if (start == 1'b0 && ^(encode_filtezexit8_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_162_reg"); $finish; end
	end
	/* encode: %filtez.exit8*/
	/*   %162 = mul nsw i32 %158, %161*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_90)) begin
		encode_filtezexit8_162_reg <= encode_filtezexit8_162;
		if (start == 1'b0 && ^(encode_filtezexit8_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_162_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %163 = shl nsw i32 %159, 1*/
		encode_filtezexit8_163 = (encode_filtezexit8_159 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %163 = shl nsw i32 %159, 1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_90)) begin
		encode_filtezexit8_163_reg <= encode_filtezexit8_163;
		if (start == 1'b0 && ^(encode_filtezexit8_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_163_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit8_164 = encode_filtezexit8_164_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %164 = mul nsw i32 %160, %163*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_164_reg <= encode_filtezexit8_164;
		if (start == 1'b0 && ^(encode_filtezexit8_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_164_reg"); $finish; end
	end
	/* encode: %filtez.exit8*/
	/*   %164 = mul nsw i32 %160, %163*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_164_reg <= encode_filtezexit8_164;
		if (start == 1'b0 && ^(encode_filtezexit8_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_164_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %165 = add nsw i32 %162, %164*/
		encode_filtezexit8_165 = (encode_filtezexit8_162_reg + encode_filtezexit8_164);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %165 = add nsw i32 %162, %164*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_165_reg <= encode_filtezexit8_165;
		if (start == 1'b0 && ^(encode_filtezexit8_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_165_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %166 = ashr i32 %165, 15*/
		encode_filtezexit8_166 = ($signed(encode_filtezexit8_165) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %166 = ashr i32 %165, 15*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_166_reg <= encode_filtezexit8_166;
		if (start == 1'b0 && ^(encode_filtezexit8_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_166_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %167 = add nsw i32 %166, %156*/
		encode_filtezexit8_167 = (encode_filtezexit8_166 + encode_filtezexit8_156_reg);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %167 = add nsw i32 %166, %156*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_167_reg <= encode_filtezexit8_167;
		if (start == 1'b0 && ^(encode_filtezexit8_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_167_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %168 = sub nsw i32 %47, %167*/
		encode_filtezexit8_168 = (encode_filtezexit_47_reg - encode_filtezexit8_167);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %168 = sub nsw i32 %47, %167*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_168_reg <= encode_filtezexit8_168;
		if (start == 1'b0 && ^(encode_filtezexit8_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_168_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %169 = icmp sgt i32 %168, -1*/
		encode_filtezexit8_169 = ($signed(encode_filtezexit8_168) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %169 = icmp sgt i32 %168, -1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_169_reg <= encode_filtezexit8_169;
		if (start == 1'b0 && ^(encode_filtezexit8_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_169_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %170 = load i32* @deth, align 4*/
		encode_filtezexit8_170 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %170 = load i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_170_reg <= encode_filtezexit8_170;
		if (start == 1'b0 && ^(encode_filtezexit8_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_170_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit8_171 = encode_filtezexit8_171_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %171 = mul nsw i32 %170, 564*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_92)) begin
		encode_filtezexit8_171_reg <= encode_filtezexit8_171;
		if (start == 1'b0 && ^(encode_filtezexit8_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_171_reg"); $finish; end
	end
	/* encode: %filtez.exit8*/
	/*   %171 = mul nsw i32 %170, 564*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_92)) begin
		encode_filtezexit8_171_reg <= encode_filtezexit8_171;
		if (start == 1'b0 && ^(encode_filtezexit8_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_171_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %172 = ashr i32 %171, 12*/
		encode_filtezexit8_172 = ($signed(encode_filtezexit8_171) >>> 32'd12);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %172 = ashr i32 %171, 12*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_92)) begin
		encode_filtezexit8_172_reg <= encode_filtezexit8_172;
		if (start == 1'b0 && ^(encode_filtezexit8_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_172_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %173 = sub nsw i32 0, %168*/
		encode_filtezexit8_173 = (32'd0 - encode_filtezexit8_168);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %173 = sub nsw i32 0, %168*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_173_reg <= encode_filtezexit8_173;
		if (start == 1'b0 && ^(encode_filtezexit8_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_173_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %174 = ashr i32 %168, 31*/
		encode_filtezexit8_174 = ($signed(encode_filtezexit8_168) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %174 = ashr i32 %168, 31*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_174_reg <= encode_filtezexit8_174;
		if (start == 1'b0 && ^(encode_filtezexit8_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_174_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %175 = and i32 %174, -2*/
		encode_filtezexit8_175 = (encode_filtezexit8_174 & -32'd2);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %175 = and i32 %174, -2*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_175_reg <= encode_filtezexit8_175;
		if (start == 1'b0 && ^(encode_filtezexit8_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_175_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %.5 = select i1 %169, i32 %168, i32 %173*/
		encode_filtezexit8_5 = (encode_filtezexit8_169 ? encode_filtezexit8_168 : encode_filtezexit8_173);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %.5 = select i1 %169, i32 %168, i32 %173*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_5_reg <= encode_filtezexit8_5;
		if (start == 1'b0 && ^(encode_filtezexit8_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_5_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %176 = icmp sgt i32 %.5, %172*/
		encode_filtezexit8_176 = ($signed(encode_filtezexit8_5_reg) > $signed(encode_filtezexit8_172));
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %176 = icmp sgt i32 %.5, %172*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_92)) begin
		encode_filtezexit8_176_reg <= encode_filtezexit8_176;
		if (start == 1'b0 && ^(encode_filtezexit8_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_176_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %.3.v = select i1 %176, i32 2, i32 3*/
		encode_filtezexit8_3v = (encode_filtezexit8_176 ? 32'd2 : 32'd3);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %.3.v = select i1 %176, i32 2, i32 3*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_92)) begin
		encode_filtezexit8_3v_reg <= encode_filtezexit8_3v;
		if (start == 1'b0 && ^(encode_filtezexit8_3v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_3v_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %.3 = add nsw i32 %175, %.3.v*/
		encode_filtezexit8_3 = (encode_filtezexit8_175_reg + encode_filtezexit8_3v);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %.3 = add nsw i32 %175, %.3.v*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_92)) begin
		encode_filtezexit8_3_reg <= encode_filtezexit8_3;
		if (start == 1'b0 && ^(encode_filtezexit8_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_3_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %177 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %.3*/
		encode_filtezexit8_177 = (`TAG_g_qq2_code2_table_a | (4 * encode_filtezexit8_3_reg));
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %177 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %.3*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_93)) begin
		encode_filtezexit8_177_reg <= encode_filtezexit8_177;
		if (start == 1'b0 && ^(encode_filtezexit8_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_177_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %178 = load i32* %177, align 4*/
		encode_filtezexit8_178 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %178 = load i32* %177, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_95)) begin
		encode_filtezexit8_178_reg <= encode_filtezexit8_178;
		if (start == 1'b0 && ^(encode_filtezexit8_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_178_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit8_179 = encode_filtezexit8_179_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %179 = mul nsw i32 %170, %178*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_96)) begin
		encode_filtezexit8_179_reg <= encode_filtezexit8_179;
		if (start == 1'b0 && ^(encode_filtezexit8_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_179_reg"); $finish; end
	end
	/* encode: %filtez.exit8*/
	/*   %179 = mul nsw i32 %170, %178*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_96)) begin
		encode_filtezexit8_179_reg <= encode_filtezexit8_179;
		if (start == 1'b0 && ^(encode_filtezexit8_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_179_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %180 = ashr i32 %179, 15*/
		encode_filtezexit8_180 = ($signed(encode_filtezexit8_179) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %180 = ashr i32 %179, 15*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_96)) begin
		encode_filtezexit8_180_reg <= encode_filtezexit8_180;
		if (start == 1'b0 && ^(encode_filtezexit8_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_180_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %181 = load i32* @nbh, align 4*/
		encode_filtezexit8_181 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %181 = load i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_91)) begin
		encode_filtezexit8_181_reg <= encode_filtezexit8_181;
		if (start == 1'b0 && ^(encode_filtezexit8_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_181_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit8_182 = encode_filtezexit8_182_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %182 = mul nsw i32 %181, 127*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_92)) begin
		encode_filtezexit8_182_reg <= encode_filtezexit8_182;
		if (start == 1'b0 && ^(encode_filtezexit8_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_182_reg"); $finish; end
	end
	/* encode: %filtez.exit8*/
	/*   %182 = mul nsw i32 %181, 127*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_92)) begin
		encode_filtezexit8_182_reg <= encode_filtezexit8_182;
		if (start == 1'b0 && ^(encode_filtezexit8_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_182_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %183 = ashr i32 %182, 7*/
		encode_filtezexit8_183 = ($signed(encode_filtezexit8_182) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %183 = ashr i32 %182, 7*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_92)) begin
		encode_filtezexit8_183_reg <= encode_filtezexit8_183;
		if (start == 1'b0 && ^(encode_filtezexit8_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_183_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %184 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %.3*/
		encode_filtezexit8_184 = (`TAG_g_wh_code_table_a | (4 * encode_filtezexit8_3_reg));
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %184 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %.3*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_93)) begin
		encode_filtezexit8_184_reg <= encode_filtezexit8_184;
		if (start == 1'b0 && ^(encode_filtezexit8_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_184_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %185 = load i32* %184, align 4*/
		encode_filtezexit8_185 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %185 = load i32* %184, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_95)) begin
		encode_filtezexit8_185_reg <= encode_filtezexit8_185;
		if (start == 1'b0 && ^(encode_filtezexit8_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_185_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %186 = add nsw i32 %183, %185*/
		encode_filtezexit8_186 = (encode_filtezexit8_183_reg + encode_filtezexit8_185);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %186 = add nsw i32 %183, %185*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_95)) begin
		encode_filtezexit8_186_reg <= encode_filtezexit8_186;
		if (start == 1'b0 && ^(encode_filtezexit8_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_186_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit8*/
	/*   %187 = icmp slt i32 %186, 0*/
		encode_filtezexit8_187 = ($signed(encode_filtezexit8_186) < $signed(32'd0));
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %187 = icmp slt i32 %186, 0*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_95)) begin
		encode_filtezexit8_187_reg <= encode_filtezexit8_187;
		if (start == 1'b0 && ^(encode_filtezexit8_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit8_187_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %188*/
	/*   %189 = icmp sgt i32 %186, 22528*/
		encode_188_189 = ($signed(encode_filtezexit8_186_reg) > $signed(32'd22528));
end
always @(posedge clk) begin
	/* encode: %188*/
	/*   %189 = icmp sgt i32 %186, 22528*/
	if ((cur_state == LEGUP_F_encode_BB__188_97)) begin
		encode_188_189_reg <= encode_188_189;
		if (start == 1'b0 && ^(encode_188_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_188_189_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %188*/
	/*   %.43 = select i1 %189, i32 22528, i32 %186*/
		encode_188_43 = (encode_188_189 ? 32'd22528 : encode_filtezexit8_186_reg);
end
always @(posedge clk) begin
	/* encode: %188*/
	/*   %.43 = select i1 %189, i32 22528, i32 %186*/
	if ((cur_state == LEGUP_F_encode_BB__188_97)) begin
		encode_188_43_reg <= encode_188_43;
		if (start == 1'b0 && ^(encode_188_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_188_43_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logsch.exit*/
	/*   %.1.i = phi i32 [ 0, %filtez.exit8 ], [ %.43, %188 ]*/
	if ((((cur_state == LEGUP_F_encode_BB_filtezexit8_96) & (memory_controller_waitrequest == 1'd0)) & (encode_filtezexit8_187_reg == 1'd1))) begin
		encode_logschexit_1i = 32'd0;
	end
	/* encode: %logsch.exit*/
	/*   %.1.i = phi i32 [ 0, %filtez.exit8 ], [ %.43, %188 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__188_97) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_logschexit_1i = encode_188_43;
	end
end
always @(posedge clk) begin
	/* encode: %logsch.exit*/
	/*   %.1.i = phi i32 [ 0, %filtez.exit8 ], [ %.43, %188 ]*/
	if ((((cur_state == LEGUP_F_encode_BB_filtezexit8_96) & (memory_controller_waitrequest == 1'd0)) & (encode_filtezexit8_187_reg == 1'd1))) begin
		encode_logschexit_1i_reg <= encode_logschexit_1i;
		if (start == 1'b0 && ^(encode_logschexit_1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logschexit_1i_reg"); $finish; end
	end
	/* encode: %logsch.exit*/
	/*   %.1.i = phi i32 [ 0, %filtez.exit8 ], [ %.43, %188 ]*/
	if (((cur_state == LEGUP_F_encode_BB__188_97) & (memory_controller_waitrequest == 1'd0))) begin
		encode_logschexit_1i_reg <= encode_logschexit_1i;
		if (start == 1'b0 && ^(encode_logschexit_1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logschexit_1i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logsch.exit*/
	/*   %190 = lshr i32 %.1.i, 6*/
		encode_logschexit_190 = (encode_logschexit_1i_reg >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* encode: %logsch.exit*/
	/*   %190 = lshr i32 %.1.i, 6*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		encode_logschexit_190_reg <= encode_logschexit_190;
		if (start == 1'b0 && ^(encode_logschexit_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logschexit_190_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logsch.exit*/
	/*   %191 = and i32 %190, 31*/
		encode_logschexit_191 = (encode_logschexit_190 & 32'd31);
end
always @(posedge clk) begin
	/* encode: %logsch.exit*/
	/*   %191 = and i32 %190, 31*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		encode_logschexit_191_reg <= encode_logschexit_191;
		if (start == 1'b0 && ^(encode_logschexit_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logschexit_191_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logsch.exit*/
	/*   %192 = ashr i32 %.1.i, 11*/
		encode_logschexit_192 = ($signed(encode_logschexit_1i_reg) >>> 32'd11);
end
always @(posedge clk) begin
	/* encode: %logsch.exit*/
	/*   %192 = ashr i32 %.1.i, 11*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		encode_logschexit_192_reg <= encode_logschexit_192;
		if (start == 1'b0 && ^(encode_logschexit_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logschexit_192_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logsch.exit*/
	/*   %193 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %191*/
		encode_logschexit_193 = (`TAG_g_ilb_table_a | (4 * encode_logschexit_191));
end
always @(posedge clk) begin
	/* encode: %logsch.exit*/
	/*   %193 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %191*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		encode_logschexit_193_reg <= encode_logschexit_193;
		if (start == 1'b0 && ^(encode_logschexit_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logschexit_193_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logsch.exit*/
	/*   %194 = load i32* %193, align 4*/
		encode_logschexit_194 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %logsch.exit*/
	/*   %194 = load i32* %193, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_100)) begin
		encode_logschexit_194_reg <= encode_logschexit_194;
		if (start == 1'b0 && ^(encode_logschexit_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logschexit_194_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logsch.exit*/
	/*   %195 = sub nsw i32 11, %192*/
		encode_logschexit_195 = (32'd11 - encode_logschexit_192);
end
always @(posedge clk) begin
	/* encode: %logsch.exit*/
	/*   %195 = sub nsw i32 11, %192*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		encode_logschexit_195_reg <= encode_logschexit_195;
		if (start == 1'b0 && ^(encode_logschexit_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logschexit_195_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logsch.exit*/
	/*   %196 = ashr i32 %194, %195*/
		encode_logschexit_196 = ($signed(encode_logschexit_194) >>> encode_logschexit_195_reg);
end
always @(posedge clk) begin
	/* encode: %logsch.exit*/
	/*   %196 = ashr i32 %194, %195*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_100)) begin
		encode_logschexit_196_reg <= encode_logschexit_196;
		if (start == 1'b0 && ^(encode_logschexit_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logschexit_196_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logsch.exit*/
	/*   %197 = shl i32 %196, 3*/
		encode_logschexit_197 = (encode_logschexit_196 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* encode: %logsch.exit*/
	/*   %197 = shl i32 %196, 3*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_100)) begin
		encode_logschexit_197_reg <= encode_logschexit_197;
		if (start == 1'b0 && ^(encode_logschexit_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logschexit_197_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logsch.exit*/
	/*   %198 = add nsw i32 %180, %156*/
		encode_logschexit_198 = (encode_filtezexit8_180_reg + encode_filtezexit8_156_reg);
end
always @(posedge clk) begin
	/* encode: %logsch.exit*/
	/*   %198 = add nsw i32 %180, %156*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		encode_logschexit_198_reg <= encode_logschexit_198;
		if (start == 1'b0 && ^(encode_logschexit_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logschexit_198_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %logsch.exit*/
	/*   %199 = icmp eq i32 %180, 0*/
		encode_logschexit_199 = (encode_filtezexit8_180_reg == 32'd0);
end
always @(posedge clk) begin
	/* encode: %logsch.exit*/
	/*   %199 = icmp eq i32 %180, 0*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		encode_logschexit_199_reg <= encode_logschexit_199;
		if (start == 1'b0 && ^(encode_logschexit_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_logschexit_199_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader*/
	/*   %200 = phi i32 [ %205, %201 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderpreheader_103) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader_200 = 32'd0;
	end
	/* encode: %.preheader*/
	/*   %200 = phi i32 [ %205, %201 ], [ 0, %.preheader.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__201_109) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheader_200 = encode_201_205_reg;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader*/
	/*   %200 = phi i32 [ %205, %201 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderpreheader_103) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader_200_reg <= encode_preheader_200;
		if (start == 1'b0 && ^(encode_preheader_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader_200_reg"); $finish; end
	end
	/* encode: %.preheader*/
	/*   %200 = phi i32 [ %205, %201 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB__201_109) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader_200_reg <= encode_preheader_200;
		if (start == 1'b0 && ^(encode_preheader_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader_200_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader*/
	/*   %scevgep = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %200*/
		encode_preheader_scevgep = (`TAG_g_delay_bph_a | (4 * encode_preheader_200_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader*/
	/*   %scevgep = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %200*/
	if ((cur_state == LEGUP_F_encode_BB_preheader_104)) begin
		encode_preheader_scevgep_reg <= encode_preheader_scevgep;
		if (start == 1'b0 && ^(encode_preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader*/
	/*   %exitcond3 = icmp eq i32 %200, 6*/
		encode_preheader_exitcond3 = (encode_preheader_200_reg == 32'd6);
end
always @(posedge clk) begin
	/* encode: %.preheader*/
	/*   %exitcond3 = icmp eq i32 %200, 6*/
	if ((cur_state == LEGUP_F_encode_BB_preheader_104)) begin
		encode_preheader_exitcond3_reg <= encode_preheader_exitcond3;
		if (start == 1'b0 && ^(encode_preheader_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %201*/
	/*   %202 = load i32* %scevgep, align 4*/
		encode_201_202 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %201*/
	/*   %202 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__201_107)) begin
		encode_201_202_reg <= encode_201_202;
		if (start == 1'b0 && ^(encode_201_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_201_202_reg"); $finish; end
	end
end
always @(*) begin
	encode_201_203 = encode_201_203_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %201*/
	/*   %203 = mul nsw i32 %202, 255*/
	if ((cur_state == LEGUP_F_encode_BB__201_108)) begin
		encode_201_203_reg <= encode_201_203;
		if (start == 1'b0 && ^(encode_201_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_201_203_reg"); $finish; end
	end
	/* encode: %201*/
	/*   %203 = mul nsw i32 %202, 255*/
	if ((cur_state == LEGUP_F_encode_BB__201_108)) begin
		encode_201_203_reg <= encode_201_203;
		if (start == 1'b0 && ^(encode_201_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_201_203_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %201*/
	/*   %204 = ashr i32 %203, 8*/
		encode_201_204 = ($signed(encode_201_203) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %201*/
	/*   %204 = ashr i32 %203, 8*/
	if ((cur_state == LEGUP_F_encode_BB__201_108)) begin
		encode_201_204_reg <= encode_201_204;
		if (start == 1'b0 && ^(encode_201_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_201_204_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %201*/
	/*   %205 = add nsw i32 %200, 1*/
		encode_201_205 = (encode_preheader_200_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %201*/
	/*   %205 = add nsw i32 %200, 1*/
	if ((cur_state == LEGUP_F_encode_BB__201_105)) begin
		encode_201_205_reg <= encode_201_205;
		if (start == 1'b0 && ^(encode_201_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_201_205_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader27*/
	/*   %206 = phi i32 [ %217, %207 ], [ 0, %.preheader27.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader27preheader_102) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader27_206 = 32'd0;
	end
	/* encode: %.preheader27*/
	/*   %206 = phi i32 [ %217, %207 ], [ 0, %.preheader27.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__207_115) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheader27_206 = encode_207_217_reg;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader27*/
	/*   %206 = phi i32 [ %217, %207 ], [ 0, %.preheader27.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader27preheader_102) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader27_206_reg <= encode_preheader27_206;
		if (start == 1'b0 && ^(encode_preheader27_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader27_206_reg"); $finish; end
	end
	/* encode: %.preheader27*/
	/*   %206 = phi i32 [ %217, %207 ], [ 0, %.preheader27.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB__207_115) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader27_206_reg <= encode_preheader27_206;
		if (start == 1'b0 && ^(encode_preheader27_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader27_206_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader27*/
	/*   %scevgep4 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %206*/
		encode_preheader27_scevgep4 = (`TAG_g_delay_bph_a | (4 * encode_preheader27_206_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader27*/
	/*   %scevgep4 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %206*/
	if ((cur_state == LEGUP_F_encode_BB_preheader27_110)) begin
		encode_preheader27_scevgep4_reg <= encode_preheader27_scevgep4;
		if (start == 1'b0 && ^(encode_preheader27_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader27_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader27*/
	/*   %exitcond = icmp eq i32 %206, 6*/
		encode_preheader27_exitcond = (encode_preheader27_206_reg == 32'd6);
end
always @(posedge clk) begin
	/* encode: %.preheader27*/
	/*   %exitcond = icmp eq i32 %206, 6*/
	if ((cur_state == LEGUP_F_encode_BB_preheader27_110)) begin
		encode_preheader27_exitcond_reg <= encode_preheader27_exitcond;
		if (start == 1'b0 && ^(encode_preheader27_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader27_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %207*/
	/*   %scevgep5 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %206*/
		encode_207_scevgep5 = (`TAG_g_delay_dhx_a | (4 * encode_preheader27_206_reg));
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %scevgep5 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %206*/
	if ((cur_state == LEGUP_F_encode_BB__207_111)) begin
		encode_207_scevgep5_reg <= encode_207_scevgep5;
		if (start == 1'b0 && ^(encode_207_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %207*/
	/*   %208 = load i32* %scevgep5, align 4*/
		encode_207_208 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %208 = load i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_113)) begin
		encode_207_208_reg <= encode_207_208;
		if (start == 1'b0 && ^(encode_207_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_208_reg"); $finish; end
	end
end
always @(*) begin
	encode_207_209 = encode_207_209_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %209 = mul nsw i32 %180, %208*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		encode_207_209_reg <= encode_207_209;
		if (start == 1'b0 && ^(encode_207_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_209_reg"); $finish; end
	end
	/* encode: %207*/
	/*   %209 = mul nsw i32 %180, %208*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		encode_207_209_reg <= encode_207_209;
		if (start == 1'b0 && ^(encode_207_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_209_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %207*/
	/*   %210 = ashr i32 %209, 31*/
		encode_207_210 = ($signed(encode_207_209) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %210 = ashr i32 %209, 31*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		encode_207_210_reg <= encode_207_210;
		if (start == 1'b0 && ^(encode_207_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_210_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %207*/
	/*   %211 = and i32 %210, -256*/
		encode_207_211 = (encode_207_210 & -32'd256);
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %211 = and i32 %210, -256*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		encode_207_211_reg <= encode_207_211;
		if (start == 1'b0 && ^(encode_207_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_211_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %207*/
	/*   %212 = or i32 %211, 128*/
		encode_207_212 = (encode_207_211 | 32'd128);
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %212 = or i32 %211, 128*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		encode_207_212_reg <= encode_207_212;
		if (start == 1'b0 && ^(encode_207_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_212_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %207*/
	/*   %213 = load i32* %scevgep4, align 4*/
		encode_207_213 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %213 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_113)) begin
		encode_207_213_reg <= encode_207_213;
		if (start == 1'b0 && ^(encode_207_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_213_reg"); $finish; end
	end
end
always @(*) begin
	encode_207_214 = encode_207_214_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %214 = mul nsw i32 %213, 255*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		encode_207_214_reg <= encode_207_214;
		if (start == 1'b0 && ^(encode_207_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_214_reg"); $finish; end
	end
	/* encode: %207*/
	/*   %214 = mul nsw i32 %213, 255*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		encode_207_214_reg <= encode_207_214;
		if (start == 1'b0 && ^(encode_207_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_214_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %207*/
	/*   %215 = ashr i32 %214, 8*/
		encode_207_215 = ($signed(encode_207_214) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %215 = ashr i32 %214, 8*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		encode_207_215_reg <= encode_207_215;
		if (start == 1'b0 && ^(encode_207_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_215_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %207*/
	/*   %216 = add nsw i32 %212, %215*/
		encode_207_216 = (encode_207_212 + encode_207_215);
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %216 = add nsw i32 %212, %215*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		encode_207_216_reg <= encode_207_216;
		if (start == 1'b0 && ^(encode_207_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_216_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %207*/
	/*   %217 = add nsw i32 %206, 1*/
		encode_207_217 = (encode_preheader27_206_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %217 = add nsw i32 %206, 1*/
	if ((cur_state == LEGUP_F_encode_BB__207_111)) begin
		encode_207_217_reg <= encode_207_217;
		if (start == 1'b0 && ^(encode_207_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_207_217_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %218 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
		encode_upzeroexit_218 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %218 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		encode_upzeroexit_218_reg <= encode_upzeroexit_218;
		if (start == 1'b0 && ^(encode_upzeroexit_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_218_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %219 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
		encode_upzeroexit_219 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %219 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		encode_upzeroexit_219_reg <= encode_upzeroexit_219;
		if (start == 1'b0 && ^(encode_upzeroexit_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_219_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %220 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4*/
		encode_upzeroexit_220 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %220 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_121)) begin
		encode_upzeroexit_220_reg <= encode_upzeroexit_220;
		if (start == 1'b0 && ^(encode_upzeroexit_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_220_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %221 = load i32* @ph1, align 4*/
		encode_upzeroexit_221 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %221 = load i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_122)) begin
		encode_upzeroexit_221_reg <= encode_upzeroexit_221;
		if (start == 1'b0 && ^(encode_upzeroexit_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_221_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %222 = load i32* @ph2, align 4*/
		encode_upzeroexit_222 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %222 = load i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_123)) begin
		encode_upzeroexit_222_reg <= encode_upzeroexit_222;
		if (start == 1'b0 && ^(encode_upzeroexit_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_222_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %223 = shl nsw i32 %158, 2*/
		encode_upzeroexit_223 = (encode_filtezexit8_158_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %223 = shl nsw i32 %158, 2*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		encode_upzeroexit_223_reg <= encode_upzeroexit_223;
		if (start == 1'b0 && ^(encode_upzeroexit_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_223_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit_224 = encode_upzeroexit_224_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %224 = mul nsw i32 %198, %221*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_123)) begin
		encode_upzeroexit_224_reg <= encode_upzeroexit_224;
		if (start == 1'b0 && ^(encode_upzeroexit_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_224_reg"); $finish; end
	end
	/* encode: %upzero.exit*/
	/*   %224 = mul nsw i32 %198, %221*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_123)) begin
		encode_upzeroexit_224_reg <= encode_upzeroexit_224;
		if (start == 1'b0 && ^(encode_upzeroexit_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_224_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %225 = icmp sgt i32 %224, -1*/
		encode_upzeroexit_225 = ($signed(encode_upzeroexit_224) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %225 = icmp sgt i32 %224, -1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_123)) begin
		encode_upzeroexit_225_reg <= encode_upzeroexit_225;
		if (start == 1'b0 && ^(encode_upzeroexit_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_225_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %226 = sub nsw i32 0, %223*/
		encode_upzeroexit_226 = (32'd0 - encode_upzeroexit_223);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %226 = sub nsw i32 0, %223*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		encode_upzeroexit_226_reg <= encode_upzeroexit_226;
		if (start == 1'b0 && ^(encode_upzeroexit_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_226_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %.45 = select i1 %225, i32 %226, i32 %223*/
		encode_upzeroexit_45 = (encode_upzeroexit_225 ? encode_upzeroexit_226_reg : encode_upzeroexit_223_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %.45 = select i1 %225, i32 %226, i32 %223*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_123)) begin
		encode_upzeroexit_45_reg <= encode_upzeroexit_45;
		if (start == 1'b0 && ^(encode_upzeroexit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_45_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %227 = ashr i32 %.45, 7*/
		encode_upzeroexit_227 = ($signed(encode_upzeroexit_45) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %227 = ashr i32 %.45, 7*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_123)) begin
		encode_upzeroexit_227_reg <= encode_upzeroexit_227;
		if (start == 1'b0 && ^(encode_upzeroexit_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_227_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit_228 = encode_upzeroexit_228_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %228 = mul nsw i32 %198, %222*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_124)) begin
		encode_upzeroexit_228_reg <= encode_upzeroexit_228;
		if (start == 1'b0 && ^(encode_upzeroexit_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_228_reg"); $finish; end
	end
	/* encode: %upzero.exit*/
	/*   %228 = mul nsw i32 %198, %222*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_124)) begin
		encode_upzeroexit_228_reg <= encode_upzeroexit_228;
		if (start == 1'b0 && ^(encode_upzeroexit_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_228_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %229 = ashr i32 %228, 31*/
		encode_upzeroexit_229 = ($signed(encode_upzeroexit_228) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %229 = ashr i32 %228, 31*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_124)) begin
		encode_upzeroexit_229_reg <= encode_upzeroexit_229;
		if (start == 1'b0 && ^(encode_upzeroexit_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_229_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %230 = and i32 %229, -256*/
		encode_upzeroexit_230 = (encode_upzeroexit_229 & -32'd256);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %230 = and i32 %229, -256*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_124)) begin
		encode_upzeroexit_230_reg <= encode_upzeroexit_230;
		if (start == 1'b0 && ^(encode_upzeroexit_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_230_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %231 = or i32 %230, 128*/
		encode_upzeroexit_231 = (encode_upzeroexit_230 | 32'd128);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %231 = or i32 %230, 128*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_124)) begin
		encode_upzeroexit_231_reg <= encode_upzeroexit_231;
		if (start == 1'b0 && ^(encode_upzeroexit_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_231_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %wd4.0.i = add nsw i32 %227, %231*/
		encode_upzeroexit_wd40i = (encode_upzeroexit_227_reg + encode_upzeroexit_231);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %wd4.0.i = add nsw i32 %227, %231*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_124)) begin
		encode_upzeroexit_wd40i_reg <= encode_upzeroexit_wd40i;
		if (start == 1'b0 && ^(encode_upzeroexit_wd40i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_wd40i_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit_232 = encode_upzeroexit_232_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %232 = mul nsw i32 %160, 127*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		encode_upzeroexit_232_reg <= encode_upzeroexit_232;
		if (start == 1'b0 && ^(encode_upzeroexit_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_232_reg"); $finish; end
	end
	/* encode: %upzero.exit*/
	/*   %232 = mul nsw i32 %160, 127*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		encode_upzeroexit_232_reg <= encode_upzeroexit_232;
		if (start == 1'b0 && ^(encode_upzeroexit_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_232_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %233 = ashr i32 %232, 7*/
		encode_upzeroexit_233 = ($signed(encode_upzeroexit_232) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %233 = ashr i32 %232, 7*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		encode_upzeroexit_233_reg <= encode_upzeroexit_233;
		if (start == 1'b0 && ^(encode_upzeroexit_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_233_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %234 = add nsw i32 %wd4.0.i, %233*/
		encode_upzeroexit_234 = (encode_upzeroexit_wd40i + encode_upzeroexit_233_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %234 = add nsw i32 %wd4.0.i, %233*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_124)) begin
		encode_upzeroexit_234_reg <= encode_upzeroexit_234;
		if (start == 1'b0 && ^(encode_upzeroexit_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_234_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %235 = icmp sgt i32 %234, 12288*/
		encode_upzeroexit_235 = ($signed(encode_upzeroexit_234) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %235 = icmp sgt i32 %234, 12288*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_124)) begin
		encode_upzeroexit_235_reg <= encode_upzeroexit_235;
		if (start == 1'b0 && ^(encode_upzeroexit_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_235_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %236*/
	/*   %237 = icmp slt i32 %234, -12288*/
		encode_236_237 = ($signed(encode_upzeroexit_234_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* encode: %236*/
	/*   %237 = icmp slt i32 %234, -12288*/
	if ((cur_state == LEGUP_F_encode_BB__236_125)) begin
		encode_236_237_reg <= encode_236_237;
		if (start == 1'b0 && ^(encode_236_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_236_237_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %236*/
	/*   %.46 = select i1 %237, i32 -12288, i32 %234*/
		encode_236_46 = (encode_236_237 ? -32'd12288 : encode_upzeroexit_234_reg);
end
always @(posedge clk) begin
	/* encode: %236*/
	/*   %.46 = select i1 %237, i32 -12288, i32 %234*/
	if ((cur_state == LEGUP_F_encode_BB__236_125)) begin
		encode_236_46_reg <= encode_236_46;
		if (start == 1'b0 && ^(encode_236_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_236_46_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %apl2.1.i = phi i32 [ 12288, %upzero.exit ], [ %.46, %236 ]*/
	if ((((cur_state == LEGUP_F_encode_BB_upzeroexit_124) & (memory_controller_waitrequest == 1'd0)) & (encode_upzeroexit_235 == 1'd1))) begin
		encode_uppol2exit_apl21i = 32'd12288;
	end
	/* encode: %uppol2.exit*/
	/*   %apl2.1.i = phi i32 [ 12288, %upzero.exit ], [ %.46, %236 ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__236_125) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_uppol2exit_apl21i = encode_236_46;
	end
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %apl2.1.i = phi i32 [ 12288, %upzero.exit ], [ %.46, %236 ]*/
	if ((((cur_state == LEGUP_F_encode_BB_upzeroexit_124) & (memory_controller_waitrequest == 1'd0)) & (encode_upzeroexit_235 == 1'd1))) begin
		encode_uppol2exit_apl21i_reg <= encode_uppol2exit_apl21i;
		if (start == 1'b0 && ^(encode_uppol2exit_apl21i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_apl21i_reg"); $finish; end
	end
	/* encode: %uppol2.exit*/
	/*   %apl2.1.i = phi i32 [ 12288, %upzero.exit ], [ %.46, %236 ]*/
	if (((cur_state == LEGUP_F_encode_BB__236_125) & (memory_controller_waitrequest == 1'd0))) begin
		encode_uppol2exit_apl21i_reg <= encode_uppol2exit_apl21i;
		if (start == 1'b0 && ^(encode_uppol2exit_apl21i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_apl21i_reg"); $finish; end
	end
end
always @(*) begin
	encode_uppol2exit_238 = encode_uppol2exit_238_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %238 = mul nsw i32 %158, 255*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		encode_uppol2exit_238_reg <= encode_uppol2exit_238;
		if (start == 1'b0 && ^(encode_uppol2exit_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_238_reg"); $finish; end
	end
	/* encode: %uppol2.exit*/
	/*   %238 = mul nsw i32 %158, 255*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		encode_uppol2exit_238_reg <= encode_uppol2exit_238;
		if (start == 1'b0 && ^(encode_uppol2exit_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_238_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %239 = ashr i32 %238, 8*/
		encode_uppol2exit_239 = ($signed(encode_uppol2exit_238) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %239 = ashr i32 %238, 8*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		encode_uppol2exit_239_reg <= encode_uppol2exit_239;
		if (start == 1'b0 && ^(encode_uppol2exit_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_239_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %240 = ashr i32 %224, 31*/
		encode_uppol2exit_240 = ($signed(encode_upzeroexit_224_reg) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %240 = ashr i32 %224, 31*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		encode_uppol2exit_240_reg <= encode_uppol2exit_240;
		if (start == 1'b0 && ^(encode_uppol2exit_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_240_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %241 = and i32 %240, -384*/
		encode_uppol2exit_241 = (encode_uppol2exit_240 & -32'd384);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %241 = and i32 %240, -384*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		encode_uppol2exit_241_reg <= encode_uppol2exit_241;
		if (start == 1'b0 && ^(encode_uppol2exit_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_241_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %242 = add nsw i32 %241, 192*/
		encode_uppol2exit_242 = (encode_uppol2exit_241 + 32'd192);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %242 = add nsw i32 %241, 192*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		encode_uppol2exit_242_reg <= encode_uppol2exit_242;
		if (start == 1'b0 && ^(encode_uppol2exit_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_242_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %apl1.0.i = add nsw i32 %239, %242*/
		encode_uppol2exit_apl10i = (encode_uppol2exit_239 + encode_uppol2exit_242_reg);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %apl1.0.i = add nsw i32 %239, %242*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		encode_uppol2exit_apl10i_reg <= encode_uppol2exit_apl10i;
		if (start == 1'b0 && ^(encode_uppol2exit_apl10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_apl10i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %243 = sub nsw i32 15360, %apl2.1.i*/
		encode_uppol2exit_243 = (32'd15360 - encode_uppol2exit_apl21i_reg);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %243 = sub nsw i32 15360, %apl2.1.i*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		encode_uppol2exit_243_reg <= encode_uppol2exit_243;
		if (start == 1'b0 && ^(encode_uppol2exit_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_243_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %244 = icmp sgt i32 %apl1.0.i, %243*/
		encode_uppol2exit_244 = ($signed(encode_uppol2exit_apl10i) > $signed(encode_uppol2exit_243_reg));
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %244 = icmp sgt i32 %apl1.0.i, %243*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		encode_uppol2exit_244_reg <= encode_uppol2exit_244;
		if (start == 1'b0 && ^(encode_uppol2exit_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_244_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %.apl1.0.i = select i1 %244, i32 %243, i32 %apl1.0.i*/
		encode_uppol2exit_apl10i_var1 = (encode_uppol2exit_244 ? encode_uppol2exit_243_reg : encode_uppol2exit_apl10i);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %.apl1.0.i = select i1 %244, i32 %243, i32 %apl1.0.i*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		encode_uppol2exit_apl10i_var1_reg <= encode_uppol2exit_apl10i_var1;
		if (start == 1'b0 && ^(encode_uppol2exit_apl10i_var1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_apl10i_var1_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %245 = sub nsw i32 0, %243*/
		encode_uppol2exit_245 = (32'd0 - encode_uppol2exit_243);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %245 = sub nsw i32 0, %243*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		encode_uppol2exit_245_reg <= encode_uppol2exit_245;
		if (start == 1'b0 && ^(encode_uppol2exit_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_245_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %246 = icmp slt i32 %.apl1.0.i, %245*/
		encode_uppol2exit_246 = ($signed(encode_uppol2exit_apl10i_var1) < $signed(encode_uppol2exit_245_reg));
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %246 = icmp slt i32 %.apl1.0.i, %245*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		encode_uppol2exit_246_reg <= encode_uppol2exit_246;
		if (start == 1'b0 && ^(encode_uppol2exit_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_246_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %apl1.2.i = select i1 %246, i32 %245, i32 %.apl1.0.i*/
		encode_uppol2exit_apl12i = (encode_uppol2exit_246 ? encode_uppol2exit_245_reg : encode_uppol2exit_apl10i_var1);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %apl1.2.i = select i1 %246, i32 %245, i32 %.apl1.0.i*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		encode_uppol2exit_apl12i_reg <= encode_uppol2exit_apl12i;
		if (start == 1'b0 && ^(encode_uppol2exit_apl12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_apl12i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %247 = add nsw i32 %167, %180*/
		encode_uppol2exit_247 = (encode_filtezexit8_167_reg + encode_filtezexit8_180_reg);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %247 = add nsw i32 %167, %180*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		encode_uppol2exit_247_reg <= encode_uppol2exit_247;
		if (start == 1'b0 && ^(encode_uppol2exit_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_247_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %248 = shl nsw i32 %.3, 6*/
		encode_uppol2exit_248 = (encode_filtezexit8_3_reg <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %248 = shl nsw i32 %.3, 6*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		encode_uppol2exit_248_reg <= encode_uppol2exit_248;
		if (start == 1'b0 && ^(encode_uppol2exit_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_248_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %uppol2.exit*/
	/*   %249 = or i32 %74, %248*/
		encode_uppol2exit_249 = (encode_loopexiti_74_reg | encode_uppol2exit_248);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %249 = or i32 %74, %248*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		encode_uppol2exit_249_reg <= encode_uppol2exit_249;
		if (start == 1'b0 && ^(encode_uppol2exit_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_uppol2exit_249_reg"); $finish; end
	end
end
always @(*) begin
	decis_levl_address_a = 1'd0;
	/* encode: %67*/
	/*   %68 = load i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__67_36)) begin
		decis_levl_address_a = (encode_67_scevgep14 >>> 3'd2);
	end
end
always @(*) begin
	decis_levl_write_enable_a = 1'd0;
	/* encode: %67*/
	/*   %68 = load i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__67_36)) begin
		decis_levl_write_enable_a = 1'd0;
	end
end
always @(*) begin
	lpm_mult_encode_0_2_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %2 = mul nsw i32 %1, 12*/
	if ((lpm_mult_encode_0_2_en == 1'd1)) begin
		encode_0_2_stage0_reg <= (encode_0_1 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_encode_0_4_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %4 = mul nsw i32 %3, -44*/
	if ((lpm_mult_encode_0_4_en == 1'd1)) begin
		encode_0_4_stage0_reg <= (encode_0_3 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_encode_10_13_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %13 = mul nsw i32 %11, %12*/
	if ((lpm_mult_encode_10_13_en == 1'd1)) begin
		encode_10_13_stage0_reg <= (encode_10_11 * encode_10_12);
	end
end
always @(*) begin
	lpm_mult_encode_10_17_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %10*/
	/*   %17 = mul nsw i32 %15, %16*/
	if ((lpm_mult_encode_10_17_en == 1'd1)) begin
		encode_10_17_stage0_reg <= (encode_10_15 * encode_10_16);
	end
end
always @(*) begin
	lpm_mult_encode_30_31_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %30*/
	/*   %31 = mul nsw i32 %21, -44*/
	if ((lpm_mult_encode_30_31_en == 1'd1)) begin
		encode_30_31_stage0_reg <= (encode_20_21_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_encode_30_35_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %30*/
	/*   %35 = mul nsw i32 %33, %34*/
	if ((lpm_mult_encode_30_35_en == 1'd1)) begin
		encode_30_35_stage0_reg <= (encode_30_33 * encode_30_34);
	end
end
always @(*) begin
	lpm_mult_encode_37_40_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %37*/
	/*   %40 = mul nsw i32 %38, %39*/
	if ((lpm_mult_encode_37_40_en == 1'd1)) begin
		encode_37_40_stage0_reg <= (encode_37_38 * encode_37_39);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit_42_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %42 = mul nsw i32 %22, 12*/
	if ((lpm_mult_encode_filtezexit_42_en == 1'd1)) begin
		encode_filtezexit_42_stage0_reg <= (encode_20_22_reg * 32'd12);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit_54_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %54 = mul nsw i32 %50, %53*/
	if ((lpm_mult_encode_filtezexit_54_en == 1'd1)) begin
		encode_filtezexit_54_stage0_reg <= (encode_filtezexit_50 * encode_filtezexit_53);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit_56_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %56 = mul nsw i32 %52, %55*/
	if ((lpm_mult_encode_filtezexit_56_en == 1'd1)) begin
		encode_filtezexit_56_stage0_reg <= (encode_filtezexit_52 * encode_filtezexit_55);
	end
end
always @(*) begin
	lpm_mult_encode_67_69_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %67*/
	/*   %69 = mul nsw i32 %68, %61*/
	if ((lpm_mult_encode_67_69_en == 1'd1)) begin
		encode_67_69_stage0_reg <= (encode_67_68 * encode_filtezexit_61_reg);
	end
end
always @(*) begin
	lpm_mult_encode_loopexiti_81_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %81 = mul nsw i32 %80, 127*/
	if ((lpm_mult_encode_loopexiti_81_en == 1'd1)) begin
		encode_loopexiti_81_stage0_reg <= (encode_loopexiti_80 * 32'd127);
	end
end
always @(*) begin
	lpm_mult_encode_loopexiti_78_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %.loopexit.i*/
	/*   %78 = mul nsw i32 %61, %77*/
	if ((lpm_mult_encode_loopexiti_78_en == 1'd1)) begin
		encode_loopexiti_78_stage0_reg <= (encode_filtezexit_61_reg * encode_loopexiti_77);
	end
end
always @(*) begin
	lpm_mult_encode_100_102_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %100*/
	/*   %102 = mul nsw i32 %101, 255*/
	if ((lpm_mult_encode_100_102_en == 1'd1)) begin
		encode_100_102_stage0_reg <= (encode_100_101 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_106_108_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %108 = mul nsw i32 %79, %107*/
	if ((lpm_mult_encode_106_108_en == 1'd1)) begin
		encode_106_108_stage0_reg <= (encode_loopexiti_79_reg * encode_106_107);
	end
end
always @(*) begin
	lpm_mult_encode_106_113_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %106*/
	/*   %113 = mul nsw i32 %112, 255*/
	if ((lpm_mult_encode_106_113_en == 1'd1)) begin
		encode_106_113_stage0_reg <= (encode_106_112 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit21_131_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %131 = mul nsw i32 %52, 127*/
	if ((lpm_mult_encode_upzeroexit21_131_en == 1'd1)) begin
		encode_upzeroexit21_131_stage0_reg <= (encode_filtezexit_52_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit21_123_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %123 = mul nsw i32 %97, %120*/
	if ((lpm_mult_encode_upzeroexit21_123_en == 1'd1)) begin
		encode_upzeroexit21_123_stage0_reg <= (encode_logsclexit_97_reg * encode_upzeroexit21_120);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit21_127_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit21*/
	/*   %127 = mul nsw i32 %97, %121*/
	if ((lpm_mult_encode_upzeroexit21_127_en == 1'd1)) begin
		encode_upzeroexit21_127_stage0_reg <= (encode_logsclexit_97_reg * encode_upzeroexit21_121);
	end
end
always @(*) begin
	lpm_mult_encode_uppol2exit17_137_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %137 = mul nsw i32 %50, 255*/
	if ((lpm_mult_encode_uppol2exit17_137_en == 1'd1)) begin
		encode_uppol2exit17_137_stage0_reg <= (encode_filtezexit_50_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_uppol2exit17_149_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit17*/
	/*   %149 = mul nsw i32 %147, %148*/
	if ((lpm_mult_encode_uppol2exit17_149_en == 1'd1)) begin
		encode_uppol2exit17_149_stage0_reg <= (encode_uppol2exit17_147_reg * encode_uppol2exit17_148);
	end
end
always @(*) begin
	lpm_mult_encode_151_154_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %151*/
	/*   %154 = mul nsw i32 %152, %153*/
	if ((lpm_mult_encode_151_154_en == 1'd1)) begin
		encode_151_154_stage0_reg <= (encode_151_152 * encode_151_153);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit8_162_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %162 = mul nsw i32 %158, %161*/
	if ((lpm_mult_encode_filtezexit8_162_en == 1'd1)) begin
		encode_filtezexit8_162_stage0_reg <= (encode_filtezexit8_158 * encode_filtezexit8_161);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit8_164_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %164 = mul nsw i32 %160, %163*/
	if ((lpm_mult_encode_filtezexit8_164_en == 1'd1)) begin
		encode_filtezexit8_164_stage0_reg <= (encode_filtezexit8_160 * encode_filtezexit8_163);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit8_171_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %171 = mul nsw i32 %170, 564*/
	if ((lpm_mult_encode_filtezexit8_171_en == 1'd1)) begin
		encode_filtezexit8_171_stage0_reg <= (encode_filtezexit8_170 * 32'd564);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit8_182_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %182 = mul nsw i32 %181, 127*/
	if ((lpm_mult_encode_filtezexit8_182_en == 1'd1)) begin
		encode_filtezexit8_182_stage0_reg <= (encode_filtezexit8_181 * 32'd127);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit8_179_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit8*/
	/*   %179 = mul nsw i32 %170, %178*/
	if ((lpm_mult_encode_filtezexit8_179_en == 1'd1)) begin
		encode_filtezexit8_179_stage0_reg <= (encode_filtezexit8_170_reg * encode_filtezexit8_178);
	end
end
always @(*) begin
	lpm_mult_encode_201_203_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %201*/
	/*   %203 = mul nsw i32 %202, 255*/
	if ((lpm_mult_encode_201_203_en == 1'd1)) begin
		encode_201_203_stage0_reg <= (encode_201_202 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_207_209_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %209 = mul nsw i32 %180, %208*/
	if ((lpm_mult_encode_207_209_en == 1'd1)) begin
		encode_207_209_stage0_reg <= (encode_filtezexit8_180_reg * encode_207_208);
	end
end
always @(*) begin
	lpm_mult_encode_207_214_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %207*/
	/*   %214 = mul nsw i32 %213, 255*/
	if ((lpm_mult_encode_207_214_en == 1'd1)) begin
		encode_207_214_stage0_reg <= (encode_207_213 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit_232_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %232 = mul nsw i32 %160, 127*/
	if ((lpm_mult_encode_upzeroexit_232_en == 1'd1)) begin
		encode_upzeroexit_232_stage0_reg <= (encode_filtezexit8_160_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit_224_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %224 = mul nsw i32 %198, %221*/
	if ((lpm_mult_encode_upzeroexit_224_en == 1'd1)) begin
		encode_upzeroexit_224_stage0_reg <= (encode_logschexit_198_reg * encode_upzeroexit_221);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit_228_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %228 = mul nsw i32 %198, %222*/
	if ((lpm_mult_encode_upzeroexit_228_en == 1'd1)) begin
		encode_upzeroexit_228_stage0_reg <= (encode_logschexit_198_reg * encode_upzeroexit_222);
	end
end
always @(*) begin
	lpm_mult_encode_uppol2exit_238_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %uppol2.exit*/
	/*   %238 = mul nsw i32 %158, 255*/
	if ((lpm_mult_encode_uppol2exit_238_en == 1'd1)) begin
		encode_uppol2exit_238_stage0_reg <= (encode_filtezexit8_158_reg * 32'd255);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* encode: %uppol2.exit*/
	/*   ret i32 %249*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_129)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %10*/
	/*   %11 = load i32* %tqmf_ptr.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %10*/
	/*   %15 = load i32* %scevgep25, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %20*/
	/*   %21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__20_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %25*/
	/*   %28 = load i32* %tqmf_ptr1.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__25_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %30*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %30*/
	/*   %33 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %37*/
	/*   %38 = load i32* %.0.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__37_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit*/
	/*   %49 = load i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit*/
	/*   %51 = load i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit*/
	/*   %61 = load i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %.loopexit.i*/
	/*   %80 = load i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %.loopexit.i*/
	/*   %74 = load i32* %.in, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %.loopexit.i*/
	/*   %77 = load i32* %76, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %.loopexit.i*/
	/*   store i32 %74, i32* @il, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %logscl.exit*/
	/*   store i32 %.1.i23, i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %100*/
	/*   %101 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__100_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %100*/
	/*   store i32 %103, i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__100_58)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %106*/
	/*   %107 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   %117 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   %119 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_69)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %79, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_70)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %117, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_71)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %118, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_72)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %49, i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %97, i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %apl2.1.i16, i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_78)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %apl1.2.i11, i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_79)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %151*/
	/*   %152 = load i32* %.0.i7, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__151_83)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit8*/
	/*   %157 = load i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_87)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit8*/
	/*   %159 = load i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_88)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit8*/
	/*   %170 = load i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_89)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit8*/
	/*   %178 = load i32* %177, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_93)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %logsch.exit*/
	/*   store i32 %.1.i, i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %207*/
	/*   %208 = load i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_111)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %218 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %220 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %180, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %218, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_121)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_122)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %157, i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %apl2.1.i, i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_128)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_tqmf_a;
	end
	/* encode: %10*/
	/*   %11 = load i32* %tqmf_ptr.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		memory_controller_address_a = encode_10_tqmf_ptr0;
	end
	/* encode: %10*/
	/*   %15 = load i32* %scevgep25, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_7)) begin
		memory_controller_address_a = encode_10_scevgep25_reg;
	end
	/* encode: %20*/
	/*   %21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__20_11)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd22));
	end
	/* encode: %25*/
	/*   %28 = load i32* %tqmf_ptr1.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__25_16)) begin
		memory_controller_address_a = encode_25_tqmf_ptr10;
	end
	/* encode: %30*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_20)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd1));
	end
	/* encode: %30*/
	/*   %33 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_21)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* encode: %37*/
	/*   %38 = load i32* %.0.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__37_26)) begin
		memory_controller_address_a = encode_37_0i;
	end
	/* encode: %filtez.exit*/
	/*   %49 = load i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_address_a = `TAG_g_rlt1_a;
	end
	/* encode: %filtez.exit*/
	/*   %51 = load i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_address_a = `TAG_g_rlt2_a;
	end
	/* encode: %filtez.exit*/
	/*   %61 = load i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		memory_controller_address_a = `TAG_g_detl_a;
	end
	/* encode: %.loopexit.i*/
	/*   %80 = load i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_40)) begin
		memory_controller_address_a = `TAG_g_nbl_a;
	end
	/* encode: %.loopexit.i*/
	/*   %74 = load i32* %.in, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_41)) begin
		memory_controller_address_a = encode_loopexiti_in;
	end
	/* encode: %.loopexit.i*/
	/*   %77 = load i32* %76, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		memory_controller_address_a = encode_loopexiti_76;
	end
	/* encode: %.loopexit.i*/
	/*   store i32 %74, i32* @il, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_44)) begin
		memory_controller_address_a = `TAG_g_il_a;
	end
	/* encode: %logscl.exit*/
	/*   store i32 %.1.i23, i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		memory_controller_address_a = `TAG_g_nbl_a;
	end
	/* encode: %100*/
	/*   %101 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__100_55)) begin
		memory_controller_address_a = encode_preheader29_scevgep10_reg;
	end
	/* encode: %100*/
	/*   store i32 %103, i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__100_58)) begin
		memory_controller_address_a = encode_preheader29_scevgep10_reg;
	end
	/* encode: %106*/
	/*   %107 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_61)) begin
		memory_controller_address_a = encode_106_scevgep13;
	end
	/* encode: %upzero.exit21*/
	/*   %117 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_68)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd4));
	end
	/* encode: %upzero.exit21*/
	/*   %119 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_69)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd2));
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %79, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_70)) begin
		memory_controller_address_a = `TAG_g_delay_dltx_a;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %117, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_71)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd5));
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %118, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_72)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd4));
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %49, i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		memory_controller_address_a = `TAG_g_rlt2_a;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %97, i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		memory_controller_address_a = `TAG_g_plt1_a;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %apl2.1.i16, i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_78)) begin
		memory_controller_address_a = `TAG_g_al2_a;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %apl1.2.i11, i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_79)) begin
		memory_controller_address_a = `TAG_g_al1_a;
	end
	/* encode: %151*/
	/*   %152 = load i32* %.0.i7, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__151_83)) begin
		memory_controller_address_a = encode_151_0i7;
	end
	/* encode: %filtez.exit8*/
	/*   %157 = load i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_87)) begin
		memory_controller_address_a = `TAG_g_rh1_a;
	end
	/* encode: %filtez.exit8*/
	/*   %159 = load i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_88)) begin
		memory_controller_address_a = `TAG_g_rh2_a;
	end
	/* encode: %filtez.exit8*/
	/*   %170 = load i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_89)) begin
		memory_controller_address_a = `TAG_g_deth_a;
	end
	/* encode: %filtez.exit8*/
	/*   %178 = load i32* %177, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_93)) begin
		memory_controller_address_a = encode_filtezexit8_177;
	end
	/* encode: %logsch.exit*/
	/*   store i32 %.1.i, i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		memory_controller_address_a = `TAG_g_nbh_a;
	end
	/* encode: %207*/
	/*   %208 = load i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_111)) begin
		memory_controller_address_a = encode_207_scevgep5;
	end
	/* encode: %upzero.exit*/
	/*   %218 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_address_a = (`TAG_g_delay_dhx_a | (4 * 32'd4));
	end
	/* encode: %upzero.exit*/
	/*   %220 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_address_a = (`TAG_g_delay_dhx_a | (4 * 32'd2));
	end
	/* encode: %upzero.exit*/
	/*   store i32 %180, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		memory_controller_address_a = `TAG_g_delay_dhx_a;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %218, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_121)) begin
		memory_controller_address_a = (`TAG_g_delay_dhx_a | (4 * 32'd5));
	end
	/* encode: %upzero.exit*/
	/*   store i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_122)) begin
		memory_controller_address_a = (`TAG_g_delay_dhx_a | (4 * 32'd4));
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %157, i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		memory_controller_address_a = `TAG_g_rh2_a;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %apl2.1.i, i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		memory_controller_address_a = `TAG_g_ah2_a;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_128)) begin
		memory_controller_address_a = `TAG_g_ah1_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %10*/
	/*   %11 = load i32* %tqmf_ptr.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %10*/
	/*   %15 = load i32* %scevgep25, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %20*/
	/*   %21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__20_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %25*/
	/*   %28 = load i32* %tqmf_ptr1.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__25_16)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %30*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %30*/
	/*   %33 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %37*/
	/*   %38 = load i32* %.0.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__37_26)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit*/
	/*   %49 = load i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit*/
	/*   %51 = load i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit*/
	/*   %61 = load i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %.loopexit.i*/
	/*   %80 = load i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_40)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %.loopexit.i*/
	/*   %74 = load i32* %.in, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_41)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %.loopexit.i*/
	/*   %77 = load i32* %76, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %.loopexit.i*/
	/*   store i32 %74, i32* @il, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_44)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %logscl.exit*/
	/*   store i32 %.1.i23, i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %100*/
	/*   %101 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__100_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %100*/
	/*   store i32 %103, i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__100_58)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %106*/
	/*   %107 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_61)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit21*/
	/*   %117 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_68)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit21*/
	/*   %119 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_69)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %79, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_70)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %117, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_71)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %118, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_72)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %49, i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %97, i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %apl2.1.i16, i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_78)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %apl1.2.i11, i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_79)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %151*/
	/*   %152 = load i32* %.0.i7, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__151_83)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit8*/
	/*   %157 = load i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_87)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit8*/
	/*   %159 = load i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_88)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit8*/
	/*   %170 = load i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_89)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit8*/
	/*   %178 = load i32* %177, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_93)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %logsch.exit*/
	/*   store i32 %.1.i, i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %207*/
	/*   %208 = load i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_111)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   %218 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   %220 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %180, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %218, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_121)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_122)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %157, i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %apl2.1.i, i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_128)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* encode: %30*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_20)) begin
		memory_controller_in_a = arg_xin1;
	end
	/* encode: %.loopexit.i*/
	/*   store i32 %74, i32* @il, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_44)) begin
		memory_controller_in_a = encode_loopexiti_74_reg;
	end
	/* encode: %logscl.exit*/
	/*   store i32 %.1.i23, i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		memory_controller_in_a = encode_logsclexit_1i23_reg;
	end
	/* encode: %100*/
	/*   store i32 %103, i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__100_58)) begin
		memory_controller_in_a = encode_100_103;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %79, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_70)) begin
		memory_controller_in_a = encode_loopexiti_79_reg;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %117, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_71)) begin
		memory_controller_in_a = encode_upzeroexit21_117_reg;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %118, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_72)) begin
		memory_controller_in_a = encode_upzeroexit21_118_reg;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %49, i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		memory_controller_in_a = encode_filtezexit_49_reg;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %97, i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		memory_controller_in_a = encode_logsclexit_97_reg;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %apl2.1.i16, i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_78)) begin
		memory_controller_in_a = encode_uppol2exit17_apl21i16_reg;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %apl1.2.i11, i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_79)) begin
		memory_controller_in_a = encode_uppol2exit17_apl12i11_reg;
	end
	/* encode: %logsch.exit*/
	/*   store i32 %.1.i, i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		memory_controller_in_a = encode_logschexit_1i_reg;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %180, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		memory_controller_in_a = encode_filtezexit8_180_reg;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %218, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_121)) begin
		memory_controller_in_a = encode_upzeroexit_218_reg;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_122)) begin
		memory_controller_in_a = encode_upzeroexit_219_reg;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %157, i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		memory_controller_in_a = encode_filtezexit8_157_reg;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %apl2.1.i, i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		memory_controller_in_a = encode_uppol2exit_apl21i_reg;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_128)) begin
		memory_controller_in_a = encode_uppol2exit_apl12i_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %10*/
	/*   %11 = load i32* %tqmf_ptr.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %10*/
	/*   %15 = load i32* %scevgep25, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %20*/
	/*   %21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__20_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %25*/
	/*   %28 = load i32* %tqmf_ptr1.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__25_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %30*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %30*/
	/*   %33 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %37*/
	/*   %38 = load i32* %.0.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__37_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit*/
	/*   %49 = load i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit*/
	/*   %51 = load i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit*/
	/*   %61 = load i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %.loopexit.i*/
	/*   %80 = load i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %.loopexit.i*/
	/*   %74 = load i32* %.in, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_41)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %.loopexit.i*/
	/*   %77 = load i32* %76, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %.loopexit.i*/
	/*   store i32 %74, i32* @il, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_44)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %logscl.exit*/
	/*   store i32 %.1.i23, i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %100*/
	/*   %101 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__100_55)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %100*/
	/*   store i32 %103, i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__100_58)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %106*/
	/*   %107 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_61)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit21*/
	/*   %117 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_68)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit21*/
	/*   %119 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_69)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %79, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_70)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %117, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_71)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %118, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_72)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %49, i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %97, i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %apl2.1.i16, i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_78)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %apl1.2.i11, i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_79)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %151*/
	/*   %152 = load i32* %.0.i7, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__151_83)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit8*/
	/*   %157 = load i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_87)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit8*/
	/*   %159 = load i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_88)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit8*/
	/*   %170 = load i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_89)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit8*/
	/*   %178 = load i32* %177, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_93)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %logsch.exit*/
	/*   store i32 %.1.i, i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %207*/
	/*   %208 = load i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_111)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   %218 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   %220 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %180, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %218, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_121)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_122)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %157, i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %apl2.1.i, i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_128)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %10*/
	/*   %12 = load i32* %h_ptr.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %10*/
	/*   %16 = load i32* %scevgep27, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %20*/
	/*   %22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__20_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %25*/
	/*   store i32 %28, i32* %tqmf_ptr.1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__25_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %30*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %30*/
	/*   %34 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %37*/
	/*   %39 = load i32* %.01.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__37_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %filtez.exit*/
	/*   %50 = load i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %filtez.exit*/
	/*   %52 = load i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %.loopexit.i*/
	/*   %84 = load i32* %83, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %logscl.exit*/
	/*   %93 = load i32* %92, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %logscl.exit*/
	/*   store i32 %96, i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %106*/
	/*   %112 = load i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_61)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %106*/
	/*   store i32 %115, i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   %118 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_68)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %34, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_69)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   %120 = load i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_70)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   %121 = load i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_71)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %119, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_72)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %120, i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   %147 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   %148 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_78)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %146, i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_79)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %151*/
	/*   %153 = load i32* %.01.i6, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__151_83)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %filtez.exit8*/
	/*   %158 = load i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_87)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %filtez.exit8*/
	/*   %160 = load i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_88)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %filtez.exit8*/
	/*   %181 = load i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_89)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %filtez.exit8*/
	/*   %185 = load i32* %184, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_93)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %logsch.exit*/
	/*   %194 = load i32* %193, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %logsch.exit*/
	/*   store i32 %197, i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_100)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %201*/
	/*   %202 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__201_105)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %201*/
	/*   store i32 %204, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__201_108)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %207*/
	/*   %213 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_111)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %207*/
	/*   store i32 %216, i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %219 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %148, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %221 = load i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %222 = load i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_121)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %220, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_122)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %221, i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %198, i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %247, i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_128)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd1));
	end
	/* encode: %10*/
	/*   %12 = load i32* %h_ptr.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		memory_controller_address_b = encode_10_h_ptr0;
	end
	/* encode: %10*/
	/*   %16 = load i32* %scevgep27, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_7)) begin
		memory_controller_address_b = encode_10_scevgep27_reg;
	end
	/* encode: %20*/
	/*   %22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__20_11)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd23));
	end
	/* encode: %25*/
	/*   store i32 %28, i32* %tqmf_ptr.1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__25_18)) begin
		memory_controller_address_b = encode_25_tqmf_ptr1_reg;
	end
	/* encode: %30*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_20)) begin
		memory_controller_address_b = `TAG_g_tqmf_a;
	end
	/* encode: %30*/
	/*   %34 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_21)) begin
		memory_controller_address_b = `TAG_g_delay_dltx_a;
	end
	/* encode: %37*/
	/*   %39 = load i32* %.01.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__37_26)) begin
		memory_controller_address_b = encode_37_01i;
	end
	/* encode: %filtez.exit*/
	/*   %50 = load i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_address_b = `TAG_g_al1_a;
	end
	/* encode: %filtez.exit*/
	/*   %52 = load i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_address_b = `TAG_g_al2_a;
	end
	/* encode: %.loopexit.i*/
	/*   %84 = load i32* %83, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		memory_controller_address_b = encode_loopexiti_83;
	end
	/* encode: %logscl.exit*/
	/*   %93 = load i32* %92, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		memory_controller_address_b = encode_logsclexit_92;
	end
	/* encode: %logscl.exit*/
	/*   store i32 %96, i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_50)) begin
		memory_controller_address_b = `TAG_g_detl_a;
	end
	/* encode: %106*/
	/*   %112 = load i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_61)) begin
		memory_controller_address_b = encode_preheader30_scevgep12_reg;
	end
	/* encode: %106*/
	/*   store i32 %115, i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		memory_controller_address_b = encode_preheader30_scevgep12_reg;
	end
	/* encode: %upzero.exit21*/
	/*   %118 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_68)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd3));
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %34, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_69)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd1));
	end
	/* encode: %upzero.exit21*/
	/*   %120 = load i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_70)) begin
		memory_controller_address_b = `TAG_g_plt1_a;
	end
	/* encode: %upzero.exit21*/
	/*   %121 = load i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_71)) begin
		memory_controller_address_b = `TAG_g_plt2_a;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %119, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_72)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd3));
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %120, i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		memory_controller_address_b = `TAG_g_plt2_a;
	end
	/* encode: %uppol2.exit17*/
	/*   %147 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		memory_controller_address_b = `TAG_g_delay_bph_a;
	end
	/* encode: %uppol2.exit17*/
	/*   %148 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_78)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %146, i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_79)) begin
		memory_controller_address_b = `TAG_g_rlt1_a;
	end
	/* encode: %151*/
	/*   %153 = load i32* %.01.i6, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__151_83)) begin
		memory_controller_address_b = encode_151_01i6;
	end
	/* encode: %filtez.exit8*/
	/*   %158 = load i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_87)) begin
		memory_controller_address_b = `TAG_g_ah1_a;
	end
	/* encode: %filtez.exit8*/
	/*   %160 = load i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_88)) begin
		memory_controller_address_b = `TAG_g_ah2_a;
	end
	/* encode: %filtez.exit8*/
	/*   %181 = load i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_89)) begin
		memory_controller_address_b = `TAG_g_nbh_a;
	end
	/* encode: %filtez.exit8*/
	/*   %185 = load i32* %184, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_93)) begin
		memory_controller_address_b = encode_filtezexit8_184;
	end
	/* encode: %logsch.exit*/
	/*   %194 = load i32* %193, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		memory_controller_address_b = encode_logschexit_193;
	end
	/* encode: %logsch.exit*/
	/*   store i32 %197, i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_100)) begin
		memory_controller_address_b = `TAG_g_deth_a;
	end
	/* encode: %201*/
	/*   %202 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__201_105)) begin
		memory_controller_address_b = encode_preheader_scevgep_reg;
	end
	/* encode: %201*/
	/*   store i32 %204, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__201_108)) begin
		memory_controller_address_b = encode_preheader_scevgep_reg;
	end
	/* encode: %207*/
	/*   %213 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_111)) begin
		memory_controller_address_b = encode_preheader27_scevgep4_reg;
	end
	/* encode: %207*/
	/*   store i32 %216, i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		memory_controller_address_b = encode_preheader27_scevgep4_reg;
	end
	/* encode: %upzero.exit*/
	/*   %219 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd3));
	end
	/* encode: %upzero.exit*/
	/*   store i32 %148, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd1));
	end
	/* encode: %upzero.exit*/
	/*   %221 = load i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		memory_controller_address_b = `TAG_g_ph1_a;
	end
	/* encode: %upzero.exit*/
	/*   %222 = load i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_121)) begin
		memory_controller_address_b = `TAG_g_ph2_a;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %220, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_122)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd3));
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %221, i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		memory_controller_address_b = `TAG_g_ph2_a;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %198, i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		memory_controller_address_b = `TAG_g_ph1_a;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %247, i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_128)) begin
		memory_controller_address_b = `TAG_g_rh1_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %10*/
	/*   %12 = load i32* %h_ptr.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %10*/
	/*   %16 = load i32* %scevgep27, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %20*/
	/*   %22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__20_11)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %25*/
	/*   store i32 %28, i32* %tqmf_ptr.1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__25_18)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %30*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_20)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %30*/
	/*   %34 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %37*/
	/*   %39 = load i32* %.01.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__37_26)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %filtez.exit*/
	/*   %50 = load i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %filtez.exit*/
	/*   %52 = load i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %.loopexit.i*/
	/*   %84 = load i32* %83, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %logscl.exit*/
	/*   %93 = load i32* %92, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %logscl.exit*/
	/*   store i32 %96, i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_50)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %106*/
	/*   %112 = load i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_61)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %106*/
	/*   store i32 %115, i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   %118 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_68)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %34, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_69)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit21*/
	/*   %120 = load i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_70)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit21*/
	/*   %121 = load i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_71)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %119, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_72)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %120, i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %uppol2.exit17*/
	/*   %147 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %uppol2.exit17*/
	/*   %148 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_78)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %146, i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_79)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %151*/
	/*   %153 = load i32* %.01.i6, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__151_83)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %filtez.exit8*/
	/*   %158 = load i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_87)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %filtez.exit8*/
	/*   %160 = load i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_88)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %filtez.exit8*/
	/*   %181 = load i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_89)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %filtez.exit8*/
	/*   %185 = load i32* %184, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_93)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %logsch.exit*/
	/*   %194 = load i32* %193, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %logsch.exit*/
	/*   store i32 %197, i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_100)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %201*/
	/*   %202 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__201_105)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %201*/
	/*   store i32 %204, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__201_108)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %207*/
	/*   %213 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_111)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %207*/
	/*   store i32 %216, i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %219 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %148, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %221 = load i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   %222 = load i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_121)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %220, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_122)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %221, i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %198, i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %247, i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_128)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* encode: %25*/
	/*   store i32 %28, i32* %tqmf_ptr.1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__25_18)) begin
		memory_controller_in_b = encode_25_28;
	end
	/* encode: %30*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_20)) begin
		memory_controller_in_b = arg_xin2;
	end
	/* encode: %logscl.exit*/
	/*   store i32 %96, i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_50)) begin
		memory_controller_in_b = encode_logsclexit_96;
	end
	/* encode: %106*/
	/*   store i32 %115, i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		memory_controller_in_b = encode_106_115;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %34, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_69)) begin
		memory_controller_in_b = encode_30_34_reg;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %119, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_72)) begin
		memory_controller_in_b = encode_upzeroexit21_119_reg;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %120, i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		memory_controller_in_b = encode_upzeroexit21_120_reg;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %146, i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_79)) begin
		memory_controller_in_b = encode_uppol2exit17_146_reg;
	end
	/* encode: %logsch.exit*/
	/*   store i32 %197, i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_100)) begin
		memory_controller_in_b = encode_logschexit_197;
	end
	/* encode: %201*/
	/*   store i32 %204, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__201_108)) begin
		memory_controller_in_b = encode_201_204;
	end
	/* encode: %207*/
	/*   store i32 %216, i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		memory_controller_in_b = encode_207_216;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %148, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_in_b = encode_uppol2exit17_148_reg;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %220, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_122)) begin
		memory_controller_in_b = encode_upzeroexit_220_reg;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %221, i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		memory_controller_in_b = encode_upzeroexit_221_reg;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %198, i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		memory_controller_in_b = encode_logschexit_198_reg;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %247, i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_128)) begin
		memory_controller_in_b = encode_uppol2exit_247_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %10*/
	/*   %12 = load i32* %h_ptr.0, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %10*/
	/*   %16 = load i32* %scevgep27, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__10_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %20*/
	/*   %22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__20_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %25*/
	/*   store i32 %28, i32* %tqmf_ptr.1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__25_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %30*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %30*/
	/*   %34 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB__30_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %37*/
	/*   %39 = load i32* %.01.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__37_26)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %filtez.exit*/
	/*   %50 = load i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %filtez.exit*/
	/*   %52 = load i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %.loopexit.i*/
	/*   %84 = load i32* %83, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_loopexiti_43)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %logscl.exit*/
	/*   %93 = load i32* %92, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_48)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %logscl.exit*/
	/*   store i32 %96, i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logsclexit_50)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %106*/
	/*   %112 = load i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_61)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %106*/
	/*   store i32 %115, i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__106_64)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit21*/
	/*   %118 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_68)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %34, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_69)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit21*/
	/*   %120 = load i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_70)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit21*/
	/*   %121 = load i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_71)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit21*/
	/*   store i32 %119, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit21_72)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %120, i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_76)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %uppol2.exit17*/
	/*   %147 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_77)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %uppol2.exit17*/
	/*   %148 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_78)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %uppol2.exit17*/
	/*   store i32 %146, i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit17_79)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %151*/
	/*   %153 = load i32* %.01.i6, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__151_83)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %filtez.exit8*/
	/*   %158 = load i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_87)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %filtez.exit8*/
	/*   %160 = load i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_88)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %filtez.exit8*/
	/*   %181 = load i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_89)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %filtez.exit8*/
	/*   %185 = load i32* %184, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit8_93)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %logsch.exit*/
	/*   %194 = load i32* %193, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_98)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %logsch.exit*/
	/*   store i32 %197, i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_logschexit_100)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %201*/
	/*   %202 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__201_105)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %201*/
	/*   store i32 %204, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__201_108)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %207*/
	/*   %213 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_111)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %207*/
	/*   store i32 %216, i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_encode_BB__207_114)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   %219 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %148, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   %221 = load i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   %222 = load i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_121)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %220, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_122)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %221, i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_126)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %198, i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_127)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %uppol2.exit*/
	/*   store i32 %247, i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_128)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* encode: %uppol2.exit*/
	/*   ret i32 %249*/
	if ((cur_state == LEGUP_F_encode_BB_uppol2exit_129)) begin
		return_val <= encode_uppol2exit_249_reg;
		if (start == 1'b0 && ^(encode_uppol2exit_249_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__0_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__0_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__0_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__0_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__0_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__0_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__0_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__1_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB_preheader46preheader_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__3_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__3_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB_preheader46_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB_preheader45preheader_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__6_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__6_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB_preheader45_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB_preheader44preheader_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__9_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__9_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB_preheader44_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB_resetexitipreheader_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__12_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__12_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB_resetexiti_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB_resetexiti_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB_preheader43preheader_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB__20_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB__20_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB__20_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB__20_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB__20_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB__20_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB__20_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB__20_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB__20_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB__20_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB__20_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB__20_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB__20_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB__20_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB__20_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB__20_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB__20_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB__20_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB__20_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB__20_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB__20_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB__20_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB__20_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB__20_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB__20_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB__20_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB__20_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB__20_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB__20_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB__20_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB__20_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB__20_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB__20_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB__20_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB__20_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB__20_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB__20_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB_preheader43_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB_preheader42_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB_preheader42_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB_preheader42_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__80_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB__80_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB__80_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB__80_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB__80_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB__80_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB__80_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB__80_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB__80_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB__80_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB__80_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB__80_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB__80_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB__80_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB__80_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB__80_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB__80_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB__80_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB__80_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB__80_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB__80_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB__80_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB__80_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB__80_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB__80_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB__80_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB__80_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB__80_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB__80_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB__80_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB__80_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB__80_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB__80_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB__80_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB__87_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexitpreheader_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB__89_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB__89_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB__89_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB__89_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB__89_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB__89_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB__89_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB__89_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB__89_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB__89_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB__89_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB__89_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB__89_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__89_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__89_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB__89_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB__89_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB__89_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB__89_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB__89_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB__89_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB__89_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB__89_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB__89_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB__89_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB__89_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB__89_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB__89_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB__89_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB__89_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB__89_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB__89_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB__89_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB__89_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB__96_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB__97_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB__97_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB__97_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB_filtezexitii_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB_filtezexitii_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB_filtezexitii_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB_filtezexitii_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB__127_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB_logsclexitii_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB_logsclexitii_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB_logsclexitii_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB_preheader40preheader_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB_preheader39preheader_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB_preheader39_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB__140_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB__140_164 = 8'd164;
parameter [7:0] LEGUP_F_main_BB__140_165 = 8'd165;
parameter [7:0] LEGUP_F_main_BB__140_166 = 8'd166;
parameter [7:0] LEGUP_F_main_BB_preheader40_167 = 8'd167;
parameter [7:0] LEGUP_F_main_BB__146_168 = 8'd168;
parameter [7:0] LEGUP_F_main_BB__146_169 = 8'd169;
parameter [7:0] LEGUP_F_main_BB__146_170 = 8'd170;
parameter [7:0] LEGUP_F_main_BB__146_171 = 8'd171;
parameter [7:0] LEGUP_F_main_BB_upzeroexit21iiloopexit_172 = 8'd172;
parameter [7:0] LEGUP_F_main_BB_upzeroexit21iiloopexit2_173 = 8'd173;
parameter [7:0] LEGUP_F_main_BB_upzeroexit21ii_174 = 8'd174;
parameter [7:0] LEGUP_F_main_BB_upzeroexit21ii_175 = 8'd175;
parameter [7:0] LEGUP_F_main_BB_upzeroexit21ii_176 = 8'd176;
parameter [7:0] LEGUP_F_main_BB_upzeroexit21ii_177 = 8'd177;
parameter [7:0] LEGUP_F_main_BB_upzeroexit21ii_178 = 8'd178;
parameter [7:0] LEGUP_F_main_BB__173_179 = 8'd179;
parameter [7:0] LEGUP_F_main_BB_uppol2exit17ii_180 = 8'd180;
parameter [7:0] LEGUP_F_main_BB_uppol2exit17ii_181 = 8'd181;
parameter [7:0] LEGUP_F_main_BB_uppol2exit17ii_182 = 8'd182;
parameter [7:0] LEGUP_F_main_BB__185_183 = 8'd183;
parameter [7:0] LEGUP_F_main_BB__186_184 = 8'd184;
parameter [7:0] LEGUP_F_main_BB__186_185 = 8'd185;
parameter [7:0] LEGUP_F_main_BB__186_186 = 8'd186;
parameter [7:0] LEGUP_F_main_BB_filtezexit8ii_187 = 8'd187;
parameter [7:0] LEGUP_F_main_BB_filtezexit8ii_188 = 8'd188;
parameter [7:0] LEGUP_F_main_BB_filtezexit8ii_189 = 8'd189;
parameter [7:0] LEGUP_F_main_BB_filtezexit8ii_190 = 8'd190;
parameter [7:0] LEGUP_F_main_BB__212_191 = 8'd191;
parameter [7:0] LEGUP_F_main_BB_logschexitii_192 = 8'd192;
parameter [7:0] LEGUP_F_main_BB_logschexitii_193 = 8'd193;
parameter [7:0] LEGUP_F_main_BB_logschexitii_194 = 8'd194;
parameter [7:0] LEGUP_F_main_BB_preheader37preheader_195 = 8'd195;
parameter [7:0] LEGUP_F_main_BB_preheader36preheader_196 = 8'd196;
parameter [7:0] LEGUP_F_main_BB_preheader36_197 = 8'd197;
parameter [7:0] LEGUP_F_main_BB__225_198 = 8'd198;
parameter [7:0] LEGUP_F_main_BB__225_199 = 8'd199;
parameter [7:0] LEGUP_F_main_BB__225_200 = 8'd200;
parameter [7:0] LEGUP_F_main_BB__225_201 = 8'd201;
parameter [7:0] LEGUP_F_main_BB_preheader37_202 = 8'd202;
parameter [7:0] LEGUP_F_main_BB__231_203 = 8'd203;
parameter [7:0] LEGUP_F_main_BB__231_204 = 8'd204;
parameter [7:0] LEGUP_F_main_BB__231_205 = 8'd205;
parameter [7:0] LEGUP_F_main_BB__231_206 = 8'd206;
parameter [7:0] LEGUP_F_main_BB_upzeroexitiiloopexit_207 = 8'd207;
parameter [7:0] LEGUP_F_main_BB_upzeroexitiiloopexit1_208 = 8'd208;
parameter [7:0] LEGUP_F_main_BB_upzeroexitii_209 = 8'd209;
parameter [7:0] LEGUP_F_main_BB_upzeroexitii_210 = 8'd210;
parameter [7:0] LEGUP_F_main_BB_upzeroexitii_211 = 8'd211;
parameter [7:0] LEGUP_F_main_BB_upzeroexitii_212 = 8'd212;
parameter [7:0] LEGUP_F_main_BB_upzeroexitii_213 = 8'd213;
parameter [7:0] LEGUP_F_main_BB__258_214 = 8'd214;
parameter [7:0] LEGUP_F_main_BB_uppol2exitii_215 = 8'd215;
parameter [7:0] LEGUP_F_main_BB_uppol2exitii_216 = 8'd216;
parameter [7:0] LEGUP_F_main_BB__272_217 = 8'd217;
parameter [7:0] LEGUP_F_main_BB__275_218 = 8'd218;
parameter [7:0] LEGUP_F_main_BB__275_219 = 8'd219;
parameter [7:0] LEGUP_F_main_BB__275_220 = 8'd220;
parameter [7:0] LEGUP_F_main_BB__275_221 = 8'd221;
parameter [7:0] LEGUP_F_main_BB__275_222 = 8'd222;
parameter [7:0] LEGUP_F_main_BB__287_223 = 8'd223;
parameter [7:0] LEGUP_F_main_BB__287_224 = 8'd224;
parameter [7:0] LEGUP_F_main_BB__291_225 = 8'd225;
parameter [7:0] LEGUP_F_main_BB__295_226 = 8'd226;
parameter [7:0] LEGUP_F_main_BB__295_227 = 8'd227;
parameter [7:0] LEGUP_F_main_BB__295_228 = 8'd228;
parameter [7:0] LEGUP_F_main_BB_decodeexiti_229 = 8'd229;
parameter [7:0] LEGUP_F_main_BB_decodeexiti_230 = 8'd230;
parameter [7:0] LEGUP_F_main_BB_decodeexiti_231 = 8'd231;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_232 = 8'd232;
parameter [7:0] LEGUP_F_main_BB_preheaderpreheader_233 = 8'd233;
parameter [7:0] LEGUP_F_main_BB__307_234 = 8'd234;
parameter [7:0] LEGUP_F_main_BB__307_235 = 8'd235;
parameter [7:0] LEGUP_F_main_BB_preheader_236 = 8'd236;
parameter [7:0] LEGUP_F_main_BB__314_237 = 8'd237;
parameter [7:0] LEGUP_F_main_BB__314_238 = 8'd238;
parameter [7:0] LEGUP_F_main_BB__320_239 = 8'd239;
parameter [7:0] LEGUP_F_main_BB__323_240 = 8'd240;
parameter [7:0] LEGUP_F_main_BB__325_241 = 8'd241;
parameter [7:0] LEGUP_F_main_BB__327_242 = 8'd242;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_31 = 8'd31;
parameter [7:0] LEGUP_function_call_55 = 8'd55;
parameter [7:0] LEGUP_function_call_58 = 8'd58;
parameter [7:0] LEGUP_function_call_61 = 8'd61;
parameter [7:0] LEGUP_function_call_64 = 8'd64;
parameter [7:0] LEGUP_function_call_67 = 8'd67;
parameter [7:0] LEGUP_function_call_70 = 8'd70;
parameter [7:0] LEGUP_function_call_80 = 8'd80;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg  main_1_exitcond72;
reg  main_1_exitcond72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep73_reg;
reg [31:0] main_3_4;
reg [31:0] main_3_4_reg;
reg [31:0] main_preheader46_5;
reg [31:0] main_preheader46_5_reg;
reg  main_preheader46_exitcond67;
reg  main_preheader46_exitcond67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep68_reg;
reg [31:0] main_6_7;
reg [31:0] main_6_7_reg;
reg [31:0] main_preheader45_8;
reg [31:0] main_preheader45_8_reg;
reg  main_preheader45_exitcond65;
reg  main_preheader45_exitcond65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_scevgep66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_scevgep66_reg;
reg [31:0] main_9_10;
reg [31:0] main_9_10_reg;
reg [31:0] main_preheader44_11;
reg [31:0] main_preheader44_11_reg;
reg  main_preheader44_exitcond62;
reg  main_preheader44_exitcond62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_12_scevgep64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_12_scevgep64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_12_scevgep63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_12_scevgep63_reg;
reg [31:0] main_12_13;
reg [31:0] main_12_13_reg;
reg [31:0] main_resetexiti_indvar45;
reg [31:0] main_resetexiti_indvar45_reg;
reg [31:0] main_resetexiti_i10i;
reg [31:0] main_resetexiti_i10i_reg;
reg [31:0] main_resetexiti_14;
reg [31:0] main_resetexiti_14_reg;
reg [31:0] main_resetexiti_15;
reg [31:0] main_resetexiti_15_reg;
reg [31:0] main_resetexiti_16;
reg [31:0] main_resetexiti_16_reg;
reg [31:0] main_resetexiti_17;
reg [31:0] main_resetexiti_17_reg;
reg [31:0] main_resetexiti_18;
reg [31:0] main_resetexiti_18_reg;
reg [31:0] main_resetexiti_19;
reg [31:0] main_resetexiti_19_reg;
reg  main_resetexiti_exitcond47;
reg  main_resetexiti_exitcond47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep61_reg;
reg [31:0] main_20_21;
reg [31:0] main_20_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep59_reg;
reg [31:0] main_20_22;
reg [31:0] main_20_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep57_reg;
reg [31:0] main_20_23;
reg [31:0] main_20_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep55_reg;
reg [31:0] main_20_24;
reg [31:0] main_20_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep53_reg;
reg [31:0] main_20_25;
reg [31:0] main_20_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep51_reg;
reg [31:0] main_20_26;
reg [31:0] main_20_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep49_reg;
reg [31:0] main_20_27;
reg [31:0] main_20_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep48_reg;
reg [63:0] main_20_28;
reg [63:0] main_20_28_reg;
reg [63:0] main_20_29;
reg [63:0] main_20_29_reg;
reg [31:0] main_20_30;
reg [31:0] main_20_30_reg;
reg [31:0] main_20_31;
reg [31:0] main_20_31_reg;
reg [31:0] main_20_32;
reg [31:0] main_20_32_reg;
reg [31:0] main_20_33;
reg [31:0] main_20_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_34_reg;
reg [63:0] main_20_35;
reg [63:0] main_20_35_reg;
reg [63:0] main_20_36;
reg [63:0] main_20_36_reg;
reg [31:0] main_20_37;
reg [31:0] main_20_37_reg;
reg [31:0] main_20_38;
reg [31:0] main_20_38_reg;
reg [31:0] main_20_39;
reg [31:0] main_20_39_reg;
reg [31:0] main_20_40;
reg [31:0] main_20_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_41_reg;
reg [63:0] main_20_42;
reg [63:0] main_20_42_reg;
reg [63:0] main_20_43;
reg [63:0] main_20_43_reg;
reg [31:0] main_20_44;
reg [31:0] main_20_44_reg;
reg [31:0] main_20_45;
reg [31:0] main_20_45_reg;
reg [31:0] main_20_46;
reg [31:0] main_20_46_reg;
reg [31:0] main_20_47;
reg [31:0] main_20_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_48_reg;
reg [63:0] main_20_49;
reg [63:0] main_20_49_reg;
reg [63:0] main_20_50;
reg [63:0] main_20_50_reg;
reg [31:0] main_20_51;
reg [31:0] main_20_51_reg;
reg [31:0] main_20_52;
reg [31:0] main_20_52_reg;
reg [31:0] main_20_53;
reg [31:0] main_20_53_reg;
reg [31:0] main_20_54;
reg [31:0] main_20_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_55_reg;
reg [63:0] main_20_56;
reg [63:0] main_20_56_reg;
reg [63:0] main_20_57;
reg [63:0] main_20_57_reg;
reg [31:0] main_20_58;
reg [31:0] main_20_58_reg;
reg [31:0] main_20_59;
reg [31:0] main_20_59_reg;
reg [31:0] main_20_60;
reg [31:0] main_20_60_reg;
reg [31:0] main_20_61;
reg [31:0] main_20_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_62_reg;
reg [63:0] main_20_63;
reg [63:0] main_20_63_reg;
reg [63:0] main_20_64;
reg [63:0] main_20_64_reg;
reg [31:0] main_20_65;
reg [31:0] main_20_65_reg;
reg [31:0] main_20_66;
reg [31:0] main_20_66_reg;
reg [31:0] main_20_67;
reg [31:0] main_20_67_reg;
reg [31:0] main_20_68;
reg [31:0] main_20_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_69_reg;
reg [63:0] main_20_70;
reg [63:0] main_20_70_reg;
reg [63:0] main_20_71;
reg [63:0] main_20_71_reg;
reg [31:0] main_20_72;
reg [31:0] main_20_72_reg;
reg [31:0] main_20_73;
reg [31:0] main_20_73_reg;
reg [31:0] main_20_74;
reg [31:0] main_20_74_reg;
reg [31:0] main_20_75;
reg [31:0] main_20_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_76_reg;
reg [31:0] main_20_indvarnext46;
reg [31:0] main_20_indvarnext46_reg;
reg [31:0] main_preheader43_indvar40;
reg [31:0] main_preheader43_indvar40_reg;
reg [31:0] main_preheader43_77;
reg [31:0] main_preheader43_77_reg;
reg [31:0] main_preheader43_i11i;
reg [31:0] main_preheader43_i11i_reg;
reg  main_preheader43_exitcond42;
reg  main_preheader43_exitcond42_reg;
reg [31:0] main_preheader42_78;
reg [31:0] main_preheader42_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader42_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader42_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_80_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_80_scevgep44_reg;
reg [31:0] main_80_81;
reg [31:0] main_80_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_80_scevgep43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_80_scevgep43_reg;
reg [31:0] main_80_82;
reg [31:0] main_80_82_reg;
reg [31:0] main_80_83;
reg [31:0] main_80_83_reg;
reg [31:0] main_80_84;
reg [31:0] main_80_84_reg;
reg [31:0] main_80_85;
reg [31:0] main_80_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_80_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_80_86_reg;
reg [31:0] main_80_indvarnext41;
reg [31:0] main_80_indvarnext41_reg;
reg [31:0] main_87_indvar35;
reg [31:0] main_87_indvar35_reg;
reg [31:0] main_87_dec_ph20;
reg [31:0] main_87_dec_ph20_reg;
reg [31:0] main_87_dec_ph10;
reg [31:0] main_87_dec_ph10_reg;
reg [31:0] main_87_dec_nbh0;
reg [31:0] main_87_dec_nbh0_reg;
reg [31:0] main_87_dec_deth0;
reg [31:0] main_87_dec_deth0_reg;
reg [31:0] main_87_dec_ah20;
reg [31:0] main_87_dec_ah20_reg;
reg [31:0] main_87_dec_rh20;
reg [31:0] main_87_dec_rh20_reg;
reg [31:0] main_87_dec_ah10;
reg [31:0] main_87_dec_ah10_reg;
reg [31:0] main_87_dec_rh10;
reg [31:0] main_87_dec_rh10_reg;
reg [31:0] main_87_dec_plt20;
reg [31:0] main_87_dec_plt20_reg;
reg [31:0] main_87_dec_plt10;
reg [31:0] main_87_dec_plt10_reg;
reg [31:0] main_87_dec_nbl0;
reg [31:0] main_87_dec_nbl0_reg;
reg [31:0] main_87_dec_detl0;
reg [31:0] main_87_dec_detl0_reg;
reg [31:0] main_87_dec_al20;
reg [31:0] main_87_dec_al20_reg;
reg [31:0] main_87_dec_rlt20;
reg [31:0] main_87_dec_rlt20_reg;
reg [31:0] main_87_dec_al10;
reg [31:0] main_87_dec_al10_reg;
reg [31:0] main_87_dec_rlt10;
reg [31:0] main_87_dec_rlt10_reg;
reg [31:0] main_87_i0i;
reg [31:0] main_87_i0i_reg;
reg [31:0] main_87_88;
reg [31:0] main_87_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_87_scevgep38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_87_scevgep38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_87_scevgep39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_87_scevgep39_reg;
reg  main_87_exitcond37;
reg  main_87_exitcond37_reg;
reg [31:0] main_89_90;
reg [31:0] main_89_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_89_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_89_91_reg;
reg [31:0] main_89_92;
reg [31:0] main_89_92_reg;
reg [31:0] main_89_93;
reg [31:0] main_89_93_reg;
reg [31:0] main_89_94;
reg [31:0] main_89_94_reg;
reg [31:0] main_89_95;
reg [31:0] main_89_95_reg;
reg [31:0] main_96_indvar;
reg [31:0] main_96_indvar_reg;
reg [31:0] main_96_zl0iii;
reg [31:0] main_96_zl0iii_reg;
reg [31:0] main_96_i0iii;
reg [31:0] main_96_i0iii_reg;
reg  main_96_exitcond7;
reg  main_96_exitcond7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_97_0iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_97_0iii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_97_01iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_97_01iii_reg;
reg [31:0] main_97_98;
reg [31:0] main_97_98_reg;
reg [31:0] main_97_99;
reg [31:0] main_97_99_reg;
reg [31:0] main_97_100;
reg [31:0] main_97_100_reg;
reg [31:0] main_97_101;
reg [31:0] main_97_101_reg;
reg [31:0] main_97_indvarnext;
reg [31:0] main_97_indvarnext_reg;
reg [31:0] main_filtezexitii_102;
reg [31:0] main_filtezexitii_102_reg;
reg [31:0] main_filtezexitii_103;
reg [31:0] main_filtezexitii_103_reg;
reg [31:0] main_filtezexitii_104;
reg [31:0] main_filtezexitii_104_reg;
reg [31:0] main_filtezexitii_105;
reg [31:0] main_filtezexitii_105_reg;
reg [31:0] main_filtezexitii_106;
reg [31:0] main_filtezexitii_106_reg;
reg [31:0] main_filtezexitii_107;
reg [31:0] main_filtezexitii_107_reg;
reg [31:0] main_filtezexitii_108;
reg [31:0] main_filtezexitii_108_reg;
reg [31:0] main_filtezexitii_109;
reg [31:0] main_filtezexitii_109_reg;
reg [31:0] main_filtezexitii_110;
reg [31:0] main_filtezexitii_110_reg;
reg [31:0] main_filtezexitii_111;
reg [31:0] main_filtezexitii_111_reg;
reg [31:0] main_filtezexitii_112;
reg [31:0] main_filtezexitii_112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_113_reg;
reg [31:0] main_filtezexitii_114;
reg [31:0] main_filtezexitii_114_reg;
reg [31:0] main_filtezexitii_115;
reg [31:0] main_filtezexitii_115_reg;
reg [31:0] main_filtezexitii_116;
reg [31:0] main_filtezexitii_116_reg;
reg [31:0] main_filtezexitii_117;
reg [31:0] main_filtezexitii_117_reg;
reg [31:0] main_filtezexitii_118;
reg [31:0] main_filtezexitii_118_reg;
reg [31:0] main_filtezexitii_119;
reg [31:0] main_filtezexitii_119_reg;
reg [31:0] main_filtezexitii_120;
reg [31:0] main_filtezexitii_120_reg;
reg [31:0] main_filtezexitii_121;
reg [31:0] main_filtezexitii_121_reg;
reg [31:0] main_filtezexitii_122;
reg [31:0] main_filtezexitii_122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_123_reg;
reg [31:0] main_filtezexitii_124;
reg [31:0] main_filtezexitii_124_reg;
reg [31:0] main_filtezexitii_125;
reg [31:0] main_filtezexitii_125_reg;
reg  main_filtezexitii_126;
reg  main_filtezexitii_126_reg;
reg  main_127_128;
reg  main_127_128_reg;
reg [31:0] main_127_;
reg [31:0] main_127__reg;
reg [31:0] main_logsclexitii_1i23ii;
reg [31:0] main_logsclexitii_1i23ii_reg;
reg [31:0] main_logsclexitii_129;
reg [31:0] main_logsclexitii_129_reg;
reg [31:0] main_logsclexitii_130;
reg [31:0] main_logsclexitii_130_reg;
reg [31:0] main_logsclexitii_131;
reg [31:0] main_logsclexitii_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_logsclexitii_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_logsclexitii_132_reg;
reg [31:0] main_logsclexitii_133;
reg [31:0] main_logsclexitii_133_reg;
reg [31:0] main_logsclexitii_134;
reg [31:0] main_logsclexitii_134_reg;
reg [31:0] main_logsclexitii_135;
reg [31:0] main_logsclexitii_135_reg;
reg [31:0] main_logsclexitii_136;
reg [31:0] main_logsclexitii_136_reg;
reg [31:0] main_logsclexitii_137;
reg [31:0] main_logsclexitii_137_reg;
reg  main_logsclexitii_138;
reg  main_logsclexitii_138_reg;
reg [31:0] main_preheader39_139;
reg [31:0] main_preheader39_139_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader39_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader39_scevgep14_reg;
reg  main_preheader39_exitcond13;
reg  main_preheader39_exitcond13_reg;
reg [31:0] main_140_141;
reg [31:0] main_140_141_reg;
reg [31:0] main_140_142;
reg [31:0] main_140_142_reg;
reg [31:0] main_140_143;
reg [31:0] main_140_143_reg;
reg [31:0] main_140_144;
reg [31:0] main_140_144_reg;
reg [31:0] main_preheader40_145;
reg [31:0] main_preheader40_145_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader40_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader40_scevgep11_reg;
reg  main_preheader40_exitcond10;
reg  main_preheader40_exitcond10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_146_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_146_scevgep12_reg;
reg [31:0] main_146_147;
reg [31:0] main_146_147_reg;
reg [31:0] main_146_148;
reg [31:0] main_146_148_reg;
reg [31:0] main_146_149;
reg [31:0] main_146_149_reg;
reg [31:0] main_146_150;
reg [31:0] main_146_150_reg;
reg [31:0] main_146_151;
reg [31:0] main_146_151_reg;
reg [31:0] main_146_152;
reg [31:0] main_146_152_reg;
reg [31:0] main_146_153;
reg [31:0] main_146_153_reg;
reg [31:0] main_146_154;
reg [31:0] main_146_154_reg;
reg [31:0] main_146_155;
reg [31:0] main_146_155_reg;
reg [31:0] main_146_156;
reg [31:0] main_146_156_reg;
reg [31:0] main_upzeroexit21ii_157;
reg [31:0] main_upzeroexit21ii_157_reg;
reg [31:0] main_upzeroexit21ii_158;
reg [31:0] main_upzeroexit21ii_158_reg;
reg [31:0] main_upzeroexit21ii_159;
reg [31:0] main_upzeroexit21ii_159_reg;
reg [31:0] main_upzeroexit21ii_160;
reg [31:0] main_upzeroexit21ii_160_reg;
reg [31:0] main_upzeroexit21ii_161;
reg [31:0] main_upzeroexit21ii_161_reg;
reg  main_upzeroexit21ii_162;
reg  main_upzeroexit21ii_162_reg;
reg [31:0] main_upzeroexit21ii_163;
reg [31:0] main_upzeroexit21ii_163_reg;
reg [31:0] main_upzeroexit21ii_61;
reg [31:0] main_upzeroexit21ii_61_reg;
reg [31:0] main_upzeroexit21ii_164;
reg [31:0] main_upzeroexit21ii_164_reg;
reg [31:0] main_upzeroexit21ii_165;
reg [31:0] main_upzeroexit21ii_165_reg;
reg [31:0] main_upzeroexit21ii_166;
reg [31:0] main_upzeroexit21ii_166_reg;
reg [31:0] main_upzeroexit21ii_167;
reg [31:0] main_upzeroexit21ii_167_reg;
reg [31:0] main_upzeroexit21ii_168;
reg [31:0] main_upzeroexit21ii_168_reg;
reg [31:0] main_upzeroexit21ii_wd40i14ii;
reg [31:0] main_upzeroexit21ii_wd40i14ii_reg;
reg [31:0] main_upzeroexit21ii_169;
reg [31:0] main_upzeroexit21ii_169_reg;
reg [31:0] main_upzeroexit21ii_170;
reg [31:0] main_upzeroexit21ii_170_reg;
reg [31:0] main_upzeroexit21ii_171;
reg [31:0] main_upzeroexit21ii_171_reg;
reg  main_upzeroexit21ii_172;
reg  main_upzeroexit21ii_172_reg;
reg  main_173_174;
reg  main_173_174_reg;
reg [31:0] main_173_62;
reg [31:0] main_173_62_reg;
reg [31:0] main_uppol2exit17ii_apl21i16ii;
reg [31:0] main_uppol2exit17ii_apl21i16ii_reg;
reg [31:0] main_uppol2exit17ii_175;
reg [31:0] main_uppol2exit17ii_175_reg;
reg [31:0] main_uppol2exit17ii_176;
reg [31:0] main_uppol2exit17ii_176_reg;
reg [31:0] main_uppol2exit17ii_177;
reg [31:0] main_uppol2exit17ii_177_reg;
reg [31:0] main_uppol2exit17ii_178;
reg [31:0] main_uppol2exit17ii_178_reg;
reg [31:0] main_uppol2exit17ii_179;
reg [31:0] main_uppol2exit17ii_179_reg;
reg [31:0] main_uppol2exit17ii_apl10i9ii;
reg [31:0] main_uppol2exit17ii_apl10i9ii_reg;
reg [31:0] main_uppol2exit17ii_180;
reg [31:0] main_uppol2exit17ii_180_reg;
reg  main_uppol2exit17ii_181;
reg  main_uppol2exit17ii_181_reg;
reg [31:0] main_uppol2exit17ii_182;
reg [31:0] main_uppol2exit17ii_182_reg;
reg [31:0] main_uppol2exit17ii_183;
reg [31:0] main_uppol2exit17ii_183_reg;
reg [31:0] main_uppol2exit17ii_184;
reg [31:0] main_uppol2exit17ii_184_reg;
reg [31:0] main_185_indvar15;
reg [31:0] main_185_indvar15_reg;
reg [31:0] main_185_zl0i4ii;
reg [31:0] main_185_zl0i4ii_reg;
reg [31:0] main_185_i0i5ii;
reg [31:0] main_185_i0i5ii_reg;
reg  main_185_exitcond17;
reg  main_185_exitcond17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_186_0i7ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_186_0i7ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_186_01i6ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_186_01i6ii_reg;
reg [31:0] main_186_187;
reg [31:0] main_186_187_reg;
reg [31:0] main_186_188;
reg [31:0] main_186_188_reg;
reg [31:0] main_186_189;
reg [31:0] main_186_189_reg;
reg [31:0] main_186_190;
reg [31:0] main_186_190_reg;
reg [31:0] main_186_indvarnext16;
reg [31:0] main_186_indvarnext16_reg;
reg [31:0] main_filtezexit8ii_191;
reg [31:0] main_filtezexit8ii_191_reg;
reg [31:0] main_filtezexit8ii_apl10i9ii;
reg [31:0] main_filtezexit8ii_apl10i9ii_reg;
reg  main_filtezexit8ii_192;
reg  main_filtezexit8ii_192_reg;
reg [31:0] main_filtezexit8ii_apl12i11ii;
reg [31:0] main_filtezexit8ii_apl12i11ii_reg;
reg [31:0] main_filtezexit8ii_193;
reg [31:0] main_filtezexit8ii_193_reg;
reg [31:0] main_filtezexit8ii_194;
reg [31:0] main_filtezexit8ii_194_reg;
reg [31:0] main_filtezexit8ii_195;
reg [31:0] main_filtezexit8ii_195_reg;
reg [31:0] main_filtezexit8ii_196;
reg [31:0] main_filtezexit8ii_196_reg;
reg [31:0] main_filtezexit8ii_197;
reg [31:0] main_filtezexit8ii_197_reg;
reg [31:0] main_filtezexit8ii_198;
reg [31:0] main_filtezexit8ii_198_reg;
reg [31:0] main_filtezexit8ii_199;
reg [31:0] main_filtezexit8ii_199_reg;
reg [31:0] main_filtezexit8ii_200;
reg [31:0] main_filtezexit8ii_200_reg;
reg [31:0] main_filtezexit8ii_201;
reg [31:0] main_filtezexit8ii_201_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit8ii_202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit8ii_202_reg;
reg [31:0] main_filtezexit8ii_203;
reg [31:0] main_filtezexit8ii_203_reg;
reg [31:0] main_filtezexit8ii_204;
reg [31:0] main_filtezexit8ii_204_reg;
reg [31:0] main_filtezexit8ii_205;
reg [31:0] main_filtezexit8ii_205_reg;
reg [31:0] main_filtezexit8ii_206;
reg [31:0] main_filtezexit8ii_206_reg;
reg [31:0] main_filtezexit8ii_207;
reg [31:0] main_filtezexit8ii_207_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit8ii_208;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit8ii_208_reg;
reg [31:0] main_filtezexit8ii_209;
reg [31:0] main_filtezexit8ii_209_reg;
reg [31:0] main_filtezexit8ii_210;
reg [31:0] main_filtezexit8ii_210_reg;
reg  main_filtezexit8ii_211;
reg  main_filtezexit8ii_211_reg;
reg  main_212_213;
reg  main_212_213_reg;
reg [31:0] main_212_63;
reg [31:0] main_212_63_reg;
reg [31:0] main_logschexitii_1iii;
reg [31:0] main_logschexitii_1iii_reg;
reg [31:0] main_logschexitii_214;
reg [31:0] main_logschexitii_214_reg;
reg [31:0] main_logschexitii_215;
reg [31:0] main_logschexitii_215_reg;
reg [31:0] main_logschexitii_216;
reg [31:0] main_logschexitii_216_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_logschexitii_217;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_logschexitii_217_reg;
reg [31:0] main_logschexitii_218;
reg [31:0] main_logschexitii_218_reg;
reg [31:0] main_logschexitii_219;
reg [31:0] main_logschexitii_219_reg;
reg [31:0] main_logschexitii_220;
reg [31:0] main_logschexitii_220_reg;
reg [31:0] main_logschexitii_221;
reg [31:0] main_logschexitii_221_reg;
reg [31:0] main_logschexitii_222;
reg [31:0] main_logschexitii_222_reg;
reg  main_logschexitii_223;
reg  main_logschexitii_223_reg;
reg [31:0] main_preheader36_224;
reg [31:0] main_preheader36_224_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader36_scevgep24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader36_scevgep24_reg;
reg  main_preheader36_exitcond23;
reg  main_preheader36_exitcond23_reg;
reg [31:0] main_225_226;
reg [31:0] main_225_226_reg;
reg [31:0] main_225_227;
reg [31:0] main_225_227_reg;
reg [31:0] main_225_228;
reg [31:0] main_225_228_reg;
reg [31:0] main_225_229;
reg [31:0] main_225_229_reg;
reg [31:0] main_preheader37_230;
reg [31:0] main_preheader37_230_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader37_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader37_scevgep21_reg;
reg  main_preheader37_exitcond20;
reg  main_preheader37_exitcond20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_231_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_231_scevgep22_reg;
reg [31:0] main_231_232;
reg [31:0] main_231_232_reg;
reg [31:0] main_231_233;
reg [31:0] main_231_233_reg;
reg [31:0] main_231_234;
reg [31:0] main_231_234_reg;
reg [31:0] main_231_235;
reg [31:0] main_231_235_reg;
reg [31:0] main_231_236;
reg [31:0] main_231_236_reg;
reg [31:0] main_231_237;
reg [31:0] main_231_237_reg;
reg [31:0] main_231_238;
reg [31:0] main_231_238_reg;
reg [31:0] main_231_239;
reg [31:0] main_231_239_reg;
reg [31:0] main_231_240;
reg [31:0] main_231_240_reg;
reg [31:0] main_231_241;
reg [31:0] main_231_241_reg;
reg [31:0] main_upzeroexitii_242;
reg [31:0] main_upzeroexitii_242_reg;
reg [31:0] main_upzeroexitii_243;
reg [31:0] main_upzeroexitii_243_reg;
reg [31:0] main_upzeroexitii_244;
reg [31:0] main_upzeroexitii_244_reg;
reg [31:0] main_upzeroexitii_245;
reg [31:0] main_upzeroexitii_245_reg;
reg [31:0] main_upzeroexitii_246;
reg [31:0] main_upzeroexitii_246_reg;
reg  main_upzeroexitii_247;
reg  main_upzeroexitii_247_reg;
reg [31:0] main_upzeroexitii_248;
reg [31:0] main_upzeroexitii_248_reg;
reg [31:0] main_upzeroexitii_65;
reg [31:0] main_upzeroexitii_65_reg;
reg [31:0] main_upzeroexitii_249;
reg [31:0] main_upzeroexitii_249_reg;
reg [31:0] main_upzeroexitii_250;
reg [31:0] main_upzeroexitii_250_reg;
reg [31:0] main_upzeroexitii_251;
reg [31:0] main_upzeroexitii_251_reg;
reg [31:0] main_upzeroexitii_252;
reg [31:0] main_upzeroexitii_252_reg;
reg [31:0] main_upzeroexitii_253;
reg [31:0] main_upzeroexitii_253_reg;
reg [31:0] main_upzeroexitii_wd40iii;
reg [31:0] main_upzeroexitii_wd40iii_reg;
reg [31:0] main_upzeroexitii_254;
reg [31:0] main_upzeroexitii_254_reg;
reg [31:0] main_upzeroexitii_255;
reg [31:0] main_upzeroexitii_255_reg;
reg [31:0] main_upzeroexitii_256;
reg [31:0] main_upzeroexitii_256_reg;
reg  main_upzeroexitii_257;
reg  main_upzeroexitii_257_reg;
reg  main_258_259;
reg  main_258_259_reg;
reg [31:0] main_258_66;
reg [31:0] main_258_66_reg;
reg [31:0] main_uppol2exitii_apl21iii;
reg [31:0] main_uppol2exitii_apl21iii_reg;
reg [31:0] main_uppol2exitii_260;
reg [31:0] main_uppol2exitii_260_reg;
reg [31:0] main_uppol2exitii_261;
reg [31:0] main_uppol2exitii_261_reg;
reg [31:0] main_uppol2exitii_262;
reg [31:0] main_uppol2exitii_262_reg;
reg [31:0] main_uppol2exitii_263;
reg [31:0] main_uppol2exitii_263_reg;
reg [31:0] main_uppol2exitii_264;
reg [31:0] main_uppol2exitii_264_reg;
reg [31:0] main_uppol2exitii_apl10iii;
reg [31:0] main_uppol2exitii_apl10iii_reg;
reg [31:0] main_uppol2exitii_265;
reg [31:0] main_uppol2exitii_265_reg;
reg  main_uppol2exitii_266;
reg  main_uppol2exitii_266_reg;
reg [31:0] main_uppol2exitii_267;
reg [31:0] main_uppol2exitii_267_reg;
reg [31:0] main_uppol2exitii_268;
reg [31:0] main_uppol2exitii_268_reg;
reg [31:0] main_uppol2exitii_269;
reg [31:0] main_uppol2exitii_269_reg;
reg [31:0] main_uppol2exitii_270;
reg [31:0] main_uppol2exitii_270_reg;
reg [31:0] main_uppol2exitii_271;
reg [31:0] main_uppol2exitii_271_reg;
reg [31:0] main_272_xa20ii;
reg [31:0] main_272_xa20ii_reg;
reg [31:0] main_272_xa10ii;
reg [31:0] main_272_xa10ii_reg;
reg [31:0] main_272_273;
reg [31:0] main_272_273_reg;
reg [31:0] main_272_274;
reg [31:0] main_272_274_reg;
reg  main_272_exitcond25;
reg  main_272_exitcond25_reg;
reg [31:0] main_275_276;
reg [31:0] main_275_276_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_275_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_275_scevgep29_reg;
reg [31:0] main_275_277;
reg [31:0] main_275_277_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_275_h_ptr0ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_275_h_ptr0ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_275_ac_ptr0ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_275_ac_ptr0ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_275_ad_ptr0ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_275_ad_ptr0ii_reg;
reg [31:0] main_275_278;
reg [31:0] main_275_278_reg;
reg [31:0] main_275_279;
reg [31:0] main_275_279_reg;
reg [31:0] main_275_280;
reg [31:0] main_275_280_reg;
reg [31:0] main_275_281;
reg [31:0] main_275_281_reg;
reg [31:0] main_275_282;
reg [31:0] main_275_282_reg;
reg [31:0] main_275_283;
reg [31:0] main_275_283_reg;
reg [31:0] main_275_284;
reg [31:0] main_275_284_reg;
reg [31:0] main_275_285;
reg [31:0] main_275_285_reg;
reg [31:0] main_275_286;
reg [31:0] main_275_286_reg;
reg [31:0] main_287_288;
reg [31:0] main_287_288_reg;
reg [31:0] main_287_289;
reg [31:0] main_287_289_reg;
reg [31:0] main_287_290;
reg [31:0] main_287_290_reg;
reg [31:0] main_291_292;
reg [31:0] main_291_292_reg;
reg [31:0] main_291_293;
reg [31:0] main_291_293_reg;
reg [31:0] main_291_294;
reg [31:0] main_291_294_reg;
reg  main_291_exitcond30;
reg  main_291_exitcond30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_295_ad_ptr10ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_295_ad_ptr10ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_295_ac_ptr1ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_295_ac_ptr1ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_295_ac_ptr10ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_295_ac_ptr10ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_295_ad_ptr1ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_295_ad_ptr1ii_reg;
reg [31:0] main_295_296;
reg [31:0] main_295_296_reg;
reg [31:0] main_295_297;
reg [31:0] main_295_297_reg;
reg [31:0] main_295_298;
reg [31:0] main_295_298_reg;
reg [31:0] main_decodeexiti_apl10iii;
reg [31:0] main_decodeexiti_apl10iii_reg;
reg  main_decodeexiti_299;
reg  main_decodeexiti_299_reg;
reg [31:0] main_decodeexiti_300;
reg [31:0] main_decodeexiti_300_reg;
reg [31:0] main_decodeexiti_301;
reg [31:0] main_decodeexiti_301_reg;
reg [31:0] main_decodeexiti_apl12iii;
reg [31:0] main_decodeexiti_apl12iii_reg;
reg [31:0] main_decodeexiti_302;
reg [31:0] main_decodeexiti_302_reg;
reg [31:0] main_decodeexiti_303;
reg [31:0] main_decodeexiti_303_reg;
reg [31:0] main_decodeexiti_304;
reg [31:0] main_decodeexiti_304_reg;
reg [31:0] main_decodeexiti_305;
reg [31:0] main_decodeexiti_305_reg;
reg [31:0] main_decodeexiti_indvarnext36;
reg [31:0] main_decodeexiti_indvarnext36_reg;
reg [31:0] main_adpcm_mainexit_306;
reg [31:0] main_adpcm_mainexit_306_reg;
reg [31:0] main_adpcm_mainexit_main_result0;
reg [31:0] main_adpcm_mainexit_main_result0_reg;
reg  main_adpcm_mainexit_exitcond;
reg  main_adpcm_mainexit_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_307_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_307_scevgep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_307_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_307_scevgep5_reg;
reg [31:0] main_307_308;
reg [31:0] main_307_308_reg;
reg [31:0] main_307_309;
reg [31:0] main_307_309_reg;
reg  main_307_310;
reg  main_307_310_reg;
reg [31:0] main_307_311;
reg [31:0] main_307_311_reg;
reg [31:0] main_307_main_result0;
reg [31:0] main_307_main_result0_reg;
reg [31:0] main_307_312;
reg [31:0] main_307_312_reg;
reg [31:0] main_preheader_313;
reg [31:0] main_preheader_313_reg;
reg [31:0] main_preheader_main_result2;
reg [31:0] main_preheader_main_result2_reg;
reg  main_preheader_exitcond3;
reg  main_preheader_exitcond3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_314_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_314_scevgep4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_314_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_314_scevgep_reg;
reg [31:0] main_314_315;
reg [31:0] main_314_315_reg;
reg [31:0] main_314_316;
reg [31:0] main_314_316_reg;
reg  main_314_317;
reg  main_314_317_reg;
reg [31:0] main_314_318;
reg [31:0] main_314_318_reg;
reg [31:0] main_314_main_result2;
reg [31:0] main_314_main_result2_reg;
reg [31:0] main_314_319;
reg [31:0] main_314_319_reg;
reg  main_320_322;
reg  main_320_322_reg;
wire [1:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [1:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
reg [5:0] qq6_code6_table_address_a;
reg  qq6_code6_table_write_enable_a;
wire [31:0] qq6_code6_table_in_a;
wire [31:0] qq6_code6_table_out_a;
wire [5:0] qq6_code6_table_address_b;
wire  qq6_code6_table_write_enable_b;
wire [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_b;
wire [4:0] decis_levl_address_a;
wire  decis_levl_write_enable_a;
wire [31:0] decis_levl_in_a;
wire [31:0] decis_levl_out_a;
wire [4:0] decis_levl_address_b;
wire  decis_levl_write_enable_b;
wire [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_b;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [2:0] dec_del_bpl_address_a;
reg  dec_del_bpl_write_enable_a;
reg [31:0] dec_del_bpl_in_a;
wire [31:0] dec_del_bpl_out_a;
wire [2:0] dec_del_bpl_address_b;
wire  dec_del_bpl_write_enable_b;
wire [31:0] dec_del_bpl_in_b;
wire [31:0] dec_del_bpl_out_b;
reg [2:0] dec_del_dltx_address_a;
reg  dec_del_dltx_write_enable_a;
reg [31:0] dec_del_dltx_in_a;
wire [31:0] dec_del_dltx_out_a;
reg [2:0] dec_del_dltx_address_b;
reg  dec_del_dltx_write_enable_b;
reg [31:0] dec_del_dltx_in_b;
wire [31:0] dec_del_dltx_out_b;
reg [2:0] dec_del_bph_address_a;
reg  dec_del_bph_write_enable_a;
reg [31:0] dec_del_bph_in_a;
wire [31:0] dec_del_bph_out_a;
wire [2:0] dec_del_bph_address_b;
wire  dec_del_bph_write_enable_b;
wire [31:0] dec_del_bph_in_b;
wire [31:0] dec_del_bph_out_b;
reg [2:0] dec_del_dhx_address_a;
reg  dec_del_dhx_write_enable_a;
reg [31:0] dec_del_dhx_in_a;
wire [31:0] dec_del_dhx_out_a;
reg [2:0] dec_del_dhx_address_b;
reg  dec_del_dhx_write_enable_b;
reg [31:0] dec_del_dhx_in_b;
wire [31:0] dec_del_dhx_out_b;
reg [3:0] accumc_address_a;
reg  accumc_write_enable_a;
reg [31:0] accumc_in_a;
wire [31:0] accumc_out_a;
wire [3:0] accumc_address_b;
wire  accumc_write_enable_b;
wire [31:0] accumc_in_b;
wire [31:0] accumc_out_b;
reg [3:0] accumd_address_a;
reg  accumd_write_enable_a;
reg [31:0] accumd_in_a;
wire [31:0] accumd_out_a;
wire [3:0] accumd_address_b;
wire  accumd_write_enable_b;
wire [31:0] accumd_in_b;
wire [31:0] accumd_out_b;
reg [6:0] test_data_address_a;
reg  test_data_write_enable_a;
wire [31:0] test_data_in_a;
wire [31:0] test_data_out_a;
reg [6:0] test_data_address_b;
reg  test_data_write_enable_b;
wire [31:0] test_data_in_b;
wire [31:0] test_data_out_b;
reg [6:0] test_compressed_address_a;
reg  test_compressed_write_enable_a;
wire [31:0] test_compressed_in_a;
wire [31:0] test_compressed_out_a;
wire [6:0] test_compressed_address_b;
wire  test_compressed_write_enable_b;
wire [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_b;
reg [6:0] test_result_address_a;
reg  test_result_write_enable_a;
wire [31:0] test_result_in_a;
wire [31:0] test_result_out_a;
wire [6:0] test_result_address_b;
wire  test_result_write_enable_b;
wire [31:0] test_result_in_b;
wire [31:0] test_result_out_b;
reg [6:0] compressed_address_a;
reg  compressed_write_enable_a;
reg [31:0] compressed_in_a;
wire [31:0] compressed_out_a;
wire [6:0] compressed_address_b;
wire  compressed_write_enable_b;
wire [31:0] compressed_in_b;
wire [31:0] compressed_out_b;
reg [6:0] result_address_a;
reg  result_write_enable_a;
reg [31:0] result_in_a;
wire [31:0] result_out_a;
reg [6:0] result_address_b;
reg  result_write_enable_b;
reg [31:0] result_in_b;
wire [31:0] result_out_b;
reg  encode_start;
reg [31:0] encode_arg_xin1;
reg [31:0] encode_arg_xin2;
wire  encode_memory_controller_enable_a;
wire  encode_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_memory_controller_out_a;
wire [1:0] encode_memory_controller_size_a;
wire  encode_memory_controller_enable_b;
wire  encode_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_memory_controller_out_b;
wire [1:0] encode_memory_controller_size_b;
reg  encode_memory_controller_waitrequest;
reg  encode_finish_final;
reg  encode_finish_reg;
wire  encode_finish;
wire [31:0] encode_return_val;
reg [31:0] encode_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_89_90_temp_out;
wire [31:0] main_89_90_unused;
reg  lpm_divide_main_89_90_en;
reg [31:0] lpm_divide_main_89_90_out;
reg [31:0] main_signed_divide_32_0;
reg [31:0] main_altfp_sitofp_64_0_op0;
wire [63:0] altfp_sitofp64_main_20_28_out;
reg  altfp_main_20_28_en;
reg [63:0] main_altfp_sitofp_64_0;
reg [63:0] main_altfp_multiply_64_0_op0;
reg [63:0] main_altfp_multiply_64_0_op1;
wire [63:0] altfp_multiplier64_main_20_29_out;
reg  altfp_main_20_29_en;
reg [63:0] main_altfp_multiply_64_0;
reg [63:0] main_altfp_fptosi_64_0_op0;
wire [31:0] altfp_fptosi64_main_20_30_out;
reg  altfp_main_20_30_en;
reg [31:0] main_altfp_fptosi_64_0;
reg  lpm_mult_main_resetexiti_i10i_en;
reg [31:0] main_resetexiti_i10i_stage0_reg;
reg  altfp_main_20_35_en;
reg  altfp_main_20_42_en;
reg  altfp_main_20_49_en;
reg  altfp_main_20_56_en;
reg  altfp_main_20_63_en;
reg  altfp_main_20_70_en;
reg  altfp_main_20_36_en;
reg  altfp_main_20_43_en;
reg  altfp_main_20_50_en;
reg  altfp_main_20_57_en;
reg  altfp_main_20_64_en;
reg  altfp_main_20_71_en;
reg  altfp_main_20_37_en;
reg  altfp_main_20_44_en;
reg  altfp_main_20_51_en;
reg  altfp_main_20_58_en;
reg  altfp_main_20_65_en;
reg  altfp_main_20_72_en;
reg  lpm_divide_main_80_82_en;
reg  lpm_mult_main_89_95_en;
reg [31:0] main_89_95_stage0_reg;
reg  lpm_mult_main_97_100_en;
reg [31:0] main_97_100_stage0_reg;
reg  lpm_mult_main_filtezexitii_105_en;
reg [31:0] main_filtezexitii_105_stage0_reg;
reg  lpm_mult_main_filtezexitii_107_en;
reg [31:0] main_filtezexitii_107_stage0_reg;
reg  lpm_mult_main_filtezexitii_121_en;
reg [31:0] main_filtezexitii_121_stage0_reg;
reg  lpm_mult_main_filtezexitii_118_en;
reg [31:0] main_filtezexitii_118_stage0_reg;
reg  lpm_mult_main_filtezexitii_115_en;
reg [31:0] main_filtezexitii_115_stage0_reg;
reg  lpm_mult_main_140_142_en;
reg [31:0] main_140_142_stage0_reg;
reg  lpm_mult_main_146_148_en;
reg [31:0] main_146_148_stage0_reg;
reg  lpm_mult_main_146_153_en;
reg [31:0] main_146_153_stage0_reg;
reg  lpm_mult_main_upzeroexit21ii_161_en;
reg [31:0] main_upzeroexit21ii_161_stage0_reg;
reg  lpm_mult_main_upzeroexit21ii_165_en;
reg [31:0] main_upzeroexit21ii_165_stage0_reg;
reg  lpm_mult_main_upzeroexit21ii_169_en;
reg [31:0] main_upzeroexit21ii_169_stage0_reg;
reg  lpm_mult_main_uppol2exit17ii_175_en;
reg [31:0] main_uppol2exit17ii_175_stage0_reg;
reg  lpm_mult_main_uppol2exit17ii_184_en;
reg [31:0] main_uppol2exit17ii_184_stage0_reg;
reg  lpm_mult_main_186_189_en;
reg [31:0] main_186_189_stage0_reg;
reg  lpm_mult_main_filtezexit8ii_196_en;
reg [31:0] main_filtezexit8ii_196_stage0_reg;
reg  lpm_mult_main_filtezexit8ii_198_en;
reg [31:0] main_filtezexit8ii_198_stage0_reg;
reg  lpm_mult_main_filtezexit8ii_206_en;
reg [31:0] main_filtezexit8ii_206_stage0_reg;
reg  lpm_mult_main_filtezexit8ii_204_en;
reg [31:0] main_filtezexit8ii_204_stage0_reg;
reg  lpm_mult_main_225_227_en;
reg [31:0] main_225_227_stage0_reg;
reg  lpm_mult_main_231_233_en;
reg [31:0] main_231_233_stage0_reg;
reg  lpm_mult_main_231_238_en;
reg [31:0] main_231_238_stage0_reg;
reg  lpm_mult_main_upzeroexitii_246_en;
reg [31:0] main_upzeroexitii_246_stage0_reg;
reg  lpm_mult_main_upzeroexitii_250_en;
reg [31:0] main_upzeroexitii_250_stage0_reg;
reg  lpm_mult_main_upzeroexitii_254_en;
reg [31:0] main_upzeroexitii_254_stage0_reg;
reg  lpm_mult_main_uppol2exitii_260_en;
reg [31:0] main_uppol2exitii_260_stage0_reg;
reg  lpm_mult_main_uppol2exitii_270_en;
reg [31:0] main_uppol2exitii_270_stage0_reg;
reg  lpm_mult_main_uppol2exitii_271_en;
reg [31:0] main_uppol2exitii_271_stage0_reg;
reg  lpm_mult_main_275_280_en;
reg [31:0] main_275_280_stage0_reg;
reg  lpm_mult_main_275_284_en;
reg [31:0] main_275_284_stage0_reg;
reg  lpm_mult_main_decodeexiti_300_en;
reg [31:0] main_decodeexiti_300_stage0_reg;
reg  lpm_mult_main_decodeexiti_301_en;
reg [31:0] main_decodeexiti_301_stage0_reg;

/*   %90 = sdiv i32 %i.0.i, 2*/
lpm_divide lpm_divide_main_89_90 (
	.quotient (lpm_divide_main_89_90_temp_out),
	.remain (main_89_90_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_89_90_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_89_90.lpm_pipeline = 32,
	lpm_divide_main_89_90.lpm_widthn = 32,
	lpm_divide_main_89_90.lpm_widthd = 32,
	lpm_divide_main_89_90.lpm_drepresentation = "SIGNED",
	lpm_divide_main_89_90.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_89_90.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

/*   %28 = sitofp i32 %i1.0.i to double*/
altfp_sitofp64_6 altfp_sitofp64_6_main_20_28 (
	.result (altfp_sitofp64_main_20_28_out),
	.dataa (main_altfp_sitofp_64_0_op0),
	.clock (clk),
	.clk_en (altfp_main_20_28_en)
);


/*   %29 = fmul double %28, 5.000000e-01*/
altfp_multiplier64_11 altfp_multiplier64_11_main_20_29 (
	.result (altfp_multiplier64_main_20_29_out),
	.dataa (main_altfp_multiply_64_0_op0),
	.datab (main_altfp_multiply_64_0_op1),
	.clock (clk),
	.clk_en (altfp_main_20_29_en)
);


/*   %30 = fptosi double %29 to i32*/
altfp_fptosi64_6 altfp_fptosi64_6_main_20_30 (
	.result (altfp_fptosi64_main_20_30_out),
	.dataa (main_altfp_fptosi_64_0_op0),
	.clock (clk),
	.clk_en (altfp_main_20_30_en)
);



encode encode (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (encode_memory_controller_enable_a),
	.memory_controller_address_a (encode_memory_controller_address_a),
	.memory_controller_write_enable_a (encode_memory_controller_write_enable_a),
	.memory_controller_in_a (encode_memory_controller_in_a),
	.memory_controller_size_a (encode_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (encode_memory_controller_enable_b),
	.memory_controller_address_b (encode_memory_controller_address_b),
	.memory_controller_write_enable_b (encode_memory_controller_write_enable_b),
	.memory_controller_in_b (encode_memory_controller_in_b),
	.memory_controller_size_b (encode_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (encode_start),
	.finish (encode_finish),
	.return_val (encode_return_val),
	.arg_xin1 (encode_arg_xin1),
	.arg_xin2 (encode_arg_xin2)
);

defparam
	encode.tag_offset = tag_offset;

// Local Rams


// @qq6_code6_table = internal unnamed_addr constant [64 x i32] [i32 -136, i32 -136, i32 -136, i32 -136, i32 -24808, i32 -21904, i32 -19008, i32 -16704, i32 -14984, i32 -13512, i32 -12280, i32 -11192, i3...
rom_dual_port qq6_code6_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq6_code6_table_address_a ),
	.address_b( qq6_code6_table_address_b ),
	.q_a( qq6_code6_table_out_a ),
	.q_b( qq6_code6_table_out_b)
);
defparam qq6_code6_table.width_a = 32;
defparam qq6_code6_table.width_b = 32;
defparam qq6_code6_table.widthad_a = 6;
defparam qq6_code6_table.widthad_b = 6;
defparam qq6_code6_table.numwords_a = 64;
defparam qq6_code6_table.numwords_b = 64;
defparam qq6_code6_table.latency = 1;
defparam qq6_code6_table.init_file = "qq6_code6_table.mif";


// @dec_del_bpl = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_bpl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_bpl_address_a ),
	.address_b( dec_del_bpl_address_b ),
	.wren_a( dec_del_bpl_write_enable_a ),
	.wren_b( dec_del_bpl_write_enable_b ),
	.data_a( dec_del_bpl_in_a ),
	.data_b( dec_del_bpl_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_bpl_out_a ),
	.q_b( dec_del_bpl_out_b)
);
defparam dec_del_bpl.width_a = 32;
defparam dec_del_bpl.width_b = 32;
defparam dec_del_bpl.widthad_a = 3;
defparam dec_del_bpl.widthad_b = 3;
defparam dec_del_bpl.width_be_a = 1;
defparam dec_del_bpl.width_be_b = 1;
defparam dec_del_bpl.numwords_a = 6;
defparam dec_del_bpl.numwords_b = 6;
defparam dec_del_bpl.latency = 1;
defparam dec_del_bpl.init_file = "dec_del_bpl.mif";


// @dec_del_dltx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_dltx (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_dltx_address_a ),
	.address_b( dec_del_dltx_address_b ),
	.wren_a( dec_del_dltx_write_enable_a ),
	.wren_b( dec_del_dltx_write_enable_b ),
	.data_a( dec_del_dltx_in_a ),
	.data_b( dec_del_dltx_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_dltx_out_a ),
	.q_b( dec_del_dltx_out_b)
);
defparam dec_del_dltx.width_a = 32;
defparam dec_del_dltx.width_b = 32;
defparam dec_del_dltx.widthad_a = 3;
defparam dec_del_dltx.widthad_b = 3;
defparam dec_del_dltx.width_be_a = 1;
defparam dec_del_dltx.width_be_b = 1;
defparam dec_del_dltx.numwords_a = 6;
defparam dec_del_dltx.numwords_b = 6;
defparam dec_del_dltx.latency = 1;
defparam dec_del_dltx.init_file = "dec_del_dltx.mif";


// @dec_del_bph = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_bph (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_bph_address_a ),
	.address_b( dec_del_bph_address_b ),
	.wren_a( dec_del_bph_write_enable_a ),
	.wren_b( dec_del_bph_write_enable_b ),
	.data_a( dec_del_bph_in_a ),
	.data_b( dec_del_bph_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_bph_out_a ),
	.q_b( dec_del_bph_out_b)
);
defparam dec_del_bph.width_a = 32;
defparam dec_del_bph.width_b = 32;
defparam dec_del_bph.widthad_a = 3;
defparam dec_del_bph.widthad_b = 3;
defparam dec_del_bph.width_be_a = 1;
defparam dec_del_bph.width_be_b = 1;
defparam dec_del_bph.numwords_a = 6;
defparam dec_del_bph.numwords_b = 6;
defparam dec_del_bph.latency = 1;
defparam dec_del_bph.init_file = "dec_del_bph.mif";


// @dec_del_dhx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_dhx (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_dhx_address_a ),
	.address_b( dec_del_dhx_address_b ),
	.wren_a( dec_del_dhx_write_enable_a ),
	.wren_b( dec_del_dhx_write_enable_b ),
	.data_a( dec_del_dhx_in_a ),
	.data_b( dec_del_dhx_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_dhx_out_a ),
	.q_b( dec_del_dhx_out_b)
);
defparam dec_del_dhx.width_a = 32;
defparam dec_del_dhx.width_b = 32;
defparam dec_del_dhx.widthad_a = 3;
defparam dec_del_dhx.widthad_b = 3;
defparam dec_del_dhx.width_be_a = 1;
defparam dec_del_dhx.width_be_b = 1;
defparam dec_del_dhx.numwords_a = 6;
defparam dec_del_dhx.numwords_b = 6;
defparam dec_del_dhx.latency = 1;
defparam dec_del_dhx.init_file = "dec_del_dhx.mif";


// @accumc = internal unnamed_addr global [11 x i32] zeroinitializer, align 4
ram_dual_port accumc (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( accumc_address_a ),
	.address_b( accumc_address_b ),
	.wren_a( accumc_write_enable_a ),
	.wren_b( accumc_write_enable_b ),
	.data_a( accumc_in_a ),
	.data_b( accumc_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( accumc_out_a ),
	.q_b( accumc_out_b)
);
defparam accumc.width_a = 32;
defparam accumc.width_b = 32;
defparam accumc.widthad_a = 4;
defparam accumc.widthad_b = 4;
defparam accumc.width_be_a = 1;
defparam accumc.width_be_b = 1;
defparam accumc.numwords_a = 11;
defparam accumc.numwords_b = 11;
defparam accumc.latency = 1;
defparam accumc.init_file = "accumc.mif";


// @accumd = internal unnamed_addr global [11 x i32] zeroinitializer, align 4
ram_dual_port accumd (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( accumd_address_a ),
	.address_b( accumd_address_b ),
	.wren_a( accumd_write_enable_a ),
	.wren_b( accumd_write_enable_b ),
	.data_a( accumd_in_a ),
	.data_b( accumd_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( accumd_out_a ),
	.q_b( accumd_out_b)
);
defparam accumd.width_a = 32;
defparam accumd.width_b = 32;
defparam accumd.widthad_a = 4;
defparam accumd.widthad_b = 4;
defparam accumd.width_be_a = 1;
defparam accumd.width_be_b = 1;
defparam accumd.numwords_a = 11;
defparam accumd.numwords_b = 11;
defparam accumd.latency = 1;
defparam accumd.init_file = "accumd.mif";


// @test_data = internal unnamed_addr constant [100 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 67,...
rom_dual_port test_data (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_data_address_a ),
	.address_b( test_data_address_b ),
	.q_a( test_data_out_a ),
	.q_b( test_data_out_b)
);
defparam test_data.width_a = 32;
defparam test_data.width_b = 32;
defparam test_data.widthad_a = 7;
defparam test_data.widthad_b = 7;
defparam test_data.numwords_a = 100;
defparam test_data.numwords_b = 100;
defparam test_data.latency = 1;
defparam test_data.init_file = "test_data.mif";


// @test_compressed = internal unnamed_addr constant [100 x i32] [i32 253, i32 222, i32 119, i32 186, i32 244, i32 146, i32 32, i32 160, i32 236, i32 237, i32 238, i32 240, i32 241, i32 241, i32 242, i32...
rom_dual_port test_compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_compressed_address_a ),
	.address_b( test_compressed_address_b ),
	.q_a( test_compressed_out_a ),
	.q_b( test_compressed_out_b)
);
defparam test_compressed.width_a = 32;
defparam test_compressed.width_b = 32;
defparam test_compressed.widthad_a = 7;
defparam test_compressed.widthad_b = 7;
defparam test_compressed.numwords_a = 100;
defparam test_compressed.numwords_b = 100;
defparam test_compressed.latency = 1;
defparam test_compressed.init_file = "test_compressed.mif";


// @test_result = internal unnamed_addr constant [100 x i32] [i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 -2, i32 -1, i32 -2, i32 0, ...
rom_dual_port test_result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_result_address_a ),
	.address_b( test_result_address_b ),
	.q_a( test_result_out_a ),
	.q_b( test_result_out_b)
);
defparam test_result.width_a = 32;
defparam test_result.width_b = 32;
defparam test_result.widthad_a = 7;
defparam test_result.widthad_b = 7;
defparam test_result.numwords_a = 100;
defparam test_result.numwords_b = 100;
defparam test_result.latency = 1;
defparam test_result.init_file = "test_result.mif";


// @compressed = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( compressed_address_a ),
	.address_b( compressed_address_b ),
	.wren_a( compressed_write_enable_a ),
	.wren_b( compressed_write_enable_b ),
	.data_a( compressed_in_a ),
	.data_b( compressed_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( compressed_out_a ),
	.q_b( compressed_out_b)
);
defparam compressed.width_a = 32;
defparam compressed.width_b = 32;
defparam compressed.widthad_a = 7;
defparam compressed.widthad_b = 7;
defparam compressed.width_be_a = 1;
defparam compressed.width_be_b = 1;
defparam compressed.numwords_a = 100;
defparam compressed.numwords_b = 100;
defparam compressed.latency = 1;
defparam compressed.init_file = "compressed.mif";


// @result = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( result_address_a ),
	.address_b( result_address_b ),
	.wren_a( result_write_enable_a ),
	.wren_b( result_write_enable_b ),
	.data_a( result_in_a ),
	.data_b( result_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( result_out_a ),
	.q_b( result_out_b)
);
defparam result.width_a = 32;
defparam result.width_b = 32;
defparam result.widthad_a = 7;
defparam result.widthad_b = 7;
defparam result.width_be_a = 1;
defparam result.width_be_b = 1;
defparam result.numwords_a = 100;
defparam result.numwords_b = 100;
defparam result.latency = 1;
defparam result.init_file = "result.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %320*/
	/*   %321 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %main_result.2) #2*/
	if ((cur_state == LEGUP_F_main_BB__320_239)) begin
		$write("Result: %d ", $signed(main_preheader_main_result2_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) finish <= 0;
	end
	/* main: %323*/
	/*   %324 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__323_240)) begin
		$write("RESULT: PASS ");
	end
	/* main: %325*/
	/*   %326 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__325_241)) begin
		$write("RESULT: FAIL");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_F_main_BB__1_10;
LEGUP_F_main_BB__127_156:
		next_state = LEGUP_F_main_BB_logsclexitii_157;
LEGUP_F_main_BB__12_24:
		next_state = LEGUP_F_main_BB__12_25;
LEGUP_F_main_BB__12_25:
		next_state = LEGUP_F_main_BB_preheader44_22;
LEGUP_F_main_BB__140_163:
		next_state = LEGUP_F_main_BB__140_164;
LEGUP_F_main_BB__140_164:
		next_state = LEGUP_F_main_BB__140_165;
LEGUP_F_main_BB__140_165:
		next_state = LEGUP_F_main_BB__140_166;
LEGUP_F_main_BB__140_166:
		next_state = LEGUP_F_main_BB_preheader39_162;
LEGUP_F_main_BB__146_168:
		next_state = LEGUP_F_main_BB__146_169;
LEGUP_F_main_BB__146_169:
		next_state = LEGUP_F_main_BB__146_170;
LEGUP_F_main_BB__146_170:
		next_state = LEGUP_F_main_BB__146_171;
LEGUP_F_main_BB__146_171:
		next_state = LEGUP_F_main_BB_preheader40_167;
LEGUP_F_main_BB__173_179:
		next_state = LEGUP_F_main_BB_uppol2exit17ii_180;
LEGUP_F_main_BB__185_183:
	if ((main_185_exitcond17 == 1'd1))
		next_state = LEGUP_F_main_BB_filtezexit8ii_187;
	else if ((main_185_exitcond17 == 1'd0))
		next_state = LEGUP_F_main_BB__186_184;
LEGUP_F_main_BB__186_184:
		next_state = LEGUP_F_main_BB__186_185;
LEGUP_F_main_BB__186_185:
		next_state = LEGUP_F_main_BB__186_186;
LEGUP_F_main_BB__186_186:
		next_state = LEGUP_F_main_BB__185_183;
LEGUP_F_main_BB__1_10:
	if ((main_1_exitcond72 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader46preheader_11;
	else if ((main_1_exitcond72 == 1'd0))
		next_state = LEGUP_F_main_BB__3_12;
LEGUP_F_main_BB__20_29:
		next_state = LEGUP_F_main_BB__20_30;
LEGUP_F_main_BB__20_30:
		next_state = LEGUP_function_call_31;
LEGUP_F_main_BB__20_32:
		next_state = LEGUP_F_main_BB__20_33;
LEGUP_F_main_BB__20_33:
		next_state = LEGUP_F_main_BB__20_34;
LEGUP_F_main_BB__20_34:
		next_state = LEGUP_F_main_BB__20_35;
LEGUP_F_main_BB__20_35:
		next_state = LEGUP_F_main_BB__20_36;
LEGUP_F_main_BB__20_36:
		next_state = LEGUP_F_main_BB__20_37;
LEGUP_F_main_BB__20_37:
		next_state = LEGUP_F_main_BB__20_38;
LEGUP_F_main_BB__20_38:
		next_state = LEGUP_F_main_BB__20_39;
LEGUP_F_main_BB__20_39:
		next_state = LEGUP_F_main_BB__20_40;
LEGUP_F_main_BB__20_40:
		next_state = LEGUP_F_main_BB__20_41;
LEGUP_F_main_BB__20_41:
		next_state = LEGUP_F_main_BB__20_42;
LEGUP_F_main_BB__20_42:
		next_state = LEGUP_F_main_BB__20_43;
LEGUP_F_main_BB__20_43:
		next_state = LEGUP_F_main_BB__20_44;
LEGUP_F_main_BB__20_44:
		next_state = LEGUP_F_main_BB__20_45;
LEGUP_F_main_BB__20_45:
		next_state = LEGUP_F_main_BB__20_46;
LEGUP_F_main_BB__20_46:
		next_state = LEGUP_F_main_BB__20_47;
LEGUP_F_main_BB__20_47:
		next_state = LEGUP_F_main_BB__20_48;
LEGUP_F_main_BB__20_48:
		next_state = LEGUP_F_main_BB__20_49;
LEGUP_F_main_BB__20_49:
		next_state = LEGUP_F_main_BB__20_50;
LEGUP_F_main_BB__20_50:
		next_state = LEGUP_F_main_BB__20_51;
LEGUP_F_main_BB__20_51:
		next_state = LEGUP_F_main_BB__20_52;
LEGUP_F_main_BB__20_52:
		next_state = LEGUP_F_main_BB__20_53;
LEGUP_F_main_BB__20_53:
		next_state = LEGUP_F_main_BB__20_54;
LEGUP_F_main_BB__20_54:
		next_state = LEGUP_function_call_55;
LEGUP_F_main_BB__20_56:
		next_state = LEGUP_F_main_BB__20_57;
LEGUP_F_main_BB__20_57:
		next_state = LEGUP_function_call_58;
LEGUP_F_main_BB__20_59:
		next_state = LEGUP_F_main_BB__20_60;
LEGUP_F_main_BB__20_60:
		next_state = LEGUP_function_call_61;
LEGUP_F_main_BB__20_62:
		next_state = LEGUP_F_main_BB__20_63;
LEGUP_F_main_BB__20_63:
		next_state = LEGUP_function_call_64;
LEGUP_F_main_BB__20_65:
		next_state = LEGUP_F_main_BB__20_66;
LEGUP_F_main_BB__20_66:
		next_state = LEGUP_function_call_67;
LEGUP_F_main_BB__20_68:
		next_state = LEGUP_F_main_BB__20_69;
LEGUP_F_main_BB__20_69:
		next_state = LEGUP_function_call_70;
LEGUP_F_main_BB__20_71:
		next_state = LEGUP_F_main_BB__20_72;
LEGUP_F_main_BB__20_72:
		next_state = LEGUP_F_main_BB_resetexiti_26;
LEGUP_F_main_BB__212_191:
		next_state = LEGUP_F_main_BB_logschexitii_192;
LEGUP_F_main_BB__225_198:
		next_state = LEGUP_F_main_BB__225_199;
LEGUP_F_main_BB__225_199:
		next_state = LEGUP_F_main_BB__225_200;
LEGUP_F_main_BB__225_200:
		next_state = LEGUP_F_main_BB__225_201;
LEGUP_F_main_BB__225_201:
		next_state = LEGUP_F_main_BB_preheader36_197;
LEGUP_F_main_BB__231_203:
		next_state = LEGUP_F_main_BB__231_204;
LEGUP_F_main_BB__231_204:
		next_state = LEGUP_F_main_BB__231_205;
LEGUP_F_main_BB__231_205:
		next_state = LEGUP_F_main_BB__231_206;
LEGUP_F_main_BB__231_206:
		next_state = LEGUP_F_main_BB_preheader37_202;
LEGUP_F_main_BB__258_214:
		next_state = LEGUP_F_main_BB_uppol2exitii_215;
LEGUP_F_main_BB__272_217:
	if ((main_272_exitcond25 == 1'd1))
		next_state = LEGUP_F_main_BB__287_223;
	else if ((main_272_exitcond25 == 1'd0))
		next_state = LEGUP_F_main_BB__275_218;
LEGUP_F_main_BB__275_218:
		next_state = LEGUP_F_main_BB__275_219;
LEGUP_F_main_BB__275_219:
		next_state = LEGUP_F_main_BB__275_220;
LEGUP_F_main_BB__275_220:
		next_state = LEGUP_F_main_BB__275_221;
LEGUP_F_main_BB__275_221:
		next_state = LEGUP_F_main_BB__275_222;
LEGUP_F_main_BB__275_222:
		next_state = LEGUP_F_main_BB__272_217;
LEGUP_F_main_BB__287_223:
		next_state = LEGUP_F_main_BB__287_224;
LEGUP_F_main_BB__287_224:
		next_state = LEGUP_F_main_BB__291_225;
LEGUP_F_main_BB__291_225:
	if ((main_291_exitcond30 == 1'd1))
		next_state = LEGUP_F_main_BB_decodeexiti_229;
	else if ((main_291_exitcond30 == 1'd0))
		next_state = LEGUP_F_main_BB__295_226;
LEGUP_F_main_BB__295_226:
		next_state = LEGUP_F_main_BB__295_227;
LEGUP_F_main_BB__295_227:
		next_state = LEGUP_F_main_BB__295_228;
LEGUP_F_main_BB__295_228:
		next_state = LEGUP_F_main_BB__291_225;
LEGUP_F_main_BB__307_234:
		next_state = LEGUP_F_main_BB__307_235;
LEGUP_F_main_BB__307_235:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_232;
LEGUP_F_main_BB__314_237:
		next_state = LEGUP_F_main_BB__314_238;
LEGUP_F_main_BB__314_238:
		next_state = LEGUP_F_main_BB_preheader_236;
LEGUP_F_main_BB__320_239:
	if ((main_320_322 == 1'd1))
		next_state = LEGUP_F_main_BB__323_240;
	else if ((main_320_322 == 1'd0))
		next_state = LEGUP_F_main_BB__325_241;
LEGUP_F_main_BB__323_240:
		next_state = LEGUP_F_main_BB__327_242;
LEGUP_F_main_BB__325_241:
		next_state = LEGUP_F_main_BB__327_242;
LEGUP_F_main_BB__327_242:
		next_state = LEGUP_0;
LEGUP_F_main_BB__3_12:
		next_state = LEGUP_F_main_BB__3_13;
LEGUP_F_main_BB__3_13:
		next_state = LEGUP_F_main_BB__1_10;
LEGUP_F_main_BB__6_16:
		next_state = LEGUP_F_main_BB__6_17;
LEGUP_F_main_BB__6_17:
		next_state = LEGUP_F_main_BB_preheader46_14;
LEGUP_F_main_BB__80_100:
		next_state = LEGUP_F_main_BB__80_101;
LEGUP_F_main_BB__80_101:
		next_state = LEGUP_F_main_BB__80_102;
LEGUP_F_main_BB__80_102:
		next_state = LEGUP_F_main_BB__80_103;
LEGUP_F_main_BB__80_103:
		next_state = LEGUP_F_main_BB__80_104;
LEGUP_F_main_BB__80_104:
		next_state = LEGUP_F_main_BB__80_105;
LEGUP_F_main_BB__80_105:
		next_state = LEGUP_F_main_BB__80_106;
LEGUP_F_main_BB__80_106:
		next_state = LEGUP_F_main_BB__80_107;
LEGUP_F_main_BB__80_107:
		next_state = LEGUP_F_main_BB__80_108;
LEGUP_F_main_BB__80_108:
		next_state = LEGUP_F_main_BB__80_109;
LEGUP_F_main_BB__80_109:
		next_state = LEGUP_F_main_BB__80_110;
LEGUP_F_main_BB__80_110:
		next_state = LEGUP_F_main_BB__80_111;
LEGUP_F_main_BB__80_111:
		next_state = LEGUP_F_main_BB_preheader43_73;
LEGUP_F_main_BB__80_77:
		next_state = LEGUP_F_main_BB__80_78;
LEGUP_F_main_BB__80_78:
		next_state = LEGUP_F_main_BB__80_79;
LEGUP_F_main_BB__80_79:
		next_state = LEGUP_function_call_80;
LEGUP_F_main_BB__80_81:
		next_state = LEGUP_F_main_BB__80_82;
LEGUP_F_main_BB__80_82:
		next_state = LEGUP_F_main_BB__80_83;
LEGUP_F_main_BB__80_83:
		next_state = LEGUP_F_main_BB__80_84;
LEGUP_F_main_BB__80_84:
		next_state = LEGUP_F_main_BB__80_85;
LEGUP_F_main_BB__80_85:
		next_state = LEGUP_F_main_BB__80_86;
LEGUP_F_main_BB__80_86:
		next_state = LEGUP_F_main_BB__80_87;
LEGUP_F_main_BB__80_87:
		next_state = LEGUP_F_main_BB__80_88;
LEGUP_F_main_BB__80_88:
		next_state = LEGUP_F_main_BB__80_89;
LEGUP_F_main_BB__80_89:
		next_state = LEGUP_F_main_BB__80_90;
LEGUP_F_main_BB__80_90:
		next_state = LEGUP_F_main_BB__80_91;
LEGUP_F_main_BB__80_91:
		next_state = LEGUP_F_main_BB__80_92;
LEGUP_F_main_BB__80_92:
		next_state = LEGUP_F_main_BB__80_93;
LEGUP_F_main_BB__80_93:
		next_state = LEGUP_F_main_BB__80_94;
LEGUP_F_main_BB__80_94:
		next_state = LEGUP_F_main_BB__80_95;
LEGUP_F_main_BB__80_95:
		next_state = LEGUP_F_main_BB__80_96;
LEGUP_F_main_BB__80_96:
		next_state = LEGUP_F_main_BB__80_97;
LEGUP_F_main_BB__80_97:
		next_state = LEGUP_F_main_BB__80_98;
LEGUP_F_main_BB__80_98:
		next_state = LEGUP_F_main_BB__80_99;
LEGUP_F_main_BB__80_99:
		next_state = LEGUP_F_main_BB__80_100;
LEGUP_F_main_BB__87_112:
	if ((main_87_exitcond37 == 1'd1))
		next_state = LEGUP_F_main_BB_adpcm_mainexitpreheader_113;
	else if ((main_87_exitcond37 == 1'd0))
		next_state = LEGUP_F_main_BB__89_114;
LEGUP_F_main_BB__89_114:
		next_state = LEGUP_F_main_BB__89_115;
LEGUP_F_main_BB__89_115:
		next_state = LEGUP_F_main_BB__89_116;
LEGUP_F_main_BB__89_116:
		next_state = LEGUP_F_main_BB__89_117;
LEGUP_F_main_BB__89_117:
		next_state = LEGUP_F_main_BB__89_118;
LEGUP_F_main_BB__89_118:
		next_state = LEGUP_F_main_BB__89_119;
LEGUP_F_main_BB__89_119:
		next_state = LEGUP_F_main_BB__89_120;
LEGUP_F_main_BB__89_120:
		next_state = LEGUP_F_main_BB__89_121;
LEGUP_F_main_BB__89_121:
		next_state = LEGUP_F_main_BB__89_122;
LEGUP_F_main_BB__89_122:
		next_state = LEGUP_F_main_BB__89_123;
LEGUP_F_main_BB__89_123:
		next_state = LEGUP_F_main_BB__89_124;
LEGUP_F_main_BB__89_124:
		next_state = LEGUP_F_main_BB__89_125;
LEGUP_F_main_BB__89_125:
		next_state = LEGUP_F_main_BB__89_126;
LEGUP_F_main_BB__89_126:
		next_state = LEGUP_F_main_BB__89_127;
LEGUP_F_main_BB__89_127:
		next_state = LEGUP_F_main_BB__89_128;
LEGUP_F_main_BB__89_128:
		next_state = LEGUP_F_main_BB__89_129;
LEGUP_F_main_BB__89_129:
		next_state = LEGUP_F_main_BB__89_130;
LEGUP_F_main_BB__89_130:
		next_state = LEGUP_F_main_BB__89_131;
LEGUP_F_main_BB__89_131:
		next_state = LEGUP_F_main_BB__89_132;
LEGUP_F_main_BB__89_132:
		next_state = LEGUP_F_main_BB__89_133;
LEGUP_F_main_BB__89_133:
		next_state = LEGUP_F_main_BB__89_134;
LEGUP_F_main_BB__89_134:
		next_state = LEGUP_F_main_BB__89_135;
LEGUP_F_main_BB__89_135:
		next_state = LEGUP_F_main_BB__89_136;
LEGUP_F_main_BB__89_136:
		next_state = LEGUP_F_main_BB__89_137;
LEGUP_F_main_BB__89_137:
		next_state = LEGUP_F_main_BB__89_138;
LEGUP_F_main_BB__89_138:
		next_state = LEGUP_F_main_BB__89_139;
LEGUP_F_main_BB__89_139:
		next_state = LEGUP_F_main_BB__89_140;
LEGUP_F_main_BB__89_140:
		next_state = LEGUP_F_main_BB__89_141;
LEGUP_F_main_BB__89_141:
		next_state = LEGUP_F_main_BB__89_142;
LEGUP_F_main_BB__89_142:
		next_state = LEGUP_F_main_BB__89_143;
LEGUP_F_main_BB__89_143:
		next_state = LEGUP_F_main_BB__89_144;
LEGUP_F_main_BB__89_144:
		next_state = LEGUP_F_main_BB__89_145;
LEGUP_F_main_BB__89_145:
		next_state = LEGUP_F_main_BB__89_146;
LEGUP_F_main_BB__89_146:
		next_state = LEGUP_F_main_BB__89_147;
LEGUP_F_main_BB__89_147:
		next_state = LEGUP_F_main_BB__96_148;
LEGUP_F_main_BB__96_148:
	if ((main_96_exitcond7 == 1'd1))
		next_state = LEGUP_F_main_BB_filtezexitii_152;
	else if ((main_96_exitcond7 == 1'd0))
		next_state = LEGUP_F_main_BB__97_149;
LEGUP_F_main_BB__97_149:
		next_state = LEGUP_F_main_BB__97_150;
LEGUP_F_main_BB__97_150:
		next_state = LEGUP_F_main_BB__97_151;
LEGUP_F_main_BB__97_151:
		next_state = LEGUP_F_main_BB__96_148;
LEGUP_F_main_BB__9_20:
		next_state = LEGUP_F_main_BB__9_21;
LEGUP_F_main_BB__9_21:
		next_state = LEGUP_F_main_BB_preheader45_18;
LEGUP_F_main_BB_adpcm_mainexit_232:
	if ((main_adpcm_mainexit_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderpreheader_233;
	else if ((main_adpcm_mainexit_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__307_234;
LEGUP_F_main_BB_adpcm_mainexitpreheader_113:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_232;
LEGUP_F_main_BB_decodeexiti_229:
		next_state = LEGUP_F_main_BB_decodeexiti_230;
LEGUP_F_main_BB_decodeexiti_230:
		next_state = LEGUP_F_main_BB_decodeexiti_231;
LEGUP_F_main_BB_decodeexiti_231:
		next_state = LEGUP_F_main_BB__87_112;
LEGUP_F_main_BB_filtezexit8ii_187:
		next_state = LEGUP_F_main_BB_filtezexit8ii_188;
LEGUP_F_main_BB_filtezexit8ii_188:
		next_state = LEGUP_F_main_BB_filtezexit8ii_189;
LEGUP_F_main_BB_filtezexit8ii_189:
		next_state = LEGUP_F_main_BB_filtezexit8ii_190;
LEGUP_F_main_BB_filtezexit8ii_190:
	if ((main_filtezexit8ii_211_reg == 1'd1))
		next_state = LEGUP_F_main_BB_logschexitii_192;
	else if ((main_filtezexit8ii_211_reg == 1'd0))
		next_state = LEGUP_F_main_BB__212_191;
LEGUP_F_main_BB_filtezexitii_152:
		next_state = LEGUP_F_main_BB_filtezexitii_153;
LEGUP_F_main_BB_filtezexitii_153:
		next_state = LEGUP_F_main_BB_filtezexitii_154;
LEGUP_F_main_BB_filtezexitii_154:
		next_state = LEGUP_F_main_BB_filtezexitii_155;
LEGUP_F_main_BB_filtezexitii_155:
	if ((main_filtezexitii_126_reg == 1'd1))
		next_state = LEGUP_F_main_BB_logsclexitii_157;
	else if ((main_filtezexitii_126_reg == 1'd0))
		next_state = LEGUP_F_main_BB__127_156;
LEGUP_F_main_BB_logschexitii_192:
		next_state = LEGUP_F_main_BB_logschexitii_193;
LEGUP_F_main_BB_logschexitii_193:
		next_state = LEGUP_F_main_BB_logschexitii_194;
LEGUP_F_main_BB_logschexitii_194:
	if ((main_logschexitii_223_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader36preheader_196;
	else if ((main_logschexitii_223_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader37preheader_195;
LEGUP_F_main_BB_logsclexitii_157:
		next_state = LEGUP_F_main_BB_logsclexitii_158;
LEGUP_F_main_BB_logsclexitii_158:
		next_state = LEGUP_F_main_BB_logsclexitii_159;
LEGUP_F_main_BB_logsclexitii_159:
	if ((main_logsclexitii_138_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader39preheader_161;
	else if ((main_logsclexitii_138_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader40preheader_160;
LEGUP_F_main_BB_preheader36_197:
	if ((main_preheader36_exitcond23 == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexitiiloopexit_207;
	else if ((main_preheader36_exitcond23 == 1'd0))
		next_state = LEGUP_F_main_BB__225_198;
LEGUP_F_main_BB_preheader36preheader_196:
		next_state = LEGUP_F_main_BB_preheader36_197;
LEGUP_F_main_BB_preheader37_202:
	if ((main_preheader37_exitcond20 == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexitiiloopexit1_208;
	else if ((main_preheader37_exitcond20 == 1'd0))
		next_state = LEGUP_F_main_BB__231_203;
LEGUP_F_main_BB_preheader37preheader_195:
		next_state = LEGUP_F_main_BB_preheader37_202;
LEGUP_F_main_BB_preheader39_162:
	if ((main_preheader39_exitcond13 == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexit21iiloopexit_172;
	else if ((main_preheader39_exitcond13 == 1'd0))
		next_state = LEGUP_F_main_BB__140_163;
LEGUP_F_main_BB_preheader39preheader_161:
		next_state = LEGUP_F_main_BB_preheader39_162;
LEGUP_F_main_BB_preheader40_167:
	if ((main_preheader40_exitcond10 == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexit21iiloopexit2_173;
	else if ((main_preheader40_exitcond10 == 1'd0))
		next_state = LEGUP_F_main_BB__146_168;
LEGUP_F_main_BB_preheader40preheader_160:
		next_state = LEGUP_F_main_BB_preheader40_167;
LEGUP_F_main_BB_preheader42_74:
		next_state = LEGUP_F_main_BB_preheader42_75;
LEGUP_F_main_BB_preheader42_75:
		next_state = LEGUP_F_main_BB_preheader42_76;
LEGUP_F_main_BB_preheader42_76:
		next_state = LEGUP_F_main_BB__87_112;
LEGUP_F_main_BB_preheader43_73:
	if ((main_preheader43_exitcond42 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader42_74;
	else if ((main_preheader43_exitcond42 == 1'd0))
		next_state = LEGUP_F_main_BB__80_77;
LEGUP_F_main_BB_preheader43preheader_28:
		next_state = LEGUP_F_main_BB_preheader43_73;
LEGUP_F_main_BB_preheader44_22:
	if ((main_preheader44_exitcond62 == 1'd1))
		next_state = LEGUP_F_main_BB_resetexitipreheader_23;
	else if ((main_preheader44_exitcond62 == 1'd0))
		next_state = LEGUP_F_main_BB__12_24;
LEGUP_F_main_BB_preheader44preheader_19:
		next_state = LEGUP_F_main_BB_preheader44_22;
LEGUP_F_main_BB_preheader45_18:
	if ((main_preheader45_exitcond65 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader44preheader_19;
	else if ((main_preheader45_exitcond65 == 1'd0))
		next_state = LEGUP_F_main_BB__9_20;
LEGUP_F_main_BB_preheader45preheader_15:
		next_state = LEGUP_F_main_BB_preheader45_18;
LEGUP_F_main_BB_preheader46_14:
	if ((main_preheader46_exitcond67 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader45preheader_15;
	else if ((main_preheader46_exitcond67 == 1'd0))
		next_state = LEGUP_F_main_BB__6_16;
LEGUP_F_main_BB_preheader46preheader_11:
		next_state = LEGUP_F_main_BB_preheader46_14;
LEGUP_F_main_BB_preheader_236:
	if ((main_preheader_exitcond3 == 1'd1))
		next_state = LEGUP_F_main_BB__320_239;
	else if ((main_preheader_exitcond3 == 1'd0))
		next_state = LEGUP_F_main_BB__314_237;
LEGUP_F_main_BB_preheaderpreheader_233:
		next_state = LEGUP_F_main_BB_preheader_236;
LEGUP_F_main_BB_resetexiti_26:
		next_state = LEGUP_F_main_BB_resetexiti_27;
LEGUP_F_main_BB_resetexiti_27:
	if ((main_resetexiti_exitcond47_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader43preheader_28;
	else if ((main_resetexiti_exitcond47_reg == 1'd0))
		next_state = LEGUP_F_main_BB__20_29;
LEGUP_F_main_BB_resetexitipreheader_23:
		next_state = LEGUP_F_main_BB_resetexiti_26;
LEGUP_F_main_BB_uppol2exit17ii_180:
		next_state = LEGUP_F_main_BB_uppol2exit17ii_181;
LEGUP_F_main_BB_uppol2exit17ii_181:
		next_state = LEGUP_F_main_BB_uppol2exit17ii_182;
LEGUP_F_main_BB_uppol2exit17ii_182:
		next_state = LEGUP_F_main_BB__185_183;
LEGUP_F_main_BB_uppol2exitii_215:
		next_state = LEGUP_F_main_BB_uppol2exitii_216;
LEGUP_F_main_BB_uppol2exitii_216:
		next_state = LEGUP_F_main_BB__272_217;
LEGUP_F_main_BB_upzeroexit21ii_174:
		next_state = LEGUP_F_main_BB_upzeroexit21ii_175;
LEGUP_F_main_BB_upzeroexit21ii_175:
		next_state = LEGUP_F_main_BB_upzeroexit21ii_176;
LEGUP_F_main_BB_upzeroexit21ii_176:
		next_state = LEGUP_F_main_BB_upzeroexit21ii_177;
LEGUP_F_main_BB_upzeroexit21ii_177:
		next_state = LEGUP_F_main_BB_upzeroexit21ii_178;
LEGUP_F_main_BB_upzeroexit21ii_178:
	if ((main_upzeroexit21ii_172_reg == 1'd1))
		next_state = LEGUP_F_main_BB_uppol2exit17ii_180;
	else if ((main_upzeroexit21ii_172_reg == 1'd0))
		next_state = LEGUP_F_main_BB__173_179;
LEGUP_F_main_BB_upzeroexit21iiloopexit2_173:
		next_state = LEGUP_F_main_BB_upzeroexit21ii_174;
LEGUP_F_main_BB_upzeroexit21iiloopexit_172:
		next_state = LEGUP_F_main_BB_upzeroexit21ii_174;
LEGUP_F_main_BB_upzeroexitii_209:
		next_state = LEGUP_F_main_BB_upzeroexitii_210;
LEGUP_F_main_BB_upzeroexitii_210:
		next_state = LEGUP_F_main_BB_upzeroexitii_211;
LEGUP_F_main_BB_upzeroexitii_211:
		next_state = LEGUP_F_main_BB_upzeroexitii_212;
LEGUP_F_main_BB_upzeroexitii_212:
		next_state = LEGUP_F_main_BB_upzeroexitii_213;
LEGUP_F_main_BB_upzeroexitii_213:
	if ((main_upzeroexitii_257_reg == 1'd1))
		next_state = LEGUP_F_main_BB_uppol2exitii_215;
	else if ((main_upzeroexitii_257_reg == 1'd0))
		next_state = LEGUP_F_main_BB__258_214;
LEGUP_F_main_BB_upzeroexitiiloopexit1_208:
		next_state = LEGUP_F_main_BB_upzeroexitii_209;
LEGUP_F_main_BB_upzeroexitiiloopexit_207:
		next_state = LEGUP_F_main_BB_upzeroexitii_209;
LEGUP_function_call_31:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__20_32;
LEGUP_function_call_55:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__20_56;
LEGUP_function_call_58:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__20_59;
LEGUP_function_call_61:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__20_62;
LEGUP_function_call_64:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__20_65;
LEGUP_function_call_67:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__20_68;
LEGUP_function_call_70:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__20_71;
LEGUP_function_call_80:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__80_81;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_9) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_2 = 32'd0;
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %4, %3 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__3_13) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_2 = main_3_4_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_9) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_main_BB__3_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond72 = icmp eq i32 %2, 6*/
		main_1_exitcond72 = (main_1_2_reg == 32'd6);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond72 = icmp eq i32 %2, 6*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		main_1_exitcond72_reg <= main_1_exitcond72;
		if (start == 1'b0 && ^(main_1_exitcond72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep76 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %2*/
		main_3_scevgep76 = (`TAG_g_delay_dltx_a | (4 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep76 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		main_3_scevgep76_reg <= main_3_scevgep76;
		if (start == 1'b0 && ^(main_3_scevgep76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep75 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %2*/
		main_3_scevgep75 = (`TAG_g_delay_dhx_a | (4 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep75 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		main_3_scevgep75_reg <= main_3_scevgep75;
		if (start == 1'b0 && ^(main_3_scevgep75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep74 = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %2*/
		main_3_scevgep74 = (1'd0 | (4 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep74 = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		main_3_scevgep74_reg <= main_3_scevgep74;
		if (start == 1'b0 && ^(main_3_scevgep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep73 = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %2*/
		main_3_scevgep73 = (1'd0 | (4 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep73 = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		main_3_scevgep73_reg <= main_3_scevgep73;
		if (start == 1'b0 && ^(main_3_scevgep73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %4 = add nsw i32 %2, 1*/
		main_3_4 = (main_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %4 = add nsw i32 %2, 1*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		main_3_4_reg <= main_3_4;
		if (start == 1'b0 && ^(main_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46*/
	/*   %5 = phi i32 [ %7, %6 ], [ 0, %.preheader46.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader46preheader_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader46_5 = 32'd0;
	end
	/* main: %.preheader46*/
	/*   %5 = phi i32 [ %7, %6 ], [ 0, %.preheader46.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__6_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader46_5 = main_6_7_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader46*/
	/*   %5 = phi i32 [ %7, %6 ], [ 0, %.preheader46.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader46preheader_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader46_5_reg <= main_preheader46_5;
		if (start == 1'b0 && ^(main_preheader46_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46_5_reg"); $finish; end
	end
	/* main: %.preheader46*/
	/*   %5 = phi i32 [ %7, %6 ], [ 0, %.preheader46.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__6_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader46_5_reg <= main_preheader46_5;
		if (start == 1'b0 && ^(main_preheader46_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader46*/
	/*   %exitcond67 = icmp eq i32 %5, 6*/
		main_preheader46_exitcond67 = (main_preheader46_5_reg == 32'd6);
end
always @(posedge clk) begin
	/* main: %.preheader46*/
	/*   %exitcond67 = icmp eq i32 %5, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheader46_14)) begin
		main_preheader46_exitcond67_reg <= main_preheader46_exitcond67;
		if (start == 1'b0 && ^(main_preheader46_exitcond67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader46_exitcond67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %scevgep71 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %5*/
		main_6_scevgep71 = (`TAG_g_delay_bpl_a | (4 * main_preheader46_5_reg));
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %scevgep71 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %5*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		main_6_scevgep71_reg <= main_6_scevgep71;
		if (start == 1'b0 && ^(main_6_scevgep71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_scevgep71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %scevgep70 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %5*/
		main_6_scevgep70 = (`TAG_g_delay_bph_a | (4 * main_preheader46_5_reg));
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %scevgep70 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %5*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		main_6_scevgep70_reg <= main_6_scevgep70;
		if (start == 1'b0 && ^(main_6_scevgep70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_scevgep70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %scevgep69 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %5*/
		main_6_scevgep69 = (1'd0 | (4 * main_preheader46_5_reg));
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %scevgep69 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %5*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		main_6_scevgep69_reg <= main_6_scevgep69;
		if (start == 1'b0 && ^(main_6_scevgep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_scevgep69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %scevgep68 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %5*/
		main_6_scevgep68 = (1'd0 | (4 * main_preheader46_5_reg));
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %scevgep68 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %5*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		main_6_scevgep68_reg <= main_6_scevgep68;
		if (start == 1'b0 && ^(main_6_scevgep68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_scevgep68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %7 = add nsw i32 %5, 1*/
		main_6_7 = (main_preheader46_5_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %7 = add nsw i32 %5, 1*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader45*/
	/*   %8 = phi i32 [ %10, %9 ], [ 0, %.preheader45.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader45preheader_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader45_8 = 32'd0;
	end
	/* main: %.preheader45*/
	/*   %8 = phi i32 [ %10, %9 ], [ 0, %.preheader45.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__9_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader45_8 = main_9_10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader45*/
	/*   %8 = phi i32 [ %10, %9 ], [ 0, %.preheader45.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader45preheader_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader45_8_reg <= main_preheader45_8;
		if (start == 1'b0 && ^(main_preheader45_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader45_8_reg"); $finish; end
	end
	/* main: %.preheader45*/
	/*   %8 = phi i32 [ %10, %9 ], [ 0, %.preheader45.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__9_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader45_8_reg <= main_preheader45_8;
		if (start == 1'b0 && ^(main_preheader45_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader45_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader45*/
	/*   %exitcond65 = icmp eq i32 %8, 24*/
		main_preheader45_exitcond65 = (main_preheader45_8_reg == 32'd24);
end
always @(posedge clk) begin
	/* main: %.preheader45*/
	/*   %exitcond65 = icmp eq i32 %8, 24*/
	if ((cur_state == LEGUP_F_main_BB_preheader45_18)) begin
		main_preheader45_exitcond65_reg <= main_preheader45_exitcond65;
		if (start == 1'b0 && ^(main_preheader45_exitcond65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader45_exitcond65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %scevgep66 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %8*/
		main_9_scevgep66 = (`TAG_g_tqmf_a | (4 * main_preheader45_8_reg));
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %scevgep66 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %8*/
	if ((cur_state == LEGUP_F_main_BB__9_20)) begin
		main_9_scevgep66_reg <= main_9_scevgep66;
		if (start == 1'b0 && ^(main_9_scevgep66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_scevgep66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %10 = add nsw i32 %8, 1*/
		main_9_10 = (main_preheader45_8_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %10 = add nsw i32 %8, 1*/
	if ((cur_state == LEGUP_F_main_BB__9_20)) begin
		main_9_10_reg <= main_9_10;
		if (start == 1'b0 && ^(main_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader44*/
	/*   %11 = phi i32 [ %13, %12 ], [ 0, %.preheader44.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader44preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader44_11 = 32'd0;
	end
	/* main: %.preheader44*/
	/*   %11 = phi i32 [ %13, %12 ], [ 0, %.preheader44.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__12_25) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader44_11 = main_12_13_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader44*/
	/*   %11 = phi i32 [ %13, %12 ], [ 0, %.preheader44.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader44preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader44_11_reg <= main_preheader44_11;
		if (start == 1'b0 && ^(main_preheader44_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader44_11_reg"); $finish; end
	end
	/* main: %.preheader44*/
	/*   %11 = phi i32 [ %13, %12 ], [ 0, %.preheader44.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__12_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader44_11_reg <= main_preheader44_11;
		if (start == 1'b0 && ^(main_preheader44_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader44_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader44*/
	/*   %exitcond62 = icmp eq i32 %11, 11*/
		main_preheader44_exitcond62 = (main_preheader44_11_reg == 32'd11);
end
always @(posedge clk) begin
	/* main: %.preheader44*/
	/*   %exitcond62 = icmp eq i32 %11, 11*/
	if ((cur_state == LEGUP_F_main_BB_preheader44_22)) begin
		main_preheader44_exitcond62_reg <= main_preheader44_exitcond62;
		if (start == 1'b0 && ^(main_preheader44_exitcond62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader44_exitcond62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %scevgep64 = getelementptr [11 x i32]* @accumc, i32 0, i32 %11*/
		main_12_scevgep64 = (1'd0 | (4 * main_preheader44_11_reg));
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %scevgep64 = getelementptr [11 x i32]* @accumc, i32 0, i32 %11*/
	if ((cur_state == LEGUP_F_main_BB__12_24)) begin
		main_12_scevgep64_reg <= main_12_scevgep64;
		if (start == 1'b0 && ^(main_12_scevgep64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_scevgep64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %scevgep63 = getelementptr [11 x i32]* @accumd, i32 0, i32 %11*/
		main_12_scevgep63 = (1'd0 | (4 * main_preheader44_11_reg));
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %scevgep63 = getelementptr [11 x i32]* @accumd, i32 0, i32 %11*/
	if ((cur_state == LEGUP_F_main_BB__12_24)) begin
		main_12_scevgep63_reg <= main_12_scevgep63;
		if (start == 1'b0 && ^(main_12_scevgep63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_scevgep63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %13 = add nsw i32 %11, 1*/
		main_12_13 = (main_preheader44_11_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %13 = add nsw i32 %11, 1*/
	if ((cur_state == LEGUP_F_main_BB__12_24)) begin
		main_12_13_reg <= main_12_13;
		if (start == 1'b0 && ^(main_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %indvar45 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next46, %20 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_indvar45 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %indvar45 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next46, %20 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__20_72) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_indvar45 = main_20_indvarnext46_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %indvar45 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next46, %20 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_indvar45_reg <= main_resetexiti_indvar45;
		if (start == 1'b0 && ^(main_resetexiti_indvar45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_indvar45_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %indvar45 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next46, %20 ]*/
	if (((cur_state == LEGUP_F_main_BB__20_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_indvar45_reg <= main_resetexiti_indvar45;
		if (start == 1'b0 && ^(main_resetexiti_indvar45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_indvar45_reg"); $finish; end
	end
end
always @(*) begin
	main_resetexiti_i10i = main_resetexiti_i10i_stage0_reg;
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %i1.0.i = mul i32 %indvar45, 14*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_27)) begin
		main_resetexiti_i10i_reg <= main_resetexiti_i10i;
		if (start == 1'b0 && ^(main_resetexiti_i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_i10i_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %i1.0.i = mul i32 %indvar45, 14*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_27)) begin
		main_resetexiti_i10i_reg <= main_resetexiti_i10i;
		if (start == 1'b0 && ^(main_resetexiti_i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_i10i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %14 = add i32 %i1.0.i, 12*/
		main_resetexiti_14 = (main_resetexiti_i10i + 32'd12);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %14 = add i32 %i1.0.i, 12*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_27)) begin
		main_resetexiti_14_reg <= main_resetexiti_14;
		if (start == 1'b0 && ^(main_resetexiti_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %15 = add i32 %i1.0.i, 10*/
		main_resetexiti_15 = (main_resetexiti_i10i + 32'd10);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %15 = add i32 %i1.0.i, 10*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_27)) begin
		main_resetexiti_15_reg <= main_resetexiti_15;
		if (start == 1'b0 && ^(main_resetexiti_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %16 = add i32 %i1.0.i, 8*/
		main_resetexiti_16 = (main_resetexiti_i10i + 32'd8);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %16 = add i32 %i1.0.i, 8*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_27)) begin
		main_resetexiti_16_reg <= main_resetexiti_16;
		if (start == 1'b0 && ^(main_resetexiti_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %17 = add i32 %i1.0.i, 6*/
		main_resetexiti_17 = (main_resetexiti_i10i + 32'd6);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %17 = add i32 %i1.0.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_27)) begin
		main_resetexiti_17_reg <= main_resetexiti_17;
		if (start == 1'b0 && ^(main_resetexiti_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %18 = add i32 %i1.0.i, 4*/
		main_resetexiti_18 = (main_resetexiti_i10i + 32'd4);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %18 = add i32 %i1.0.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_27)) begin
		main_resetexiti_18_reg <= main_resetexiti_18;
		if (start == 1'b0 && ^(main_resetexiti_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %19 = add i32 %i1.0.i, 2*/
		main_resetexiti_19 = (main_resetexiti_i10i + 32'd2);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %19 = add i32 %i1.0.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_27)) begin
		main_resetexiti_19_reg <= main_resetexiti_19;
		if (start == 1'b0 && ^(main_resetexiti_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %exitcond47 = icmp eq i32 %indvar45, 7*/
		main_resetexiti_exitcond47 = (main_resetexiti_indvar45_reg == 32'd7);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %exitcond47 = icmp eq i32 %indvar45, 7*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_26)) begin
		main_resetexiti_exitcond47_reg <= main_resetexiti_exitcond47;
		if (start == 1'b0 && ^(main_resetexiti_exitcond47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_exitcond47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep61 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i1.0.i*/
		main_20_scevgep61 = (1'd0 | (4 * main_resetexiti_i10i_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep61 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i1.0.i*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_scevgep61_reg <= main_20_scevgep61;
		if (start == 1'b0 && ^(main_20_scevgep61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %21 = or i32 %i1.0.i, 1*/
		main_20_21 = (main_resetexiti_i10i_reg | 32'd1);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %21 = or i32 %i1.0.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_21_reg <= main_20_21;
		if (start == 1'b0 && ^(main_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep60 = getelementptr [100 x i32]* @test_data, i32 0, i32 %21*/
		main_20_scevgep60 = (1'd0 | (4 * main_20_21));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep60 = getelementptr [100 x i32]* @test_data, i32 0, i32 %21*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_scevgep60_reg <= main_20_scevgep60;
		if (start == 1'b0 && ^(main_20_scevgep60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep59 = getelementptr [100 x i32]* @test_data, i32 0, i32 %19*/
		main_20_scevgep59 = (1'd0 | (4 * main_resetexiti_19_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep59 = getelementptr [100 x i32]* @test_data, i32 0, i32 %19*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_scevgep59_reg <= main_20_scevgep59;
		if (start == 1'b0 && ^(main_20_scevgep59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %22 = add i32 %i1.0.i, 3*/
		main_20_22 = (main_resetexiti_i10i_reg + 32'd3);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %22 = add i32 %i1.0.i, 3*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_22_reg <= main_20_22;
		if (start == 1'b0 && ^(main_20_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep58 = getelementptr [100 x i32]* @test_data, i32 0, i32 %22*/
		main_20_scevgep58 = (1'd0 | (4 * main_20_22_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep58 = getelementptr [100 x i32]* @test_data, i32 0, i32 %22*/
	if ((cur_state == LEGUP_F_main_BB__20_30)) begin
		main_20_scevgep58_reg <= main_20_scevgep58;
		if (start == 1'b0 && ^(main_20_scevgep58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep57 = getelementptr [100 x i32]* @test_data, i32 0, i32 %18*/
		main_20_scevgep57 = (1'd0 | (4 * main_resetexiti_18_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep57 = getelementptr [100 x i32]* @test_data, i32 0, i32 %18*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_scevgep57_reg <= main_20_scevgep57;
		if (start == 1'b0 && ^(main_20_scevgep57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %23 = add i32 %i1.0.i, 5*/
		main_20_23 = (main_resetexiti_i10i_reg + 32'd5);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %23 = add i32 %i1.0.i, 5*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_23_reg <= main_20_23;
		if (start == 1'b0 && ^(main_20_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep56 = getelementptr [100 x i32]* @test_data, i32 0, i32 %23*/
		main_20_scevgep56 = (1'd0 | (4 * main_20_23_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep56 = getelementptr [100 x i32]* @test_data, i32 0, i32 %23*/
	if ((cur_state == LEGUP_F_main_BB__20_30)) begin
		main_20_scevgep56_reg <= main_20_scevgep56;
		if (start == 1'b0 && ^(main_20_scevgep56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep55 = getelementptr [100 x i32]* @test_data, i32 0, i32 %17*/
		main_20_scevgep55 = (1'd0 | (4 * main_resetexiti_17_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep55 = getelementptr [100 x i32]* @test_data, i32 0, i32 %17*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_scevgep55_reg <= main_20_scevgep55;
		if (start == 1'b0 && ^(main_20_scevgep55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %24 = add i32 %i1.0.i, 7*/
		main_20_24 = (main_resetexiti_i10i_reg + 32'd7);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %24 = add i32 %i1.0.i, 7*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_24_reg <= main_20_24;
		if (start == 1'b0 && ^(main_20_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep54 = getelementptr [100 x i32]* @test_data, i32 0, i32 %24*/
		main_20_scevgep54 = (1'd0 | (4 * main_20_24_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep54 = getelementptr [100 x i32]* @test_data, i32 0, i32 %24*/
	if ((cur_state == LEGUP_F_main_BB__20_30)) begin
		main_20_scevgep54_reg <= main_20_scevgep54;
		if (start == 1'b0 && ^(main_20_scevgep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep53 = getelementptr [100 x i32]* @test_data, i32 0, i32 %16*/
		main_20_scevgep53 = (1'd0 | (4 * main_resetexiti_16_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep53 = getelementptr [100 x i32]* @test_data, i32 0, i32 %16*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_scevgep53_reg <= main_20_scevgep53;
		if (start == 1'b0 && ^(main_20_scevgep53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %25 = add i32 %i1.0.i, 9*/
		main_20_25 = (main_resetexiti_i10i_reg + 32'd9);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %25 = add i32 %i1.0.i, 9*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_25_reg <= main_20_25;
		if (start == 1'b0 && ^(main_20_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep52 = getelementptr [100 x i32]* @test_data, i32 0, i32 %25*/
		main_20_scevgep52 = (1'd0 | (4 * main_20_25_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep52 = getelementptr [100 x i32]* @test_data, i32 0, i32 %25*/
	if ((cur_state == LEGUP_F_main_BB__20_30)) begin
		main_20_scevgep52_reg <= main_20_scevgep52;
		if (start == 1'b0 && ^(main_20_scevgep52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep51 = getelementptr [100 x i32]* @test_data, i32 0, i32 %15*/
		main_20_scevgep51 = (1'd0 | (4 * main_resetexiti_15_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep51 = getelementptr [100 x i32]* @test_data, i32 0, i32 %15*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_scevgep51_reg <= main_20_scevgep51;
		if (start == 1'b0 && ^(main_20_scevgep51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %26 = add i32 %i1.0.i, 11*/
		main_20_26 = (main_resetexiti_i10i_reg + 32'd11);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %26 = add i32 %i1.0.i, 11*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_26_reg <= main_20_26;
		if (start == 1'b0 && ^(main_20_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep50 = getelementptr [100 x i32]* @test_data, i32 0, i32 %26*/
		main_20_scevgep50 = (1'd0 | (4 * main_20_26_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep50 = getelementptr [100 x i32]* @test_data, i32 0, i32 %26*/
	if ((cur_state == LEGUP_F_main_BB__20_30)) begin
		main_20_scevgep50_reg <= main_20_scevgep50;
		if (start == 1'b0 && ^(main_20_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep49 = getelementptr [100 x i32]* @test_data, i32 0, i32 %14*/
		main_20_scevgep49 = (1'd0 | (4 * main_resetexiti_14_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep49 = getelementptr [100 x i32]* @test_data, i32 0, i32 %14*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_scevgep49_reg <= main_20_scevgep49;
		if (start == 1'b0 && ^(main_20_scevgep49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %27 = add i32 %i1.0.i, 13*/
		main_20_27 = (main_resetexiti_i10i_reg + 32'd13);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %27 = add i32 %i1.0.i, 13*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_27_reg <= main_20_27;
		if (start == 1'b0 && ^(main_20_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep48 = getelementptr [100 x i32]* @test_data, i32 0, i32 %27*/
		main_20_scevgep48 = (1'd0 | (4 * main_20_27_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %scevgep48 = getelementptr [100 x i32]* @test_data, i32 0, i32 %27*/
	if ((cur_state == LEGUP_F_main_BB__20_30)) begin
		main_20_scevgep48_reg <= main_20_scevgep48;
		if (start == 1'b0 && ^(main_20_scevgep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_scevgep48_reg"); $finish; end
	end
end
always @(*) begin
	main_20_28 = main_altfp_sitofp_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %28 = sitofp i32 %i1.0.i to double*/
	if ((cur_state == LEGUP_F_main_BB__20_36)) begin
		main_20_28_reg <= main_20_28;
		if (start == 1'b0 && ^(main_20_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_28_reg"); $finish; end
	end
	/* main: %20*/
	/*   %28 = sitofp i32 %i1.0.i to double*/
	if ((cur_state == LEGUP_F_main_BB__20_36)) begin
		main_20_28_reg <= main_20_28;
		if (start == 1'b0 && ^(main_20_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_28_reg"); $finish; end
	end
end
always @(*) begin
	main_20_29 = main_altfp_multiply_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %29 = fmul double %28, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_47)) begin
		main_20_29_reg <= main_20_29;
		if (start == 1'b0 && ^(main_20_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_29_reg"); $finish; end
	end
	/* main: %20*/
	/*   %29 = fmul double %28, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_47)) begin
		main_20_29_reg <= main_20_29;
		if (start == 1'b0 && ^(main_20_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_29_reg"); $finish; end
	end
end
always @(*) begin
	main_20_30 = main_altfp_fptosi_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %30 = fptosi double %29 to i32*/
	if ((cur_state == LEGUP_F_main_BB__20_53)) begin
		main_20_30_reg <= main_20_30;
		if (start == 1'b0 && ^(main_20_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_30_reg"); $finish; end
	end
	/* main: %20*/
	/*   %30 = fptosi double %29 to i32*/
	if ((cur_state == LEGUP_F_main_BB__20_53)) begin
		main_20_30_reg <= main_20_30;
		if (start == 1'b0 && ^(main_20_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_30_reg"); $finish; end
	end
	/* main: %20*/
	/*   %37 = fptosi double %36 to i32*/
	if ((cur_state == LEGUP_F_main_BB__20_54)) begin
		main_20_30_reg <= main_20_37;
		if (start == 1'b0 && ^(main_20_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_30_reg"); $finish; end
	end
	/* main: %20*/
	/*   %44 = fptosi double %43 to i32*/
	if ((cur_state == LEGUP_F_main_BB__20_56)) begin
		main_20_30_reg <= main_20_44;
		if (start == 1'b0 && ^(main_20_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_30_reg"); $finish; end
	end
	/* main: %20*/
	/*   %51 = fptosi double %50 to i32*/
	if ((cur_state == LEGUP_F_main_BB__20_57)) begin
		main_20_30_reg <= main_20_51;
		if (start == 1'b0 && ^(main_20_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_30_reg"); $finish; end
	end
	/* main: %20*/
	/*   %58 = fptosi double %57 to i32*/
	if ((cur_state == LEGUP_F_main_BB__20_59)) begin
		main_20_30_reg <= main_20_58;
		if (start == 1'b0 && ^(main_20_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_30_reg"); $finish; end
	end
	/* main: %20*/
	/*   %65 = fptosi double %64 to i32*/
	if ((cur_state == LEGUP_F_main_BB__20_60)) begin
		main_20_30_reg <= main_20_65;
		if (start == 1'b0 && ^(main_20_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_30_reg"); $finish; end
	end
	/* main: %20*/
	/*   %72 = fptosi double %71 to i32*/
	if ((cur_state == LEGUP_F_main_BB__20_62)) begin
		main_20_30_reg <= main_20_72;
		if (start == 1'b0 && ^(main_20_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %31 = load i32* %scevgep61, align 4*/
		main_20_31 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %31 = load i32* %scevgep61, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_30)) begin
		main_20_31_reg <= main_20_31;
		if (start == 1'b0 && ^(main_20_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %32 = load i32* %scevgep60, align 4*/
		main_20_32 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %32 = load i32* %scevgep60, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_30)) begin
		main_20_32_reg <= main_20_32;
		if (start == 1'b0 && ^(main_20_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
		main_20_33 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		main_20_33_reg <= main_20_33;
		if (start == 1'b0 && ^(main_20_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %34 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %30*/
		main_20_34 = (1'd0 | (4 * main_20_30));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %34 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__20_53)) begin
		main_20_34_reg <= main_20_34;
		if (start == 1'b0 && ^(main_20_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_34_reg"); $finish; end
	end
end
always @(*) begin
	main_20_35 = main_altfp_sitofp_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %35 = sitofp i32 %19 to double*/
	if ((cur_state == LEGUP_F_main_BB__20_37)) begin
		main_20_35_reg <= main_20_35;
		if (start == 1'b0 && ^(main_20_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_35_reg"); $finish; end
	end
	/* main: %20*/
	/*   %35 = sitofp i32 %19 to double*/
	if ((cur_state == LEGUP_F_main_BB__20_37)) begin
		main_20_35_reg <= main_20_35;
		if (start == 1'b0 && ^(main_20_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_35_reg"); $finish; end
	end
end
always @(*) begin
	main_20_36 = main_altfp_multiply_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %36 = fmul double %35, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_48)) begin
		main_20_36_reg <= main_20_36;
		if (start == 1'b0 && ^(main_20_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_36_reg"); $finish; end
	end
	/* main: %20*/
	/*   %36 = fmul double %35, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_48)) begin
		main_20_36_reg <= main_20_36;
		if (start == 1'b0 && ^(main_20_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_36_reg"); $finish; end
	end
end
always @(*) begin
	main_20_37 = main_altfp_fptosi_64_0;
end
always @(*) begin
/* main: %20*/
/*   %37 = fptosi double %36 to i32*/
	main_20_37_reg = main_20_30_reg;
end
always @(*) begin
	/* main: %20*/
	/*   %38 = load i32* %scevgep59, align 4*/
		main_20_38 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %38 = load i32* %scevgep59, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_33)) begin
		main_20_38_reg <= main_20_38;
		if (start == 1'b0 && ^(main_20_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %39 = load i32* %scevgep58, align 4*/
		main_20_39 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %39 = load i32* %scevgep58, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_33)) begin
		main_20_39_reg <= main_20_39;
		if (start == 1'b0 && ^(main_20_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
		main_20_40 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		main_20_40_reg <= main_20_40;
		if (start == 1'b0 && ^(main_20_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %41 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %37*/
		main_20_41 = (1'd0 | (4 * main_20_37));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %41 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %37*/
	if ((cur_state == LEGUP_F_main_BB__20_54)) begin
		main_20_41_reg <= main_20_41;
		if (start == 1'b0 && ^(main_20_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_41_reg"); $finish; end
	end
end
always @(*) begin
	main_20_42 = main_altfp_sitofp_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %42 = sitofp i32 %18 to double*/
	if ((cur_state == LEGUP_F_main_BB__20_38)) begin
		main_20_42_reg <= main_20_42;
		if (start == 1'b0 && ^(main_20_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_42_reg"); $finish; end
	end
	/* main: %20*/
	/*   %42 = sitofp i32 %18 to double*/
	if ((cur_state == LEGUP_F_main_BB__20_38)) begin
		main_20_42_reg <= main_20_42;
		if (start == 1'b0 && ^(main_20_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_42_reg"); $finish; end
	end
end
always @(*) begin
	main_20_43 = main_altfp_multiply_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %43 = fmul double %42, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_49)) begin
		main_20_43_reg <= main_20_43;
		if (start == 1'b0 && ^(main_20_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_43_reg"); $finish; end
	end
	/* main: %20*/
	/*   %43 = fmul double %42, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_49)) begin
		main_20_43_reg <= main_20_43;
		if (start == 1'b0 && ^(main_20_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_43_reg"); $finish; end
	end
end
always @(*) begin
	main_20_44 = main_altfp_fptosi_64_0;
end
always @(*) begin
/* main: %20*/
/*   %44 = fptosi double %43 to i32*/
	main_20_44_reg = main_20_30_reg;
end
always @(*) begin
	/* main: %20*/
	/*   %45 = load i32* %scevgep57, align 4*/
		main_20_45 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %45 = load i32* %scevgep57, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_57)) begin
		main_20_45_reg <= main_20_45;
		if (start == 1'b0 && ^(main_20_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %46 = load i32* %scevgep56, align 4*/
		main_20_46 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %46 = load i32* %scevgep56, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_57)) begin
		main_20_46_reg <= main_20_46;
		if (start == 1'b0 && ^(main_20_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
		main_20_47 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		main_20_47_reg <= main_20_47;
		if (start == 1'b0 && ^(main_20_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %48 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %44*/
		main_20_48 = (1'd0 | (4 * main_20_44));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %48 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %44*/
	if ((cur_state == LEGUP_F_main_BB__20_56)) begin
		main_20_48_reg <= main_20_48;
		if (start == 1'b0 && ^(main_20_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_48_reg"); $finish; end
	end
end
always @(*) begin
	main_20_49 = main_altfp_sitofp_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %49 = sitofp i32 %17 to double*/
	if ((cur_state == LEGUP_F_main_BB__20_39)) begin
		main_20_49_reg <= main_20_49;
		if (start == 1'b0 && ^(main_20_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_49_reg"); $finish; end
	end
	/* main: %20*/
	/*   %49 = sitofp i32 %17 to double*/
	if ((cur_state == LEGUP_F_main_BB__20_39)) begin
		main_20_49_reg <= main_20_49;
		if (start == 1'b0 && ^(main_20_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_49_reg"); $finish; end
	end
end
always @(*) begin
	main_20_50 = main_altfp_multiply_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %50 = fmul double %49, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_50)) begin
		main_20_50_reg <= main_20_50;
		if (start == 1'b0 && ^(main_20_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_50_reg"); $finish; end
	end
	/* main: %20*/
	/*   %50 = fmul double %49, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_50)) begin
		main_20_50_reg <= main_20_50;
		if (start == 1'b0 && ^(main_20_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_50_reg"); $finish; end
	end
end
always @(*) begin
	main_20_51 = main_altfp_fptosi_64_0;
end
always @(*) begin
/* main: %20*/
/*   %51 = fptosi double %50 to i32*/
	main_20_51_reg = main_20_30_reg;
end
always @(*) begin
	/* main: %20*/
	/*   %52 = load i32* %scevgep55, align 4*/
		main_20_52 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %52 = load i32* %scevgep55, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_60)) begin
		main_20_52_reg <= main_20_52;
		if (start == 1'b0 && ^(main_20_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %53 = load i32* %scevgep54, align 4*/
		main_20_53 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %53 = load i32* %scevgep54, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_60)) begin
		main_20_53_reg <= main_20_53;
		if (start == 1'b0 && ^(main_20_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
		main_20_54 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		main_20_54_reg <= main_20_54;
		if (start == 1'b0 && ^(main_20_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %55 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %51*/
		main_20_55 = (1'd0 | (4 * main_20_51));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %55 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %51*/
	if ((cur_state == LEGUP_F_main_BB__20_57)) begin
		main_20_55_reg <= main_20_55;
		if (start == 1'b0 && ^(main_20_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_55_reg"); $finish; end
	end
end
always @(*) begin
	main_20_56 = main_altfp_sitofp_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %56 = sitofp i32 %16 to double*/
	if ((cur_state == LEGUP_F_main_BB__20_40)) begin
		main_20_56_reg <= main_20_56;
		if (start == 1'b0 && ^(main_20_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_56_reg"); $finish; end
	end
	/* main: %20*/
	/*   %56 = sitofp i32 %16 to double*/
	if ((cur_state == LEGUP_F_main_BB__20_40)) begin
		main_20_56_reg <= main_20_56;
		if (start == 1'b0 && ^(main_20_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_56_reg"); $finish; end
	end
end
always @(*) begin
	main_20_57 = main_altfp_multiply_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %57 = fmul double %56, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_51)) begin
		main_20_57_reg <= main_20_57;
		if (start == 1'b0 && ^(main_20_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_57_reg"); $finish; end
	end
	/* main: %20*/
	/*   %57 = fmul double %56, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_51)) begin
		main_20_57_reg <= main_20_57;
		if (start == 1'b0 && ^(main_20_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_57_reg"); $finish; end
	end
end
always @(*) begin
	main_20_58 = main_altfp_fptosi_64_0;
end
always @(*) begin
/* main: %20*/
/*   %58 = fptosi double %57 to i32*/
	main_20_58_reg = main_20_30_reg;
end
always @(*) begin
	/* main: %20*/
	/*   %59 = load i32* %scevgep53, align 4*/
		main_20_59 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %59 = load i32* %scevgep53, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_63)) begin
		main_20_59_reg <= main_20_59;
		if (start == 1'b0 && ^(main_20_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %60 = load i32* %scevgep52, align 4*/
		main_20_60 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %60 = load i32* %scevgep52, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_63)) begin
		main_20_60_reg <= main_20_60;
		if (start == 1'b0 && ^(main_20_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
		main_20_61 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		main_20_61_reg <= main_20_61;
		if (start == 1'b0 && ^(main_20_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %62 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %58*/
		main_20_62 = (1'd0 | (4 * main_20_58));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %62 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %58*/
	if ((cur_state == LEGUP_F_main_BB__20_59)) begin
		main_20_62_reg <= main_20_62;
		if (start == 1'b0 && ^(main_20_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_62_reg"); $finish; end
	end
end
always @(*) begin
	main_20_63 = main_altfp_sitofp_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %63 = sitofp i32 %15 to double*/
	if ((cur_state == LEGUP_F_main_BB__20_41)) begin
		main_20_63_reg <= main_20_63;
		if (start == 1'b0 && ^(main_20_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_63_reg"); $finish; end
	end
	/* main: %20*/
	/*   %63 = sitofp i32 %15 to double*/
	if ((cur_state == LEGUP_F_main_BB__20_41)) begin
		main_20_63_reg <= main_20_63;
		if (start == 1'b0 && ^(main_20_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_63_reg"); $finish; end
	end
end
always @(*) begin
	main_20_64 = main_altfp_multiply_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %64 = fmul double %63, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_52)) begin
		main_20_64_reg <= main_20_64;
		if (start == 1'b0 && ^(main_20_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_64_reg"); $finish; end
	end
	/* main: %20*/
	/*   %64 = fmul double %63, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_52)) begin
		main_20_64_reg <= main_20_64;
		if (start == 1'b0 && ^(main_20_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_64_reg"); $finish; end
	end
end
always @(*) begin
	main_20_65 = main_altfp_fptosi_64_0;
end
always @(*) begin
/* main: %20*/
/*   %65 = fptosi double %64 to i32*/
	main_20_65_reg = main_20_30_reg;
end
always @(*) begin
	/* main: %20*/
	/*   %66 = load i32* %scevgep51, align 4*/
		main_20_66 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %66 = load i32* %scevgep51, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_66)) begin
		main_20_66_reg <= main_20_66;
		if (start == 1'b0 && ^(main_20_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %67 = load i32* %scevgep50, align 4*/
		main_20_67 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %67 = load i32* %scevgep50, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_66)) begin
		main_20_67_reg <= main_20_67;
		if (start == 1'b0 && ^(main_20_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
		main_20_68 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		main_20_68_reg <= main_20_68;
		if (start == 1'b0 && ^(main_20_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %69 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %65*/
		main_20_69 = (1'd0 | (4 * main_20_65));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %69 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %65*/
	if ((cur_state == LEGUP_F_main_BB__20_60)) begin
		main_20_69_reg <= main_20_69;
		if (start == 1'b0 && ^(main_20_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_69_reg"); $finish; end
	end
end
always @(*) begin
	main_20_70 = main_altfp_sitofp_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %70 = sitofp i32 %14 to double*/
	if ((cur_state == LEGUP_F_main_BB__20_42)) begin
		main_20_70_reg <= main_20_70;
		if (start == 1'b0 && ^(main_20_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_70_reg"); $finish; end
	end
	/* main: %20*/
	/*   %70 = sitofp i32 %14 to double*/
	if ((cur_state == LEGUP_F_main_BB__20_42)) begin
		main_20_70_reg <= main_20_70;
		if (start == 1'b0 && ^(main_20_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_70_reg"); $finish; end
	end
end
always @(*) begin
	main_20_71 = main_altfp_multiply_64_0;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %71 = fmul double %70, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_53)) begin
		main_20_71_reg <= main_20_71;
		if (start == 1'b0 && ^(main_20_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_71_reg"); $finish; end
	end
	/* main: %20*/
	/*   %71 = fmul double %70, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_53)) begin
		main_20_71_reg <= main_20_71;
		if (start == 1'b0 && ^(main_20_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_71_reg"); $finish; end
	end
end
always @(*) begin
	main_20_72 = main_altfp_fptosi_64_0;
end
always @(*) begin
/* main: %20*/
/*   %72 = fptosi double %71 to i32*/
	main_20_72_reg = main_20_30_reg;
end
always @(*) begin
	/* main: %20*/
	/*   %73 = load i32* %scevgep49, align 4*/
		main_20_73 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %73 = load i32* %scevgep49, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_69)) begin
		main_20_73_reg <= main_20_73;
		if (start == 1'b0 && ^(main_20_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %74 = load i32* %scevgep48, align 4*/
		main_20_74 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %74 = load i32* %scevgep48, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_69)) begin
		main_20_74_reg <= main_20_74;
		if (start == 1'b0 && ^(main_20_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
		main_20_75 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		main_20_75_reg <= main_20_75;
		if (start == 1'b0 && ^(main_20_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %76 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %72*/
		main_20_76 = (1'd0 | (4 * main_20_72));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %76 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %72*/
	if ((cur_state == LEGUP_F_main_BB__20_62)) begin
		main_20_76_reg <= main_20_76;
		if (start == 1'b0 && ^(main_20_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %indvar.next46 = add i32 %indvar45, 1*/
		main_20_indvarnext46 = (main_resetexiti_indvar45_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %indvar.next46 = add i32 %indvar45, 1*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_20_indvarnext46_reg <= main_20_indvarnext46;
		if (start == 1'b0 && ^(main_20_indvarnext46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_indvarnext46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader43*/
	/*   %indvar40 = phi i32 [ 0, %.preheader43.preheader ], [ %indvar.next41, %80 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader43preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader43_indvar40 = 32'd0;
	end
	/* main: %.preheader43*/
	/*   %indvar40 = phi i32 [ 0, %.preheader43.preheader ], [ %indvar.next41, %80 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__80_111) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader43_indvar40 = main_80_indvarnext41_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader43*/
	/*   %indvar40 = phi i32 [ 0, %.preheader43.preheader ], [ %indvar.next41, %80 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader43preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader43_indvar40_reg <= main_preheader43_indvar40;
		if (start == 1'b0 && ^(main_preheader43_indvar40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader43_indvar40_reg"); $finish; end
	end
	/* main: %.preheader43*/
	/*   %indvar40 = phi i32 [ 0, %.preheader43.preheader ], [ %indvar.next41, %80 ]*/
	if (((cur_state == LEGUP_F_main_BB__80_111) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader43_indvar40_reg <= main_preheader43_indvar40;
		if (start == 1'b0 && ^(main_preheader43_indvar40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader43_indvar40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader43*/
	/*   %77 = shl i32 %indvar40, 1*/
		main_preheader43_77 = (main_preheader43_indvar40_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader43*/
	/*   %77 = shl i32 %indvar40, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader43_73)) begin
		main_preheader43_77_reg <= main_preheader43_77;
		if (start == 1'b0 && ^(main_preheader43_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader43_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader43*/
	/*   %i1.1.i = add i32 %77, 98*/
		main_preheader43_i11i = (main_preheader43_77 + 32'd98);
end
always @(posedge clk) begin
	/* main: %.preheader43*/
	/*   %i1.1.i = add i32 %77, 98*/
	if ((cur_state == LEGUP_F_main_BB_preheader43_73)) begin
		main_preheader43_i11i_reg <= main_preheader43_i11i;
		if (start == 1'b0 && ^(main_preheader43_i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader43_i11i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader43*/
	/*   %exitcond42 = icmp eq i32 %indvar40, 1*/
		main_preheader43_exitcond42 = (main_preheader43_indvar40_reg == 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader43*/
	/*   %exitcond42 = icmp eq i32 %indvar40, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader43_73)) begin
		main_preheader43_exitcond42_reg <= main_preheader43_exitcond42;
		if (start == 1'b0 && ^(main_preheader43_exitcond42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader43_exitcond42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader42*/
	/*   %78 = load i32* @il, align 4*/
		main_preheader42_78 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader42*/
	/*   %78 = load i32* @il, align 4*/
	if ((cur_state == LEGUP_F_main_BB_preheader42_76)) begin
		main_preheader42_78_reg <= main_preheader42_78;
		if (start == 1'b0 && ^(main_preheader42_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader42_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader42*/
	/*   %79 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %78*/
		main_preheader42_79 = (1'd0 | (4 * main_preheader42_78));
end
always @(posedge clk) begin
	/* main: %.preheader42*/
	/*   %79 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %78*/
	if ((cur_state == LEGUP_F_main_BB_preheader42_76)) begin
		main_preheader42_79_reg <= main_preheader42_79;
		if (start == 1'b0 && ^(main_preheader42_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader42_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %scevgep44 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i1.1.i*/
		main_80_scevgep44 = (1'd0 | (4 * main_preheader43_i11i_reg));
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %scevgep44 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i1.1.i*/
	if ((cur_state == LEGUP_F_main_BB__80_77)) begin
		main_80_scevgep44_reg <= main_80_scevgep44;
		if (start == 1'b0 && ^(main_80_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_scevgep44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %81 = add i32 %77, 99*/
		main_80_81 = (main_preheader43_77_reg + 32'd99);
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %81 = add i32 %77, 99*/
	if ((cur_state == LEGUP_F_main_BB__80_77)) begin
		main_80_81_reg <= main_80_81;
		if (start == 1'b0 && ^(main_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %scevgep43 = getelementptr [100 x i32]* @test_data, i32 0, i32 %81*/
		main_80_scevgep43 = (1'd0 | (4 * main_80_81_reg));
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %scevgep43 = getelementptr [100 x i32]* @test_data, i32 0, i32 %81*/
	if ((cur_state == LEGUP_F_main_BB__80_78)) begin
		main_80_scevgep43_reg <= main_80_scevgep43;
		if (start == 1'b0 && ^(main_80_scevgep43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_scevgep43_reg"); $finish; end
	end
end
always @(*) begin
	main_80_82 = main_signed_divide_32_0;
end
always @(*) begin
/* main: %80*/
/*   %82 = sdiv i32 %i1.1.i, 2*/
	main_80_82_reg = main_89_90_reg;
end
always @(*) begin
	/* main: %80*/
	/*   %83 = load i32* %scevgep44, align 4*/
		main_80_83 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %83 = load i32* %scevgep44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__80_78)) begin
		main_80_83_reg <= main_80_83;
		if (start == 1'b0 && ^(main_80_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %84 = load i32* %scevgep43, align 4*/
		main_80_84 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %84 = load i32* %scevgep43, align 4*/
	if ((cur_state == LEGUP_F_main_BB__80_79)) begin
		main_80_84_reg <= main_80_84;
		if (start == 1'b0 && ^(main_80_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
		main_80_85 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		main_80_85_reg <= main_80_85;
		if (start == 1'b0 && ^(main_80_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %86 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %82*/
		main_80_86 = (1'd0 | (4 * main_80_82));
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %86 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %82*/
	if ((cur_state == LEGUP_F_main_BB__80_110)) begin
		main_80_86_reg <= main_80_86;
		if (start == 1'b0 && ^(main_80_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %indvar.next41 = add i32 %indvar40, 1*/
		main_80_indvarnext41 = (main_preheader43_indvar40_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %indvar.next41 = add i32 %indvar40, 1*/
	if ((cur_state == LEGUP_F_main_BB__80_77)) begin
		main_80_indvarnext41_reg <= main_80_indvarnext41;
		if (start == 1'b0 && ^(main_80_indvarnext41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_indvarnext41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %indvar35 = phi i32 [ %indvar.next36, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_indvar35 = 32'd0;
	end
	/* main: %87*/
	/*   %indvar35 = phi i32 [ %indvar.next36, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_indvar35 = main_decodeexiti_indvarnext36_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %indvar35 = phi i32 [ %indvar.next36, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_indvar35_reg <= main_87_indvar35;
		if (start == 1'b0 && ^(main_87_indvar35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_indvar35_reg"); $finish; end
	end
	/* main: %87*/
	/*   %indvar35 = phi i32 [ %indvar.next36, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_indvar35_reg <= main_87_indvar35;
		if (start == 1'b0 && ^(main_87_indvar35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_indvar35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_ph20 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_ph20 = main_87_dec_ph10_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_ph20_reg <= main_87_dec_ph20;
		if (start == 1'b0 && ^(main_87_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_ph20_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_ph20_reg <= main_87_dec_ph20;
		if (start == 1'b0 && ^(main_87_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_ph20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_ph1.0 = phi i32 [ %222, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_ph10 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_ph1.0 = phi i32 [ %222, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_ph10 = main_logschexitii_222_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_ph1.0 = phi i32 [ %222, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_ph10_reg <= main_87_dec_ph10;
		if (start == 1'b0 && ^(main_87_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_ph10_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_ph1.0 = phi i32 [ %222, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_ph10_reg <= main_87_dec_ph10;
		if (start == 1'b0 && ^(main_87_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_ph10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_nbh.0 = phi i32 [ %.1.i.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_nbh0 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_nbh.0 = phi i32 [ %.1.i.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_nbh0 = main_logschexitii_1iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_nbh.0 = phi i32 [ %.1.i.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_nbh0_reg <= main_87_dec_nbh0;
		if (start == 1'b0 && ^(main_87_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_nbh0_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_nbh.0 = phi i32 [ %.1.i.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_nbh0_reg <= main_87_dec_nbh0;
		if (start == 1'b0 && ^(main_87_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_nbh0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_deth.0 = phi i32 [ %221, %decode.exit.i ], [ 8, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_deth0 = 32'd8;
	end
	/* main: %87*/
	/*   %dec_deth.0 = phi i32 [ %221, %decode.exit.i ], [ 8, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_deth0 = main_logschexitii_221_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_deth.0 = phi i32 [ %221, %decode.exit.i ], [ 8, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_deth0_reg <= main_87_dec_deth0;
		if (start == 1'b0 && ^(main_87_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_deth0_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_deth.0 = phi i32 [ %221, %decode.exit.i ], [ 8, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_deth0_reg <= main_87_dec_deth0;
		if (start == 1'b0 && ^(main_87_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_deth0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_ah2.0 = phi i32 [ %apl2.1.i.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_ah20 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_ah2.0 = phi i32 [ %apl2.1.i.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_ah20 = main_uppol2exitii_apl21iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_ah2.0 = phi i32 [ %apl2.1.i.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_ah20_reg <= main_87_dec_ah20;
		if (start == 1'b0 && ^(main_87_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_ah20_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_ah2.0 = phi i32 [ %apl2.1.i.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_ah20_reg <= main_87_dec_ah20;
		if (start == 1'b0 && ^(main_87_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_ah20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_rh20 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_rh20 = main_87_dec_rh10_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_rh20_reg <= main_87_dec_rh20;
		if (start == 1'b0 && ^(main_87_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_rh20_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_rh20_reg <= main_87_dec_rh20;
		if (start == 1'b0 && ^(main_87_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_rh20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_ah10 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_ah10 = main_decodeexiti_apl12iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_ah10_reg <= main_87_dec_ah10;
		if (start == 1'b0 && ^(main_87_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_ah10_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_ah10_reg <= main_87_dec_ah10;
		if (start == 1'b0 && ^(main_87_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_ah10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_rh1.0 = phi i32 [ %267, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_rh10 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_rh1.0 = phi i32 [ %267, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_rh10 = main_uppol2exitii_267_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_rh1.0 = phi i32 [ %267, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_rh10_reg <= main_87_dec_rh10;
		if (start == 1'b0 && ^(main_87_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_rh10_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_rh1.0 = phi i32 [ %267, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_rh10_reg <= main_87_dec_rh10;
		if (start == 1'b0 && ^(main_87_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_rh10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_plt20 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_plt20 = main_87_dec_plt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_plt20_reg <= main_87_dec_plt20;
		if (start == 1'b0 && ^(main_87_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_plt20_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_plt20_reg <= main_87_dec_plt20;
		if (start == 1'b0 && ^(main_87_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_plt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_plt1.0 = phi i32 [ %137, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_plt10 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_plt1.0 = phi i32 [ %137, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_plt10 = main_logsclexitii_137_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_plt1.0 = phi i32 [ %137, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_plt10_reg <= main_87_dec_plt10;
		if (start == 1'b0 && ^(main_87_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_plt10_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_plt1.0 = phi i32 [ %137, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_plt10_reg <= main_87_dec_plt10;
		if (start == 1'b0 && ^(main_87_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_plt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_nbl.0 = phi i32 [ %.1.i23.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_nbl0 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_nbl.0 = phi i32 [ %.1.i23.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_nbl0 = main_logsclexitii_1i23ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_nbl.0 = phi i32 [ %.1.i23.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_nbl0_reg <= main_87_dec_nbl0;
		if (start == 1'b0 && ^(main_87_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_nbl0_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_nbl.0 = phi i32 [ %.1.i23.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_nbl0_reg <= main_87_dec_nbl0;
		if (start == 1'b0 && ^(main_87_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_nbl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_detl.0 = phi i32 [ %136, %decode.exit.i ], [ 32, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_detl0 = 32'd32;
	end
	/* main: %87*/
	/*   %dec_detl.0 = phi i32 [ %136, %decode.exit.i ], [ 32, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_detl0 = main_logsclexitii_136_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_detl.0 = phi i32 [ %136, %decode.exit.i ], [ 32, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_detl0_reg <= main_87_dec_detl0;
		if (start == 1'b0 && ^(main_87_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_detl0_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_detl.0 = phi i32 [ %136, %decode.exit.i ], [ 32, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_detl0_reg <= main_87_dec_detl0;
		if (start == 1'b0 && ^(main_87_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_detl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_al2.0 = phi i32 [ %apl2.1.i16.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_al20 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_al2.0 = phi i32 [ %apl2.1.i16.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_al20 = main_uppol2exit17ii_apl21i16ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_al2.0 = phi i32 [ %apl2.1.i16.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_al20_reg <= main_87_dec_al20;
		if (start == 1'b0 && ^(main_87_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_al20_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_al2.0 = phi i32 [ %apl2.1.i16.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_al20_reg <= main_87_dec_al20;
		if (start == 1'b0 && ^(main_87_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_al20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_rlt20 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_rlt20 = main_87_dec_rlt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_rlt20_reg <= main_87_dec_rlt20;
		if (start == 1'b0 && ^(main_87_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_rlt20_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_rlt20_reg <= main_87_dec_rlt20;
		if (start == 1'b0 && ^(main_87_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_rlt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i11.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_al10 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i11.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_al10 = main_filtezexit8ii_apl12i11ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i11.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_al10_reg <= main_87_dec_al10;
		if (start == 1'b0 && ^(main_87_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_al10_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i11.i.i, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_al10_reg <= main_87_dec_al10;
		if (start == 1'b0 && ^(main_87_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_al10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %dec_rlt1.0 = phi i32 [ %193, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_rlt10 = 32'd0;
	end
	/* main: %87*/
	/*   %dec_rlt1.0 = phi i32 [ %193, %decode.exit.i ], [ 0, %.preheader42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_87_dec_rlt10 = main_filtezexit8ii_193_reg;
	end
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %dec_rlt1.0 = phi i32 [ %193, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_rlt10_reg <= main_87_dec_rlt10;
		if (start == 1'b0 && ^(main_87_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_rlt10_reg"); $finish; end
	end
	/* main: %87*/
	/*   %dec_rlt1.0 = phi i32 [ %193, %decode.exit.i ], [ 0, %.preheader42 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_231) & (memory_controller_waitrequest == 1'd0))) begin
		main_87_dec_rlt10_reg <= main_87_dec_rlt10;
		if (start == 1'b0 && ^(main_87_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_dec_rlt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %i.0.i = shl i32 %indvar35, 1*/
		main_87_i0i = (main_87_indvar35_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %i.0.i = shl i32 %indvar35, 1*/
	if ((cur_state == LEGUP_F_main_BB__87_112)) begin
		main_87_i0i_reg <= main_87_i0i;
		if (start == 1'b0 && ^(main_87_i0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_i0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %88 = or i32 %i.0.i, 1*/
		main_87_88 = (main_87_i0i | 32'd1);
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %88 = or i32 %i.0.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__87_112)) begin
		main_87_88_reg <= main_87_88;
		if (start == 1'b0 && ^(main_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %scevgep38 = getelementptr [100 x i32]* @result, i32 0, i32 %88*/
		main_87_scevgep38 = (1'd0 | (4 * main_87_88));
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %scevgep38 = getelementptr [100 x i32]* @result, i32 0, i32 %88*/
	if ((cur_state == LEGUP_F_main_BB__87_112)) begin
		main_87_scevgep38_reg <= main_87_scevgep38;
		if (start == 1'b0 && ^(main_87_scevgep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_scevgep38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %scevgep39 = getelementptr [100 x i32]* @result, i32 0, i32 %i.0.i*/
		main_87_scevgep39 = (1'd0 | (4 * main_87_i0i));
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %scevgep39 = getelementptr [100 x i32]* @result, i32 0, i32 %i.0.i*/
	if ((cur_state == LEGUP_F_main_BB__87_112)) begin
		main_87_scevgep39_reg <= main_87_scevgep39;
		if (start == 1'b0 && ^(main_87_scevgep39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_scevgep39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %exitcond37 = icmp eq i32 %indvar35, 50*/
		main_87_exitcond37 = (main_87_indvar35_reg == 32'd50);
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %exitcond37 = icmp eq i32 %indvar35, 50*/
	if ((cur_state == LEGUP_F_main_BB__87_112)) begin
		main_87_exitcond37_reg <= main_87_exitcond37;
		if (start == 1'b0 && ^(main_87_exitcond37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_exitcond37_reg"); $finish; end
	end
end
always @(*) begin
	main_89_90 = main_signed_divide_32_0;
end
always @(posedge clk) begin
	/* main: %89*/
	/*   %90 = sdiv i32 %i.0.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__89_146)) begin
		main_89_90_reg <= main_89_90;
		if (start == 1'b0 && ^(main_89_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_90_reg"); $finish; end
	end
	/* main: %89*/
	/*   %90 = sdiv i32 %i.0.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__89_146)) begin
		main_89_90_reg <= main_89_90;
		if (start == 1'b0 && ^(main_89_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_90_reg"); $finish; end
	end
	/* main: %80*/
	/*   %82 = sdiv i32 %i1.1.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__80_110)) begin
		main_89_90_reg <= main_80_82;
		if (start == 1'b0 && ^(main_80_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %89*/
	/*   %91 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %90*/
		main_89_91 = (1'd0 | (4 * main_89_90));
end
always @(posedge clk) begin
	/* main: %89*/
	/*   %91 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %90*/
	if ((cur_state == LEGUP_F_main_BB__89_146)) begin
		main_89_91_reg <= main_89_91;
		if (start == 1'b0 && ^(main_89_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %89*/
	/*   %92 = load i32* %91, align 4*/
		main_89_92 = compressed_out_a;
end
always @(posedge clk) begin
	/* main: %89*/
	/*   %92 = load i32* %91, align 4*/
	if ((cur_state == LEGUP_F_main_BB__89_147)) begin
		main_89_92_reg <= main_89_92;
		if (start == 1'b0 && ^(main_89_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %89*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4*/
		main_89_93 = dec_del_bpl_out_a;
end
always @(posedge clk) begin
	/* main: %89*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__89_115)) begin
		main_89_93_reg <= main_89_93;
		if (start == 1'b0 && ^(main_89_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %89*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
		main_89_94 = dec_del_dltx_out_a;
end
always @(posedge clk) begin
	/* main: %89*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__89_115)) begin
		main_89_94_reg <= main_89_94;
		if (start == 1'b0 && ^(main_89_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_94_reg"); $finish; end
	end
end
always @(*) begin
	main_89_95 = main_89_95_stage0_reg;
end
always @(posedge clk) begin
	/* main: %89*/
	/*   %95 = mul nsw i32 %93, %94*/
	if ((cur_state == LEGUP_F_main_BB__89_116)) begin
		main_89_95_reg <= main_89_95;
		if (start == 1'b0 && ^(main_89_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_95_reg"); $finish; end
	end
	/* main: %89*/
	/*   %95 = mul nsw i32 %93, %94*/
	if ((cur_state == LEGUP_F_main_BB__89_116)) begin
		main_89_95_reg <= main_89_95;
		if (start == 1'b0 && ^(main_89_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %96*/
	/*   %indvar = phi i32 [ %indvar.next, %97 ], [ 0, %89 ]*/
	if (((cur_state == LEGUP_F_main_BB__89_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_96_indvar = 32'd0;
	end
	/* main: %96*/
	/*   %indvar = phi i32 [ %indvar.next, %97 ], [ 0, %89 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__97_151) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_96_indvar = main_97_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %96*/
	/*   %indvar = phi i32 [ %indvar.next, %97 ], [ 0, %89 ]*/
	if (((cur_state == LEGUP_F_main_BB__89_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_96_indvar_reg <= main_96_indvar;
		if (start == 1'b0 && ^(main_96_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_96_indvar_reg"); $finish; end
	end
	/* main: %96*/
	/*   %indvar = phi i32 [ %indvar.next, %97 ], [ 0, %89 ]*/
	if (((cur_state == LEGUP_F_main_BB__97_151) & (memory_controller_waitrequest == 1'd0))) begin
		main_96_indvar_reg <= main_96_indvar;
		if (start == 1'b0 && ^(main_96_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_96_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %96*/
	/*   %zl.0.i.i.i = phi i32 [ %101, %97 ], [ %95, %89 ]*/
	if (((cur_state == LEGUP_F_main_BB__89_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_96_zl0iii = main_89_95_reg;
	end
	/* main: %96*/
	/*   %zl.0.i.i.i = phi i32 [ %101, %97 ], [ %95, %89 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__97_151) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_96_zl0iii = main_97_101;
	end
end
always @(posedge clk) begin
	/* main: %96*/
	/*   %zl.0.i.i.i = phi i32 [ %101, %97 ], [ %95, %89 ]*/
	if (((cur_state == LEGUP_F_main_BB__89_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_96_zl0iii_reg <= main_96_zl0iii;
		if (start == 1'b0 && ^(main_96_zl0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_96_zl0iii_reg"); $finish; end
	end
	/* main: %96*/
	/*   %zl.0.i.i.i = phi i32 [ %101, %97 ], [ %95, %89 ]*/
	if (((cur_state == LEGUP_F_main_BB__97_151) & (memory_controller_waitrequest == 1'd0))) begin
		main_96_zl0iii_reg <= main_96_zl0iii;
		if (start == 1'b0 && ^(main_96_zl0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_96_zl0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %96*/
	/*   %i.0.i.i.i = add i32 %indvar, 1*/
		main_96_i0iii = (main_96_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %96*/
	/*   %i.0.i.i.i = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__96_148)) begin
		main_96_i0iii_reg <= main_96_i0iii;
		if (start == 1'b0 && ^(main_96_i0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_96_i0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %96*/
	/*   %exitcond7 = icmp eq i32 %indvar, 5*/
		main_96_exitcond7 = (main_96_indvar_reg == 32'd5);
end
always @(posedge clk) begin
	/* main: %96*/
	/*   %exitcond7 = icmp eq i32 %indvar, 5*/
	if ((cur_state == LEGUP_F_main_BB__96_148)) begin
		main_96_exitcond7_reg <= main_96_exitcond7;
		if (start == 1'b0 && ^(main_96_exitcond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_96_exitcond7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %97*/
	/*   %.0.i.i.i = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %i.0.i.i.i*/
		main_97_0iii = (1'd0 | (4 * main_96_i0iii_reg));
end
always @(posedge clk) begin
	/* main: %97*/
	/*   %.0.i.i.i = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %i.0.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__97_149)) begin
		main_97_0iii_reg <= main_97_0iii;
		if (start == 1'b0 && ^(main_97_0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_97_0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %97*/
	/*   %.01.i.i.i = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %i.0.i.i.i*/
		main_97_01iii = (1'd0 | (4 * main_96_i0iii_reg));
end
always @(posedge clk) begin
	/* main: %97*/
	/*   %.01.i.i.i = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %i.0.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__97_149)) begin
		main_97_01iii_reg <= main_97_01iii;
		if (start == 1'b0 && ^(main_97_01iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_97_01iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %97*/
	/*   %98 = load i32* %.0.i.i.i, align 4*/
		main_97_98 = dec_del_bpl_out_a;
end
always @(posedge clk) begin
	/* main: %97*/
	/*   %98 = load i32* %.0.i.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__97_150)) begin
		main_97_98_reg <= main_97_98;
		if (start == 1'b0 && ^(main_97_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_97_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %97*/
	/*   %99 = load i32* %.01.i.i.i, align 4*/
		main_97_99 = dec_del_dltx_out_a;
end
always @(posedge clk) begin
	/* main: %97*/
	/*   %99 = load i32* %.01.i.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__97_150)) begin
		main_97_99_reg <= main_97_99;
		if (start == 1'b0 && ^(main_97_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_97_99_reg"); $finish; end
	end
end
always @(*) begin
	main_97_100 = main_97_100_stage0_reg;
end
always @(posedge clk) begin
	/* main: %97*/
	/*   %100 = mul nsw i32 %98, %99*/
	if ((cur_state == LEGUP_F_main_BB__97_151)) begin
		main_97_100_reg <= main_97_100;
		if (start == 1'b0 && ^(main_97_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_97_100_reg"); $finish; end
	end
	/* main: %97*/
	/*   %100 = mul nsw i32 %98, %99*/
	if ((cur_state == LEGUP_F_main_BB__97_151)) begin
		main_97_100_reg <= main_97_100;
		if (start == 1'b0 && ^(main_97_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_97_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %97*/
	/*   %101 = add nsw i32 %zl.0.i.i.i, %100*/
		main_97_101 = (main_96_zl0iii_reg + main_97_100);
end
always @(posedge clk) begin
	/* main: %97*/
	/*   %101 = add nsw i32 %zl.0.i.i.i, %100*/
	if ((cur_state == LEGUP_F_main_BB__97_151)) begin
		main_97_101_reg <= main_97_101;
		if (start == 1'b0 && ^(main_97_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_97_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %97*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_97_indvarnext = (main_96_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %97*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__97_149)) begin
		main_97_indvarnext_reg <= main_97_indvarnext;
		if (start == 1'b0 && ^(main_97_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_97_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %102 = ashr i32 %92, 6*/
		main_filtezexitii_102 = ($signed(main_89_92_reg) >>> 32'd6);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %102 = ashr i32 %92, 6*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		main_filtezexitii_102_reg <= main_filtezexitii_102;
		if (start == 1'b0 && ^(main_filtezexitii_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %103 = ashr i32 %zl.0.i.i.i, 14*/
		main_filtezexitii_103 = ($signed(main_96_zl0iii_reg) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %103 = ashr i32 %zl.0.i.i.i, 14*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		main_filtezexitii_103_reg <= main_filtezexitii_103;
		if (start == 1'b0 && ^(main_filtezexitii_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %104 = shl nsw i32 %dec_rlt1.0, 1*/
		main_filtezexitii_104 = (main_87_dec_rlt10_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %104 = shl nsw i32 %dec_rlt1.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		main_filtezexitii_104_reg <= main_filtezexitii_104;
		if (start == 1'b0 && ^(main_filtezexitii_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_104_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexitii_105 = main_filtezexitii_105_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %105 = mul nsw i32 %dec_al1.0, %104*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_153)) begin
		main_filtezexitii_105_reg <= main_filtezexitii_105;
		if (start == 1'b0 && ^(main_filtezexitii_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_105_reg"); $finish; end
	end
	/* main: %filtez.exit.i.i*/
	/*   %105 = mul nsw i32 %dec_al1.0, %104*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_153)) begin
		main_filtezexitii_105_reg <= main_filtezexitii_105;
		if (start == 1'b0 && ^(main_filtezexitii_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %106 = shl nsw i32 %dec_rlt2.0, 1*/
		main_filtezexitii_106 = (main_87_dec_rlt20_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %106 = shl nsw i32 %dec_rlt2.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		main_filtezexitii_106_reg <= main_filtezexitii_106;
		if (start == 1'b0 && ^(main_filtezexitii_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_106_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexitii_107 = main_filtezexitii_107_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %107 = mul nsw i32 %dec_al2.0, %106*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_153)) begin
		main_filtezexitii_107_reg <= main_filtezexitii_107;
		if (start == 1'b0 && ^(main_filtezexitii_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_107_reg"); $finish; end
	end
	/* main: %filtez.exit.i.i*/
	/*   %107 = mul nsw i32 %dec_al2.0, %106*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_153)) begin
		main_filtezexitii_107_reg <= main_filtezexitii_107;
		if (start == 1'b0 && ^(main_filtezexitii_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %108 = add nsw i32 %105, %107*/
		main_filtezexitii_108 = (main_filtezexitii_105 + main_filtezexitii_107);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %108 = add nsw i32 %105, %107*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_153)) begin
		main_filtezexitii_108_reg <= main_filtezexitii_108;
		if (start == 1'b0 && ^(main_filtezexitii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %109 = ashr i32 %108, 15*/
		main_filtezexitii_109 = ($signed(main_filtezexitii_108) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %109 = ashr i32 %108, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_153)) begin
		main_filtezexitii_109_reg <= main_filtezexitii_109;
		if (start == 1'b0 && ^(main_filtezexitii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %110 = add nsw i32 %109, %103*/
		main_filtezexitii_110 = (main_filtezexitii_109 + main_filtezexitii_103_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %110 = add nsw i32 %109, %103*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_153)) begin
		main_filtezexitii_110_reg <= main_filtezexitii_110;
		if (start == 1'b0 && ^(main_filtezexitii_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %111 = lshr i32 %92, 2*/
		main_filtezexitii_111 = (main_89_92_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %111 = lshr i32 %92, 2*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		main_filtezexitii_111_reg <= main_filtezexitii_111;
		if (start == 1'b0 && ^(main_filtezexitii_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %112 = and i32 %111, 15*/
		main_filtezexitii_112 = (main_filtezexitii_111 & 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %112 = and i32 %111, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		main_filtezexitii_112_reg <= main_filtezexitii_112;
		if (start == 1'b0 && ^(main_filtezexitii_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %113 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %112*/
		main_filtezexitii_113 = (`TAG_g_qq4_code4_table_a | (4 * main_filtezexitii_112));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %113 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %112*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		main_filtezexitii_113_reg <= main_filtezexitii_113;
		if (start == 1'b0 && ^(main_filtezexitii_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %114 = load i32* %113, align 4*/
		main_filtezexitii_114 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %114 = load i32* %113, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_154)) begin
		main_filtezexitii_114_reg <= main_filtezexitii_114;
		if (start == 1'b0 && ^(main_filtezexitii_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_114_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexitii_115 = main_filtezexitii_115_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %115 = mul nsw i32 %dec_detl.0, %114*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_155)) begin
		main_filtezexitii_115_reg <= main_filtezexitii_115;
		if (start == 1'b0 && ^(main_filtezexitii_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_115_reg"); $finish; end
	end
	/* main: %filtez.exit.i.i*/
	/*   %115 = mul nsw i32 %dec_detl.0, %114*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_155)) begin
		main_filtezexitii_115_reg <= main_filtezexitii_115;
		if (start == 1'b0 && ^(main_filtezexitii_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %116 = ashr i32 %115, 15*/
		main_filtezexitii_116 = ($signed(main_filtezexitii_115) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %116 = ashr i32 %115, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_155)) begin
		main_filtezexitii_116_reg <= main_filtezexitii_116;
		if (start == 1'b0 && ^(main_filtezexitii_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %117 = load i32* %79, align 4*/
		main_filtezexitii_117 = qq6_code6_table_out_a;
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %117 = load i32* %79, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_153)) begin
		main_filtezexitii_117_reg <= main_filtezexitii_117;
		if (start == 1'b0 && ^(main_filtezexitii_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_117_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexitii_118 = main_filtezexitii_118_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %118 = mul nsw i32 %dec_detl.0, %117*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_154)) begin
		main_filtezexitii_118_reg <= main_filtezexitii_118;
		if (start == 1'b0 && ^(main_filtezexitii_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_118_reg"); $finish; end
	end
	/* main: %filtez.exit.i.i*/
	/*   %118 = mul nsw i32 %dec_detl.0, %117*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_154)) begin
		main_filtezexitii_118_reg <= main_filtezexitii_118;
		if (start == 1'b0 && ^(main_filtezexitii_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %119 = ashr i32 %118, 15*/
		main_filtezexitii_119 = ($signed(main_filtezexitii_118) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %119 = ashr i32 %118, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_154)) begin
		main_filtezexitii_119_reg <= main_filtezexitii_119;
		if (start == 1'b0 && ^(main_filtezexitii_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %120 = add nsw i32 %119, %110*/
		main_filtezexitii_120 = (main_filtezexitii_119 + main_filtezexitii_110_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %120 = add nsw i32 %119, %110*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_154)) begin
		main_filtezexitii_120_reg <= main_filtezexitii_120;
		if (start == 1'b0 && ^(main_filtezexitii_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_120_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexitii_121 = main_filtezexitii_121_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %121 = mul nsw i32 %dec_nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_153)) begin
		main_filtezexitii_121_reg <= main_filtezexitii_121;
		if (start == 1'b0 && ^(main_filtezexitii_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_121_reg"); $finish; end
	end
	/* main: %filtez.exit.i.i*/
	/*   %121 = mul nsw i32 %dec_nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_153)) begin
		main_filtezexitii_121_reg <= main_filtezexitii_121;
		if (start == 1'b0 && ^(main_filtezexitii_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %122 = ashr i32 %121, 7*/
		main_filtezexitii_122 = ($signed(main_filtezexitii_121) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %122 = ashr i32 %121, 7*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_153)) begin
		main_filtezexitii_122_reg <= main_filtezexitii_122;
		if (start == 1'b0 && ^(main_filtezexitii_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %123 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %112*/
		main_filtezexitii_123 = (`TAG_g_wl_code_table_a | (4 * main_filtezexitii_112));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %123 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %112*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		main_filtezexitii_123_reg <= main_filtezexitii_123;
		if (start == 1'b0 && ^(main_filtezexitii_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %124 = load i32* %123, align 4*/
		main_filtezexitii_124 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %124 = load i32* %123, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_154)) begin
		main_filtezexitii_124_reg <= main_filtezexitii_124;
		if (start == 1'b0 && ^(main_filtezexitii_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %125 = add nsw i32 %122, %124*/
		main_filtezexitii_125 = (main_filtezexitii_122_reg + main_filtezexitii_124);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %125 = add nsw i32 %122, %124*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_154)) begin
		main_filtezexitii_125_reg <= main_filtezexitii_125;
		if (start == 1'b0 && ^(main_filtezexitii_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %126 = icmp slt i32 %125, 0*/
		main_filtezexitii_126 = ($signed(main_filtezexitii_125) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %126 = icmp slt i32 %125, 0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_154)) begin
		main_filtezexitii_126_reg <= main_filtezexitii_126;
		if (start == 1'b0 && ^(main_filtezexitii_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %127*/
	/*   %128 = icmp sgt i32 %125, 18432*/
		main_127_128 = ($signed(main_filtezexitii_125_reg) > $signed(32'd18432));
end
always @(posedge clk) begin
	/* main: %127*/
	/*   %128 = icmp sgt i32 %125, 18432*/
	if ((cur_state == LEGUP_F_main_BB__127_156)) begin
		main_127_128_reg <= main_127_128;
		if (start == 1'b0 && ^(main_127_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %127*/
	/*   %. = select i1 %128, i32 18432, i32 %125*/
		main_127_ = (main_127_128 ? 32'd18432 : main_filtezexitii_125_reg);
end
always @(posedge clk) begin
	/* main: %127*/
	/*   %. = select i1 %128, i32 18432, i32 %125*/
	if ((cur_state == LEGUP_F_main_BB__127_156)) begin
		main_127__reg <= main_127_;
		if (start == 1'b0 && ^(main_127_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127__reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %.1.i23.i.i = phi i32 [ 0, %filtez.exit.i.i ], [ %., %127 ]*/
	if ((((cur_state == LEGUP_F_main_BB_filtezexitii_155) & (memory_controller_waitrequest == 1'd0)) & (main_filtezexitii_126_reg == 1'd1))) begin
		main_logsclexitii_1i23ii = 32'd0;
	end
	/* main: %logscl.exit.i.i*/
	/*   %.1.i23.i.i = phi i32 [ 0, %filtez.exit.i.i ], [ %., %127 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__127_156) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_logsclexitii_1i23ii = main_127_;
	end
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %.1.i23.i.i = phi i32 [ 0, %filtez.exit.i.i ], [ %., %127 ]*/
	if ((((cur_state == LEGUP_F_main_BB_filtezexitii_155) & (memory_controller_waitrequest == 1'd0)) & (main_filtezexitii_126_reg == 1'd1))) begin
		main_logsclexitii_1i23ii_reg <= main_logsclexitii_1i23ii;
		if (start == 1'b0 && ^(main_logsclexitii_1i23ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_1i23ii_reg"); $finish; end
	end
	/* main: %logscl.exit.i.i*/
	/*   %.1.i23.i.i = phi i32 [ 0, %filtez.exit.i.i ], [ %., %127 ]*/
	if (((cur_state == LEGUP_F_main_BB__127_156) & (memory_controller_waitrequest == 1'd0))) begin
		main_logsclexitii_1i23ii_reg <= main_logsclexitii_1i23ii;
		if (start == 1'b0 && ^(main_logsclexitii_1i23ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_1i23ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %129 = lshr i32 %.1.i23.i.i, 6*/
		main_logsclexitii_129 = (main_logsclexitii_1i23ii_reg >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %129 = lshr i32 %.1.i23.i.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_157)) begin
		main_logsclexitii_129_reg <= main_logsclexitii_129;
		if (start == 1'b0 && ^(main_logsclexitii_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %130 = and i32 %129, 31*/
		main_logsclexitii_130 = (main_logsclexitii_129 & 32'd31);
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %130 = and i32 %129, 31*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_157)) begin
		main_logsclexitii_130_reg <= main_logsclexitii_130;
		if (start == 1'b0 && ^(main_logsclexitii_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %131 = ashr i32 %.1.i23.i.i, 11*/
		main_logsclexitii_131 = ($signed(main_logsclexitii_1i23ii_reg) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %131 = ashr i32 %.1.i23.i.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_157)) begin
		main_logsclexitii_131_reg <= main_logsclexitii_131;
		if (start == 1'b0 && ^(main_logsclexitii_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %132 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %130*/
		main_logsclexitii_132 = (`TAG_g_ilb_table_a | (4 * main_logsclexitii_130));
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %132 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %130*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_157)) begin
		main_logsclexitii_132_reg <= main_logsclexitii_132;
		if (start == 1'b0 && ^(main_logsclexitii_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %133 = load i32* %132, align 4*/
		main_logsclexitii_133 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %133 = load i32* %132, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_159)) begin
		main_logsclexitii_133_reg <= main_logsclexitii_133;
		if (start == 1'b0 && ^(main_logsclexitii_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %134 = sub nsw i32 9, %131*/
		main_logsclexitii_134 = (32'd9 - main_logsclexitii_131);
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %134 = sub nsw i32 9, %131*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_157)) begin
		main_logsclexitii_134_reg <= main_logsclexitii_134;
		if (start == 1'b0 && ^(main_logsclexitii_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %135 = ashr i32 %133, %134*/
		main_logsclexitii_135 = ($signed(main_logsclexitii_133) >>> main_logsclexitii_134_reg);
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %135 = ashr i32 %133, %134*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_159)) begin
		main_logsclexitii_135_reg <= main_logsclexitii_135;
		if (start == 1'b0 && ^(main_logsclexitii_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %136 = shl i32 %135, 3*/
		main_logsclexitii_136 = (main_logsclexitii_135 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %136 = shl i32 %135, 3*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_159)) begin
		main_logsclexitii_136_reg <= main_logsclexitii_136;
		if (start == 1'b0 && ^(main_logsclexitii_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %137 = add nsw i32 %116, %103*/
		main_logsclexitii_137 = (main_filtezexitii_116_reg + main_filtezexitii_103_reg);
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %137 = add nsw i32 %116, %103*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_157)) begin
		main_logsclexitii_137_reg <= main_logsclexitii_137;
		if (start == 1'b0 && ^(main_logsclexitii_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %138 = icmp eq i32 %116, 0*/
		main_logsclexitii_138 = (main_filtezexitii_116_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %138 = icmp eq i32 %116, 0*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_157)) begin
		main_logsclexitii_138_reg <= main_logsclexitii_138;
		if (start == 1'b0 && ^(main_logsclexitii_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader39*/
	/*   %139 = phi i32 [ %144, %140 ], [ 0, %.preheader39.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader39preheader_161) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader39_139 = 32'd0;
	end
	/* main: %.preheader39*/
	/*   %139 = phi i32 [ %144, %140 ], [ 0, %.preheader39.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__140_166) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader39_139 = main_140_144_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader39*/
	/*   %139 = phi i32 [ %144, %140 ], [ 0, %.preheader39.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader39preheader_161) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader39_139_reg <= main_preheader39_139;
		if (start == 1'b0 && ^(main_preheader39_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader39_139_reg"); $finish; end
	end
	/* main: %.preheader39*/
	/*   %139 = phi i32 [ %144, %140 ], [ 0, %.preheader39.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__140_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader39_139_reg <= main_preheader39_139;
		if (start == 1'b0 && ^(main_preheader39_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader39_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader39*/
	/*   %scevgep14 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %139*/
		main_preheader39_scevgep14 = (1'd0 | (4 * main_preheader39_139_reg));
end
always @(posedge clk) begin
	/* main: %.preheader39*/
	/*   %scevgep14 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %139*/
	if ((cur_state == LEGUP_F_main_BB_preheader39_162)) begin
		main_preheader39_scevgep14_reg <= main_preheader39_scevgep14;
		if (start == 1'b0 && ^(main_preheader39_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader39_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader39*/
	/*   %exitcond13 = icmp eq i32 %139, 6*/
		main_preheader39_exitcond13 = (main_preheader39_139_reg == 32'd6);
end
always @(posedge clk) begin
	/* main: %.preheader39*/
	/*   %exitcond13 = icmp eq i32 %139, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheader39_162)) begin
		main_preheader39_exitcond13_reg <= main_preheader39_exitcond13;
		if (start == 1'b0 && ^(main_preheader39_exitcond13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader39_exitcond13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %141 = load i32* %scevgep14, align 4*/
		main_140_141 = dec_del_bpl_out_a;
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %141 = load i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__140_164)) begin
		main_140_141_reg <= main_140_141;
		if (start == 1'b0 && ^(main_140_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_141_reg"); $finish; end
	end
end
always @(*) begin
	main_140_142 = main_140_142_stage0_reg;
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %142 = mul nsw i32 %141, 255*/
	if ((cur_state == LEGUP_F_main_BB__140_165)) begin
		main_140_142_reg <= main_140_142;
		if (start == 1'b0 && ^(main_140_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_142_reg"); $finish; end
	end
	/* main: %140*/
	/*   %142 = mul nsw i32 %141, 255*/
	if ((cur_state == LEGUP_F_main_BB__140_165)) begin
		main_140_142_reg <= main_140_142;
		if (start == 1'b0 && ^(main_140_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %143 = ashr i32 %142, 8*/
		main_140_143 = ($signed(main_140_142) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %143 = ashr i32 %142, 8*/
	if ((cur_state == LEGUP_F_main_BB__140_165)) begin
		main_140_143_reg <= main_140_143;
		if (start == 1'b0 && ^(main_140_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %144 = add nsw i32 %139, 1*/
		main_140_144 = (main_preheader39_139_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %144 = add nsw i32 %139, 1*/
	if ((cur_state == LEGUP_F_main_BB__140_163)) begin
		main_140_144_reg <= main_140_144;
		if (start == 1'b0 && ^(main_140_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader40*/
	/*   %145 = phi i32 [ %156, %146 ], [ 0, %.preheader40.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader40preheader_160) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader40_145 = 32'd0;
	end
	/* main: %.preheader40*/
	/*   %145 = phi i32 [ %156, %146 ], [ 0, %.preheader40.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__146_171) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader40_145 = main_146_156_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader40*/
	/*   %145 = phi i32 [ %156, %146 ], [ 0, %.preheader40.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader40preheader_160) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader40_145_reg <= main_preheader40_145;
		if (start == 1'b0 && ^(main_preheader40_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader40_145_reg"); $finish; end
	end
	/* main: %.preheader40*/
	/*   %145 = phi i32 [ %156, %146 ], [ 0, %.preheader40.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__146_171) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader40_145_reg <= main_preheader40_145;
		if (start == 1'b0 && ^(main_preheader40_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader40_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader40*/
	/*   %scevgep11 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %145*/
		main_preheader40_scevgep11 = (1'd0 | (4 * main_preheader40_145_reg));
end
always @(posedge clk) begin
	/* main: %.preheader40*/
	/*   %scevgep11 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB_preheader40_167)) begin
		main_preheader40_scevgep11_reg <= main_preheader40_scevgep11;
		if (start == 1'b0 && ^(main_preheader40_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader40_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader40*/
	/*   %exitcond10 = icmp eq i32 %145, 6*/
		main_preheader40_exitcond10 = (main_preheader40_145_reg == 32'd6);
end
always @(posedge clk) begin
	/* main: %.preheader40*/
	/*   %exitcond10 = icmp eq i32 %145, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheader40_167)) begin
		main_preheader40_exitcond10_reg <= main_preheader40_exitcond10;
		if (start == 1'b0 && ^(main_preheader40_exitcond10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader40_exitcond10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %scevgep12 = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %145*/
		main_146_scevgep12 = (1'd0 | (4 * main_preheader40_145_reg));
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %scevgep12 = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__146_168)) begin
		main_146_scevgep12_reg <= main_146_scevgep12;
		if (start == 1'b0 && ^(main_146_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %147 = load i32* %scevgep12, align 4*/
		main_146_147 = dec_del_dltx_out_a;
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %147 = load i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_main_BB__146_169)) begin
		main_146_147_reg <= main_146_147;
		if (start == 1'b0 && ^(main_146_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_147_reg"); $finish; end
	end
end
always @(*) begin
	main_146_148 = main_146_148_stage0_reg;
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %148 = mul nsw i32 %116, %147*/
	if ((cur_state == LEGUP_F_main_BB__146_170)) begin
		main_146_148_reg <= main_146_148;
		if (start == 1'b0 && ^(main_146_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_148_reg"); $finish; end
	end
	/* main: %146*/
	/*   %148 = mul nsw i32 %116, %147*/
	if ((cur_state == LEGUP_F_main_BB__146_170)) begin
		main_146_148_reg <= main_146_148;
		if (start == 1'b0 && ^(main_146_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %149 = ashr i32 %148, 31*/
		main_146_149 = ($signed(main_146_148) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %149 = ashr i32 %148, 31*/
	if ((cur_state == LEGUP_F_main_BB__146_170)) begin
		main_146_149_reg <= main_146_149;
		if (start == 1'b0 && ^(main_146_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %150 = and i32 %149, -256*/
		main_146_150 = (main_146_149 & -32'd256);
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %150 = and i32 %149, -256*/
	if ((cur_state == LEGUP_F_main_BB__146_170)) begin
		main_146_150_reg <= main_146_150;
		if (start == 1'b0 && ^(main_146_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %151 = or i32 %150, 128*/
		main_146_151 = (main_146_150 | 32'd128);
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %151 = or i32 %150, 128*/
	if ((cur_state == LEGUP_F_main_BB__146_170)) begin
		main_146_151_reg <= main_146_151;
		if (start == 1'b0 && ^(main_146_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %152 = load i32* %scevgep11, align 4*/
		main_146_152 = dec_del_bpl_out_a;
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %152 = load i32* %scevgep11, align 4*/
	if ((cur_state == LEGUP_F_main_BB__146_169)) begin
		main_146_152_reg <= main_146_152;
		if (start == 1'b0 && ^(main_146_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_152_reg"); $finish; end
	end
end
always @(*) begin
	main_146_153 = main_146_153_stage0_reg;
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %153 = mul nsw i32 %152, 255*/
	if ((cur_state == LEGUP_F_main_BB__146_170)) begin
		main_146_153_reg <= main_146_153;
		if (start == 1'b0 && ^(main_146_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_153_reg"); $finish; end
	end
	/* main: %146*/
	/*   %153 = mul nsw i32 %152, 255*/
	if ((cur_state == LEGUP_F_main_BB__146_170)) begin
		main_146_153_reg <= main_146_153;
		if (start == 1'b0 && ^(main_146_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %154 = ashr i32 %153, 8*/
		main_146_154 = ($signed(main_146_153) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %154 = ashr i32 %153, 8*/
	if ((cur_state == LEGUP_F_main_BB__146_170)) begin
		main_146_154_reg <= main_146_154;
		if (start == 1'b0 && ^(main_146_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %155 = add nsw i32 %151, %154*/
		main_146_155 = (main_146_151 + main_146_154);
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %155 = add nsw i32 %151, %154*/
	if ((cur_state == LEGUP_F_main_BB__146_170)) begin
		main_146_155_reg <= main_146_155;
		if (start == 1'b0 && ^(main_146_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %156 = add nsw i32 %145, 1*/
		main_146_156 = (main_preheader40_145_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %156 = add nsw i32 %145, 1*/
	if ((cur_state == LEGUP_F_main_BB__146_168)) begin
		main_146_156_reg <= main_146_156;
		if (start == 1'b0 && ^(main_146_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %157 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
		main_upzeroexit21ii_157 = dec_del_dltx_out_a;
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %157 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_157_reg <= main_upzeroexit21ii_157;
		if (start == 1'b0 && ^(main_upzeroexit21ii_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %158 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
		main_upzeroexit21ii_158 = dec_del_dltx_out_b;
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %158 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_158_reg <= main_upzeroexit21ii_158;
		if (start == 1'b0 && ^(main_upzeroexit21ii_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %159 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4*/
		main_upzeroexit21ii_159 = dec_del_dltx_out_a;
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %159 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_176)) begin
		main_upzeroexit21ii_159_reg <= main_upzeroexit21ii_159;
		if (start == 1'b0 && ^(main_upzeroexit21ii_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %160 = shl nsw i32 %dec_al1.0, 2*/
		main_upzeroexit21ii_160 = (main_87_dec_al10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %160 = shl nsw i32 %dec_al1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_174)) begin
		main_upzeroexit21ii_160_reg <= main_upzeroexit21ii_160;
		if (start == 1'b0 && ^(main_upzeroexit21ii_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_160_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexit21ii_161 = main_upzeroexit21ii_161_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %161 = mul nsw i32 %137, %dec_plt1.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_161_reg <= main_upzeroexit21ii_161;
		if (start == 1'b0 && ^(main_upzeroexit21ii_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_161_reg"); $finish; end
	end
	/* main: %upzero.exit21.i.i*/
	/*   %161 = mul nsw i32 %137, %dec_plt1.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_161_reg <= main_upzeroexit21ii_161;
		if (start == 1'b0 && ^(main_upzeroexit21ii_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %162 = icmp sgt i32 %161, -1*/
		main_upzeroexit21ii_162 = ($signed(main_upzeroexit21ii_161) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %162 = icmp sgt i32 %161, -1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_162_reg <= main_upzeroexit21ii_162;
		if (start == 1'b0 && ^(main_upzeroexit21ii_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %163 = sub nsw i32 0, %160*/
		main_upzeroexit21ii_163 = (32'd0 - main_upzeroexit21ii_160);
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %163 = sub nsw i32 0, %160*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_174)) begin
		main_upzeroexit21ii_163_reg <= main_upzeroexit21ii_163;
		if (start == 1'b0 && ^(main_upzeroexit21ii_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %.61 = select i1 %162, i32 %163, i32 %160*/
		main_upzeroexit21ii_61 = (main_upzeroexit21ii_162 ? main_upzeroexit21ii_163_reg : main_upzeroexit21ii_160_reg);
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %.61 = select i1 %162, i32 %163, i32 %160*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_61_reg <= main_upzeroexit21ii_61;
		if (start == 1'b0 && ^(main_upzeroexit21ii_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %164 = ashr i32 %.61, 7*/
		main_upzeroexit21ii_164 = ($signed(main_upzeroexit21ii_61) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %164 = ashr i32 %.61, 7*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_164_reg <= main_upzeroexit21ii_164;
		if (start == 1'b0 && ^(main_upzeroexit21ii_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_164_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexit21ii_165 = main_upzeroexit21ii_165_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %165 = mul nsw i32 %137, %dec_plt2.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_165_reg <= main_upzeroexit21ii_165;
		if (start == 1'b0 && ^(main_upzeroexit21ii_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_165_reg"); $finish; end
	end
	/* main: %upzero.exit21.i.i*/
	/*   %165 = mul nsw i32 %137, %dec_plt2.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_165_reg <= main_upzeroexit21ii_165;
		if (start == 1'b0 && ^(main_upzeroexit21ii_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %166 = ashr i32 %165, 31*/
		main_upzeroexit21ii_166 = ($signed(main_upzeroexit21ii_165) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %166 = ashr i32 %165, 31*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_166_reg <= main_upzeroexit21ii_166;
		if (start == 1'b0 && ^(main_upzeroexit21ii_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %167 = and i32 %166, -256*/
		main_upzeroexit21ii_167 = (main_upzeroexit21ii_166 & -32'd256);
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %167 = and i32 %166, -256*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_167_reg <= main_upzeroexit21ii_167;
		if (start == 1'b0 && ^(main_upzeroexit21ii_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %168 = or i32 %167, 128*/
		main_upzeroexit21ii_168 = (main_upzeroexit21ii_167 | 32'd128);
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %168 = or i32 %167, 128*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_168_reg <= main_upzeroexit21ii_168;
		if (start == 1'b0 && ^(main_upzeroexit21ii_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %wd4.0.i14.i.i = add nsw i32 %164, %168*/
		main_upzeroexit21ii_wd40i14ii = (main_upzeroexit21ii_164 + main_upzeroexit21ii_168);
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %wd4.0.i14.i.i = add nsw i32 %164, %168*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_wd40i14ii_reg <= main_upzeroexit21ii_wd40i14ii;
		if (start == 1'b0 && ^(main_upzeroexit21ii_wd40i14ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_wd40i14ii_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexit21ii_169 = main_upzeroexit21ii_169_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %169 = mul nsw i32 %dec_al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_169_reg <= main_upzeroexit21ii_169;
		if (start == 1'b0 && ^(main_upzeroexit21ii_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_169_reg"); $finish; end
	end
	/* main: %upzero.exit21.i.i*/
	/*   %169 = mul nsw i32 %dec_al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_169_reg <= main_upzeroexit21ii_169;
		if (start == 1'b0 && ^(main_upzeroexit21ii_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %170 = ashr i32 %169, 7*/
		main_upzeroexit21ii_170 = ($signed(main_upzeroexit21ii_169) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %170 = ashr i32 %169, 7*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_170_reg <= main_upzeroexit21ii_170;
		if (start == 1'b0 && ^(main_upzeroexit21ii_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %171 = add nsw i32 %wd4.0.i14.i.i, %170*/
		main_upzeroexit21ii_171 = (main_upzeroexit21ii_wd40i14ii + main_upzeroexit21ii_170);
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %171 = add nsw i32 %wd4.0.i14.i.i, %170*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_171_reg <= main_upzeroexit21ii_171;
		if (start == 1'b0 && ^(main_upzeroexit21ii_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit21.i.i*/
	/*   %172 = icmp sgt i32 %171, 12288*/
		main_upzeroexit21ii_172 = ($signed(main_upzeroexit21ii_171) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %172 = icmp sgt i32 %171, 12288*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		main_upzeroexit21ii_172_reg <= main_upzeroexit21ii_172;
		if (start == 1'b0 && ^(main_upzeroexit21ii_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit21ii_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %173*/
	/*   %174 = icmp slt i32 %171, -12288*/
		main_173_174 = ($signed(main_upzeroexit21ii_171_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %173*/
	/*   %174 = icmp slt i32 %171, -12288*/
	if ((cur_state == LEGUP_F_main_BB__173_179)) begin
		main_173_174_reg <= main_173_174;
		if (start == 1'b0 && ^(main_173_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_173_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %173*/
	/*   %.62 = select i1 %174, i32 -12288, i32 %171*/
		main_173_62 = (main_173_174 ? -32'd12288 : main_upzeroexit21ii_171_reg);
end
always @(posedge clk) begin
	/* main: %173*/
	/*   %.62 = select i1 %174, i32 -12288, i32 %171*/
	if ((cur_state == LEGUP_F_main_BB__173_179)) begin
		main_173_62_reg <= main_173_62;
		if (start == 1'b0 && ^(main_173_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_173_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %apl2.1.i16.i.i = phi i32 [ 12288, %upzero.exit21.i.i ], [ %.62, %173 ]*/
	if ((((cur_state == LEGUP_F_main_BB_upzeroexit21ii_178) & (memory_controller_waitrequest == 1'd0)) & (main_upzeroexit21ii_172_reg == 1'd1))) begin
		main_uppol2exit17ii_apl21i16ii = 32'd12288;
	end
	/* main: %uppol2.exit17.i.i*/
	/*   %apl2.1.i16.i.i = phi i32 [ 12288, %upzero.exit21.i.i ], [ %.62, %173 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__173_179) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_uppol2exit17ii_apl21i16ii = main_173_62;
	end
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %apl2.1.i16.i.i = phi i32 [ 12288, %upzero.exit21.i.i ], [ %.62, %173 ]*/
	if ((((cur_state == LEGUP_F_main_BB_upzeroexit21ii_178) & (memory_controller_waitrequest == 1'd0)) & (main_upzeroexit21ii_172_reg == 1'd1))) begin
		main_uppol2exit17ii_apl21i16ii_reg <= main_uppol2exit17ii_apl21i16ii;
		if (start == 1'b0 && ^(main_uppol2exit17ii_apl21i16ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_apl21i16ii_reg"); $finish; end
	end
	/* main: %uppol2.exit17.i.i*/
	/*   %apl2.1.i16.i.i = phi i32 [ 12288, %upzero.exit21.i.i ], [ %.62, %173 ]*/
	if (((cur_state == LEGUP_F_main_BB__173_179) & (memory_controller_waitrequest == 1'd0))) begin
		main_uppol2exit17ii_apl21i16ii_reg <= main_uppol2exit17ii_apl21i16ii;
		if (start == 1'b0 && ^(main_uppol2exit17ii_apl21i16ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_apl21i16ii_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exit17ii_175 = main_uppol2exit17ii_175_stage0_reg;
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %175 = mul nsw i32 %dec_al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_181)) begin
		main_uppol2exit17ii_175_reg <= main_uppol2exit17ii_175;
		if (start == 1'b0 && ^(main_uppol2exit17ii_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_175_reg"); $finish; end
	end
	/* main: %uppol2.exit17.i.i*/
	/*   %175 = mul nsw i32 %dec_al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_181)) begin
		main_uppol2exit17ii_175_reg <= main_uppol2exit17ii_175;
		if (start == 1'b0 && ^(main_uppol2exit17ii_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %176 = ashr i32 %175, 8*/
		main_uppol2exit17ii_176 = ($signed(main_uppol2exit17ii_175) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %176 = ashr i32 %175, 8*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_181)) begin
		main_uppol2exit17ii_176_reg <= main_uppol2exit17ii_176;
		if (start == 1'b0 && ^(main_uppol2exit17ii_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %177 = ashr i32 %161, 31*/
		main_uppol2exit17ii_177 = ($signed(main_upzeroexit21ii_161_reg) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %177 = ashr i32 %161, 31*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_180)) begin
		main_uppol2exit17ii_177_reg <= main_uppol2exit17ii_177;
		if (start == 1'b0 && ^(main_uppol2exit17ii_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %178 = and i32 %177, -384*/
		main_uppol2exit17ii_178 = (main_uppol2exit17ii_177 & -32'd384);
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %178 = and i32 %177, -384*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_180)) begin
		main_uppol2exit17ii_178_reg <= main_uppol2exit17ii_178;
		if (start == 1'b0 && ^(main_uppol2exit17ii_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %179 = add nsw i32 %178, 192*/
		main_uppol2exit17ii_179 = (main_uppol2exit17ii_178 + 32'd192);
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %179 = add nsw i32 %178, 192*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_180)) begin
		main_uppol2exit17ii_179_reg <= main_uppol2exit17ii_179;
		if (start == 1'b0 && ^(main_uppol2exit17ii_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %apl1.0.i9.i.i = add nsw i32 %176, %179*/
		main_uppol2exit17ii_apl10i9ii = (main_uppol2exit17ii_176 + main_uppol2exit17ii_179_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %apl1.0.i9.i.i = add nsw i32 %176, %179*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_181)) begin
		main_uppol2exit17ii_apl10i9ii_reg <= main_uppol2exit17ii_apl10i9ii;
		if (start == 1'b0 && ^(main_uppol2exit17ii_apl10i9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_apl10i9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %180 = sub nsw i32 15360, %apl2.1.i16.i.i*/
		main_uppol2exit17ii_180 = (32'd15360 - main_uppol2exit17ii_apl21i16ii_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %180 = sub nsw i32 15360, %apl2.1.i16.i.i*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_180)) begin
		main_uppol2exit17ii_180_reg <= main_uppol2exit17ii_180;
		if (start == 1'b0 && ^(main_uppol2exit17ii_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %181 = icmp sgt i32 %apl1.0.i9.i.i, %180*/
		main_uppol2exit17ii_181 = ($signed(main_uppol2exit17ii_apl10i9ii) > $signed(main_uppol2exit17ii_180_reg));
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %181 = icmp sgt i32 %apl1.0.i9.i.i, %180*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_181)) begin
		main_uppol2exit17ii_181_reg <= main_uppol2exit17ii_181;
		if (start == 1'b0 && ^(main_uppol2exit17ii_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %182 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4*/
		main_uppol2exit17ii_182 = dec_del_bph_out_a;
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %182 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_181)) begin
		main_uppol2exit17ii_182_reg <= main_uppol2exit17ii_182;
		if (start == 1'b0 && ^(main_uppol2exit17ii_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %183 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
		main_uppol2exit17ii_183 = dec_del_dhx_out_a;
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %183 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_181)) begin
		main_uppol2exit17ii_183_reg <= main_uppol2exit17ii_183;
		if (start == 1'b0 && ^(main_uppol2exit17ii_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_183_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exit17ii_184 = main_uppol2exit17ii_184_stage0_reg;
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %184 = mul nsw i32 %182, %183*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_182)) begin
		main_uppol2exit17ii_184_reg <= main_uppol2exit17ii_184;
		if (start == 1'b0 && ^(main_uppol2exit17ii_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_184_reg"); $finish; end
	end
	/* main: %uppol2.exit17.i.i*/
	/*   %184 = mul nsw i32 %182, %183*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_182)) begin
		main_uppol2exit17ii_184_reg <= main_uppol2exit17ii_184;
		if (start == 1'b0 && ^(main_uppol2exit17ii_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit17ii_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %185*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %186 ], [ 0, %uppol2.exit17.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit17ii_182) & (memory_controller_waitrequest == 1'd0))) begin
		main_185_indvar15 = 32'd0;
	end
	/* main: %185*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %186 ], [ 0, %uppol2.exit17.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__186_186) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_185_indvar15 = main_186_indvarnext16_reg;
	end
end
always @(posedge clk) begin
	/* main: %185*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %186 ], [ 0, %uppol2.exit17.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit17ii_182) & (memory_controller_waitrequest == 1'd0))) begin
		main_185_indvar15_reg <= main_185_indvar15;
		if (start == 1'b0 && ^(main_185_indvar15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_indvar15_reg"); $finish; end
	end
	/* main: %185*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %186 ], [ 0, %uppol2.exit17.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__186_186) & (memory_controller_waitrequest == 1'd0))) begin
		main_185_indvar15_reg <= main_185_indvar15;
		if (start == 1'b0 && ^(main_185_indvar15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_indvar15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %185*/
	/*   %zl.0.i4.i.i = phi i32 [ %190, %186 ], [ %184, %uppol2.exit17.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit17ii_182) & (memory_controller_waitrequest == 1'd0))) begin
		main_185_zl0i4ii = main_uppol2exit17ii_184;
	end
	/* main: %185*/
	/*   %zl.0.i4.i.i = phi i32 [ %190, %186 ], [ %184, %uppol2.exit17.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__186_186) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_185_zl0i4ii = main_186_190;
	end
end
always @(posedge clk) begin
	/* main: %185*/
	/*   %zl.0.i4.i.i = phi i32 [ %190, %186 ], [ %184, %uppol2.exit17.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit17ii_182) & (memory_controller_waitrequest == 1'd0))) begin
		main_185_zl0i4ii_reg <= main_185_zl0i4ii;
		if (start == 1'b0 && ^(main_185_zl0i4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_zl0i4ii_reg"); $finish; end
	end
	/* main: %185*/
	/*   %zl.0.i4.i.i = phi i32 [ %190, %186 ], [ %184, %uppol2.exit17.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__186_186) & (memory_controller_waitrequest == 1'd0))) begin
		main_185_zl0i4ii_reg <= main_185_zl0i4ii;
		if (start == 1'b0 && ^(main_185_zl0i4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_zl0i4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %185*/
	/*   %i.0.i5.i.i = add i32 %indvar15, 1*/
		main_185_i0i5ii = (main_185_indvar15_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %185*/
	/*   %i.0.i5.i.i = add i32 %indvar15, 1*/
	if ((cur_state == LEGUP_F_main_BB__185_183)) begin
		main_185_i0i5ii_reg <= main_185_i0i5ii;
		if (start == 1'b0 && ^(main_185_i0i5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_i0i5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %185*/
	/*   %exitcond17 = icmp eq i32 %indvar15, 5*/
		main_185_exitcond17 = (main_185_indvar15_reg == 32'd5);
end
always @(posedge clk) begin
	/* main: %185*/
	/*   %exitcond17 = icmp eq i32 %indvar15, 5*/
	if ((cur_state == LEGUP_F_main_BB__185_183)) begin
		main_185_exitcond17_reg <= main_185_exitcond17;
		if (start == 1'b0 && ^(main_185_exitcond17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_exitcond17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %.0.i7.i.i = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %i.0.i5.i.i*/
		main_186_0i7ii = (1'd0 | (4 * main_185_i0i5ii_reg));
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %.0.i7.i.i = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %i.0.i5.i.i*/
	if ((cur_state == LEGUP_F_main_BB__186_184)) begin
		main_186_0i7ii_reg <= main_186_0i7ii;
		if (start == 1'b0 && ^(main_186_0i7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_0i7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %.01.i6.i.i = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %i.0.i5.i.i*/
		main_186_01i6ii = (1'd0 | (4 * main_185_i0i5ii_reg));
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %.01.i6.i.i = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %i.0.i5.i.i*/
	if ((cur_state == LEGUP_F_main_BB__186_184)) begin
		main_186_01i6ii_reg <= main_186_01i6ii;
		if (start == 1'b0 && ^(main_186_01i6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_01i6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %187 = load i32* %.0.i7.i.i, align 4*/
		main_186_187 = dec_del_bph_out_a;
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %187 = load i32* %.0.i7.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__186_185)) begin
		main_186_187_reg <= main_186_187;
		if (start == 1'b0 && ^(main_186_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %188 = load i32* %.01.i6.i.i, align 4*/
		main_186_188 = dec_del_dhx_out_a;
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %188 = load i32* %.01.i6.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__186_185)) begin
		main_186_188_reg <= main_186_188;
		if (start == 1'b0 && ^(main_186_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_188_reg"); $finish; end
	end
end
always @(*) begin
	main_186_189 = main_186_189_stage0_reg;
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %189 = mul nsw i32 %187, %188*/
	if ((cur_state == LEGUP_F_main_BB__186_186)) begin
		main_186_189_reg <= main_186_189;
		if (start == 1'b0 && ^(main_186_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_189_reg"); $finish; end
	end
	/* main: %186*/
	/*   %189 = mul nsw i32 %187, %188*/
	if ((cur_state == LEGUP_F_main_BB__186_186)) begin
		main_186_189_reg <= main_186_189;
		if (start == 1'b0 && ^(main_186_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %190 = add nsw i32 %zl.0.i4.i.i, %189*/
		main_186_190 = (main_185_zl0i4ii_reg + main_186_189);
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %190 = add nsw i32 %zl.0.i4.i.i, %189*/
	if ((cur_state == LEGUP_F_main_BB__186_186)) begin
		main_186_190_reg <= main_186_190;
		if (start == 1'b0 && ^(main_186_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %indvar.next16 = add i32 %indvar15, 1*/
		main_186_indvarnext16 = (main_185_indvar15_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %indvar.next16 = add i32 %indvar15, 1*/
	if ((cur_state == LEGUP_F_main_BB__186_184)) begin
		main_186_indvarnext16_reg <= main_186_indvarnext16;
		if (start == 1'b0 && ^(main_186_indvarnext16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_indvarnext16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %191 = sub nsw i32 0, %180*/
		main_filtezexit8ii_191 = (32'd0 - main_uppol2exit17ii_180_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %191 = sub nsw i32 0, %180*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		main_filtezexit8ii_191_reg <= main_filtezexit8ii_191;
		if (start == 1'b0 && ^(main_filtezexit8ii_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %.apl1.0.i9.i.i = select i1 %181, i32 %180, i32 %apl1.0.i9.i.i*/
		main_filtezexit8ii_apl10i9ii = (main_uppol2exit17ii_181_reg ? main_uppol2exit17ii_180_reg : main_uppol2exit17ii_apl10i9ii_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %.apl1.0.i9.i.i = select i1 %181, i32 %180, i32 %apl1.0.i9.i.i*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		main_filtezexit8ii_apl10i9ii_reg <= main_filtezexit8ii_apl10i9ii;
		if (start == 1'b0 && ^(main_filtezexit8ii_apl10i9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_apl10i9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %192 = icmp slt i32 %.apl1.0.i9.i.i, %191*/
		main_filtezexit8ii_192 = ($signed(main_filtezexit8ii_apl10i9ii) < $signed(main_filtezexit8ii_191));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %192 = icmp slt i32 %.apl1.0.i9.i.i, %191*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		main_filtezexit8ii_192_reg <= main_filtezexit8ii_192;
		if (start == 1'b0 && ^(main_filtezexit8ii_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %apl1.2.i11.i.i = select i1 %192, i32 %191, i32 %.apl1.0.i9.i.i*/
		main_filtezexit8ii_apl12i11ii = (main_filtezexit8ii_192 ? main_filtezexit8ii_191 : main_filtezexit8ii_apl10i9ii);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %apl1.2.i11.i.i = select i1 %192, i32 %191, i32 %.apl1.0.i9.i.i*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		main_filtezexit8ii_apl12i11ii_reg <= main_filtezexit8ii_apl12i11ii;
		if (start == 1'b0 && ^(main_filtezexit8ii_apl12i11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_apl12i11ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %193 = add nsw i32 %110, %116*/
		main_filtezexit8ii_193 = (main_filtezexitii_110_reg + main_filtezexitii_116_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %193 = add nsw i32 %110, %116*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		main_filtezexit8ii_193_reg <= main_filtezexit8ii_193;
		if (start == 1'b0 && ^(main_filtezexit8ii_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %194 = ashr i32 %zl.0.i4.i.i, 14*/
		main_filtezexit8ii_194 = ($signed(main_185_zl0i4ii_reg) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %194 = ashr i32 %zl.0.i4.i.i, 14*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		main_filtezexit8ii_194_reg <= main_filtezexit8ii_194;
		if (start == 1'b0 && ^(main_filtezexit8ii_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %195 = shl nsw i32 %dec_rh1.0, 1*/
		main_filtezexit8ii_195 = (main_87_dec_rh10_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %195 = shl nsw i32 %dec_rh1.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		main_filtezexit8ii_195_reg <= main_filtezexit8ii_195;
		if (start == 1'b0 && ^(main_filtezexit8ii_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_195_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexit8ii_196 = main_filtezexit8ii_196_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %196 = mul nsw i32 %dec_ah1.0, %195*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_188)) begin
		main_filtezexit8ii_196_reg <= main_filtezexit8ii_196;
		if (start == 1'b0 && ^(main_filtezexit8ii_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_196_reg"); $finish; end
	end
	/* main: %filtez.exit8.i.i*/
	/*   %196 = mul nsw i32 %dec_ah1.0, %195*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_188)) begin
		main_filtezexit8ii_196_reg <= main_filtezexit8ii_196;
		if (start == 1'b0 && ^(main_filtezexit8ii_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %197 = shl nsw i32 %dec_rh2.0, 1*/
		main_filtezexit8ii_197 = (main_87_dec_rh20_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %197 = shl nsw i32 %dec_rh2.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		main_filtezexit8ii_197_reg <= main_filtezexit8ii_197;
		if (start == 1'b0 && ^(main_filtezexit8ii_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_197_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexit8ii_198 = main_filtezexit8ii_198_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %198 = mul nsw i32 %dec_ah2.0, %197*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_188)) begin
		main_filtezexit8ii_198_reg <= main_filtezexit8ii_198;
		if (start == 1'b0 && ^(main_filtezexit8ii_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_198_reg"); $finish; end
	end
	/* main: %filtez.exit8.i.i*/
	/*   %198 = mul nsw i32 %dec_ah2.0, %197*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_188)) begin
		main_filtezexit8ii_198_reg <= main_filtezexit8ii_198;
		if (start == 1'b0 && ^(main_filtezexit8ii_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %199 = add nsw i32 %196, %198*/
		main_filtezexit8ii_199 = (main_filtezexit8ii_196 + main_filtezexit8ii_198);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %199 = add nsw i32 %196, %198*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_188)) begin
		main_filtezexit8ii_199_reg <= main_filtezexit8ii_199;
		if (start == 1'b0 && ^(main_filtezexit8ii_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %200 = ashr i32 %199, 15*/
		main_filtezexit8ii_200 = ($signed(main_filtezexit8ii_199) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %200 = ashr i32 %199, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_188)) begin
		main_filtezexit8ii_200_reg <= main_filtezexit8ii_200;
		if (start == 1'b0 && ^(main_filtezexit8ii_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %201 = add nsw i32 %200, %194*/
		main_filtezexit8ii_201 = (main_filtezexit8ii_200 + main_filtezexit8ii_194_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %201 = add nsw i32 %200, %194*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_188)) begin
		main_filtezexit8ii_201_reg <= main_filtezexit8ii_201;
		if (start == 1'b0 && ^(main_filtezexit8ii_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %202 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %102*/
		main_filtezexit8ii_202 = (`TAG_g_qq2_code2_table_a | (4 * main_filtezexitii_102_reg));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %202 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %102*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		main_filtezexit8ii_202_reg <= main_filtezexit8ii_202;
		if (start == 1'b0 && ^(main_filtezexit8ii_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %203 = load i32* %202, align 4*/
		main_filtezexit8ii_203 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %203 = load i32* %202, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_189)) begin
		main_filtezexit8ii_203_reg <= main_filtezexit8ii_203;
		if (start == 1'b0 && ^(main_filtezexit8ii_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_203_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexit8ii_204 = main_filtezexit8ii_204_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %204 = mul nsw i32 %dec_deth.0, %203*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_190)) begin
		main_filtezexit8ii_204_reg <= main_filtezexit8ii_204;
		if (start == 1'b0 && ^(main_filtezexit8ii_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_204_reg"); $finish; end
	end
	/* main: %filtez.exit8.i.i*/
	/*   %204 = mul nsw i32 %dec_deth.0, %203*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_190)) begin
		main_filtezexit8ii_204_reg <= main_filtezexit8ii_204;
		if (start == 1'b0 && ^(main_filtezexit8ii_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %205 = ashr i32 %204, 15*/
		main_filtezexit8ii_205 = ($signed(main_filtezexit8ii_204) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %205 = ashr i32 %204, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_190)) begin
		main_filtezexit8ii_205_reg <= main_filtezexit8ii_205;
		if (start == 1'b0 && ^(main_filtezexit8ii_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_205_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexit8ii_206 = main_filtezexit8ii_206_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %206 = mul nsw i32 %dec_nbh.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_188)) begin
		main_filtezexit8ii_206_reg <= main_filtezexit8ii_206;
		if (start == 1'b0 && ^(main_filtezexit8ii_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_206_reg"); $finish; end
	end
	/* main: %filtez.exit8.i.i*/
	/*   %206 = mul nsw i32 %dec_nbh.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_188)) begin
		main_filtezexit8ii_206_reg <= main_filtezexit8ii_206;
		if (start == 1'b0 && ^(main_filtezexit8ii_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %207 = ashr i32 %206, 7*/
		main_filtezexit8ii_207 = ($signed(main_filtezexit8ii_206) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %207 = ashr i32 %206, 7*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_188)) begin
		main_filtezexit8ii_207_reg <= main_filtezexit8ii_207;
		if (start == 1'b0 && ^(main_filtezexit8ii_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %208 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %102*/
		main_filtezexit8ii_208 = (`TAG_g_wh_code_table_a | (4 * main_filtezexitii_102_reg));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %208 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %102*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		main_filtezexit8ii_208_reg <= main_filtezexit8ii_208;
		if (start == 1'b0 && ^(main_filtezexit8ii_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %209 = load i32* %208, align 4*/
		main_filtezexit8ii_209 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %209 = load i32* %208, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_189)) begin
		main_filtezexit8ii_209_reg <= main_filtezexit8ii_209;
		if (start == 1'b0 && ^(main_filtezexit8ii_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %210 = add nsw i32 %207, %209*/
		main_filtezexit8ii_210 = (main_filtezexit8ii_207_reg + main_filtezexit8ii_209);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %210 = add nsw i32 %207, %209*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_189)) begin
		main_filtezexit8ii_210_reg <= main_filtezexit8ii_210;
		if (start == 1'b0 && ^(main_filtezexit8ii_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %211 = icmp slt i32 %210, 0*/
		main_filtezexit8ii_211 = ($signed(main_filtezexit8ii_210) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %211 = icmp slt i32 %210, 0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_189)) begin
		main_filtezexit8ii_211_reg <= main_filtezexit8ii_211;
		if (start == 1'b0 && ^(main_filtezexit8ii_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %212*/
	/*   %213 = icmp sgt i32 %210, 22528*/
		main_212_213 = ($signed(main_filtezexit8ii_210_reg) > $signed(32'd22528));
end
always @(posedge clk) begin
	/* main: %212*/
	/*   %213 = icmp sgt i32 %210, 22528*/
	if ((cur_state == LEGUP_F_main_BB__212_191)) begin
		main_212_213_reg <= main_212_213;
		if (start == 1'b0 && ^(main_212_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_212_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %212*/
	/*   %.63 = select i1 %213, i32 22528, i32 %210*/
		main_212_63 = (main_212_213 ? 32'd22528 : main_filtezexit8ii_210_reg);
end
always @(posedge clk) begin
	/* main: %212*/
	/*   %.63 = select i1 %213, i32 22528, i32 %210*/
	if ((cur_state == LEGUP_F_main_BB__212_191)) begin
		main_212_63_reg <= main_212_63;
		if (start == 1'b0 && ^(main_212_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_212_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %.1.i.i.i = phi i32 [ 0, %filtez.exit8.i.i ], [ %.63, %212 ]*/
	if ((((cur_state == LEGUP_F_main_BB_filtezexit8ii_190) & (memory_controller_waitrequest == 1'd0)) & (main_filtezexit8ii_211_reg == 1'd1))) begin
		main_logschexitii_1iii = 32'd0;
	end
	/* main: %logsch.exit.i.i*/
	/*   %.1.i.i.i = phi i32 [ 0, %filtez.exit8.i.i ], [ %.63, %212 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__212_191) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_logschexitii_1iii = main_212_63;
	end
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %.1.i.i.i = phi i32 [ 0, %filtez.exit8.i.i ], [ %.63, %212 ]*/
	if ((((cur_state == LEGUP_F_main_BB_filtezexit8ii_190) & (memory_controller_waitrequest == 1'd0)) & (main_filtezexit8ii_211_reg == 1'd1))) begin
		main_logschexitii_1iii_reg <= main_logschexitii_1iii;
		if (start == 1'b0 && ^(main_logschexitii_1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_1iii_reg"); $finish; end
	end
	/* main: %logsch.exit.i.i*/
	/*   %.1.i.i.i = phi i32 [ 0, %filtez.exit8.i.i ], [ %.63, %212 ]*/
	if (((cur_state == LEGUP_F_main_BB__212_191) & (memory_controller_waitrequest == 1'd0))) begin
		main_logschexitii_1iii_reg <= main_logschexitii_1iii;
		if (start == 1'b0 && ^(main_logschexitii_1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %214 = lshr i32 %.1.i.i.i, 6*/
		main_logschexitii_214 = (main_logschexitii_1iii_reg >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %214 = lshr i32 %.1.i.i.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_192)) begin
		main_logschexitii_214_reg <= main_logschexitii_214;
		if (start == 1'b0 && ^(main_logschexitii_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %215 = and i32 %214, 31*/
		main_logschexitii_215 = (main_logschexitii_214 & 32'd31);
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %215 = and i32 %214, 31*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_192)) begin
		main_logschexitii_215_reg <= main_logschexitii_215;
		if (start == 1'b0 && ^(main_logschexitii_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %216 = ashr i32 %.1.i.i.i, 11*/
		main_logschexitii_216 = ($signed(main_logschexitii_1iii_reg) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %216 = ashr i32 %.1.i.i.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_192)) begin
		main_logschexitii_216_reg <= main_logschexitii_216;
		if (start == 1'b0 && ^(main_logschexitii_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %217 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %215*/
		main_logschexitii_217 = (`TAG_g_ilb_table_a | (4 * main_logschexitii_215));
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %217 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %215*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_192)) begin
		main_logschexitii_217_reg <= main_logschexitii_217;
		if (start == 1'b0 && ^(main_logschexitii_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %218 = load i32* %217, align 4*/
		main_logschexitii_218 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %218 = load i32* %217, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_194)) begin
		main_logschexitii_218_reg <= main_logschexitii_218;
		if (start == 1'b0 && ^(main_logschexitii_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %219 = sub nsw i32 11, %216*/
		main_logschexitii_219 = (32'd11 - main_logschexitii_216);
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %219 = sub nsw i32 11, %216*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_192)) begin
		main_logschexitii_219_reg <= main_logschexitii_219;
		if (start == 1'b0 && ^(main_logschexitii_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %220 = ashr i32 %218, %219*/
		main_logschexitii_220 = ($signed(main_logschexitii_218) >>> main_logschexitii_219_reg);
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %220 = ashr i32 %218, %219*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_194)) begin
		main_logschexitii_220_reg <= main_logschexitii_220;
		if (start == 1'b0 && ^(main_logschexitii_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %221 = shl i32 %220, 3*/
		main_logschexitii_221 = (main_logschexitii_220 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %221 = shl i32 %220, 3*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_194)) begin
		main_logschexitii_221_reg <= main_logschexitii_221;
		if (start == 1'b0 && ^(main_logschexitii_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %222 = add nsw i32 %205, %194*/
		main_logschexitii_222 = (main_filtezexit8ii_205_reg + main_filtezexit8ii_194_reg);
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %222 = add nsw i32 %205, %194*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_192)) begin
		main_logschexitii_222_reg <= main_logschexitii_222;
		if (start == 1'b0 && ^(main_logschexitii_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %223 = icmp eq i32 %205, 0*/
		main_logschexitii_223 = (main_filtezexit8ii_205_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %223 = icmp eq i32 %205, 0*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_192)) begin
		main_logschexitii_223_reg <= main_logschexitii_223;
		if (start == 1'b0 && ^(main_logschexitii_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader36*/
	/*   %224 = phi i32 [ %229, %225 ], [ 0, %.preheader36.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader36preheader_196) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader36_224 = 32'd0;
	end
	/* main: %.preheader36*/
	/*   %224 = phi i32 [ %229, %225 ], [ 0, %.preheader36.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__225_201) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader36_224 = main_225_229_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader36*/
	/*   %224 = phi i32 [ %229, %225 ], [ 0, %.preheader36.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader36preheader_196) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader36_224_reg <= main_preheader36_224;
		if (start == 1'b0 && ^(main_preheader36_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader36_224_reg"); $finish; end
	end
	/* main: %.preheader36*/
	/*   %224 = phi i32 [ %229, %225 ], [ 0, %.preheader36.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__225_201) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader36_224_reg <= main_preheader36_224;
		if (start == 1'b0 && ^(main_preheader36_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader36_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader36*/
	/*   %scevgep24 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %224*/
		main_preheader36_scevgep24 = (1'd0 | (4 * main_preheader36_224_reg));
end
always @(posedge clk) begin
	/* main: %.preheader36*/
	/*   %scevgep24 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %224*/
	if ((cur_state == LEGUP_F_main_BB_preheader36_197)) begin
		main_preheader36_scevgep24_reg <= main_preheader36_scevgep24;
		if (start == 1'b0 && ^(main_preheader36_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader36_scevgep24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader36*/
	/*   %exitcond23 = icmp eq i32 %224, 6*/
		main_preheader36_exitcond23 = (main_preheader36_224_reg == 32'd6);
end
always @(posedge clk) begin
	/* main: %.preheader36*/
	/*   %exitcond23 = icmp eq i32 %224, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheader36_197)) begin
		main_preheader36_exitcond23_reg <= main_preheader36_exitcond23;
		if (start == 1'b0 && ^(main_preheader36_exitcond23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader36_exitcond23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %226 = load i32* %scevgep24, align 4*/
		main_225_226 = dec_del_bph_out_a;
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %226 = load i32* %scevgep24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__225_199)) begin
		main_225_226_reg <= main_225_226;
		if (start == 1'b0 && ^(main_225_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_226_reg"); $finish; end
	end
end
always @(*) begin
	main_225_227 = main_225_227_stage0_reg;
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %227 = mul nsw i32 %226, 255*/
	if ((cur_state == LEGUP_F_main_BB__225_200)) begin
		main_225_227_reg <= main_225_227;
		if (start == 1'b0 && ^(main_225_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_227_reg"); $finish; end
	end
	/* main: %225*/
	/*   %227 = mul nsw i32 %226, 255*/
	if ((cur_state == LEGUP_F_main_BB__225_200)) begin
		main_225_227_reg <= main_225_227;
		if (start == 1'b0 && ^(main_225_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %228 = ashr i32 %227, 8*/
		main_225_228 = ($signed(main_225_227) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %228 = ashr i32 %227, 8*/
	if ((cur_state == LEGUP_F_main_BB__225_200)) begin
		main_225_228_reg <= main_225_228;
		if (start == 1'b0 && ^(main_225_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %229 = add nsw i32 %224, 1*/
		main_225_229 = (main_preheader36_224_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %229 = add nsw i32 %224, 1*/
	if ((cur_state == LEGUP_F_main_BB__225_198)) begin
		main_225_229_reg <= main_225_229;
		if (start == 1'b0 && ^(main_225_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader37*/
	/*   %230 = phi i32 [ %241, %231 ], [ 0, %.preheader37.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader37preheader_195) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader37_230 = 32'd0;
	end
	/* main: %.preheader37*/
	/*   %230 = phi i32 [ %241, %231 ], [ 0, %.preheader37.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__231_206) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader37_230 = main_231_241_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader37*/
	/*   %230 = phi i32 [ %241, %231 ], [ 0, %.preheader37.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader37preheader_195) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader37_230_reg <= main_preheader37_230;
		if (start == 1'b0 && ^(main_preheader37_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader37_230_reg"); $finish; end
	end
	/* main: %.preheader37*/
	/*   %230 = phi i32 [ %241, %231 ], [ 0, %.preheader37.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__231_206) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader37_230_reg <= main_preheader37_230;
		if (start == 1'b0 && ^(main_preheader37_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader37_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader37*/
	/*   %scevgep21 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %230*/
		main_preheader37_scevgep21 = (1'd0 | (4 * main_preheader37_230_reg));
end
always @(posedge clk) begin
	/* main: %.preheader37*/
	/*   %scevgep21 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %230*/
	if ((cur_state == LEGUP_F_main_BB_preheader37_202)) begin
		main_preheader37_scevgep21_reg <= main_preheader37_scevgep21;
		if (start == 1'b0 && ^(main_preheader37_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader37_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader37*/
	/*   %exitcond20 = icmp eq i32 %230, 6*/
		main_preheader37_exitcond20 = (main_preheader37_230_reg == 32'd6);
end
always @(posedge clk) begin
	/* main: %.preheader37*/
	/*   %exitcond20 = icmp eq i32 %230, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheader37_202)) begin
		main_preheader37_exitcond20_reg <= main_preheader37_exitcond20;
		if (start == 1'b0 && ^(main_preheader37_exitcond20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader37_exitcond20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %scevgep22 = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %230*/
		main_231_scevgep22 = (1'd0 | (4 * main_preheader37_230_reg));
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %scevgep22 = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %230*/
	if ((cur_state == LEGUP_F_main_BB__231_203)) begin
		main_231_scevgep22_reg <= main_231_scevgep22;
		if (start == 1'b0 && ^(main_231_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_scevgep22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %232 = load i32* %scevgep22, align 4*/
		main_231_232 = dec_del_dhx_out_a;
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %232 = load i32* %scevgep22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__231_204)) begin
		main_231_232_reg <= main_231_232;
		if (start == 1'b0 && ^(main_231_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_232_reg"); $finish; end
	end
end
always @(*) begin
	main_231_233 = main_231_233_stage0_reg;
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %233 = mul nsw i32 %205, %232*/
	if ((cur_state == LEGUP_F_main_BB__231_205)) begin
		main_231_233_reg <= main_231_233;
		if (start == 1'b0 && ^(main_231_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_233_reg"); $finish; end
	end
	/* main: %231*/
	/*   %233 = mul nsw i32 %205, %232*/
	if ((cur_state == LEGUP_F_main_BB__231_205)) begin
		main_231_233_reg <= main_231_233;
		if (start == 1'b0 && ^(main_231_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %234 = ashr i32 %233, 31*/
		main_231_234 = ($signed(main_231_233) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %234 = ashr i32 %233, 31*/
	if ((cur_state == LEGUP_F_main_BB__231_205)) begin
		main_231_234_reg <= main_231_234;
		if (start == 1'b0 && ^(main_231_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %235 = and i32 %234, -256*/
		main_231_235 = (main_231_234 & -32'd256);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %235 = and i32 %234, -256*/
	if ((cur_state == LEGUP_F_main_BB__231_205)) begin
		main_231_235_reg <= main_231_235;
		if (start == 1'b0 && ^(main_231_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %236 = or i32 %235, 128*/
		main_231_236 = (main_231_235 | 32'd128);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %236 = or i32 %235, 128*/
	if ((cur_state == LEGUP_F_main_BB__231_205)) begin
		main_231_236_reg <= main_231_236;
		if (start == 1'b0 && ^(main_231_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %237 = load i32* %scevgep21, align 4*/
		main_231_237 = dec_del_bph_out_a;
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %237 = load i32* %scevgep21, align 4*/
	if ((cur_state == LEGUP_F_main_BB__231_204)) begin
		main_231_237_reg <= main_231_237;
		if (start == 1'b0 && ^(main_231_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_237_reg"); $finish; end
	end
end
always @(*) begin
	main_231_238 = main_231_238_stage0_reg;
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %238 = mul nsw i32 %237, 255*/
	if ((cur_state == LEGUP_F_main_BB__231_205)) begin
		main_231_238_reg <= main_231_238;
		if (start == 1'b0 && ^(main_231_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_238_reg"); $finish; end
	end
	/* main: %231*/
	/*   %238 = mul nsw i32 %237, 255*/
	if ((cur_state == LEGUP_F_main_BB__231_205)) begin
		main_231_238_reg <= main_231_238;
		if (start == 1'b0 && ^(main_231_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %239 = ashr i32 %238, 8*/
		main_231_239 = ($signed(main_231_238) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %239 = ashr i32 %238, 8*/
	if ((cur_state == LEGUP_F_main_BB__231_205)) begin
		main_231_239_reg <= main_231_239;
		if (start == 1'b0 && ^(main_231_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %240 = add nsw i32 %236, %239*/
		main_231_240 = (main_231_236 + main_231_239);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %240 = add nsw i32 %236, %239*/
	if ((cur_state == LEGUP_F_main_BB__231_205)) begin
		main_231_240_reg <= main_231_240;
		if (start == 1'b0 && ^(main_231_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %241 = add nsw i32 %230, 1*/
		main_231_241 = (main_preheader37_230_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %241 = add nsw i32 %230, 1*/
	if ((cur_state == LEGUP_F_main_BB__231_203)) begin
		main_231_241_reg <= main_231_241;
		if (start == 1'b0 && ^(main_231_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %242 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
		main_upzeroexitii_242 = dec_del_dhx_out_a;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %242 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_242_reg <= main_upzeroexitii_242;
		if (start == 1'b0 && ^(main_upzeroexitii_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %243 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
		main_upzeroexitii_243 = dec_del_dhx_out_b;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %243 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_243_reg <= main_upzeroexitii_243;
		if (start == 1'b0 && ^(main_upzeroexitii_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %244 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4*/
		main_upzeroexitii_244 = dec_del_dhx_out_a;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %244 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_211)) begin
		main_upzeroexitii_244_reg <= main_upzeroexitii_244;
		if (start == 1'b0 && ^(main_upzeroexitii_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %245 = shl nsw i32 %dec_ah1.0, 2*/
		main_upzeroexitii_245 = (main_87_dec_ah10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %245 = shl nsw i32 %dec_ah1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_209)) begin
		main_upzeroexitii_245_reg <= main_upzeroexitii_245;
		if (start == 1'b0 && ^(main_upzeroexitii_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_245_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexitii_246 = main_upzeroexitii_246_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %246 = mul nsw i32 %222, %dec_ph1.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_246_reg <= main_upzeroexitii_246;
		if (start == 1'b0 && ^(main_upzeroexitii_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_246_reg"); $finish; end
	end
	/* main: %upzero.exit.i.i*/
	/*   %246 = mul nsw i32 %222, %dec_ph1.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_246_reg <= main_upzeroexitii_246;
		if (start == 1'b0 && ^(main_upzeroexitii_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %247 = icmp sgt i32 %246, -1*/
		main_upzeroexitii_247 = ($signed(main_upzeroexitii_246) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %247 = icmp sgt i32 %246, -1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_247_reg <= main_upzeroexitii_247;
		if (start == 1'b0 && ^(main_upzeroexitii_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %248 = sub nsw i32 0, %245*/
		main_upzeroexitii_248 = (32'd0 - main_upzeroexitii_245);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %248 = sub nsw i32 0, %245*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_209)) begin
		main_upzeroexitii_248_reg <= main_upzeroexitii_248;
		if (start == 1'b0 && ^(main_upzeroexitii_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %.65 = select i1 %247, i32 %248, i32 %245*/
		main_upzeroexitii_65 = (main_upzeroexitii_247 ? main_upzeroexitii_248_reg : main_upzeroexitii_245_reg);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %.65 = select i1 %247, i32 %248, i32 %245*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_65_reg <= main_upzeroexitii_65;
		if (start == 1'b0 && ^(main_upzeroexitii_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %249 = ashr i32 %.65, 7*/
		main_upzeroexitii_249 = ($signed(main_upzeroexitii_65) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %249 = ashr i32 %.65, 7*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_249_reg <= main_upzeroexitii_249;
		if (start == 1'b0 && ^(main_upzeroexitii_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_249_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexitii_250 = main_upzeroexitii_250_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %250 = mul nsw i32 %222, %dec_ph2.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_250_reg <= main_upzeroexitii_250;
		if (start == 1'b0 && ^(main_upzeroexitii_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_250_reg"); $finish; end
	end
	/* main: %upzero.exit.i.i*/
	/*   %250 = mul nsw i32 %222, %dec_ph2.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_250_reg <= main_upzeroexitii_250;
		if (start == 1'b0 && ^(main_upzeroexitii_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %251 = ashr i32 %250, 31*/
		main_upzeroexitii_251 = ($signed(main_upzeroexitii_250) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %251 = ashr i32 %250, 31*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_251_reg <= main_upzeroexitii_251;
		if (start == 1'b0 && ^(main_upzeroexitii_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %252 = and i32 %251, -256*/
		main_upzeroexitii_252 = (main_upzeroexitii_251 & -32'd256);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %252 = and i32 %251, -256*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_252_reg <= main_upzeroexitii_252;
		if (start == 1'b0 && ^(main_upzeroexitii_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %253 = or i32 %252, 128*/
		main_upzeroexitii_253 = (main_upzeroexitii_252 | 32'd128);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %253 = or i32 %252, 128*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_253_reg <= main_upzeroexitii_253;
		if (start == 1'b0 && ^(main_upzeroexitii_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %wd4.0.i.i.i = add nsw i32 %249, %253*/
		main_upzeroexitii_wd40iii = (main_upzeroexitii_249 + main_upzeroexitii_253);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %wd4.0.i.i.i = add nsw i32 %249, %253*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_wd40iii_reg <= main_upzeroexitii_wd40iii;
		if (start == 1'b0 && ^(main_upzeroexitii_wd40iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_wd40iii_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexitii_254 = main_upzeroexitii_254_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %254 = mul nsw i32 %dec_ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_254_reg <= main_upzeroexitii_254;
		if (start == 1'b0 && ^(main_upzeroexitii_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_254_reg"); $finish; end
	end
	/* main: %upzero.exit.i.i*/
	/*   %254 = mul nsw i32 %dec_ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_254_reg <= main_upzeroexitii_254;
		if (start == 1'b0 && ^(main_upzeroexitii_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %255 = ashr i32 %254, 7*/
		main_upzeroexitii_255 = ($signed(main_upzeroexitii_254) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %255 = ashr i32 %254, 7*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_255_reg <= main_upzeroexitii_255;
		if (start == 1'b0 && ^(main_upzeroexitii_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %256 = add nsw i32 %wd4.0.i.i.i, %255*/
		main_upzeroexitii_256 = (main_upzeroexitii_wd40iii + main_upzeroexitii_255);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %256 = add nsw i32 %wd4.0.i.i.i, %255*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_256_reg <= main_upzeroexitii_256;
		if (start == 1'b0 && ^(main_upzeroexitii_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %257 = icmp sgt i32 %256, 12288*/
		main_upzeroexitii_257 = ($signed(main_upzeroexitii_256) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %257 = icmp sgt i32 %256, 12288*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		main_upzeroexitii_257_reg <= main_upzeroexitii_257;
		if (start == 1'b0 && ^(main_upzeroexitii_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %258*/
	/*   %259 = icmp slt i32 %256, -12288*/
		main_258_259 = ($signed(main_upzeroexitii_256_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %258*/
	/*   %259 = icmp slt i32 %256, -12288*/
	if ((cur_state == LEGUP_F_main_BB__258_214)) begin
		main_258_259_reg <= main_258_259;
		if (start == 1'b0 && ^(main_258_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_258_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %258*/
	/*   %.66 = select i1 %259, i32 -12288, i32 %256*/
		main_258_66 = (main_258_259 ? -32'd12288 : main_upzeroexitii_256_reg);
end
always @(posedge clk) begin
	/* main: %258*/
	/*   %.66 = select i1 %259, i32 -12288, i32 %256*/
	if ((cur_state == LEGUP_F_main_BB__258_214)) begin
		main_258_66_reg <= main_258_66;
		if (start == 1'b0 && ^(main_258_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_258_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit.i.i*/
	/*   %apl2.1.i.i.i = phi i32 [ 12288, %upzero.exit.i.i ], [ %.66, %258 ]*/
	if ((((cur_state == LEGUP_F_main_BB_upzeroexitii_213) & (memory_controller_waitrequest == 1'd0)) & (main_upzeroexitii_257_reg == 1'd1))) begin
		main_uppol2exitii_apl21iii = 32'd12288;
	end
	/* main: %uppol2.exit.i.i*/
	/*   %apl2.1.i.i.i = phi i32 [ 12288, %upzero.exit.i.i ], [ %.66, %258 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__258_214) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_uppol2exitii_apl21iii = main_258_66;
	end
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %apl2.1.i.i.i = phi i32 [ 12288, %upzero.exit.i.i ], [ %.66, %258 ]*/
	if ((((cur_state == LEGUP_F_main_BB_upzeroexitii_213) & (memory_controller_waitrequest == 1'd0)) & (main_upzeroexitii_257_reg == 1'd1))) begin
		main_uppol2exitii_apl21iii_reg <= main_uppol2exitii_apl21iii;
		if (start == 1'b0 && ^(main_uppol2exitii_apl21iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_apl21iii_reg"); $finish; end
	end
	/* main: %uppol2.exit.i.i*/
	/*   %apl2.1.i.i.i = phi i32 [ 12288, %upzero.exit.i.i ], [ %.66, %258 ]*/
	if (((cur_state == LEGUP_F_main_BB__258_214) & (memory_controller_waitrequest == 1'd0))) begin
		main_uppol2exitii_apl21iii_reg <= main_uppol2exitii_apl21iii;
		if (start == 1'b0 && ^(main_uppol2exitii_apl21iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_apl21iii_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exitii_260 = main_uppol2exitii_260_stage0_reg;
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %260 = mul nsw i32 %dec_ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_216)) begin
		main_uppol2exitii_260_reg <= main_uppol2exitii_260;
		if (start == 1'b0 && ^(main_uppol2exitii_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_260_reg"); $finish; end
	end
	/* main: %uppol2.exit.i.i*/
	/*   %260 = mul nsw i32 %dec_ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_216)) begin
		main_uppol2exitii_260_reg <= main_uppol2exitii_260;
		if (start == 1'b0 && ^(main_uppol2exitii_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit.i.i*/
	/*   %261 = ashr i32 %260, 8*/
		main_uppol2exitii_261 = ($signed(main_uppol2exitii_260) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %261 = ashr i32 %260, 8*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_216)) begin
		main_uppol2exitii_261_reg <= main_uppol2exitii_261;
		if (start == 1'b0 && ^(main_uppol2exitii_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit.i.i*/
	/*   %262 = ashr i32 %246, 31*/
		main_uppol2exitii_262 = ($signed(main_upzeroexitii_246_reg) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %262 = ashr i32 %246, 31*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_215)) begin
		main_uppol2exitii_262_reg <= main_uppol2exitii_262;
		if (start == 1'b0 && ^(main_uppol2exitii_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit.i.i*/
	/*   %263 = and i32 %262, -384*/
		main_uppol2exitii_263 = (main_uppol2exitii_262 & -32'd384);
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %263 = and i32 %262, -384*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_215)) begin
		main_uppol2exitii_263_reg <= main_uppol2exitii_263;
		if (start == 1'b0 && ^(main_uppol2exitii_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit.i.i*/
	/*   %264 = add nsw i32 %263, 192*/
		main_uppol2exitii_264 = (main_uppol2exitii_263 + 32'd192);
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %264 = add nsw i32 %263, 192*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_215)) begin
		main_uppol2exitii_264_reg <= main_uppol2exitii_264;
		if (start == 1'b0 && ^(main_uppol2exitii_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit.i.i*/
	/*   %apl1.0.i.i.i = add nsw i32 %261, %264*/
		main_uppol2exitii_apl10iii = (main_uppol2exitii_261 + main_uppol2exitii_264_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %apl1.0.i.i.i = add nsw i32 %261, %264*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_216)) begin
		main_uppol2exitii_apl10iii_reg <= main_uppol2exitii_apl10iii;
		if (start == 1'b0 && ^(main_uppol2exitii_apl10iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_apl10iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit.i.i*/
	/*   %265 = sub nsw i32 15360, %apl2.1.i.i.i*/
		main_uppol2exitii_265 = (32'd15360 - main_uppol2exitii_apl21iii_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %265 = sub nsw i32 15360, %apl2.1.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_215)) begin
		main_uppol2exitii_265_reg <= main_uppol2exitii_265;
		if (start == 1'b0 && ^(main_uppol2exitii_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit.i.i*/
	/*   %266 = icmp sgt i32 %apl1.0.i.i.i, %265*/
		main_uppol2exitii_266 = ($signed(main_uppol2exitii_apl10iii) > $signed(main_uppol2exitii_265_reg));
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %266 = icmp sgt i32 %apl1.0.i.i.i, %265*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_216)) begin
		main_uppol2exitii_266_reg <= main_uppol2exitii_266;
		if (start == 1'b0 && ^(main_uppol2exitii_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit.i.i*/
	/*   %267 = add nsw i32 %201, %205*/
		main_uppol2exitii_267 = (main_filtezexit8ii_201_reg + main_filtezexit8ii_205_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %267 = add nsw i32 %201, %205*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_215)) begin
		main_uppol2exitii_267_reg <= main_uppol2exitii_267;
		if (start == 1'b0 && ^(main_uppol2exitii_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit.i.i*/
	/*   %268 = sub nsw i32 %120, %267*/
		main_uppol2exitii_268 = (main_filtezexitii_120_reg - main_uppol2exitii_267);
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %268 = sub nsw i32 %120, %267*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_215)) begin
		main_uppol2exitii_268_reg <= main_uppol2exitii_268;
		if (start == 1'b0 && ^(main_uppol2exitii_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit.i.i*/
	/*   %269 = add nsw i32 %120, %267*/
		main_uppol2exitii_269 = (main_filtezexitii_120_reg + main_uppol2exitii_267);
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %269 = add nsw i32 %120, %267*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_215)) begin
		main_uppol2exitii_269_reg <= main_uppol2exitii_269;
		if (start == 1'b0 && ^(main_uppol2exitii_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_269_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exitii_270 = main_uppol2exitii_270_stage0_reg;
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %270 = mul nsw i32 %268, 12*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_216)) begin
		main_uppol2exitii_270_reg <= main_uppol2exitii_270;
		if (start == 1'b0 && ^(main_uppol2exitii_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_270_reg"); $finish; end
	end
	/* main: %uppol2.exit.i.i*/
	/*   %270 = mul nsw i32 %268, 12*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_216)) begin
		main_uppol2exitii_270_reg <= main_uppol2exitii_270;
		if (start == 1'b0 && ^(main_uppol2exitii_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_270_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exitii_271 = main_uppol2exitii_271_stage0_reg;
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %271 = mul nsw i32 %269, -44*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_216)) begin
		main_uppol2exitii_271_reg <= main_uppol2exitii_271;
		if (start == 1'b0 && ^(main_uppol2exitii_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_271_reg"); $finish; end
	end
	/* main: %uppol2.exit.i.i*/
	/*   %271 = mul nsw i32 %269, -44*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exitii_216)) begin
		main_uppol2exitii_271_reg <= main_uppol2exitii_271;
		if (start == 1'b0 && ^(main_uppol2exitii_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exitii_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %xa2.0.i.i = phi i32 [ %271, %uppol2.exit.i.i ], [ %285, %275 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exitii_216) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_xa20ii = main_uppol2exitii_271;
	end
	/* main: %272*/
	/*   %xa2.0.i.i = phi i32 [ %271, %uppol2.exit.i.i ], [ %285, %275 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__275_222) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_272_xa20ii = main_275_285;
	end
end
always @(posedge clk) begin
	/* main: %272*/
	/*   %xa2.0.i.i = phi i32 [ %271, %uppol2.exit.i.i ], [ %285, %275 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exitii_216) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_xa20ii_reg <= main_272_xa20ii;
		if (start == 1'b0 && ^(main_272_xa20ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_xa20ii_reg"); $finish; end
	end
	/* main: %272*/
	/*   %xa2.0.i.i = phi i32 [ %271, %uppol2.exit.i.i ], [ %285, %275 ]*/
	if (((cur_state == LEGUP_F_main_BB__275_222) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_xa20ii_reg <= main_272_xa20ii;
		if (start == 1'b0 && ^(main_272_xa20ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_xa20ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %xa1.0.i.i = phi i32 [ %270, %uppol2.exit.i.i ], [ %281, %275 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exitii_216) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_xa10ii = main_uppol2exitii_270;
	end
	/* main: %272*/
	/*   %xa1.0.i.i = phi i32 [ %270, %uppol2.exit.i.i ], [ %281, %275 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__275_222) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_272_xa10ii = main_275_281;
	end
end
always @(posedge clk) begin
	/* main: %272*/
	/*   %xa1.0.i.i = phi i32 [ %270, %uppol2.exit.i.i ], [ %281, %275 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exitii_216) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_xa10ii_reg <= main_272_xa10ii;
		if (start == 1'b0 && ^(main_272_xa10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_xa10ii_reg"); $finish; end
	end
	/* main: %272*/
	/*   %xa1.0.i.i = phi i32 [ %270, %uppol2.exit.i.i ], [ %281, %275 ]*/
	if (((cur_state == LEGUP_F_main_BB__275_222) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_xa10ii_reg <= main_272_xa10ii;
		if (start == 1'b0 && ^(main_272_xa10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_xa10ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %273 = phi i32 [ 0, %uppol2.exit.i.i ], [ %286, %275 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exitii_216) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_273 = 32'd0;
	end
	/* main: %272*/
	/*   %273 = phi i32 [ 0, %uppol2.exit.i.i ], [ %286, %275 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__275_222) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_272_273 = main_275_286_reg;
	end
end
always @(posedge clk) begin
	/* main: %272*/
	/*   %273 = phi i32 [ 0, %uppol2.exit.i.i ], [ %286, %275 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exitii_216) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_273_reg <= main_272_273;
		if (start == 1'b0 && ^(main_272_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_273_reg"); $finish; end
	end
	/* main: %272*/
	/*   %273 = phi i32 [ 0, %uppol2.exit.i.i ], [ %286, %275 ]*/
	if (((cur_state == LEGUP_F_main_BB__275_222) & (memory_controller_waitrequest == 1'd0))) begin
		main_272_273_reg <= main_272_273;
		if (start == 1'b0 && ^(main_272_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %274 = shl i32 %273, 1*/
		main_272_274 = (main_272_273_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %272*/
	/*   %274 = shl i32 %273, 1*/
	if ((cur_state == LEGUP_F_main_BB__272_217)) begin
		main_272_274_reg <= main_272_274;
		if (start == 1'b0 && ^(main_272_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %exitcond25 = icmp eq i32 %273, 10*/
		main_272_exitcond25 = (main_272_273_reg == 32'd10);
end
always @(posedge clk) begin
	/* main: %272*/
	/*   %exitcond25 = icmp eq i32 %273, 10*/
	if ((cur_state == LEGUP_F_main_BB__272_217)) begin
		main_272_exitcond25_reg <= main_272_exitcond25;
		if (start == 1'b0 && ^(main_272_exitcond25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_exitcond25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %276 = add i32 %274, 3*/
		main_275_276 = (main_272_274_reg + 32'd3);
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %276 = add i32 %274, 3*/
	if ((cur_state == LEGUP_F_main_BB__275_218)) begin
		main_275_276_reg <= main_275_276;
		if (start == 1'b0 && ^(main_275_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %scevgep29 = getelementptr [24 x i32]* @h, i32 0, i32 %276*/
		main_275_scevgep29 = (`TAG_g_h_a | (4 * main_275_276_reg));
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %scevgep29 = getelementptr [24 x i32]* @h, i32 0, i32 %276*/
	if ((cur_state == LEGUP_F_main_BB__275_219)) begin
		main_275_scevgep29_reg <= main_275_scevgep29;
		if (start == 1'b0 && ^(main_275_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_scevgep29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %277 = add i32 %274, 2*/
		main_275_277 = (main_272_274_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %277 = add i32 %274, 2*/
	if ((cur_state == LEGUP_F_main_BB__275_218)) begin
		main_275_277_reg <= main_275_277;
		if (start == 1'b0 && ^(main_275_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_277_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %h_ptr.0.i.i = getelementptr [24 x i32]* @h, i32 0, i32 %277*/
		main_275_h_ptr0ii = (`TAG_g_h_a | (4 * main_275_277_reg));
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %h_ptr.0.i.i = getelementptr [24 x i32]* @h, i32 0, i32 %277*/
	if ((cur_state == LEGUP_F_main_BB__275_219)) begin
		main_275_h_ptr0ii_reg <= main_275_h_ptr0ii;
		if (start == 1'b0 && ^(main_275_h_ptr0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_h_ptr0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %ac_ptr.0.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %273*/
		main_275_ac_ptr0ii = (1'd0 | (4 * main_272_273_reg));
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %ac_ptr.0.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %273*/
	if ((cur_state == LEGUP_F_main_BB__275_218)) begin
		main_275_ac_ptr0ii_reg <= main_275_ac_ptr0ii;
		if (start == 1'b0 && ^(main_275_ac_ptr0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_ac_ptr0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %ad_ptr.0.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %273*/
		main_275_ad_ptr0ii = (1'd0 | (4 * main_272_273_reg));
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %ad_ptr.0.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %273*/
	if ((cur_state == LEGUP_F_main_BB__275_218)) begin
		main_275_ad_ptr0ii_reg <= main_275_ad_ptr0ii;
		if (start == 1'b0 && ^(main_275_ad_ptr0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_ad_ptr0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %278 = load i32* %ac_ptr.0.i.i, align 4*/
		main_275_278 = accumc_out_a;
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %278 = load i32* %ac_ptr.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_219)) begin
		main_275_278_reg <= main_275_278;
		if (start == 1'b0 && ^(main_275_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %279 = load i32* %h_ptr.0.i.i, align 4*/
		main_275_279 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %279 = load i32* %h_ptr.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_221)) begin
		main_275_279_reg <= main_275_279;
		if (start == 1'b0 && ^(main_275_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_279_reg"); $finish; end
	end
end
always @(*) begin
	main_275_280 = main_275_280_stage0_reg;
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %280 = mul nsw i32 %278, %279*/
	if ((cur_state == LEGUP_F_main_BB__275_222)) begin
		main_275_280_reg <= main_275_280;
		if (start == 1'b0 && ^(main_275_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_280_reg"); $finish; end
	end
	/* main: %275*/
	/*   %280 = mul nsw i32 %278, %279*/
	if ((cur_state == LEGUP_F_main_BB__275_222)) begin
		main_275_280_reg <= main_275_280;
		if (start == 1'b0 && ^(main_275_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_280_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %281 = add nsw i32 %xa1.0.i.i, %280*/
		main_275_281 = (main_272_xa10ii_reg + main_275_280);
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %281 = add nsw i32 %xa1.0.i.i, %280*/
	if ((cur_state == LEGUP_F_main_BB__275_222)) begin
		main_275_281_reg <= main_275_281;
		if (start == 1'b0 && ^(main_275_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %282 = load i32* %ad_ptr.0.i.i, align 4*/
		main_275_282 = accumd_out_a;
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %282 = load i32* %ad_ptr.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_219)) begin
		main_275_282_reg <= main_275_282;
		if (start == 1'b0 && ^(main_275_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %283 = load i32* %scevgep29, align 4*/
		main_275_283 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %283 = load i32* %scevgep29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_221)) begin
		main_275_283_reg <= main_275_283;
		if (start == 1'b0 && ^(main_275_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_283_reg"); $finish; end
	end
end
always @(*) begin
	main_275_284 = main_275_284_stage0_reg;
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %284 = mul nsw i32 %282, %283*/
	if ((cur_state == LEGUP_F_main_BB__275_222)) begin
		main_275_284_reg <= main_275_284;
		if (start == 1'b0 && ^(main_275_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_284_reg"); $finish; end
	end
	/* main: %275*/
	/*   %284 = mul nsw i32 %282, %283*/
	if ((cur_state == LEGUP_F_main_BB__275_222)) begin
		main_275_284_reg <= main_275_284;
		if (start == 1'b0 && ^(main_275_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_284_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %285 = add nsw i32 %xa2.0.i.i, %284*/
		main_275_285 = (main_272_xa20ii_reg + main_275_284);
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %285 = add nsw i32 %xa2.0.i.i, %284*/
	if ((cur_state == LEGUP_F_main_BB__275_222)) begin
		main_275_285_reg <= main_275_285;
		if (start == 1'b0 && ^(main_275_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %275*/
	/*   %286 = add nsw i32 %273, 1*/
		main_275_286 = (main_272_273_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %286 = add nsw i32 %273, 1*/
	if ((cur_state == LEGUP_F_main_BB__275_218)) begin
		main_275_286_reg <= main_275_286;
		if (start == 1'b0 && ^(main_275_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_275_286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %287*/
	/*   %288 = sub nsw i32 0, %265*/
		main_287_288 = (32'd0 - main_uppol2exitii_265_reg);
end
always @(posedge clk) begin
	/* main: %287*/
	/*   %288 = sub nsw i32 0, %265*/
	if ((cur_state == LEGUP_F_main_BB__287_223)) begin
		main_287_288_reg <= main_287_288;
		if (start == 1'b0 && ^(main_287_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %287*/
	/*   %289 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4*/
		main_287_289 = accumc_out_a;
end
always @(posedge clk) begin
	/* main: %287*/
	/*   %289 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__287_224)) begin
		main_287_289_reg <= main_287_289;
		if (start == 1'b0 && ^(main_287_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %287*/
	/*   %290 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4*/
		main_287_290 = accumd_out_a;
end
always @(posedge clk) begin
	/* main: %287*/
	/*   %290 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__287_224)) begin
		main_287_290_reg <= main_287_290;
		if (start == 1'b0 && ^(main_287_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %291*/
	/*   %292 = phi i32 [ 0, %287 ], [ %298, %295 ]*/
	if (((cur_state == LEGUP_F_main_BB__287_224) & (memory_controller_waitrequest == 1'd0))) begin
		main_291_292 = 32'd0;
	end
	/* main: %291*/
	/*   %292 = phi i32 [ 0, %287 ], [ %298, %295 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__295_228) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_291_292 = main_295_298_reg;
	end
end
always @(posedge clk) begin
	/* main: %291*/
	/*   %292 = phi i32 [ 0, %287 ], [ %298, %295 ]*/
	if (((cur_state == LEGUP_F_main_BB__287_224) & (memory_controller_waitrequest == 1'd0))) begin
		main_291_292_reg <= main_291_292;
		if (start == 1'b0 && ^(main_291_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_291_292_reg"); $finish; end
	end
	/* main: %291*/
	/*   %292 = phi i32 [ 0, %287 ], [ %298, %295 ]*/
	if (((cur_state == LEGUP_F_main_BB__295_228) & (memory_controller_waitrequest == 1'd0))) begin
		main_291_292_reg <= main_291_292;
		if (start == 1'b0 && ^(main_291_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_291_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %291*/
	/*   %293 = sub i32 10, %292*/
		main_291_293 = (32'd10 - main_291_292_reg);
end
always @(posedge clk) begin
	/* main: %291*/
	/*   %293 = sub i32 10, %292*/
	if ((cur_state == LEGUP_F_main_BB__291_225)) begin
		main_291_293_reg <= main_291_293;
		if (start == 1'b0 && ^(main_291_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_291_293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %291*/
	/*   %294 = sub i32 9, %292*/
		main_291_294 = (32'd9 - main_291_292_reg);
end
always @(posedge clk) begin
	/* main: %291*/
	/*   %294 = sub i32 9, %292*/
	if ((cur_state == LEGUP_F_main_BB__291_225)) begin
		main_291_294_reg <= main_291_294;
		if (start == 1'b0 && ^(main_291_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_291_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %291*/
	/*   %exitcond30 = icmp eq i32 %292, 10*/
		main_291_exitcond30 = (main_291_292_reg == 32'd10);
end
always @(posedge clk) begin
	/* main: %291*/
	/*   %exitcond30 = icmp eq i32 %292, 10*/
	if ((cur_state == LEGUP_F_main_BB__291_225)) begin
		main_291_exitcond30_reg <= main_291_exitcond30;
		if (start == 1'b0 && ^(main_291_exitcond30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_291_exitcond30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %295*/
	/*   %ad_ptr1.0.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %294*/
		main_295_ad_ptr10ii = (1'd0 | (4 * main_291_294_reg));
end
always @(posedge clk) begin
	/* main: %295*/
	/*   %ad_ptr1.0.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %294*/
	if ((cur_state == LEGUP_F_main_BB__295_226)) begin
		main_295_ad_ptr10ii_reg <= main_295_ad_ptr10ii;
		if (start == 1'b0 && ^(main_295_ad_ptr10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_295_ad_ptr10ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %295*/
	/*   %ac_ptr.1.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %293*/
		main_295_ac_ptr1ii = (1'd0 | (4 * main_291_293_reg));
end
always @(posedge clk) begin
	/* main: %295*/
	/*   %ac_ptr.1.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %293*/
	if ((cur_state == LEGUP_F_main_BB__295_226)) begin
		main_295_ac_ptr1ii_reg <= main_295_ac_ptr1ii;
		if (start == 1'b0 && ^(main_295_ac_ptr1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_295_ac_ptr1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %295*/
	/*   %ac_ptr1.0.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %294*/
		main_295_ac_ptr10ii = (1'd0 | (4 * main_291_294_reg));
end
always @(posedge clk) begin
	/* main: %295*/
	/*   %ac_ptr1.0.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %294*/
	if ((cur_state == LEGUP_F_main_BB__295_226)) begin
		main_295_ac_ptr10ii_reg <= main_295_ac_ptr10ii;
		if (start == 1'b0 && ^(main_295_ac_ptr10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_295_ac_ptr10ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %295*/
	/*   %ad_ptr.1.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %293*/
		main_295_ad_ptr1ii = (1'd0 | (4 * main_291_293_reg));
end
always @(posedge clk) begin
	/* main: %295*/
	/*   %ad_ptr.1.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %293*/
	if ((cur_state == LEGUP_F_main_BB__295_226)) begin
		main_295_ad_ptr1ii_reg <= main_295_ad_ptr1ii;
		if (start == 1'b0 && ^(main_295_ad_ptr1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_295_ad_ptr1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %295*/
	/*   %296 = load i32* %ac_ptr1.0.i.i, align 4*/
		main_295_296 = accumc_out_a;
end
always @(posedge clk) begin
	/* main: %295*/
	/*   %296 = load i32* %ac_ptr1.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__295_227)) begin
		main_295_296_reg <= main_295_296;
		if (start == 1'b0 && ^(main_295_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_295_296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %295*/
	/*   %297 = load i32* %ad_ptr1.0.i.i, align 4*/
		main_295_297 = accumd_out_a;
end
always @(posedge clk) begin
	/* main: %295*/
	/*   %297 = load i32* %ad_ptr1.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__295_227)) begin
		main_295_297_reg <= main_295_297;
		if (start == 1'b0 && ^(main_295_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_295_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %295*/
	/*   %298 = add nsw i32 %292, 1*/
		main_295_298 = (main_291_292_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %295*/
	/*   %298 = add nsw i32 %292, 1*/
	if ((cur_state == LEGUP_F_main_BB__295_226)) begin
		main_295_298_reg <= main_295_298;
		if (start == 1'b0 && ^(main_295_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_295_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %.apl1.0.i.i.i = select i1 %266, i32 %265, i32 %apl1.0.i.i.i*/
		main_decodeexiti_apl10iii = (main_uppol2exitii_266_reg ? main_uppol2exitii_265_reg : main_uppol2exitii_apl10iii_reg);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %.apl1.0.i.i.i = select i1 %266, i32 %265, i32 %apl1.0.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_229)) begin
		main_decodeexiti_apl10iii_reg <= main_decodeexiti_apl10iii;
		if (start == 1'b0 && ^(main_decodeexiti_apl10iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_apl10iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %299 = icmp slt i32 %.apl1.0.i.i.i, %288*/
		main_decodeexiti_299 = ($signed(main_decodeexiti_apl10iii) < $signed(main_287_288_reg));
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %299 = icmp slt i32 %.apl1.0.i.i.i, %288*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_229)) begin
		main_decodeexiti_299_reg <= main_decodeexiti_299;
		if (start == 1'b0 && ^(main_decodeexiti_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_299_reg"); $finish; end
	end
end
always @(*) begin
	main_decodeexiti_300 = main_decodeexiti_300_stage0_reg;
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %300 = mul nsw i32 %289, -44*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		main_decodeexiti_300_reg <= main_decodeexiti_300;
		if (start == 1'b0 && ^(main_decodeexiti_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_300_reg"); $finish; end
	end
	/* main: %decode.exit.i*/
	/*   %300 = mul nsw i32 %289, -44*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		main_decodeexiti_300_reg <= main_decodeexiti_300;
		if (start == 1'b0 && ^(main_decodeexiti_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_300_reg"); $finish; end
	end
end
always @(*) begin
	main_decodeexiti_301 = main_decodeexiti_301_stage0_reg;
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %301 = mul nsw i32 %290, 12*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		main_decodeexiti_301_reg <= main_decodeexiti_301;
		if (start == 1'b0 && ^(main_decodeexiti_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_301_reg"); $finish; end
	end
	/* main: %decode.exit.i*/
	/*   %301 = mul nsw i32 %290, 12*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		main_decodeexiti_301_reg <= main_decodeexiti_301;
		if (start == 1'b0 && ^(main_decodeexiti_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %apl1.2.i.i.i = select i1 %299, i32 %288, i32 %.apl1.0.i.i.i*/
		main_decodeexiti_apl12iii = (main_decodeexiti_299 ? main_287_288_reg : main_decodeexiti_apl10iii);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %apl1.2.i.i.i = select i1 %299, i32 %288, i32 %.apl1.0.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_229)) begin
		main_decodeexiti_apl12iii_reg <= main_decodeexiti_apl12iii;
		if (start == 1'b0 && ^(main_decodeexiti_apl12iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_apl12iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %302 = add nsw i32 %xa1.0.i.i, %300*/
		main_decodeexiti_302 = (main_272_xa10ii_reg + main_decodeexiti_300);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %302 = add nsw i32 %xa1.0.i.i, %300*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		main_decodeexiti_302_reg <= main_decodeexiti_302;
		if (start == 1'b0 && ^(main_decodeexiti_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_302_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %303 = ashr i32 %302, 14*/
		main_decodeexiti_303 = ($signed(main_decodeexiti_302) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %303 = ashr i32 %302, 14*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		main_decodeexiti_303_reg <= main_decodeexiti_303;
		if (start == 1'b0 && ^(main_decodeexiti_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %304 = add nsw i32 %xa2.0.i.i, %301*/
		main_decodeexiti_304 = (main_272_xa20ii_reg + main_decodeexiti_301);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %304 = add nsw i32 %xa2.0.i.i, %301*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		main_decodeexiti_304_reg <= main_decodeexiti_304;
		if (start == 1'b0 && ^(main_decodeexiti_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %305 = ashr i32 %304, 14*/
		main_decodeexiti_305 = ($signed(main_decodeexiti_304) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %305 = ashr i32 %304, 14*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		main_decodeexiti_305_reg <= main_decodeexiti_305;
		if (start == 1'b0 && ^(main_decodeexiti_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %indvar.next36 = add i32 %indvar35, 1*/
		main_decodeexiti_indvarnext36 = (main_87_indvar35_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %indvar.next36 = add i32 %indvar35, 1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_229)) begin
		main_decodeexiti_indvarnext36_reg <= main_decodeexiti_indvarnext36;
		if (start == 1'b0 && ^(main_decodeexiti_indvarnext36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_indvarnext36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %306 = phi i32 [ %312, %307 ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_113) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_306 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %306 = phi i32 [ %312, %307 ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__307_235) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_adpcm_mainexit_306 = main_307_312_reg;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %306 = phi i32 [ %312, %307 ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_113) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_306_reg <= main_adpcm_mainexit_306;
		if (start == 1'b0 && ^(main_adpcm_mainexit_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_306_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %306 = phi i32 [ %312, %307 ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__307_235) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_306_reg <= main_adpcm_mainexit_306;
		if (start == 1'b0 && ^(main_adpcm_mainexit_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.0 = phi i32 [ %.main_result.0, %307 ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_113) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result0 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.0 = phi i32 [ %.main_result.0, %307 ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__307_235) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_adpcm_mainexit_main_result0 = main_307_main_result0;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.0 = phi i32 [ %.main_result.0, %307 ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_113) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result0_reg <= main_adpcm_mainexit_main_result0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result0_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.0 = phi i32 [ %.main_result.0, %307 ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__307_235) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result0_reg <= main_adpcm_mainexit_main_result0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %306, 50*/
		main_adpcm_mainexit_exitcond = (main_adpcm_mainexit_306_reg == 32'd50);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %306, 50*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_232)) begin
		main_adpcm_mainexit_exitcond_reg <= main_adpcm_mainexit_exitcond;
		if (start == 1'b0 && ^(main_adpcm_mainexit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %307*/
	/*   %scevgep6 = getelementptr [100 x i32]* @compressed, i32 0, i32 %306*/
		main_307_scevgep6 = (1'd0 | (4 * main_adpcm_mainexit_306_reg));
end
always @(posedge clk) begin
	/* main: %307*/
	/*   %scevgep6 = getelementptr [100 x i32]* @compressed, i32 0, i32 %306*/
	if ((cur_state == LEGUP_F_main_BB__307_234)) begin
		main_307_scevgep6_reg <= main_307_scevgep6;
		if (start == 1'b0 && ^(main_307_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_307_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %307*/
	/*   %scevgep5 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %306*/
		main_307_scevgep5 = (1'd0 | (4 * main_adpcm_mainexit_306_reg));
end
always @(posedge clk) begin
	/* main: %307*/
	/*   %scevgep5 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %306*/
	if ((cur_state == LEGUP_F_main_BB__307_234)) begin
		main_307_scevgep5_reg <= main_307_scevgep5;
		if (start == 1'b0 && ^(main_307_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_307_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %307*/
	/*   %308 = load i32* %scevgep6, align 4*/
		main_307_308 = compressed_out_a;
end
always @(posedge clk) begin
	/* main: %307*/
	/*   %308 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__307_235)) begin
		main_307_308_reg <= main_307_308;
		if (start == 1'b0 && ^(main_307_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_307_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %307*/
	/*   %309 = load i32* %scevgep5, align 4*/
		main_307_309 = test_compressed_out_a;
end
always @(posedge clk) begin
	/* main: %307*/
	/*   %309 = load i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_main_BB__307_235)) begin
		main_307_309_reg <= main_307_309;
		if (start == 1'b0 && ^(main_307_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_307_309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %307*/
	/*   %310 = icmp eq i32 %308, %309*/
		main_307_310 = (main_307_308 == main_307_309);
end
always @(posedge clk) begin
	/* main: %307*/
	/*   %310 = icmp eq i32 %308, %309*/
	if ((cur_state == LEGUP_F_main_BB__307_235)) begin
		main_307_310_reg <= main_307_310;
		if (start == 1'b0 && ^(main_307_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_307_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %307*/
	/*   %311 = zext i1 %310 to i32*/
		main_307_311 = main_307_310;
end
always @(posedge clk) begin
	/* main: %307*/
	/*   %311 = zext i1 %310 to i32*/
	if ((cur_state == LEGUP_F_main_BB__307_235)) begin
		main_307_311_reg <= main_307_311;
		if (start == 1'b0 && ^(main_307_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_307_311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %307*/
	/*   %.main_result.0 = add nsw i32 %main_result.0, %311*/
		main_307_main_result0 = (main_adpcm_mainexit_main_result0_reg + main_307_311);
end
always @(posedge clk) begin
	/* main: %307*/
	/*   %.main_result.0 = add nsw i32 %main_result.0, %311*/
	if ((cur_state == LEGUP_F_main_BB__307_235)) begin
		main_307_main_result0_reg <= main_307_main_result0;
		if (start == 1'b0 && ^(main_307_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_307_main_result0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %307*/
	/*   %312 = add nsw i32 %306, 1*/
		main_307_312 = (main_adpcm_mainexit_306_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %307*/
	/*   %312 = add nsw i32 %306, 1*/
	if ((cur_state == LEGUP_F_main_BB__307_234)) begin
		main_307_312_reg <= main_307_312;
		if (start == 1'b0 && ^(main_307_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_307_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %313 = phi i32 [ %319, %314 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_233) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_313 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %313 = phi i32 [ %319, %314 ], [ 0, %.preheader.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__314_238) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader_313 = main_314_319_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %313 = phi i32 [ %319, %314 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_233) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_313_reg <= main_preheader_313;
		if (start == 1'b0 && ^(main_preheader_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_313_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %313 = phi i32 [ %319, %314 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__314_238) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_313_reg <= main_preheader_313;
		if (start == 1'b0 && ^(main_preheader_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %main_result.2 = phi i32 [ %.main_result.2, %314 ], [ %main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_233) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result2 = main_adpcm_mainexit_main_result0_reg;
	end
	/* main: %.preheader*/
	/*   %main_result.2 = phi i32 [ %.main_result.2, %314 ], [ %main_result.0, %.preheader.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__314_238) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader_main_result2 = main_314_main_result2;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %main_result.2 = phi i32 [ %.main_result.2, %314 ], [ %main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_233) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result2_reg <= main_preheader_main_result2;
		if (start == 1'b0 && ^(main_preheader_main_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result2_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %main_result.2 = phi i32 [ %.main_result.2, %314 ], [ %main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__314_238) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result2_reg <= main_preheader_main_result2;
		if (start == 1'b0 && ^(main_preheader_main_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %exitcond3 = icmp eq i32 %313, 100*/
		main_preheader_exitcond3 = (main_preheader_313_reg == 32'd100);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %exitcond3 = icmp eq i32 %313, 100*/
	if ((cur_state == LEGUP_F_main_BB_preheader_236)) begin
		main_preheader_exitcond3_reg <= main_preheader_exitcond3;
		if (start == 1'b0 && ^(main_preheader_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %314*/
	/*   %scevgep4 = getelementptr [100 x i32]* @result, i32 0, i32 %313*/
		main_314_scevgep4 = (1'd0 | (4 * main_preheader_313_reg));
end
always @(posedge clk) begin
	/* main: %314*/
	/*   %scevgep4 = getelementptr [100 x i32]* @result, i32 0, i32 %313*/
	if ((cur_state == LEGUP_F_main_BB__314_237)) begin
		main_314_scevgep4_reg <= main_314_scevgep4;
		if (start == 1'b0 && ^(main_314_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_314_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %314*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %313*/
		main_314_scevgep = (1'd0 | (4 * main_preheader_313_reg));
end
always @(posedge clk) begin
	/* main: %314*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %313*/
	if ((cur_state == LEGUP_F_main_BB__314_237)) begin
		main_314_scevgep_reg <= main_314_scevgep;
		if (start == 1'b0 && ^(main_314_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_314_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %314*/
	/*   %315 = load i32* %scevgep4, align 4*/
		main_314_315 = result_out_a;
end
always @(posedge clk) begin
	/* main: %314*/
	/*   %315 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__314_238)) begin
		main_314_315_reg <= main_314_315;
		if (start == 1'b0 && ^(main_314_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_314_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %314*/
	/*   %316 = load i32* %scevgep, align 4*/
		main_314_316 = test_result_out_a;
end
always @(posedge clk) begin
	/* main: %314*/
	/*   %316 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__314_238)) begin
		main_314_316_reg <= main_314_316;
		if (start == 1'b0 && ^(main_314_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_314_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %314*/
	/*   %317 = icmp eq i32 %315, %316*/
		main_314_317 = (main_314_315 == main_314_316);
end
always @(posedge clk) begin
	/* main: %314*/
	/*   %317 = icmp eq i32 %315, %316*/
	if ((cur_state == LEGUP_F_main_BB__314_238)) begin
		main_314_317_reg <= main_314_317;
		if (start == 1'b0 && ^(main_314_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_314_317_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %314*/
	/*   %318 = zext i1 %317 to i32*/
		main_314_318 = main_314_317;
end
always @(posedge clk) begin
	/* main: %314*/
	/*   %318 = zext i1 %317 to i32*/
	if ((cur_state == LEGUP_F_main_BB__314_238)) begin
		main_314_318_reg <= main_314_318;
		if (start == 1'b0 && ^(main_314_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_314_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %314*/
	/*   %.main_result.2 = add nsw i32 %main_result.2, %318*/
		main_314_main_result2 = (main_preheader_main_result2_reg + main_314_318);
end
always @(posedge clk) begin
	/* main: %314*/
	/*   %.main_result.2 = add nsw i32 %main_result.2, %318*/
	if ((cur_state == LEGUP_F_main_BB__314_238)) begin
		main_314_main_result2_reg <= main_314_main_result2;
		if (start == 1'b0 && ^(main_314_main_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_314_main_result2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %314*/
	/*   %319 = add nsw i32 %313, 1*/
		main_314_319 = (main_preheader_313_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %314*/
	/*   %319 = add nsw i32 %313, 1*/
	if ((cur_state == LEGUP_F_main_BB__314_237)) begin
		main_314_319_reg <= main_314_319;
		if (start == 1'b0 && ^(main_314_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_314_319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %320*/
	/*   %322 = icmp eq i32 %main_result.2, 150*/
		main_320_322 = (main_preheader_main_result2_reg == 32'd150);
end
always @(posedge clk) begin
	/* main: %320*/
	/*   %322 = icmp eq i32 %main_result.2, 150*/
	if ((cur_state == LEGUP_F_main_BB__320_239)) begin
		main_320_322_reg <= main_320_322;
		if (start == 1'b0 && ^(main_320_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_320_322_reg"); $finish; end
	end
end
always @(*) begin
	qq6_code6_table_address_a = 1'd0;
	/* main: %filtez.exit.i.i*/
	/*   %117 = load i32* %79, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		qq6_code6_table_address_a = (main_preheader42_79_reg >>> 3'd2);
	end
end
always @(*) begin
	qq6_code6_table_write_enable_a = 1'd0;
	/* main: %filtez.exit.i.i*/
	/*   %117 = load i32* %79, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		qq6_code6_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	dec_del_bpl_address_a = 1'd0;
	/* main: %6*/
	/*   store i32 0, i32* %scevgep69, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		dec_del_bpl_address_a = (main_6_scevgep69 >>> 3'd2);
	end
	/* main: %89*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__89_114)) begin
		dec_del_bpl_address_a = (1'd0 >>> 3'd2);
	end
	/* main: %97*/
	/*   %98 = load i32* %.0.i.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__97_149)) begin
		dec_del_bpl_address_a = (main_97_0iii >>> 3'd2);
	end
	/* main: %140*/
	/*   %141 = load i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__140_163)) begin
		dec_del_bpl_address_a = (main_preheader39_scevgep14_reg >>> 3'd2);
	end
	/* main: %140*/
	/*   store i32 %143, i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__140_165)) begin
		dec_del_bpl_address_a = (main_preheader39_scevgep14_reg >>> 3'd2);
	end
	/* main: %146*/
	/*   %152 = load i32* %scevgep11, align 4*/
	if ((cur_state == LEGUP_F_main_BB__146_168)) begin
		dec_del_bpl_address_a = (main_preheader40_scevgep11_reg >>> 3'd2);
	end
	/* main: %146*/
	/*   store i32 %155, i32* %scevgep11, align 4*/
	if ((cur_state == LEGUP_F_main_BB__146_170)) begin
		dec_del_bpl_address_a = (main_preheader40_scevgep11_reg >>> 3'd2);
	end
end
always @(*) begin
	dec_del_bpl_write_enable_a = 1'd0;
	/* main: %6*/
	/*   store i32 0, i32* %scevgep69, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		dec_del_bpl_write_enable_a = 1'd1;
	end
	/* main: %89*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__89_114)) begin
		dec_del_bpl_write_enable_a = 1'd0;
	end
	/* main: %97*/
	/*   %98 = load i32* %.0.i.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__97_149)) begin
		dec_del_bpl_write_enable_a = 1'd0;
	end
	/* main: %140*/
	/*   %141 = load i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__140_163)) begin
		dec_del_bpl_write_enable_a = 1'd0;
	end
	/* main: %140*/
	/*   store i32 %143, i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__140_165)) begin
		dec_del_bpl_write_enable_a = 1'd1;
	end
	/* main: %146*/
	/*   %152 = load i32* %scevgep11, align 4*/
	if ((cur_state == LEGUP_F_main_BB__146_168)) begin
		dec_del_bpl_write_enable_a = 1'd0;
	end
	/* main: %146*/
	/*   store i32 %155, i32* %scevgep11, align 4*/
	if ((cur_state == LEGUP_F_main_BB__146_170)) begin
		dec_del_bpl_write_enable_a = 1'd1;
	end
end
always @(*) begin
	dec_del_bpl_in_a = 1'd0;
	/* main: %6*/
	/*   store i32 0, i32* %scevgep69, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		dec_del_bpl_in_a = 32'd0;
	end
	/* main: %140*/
	/*   store i32 %143, i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__140_165)) begin
		dec_del_bpl_in_a = main_140_143;
	end
	/* main: %146*/
	/*   store i32 %155, i32* %scevgep11, align 4*/
	if ((cur_state == LEGUP_F_main_BB__146_170)) begin
		dec_del_bpl_in_a = main_146_155;
	end
end
always @(*) begin
	dec_del_dltx_address_a = 1'd0;
	/* main: %3*/
	/*   store i32 0, i32* %scevgep74, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		dec_del_dltx_address_a = (main_3_scevgep74 >>> 3'd2);
	end
	/* main: %89*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__89_114)) begin
		dec_del_dltx_address_a = (1'd0 >>> 3'd2);
	end
	/* main: %97*/
	/*   %99 = load i32* %.01.i.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__97_149)) begin
		dec_del_dltx_address_a = (main_97_01iii >>> 3'd2);
	end
	/* main: %146*/
	/*   %147 = load i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_main_BB__146_168)) begin
		dec_del_dltx_address_a = (main_146_scevgep12 >>> 3'd2);
	end
	/* main: %upzero.exit21.i.i*/
	/*   %157 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_174)) begin
		dec_del_dltx_address_a = ((1'd0 | (4 * 32'd4)) >>> 3'd2);
	end
	/* main: %upzero.exit21.i.i*/
	/*   %159 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		dec_del_dltx_address_a = ((1'd0 | (4 * 32'd2)) >>> 3'd2);
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %157, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_176)) begin
		dec_del_dltx_address_a = ((1'd0 | (4 * 32'd5)) >>> 3'd2);
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %158, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_177)) begin
		dec_del_dltx_address_a = ((1'd0 | (4 * 32'd4)) >>> 3'd2);
	end
end
always @(*) begin
	dec_del_dltx_write_enable_a = 1'd0;
	/* main: %3*/
	/*   store i32 0, i32* %scevgep74, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		dec_del_dltx_write_enable_a = 1'd1;
	end
	/* main: %89*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__89_114)) begin
		dec_del_dltx_write_enable_a = 1'd0;
	end
	/* main: %97*/
	/*   %99 = load i32* %.01.i.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__97_149)) begin
		dec_del_dltx_write_enable_a = 1'd0;
	end
	/* main: %146*/
	/*   %147 = load i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_main_BB__146_168)) begin
		dec_del_dltx_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit21.i.i*/
	/*   %157 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_174)) begin
		dec_del_dltx_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit21.i.i*/
	/*   %159 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		dec_del_dltx_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %157, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_176)) begin
		dec_del_dltx_write_enable_a = 1'd1;
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %158, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_177)) begin
		dec_del_dltx_write_enable_a = 1'd1;
	end
end
always @(*) begin
	dec_del_dltx_in_a = 1'd0;
	/* main: %3*/
	/*   store i32 0, i32* %scevgep74, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		dec_del_dltx_in_a = 32'd0;
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %157, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_176)) begin
		dec_del_dltx_in_a = main_upzeroexit21ii_157_reg;
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %158, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_177)) begin
		dec_del_dltx_in_a = main_upzeroexit21ii_158_reg;
	end
end
always @(*) begin
	dec_del_dltx_address_b = 1'd0;
	/* main: %upzero.exit21.i.i*/
	/*   %158 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_174)) begin
		dec_del_dltx_address_b = ((1'd0 | (4 * 32'd3)) >>> 3'd2);
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %94, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		dec_del_dltx_address_b = ((1'd0 | (4 * 32'd1)) >>> 3'd2);
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %116, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_176)) begin
		dec_del_dltx_address_b = (1'd0 >>> 3'd2);
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %159, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_177)) begin
		dec_del_dltx_address_b = ((1'd0 | (4 * 32'd3)) >>> 3'd2);
	end
end
always @(*) begin
	dec_del_dltx_write_enable_b = 1'd0;
	/* main: %upzero.exit21.i.i*/
	/*   %158 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_174)) begin
		dec_del_dltx_write_enable_b = 1'd0;
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %94, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		dec_del_dltx_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %116, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_176)) begin
		dec_del_dltx_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %159, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_177)) begin
		dec_del_dltx_write_enable_b = 1'd1;
	end
end
always @(*) begin
	dec_del_dltx_in_b = 1'd0;
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %94, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_175)) begin
		dec_del_dltx_in_b = main_89_94_reg;
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %116, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_176)) begin
		dec_del_dltx_in_b = main_filtezexitii_116_reg;
	end
	/* main: %upzero.exit21.i.i*/
	/*   store i32 %159, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit21ii_177)) begin
		dec_del_dltx_in_b = main_upzeroexit21ii_159_reg;
	end
end
always @(*) begin
	dec_del_bph_address_a = 1'd0;
	/* main: %6*/
	/*   store i32 0, i32* %scevgep68, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		dec_del_bph_address_a = (main_6_scevgep68 >>> 3'd2);
	end
	/* main: %uppol2.exit17.i.i*/
	/*   %182 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_180)) begin
		dec_del_bph_address_a = (1'd0 >>> 3'd2);
	end
	/* main: %186*/
	/*   %187 = load i32* %.0.i7.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__186_184)) begin
		dec_del_bph_address_a = (main_186_0i7ii >>> 3'd2);
	end
	/* main: %225*/
	/*   %226 = load i32* %scevgep24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__225_198)) begin
		dec_del_bph_address_a = (main_preheader36_scevgep24_reg >>> 3'd2);
	end
	/* main: %225*/
	/*   store i32 %228, i32* %scevgep24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__225_200)) begin
		dec_del_bph_address_a = (main_preheader36_scevgep24_reg >>> 3'd2);
	end
	/* main: %231*/
	/*   %237 = load i32* %scevgep21, align 4*/
	if ((cur_state == LEGUP_F_main_BB__231_203)) begin
		dec_del_bph_address_a = (main_preheader37_scevgep21_reg >>> 3'd2);
	end
	/* main: %231*/
	/*   store i32 %240, i32* %scevgep21, align 4*/
	if ((cur_state == LEGUP_F_main_BB__231_205)) begin
		dec_del_bph_address_a = (main_preheader37_scevgep21_reg >>> 3'd2);
	end
end
always @(*) begin
	dec_del_bph_write_enable_a = 1'd0;
	/* main: %6*/
	/*   store i32 0, i32* %scevgep68, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		dec_del_bph_write_enable_a = 1'd1;
	end
	/* main: %uppol2.exit17.i.i*/
	/*   %182 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_180)) begin
		dec_del_bph_write_enable_a = 1'd0;
	end
	/* main: %186*/
	/*   %187 = load i32* %.0.i7.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__186_184)) begin
		dec_del_bph_write_enable_a = 1'd0;
	end
	/* main: %225*/
	/*   %226 = load i32* %scevgep24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__225_198)) begin
		dec_del_bph_write_enable_a = 1'd0;
	end
	/* main: %225*/
	/*   store i32 %228, i32* %scevgep24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__225_200)) begin
		dec_del_bph_write_enable_a = 1'd1;
	end
	/* main: %231*/
	/*   %237 = load i32* %scevgep21, align 4*/
	if ((cur_state == LEGUP_F_main_BB__231_203)) begin
		dec_del_bph_write_enable_a = 1'd0;
	end
	/* main: %231*/
	/*   store i32 %240, i32* %scevgep21, align 4*/
	if ((cur_state == LEGUP_F_main_BB__231_205)) begin
		dec_del_bph_write_enable_a = 1'd1;
	end
end
always @(*) begin
	dec_del_bph_in_a = 1'd0;
	/* main: %6*/
	/*   store i32 0, i32* %scevgep68, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		dec_del_bph_in_a = 32'd0;
	end
	/* main: %225*/
	/*   store i32 %228, i32* %scevgep24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__225_200)) begin
		dec_del_bph_in_a = main_225_228;
	end
	/* main: %231*/
	/*   store i32 %240, i32* %scevgep21, align 4*/
	if ((cur_state == LEGUP_F_main_BB__231_205)) begin
		dec_del_bph_in_a = main_231_240;
	end
end
always @(*) begin
	dec_del_dhx_address_a = 1'd0;
	/* main: %3*/
	/*   store i32 0, i32* %scevgep73, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		dec_del_dhx_address_a = (main_3_scevgep73 >>> 3'd2);
	end
	/* main: %uppol2.exit17.i.i*/
	/*   %183 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_180)) begin
		dec_del_dhx_address_a = (1'd0 >>> 3'd2);
	end
	/* main: %186*/
	/*   %188 = load i32* %.01.i6.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__186_184)) begin
		dec_del_dhx_address_a = (main_186_01i6ii >>> 3'd2);
	end
	/* main: %231*/
	/*   %232 = load i32* %scevgep22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__231_203)) begin
		dec_del_dhx_address_a = (main_231_scevgep22 >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   %242 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_209)) begin
		dec_del_dhx_address_a = ((1'd0 | (4 * 32'd4)) >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   %244 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		dec_del_dhx_address_a = ((1'd0 | (4 * 32'd2)) >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %242, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_211)) begin
		dec_del_dhx_address_a = ((1'd0 | (4 * 32'd5)) >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %243, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_212)) begin
		dec_del_dhx_address_a = ((1'd0 | (4 * 32'd4)) >>> 3'd2);
	end
end
always @(*) begin
	dec_del_dhx_write_enable_a = 1'd0;
	/* main: %3*/
	/*   store i32 0, i32* %scevgep73, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		dec_del_dhx_write_enable_a = 1'd1;
	end
	/* main: %uppol2.exit17.i.i*/
	/*   %183 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit17ii_180)) begin
		dec_del_dhx_write_enable_a = 1'd0;
	end
	/* main: %186*/
	/*   %188 = load i32* %.01.i6.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__186_184)) begin
		dec_del_dhx_write_enable_a = 1'd0;
	end
	/* main: %231*/
	/*   %232 = load i32* %scevgep22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__231_203)) begin
		dec_del_dhx_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit.i.i*/
	/*   %242 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_209)) begin
		dec_del_dhx_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit.i.i*/
	/*   %244 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		dec_del_dhx_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %242, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_211)) begin
		dec_del_dhx_write_enable_a = 1'd1;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %243, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_212)) begin
		dec_del_dhx_write_enable_a = 1'd1;
	end
end
always @(*) begin
	dec_del_dhx_in_a = 1'd0;
	/* main: %3*/
	/*   store i32 0, i32* %scevgep73, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		dec_del_dhx_in_a = 32'd0;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %242, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_211)) begin
		dec_del_dhx_in_a = main_upzeroexitii_242_reg;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %243, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_212)) begin
		dec_del_dhx_in_a = main_upzeroexitii_243_reg;
	end
end
always @(*) begin
	dec_del_dhx_address_b = 1'd0;
	/* main: %upzero.exit.i.i*/
	/*   %243 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_209)) begin
		dec_del_dhx_address_b = ((1'd0 | (4 * 32'd3)) >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %183, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		dec_del_dhx_address_b = ((1'd0 | (4 * 32'd1)) >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %205, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_211)) begin
		dec_del_dhx_address_b = (1'd0 >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %244, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_212)) begin
		dec_del_dhx_address_b = ((1'd0 | (4 * 32'd3)) >>> 3'd2);
	end
end
always @(*) begin
	dec_del_dhx_write_enable_b = 1'd0;
	/* main: %upzero.exit.i.i*/
	/*   %243 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_209)) begin
		dec_del_dhx_write_enable_b = 1'd0;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %183, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		dec_del_dhx_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %205, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_211)) begin
		dec_del_dhx_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %244, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_212)) begin
		dec_del_dhx_write_enable_b = 1'd1;
	end
end
always @(*) begin
	dec_del_dhx_in_b = 1'd0;
	/* main: %upzero.exit.i.i*/
	/*   store i32 %183, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_210)) begin
		dec_del_dhx_in_b = main_uppol2exit17ii_183_reg;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %205, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_211)) begin
		dec_del_dhx_in_b = main_filtezexit8ii_205_reg;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %244, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_212)) begin
		dec_del_dhx_in_b = main_upzeroexitii_244_reg;
	end
end
always @(*) begin
	accumc_address_a = 1'd0;
	/* main: %12*/
	/*   store i32 0, i32* %scevgep64, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_24)) begin
		accumc_address_a = (main_12_scevgep64 >>> 3'd2);
	end
	/* main: %275*/
	/*   %278 = load i32* %ac_ptr.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_218)) begin
		accumc_address_a = (main_275_ac_ptr0ii >>> 3'd2);
	end
	/* main: %287*/
	/*   %289 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__287_223)) begin
		accumc_address_a = ((1'd0 | (4 * 32'd10)) >>> 3'd2);
	end
	/* main: %295*/
	/*   %296 = load i32* %ac_ptr1.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__295_226)) begin
		accumc_address_a = (main_295_ac_ptr10ii >>> 3'd2);
	end
	/* main: %295*/
	/*   store i32 %296, i32* %ac_ptr.1.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__295_227)) begin
		accumc_address_a = (main_295_ac_ptr1ii_reg >>> 3'd2);
	end
	/* main: %decode.exit.i*/
	/*   store i32 %268, i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_229)) begin
		accumc_address_a = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	accumc_write_enable_a = 1'd0;
	/* main: %12*/
	/*   store i32 0, i32* %scevgep64, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_24)) begin
		accumc_write_enable_a = 1'd1;
	end
	/* main: %275*/
	/*   %278 = load i32* %ac_ptr.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_218)) begin
		accumc_write_enable_a = 1'd0;
	end
	/* main: %287*/
	/*   %289 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__287_223)) begin
		accumc_write_enable_a = 1'd0;
	end
	/* main: %295*/
	/*   %296 = load i32* %ac_ptr1.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__295_226)) begin
		accumc_write_enable_a = 1'd0;
	end
	/* main: %295*/
	/*   store i32 %296, i32* %ac_ptr.1.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__295_227)) begin
		accumc_write_enable_a = 1'd1;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %268, i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_229)) begin
		accumc_write_enable_a = 1'd1;
	end
end
always @(*) begin
	accumc_in_a = 1'd0;
	/* main: %12*/
	/*   store i32 0, i32* %scevgep64, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_24)) begin
		accumc_in_a = 32'd0;
	end
	/* main: %295*/
	/*   store i32 %296, i32* %ac_ptr.1.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__295_227)) begin
		accumc_in_a = main_295_296;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %268, i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_229)) begin
		accumc_in_a = main_uppol2exitii_268_reg;
	end
end
always @(*) begin
	accumd_address_a = 1'd0;
	/* main: %12*/
	/*   store i32 0, i32* %scevgep63, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_24)) begin
		accumd_address_a = (main_12_scevgep63 >>> 3'd2);
	end
	/* main: %275*/
	/*   %282 = load i32* %ad_ptr.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_218)) begin
		accumd_address_a = (main_275_ad_ptr0ii >>> 3'd2);
	end
	/* main: %287*/
	/*   %290 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__287_223)) begin
		accumd_address_a = ((1'd0 | (4 * 32'd10)) >>> 3'd2);
	end
	/* main: %295*/
	/*   %297 = load i32* %ad_ptr1.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__295_226)) begin
		accumd_address_a = (main_295_ad_ptr10ii >>> 3'd2);
	end
	/* main: %295*/
	/*   store i32 %297, i32* %ad_ptr.1.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__295_227)) begin
		accumd_address_a = (main_295_ad_ptr1ii_reg >>> 3'd2);
	end
	/* main: %decode.exit.i*/
	/*   store i32 %269, i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_229)) begin
		accumd_address_a = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	accumd_write_enable_a = 1'd0;
	/* main: %12*/
	/*   store i32 0, i32* %scevgep63, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_24)) begin
		accumd_write_enable_a = 1'd1;
	end
	/* main: %275*/
	/*   %282 = load i32* %ad_ptr.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_218)) begin
		accumd_write_enable_a = 1'd0;
	end
	/* main: %287*/
	/*   %290 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__287_223)) begin
		accumd_write_enable_a = 1'd0;
	end
	/* main: %295*/
	/*   %297 = load i32* %ad_ptr1.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__295_226)) begin
		accumd_write_enable_a = 1'd0;
	end
	/* main: %295*/
	/*   store i32 %297, i32* %ad_ptr.1.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__295_227)) begin
		accumd_write_enable_a = 1'd1;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %269, i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_229)) begin
		accumd_write_enable_a = 1'd1;
	end
end
always @(*) begin
	accumd_in_a = 1'd0;
	/* main: %12*/
	/*   store i32 0, i32* %scevgep63, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_24)) begin
		accumd_in_a = 32'd0;
	end
	/* main: %295*/
	/*   store i32 %297, i32* %ad_ptr.1.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__295_227)) begin
		accumd_in_a = main_295_297;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %269, i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_229)) begin
		accumd_in_a = main_uppol2exitii_269_reg;
	end
end
always @(*) begin
	test_data_address_a = 1'd0;
	/* main: %20*/
	/*   %31 = load i32* %scevgep61, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		test_data_address_a = (main_20_scevgep61 >>> 3'd2);
	end
	/* main: %20*/
	/*   %38 = load i32* %scevgep59, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_32)) begin
		test_data_address_a = (main_20_scevgep59_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   %45 = load i32* %scevgep57, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_56)) begin
		test_data_address_a = (main_20_scevgep57_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   %52 = load i32* %scevgep55, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_59)) begin
		test_data_address_a = (main_20_scevgep55_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   %59 = load i32* %scevgep53, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_62)) begin
		test_data_address_a = (main_20_scevgep53_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   %66 = load i32* %scevgep51, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_65)) begin
		test_data_address_a = (main_20_scevgep51_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   %73 = load i32* %scevgep49, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_68)) begin
		test_data_address_a = (main_20_scevgep49_reg >>> 3'd2);
	end
	/* main: %80*/
	/*   %83 = load i32* %scevgep44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__80_77)) begin
		test_data_address_a = (main_80_scevgep44 >>> 3'd2);
	end
end
always @(*) begin
	test_data_write_enable_a = 1'd0;
	/* main: %20*/
	/*   %31 = load i32* %scevgep61, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %20*/
	/*   %38 = load i32* %scevgep59, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_32)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %20*/
	/*   %45 = load i32* %scevgep57, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_56)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %20*/
	/*   %52 = load i32* %scevgep55, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_59)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %20*/
	/*   %59 = load i32* %scevgep53, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_62)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %20*/
	/*   %66 = load i32* %scevgep51, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_65)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %20*/
	/*   %73 = load i32* %scevgep49, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_68)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %80*/
	/*   %83 = load i32* %scevgep44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__80_77)) begin
		test_data_write_enable_a = 1'd0;
	end
end
always @(*) begin
	test_data_address_b = 1'd0;
	/* main: %20*/
	/*   %32 = load i32* %scevgep60, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		test_data_address_b = (main_20_scevgep60 >>> 3'd2);
	end
	/* main: %20*/
	/*   %39 = load i32* %scevgep58, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_32)) begin
		test_data_address_b = (main_20_scevgep58_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   %46 = load i32* %scevgep56, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_56)) begin
		test_data_address_b = (main_20_scevgep56_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   %53 = load i32* %scevgep54, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_59)) begin
		test_data_address_b = (main_20_scevgep54_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   %60 = load i32* %scevgep52, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_62)) begin
		test_data_address_b = (main_20_scevgep52_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   %67 = load i32* %scevgep50, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_65)) begin
		test_data_address_b = (main_20_scevgep50_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   %74 = load i32* %scevgep48, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_68)) begin
		test_data_address_b = (main_20_scevgep48_reg >>> 3'd2);
	end
	/* main: %80*/
	/*   %84 = load i32* %scevgep43, align 4*/
	if ((cur_state == LEGUP_F_main_BB__80_78)) begin
		test_data_address_b = (main_80_scevgep43 >>> 3'd2);
	end
end
always @(*) begin
	test_data_write_enable_b = 1'd0;
	/* main: %20*/
	/*   %32 = load i32* %scevgep60, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %20*/
	/*   %39 = load i32* %scevgep58, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_32)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %20*/
	/*   %46 = load i32* %scevgep56, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_56)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %20*/
	/*   %53 = load i32* %scevgep54, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_59)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %20*/
	/*   %60 = load i32* %scevgep52, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_62)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %20*/
	/*   %67 = load i32* %scevgep50, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_65)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %20*/
	/*   %74 = load i32* %scevgep48, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_68)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %80*/
	/*   %84 = load i32* %scevgep43, align 4*/
	if ((cur_state == LEGUP_F_main_BB__80_78)) begin
		test_data_write_enable_b = 1'd0;
	end
end
always @(*) begin
	test_compressed_address_a = 1'd0;
	/* main: %307*/
	/*   %309 = load i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_main_BB__307_234)) begin
		test_compressed_address_a = (main_307_scevgep5 >>> 3'd2);
	end
end
always @(*) begin
	test_compressed_write_enable_a = 1'd0;
	/* main: %307*/
	/*   %309 = load i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_main_BB__307_234)) begin
		test_compressed_write_enable_a = 1'd0;
	end
end
always @(*) begin
	test_result_address_a = 1'd0;
	/* main: %314*/
	/*   %316 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__314_237)) begin
		test_result_address_a = (main_314_scevgep >>> 3'd2);
	end
end
always @(*) begin
	test_result_write_enable_a = 1'd0;
	/* main: %314*/
	/*   %316 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__314_237)) begin
		test_result_write_enable_a = 1'd0;
	end
end
always @(*) begin
	compressed_address_a = 1'd0;
	/* main: %20*/
	/*   store i32 %33, i32* %34, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_53)) begin
		compressed_address_a = (main_20_34 >>> 3'd2);
	end
	/* main: %20*/
	/*   store i32 %40, i32* %41, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_56)) begin
		compressed_address_a = (main_20_41_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   store i32 %47, i32* %48, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_59)) begin
		compressed_address_a = (main_20_48_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   store i32 %54, i32* %55, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_62)) begin
		compressed_address_a = (main_20_55_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   store i32 %61, i32* %62, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_65)) begin
		compressed_address_a = (main_20_62_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   store i32 %68, i32* %69, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_68)) begin
		compressed_address_a = (main_20_69_reg >>> 3'd2);
	end
	/* main: %20*/
	/*   store i32 %75, i32* %76, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_71)) begin
		compressed_address_a = (main_20_76_reg >>> 3'd2);
	end
	/* main: %80*/
	/*   store i32 %85, i32* %86, align 4*/
	if ((cur_state == LEGUP_F_main_BB__80_110)) begin
		compressed_address_a = (main_80_86 >>> 3'd2);
	end
	/* main: %89*/
	/*   %92 = load i32* %91, align 4*/
	if ((cur_state == LEGUP_F_main_BB__89_146)) begin
		compressed_address_a = (main_89_91 >>> 3'd2);
	end
	/* main: %307*/
	/*   %308 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__307_234)) begin
		compressed_address_a = (main_307_scevgep6 >>> 3'd2);
	end
end
always @(*) begin
	compressed_write_enable_a = 1'd0;
	/* main: %20*/
	/*   store i32 %33, i32* %34, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_53)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %20*/
	/*   store i32 %40, i32* %41, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_56)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %20*/
	/*   store i32 %47, i32* %48, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_59)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %20*/
	/*   store i32 %54, i32* %55, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_62)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %20*/
	/*   store i32 %61, i32* %62, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_65)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %20*/
	/*   store i32 %68, i32* %69, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_68)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %20*/
	/*   store i32 %75, i32* %76, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_71)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %80*/
	/*   store i32 %85, i32* %86, align 4*/
	if ((cur_state == LEGUP_F_main_BB__80_110)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %89*/
	/*   %92 = load i32* %91, align 4*/
	if ((cur_state == LEGUP_F_main_BB__89_146)) begin
		compressed_write_enable_a = 1'd0;
	end
	/* main: %307*/
	/*   %308 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__307_234)) begin
		compressed_write_enable_a = 1'd0;
	end
end
always @(*) begin
	compressed_in_a = 1'd0;
	/* main: %20*/
	/*   store i32 %33, i32* %34, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_53)) begin
		compressed_in_a = main_20_33_reg;
	end
	/* main: %20*/
	/*   store i32 %40, i32* %41, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_56)) begin
		compressed_in_a = main_20_40_reg;
	end
	/* main: %20*/
	/*   store i32 %47, i32* %48, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_59)) begin
		compressed_in_a = main_20_47_reg;
	end
	/* main: %20*/
	/*   store i32 %54, i32* %55, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_62)) begin
		compressed_in_a = main_20_54_reg;
	end
	/* main: %20*/
	/*   store i32 %61, i32* %62, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_65)) begin
		compressed_in_a = main_20_61_reg;
	end
	/* main: %20*/
	/*   store i32 %68, i32* %69, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_68)) begin
		compressed_in_a = main_20_68_reg;
	end
	/* main: %20*/
	/*   store i32 %75, i32* %76, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_71)) begin
		compressed_in_a = main_20_75_reg;
	end
	/* main: %80*/
	/*   store i32 %85, i32* %86, align 4*/
	if ((cur_state == LEGUP_F_main_BB__80_110)) begin
		compressed_in_a = main_80_85_reg;
	end
end
always @(*) begin
	result_address_a = 1'd0;
	/* main: %decode.exit.i*/
	/*   store i32 %303, i32* %scevgep39, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		result_address_a = (main_87_scevgep39_reg >>> 3'd2);
	end
	/* main: %314*/
	/*   %315 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__314_237)) begin
		result_address_a = (main_314_scevgep4 >>> 3'd2);
	end
end
always @(*) begin
	result_write_enable_a = 1'd0;
	/* main: %decode.exit.i*/
	/*   store i32 %303, i32* %scevgep39, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		result_write_enable_a = 1'd1;
	end
	/* main: %314*/
	/*   %315 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__314_237)) begin
		result_write_enable_a = 1'd0;
	end
end
always @(*) begin
	result_in_a = 1'd0;
	/* main: %decode.exit.i*/
	/*   store i32 %303, i32* %scevgep39, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		result_in_a = main_decodeexiti_303;
	end
end
always @(*) begin
	result_address_b = 1'd0;
	/* main: %decode.exit.i*/
	/*   store i32 %305, i32* %scevgep38, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		result_address_b = (main_87_scevgep38_reg >>> 3'd2);
	end
end
always @(*) begin
	result_write_enable_b = 1'd0;
	/* main: %decode.exit.i*/
	/*   store i32 %305, i32* %scevgep38, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		result_write_enable_b = 1'd1;
	end
end
always @(*) begin
	result_in_b = 1'd0;
	/* main: %decode.exit.i*/
	/*   store i32 %305, i32* %scevgep38, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_230)) begin
		result_in_b = main_decodeexiti_305;
	end
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_30)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_31)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_54)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_55)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_57)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_60)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_61)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_63)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_64)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_66)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_67)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_69)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_70)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_F_main_BB__80_79)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_80)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_30)) begin
		encode_arg_xin1 <= main_20_31;
		if (start == 1'b0 && ^(main_20_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_54)) begin
		encode_arg_xin1 <= main_20_38_reg;
		if (start == 1'b0 && ^(main_20_38_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_57)) begin
		encode_arg_xin1 <= main_20_45;
		if (start == 1'b0 && ^(main_20_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_60)) begin
		encode_arg_xin1 <= main_20_52;
		if (start == 1'b0 && ^(main_20_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_63)) begin
		encode_arg_xin1 <= main_20_59;
		if (start == 1'b0 && ^(main_20_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_66)) begin
		encode_arg_xin1 <= main_20_66;
		if (start == 1'b0 && ^(main_20_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_69)) begin
		encode_arg_xin1 <= main_20_73;
		if (start == 1'b0 && ^(main_20_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_F_main_BB__80_79)) begin
		encode_arg_xin1 <= main_80_83_reg;
		if (start == 1'b0 && ^(main_80_83_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_30)) begin
		encode_arg_xin2 <= main_20_32;
		if (start == 1'b0 && ^(main_20_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_54)) begin
		encode_arg_xin2 <= main_20_39_reg;
		if (start == 1'b0 && ^(main_20_39_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_57)) begin
		encode_arg_xin2 <= main_20_46;
		if (start == 1'b0 && ^(main_20_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_60)) begin
		encode_arg_xin2 <= main_20_53;
		if (start == 1'b0 && ^(main_20_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_63)) begin
		encode_arg_xin2 <= main_20_60;
		if (start == 1'b0 && ^(main_20_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_66)) begin
		encode_arg_xin2 <= main_20_67;
		if (start == 1'b0 && ^(main_20_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_F_main_BB__20_69)) begin
		encode_arg_xin2 <= main_20_74;
		if (start == 1'b0 && ^(main_20_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_F_main_BB__80_79)) begin
		encode_arg_xin2 <= main_80_84;
		if (start == 1'b0 && ^(main_80_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	else if ((cur_state == LEGUP_function_call_55)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	else if ((cur_state == LEGUP_function_call_58)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	else if ((cur_state == LEGUP_function_call_61)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	else if ((cur_state == LEGUP_function_call_64)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	else if ((cur_state == LEGUP_function_call_67)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	else if ((cur_state == LEGUP_function_call_70)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	else /* if ((cur_state == LEGUP_function_call_80)) */ begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	else if ((cur_state == LEGUP_function_call_55)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	else if ((cur_state == LEGUP_function_call_58)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	else if ((cur_state == LEGUP_function_call_61)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	else if ((cur_state == LEGUP_function_call_64)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	else if ((cur_state == LEGUP_function_call_67)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	else if ((cur_state == LEGUP_function_call_70)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	else /* if ((cur_state == LEGUP_function_call_80)) */ begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	encode_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	encode_finish_final = encode_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__20_30))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_54))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_57))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_60))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_63))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_66))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_69))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__80_79))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__20_30))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_54))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_57))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_60))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_63))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_66))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_69))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__80_79))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		legup_function_call = 1'd1;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		legup_function_call = 1'd1;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		legup_function_call = 1'd1;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		legup_function_call = 1'd1;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		legup_function_call = 1'd1;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		legup_function_call = 1'd1;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		legup_function_call = 1'd1;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* main: %80*/
	/*   %82 = sdiv i32 %i1.1.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__80_77)) begin
		main_signed_divide_32_0_op0 = main_preheader43_i11i_reg;
	end
	/* main: %89*/
	/*   %90 = sdiv i32 %i.0.i, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB__89_114)) */ begin
		main_signed_divide_32_0_op0 = main_87_i0i_reg;
	end
end
always @(*) begin
	/* main: %80*/
	/*   %82 = sdiv i32 %i1.1.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__80_77)) begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
	/* main: %89*/
	/*   %90 = sdiv i32 %i.0.i, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB__89_114)) */ begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
end
always @(*) begin
	lpm_divide_main_89_90_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_89_90_out = lpm_divide_main_89_90_temp_out;
end
always @(*) begin
	main_signed_divide_32_0 = lpm_divide_main_89_90_out;
end
always @(*) begin
	/* main: %20*/
	/*   %28 = sitofp i32 %i1.0.i to double*/
	if ((cur_state == LEGUP_F_main_BB__20_29)) begin
		main_altfp_sitofp_64_0_op0 = main_resetexiti_i10i_reg;
	end
	/* main: %20*/
	/*   %35 = sitofp i32 %19 to double*/
	else if ((cur_state == LEGUP_F_main_BB__20_30)) begin
		main_altfp_sitofp_64_0_op0 = main_resetexiti_19_reg;
	end
	/* main: %20*/
	/*   %42 = sitofp i32 %18 to double*/
	else if ((cur_state == LEGUP_F_main_BB__20_32)) begin
		main_altfp_sitofp_64_0_op0 = main_resetexiti_18_reg;
	end
	/* main: %20*/
	/*   %49 = sitofp i32 %17 to double*/
	else if ((cur_state == LEGUP_F_main_BB__20_33)) begin
		main_altfp_sitofp_64_0_op0 = main_resetexiti_17_reg;
	end
	/* main: %20*/
	/*   %56 = sitofp i32 %16 to double*/
	else if ((cur_state == LEGUP_F_main_BB__20_34)) begin
		main_altfp_sitofp_64_0_op0 = main_resetexiti_16_reg;
	end
	/* main: %20*/
	/*   %63 = sitofp i32 %15 to double*/
	else if ((cur_state == LEGUP_F_main_BB__20_35)) begin
		main_altfp_sitofp_64_0_op0 = main_resetexiti_15_reg;
	end
	/* main: %20*/
	/*   %70 = sitofp i32 %14 to double*/
	else /* if ((cur_state == LEGUP_F_main_BB__20_36)) */ begin
		main_altfp_sitofp_64_0_op0 = main_resetexiti_14_reg;
	end
end
always @(*) begin
	altfp_main_20_28_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_sitofp_64_0 = altfp_sitofp64_main_20_28_out;
end
always @(*) begin
	/* main: %20*/
	/*   %29 = fmul double %28, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_36)) begin
		main_altfp_multiply_64_0_op0 = main_20_28;
	end
	/* main: %20*/
	/*   %36 = fmul double %35, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB__20_37)) begin
		main_altfp_multiply_64_0_op0 = main_20_35;
	end
	/* main: %20*/
	/*   %43 = fmul double %42, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB__20_38)) begin
		main_altfp_multiply_64_0_op0 = main_20_42;
	end
	/* main: %20*/
	/*   %50 = fmul double %49, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB__20_39)) begin
		main_altfp_multiply_64_0_op0 = main_20_49;
	end
	/* main: %20*/
	/*   %57 = fmul double %56, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB__20_40)) begin
		main_altfp_multiply_64_0_op0 = main_20_56;
	end
	/* main: %20*/
	/*   %64 = fmul double %63, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB__20_41)) begin
		main_altfp_multiply_64_0_op0 = main_20_63;
	end
	/* main: %20*/
	/*   %71 = fmul double %70, 5.000000e-01*/
	else /* if ((cur_state == LEGUP_F_main_BB__20_42)) */ begin
		main_altfp_multiply_64_0_op0 = main_20_70;
	end
end
always @(*) begin
	/* main: %20*/
	/*   %29 = fmul double %28, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB__20_36)) begin
		main_altfp_multiply_64_0_op1 = 64'h3FE0000000000000;
	end
	/* main: %20*/
	/*   %36 = fmul double %35, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB__20_37)) begin
		main_altfp_multiply_64_0_op1 = 64'h3FE0000000000000;
	end
	/* main: %20*/
	/*   %43 = fmul double %42, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB__20_38)) begin
		main_altfp_multiply_64_0_op1 = 64'h3FE0000000000000;
	end
	/* main: %20*/
	/*   %50 = fmul double %49, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB__20_39)) begin
		main_altfp_multiply_64_0_op1 = 64'h3FE0000000000000;
	end
	/* main: %20*/
	/*   %57 = fmul double %56, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB__20_40)) begin
		main_altfp_multiply_64_0_op1 = 64'h3FE0000000000000;
	end
	/* main: %20*/
	/*   %64 = fmul double %63, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB__20_41)) begin
		main_altfp_multiply_64_0_op1 = 64'h3FE0000000000000;
	end
	/* main: %20*/
	/*   %71 = fmul double %70, 5.000000e-01*/
	else /* if ((cur_state == LEGUP_F_main_BB__20_42)) */ begin
		main_altfp_multiply_64_0_op1 = 64'h3FE0000000000000;
	end
end
always @(*) begin
	altfp_main_20_29_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_multiply_64_0 = altfp_multiplier64_main_20_29_out;
end
always @(*) begin
	/* main: %20*/
	/*   %30 = fptosi double %29 to i32*/
	if ((cur_state == LEGUP_F_main_BB__20_47)) begin
		main_altfp_fptosi_64_0_op0 = main_20_29;
	end
	/* main: %20*/
	/*   %37 = fptosi double %36 to i32*/
	else if ((cur_state == LEGUP_F_main_BB__20_48)) begin
		main_altfp_fptosi_64_0_op0 = main_20_36;
	end
	/* main: %20*/
	/*   %44 = fptosi double %43 to i32*/
	else if ((cur_state == LEGUP_F_main_BB__20_49)) begin
		main_altfp_fptosi_64_0_op0 = main_20_43;
	end
	/* main: %20*/
	/*   %51 = fptosi double %50 to i32*/
	else if ((cur_state == LEGUP_F_main_BB__20_50)) begin
		main_altfp_fptosi_64_0_op0 = main_20_50;
	end
	/* main: %20*/
	/*   %58 = fptosi double %57 to i32*/
	else if ((cur_state == LEGUP_F_main_BB__20_51)) begin
		main_altfp_fptosi_64_0_op0 = main_20_57;
	end
	/* main: %20*/
	/*   %65 = fptosi double %64 to i32*/
	else if ((cur_state == LEGUP_F_main_BB__20_52)) begin
		main_altfp_fptosi_64_0_op0 = main_20_64;
	end
	/* main: %20*/
	/*   %72 = fptosi double %71 to i32*/
	else /* if ((cur_state == LEGUP_F_main_BB__20_53)) */ begin
		main_altfp_fptosi_64_0_op0 = main_20_71;
	end
end
always @(*) begin
	altfp_main_20_30_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_fptosi_64_0 = altfp_fptosi64_main_20_30_out;
end
always @(*) begin
	lpm_mult_main_resetexiti_i10i_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %i1.0.i = mul i32 %indvar45, 14*/
	if ((lpm_mult_main_resetexiti_i10i_en == 1'd1)) begin
		main_resetexiti_i10i_stage0_reg <= (main_resetexiti_indvar45_reg * 32'd14);
	end
end
always @(*) begin
	altfp_main_20_35_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_42_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_49_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_56_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_63_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_70_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_36_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_43_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_50_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_57_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_64_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_71_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_37_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_44_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_51_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_58_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_65_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_20_72_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_80_82_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_89_95_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %89*/
	/*   %95 = mul nsw i32 %93, %94*/
	if ((lpm_mult_main_89_95_en == 1'd1)) begin
		main_89_95_stage0_reg <= (main_89_93 * main_89_94);
	end
end
always @(*) begin
	lpm_mult_main_97_100_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %97*/
	/*   %100 = mul nsw i32 %98, %99*/
	if ((lpm_mult_main_97_100_en == 1'd1)) begin
		main_97_100_stage0_reg <= (main_97_98 * main_97_99);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_105_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %105 = mul nsw i32 %dec_al1.0, %104*/
	if ((lpm_mult_main_filtezexitii_105_en == 1'd1)) begin
		main_filtezexitii_105_stage0_reg <= (main_87_dec_al10_reg * main_filtezexitii_104);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_107_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %107 = mul nsw i32 %dec_al2.0, %106*/
	if ((lpm_mult_main_filtezexitii_107_en == 1'd1)) begin
		main_filtezexitii_107_stage0_reg <= (main_87_dec_al20_reg * main_filtezexitii_106);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_121_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %121 = mul nsw i32 %dec_nbl.0, 127*/
	if ((lpm_mult_main_filtezexitii_121_en == 1'd1)) begin
		main_filtezexitii_121_stage0_reg <= (main_87_dec_nbl0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_118_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %118 = mul nsw i32 %dec_detl.0, %117*/
	if ((lpm_mult_main_filtezexitii_118_en == 1'd1)) begin
		main_filtezexitii_118_stage0_reg <= (main_87_dec_detl0_reg * main_filtezexitii_117);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_115_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %115 = mul nsw i32 %dec_detl.0, %114*/
	if ((lpm_mult_main_filtezexitii_115_en == 1'd1)) begin
		main_filtezexitii_115_stage0_reg <= (main_87_dec_detl0_reg * main_filtezexitii_114);
	end
end
always @(*) begin
	lpm_mult_main_140_142_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %142 = mul nsw i32 %141, 255*/
	if ((lpm_mult_main_140_142_en == 1'd1)) begin
		main_140_142_stage0_reg <= (main_140_141 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_146_148_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %148 = mul nsw i32 %116, %147*/
	if ((lpm_mult_main_146_148_en == 1'd1)) begin
		main_146_148_stage0_reg <= (main_filtezexitii_116_reg * main_146_147);
	end
end
always @(*) begin
	lpm_mult_main_146_153_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %153 = mul nsw i32 %152, 255*/
	if ((lpm_mult_main_146_153_en == 1'd1)) begin
		main_146_153_stage0_reg <= (main_146_152 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit21ii_161_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %161 = mul nsw i32 %137, %dec_plt1.0*/
	if ((lpm_mult_main_upzeroexit21ii_161_en == 1'd1)) begin
		main_upzeroexit21ii_161_stage0_reg <= (main_logsclexitii_137_reg * main_87_dec_plt10_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit21ii_165_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %165 = mul nsw i32 %137, %dec_plt2.0*/
	if ((lpm_mult_main_upzeroexit21ii_165_en == 1'd1)) begin
		main_upzeroexit21ii_165_stage0_reg <= (main_logsclexitii_137_reg * main_87_dec_plt20_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit21ii_169_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit21.i.i*/
	/*   %169 = mul nsw i32 %dec_al2.0, 127*/
	if ((lpm_mult_main_upzeroexit21ii_169_en == 1'd1)) begin
		main_upzeroexit21ii_169_stage0_reg <= (main_87_dec_al20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exit17ii_175_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %175 = mul nsw i32 %dec_al1.0, 255*/
	if ((lpm_mult_main_uppol2exit17ii_175_en == 1'd1)) begin
		main_uppol2exit17ii_175_stage0_reg <= (main_87_dec_al10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exit17ii_184_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %uppol2.exit17.i.i*/
	/*   %184 = mul nsw i32 %182, %183*/
	if ((lpm_mult_main_uppol2exit17ii_184_en == 1'd1)) begin
		main_uppol2exit17ii_184_stage0_reg <= (main_uppol2exit17ii_182 * main_uppol2exit17ii_183);
	end
end
always @(*) begin
	lpm_mult_main_186_189_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %189 = mul nsw i32 %187, %188*/
	if ((lpm_mult_main_186_189_en == 1'd1)) begin
		main_186_189_stage0_reg <= (main_186_187 * main_186_188);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8ii_196_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %196 = mul nsw i32 %dec_ah1.0, %195*/
	if ((lpm_mult_main_filtezexit8ii_196_en == 1'd1)) begin
		main_filtezexit8ii_196_stage0_reg <= (main_87_dec_ah10_reg * main_filtezexit8ii_195);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8ii_198_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %198 = mul nsw i32 %dec_ah2.0, %197*/
	if ((lpm_mult_main_filtezexit8ii_198_en == 1'd1)) begin
		main_filtezexit8ii_198_stage0_reg <= (main_87_dec_ah20_reg * main_filtezexit8ii_197);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8ii_206_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %206 = mul nsw i32 %dec_nbh.0, 127*/
	if ((lpm_mult_main_filtezexit8ii_206_en == 1'd1)) begin
		main_filtezexit8ii_206_stage0_reg <= (main_87_dec_nbh0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8ii_204_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %204 = mul nsw i32 %dec_deth.0, %203*/
	if ((lpm_mult_main_filtezexit8ii_204_en == 1'd1)) begin
		main_filtezexit8ii_204_stage0_reg <= (main_87_dec_deth0_reg * main_filtezexit8ii_203);
	end
end
always @(*) begin
	lpm_mult_main_225_227_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %227 = mul nsw i32 %226, 255*/
	if ((lpm_mult_main_225_227_en == 1'd1)) begin
		main_225_227_stage0_reg <= (main_225_226 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_231_233_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %233 = mul nsw i32 %205, %232*/
	if ((lpm_mult_main_231_233_en == 1'd1)) begin
		main_231_233_stage0_reg <= (main_filtezexit8ii_205_reg * main_231_232);
	end
end
always @(*) begin
	lpm_mult_main_231_238_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %238 = mul nsw i32 %237, 255*/
	if ((lpm_mult_main_231_238_en == 1'd1)) begin
		main_231_238_stage0_reg <= (main_231_237 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexitii_246_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %246 = mul nsw i32 %222, %dec_ph1.0*/
	if ((lpm_mult_main_upzeroexitii_246_en == 1'd1)) begin
		main_upzeroexitii_246_stage0_reg <= (main_logschexitii_222_reg * main_87_dec_ph10_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexitii_250_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %250 = mul nsw i32 %222, %dec_ph2.0*/
	if ((lpm_mult_main_upzeroexitii_250_en == 1'd1)) begin
		main_upzeroexitii_250_stage0_reg <= (main_logschexitii_222_reg * main_87_dec_ph20_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexitii_254_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %254 = mul nsw i32 %dec_ah2.0, 127*/
	if ((lpm_mult_main_upzeroexitii_254_en == 1'd1)) begin
		main_upzeroexitii_254_stage0_reg <= (main_87_dec_ah20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exitii_260_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %260 = mul nsw i32 %dec_ah1.0, 255*/
	if ((lpm_mult_main_uppol2exitii_260_en == 1'd1)) begin
		main_uppol2exitii_260_stage0_reg <= (main_87_dec_ah10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exitii_270_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %270 = mul nsw i32 %268, 12*/
	if ((lpm_mult_main_uppol2exitii_270_en == 1'd1)) begin
		main_uppol2exitii_270_stage0_reg <= (main_uppol2exitii_268 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exitii_271_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %uppol2.exit.i.i*/
	/*   %271 = mul nsw i32 %269, -44*/
	if ((lpm_mult_main_uppol2exitii_271_en == 1'd1)) begin
		main_uppol2exitii_271_stage0_reg <= (main_uppol2exitii_269 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_275_280_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %280 = mul nsw i32 %278, %279*/
	if ((lpm_mult_main_275_280_en == 1'd1)) begin
		main_275_280_stage0_reg <= (main_275_278_reg * main_275_279);
	end
end
always @(*) begin
	lpm_mult_main_275_284_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %275*/
	/*   %284 = mul nsw i32 %282, %283*/
	if ((lpm_mult_main_275_284_en == 1'd1)) begin
		main_275_284_stage0_reg <= (main_275_282_reg * main_275_283);
	end
end
always @(*) begin
	lpm_mult_main_decodeexiti_300_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %300 = mul nsw i32 %289, -44*/
	if ((lpm_mult_main_decodeexiti_300_en == 1'd1)) begin
		main_decodeexiti_300_stage0_reg <= (main_287_289_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_decodeexiti_301_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %301 = mul nsw i32 %290, 12*/
	if ((lpm_mult_main_decodeexiti_301_en == 1'd1)) begin
		main_decodeexiti_301_stage0_reg <= (main_287_290_reg * 32'd12);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %327*/
	/*   ret i32 %main_result.2*/
	if ((cur_state == LEGUP_F_main_BB__327_242)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep76, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep71, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %9*/
	/*   store i32 0, i32* %scevgep66, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %filtez.exit.i.i*/
	/*   %114 = load i32* %113, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %203 = load i32* %202, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %logsch.exit.i.i*/
	/*   %218 = load i32* %217, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_192)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %275*/
	/*   %279 = load i32* %h_ptr.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_219)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_detl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = `TAG_g_rlt2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_a = `TAG_g_plt2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_a = `TAG_g_al2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_a = `TAG_g_nbl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_a = `TAG_g_rh1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = `TAG_g_ph1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_a = `TAG_g_ah1_a;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep76, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		memory_controller_address_a = main_3_scevgep76;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep71, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_address_a = main_6_scevgep71;
	end
	/* main: %9*/
	/*   store i32 0, i32* %scevgep66, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_20)) begin
		memory_controller_address_a = main_9_scevgep66;
	end
	/* main: %filtez.exit.i.i*/
	/*   %114 = load i32* %113, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		memory_controller_address_a = main_filtezexitii_113;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %203 = load i32* %202, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		memory_controller_address_a = main_filtezexit8ii_202;
	end
	/* main: %logsch.exit.i.i*/
	/*   %218 = load i32* %217, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_192)) begin
		memory_controller_address_a = main_logschexitii_217;
	end
	/* main: %275*/
	/*   %279 = load i32* %h_ptr.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_219)) begin
		memory_controller_address_a = main_275_h_ptr0ii;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep76, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep71, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %9*/
	/*   store i32 0, i32* %scevgep66, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %filtez.exit.i.i*/
	/*   %114 = load i32* %113, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %203 = load i32* %202, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %logsch.exit.i.i*/
	/*   %218 = load i32* %217, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_192)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %275*/
	/*   %279 = load i32* %h_ptr.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_219)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd32;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep76, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep71, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %9*/
	/*   store i32 0, i32* %scevgep66, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_20)) begin
		memory_controller_in_a = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep76, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep71, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %9*/
	/*   store i32 0, i32* %scevgep66, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %filtez.exit.i.i*/
	/*   %114 = load i32* %113, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %203 = load i32* %202, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %logsch.exit.i.i*/
	/*   %218 = load i32* %217, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_192)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %275*/
	/*   %279 = load i32* %h_ptr.0.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_219)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader42*/
	/*   %78 = load i32* @il, align 4*/
	if ((cur_state == LEGUP_F_main_BB_preheader42_74)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %filtez.exit.i.i*/
	/*   %124 = load i32* %123, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %logscl.exit.i.i*/
	/*   %133 = load i32* %132, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_157)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %209 = load i32* %208, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %275*/
	/*   %283 = load i32* %scevgep29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_219)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_deth_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_b = `TAG_g_rlt1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_b = `TAG_g_plt1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_b = `TAG_g_al1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_b = `TAG_g_rh2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_b = `TAG_g_ph2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_b = `TAG_g_ah2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_b = `TAG_g_nbh_a;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		memory_controller_address_b = main_3_scevgep75;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_address_b = main_6_scevgep70;
	end
	/* main: %.preheader42*/
	/*   %78 = load i32* @il, align 4*/
	if ((cur_state == LEGUP_F_main_BB_preheader42_74)) begin
		memory_controller_address_b = `TAG_g_il_a;
	end
	/* main: %filtez.exit.i.i*/
	/*   %124 = load i32* %123, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		memory_controller_address_b = main_filtezexitii_123;
	end
	/* main: %logscl.exit.i.i*/
	/*   %133 = load i32* %132, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_157)) begin
		memory_controller_address_b = main_logsclexitii_132;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %209 = load i32* %208, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		memory_controller_address_b = main_filtezexit8ii_208;
	end
	/* main: %275*/
	/*   %283 = load i32* %scevgep29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_219)) begin
		memory_controller_address_b = main_275_scevgep29;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader42*/
	/*   %78 = load i32* @il, align 4*/
	if ((cur_state == LEGUP_F_main_BB_preheader42_74)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %filtez.exit.i.i*/
	/*   %124 = load i32* %123, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %logscl.exit.i.i*/
	/*   %133 = load i32* %132, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_157)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %209 = load i32* %208, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %275*/
	/*   %283 = load i32* %scevgep29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_219)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd8;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_in_b = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %20*/
	/*   %33 = call fastcc i32 @encode(i32 %31, i32 %32) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %20*/
	/*   %40 = call fastcc i32 @encode(i32 %38, i32 %39) #1*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %20*/
	/*   %47 = call fastcc i32 @encode(i32 %45, i32 %46) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %20*/
	/*   %54 = call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %20*/
	/*   %61 = call fastcc i32 @encode(i32 %59, i32 %60) #1*/
	if ((cur_state == LEGUP_function_call_64)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %20*/
	/*   %68 = call fastcc i32 @encode(i32 %66, i32 %67) #1*/
	if ((cur_state == LEGUP_function_call_67)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %20*/
	/*   %75 = call fastcc i32 @encode(i32 %73, i32 %74) #1*/
	if ((cur_state == LEGUP_function_call_70)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %80*/
	/*   %85 = call fastcc i32 @encode(i32 %83, i32 %84) #1*/
	if ((cur_state == LEGUP_function_call_80)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader42*/
	/*   %78 = load i32* @il, align 4*/
	if ((cur_state == LEGUP_F_main_BB_preheader42_74)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %filtez.exit.i.i*/
	/*   %124 = load i32* %123, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_152)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %logscl.exit.i.i*/
	/*   %133 = load i32* %132, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_157)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %209 = load i32* %208, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_187)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %275*/
	/*   %283 = load i32* %scevgep29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__275_219)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %327*/
	/*   ret i32 %main_result.2*/
	if ((cur_state == LEGUP_F_main_BB__327_242)) begin
		return_val <= main_preheader_main_result2_reg;
		if (start == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
