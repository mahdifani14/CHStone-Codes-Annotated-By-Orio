//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 15 11:37:15 2017
//----------------------------------------------------------------------------//

allocateRAM: @h
Constant: 1
allocateRAM: @qq4_code4_table
Constant: 1
allocateRAM: @qq6_code6_table
Constant: 1
allocateRAM: @wl_code_table
Constant: 1
allocateRAM: @ilb_table
Constant: 1
allocateRAM: @decis_levl
Constant: 1
allocateRAM: @quant26bt_pos
Constant: 1
allocateRAM: @quant26bt_neg
Constant: 1
allocateRAM: @qq2_code2_table
Constant: 1
allocateRAM: @wh_code_table
Constant: 1
allocateRAM: @tqmf
Constant: 0
allocateRAM: @delay_bpl
Constant: 0
allocateRAM: @delay_dltx
Constant: 0
allocateRAM: @rlt1
Constant: 0
allocateRAM: @al1
Constant: 0
allocateRAM: @rlt2
Constant: 0
allocateRAM: @al2
Constant: 0
allocateRAM: @detl
Constant: 0
allocateRAM: @il
Constant: 0
allocateRAM: @nbl
Constant: 0
allocateRAM: @plt1
Constant: 0
allocateRAM: @plt2
Constant: 0
allocateRAM: @delay_bph
Constant: 0
allocateRAM: @delay_dhx
Constant: 0
allocateRAM: @rh1
Constant: 0
allocateRAM: @ah1
Constant: 0
allocateRAM: @rh2
Constant: 0
allocateRAM: @ah2
Constant: 0
allocateRAM: @deth
Constant: 0
allocateRAM: @nbh
Constant: 0
allocateRAM: @ph1
Constant: 0
allocateRAM: @ph2
Constant: 0
allocateRAM: @dec_del_bpl
Constant: 0
allocateRAM: @dec_del_dltx
Constant: 0
allocateRAM: @dec_del_bph
Constant: 0
allocateRAM: @dec_del_dhx
Constant: 0
allocateRAM: @accumc
Constant: 0
allocateRAM: @accumd
Constant: 0
allocateRAM: @test_data
Constant: 1
allocateRAM: @test_compressed
Constant: 1
allocateRAM: @test_result
Constant: 1
allocateRAM: @compressed
Constant: 0
allocateRAM: @result
Constant: 0
allocating global ram: @h
allocating global ram: @qq4_code4_table
allocating global ram: @qq6_code6_table
allocating global ram: @wl_code_table
allocating global ram: @ilb_table
allocating global ram: @decis_levl
allocating global ram: @quant26bt_pos
allocating global ram: @quant26bt_neg
allocating global ram: @qq2_code2_table
allocating global ram: @wh_code_table
allocating global ram: @tqmf
allocating global ram: @delay_bpl
allocating global ram: @delay_dltx
allocating global ram: @rlt1
allocating global ram: @al1
allocating global ram: @rlt2
allocating global ram: @al2
allocating global ram: @detl
allocating global ram: @il
allocating global ram: @nbl
allocating global ram: @plt1
allocating global ram: @plt2
allocating global ram: @delay_bph
allocating global ram: @delay_dhx
allocating global ram: @rh1
allocating global ram: @ah1
allocating global ram: @rh2
allocating global ram: @ah2
allocating global ram: @deth
allocating global ram: @nbh
allocating global ram: @ph1
allocating global ram: @ph2
allocating global ram: @dec_del_bpl
allocating global ram: @dec_del_dltx
allocating global ram: @dec_del_bph
allocating global ram: @dec_del_dhx
allocating global ram: @accumc
allocating global ram: @accumd
allocating global ram: @test_data
allocating global ram: @test_compressed
allocating global ram: @test_result
allocating global ram: @compressed
allocating global ram: @result
# of Vertices: 514
Representatives: 
1 -> 1
2 -> 2
3 -> 3
4 -> 4
5 -> 5
6 -> 6
7 -> 7
8 -> 8
9 -> 9
10 -> 10
11 -> 11
12 -> 12
13 -> 13
14 -> 14
15 -> 15
16 -> 16
17 -> 17
18 -> 18
19 -> 19
20 -> 20
21 -> 21
22 -> 22
23 -> 23
24 -> 24
25 -> 25
26 -> 26
27 -> 27
28 -> 28
29 -> 29
30 -> 30
31 -> 31
32 -> 32
33 -> 33
34 -> 34
35 -> 35
36 -> 36
37 -> 37
38 -> 38
39 -> 39
40 -> 40
41 -> 41
42 -> 42
43 -> 43
44 -> 44
45 -> 45
46 -> 46
47 -> 47
48 -> 48
49 -> 49
50 -> 50
51 -> 51
52 -> 52
53 -> 53
54 -> 54
55 -> 55
56 -> 56
57 -> 57
58 -> 58
59 -> 59
60 -> 60
61 -> 61
62 -> 62
63 -> 63
64 -> 64
65 -> 65
66 -> 66
67 -> 67
68 -> 68
69 -> 69
70 -> 70
71 -> 71
72 -> 72
73 -> 73
74 -> 74
75 -> 75
76 -> 76
77 -> 77
78 -> 78
79 -> 79
80 -> 80
81 -> 81
82 -> 82
83 -> 83
84 -> 84
85 -> 85
86 -> 86
87 -> 87
88 -> 88
89 -> 89
90 -> 90
91 -> 91
92 -> 92
93 -> 93
94 -> 94
95 -> 95
96 -> 96
97 -> 97
98 -> 98
99 -> 99
100 -> 100
101 -> 101
102 -> 102
103 -> 103
104 -> 104
105 -> 105
106 -> 106
107 -> 107
108 -> 108
109 -> 109
110 -> 110
111 -> 111
112 -> 112
113 -> 113
114 -> 114
115 -> 115
116 -> 116
117 -> 117
118 -> 118
119 -> 119
120 -> 120
121 -> 121
122 -> 122
123 -> 123
124 -> 124
125 -> 125
126 -> 126
127 -> 127
128 -> 128
129 -> 129
130 -> 130
131 -> 131
132 -> 132
133 -> 133
134 -> 134
135 -> 135
136 -> 136
137 -> 137
138 -> 138
139 -> 139
140 -> 140
141 -> 141
142 -> 142
143 -> 143
144 -> 144
145 -> 145
146 -> 146
147 -> 147
148 -> 148
149 -> 149
150 -> 150
151 -> 151
152 -> 152
153 -> 153
154 -> 154
155 -> 155
156 -> 156
157 -> 157
158 -> 158
159 -> 159
160 -> 160
161 -> 161
162 -> 162
163 -> 163
164 -> 164
165 -> 165
166 -> 166
167 -> 167
168 -> 168
169 -> 169
170 -> 170
171 -> 171
172 -> 172
173 -> 173
174 -> 174
175 -> 175
176 -> 176
177 -> 177
178 -> 178
179 -> 179
180 -> 180
181 -> 181
182 -> 182
183 -> 183
184 -> 184
185 -> 185
186 -> 186
187 -> 187
188 -> 188
189 -> 189
190 -> 190
191 -> 191
192 -> 192
193 -> 193
194 -> 194
195 -> 195
196 -> 196
197 -> 197
198 -> 198
199 -> 199
200 -> 200
201 -> 201
202 -> 202
203 -> 203
204 -> 204
205 -> 205
206 -> 206
207 -> 207
208 -> 208
209 -> 209
210 -> 210
211 -> 211
212 -> 212
213 -> 213
214 -> 214
215 -> 215
216 -> 216
217 -> 217
218 -> 218
219 -> 219
220 -> 220
221 -> 221
222 -> 222
223 -> 223
224 -> 224
225 -> 225
226 -> 226
227 -> 227
228 -> 228
229 -> 229
230 -> 230
231 -> 231
232 -> 232
233 -> 233
234 -> 234
235 -> 235
236 -> 236
237 -> 237
238 -> 238
239 -> 239
240 -> 240
241 -> 241
242 -> 242
243 -> 243
244 -> 244
245 -> 245
246 -> 246
247 -> 247
248 -> 248
249 -> 249
250 -> 250
251 -> 251
252 -> 252
253 -> 253
254 -> 254
255 -> 255
256 -> 256
257 -> 257
258 -> 258
259 -> 259
260 -> 260
261 -> 261
262 -> 262
263 -> 263
264 -> 264
265 -> 265
266 -> 266
267 -> 267
268 -> 268
269 -> 269
270 -> 270
271 -> 271
272 -> 272
273 -> 273
274 -> 274
275 -> 275
276 -> 276
277 -> 277
278 -> 278
279 -> 279
280 -> 280
281 -> 281
282 -> 282
283 -> 283
284 -> 284
285 -> 285
286 -> 286
287 -> 287
288 -> 288
289 -> 289
290 -> 290
291 -> 291
292 -> 292
293 -> 293
294 -> 294
295 -> 295
296 -> 296
297 -> 297
298 -> 298
299 -> 299
300 -> 300
301 -> 301
302 -> 302
303 -> 303
304 -> 304
305 -> 305
306 -> 306
307 -> 307
308 -> 308
309 -> 309
310 -> 310
311 -> 311
312 -> 312
313 -> 313
314 -> 314
315 -> 315
316 -> 316
317 -> 317
318 -> 318
319 -> 319
320 -> 320
321 -> 321
322 -> 322
323 -> 323
324 -> 324
325 -> 325
326 -> 326
327 -> 327
328 -> 328
329 -> 329
330 -> 330
331 -> 331
332 -> 332
333 -> 333
334 -> 334
335 -> 335
336 -> 336
337 -> 337
338 -> 338
339 -> 339
340 -> 340
341 -> 341
342 -> 342
343 -> 343
344 -> 344
345 -> 345
346 -> 346
347 -> 347
348 -> 348
349 -> 349
350 -> 350
351 -> 351
352 -> 352
353 -> 353
354 -> 354
355 -> 355
356 -> 356
357 -> 357
358 -> 358
359 -> 359
360 -> 360
361 -> 361
362 -> 362
363 -> 363
364 -> 364
365 -> 365
366 -> 366
367 -> 367
368 -> 368
369 -> 369
370 -> 370
371 -> 371
372 -> 372
373 -> 373
374 -> 374
375 -> 375
376 -> 376
377 -> 377
378 -> 378
379 -> 379
380 -> 380
381 -> 381
382 -> 382
383 -> 383
384 -> 384
385 -> 385
386 -> 386
387 -> 387
388 -> 388
389 -> 389
390 -> 390
391 -> 391
392 -> 392
393 -> 393
394 -> 394
395 -> 395
396 -> 396
397 -> 397
398 -> 398
399 -> 399
400 -> 400
401 -> 401
402 -> 402
403 -> 403
404 -> 404
405 -> 405
406 -> 406
407 -> 407
408 -> 408
409 -> 409
410 -> 410
411 -> 411
412 -> 412
413 -> 413
414 -> 414
415 -> 415
416 -> 416
417 -> 417
418 -> 418
419 -> 419
420 -> 420
421 -> 421
422 -> 422
423 -> 423
424 -> 424
425 -> 425
426 -> 426
427 -> 427
428 -> 428
429 -> 429
430 -> 430
431 -> 431
432 -> 432
433 -> 433
434 -> 434
435 -> 435
436 -> 436
437 -> 437
438 -> 438
439 -> 439
440 -> 440
441 -> 441
442 -> 442
443 -> 443
444 -> 444
445 -> 445
446 -> 446
447 -> 447
448 -> 448
449 -> 449
450 -> 450
451 -> 451
452 -> 452
453 -> 453
454 -> 454
455 -> 455
456 -> 456
457 -> 457
458 -> 458
459 -> 459
460 -> 460
461 -> 461
462 -> 462
463 -> 463
464 -> 464
465 -> 465
466 -> 466
467 -> 467
468 -> 468
469 -> 469
470 -> 470
471 -> 471
472 -> 472
473 -> 473
474 -> 474
475 -> 475
476 -> 476
477 -> 477
478 -> 478
479 -> 479
480 -> 480
481 -> 481
482 -> 482
483 -> 483
484 -> 484
485 -> 485
486 -> 486
487 -> 487
488 -> 488
489 -> 489
490 -> 490
491 -> 491
492 -> 492
493 -> 493
494 -> 494
495 -> 495
496 -> 496
497 -> 497
498 -> 498
499 -> 499
500 -> 500
501 -> 501
502 -> 502
503 -> 503
504 -> 504
505 -> 505
506 -> 506
507 -> 507
508 -> 508
509 -> 509
510 -> 510
511 -> 511
512 -> 512
513 -> 513
514 -> 514

Connections (Graph): 
1 -> 105 109 472 476 
2 -> 100 101 466 468 
3 -> 156 368 
4 -> 155 367 
5 -> 369 
6 -> 339 
7 -> 159 373 
8 -> 158 372 
9 -> 163 228 377 432 
10 -> 162 227 376 431 
11 -> 149 
12 -> 148 
13 -> 154 
14 -> 152 
15 -> 154 
16 -> 152 
17 -> 221 426 
18 -> 220 425 
19 -> 224 428 
20 -> 223 427 
21 -> 93 95 104 108 114 116 120 
22 -> 94 96 102 103 115 117 118 119 293 
23 -> 124 132 167 173 
24 -> 125 130 166 170 287 
25 -> 126 133 172 178 181 183 
26 -> 127 131 171 179 180 182 184 185 281 
27 -> 139 
28 -> 
29 -> 140 
30 -> 
31 -> 141 
32 -> 
33 -> 142 
34 -> 
35 -> 147 
36 -> 
37 -> 338 
38 -> 
39 -> 157 
40 -> 
41 -> 186 
42 -> 
43 -> 187 
44 -> 
45 -> 196 204 232 238 
46 -> 197 202 231 235 288 
47 -> 198 205 237 243 246 248 
48 -> 199 203 236 244 245 247 249 250 282 
49 -> 209 
50 -> 
51 -> 210 
52 -> 
53 -> 211 
54 -> 
55 -> 212 
56 -> 
57 -> 217 
58 -> 
59 -> 222 
60 -> 
61 -> 251 
62 -> 
63 -> 252 
64 -> 
65 -> 350 358 381 387 
66 -> 289 351 356 380 384 
67 -> 352 359 386 392 395 397 
68 -> 283 353 357 385 393 394 396 398 399 
69 -> 407 415 436 442 
70 -> 290 408 413 435 439 
71 -> 409 416 441 447 450 452 
72 -> 284 410 414 440 448 449 451 453 454 
73 -> 471 481 489 
74 -> 296 469 482 486 487 495 
75 -> 475 483 490 
76 -> 297 470 484 485 488 496 
77 -> 262 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 
78 -> 307 308 309 311 312 314 315 317 318 320 321 323 324 326 340 342 
79 -> 502 
80 -> 500 
81 -> 510 
82 -> 508 
83 -> 349 501 
84 -> 327 328 329 330 331 332 333 343 348 499 
85 -> 509 
86 -> 346 347 507 
87 -> 
88 -> 
89 -> 
90 -> 
91 -> 
92 -> 
93 -> 
94 -> 
95 -> 
96 -> 
97 -> 
98 -> 97 99 
99 -> 
100 -> 
101 -> 
102 -> 
103 -> 
104 -> 
105 -> 
106 -> 
107 -> 106 123 
108 -> 
109 -> 
110 -> 
111 -> 110 137 
112 -> 
113 -> 112 
114 -> 
115 -> 
116 -> 
117 -> 
118 -> 
119 -> 
120 -> 
121 -> 
122 -> 121 
123 -> 138 
124 -> 
125 -> 
126 -> 
127 -> 
128 -> 
129 -> 128 136 
130 -> 
131 -> 
132 -> 
133 -> 
134 -> 
135 -> 134 
136 -> 
137 -> 138 
138 -> 
139 -> 
140 -> 
141 -> 
142 -> 
143 -> 
144 -> 143 
145 -> 195 
146 -> 145 164 
147 -> 
148 -> 
149 -> 
150 -> 
151 -> 150 
152 -> 153 
153 -> 
154 -> 
155 -> 
156 -> 
157 -> 
158 -> 
159 -> 160 
160 -> 
161 -> 160 
162 -> 
163 -> 
164 -> 
165 -> 164 195 
166 -> 
167 -> 
168 -> 
169 -> 168 
170 -> 
171 -> 
172 -> 
173 -> 
174 -> 
175 -> 174 
176 -> 
177 -> 176 
178 -> 
179 -> 
180 -> 
181 -> 
182 -> 
183 -> 
184 -> 
185 -> 
186 -> 
187 -> 
188 -> 190 
189 -> 188 
190 -> 
191 -> 193 
192 -> 191 
193 -> 
194 -> 193 
195 -> 
196 -> 
197 -> 
198 -> 
199 -> 
200 -> 
201 -> 200 208 
202 -> 
203 -> 
204 -> 
205 -> 
206 -> 
207 -> 206 
208 -> 
209 -> 
210 -> 
211 -> 
212 -> 
213 -> 
214 -> 213 
215 -> 260 
216 -> 215 
217 -> 
218 -> 
219 -> 218 
220 -> 
221 -> 
222 -> 
223 -> 
224 -> 225 
225 -> 
226 -> 225 
227 -> 
228 -> 
229 -> 
230 -> 229 260 
231 -> 
232 -> 
233 -> 
234 -> 233 
235 -> 
236 -> 
237 -> 
238 -> 
239 -> 
240 -> 239 
241 -> 
242 -> 241 
243 -> 
244 -> 
245 -> 
246 -> 
247 -> 
248 -> 
249 -> 
250 -> 
251 -> 
252 -> 
253 -> 255 
254 -> 253 
255 -> 
256 -> 258 
257 -> 256 
258 -> 
259 -> 258 
260 -> 
261 -> 
262 -> 261 
263 -> 
264 -> 263 
265 -> 261 
266 -> 263 
267 -> 261 
268 -> 263 
269 -> 261 
270 -> 263 
271 -> 261 
272 -> 263 
273 -> 261 
274 -> 263 
275 -> 261 
276 -> 263 
277 -> 261 
278 -> 263 
279 -> 
280 -> 279 
281 -> 
282 -> 
283 -> 
284 -> 
285 -> 
286 -> 285 
287 -> 
288 -> 
289 -> 
290 -> 
291 -> 
292 -> 291 
293 -> 
294 -> 
295 -> 294 
296 -> 
297 -> 
298 -> 
299 -> 298 
300 -> 
301 -> 300 302 303 304 305 306 310 313 316 319 322 325 
302 -> 
303 -> 
304 -> 
305 -> 
306 -> 
307 -> 
308 -> 
309 -> 
310 -> 
311 -> 
312 -> 
313 -> 
314 -> 
315 -> 
316 -> 
317 -> 
318 -> 
319 -> 
320 -> 
321 -> 
322 -> 
323 -> 
324 -> 
325 -> 
326 -> 
327 -> 
328 -> 
329 -> 
330 -> 
331 -> 
332 -> 
333 -> 
334 -> 
335 -> 334 
336 -> 
337 -> 336 341 
338 -> 
339 -> 
340 -> 
341 -> 
342 -> 
343 -> 
344 -> 
345 -> 344 
346 -> 
347 -> 
348 -> 
349 -> 
350 -> 
351 -> 
352 -> 
353 -> 
354 -> 
355 -> 354 362 
356 -> 
357 -> 
358 -> 
359 -> 
360 -> 
361 -> 360 
362 -> 
363 -> 
364 -> 363 
365 -> 370 420 
366 -> 365 
367 -> 
368 -> 
369 -> 
370 -> 463 
371 -> 370 
372 -> 
373 -> 374 
374 -> 
375 -> 374 
376 -> 
377 -> 
378 -> 
379 -> 378 420 
380 -> 
381 -> 
382 -> 
383 -> 382 
384 -> 
385 -> 
386 -> 
387 -> 
388 -> 
389 -> 388 
390 -> 
391 -> 390 
392 -> 
393 -> 
394 -> 
395 -> 
396 -> 
397 -> 
398 -> 
399 -> 
400 -> 402 
401 -> 400 
402 -> 
403 -> 405 
404 -> 403 
405 -> 
406 -> 405 
407 -> 
408 -> 
409 -> 
410 -> 
411 -> 
412 -> 411 419 
413 -> 
414 -> 
415 -> 
416 -> 
417 -> 
418 -> 417 
419 -> 
420 -> 
421 -> 
422 -> 421 
423 -> 462 
424 -> 423 
425 -> 
426 -> 
427 -> 
428 -> 429 
429 -> 
430 -> 429 
431 -> 
432 -> 
433 -> 
434 -> 433 462 
435 -> 
436 -> 
437 -> 
438 -> 437 
439 -> 
440 -> 
441 -> 
442 -> 
443 -> 
444 -> 443 
445 -> 
446 -> 445 
447 -> 
448 -> 
449 -> 
450 -> 
451 -> 
452 -> 
453 -> 
454 -> 
455 -> 457 
456 -> 455 
457 -> 
458 -> 460 
459 -> 458 
460 -> 
461 -> 460 
462 -> 463 
463 -> 
464 -> 
465 -> 464 467 
466 -> 
467 -> 
468 -> 
469 -> 
470 -> 
471 -> 
472 -> 
473 -> 
474 -> 473 493 
475 -> 
476 -> 
477 -> 
478 -> 477 494 
479 -> 
480 -> 479 
481 -> 
482 -> 
483 -> 
484 -> 
485 -> 
486 -> 
487 -> 
488 -> 
489 -> 
490 -> 
491 -> 
492 -> 491 
493 -> 
494 -> 
495 -> 
496 -> 
497 -> 
498 -> 497 
499 -> 
500 -> 
501 -> 
502 -> 
503 -> 
504 -> 503 
505 -> 
506 -> 505 
507 -> 
508 -> 
509 -> 
510 -> 
511 -> 
512 -> 511 
513 -> 
514 -> 513 

Points-to-set: 
1 -> {}
2 -> {1, }
3 -> {}
4 -> {3, }
5 -> {}
6 -> {5, }
7 -> {}
8 -> {7, }
9 -> {}
10 -> {9, }
11 -> {}
12 -> {11, }
13 -> {}
14 -> {13, }
15 -> {}
16 -> {15, }
17 -> {}
18 -> {17, }
19 -> {}
20 -> {19, }
21 -> {}
22 -> {21, }
23 -> {}
24 -> {23, }
25 -> {}
26 -> {25, }
27 -> {}
28 -> {27, }
29 -> {}
30 -> {29, }
31 -> {}
32 -> {31, }
33 -> {}
34 -> {33, }
35 -> {}
36 -> {35, }
37 -> {}
38 -> {37, }
39 -> {}
40 -> {39, }
41 -> {}
42 -> {41, }
43 -> {}
44 -> {43, }
45 -> {}
46 -> {45, }
47 -> {}
48 -> {47, }
49 -> {}
50 -> {49, }
51 -> {}
52 -> {51, }
53 -> {}
54 -> {53, }
55 -> {}
56 -> {55, }
57 -> {}
58 -> {57, }
59 -> {}
60 -> {59, }
61 -> {}
62 -> {61, }
63 -> {}
64 -> {63, }
65 -> {}
66 -> {65, }
67 -> {}
68 -> {67, }
69 -> {}
70 -> {69, }
71 -> {}
72 -> {71, }
73 -> {}
74 -> {73, }
75 -> {}
76 -> {75, }
77 -> {}
78 -> {77, }
79 -> {}
80 -> {79, }
81 -> {}
82 -> {81, }
83 -> {}
84 -> {83, }
85 -> {}
86 -> {85, }
87 -> {}
88 -> {87, }
89 -> {}
90 -> {89, }
91 -> {}
92 -> {91, }
93 -> {}
94 -> {21, }
95 -> {}
96 -> {21, }
97 -> {}
98 -> {}
99 -> {}
100 -> {1, }
101 -> {1, }
102 -> {21, }
103 -> {21, }
104 -> {}
105 -> {}
106 -> {}
107 -> {}
108 -> {}
109 -> {}
110 -> {}
111 -> {}
112 -> {}
113 -> {}
114 -> {}
115 -> {21, }
116 -> {}
117 -> {21, }
118 -> {21, }
119 -> {21, }
120 -> {}
121 -> {}
122 -> {}
123 -> {}
124 -> {}
125 -> {23, }
126 -> {}
127 -> {25, }
128 -> {}
129 -> {}
130 -> {23, }
131 -> {25, }
132 -> {}
133 -> {}
134 -> {}
135 -> {}
136 -> {}
137 -> {}
138 -> {}
139 -> {}
140 -> {}
141 -> {}
142 -> {}
143 -> {}
144 -> {}
145 -> {}
146 -> {}
147 -> {}
148 -> {11, }
149 -> {}
150 -> {}
151 -> {}
152 -> {13, 15, }
153 -> {13, 15, }
154 -> {}
155 -> {3, }
156 -> {}
157 -> {}
158 -> {7, }
159 -> {}
160 -> {}
161 -> {}
162 -> {9, }
163 -> {}
164 -> {}
165 -> {}
166 -> {23, }
167 -> {}
168 -> {}
169 -> {}
170 -> {23, }
171 -> {25, }
172 -> {}
173 -> {}
174 -> {}
175 -> {}
176 -> {}
177 -> {}
178 -> {}
179 -> {25, }
180 -> {25, }
181 -> {}
182 -> {25, }
183 -> {}
184 -> {25, }
185 -> {25, }
186 -> {}
187 -> {}
188 -> {}
189 -> {}
190 -> {}
191 -> {}
192 -> {}
193 -> {}
194 -> {}
195 -> {}
196 -> {}
197 -> {45, }
198 -> {}
199 -> {47, }
200 -> {}
201 -> {}
202 -> {45, }
203 -> {47, }
204 -> {}
205 -> {}
206 -> {}
207 -> {}
208 -> {}
209 -> {}
210 -> {}
211 -> {}
212 -> {}
213 -> {}
214 -> {}
215 -> {}
216 -> {}
217 -> {}
218 -> {}
219 -> {}
220 -> {17, }
221 -> {}
222 -> {}
223 -> {19, }
224 -> {}
225 -> {}
226 -> {}
227 -> {9, }
228 -> {}
229 -> {}
230 -> {}
231 -> {45, }
232 -> {}
233 -> {}
234 -> {}
235 -> {45, }
236 -> {47, }
237 -> {}
238 -> {}
239 -> {}
240 -> {}
241 -> {}
242 -> {}
243 -> {}
244 -> {47, }
245 -> {47, }
246 -> {}
247 -> {47, }
248 -> {}
249 -> {47, }
250 -> {47, }
251 -> {}
252 -> {}
253 -> {}
254 -> {}
255 -> {}
256 -> {}
257 -> {}
258 -> {}
259 -> {}
260 -> {}
261 -> {}
262 -> {}
263 -> {}
264 -> {}
265 -> {}
266 -> {}
267 -> {}
268 -> {}
269 -> {}
270 -> {}
271 -> {}
272 -> {}
273 -> {}
274 -> {}
275 -> {}
276 -> {}
277 -> {}
278 -> {}
279 -> {}
280 -> {}
281 -> {25, }
282 -> {47, }
283 -> {67, }
284 -> {71, }
285 -> {}
286 -> {}
287 -> {23, }
288 -> {45, }
289 -> {65, }
290 -> {69, }
291 -> {}
292 -> {}
293 -> {21, }
294 -> {}
295 -> {}
296 -> {73, }
297 -> {75, }
298 -> {}
299 -> {}
300 -> {}
301 -> {}
302 -> {}
303 -> {}
304 -> {}
305 -> {}
306 -> {}
307 -> {77, }
308 -> {77, }
309 -> {77, }
310 -> {}
311 -> {77, }
312 -> {77, }
313 -> {}
314 -> {77, }
315 -> {77, }
316 -> {}
317 -> {77, }
318 -> {77, }
319 -> {}
320 -> {77, }
321 -> {77, }
322 -> {}
323 -> {77, }
324 -> {77, }
325 -> {}
326 -> {77, }
327 -> {83, }
328 -> {83, }
329 -> {83, }
330 -> {83, }
331 -> {83, }
332 -> {83, }
333 -> {83, }
334 -> {}
335 -> {}
336 -> {}
337 -> {}
338 -> {}
339 -> {5, }
340 -> {77, }
341 -> {}
342 -> {77, }
343 -> {83, }
344 -> {}
345 -> {}
346 -> {85, }
347 -> {85, }
348 -> {83, }
349 -> {}
350 -> {}
351 -> {65, }
352 -> {}
353 -> {67, }
354 -> {}
355 -> {}
356 -> {65, }
357 -> {67, }
358 -> {}
359 -> {}
360 -> {}
361 -> {}
362 -> {}
363 -> {}
364 -> {}
365 -> {}
366 -> {}
367 -> {3, }
368 -> {}
369 -> {}
370 -> {}
371 -> {}
372 -> {7, }
373 -> {}
374 -> {}
375 -> {}
376 -> {9, }
377 -> {}
378 -> {}
379 -> {}
380 -> {65, }
381 -> {}
382 -> {}
383 -> {}
384 -> {65, }
385 -> {67, }
386 -> {}
387 -> {}
388 -> {}
389 -> {}
390 -> {}
391 -> {}
392 -> {}
393 -> {67, }
394 -> {67, }
395 -> {}
396 -> {67, }
397 -> {}
398 -> {67, }
399 -> {67, }
400 -> {}
401 -> {}
402 -> {}
403 -> {}
404 -> {}
405 -> {}
406 -> {}
407 -> {}
408 -> {69, }
409 -> {}
410 -> {71, }
411 -> {}
412 -> {}
413 -> {69, }
414 -> {71, }
415 -> {}
416 -> {}
417 -> {}
418 -> {}
419 -> {}
420 -> {}
421 -> {}
422 -> {}
423 -> {}
424 -> {}
425 -> {17, }
426 -> {}
427 -> {19, }
428 -> {}
429 -> {}
430 -> {}
431 -> {9, }
432 -> {}
433 -> {}
434 -> {}
435 -> {69, }
436 -> {}
437 -> {}
438 -> {}
439 -> {69, }
440 -> {71, }
441 -> {}
442 -> {}
443 -> {}
444 -> {}
445 -> {}
446 -> {}
447 -> {}
448 -> {71, }
449 -> {71, }
450 -> {}
451 -> {71, }
452 -> {}
453 -> {71, }
454 -> {71, }
455 -> {}
456 -> {}
457 -> {}
458 -> {}
459 -> {}
460 -> {}
461 -> {}
462 -> {}
463 -> {}
464 -> {}
465 -> {}
466 -> {1, }
467 -> {}
468 -> {1, }
469 -> {73, }
470 -> {75, }
471 -> {}
472 -> {}
473 -> {}
474 -> {}
475 -> {}
476 -> {}
477 -> {}
478 -> {}
479 -> {}
480 -> {}
481 -> {}
482 -> {73, }
483 -> {}
484 -> {75, }
485 -> {75, }
486 -> {73, }
487 -> {73, }
488 -> {75, }
489 -> {}
490 -> {}
491 -> {}
492 -> {}
493 -> {}
494 -> {}
495 -> {73, }
496 -> {75, }
497 -> {}
498 -> {}
499 -> {83, }
500 -> {79, }
501 -> {}
502 -> {}
503 -> {}
504 -> {}
505 -> {}
506 -> {}
507 -> {85, }
508 -> {81, }
509 -> {}
510 -> {}
511 -> {}
512 -> {}
513 -> {}
514 -> {}

Variable: Int -> Value* mapping
68: @dec_del_dltx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
22: @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
24: @delay_bpl = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
12: @decis_levl = internal unnamed_addr constant [30 x i32] [i32 280, i32 576, i32 880, i32 1200, i32 1520, i32 1864, i32 2208, i32 2584, i32 2960, i32 3376, i32 3784, i32 4240, i32 4696, i32 5200, i32 5712, i32 6288, i32 6864, i32 7520, i32 8184, i32 8968, i32 9752, i32 10712, i32 11664, i32 12896, i32 14120, i32 15840, i32 17560, i32 20456, i32 23352, i32 32767], align 4
14: @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 32], align 4
8: @wl_code_table = internal unnamed_addr constant [16 x i32] [i32 -60, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 -60], align 4
10: @ilb_table = internal unnamed_addr constant [32 x i32] [i32 2048, i32 2093, i32 2139, i32 2186, i32 2233, i32 2282, i32 2332, i32 2383, i32 2435, i32 2489, i32 2543, i32 2599, i32 2656, i32 2714, i32 2774, i32 2834, i32 2896, i32 2960, i32 3025, i32 3091, i32 3158, i32 3228, i32 3298, i32 3371, i32 3444, i32 3520, i32 3597, i32 3676, i32 3756, i32 3838, i32 3922, i32 4008], align 4
6: @qq6_code6_table = internal unnamed_addr constant [64 x i32] [i32 -136, i32 -136, i32 -136, i32 -136, i32 -24808, i32 -21904, i32 -19008, i32 -16704, i32 -14984, i32 -13512, i32 -12280, i32 -11192, i32 -10232, i32 -9360, i32 -8576, i32 -7856, i32 -7192, i32 -6576, i32 -6000, i32 -5456, i32 -4944, i32 -4464, i32 -4008, i32 -3576, i32 -3168, i32 -2776, i32 -2400, i32 -2032, i32 -1688, i32 -1360, i32 -1040, i32 -728, i32 24808, i32 21904, i32 19008, i32 16704, i32 14984, i32 13512, i32 12280, i32 11192, i32 10232, i32 9360, i32 8576, i32 7856, i32 7192, i32 6576, i32 6000, i32 5456, i32 4944, i32 4464, i32 4008, i32 3576, i32 3168, i32 2776, i32 2400, i32 2032, i32 1688, i32 1360, i32 1040, i32 728, i32 432, i32 136, i32 -432, i32 -136], align 4
70: @dec_del_bph = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
4: @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, i32 2584, i32 1200, i32 0], align 4
2: @h = internal unnamed_addr constant [24 x i32] [i32 12, i32 -44, i32 -44, i32 212, i32 48, i32 -624, i32 128, i32 1448, i32 -840, i32 -3220, i32 3804, i32 15504, i32 15504, i32 3804, i32 -3220, i32 -840, i32 1448, i32 128, i32 -624, i32 48, i32 212, i32 -44, i32 -44, i32 12], align 4
16: @quant26bt_neg = internal unnamed_addr constant [31 x i32] [i32 63, i32 62, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 4], align 4
18: @qq2_code2_table = internal unnamed_addr constant [4 x i32] [i32 -7408, i32 -1616, i32 7408, i32 1616], align 4
38: @il = internal unnamed_addr global i32 0, align 4
40: @nbl = internal unnamed_addr global i32 0, align 4
20: @wh_code_table = internal unnamed_addr constant [4 x i32] [i32 798, i32 -214, i32 798, i32 -214], align 4
36: @detl = internal unnamed_addr global i32 0, align 4
26: @delay_dltx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
28: @rlt1 = internal unnamed_addr global i32 0, align 4
30: @al1 = internal unnamed_addr global i32 0, align 4
32: @rlt2 = internal unnamed_addr global i32 0, align 4
34: @al2 = internal unnamed_addr global i32 0, align 4
72: @dec_del_dhx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
74: @accumc = internal unnamed_addr global [11 x i32] zeroinitializer, align 4
76: @accumd = internal unnamed_addr global [11 x i32] zeroinitializer, align 4
78: @test_data = internal unnamed_addr constant [100 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 67, i32 67, i32 67, i32 67, i32 67, i32 67, i32 67, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 65, i32 65, i32 65, i32 65, i32 65, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 63, i32 63, i32 63, i32 63, i32 63, i32 62, i32 62, i32 62, i32 62, i32 62, i32 62, i32 61, i32 61, i32 61, i32 61, i32 61, i32 61, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60], align 4
80: @test_compressed = internal unnamed_addr constant [100 x i32] [i32 253, i32 222, i32 119, i32 186, i32 244, i32 146, i32 32, i32 160, i32 236, i32 237, i32 238, i32 240, i32 241, i32 241, i32 242, i32 243, i32 244, i32 243, i32 244, i32 245, i32 244, i32 244, i32 245, i32 245, i32 245, i32 246, i32 246, i32 247, i32 247, i32 247, i32 247, i32 248, i32 246, i32 247, i32 249, i32 247, i32 248, i32 247, i32 248, i32 247, i32 248, i32 247, i32 248, i32 247, i32 248, i32 248, i32 246, i32 248, i32 247, i32 248, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
82: @test_result = internal unnamed_addr constant [100 x i32] [i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 -2, i32 -1, i32 -2, i32 0, i32 -3, i32 1, i32 0, i32 0, i32 -4, i32 1, i32 1, i32 2, i32 11, i32 20, i32 18, i32 20, i32 22, i32 28, i32 27, i32 31, i32 31, i32 34, i32 31, i32 34, i32 34, i32 38, i32 37, i32 42, i32 42, i32 44, i32 41, i32 43, i32 42, i32 47, i32 45, i32 47, i32 44, i32 45, i32 43, i32 46, i32 45, i32 48, i32 46, i32 49, i32 48, i32 51, i32 49, i32 52, i32 52, i32 55, i32 53, i32 56, i32 55, i32 58, i32 57, i32 59, i32 57, i32 60, i32 60, i32 60, i32 54, i32 54, i32 53, i32 60, i32 62, i32 62, i32 54, i32 55, i32 56, i32 59, i32 53, i32 54, i32 56, i32 59, i32 53, i32 56, i32 58, i32 59, i32 53, i32 56, i32 58, i32 60, i32 54, i32 55, i32 57], align 4
84: @compressed = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
86: @result = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
88: @.str = private unnamed_addr constant [12 x i8] c"Result: %d \00", align 1
42: @plt1 = internal unnamed_addr global i32 0, align 4
44: @plt2 = internal unnamed_addr global i32 0, align 4
46: @delay_bph = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
48: @delay_dhx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
50: @rh1 = internal unnamed_addr global i32 0, align 4
52: @ah1 = internal unnamed_addr global i32 0, align 4
54: @rh2 = internal unnamed_addr global i32 0, align 4
56: @ah2 = internal unnamed_addr global i32 0, align 4
58: @deth = internal unnamed_addr global i32 0, align 4
60: @nbh = internal unnamed_addr global i32 0, align 4
62: @ph1 = internal unnamed_addr global i32 0, align 4
64: @ph2 = internal unnamed_addr global i32 0, align 4
66: @dec_del_bpl = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
90: @.str1 = private unnamed_addr constant [14 x i8] c"RESULT: PASS \00", align 1
92: @.str2 = private unnamed_addr constant [13 x i8] c"RESULT: FAIL\00", align 1
279: 
; Function Attrs: nounwind
define internal fastcc i32 @encode(i32 %xin1, i32 %xin2) #0 {
  %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4
  %2 = mul nsw i32 %1, 12
  %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4
  %4 = mul nsw i32 %3, -44
  br label %5

; <label>:5                                       ; preds = %10, %0
  %6 = phi i32 [ 0, %0 ], [ %19, %10 ]
  %xa.0 = phi i32 [ %2, %0 ], [ %14, %10 ]
  %xb.0 = phi i32 [ %4, %0 ], [ %18, %10 ]
  %7 = shl i32 %6, 1
  %8 = add i32 %7, 2
  %9 = add i32 %7, 3
  %exitcond23 = icmp eq i32 %6, 10
  br i1 %exitcond23, label %20, label %10

; <label>:10                                      ; preds = %5
  %scevgep27 = getelementptr [24 x i32]* @h, i32 0, i32 %9
  %h_ptr.0 = getelementptr [24 x i32]* @h, i32 0, i32 %8
  %scevgep25 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %9
  %tqmf_ptr.0 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %8
  %11 = load i32* %tqmf_ptr.0, align 4
  %12 = load i32* %h_ptr.0, align 4
  %13 = mul nsw i32 %11, %12
  %14 = add nsw i32 %xa.0, %13
  %15 = load i32* %scevgep25, align 4
  %16 = load i32* %scevgep27, align 4
  %17 = mul nsw i32 %15, %16
  %18 = add nsw i32 %xb.0, %17
  %19 = add nsw i32 %6, 1
  br label %5

; <label>:20                                      ; preds = %5
  %21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4
  %22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4
  br label %23

; <label>:23                                      ; preds = %25, %20
  %24 = phi i32 [ 0, %20 ], [ %29, %25 ]
  %exitcond20 = icmp eq i32 %24, 22
  br i1 %exitcond20, label %30, label %25

; <label>:25                                      ; preds = %23
  %26 = sub i32 23, %24
  %tqmf_ptr.1 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %26
  %27 = sub i32 21, %24
  %tqmf_ptr1.0 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %27
  %28 = load i32* %tqmf_ptr1.0, align 4
  store i32 %28, i32* %tqmf_ptr.1, align 4
  %29 = add nsw i32 %24, 1
  br label %23

; <label>:30                                      ; preds = %23
  %31 = mul nsw i32 %21, -44
  %32 = add nsw i32 %xa.0, %31
  store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4
  store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4
  %33 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4
  %34 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4
  %35 = mul nsw i32 %33, %34
  br label %36

; <label>:36                                      ; preds = %37, %30
  %indvar15 = phi i32 [ %indvar.next16, %37 ], [ 0, %30 ]
  %zl.0.i = phi i32 [ %41, %37 ], [ %35, %30 ]
  %i.0.i = add i32 %indvar15, 1
  %exitcond17 = icmp eq i32 %indvar15, 5
  br i1 %exitcond17, label %filtez.exit, label %37

; <label>:37                                      ; preds = %36
  %.0.i = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %i.0.i
  %.01.i = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %i.0.i
  %38 = load i32* %.0.i, align 4
  %39 = load i32* %.01.i, align 4
  %40 = mul nsw i32 %38, %39
  %41 = add nsw i32 %zl.0.i, %40
  %indvar.next16 = add i32 %indvar15, 1
  br label %36

filtez.exit:                                      ; preds = %36
  %42 = mul nsw i32 %22, 12
  %43 = add nsw i32 %xb.0, %42
  %44 = add nsw i32 %32, %43
  %45 = sub nsw i32 %32, %43
  %46 = ashr i32 %44, 15
  %47 = ashr i32 %45, 15
  %48 = ashr i32 %zl.0.i, 14
  %49 = load i32* @rlt1, align 4
  %50 = load i32* @al1, align 4
  %51 = load i32* @rlt2, align 4
  %52 = load i32* @al2, align 4
  %53 = shl nsw i32 %49, 1
  %54 = mul nsw i32 %50, %53
  %55 = shl nsw i32 %51, 1
  %56 = mul nsw i32 %52, %55
  %57 = add nsw i32 %54, %56
  %58 = ashr i32 %57, 15
  %59 = add nsw i32 %48, %58
  %60 = sub nsw i32 %46, %59
  %61 = load i32* @detl, align 4
  %62 = icmp sgt i32 %60, -1
  %63 = sub nsw i32 0, %60
  %. = select i1 %62, i32 %60, i32 %63
  br label %64

; <label>:64                                      ; preds = %72, %filtez.exit
  %65 = phi i32 [ 0, %filtez.exit ], [ %73, %72 ]
  %66 = icmp slt i32 %65, 30
  br i1 %66, label %67, label %.loopexit.i

; <label>:67                                      ; preds = %64
  %scevgep14 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %65
  %68 = load i32* %scevgep14, align 4
  %69 = mul nsw i32 %68, %61
  %70 = ashr i32 %69, 15
  %71 = icmp sgt i32 %., %70
  br i1 %71, label %72, label %.loopexit.i

; <label>:72                                      ; preds = %67
  %73 = add nsw i32 %65, 1
  br label %64

.loopexit.i:                                      ; preds = %67, %64
  %quant26bt_pos.quant26bt_neg = select i1 %62, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg
  %.in = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg, i32 0, i32 %65
  %74 = load i32* %.in, align 4
  store i32 %74, i32* @il, align 4
  %75 = ashr i32 %74, 2
  %76 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %75
  %77 = load i32* %76, align 4
  %78 = mul nsw i32 %61, %77
  %79 = ashr i32 %78, 15
  %80 = load i32* @nbl, align 4
  %81 = mul nsw i32 %80, 127
  %82 = ashr i32 %81, 7
  %83 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %75
  %84 = load i32* %83, align 4
  %85 = add nsw i32 %82, %84
  %86 = icmp slt i32 %85, 0
  br i1 %86, label %logscl.exit, label %87

; <label>:87                                      ; preds = %.loopexit.i
  %88 = icmp sgt i32 %85, 18432
  %.39 = select i1 %88, i32 18432, i32 %85
  br label %logscl.exit

logscl.exit:                                      ; preds = %87, %.loopexit.i
  %.1.i23 = phi i32 [ 0, %.loopexit.i ], [ %.39, %87 ]
  store i32 %.1.i23, i32* @nbl, align 4
  %89 = lshr i32 %.1.i23, 6
  %90 = and i32 %89, 31
  %91 = ashr i32 %.1.i23, 11
  %92 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %90
  %93 = load i32* %92, align 4
  %94 = sub nsw i32 9, %91
  %95 = ashr i32 %93, %94
  %96 = shl i32 %95, 3
  store i32 %96, i32* @detl, align 4
  %97 = add nsw i32 %79, %48
  %98 = icmp eq i32 %79, 0
  br i1 %98, label %.preheader29.preheader, label %.preheader30.preheader

.preheader30.preheader:                           ; preds = %logscl.exit
  br label %.preheader30

.preheader29.preheader:                           ; preds = %logscl.exit
  br label %.preheader29

.preheader29:                                     ; preds = %100, %.preheader29.preheader
  %99 = phi i32 [ %104, %100 ], [ 0, %.preheader29.preheader ]
  %scevgep10 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %99
  %exitcond9 = icmp eq i32 %99, 6
  br i1 %exitcond9, label %upzero.exit21.loopexit, label %100

; <label>:100                                     ; preds = %.preheader29
  %101 = load i32* %scevgep10, align 4
  %102 = mul nsw i32 %101, 255
  %103 = ashr i32 %102, 8
  store i32 %103, i32* %scevgep10, align 4
  %104 = add nsw i32 %99, 1
  br label %.preheader29

.preheader30:                                     ; preds = %106, %.preheader30.preheader
  %105 = phi i32 [ %116, %106 ], [ 0, %.preheader30.preheader ]
  %scevgep12 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %105
  %exitcond11 = icmp eq i32 %105, 6
  br i1 %exitcond11, label %upzero.exit21.loopexit2, label %106

; <label>:106                                     ; preds = %.preheader30
  %scevgep13 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %105
  %107 = load i32* %scevgep13, align 4
  %108 = mul nsw i32 %79, %107
  %109 = ashr i32 %108, 31
  %110 = and i32 %109, -256
  %111 = or i32 %110, 128
  %112 = load i32* %scevgep12, align 4
  %113 = mul nsw i32 %112, 255
  %114 = ashr i32 %113, 8
  %115 = add nsw i32 %111, %114
  store i32 %115, i32* %scevgep12, align 4
  %116 = add nsw i32 %105, 1
  br label %.preheader30

upzero.exit21.loopexit:                           ; preds = %.preheader29
  br label %upzero.exit21

upzero.exit21.loopexit2:                          ; preds = %.preheader30
  br label %upzero.exit21

upzero.exit21:                                    ; preds = %upzero.exit21.loopexit2, %upzero.exit21.loopexit
  %117 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4
  store i32 %117, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4
  %118 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4
  store i32 %118, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4
  %119 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4
  store i32 %119, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4
  store i32 %34, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4
  store i32 %79, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4
  %120 = load i32* @plt1, align 4
  %121 = load i32* @plt2, align 4
  %122 = shl nsw i32 %50, 2
  %123 = mul nsw i32 %97, %120
  %124 = icmp sgt i32 %123, -1
  %125 = sub nsw i32 0, %122
  %.41 = select i1 %124, i32 %125, i32 %122
  %126 = ashr i32 %.41, 7
  %127 = mul nsw i32 %97, %121
  %128 = ashr i32 %127, 31
  %129 = and i32 %128, -256
  %130 = or i32 %129, 128
  %wd4.0.i14 = add nsw i32 %126, %130
  %131 = mul nsw i32 %52, 127
  %132 = ashr i32 %131, 7
  %133 = add nsw i32 %wd4.0.i14, %132
  %134 = icmp sgt i32 %133, 12288
  br i1 %134, label %uppol2.exit17, label %135

; <label>:135                                     ; preds = %upzero.exit21
  %136 = icmp slt i32 %133, -12288
  %.42 = select i1 %136, i32 -12288, i32 %133
  br label %uppol2.exit17

uppol2.exit17:                                    ; preds = %135, %upzero.exit21
  %apl2.1.i16 = phi i32 [ 12288, %upzero.exit21 ], [ %.42, %135 ]
  store i32 %apl2.1.i16, i32* @al2, align 4
  %137 = mul nsw i32 %50, 255
  %138 = ashr i32 %137, 8
  %139 = ashr i32 %123, 31
  %140 = and i32 %139, -384
  %141 = add nsw i32 %140, 192
  %apl1.0.i9 = add nsw i32 %138, %141
  %142 = sub nsw i32 15360, %apl2.1.i16
  %143 = icmp sgt i32 %apl1.0.i9, %142
  %.apl1.0.i9 = select i1 %143, i32 %142, i32 %apl1.0.i9
  %144 = sub nsw i32 0, %142
  %145 = icmp slt i32 %.apl1.0.i9, %144
  %apl1.2.i11 = select i1 %145, i32 %144, i32 %.apl1.0.i9
  store i32 %apl1.2.i11, i32* @al1, align 4
  %146 = add nsw i32 %59, %79
  store i32 %49, i32* @rlt2, align 4
  store i32 %146, i32* @rlt1, align 4
  store i32 %120, i32* @plt2, align 4
  store i32 %97, i32* @plt1, align 4
  %147 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4
  %148 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4
  %149 = mul nsw i32 %147, %148
  br label %150

; <label>:150                                     ; preds = %151, %uppol2.exit17
  %indvar = phi i32 [ %indvar.next, %151 ], [ 0, %uppol2.exit17 ]
  %zl.0.i4 = phi i32 [ %155, %151 ], [ %149, %uppol2.exit17 ]
  %i.0.i5 = add i32 %indvar, 1
  %exitcond6 = icmp eq i32 %indvar, 5
  br i1 %exitcond6, label %filtez.exit8, label %151

; <label>:151                                     ; preds = %150
  %.0.i7 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %i.0.i5
  %.01.i6 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %i.0.i5
  %152 = load i32* %.0.i7, align 4
  %153 = load i32* %.01.i6, align 4
  %154 = mul nsw i32 %152, %153
  %155 = add nsw i32 %zl.0.i4, %154
  %indvar.next = add i32 %indvar, 1
  br label %150

filtez.exit8:                                     ; preds = %150
  %156 = ashr i32 %zl.0.i4, 14
  %157 = load i32* @rh1, align 4
  %158 = load i32* @ah1, align 4
  %159 = load i32* @rh2, align 4
  %160 = load i32* @ah2, align 4
  %161 = shl nsw i32 %157, 1
  %162 = mul nsw i32 %158, %161
  %163 = shl nsw i32 %159, 1
  %164 = mul nsw i32 %160, %163
  %165 = add nsw i32 %162, %164
  %166 = ashr i32 %165, 15
  %167 = add nsw i32 %166, %156
  %168 = sub nsw i32 %47, %167
  %169 = icmp sgt i32 %168, -1
  %170 = load i32* @deth, align 4
  %171 = mul nsw i32 %170, 564
  %172 = ashr i32 %171, 12
  %173 = sub nsw i32 0, %168
  %174 = ashr i32 %168, 31
  %175 = and i32 %174, -2
  %.5 = select i1 %169, i32 %168, i32 %173
  %176 = icmp sgt i32 %.5, %172
  %.3.v = select i1 %176, i32 2, i32 3
  %.3 = add nsw i32 %175, %.3.v
  %177 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %.3
  %178 = load i32* %177, align 4
  %179 = mul nsw i32 %170, %178
  %180 = ashr i32 %179, 15
  %181 = load i32* @nbh, align 4
  %182 = mul nsw i32 %181, 127
  %183 = ashr i32 %182, 7
  %184 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %.3
  %185 = load i32* %184, align 4
  %186 = add nsw i32 %183, %185
  %187 = icmp slt i32 %186, 0
  br i1 %187, label %logsch.exit, label %188

; <label>:188                                     ; preds = %filtez.exit8
  %189 = icmp sgt i32 %186, 22528
  %.43 = select i1 %189, i32 22528, i32 %186
  br label %logsch.exit

logsch.exit:                                      ; preds = %188, %filtez.exit8
  %.1.i = phi i32 [ 0, %filtez.exit8 ], [ %.43, %188 ]
  store i32 %.1.i, i32* @nbh, align 4
  %190 = lshr i32 %.1.i, 6
  %191 = and i32 %190, 31
  %192 = ashr i32 %.1.i, 11
  %193 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %191
  %194 = load i32* %193, align 4
  %195 = sub nsw i32 11, %192
  %196 = ashr i32 %194, %195
  %197 = shl i32 %196, 3
  store i32 %197, i32* @deth, align 4
  %198 = add nsw i32 %180, %156
  %199 = icmp eq i32 %180, 0
  br i1 %199, label %.preheader.preheader, label %.preheader27.preheader

.preheader27.preheader:                           ; preds = %logsch.exit
  br label %.preheader27

.preheader.preheader:                             ; preds = %logsch.exit
  br label %.preheader

.preheader:                                       ; preds = %201, %.preheader.preheader
  %200 = phi i32 [ %205, %201 ], [ 0, %.preheader.preheader ]
  %scevgep = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %200
  %exitcond3 = icmp eq i32 %200, 6
  br i1 %exitcond3, label %upzero.exit.loopexit, label %201

; <label>:201                                     ; preds = %.preheader
  %202 = load i32* %scevgep, align 4
  %203 = mul nsw i32 %202, 255
  %204 = ashr i32 %203, 8
  store i32 %204, i32* %scevgep, align 4
  %205 = add nsw i32 %200, 1
  br label %.preheader

.preheader27:                                     ; preds = %207, %.preheader27.preheader
  %206 = phi i32 [ %217, %207 ], [ 0, %.preheader27.preheader ]
  %scevgep4 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %206
  %exitcond = icmp eq i32 %206, 6
  br i1 %exitcond, label %upzero.exit.loopexit1, label %207

; <label>:207                                     ; preds = %.preheader27
  %scevgep5 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %206
  %208 = load i32* %scevgep5, align 4
  %209 = mul nsw i32 %180, %208
  %210 = ashr i32 %209, 31
  %211 = and i32 %210, -256
  %212 = or i32 %211, 128
  %213 = load i32* %scevgep4, align 4
  %214 = mul nsw i32 %213, 255
  %215 = ashr i32 %214, 8
  %216 = add nsw i32 %212, %215
  store i32 %216, i32* %scevgep4, align 4
  %217 = add nsw i32 %206, 1
  br label %.preheader27

upzero.exit.loopexit:                             ; preds = %.preheader
  br label %upzero.exit

upzero.exit.loopexit1:                            ; preds = %.preheader27
  br label %upzero.exit

upzero.exit:                                      ; preds = %upzero.exit.loopexit1, %upzero.exit.loopexit
  %218 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4
  store i32 %218, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4
  %219 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4
  store i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4
  %220 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4
  store i32 %220, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4
  store i32 %148, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4
  store i32 %180, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4
  %221 = load i32* @ph1, align 4
  %222 = load i32* @ph2, align 4
  %223 = shl nsw i32 %158, 2
  %224 = mul nsw i32 %198, %221
  %225 = icmp sgt i32 %224, -1
  %226 = sub nsw i32 0, %223
  %.45 = select i1 %225, i32 %226, i32 %223
  %227 = ashr i32 %.45, 7
  %228 = mul nsw i32 %198, %222
  %229 = ashr i32 %228, 31
  %230 = and i32 %229, -256
  %231 = or i32 %230, 128
  %wd4.0.i = add nsw i32 %227, %231
  %232 = mul nsw i32 %160, 127
  %233 = ashr i32 %232, 7
  %234 = add nsw i32 %wd4.0.i, %233
  %235 = icmp sgt i32 %234, 12288
  br i1 %235, label %uppol2.exit, label %236

; <label>:236                                     ; preds = %upzero.exit
  %237 = icmp slt i32 %234, -12288
  %.46 = select i1 %237, i32 -12288, i32 %234
  br label %uppol2.exit

uppol2.exit:                                      ; preds = %236, %upzero.exit
  %apl2.1.i = phi i32 [ 12288, %upzero.exit ], [ %.46, %236 ]
  store i32 %apl2.1.i, i32* @ah2, align 4
  %238 = mul nsw i32 %158, 255
  %239 = ashr i32 %238, 8
  %240 = ashr i32 %224, 31
  %241 = and i32 %240, -384
  %242 = add nsw i32 %241, 192
  %apl1.0.i = add nsw i32 %239, %242
  %243 = sub nsw i32 15360, %apl2.1.i
  %244 = icmp sgt i32 %apl1.0.i, %243
  %.apl1.0.i = select i1 %244, i32 %243, i32 %apl1.0.i
  %245 = sub nsw i32 0, %243
  %246 = icmp slt i32 %.apl1.0.i, %245
  %apl1.2.i = select i1 %246, i32 %245, i32 %.apl1.0.i
  store i32 %apl1.2.i, i32* @ah1, align 4
  %247 = add nsw i32 %167, %180
  store i32 %157, i32* @rh2, align 4
  store i32 %247, i32* @rh1, align 4
  store i32 %221, i32* @ph2, align 4
  store i32 %198, i32* @ph1, align 4
  %248 = shl nsw i32 %.3, 6
  %249 = or i32 %74, %248
  ret i32 %249
}

94: i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0)
96: i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1)
127: i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0)
179: i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4)
261: i32 %xin1
263: i32 %xin2
107:   %xa.0 = phi i32 [ %2, %0 ], [ %14, %10 ]
111:   %xb.0 = phi i32 [ %4, %0 ], [ %18, %10 ]
98:   %7 = shl i32 %6, 1
97:   %8 = add i32 %7, 2
99:   %9 = add i32 %7, 3
100:   %scevgep27 = getelementptr [24 x i32]* @h, i32 0, i32 %9
101:   %h_ptr.0 = getelementptr [24 x i32]* @h, i32 0, i32 %8
102:   %scevgep25 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %9
103:   %tqmf_ptr.0 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %8
104:   %11 = load i32* %tqmf_ptr.0, align 4
105:   %12 = load i32* %h_ptr.0, align 4
106:   %14 = add nsw i32 %xa.0, %13
108:   %15 = load i32* %scevgep25, align 4
109:   %16 = load i32* %scevgep27, align 4
110:   %18 = add nsw i32 %xb.0, %17
122:   %24 = phi i32 [ 0, %20 ], [ %29, %25 ]
145:   %59 = add nsw i32 %48, %58
147:   %61 = load i32* @detl, align 4
151:   %65 = phi i32 [ 0, %filtez.exit ], [ %73, %72 ]
148:   %scevgep14 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %65
149:   %68 = load i32* %scevgep14, align 4
150:   %73 = add nsw i32 %65, 1
152:   %quant26bt_pos.quant26bt_neg = select i1 %62, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg
153:   %.in = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg, i32 0, i32 %65
154:   %74 = load i32* %.in, align 4
155:   %76 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %75
156:   %77 = load i32* %76, align 4
165:   %79 = ashr i32 %78, 15
157:   %80 = load i32* @nbl, align 4
182: i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3)
199: i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0)
244: i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4)
247: i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3)
115: i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22)
117: i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23)
125: i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)
180: i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5)
184: i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2)
185: i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1)
197: i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)
245: i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5)
249: i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2)
250: i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1)
93:   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4
95:   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4
113:   %6 = phi i32 [ 0, %0 ], [ %19, %10 ]
186:   %120 = load i32* @plt1, align 4
187:   %121 = load i32* @plt2, align 4
189:   %126 = ashr i32 %.41, 7
188:   %wd4.0.i14 = add nsw i32 %126, %130
190:   %133 = add nsw i32 %wd4.0.i14, %132
194:   %138 = ashr i32 %137, 8
192:   %140 = and i32 %139, -384
191:   %141 = add nsw i32 %140, 192
193:   %apl1.0.i9 = add nsw i32 %138, %141
195:   %146 = add nsw i32 %59, %79
112:   %19 = add nsw i32 %6, 1
114:   %21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4
116:   %22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4
118:   %tqmf_ptr.1 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %26
119:   %tqmf_ptr1.0 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %27
120:   %28 = load i32* %tqmf_ptr1.0, align 4
121:   %29 = add nsw i32 %24, 1
123:   %32 = add nsw i32 %xa.0, %31
124:   %33 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4
126:   %34 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4
129:   %indvar15 = phi i32 [ %indvar.next16, %37 ], [ 0, %30 ]
135:   %zl.0.i = phi i32 [ %41, %37 ], [ %35, %30 ]
128:   %i.0.i = add i32 %indvar15, 1
130:   %.0.i = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %i.0.i
131:   %.01.i = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %i.0.i
132:   %38 = load i32* %.0.i, align 4
133:   %39 = load i32* %.01.i, align 4
134:   %41 = add nsw i32 %zl.0.i, %40
136:   %indvar.next16 = add i32 %indvar15, 1
137:   %43 = add nsw i32 %xb.0, %42
138:   %44 = add nsw i32 %32, %43
169:   %99 = phi i32 [ %104, %100 ], [ 0, %.preheader29.preheader ]
166:   %scevgep10 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %99
177:   %105 = phi i32 [ %116, %106 ], [ 0, %.preheader30.preheader ]
146:   %48 = ashr i32 %zl.0.i, 14
139:   %49 = load i32* @rlt1, align 4
140:   %50 = load i32* @al1, align 4
141:   %51 = load i32* @rlt2, align 4
142:   %52 = load i32* @al2, align 4
144:   %54 = mul nsw i32 %50, %53
143:   %57 = add nsw i32 %54, %56
254:   %227 = ashr i32 %.45, 7
253:   %wd4.0.i = add nsw i32 %227, %231
255:   %234 = add nsw i32 %wd4.0.i, %233
259:   %239 = ashr i32 %238, 8
257:   %241 = and i32 %240, -384
256:   %242 = add nsw i32 %241, 192
258:   %apl1.0.i = add nsw i32 %239, %242
260:   %247 = add nsw i32 %167, %180
280:   %249 = or i32 %74, %248
161:   %82 = ashr i32 %81, 7
158:   %83 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %75
159:   %84 = load i32* %83, align 4
160:   %85 = add nsw i32 %82, %84
162:   %92 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %90
163:   %93 = load i32* %92, align 4
164:   %97 = add nsw i32 %79, %48
224:   %185 = load i32* %184, align 4
225:   %186 = add nsw i32 %183, %185
227:   %193 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %191
228:   %194 = load i32* %193, align 4
167:   %101 = load i32* %scevgep10, align 4
168:   %104 = add nsw i32 %99, 1
170:   %scevgep12 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %105
171:   %scevgep13 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %105
172:   %107 = load i32* %scevgep13, align 4
175:   %111 = or i32 %110, 128
173:   %112 = load i32* %scevgep12, align 4
174:   %115 = add nsw i32 %111, %114
176:   %116 = add nsw i32 %105, 1
178:   %117 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4
181:   %118 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4
183:   %119 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4
346:   %scevgep38 = getelementptr [100 x i32]* @result, i32 0, i32 %88
347:   %scevgep39 = getelementptr [100 x i32]* @result, i32 0, i32 %i.0.i
348:   %91 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %90
349:   %92 = load i32* %91, align 4
350:   %93 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4
352:   %94 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4
355:   %indvar = phi i32 [ %indvar.next, %97 ], [ 0, %89 ]
361:   %zl.0.i.i.i = phi i32 [ %101, %97 ], [ %95, %89 ]
354:   %i.0.i.i.i = add i32 %indvar, 1
356:   %.0.i.i.i = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %i.0.i.i.i
357:   %.01.i.i.i = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %i.0.i.i.i
358:   %98 = load i32* %.0.i.i.i, align 4
359:   %99 = load i32* %.01.i.i.i, align 4
360:   %101 = add nsw i32 %zl.0.i.i.i, %100
362:   %indvar.next = add i32 %indvar, 1
364:   %105 = mul nsw i32 %dec_al1.0, %104
363:   %108 = add nsw i32 %105, %107
366:   %109 = ashr i32 %108, 15
365:   %110 = add nsw i32 %109, %103
367:   %113 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %112
368:   %114 = load i32* %113, align 4
379:   %116 = ashr i32 %115, 15
369:   %117 = load i32* %79, align 4
371:   %119 = ashr i32 %118, 15
370:   %120 = add nsw i32 %119, %110
375:   %122 = ashr i32 %121, 7
372:   %123 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %112
373:   %124 = load i32* %123, align 4
374:   %125 = add nsw i32 %122, %124
196:   %147 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4
198:   %148 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4
201:   %indvar = phi i32 [ %indvar.next, %151 ], [ 0, %uppol2.exit17 ]
207:   %zl.0.i4 = phi i32 [ %155, %151 ], [ %149, %uppol2.exit17 ]
200:   %i.0.i5 = add i32 %indvar, 1
202:   %.0.i7 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %i.0.i5
203:   %.01.i6 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %i.0.i5
204:   %152 = load i32* %.0.i7, align 4
205:   %153 = load i32* %.01.i6, align 4
206:   %155 = add nsw i32 %zl.0.i4, %154
208:   %indvar.next = add i32 %indvar, 1
209:   %157 = load i32* @rh1, align 4
210:   %158 = load i32* @ah1, align 4
211:   %159 = load i32* @rh2, align 4
212:   %160 = load i32* @ah2, align 4
214:   %162 = mul nsw i32 %158, %161
213:   %165 = add nsw i32 %162, %164
216:   %166 = ashr i32 %165, 15
215:   %167 = add nsw i32 %166, %156
217:   %170 = load i32* @deth, align 4
219:   %175 = and i32 %174, -2
218:   %.3 = add nsw i32 %175, %.3.v
220:   %177 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %.3
221:   %178 = load i32* %177, align 4
230:   %180 = ashr i32 %179, 15
222:   %181 = load i32* @nbh, align 4
226:   %183 = ashr i32 %182, 7
223:   %184 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %.3
229:   %198 = add nsw i32 %180, %156
234:   %200 = phi i32 [ %205, %201 ], [ 0, %.preheader.preheader ]
231:   %scevgep = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %200
232:   %202 = load i32* %scevgep, align 4
233:   %205 = add nsw i32 %200, 1
242:   %206 = phi i32 [ %217, %207 ], [ 0, %.preheader27.preheader ]
235:   %scevgep4 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %206
236:   %scevgep5 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %206
237:   %208 = load i32* %scevgep5, align 4
240:   %212 = or i32 %211, 128
238:   %213 = load i32* %scevgep4, align 4
239:   %216 = add nsw i32 %212, %215
241:   %217 = add nsw i32 %206, 1
243:   %218 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4
246:   %219 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4
248:   %220 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4
251:   %221 = load i32* @ph1, align 4
252:   %222 = load i32* @ph2, align 4
353: i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0)
393: i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4)
396: i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3)
410: i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0)
448: i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4)
451: i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3)
351: i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)
394: i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5)
398: i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2)
399: i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1)
408: i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)
449: i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5)
453: i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2)
454: i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1)
482: i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10)
484: i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10)
495: i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 0)
496: i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 0)
286:   %2 = phi i32 [ 0, %0 ], [ %4, %3 ]
281:   %scevgep76 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %2
282:   %scevgep75 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %2
283:   %scevgep74 = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %2
284:   %scevgep73 = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %2
285:   %4 = add nsw i32 %2, 1
292:   %5 = phi i32 [ %7, %6 ], [ 0, %.preheader46.preheader ]
287:   %scevgep71 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %5
288:   %scevgep70 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %5
289:   %scevgep69 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %5
290:   %scevgep68 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %5
291:   %7 = add nsw i32 %5, 1
295:   %8 = phi i32 [ %10, %9 ], [ 0, %.preheader45.preheader ]
293:   %scevgep66 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %8
294:   %10 = add nsw i32 %8, 1
299:   %11 = phi i32 [ %13, %12 ], [ 0, %.preheader44.preheader ]
296:   %scevgep64 = getelementptr [11 x i32]* @accumc, i32 0, i32 %11
297:   %scevgep63 = getelementptr [11 x i32]* @accumd, i32 0, i32 %11
298:   %13 = add nsw i32 %11, 1
335:   %indvar45 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next46, %20 ]
301:   %i1.0.i = mul i32 %indvar45, 14
300:   %14 = add i32 %i1.0.i, 12
302:   %15 = add i32 %i1.0.i, 10
303:   %16 = add i32 %i1.0.i, 8
304:   %17 = add i32 %i1.0.i, 6
305:   %18 = add i32 %i1.0.i, 4
306:   %19 = add i32 %i1.0.i, 2
307:   %scevgep61 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i1.0.i
308:   %scevgep60 = getelementptr [100 x i32]* @test_data, i32 0, i32 %21
309:   %scevgep59 = getelementptr [100 x i32]* @test_data, i32 0, i32 %19
310:   %22 = add i32 %i1.0.i, 3
311:   %scevgep58 = getelementptr [100 x i32]* @test_data, i32 0, i32 %22
312:   %scevgep57 = getelementptr [100 x i32]* @test_data, i32 0, i32 %18
313:   %23 = add i32 %i1.0.i, 5
314:   %scevgep56 = getelementptr [100 x i32]* @test_data, i32 0, i32 %23
315:   %scevgep55 = getelementptr [100 x i32]* @test_data, i32 0, i32 %17
316:   %24 = add i32 %i1.0.i, 7
317:   %scevgep54 = getelementptr [100 x i32]* @test_data, i32 0, i32 %24
318:   %scevgep53 = getelementptr [100 x i32]* @test_data, i32 0, i32 %16
319:   %25 = add i32 %i1.0.i, 9
320:   %scevgep52 = getelementptr [100 x i32]* @test_data, i32 0, i32 %25
321:   %scevgep51 = getelementptr [100 x i32]* @test_data, i32 0, i32 %15
322:   %26 = add i32 %i1.0.i, 11
323:   %scevgep50 = getelementptr [100 x i32]* @test_data, i32 0, i32 %26
324:   %scevgep49 = getelementptr [100 x i32]* @test_data, i32 0, i32 %14
325:   %27 = add i32 %i1.0.i, 13
326:   %scevgep48 = getelementptr [100 x i32]* @test_data, i32 0, i32 %27
277:   %31 = load i32* %scevgep61, align 4
278:   %32 = load i32* %scevgep60, align 4
327:   %34 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %30
275:   %38 = load i32* %scevgep59, align 4
276:   %39 = load i32* %scevgep58, align 4
328:   %41 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %37
273:   %45 = load i32* %scevgep57, align 4
274:   %46 = load i32* %scevgep56, align 4
329:   %48 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %44
271:   %52 = load i32* %scevgep55, align 4
272:   %53 = load i32* %scevgep54, align 4
330:   %55 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %51
269:   %59 = load i32* %scevgep53, align 4
270:   %60 = load i32* %scevgep52, align 4
331:   %62 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %58
267:   %66 = load i32* %scevgep51, align 4
268:   %67 = load i32* %scevgep50, align 4
332:   %69 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %65
265:   %73 = load i32* %scevgep49, align 4
266:   %74 = load i32* %scevgep48, align 4
333:   %76 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %72
334:   %indvar.next46 = add i32 %indvar45, 1
345:   %indvar40 = phi i32 [ 0, %.preheader43.preheader ], [ %indvar.next41, %80 ]
337:   %77 = shl i32 %indvar40, 1
336:   %i1.1.i = add i32 %77, 98
338:   %78 = load i32* @il, align 4
339:   %79 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %78
340:   %scevgep44 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i1.1.i
341:   %81 = add i32 %77, 99
342:   %scevgep43 = getelementptr [100 x i32]* @test_data, i32 0, i32 %81
262:   %83 = load i32* %scevgep44, align 4
264:   %84 = load i32* %scevgep43, align 4
343:   %86 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %82
344:   %indvar.next41 = add i32 %indvar40, 1
498:   %indvar35 = phi i32 [ %indvar.next36, %decode.exit.i ], [ 0, %.preheader42 ]
504:   %main_result.0 = phi i32 [ %.main_result.0, %307 ], [ 0, %adpcm_main.exit.preheader ]
499:   %scevgep6 = getelementptr [100 x i32]* @compressed, i32 0, i32 %306
500:   %scevgep5 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %306
501:   %308 = load i32* %scevgep6, align 4
502:   %309 = load i32* %scevgep5, align 4
503:   %.main_result.0 = add nsw i32 %main_result.0, %311
505:   %312 = add nsw i32 %306, 1
514:   %313 = phi i32 [ %319, %314 ], [ 0, %.preheader.preheader ]
512:   %main_result.2 = phi i32 [ %.main_result.2, %314 ], [ %main_result.0, %.preheader.preheader ]
507:   %scevgep4 = getelementptr [100 x i32]* @result, i32 0, i32 %313
508:   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %313
509:   %315 = load i32* %scevgep4, align 4
510:   %316 = load i32* %scevgep, align 4
511:   %.main_result.2 = add nsw i32 %main_result.2, %318
513:   %319 = add nsw i32 %313, 1
376:   %132 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %130
377:   %133 = load i32* %132, align 4
378:   %137 = add nsw i32 %116, %103
383:   %139 = phi i32 [ %144, %140 ], [ 0, %.preheader39.preheader ]
380:   %scevgep14 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %139
381:   %141 = load i32* %scevgep14, align 4
382:   %144 = add nsw i32 %139, 1
391:   %145 = phi i32 [ %156, %146 ], [ 0, %.preheader40.preheader ]
384:   %scevgep11 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %145
385:   %scevgep12 = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %145
386:   %147 = load i32* %scevgep12, align 4
389:   %151 = or i32 %150, 128
387:   %152 = load i32* %scevgep11, align 4
388:   %155 = add nsw i32 %151, %154
390:   %156 = add nsw i32 %145, 1
392:   %157 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4
395:   %158 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4
397:   %159 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4
401:   %164 = ashr i32 %.61, 7
400:   %wd4.0.i14.i.i = add nsw i32 %164, %168
402:   %171 = add nsw i32 %wd4.0.i14.i.i, %170
406:   %176 = ashr i32 %175, 8
404:   %178 = and i32 %177, -384
403:   %179 = add nsw i32 %178, 192
405:   %apl1.0.i9.i.i = add nsw i32 %176, %179
407:   %182 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4
409:   %183 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4
412:   %indvar15 = phi i32 [ %indvar.next16, %186 ], [ 0, %uppol2.exit17.i.i ]
418:   %zl.0.i4.i.i = phi i32 [ %190, %186 ], [ %184, %uppol2.exit17.i.i ]
411:   %i.0.i5.i.i = add i32 %indvar15, 1
413:   %.0.i7.i.i = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %i.0.i5.i.i
414:   %.01.i6.i.i = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %i.0.i5.i.i
415:   %187 = load i32* %.0.i7.i.i, align 4
416:   %188 = load i32* %.01.i6.i.i, align 4
417:   %190 = add nsw i32 %zl.0.i4.i.i, %189
419:   %indvar.next16 = add i32 %indvar15, 1
420:   %193 = add nsw i32 %110, %116
422:   %196 = mul nsw i32 %dec_ah1.0, %195
421:   %199 = add nsw i32 %196, %198
424:   %200 = ashr i32 %199, 15
423:   %201 = add nsw i32 %200, %194
425:   %202 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %102
426:   %203 = load i32* %202, align 4
434:   %205 = ashr i32 %204, 15
430:   %207 = ashr i32 %206, 7
427:   %208 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %102
428:   %209 = load i32* %208, align 4
429:   %210 = add nsw i32 %207, %209
431:   %217 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %215
432:   %218 = load i32* %217, align 4
433:   %222 = add nsw i32 %205, %194
438:   %224 = phi i32 [ %229, %225 ], [ 0, %.preheader36.preheader ]
435:   %scevgep24 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %224
436:   %226 = load i32* %scevgep24, align 4
437:   %229 = add nsw i32 %224, 1
446:   %230 = phi i32 [ %241, %231 ], [ 0, %.preheader37.preheader ]
439:   %scevgep21 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %230
440:   %scevgep22 = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %230
441:   %232 = load i32* %scevgep22, align 4
444:   %236 = or i32 %235, 128
442:   %237 = load i32* %scevgep21, align 4
443:   %240 = add nsw i32 %236, %239
445:   %241 = add nsw i32 %230, 1
447:   %242 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4
450:   %243 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4
452:   %244 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4
456:   %249 = ashr i32 %.65, 7
455:   %wd4.0.i.i.i = add nsw i32 %249, %253
457:   %256 = add nsw i32 %wd4.0.i.i.i, %255
461:   %261 = ashr i32 %260, 8
459:   %263 = and i32 %262, -384
458:   %264 = add nsw i32 %263, 192
460:   %apl1.0.i.i.i = add nsw i32 %261, %264
462:   %267 = add nsw i32 %201, %205
463:   %269 = add nsw i32 %120, %267
478:   %xa2.0.i.i = phi i32 [ %271, %uppol2.exit.i.i ], [ %285, %275 ]
474:   %xa1.0.i.i = phi i32 [ %270, %uppol2.exit.i.i ], [ %281, %275 ]
480:   %273 = phi i32 [ 0, %uppol2.exit.i.i ], [ %286, %275 ]
465:   %274 = shl i32 %273, 1
464:   %276 = add i32 %274, 3
466:   %scevgep29 = getelementptr [24 x i32]* @h, i32 0, i32 %276
467:   %277 = add i32 %274, 2
468:   %h_ptr.0.i.i = getelementptr [24 x i32]* @h, i32 0, i32 %277
469:   %ac_ptr.0.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %273
470:   %ad_ptr.0.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %273
471:   %278 = load i32* %ac_ptr.0.i.i, align 4
472:   %279 = load i32* %h_ptr.0.i.i, align 4
473:   %281 = add nsw i32 %xa1.0.i.i, %280
475:   %282 = load i32* %ad_ptr.0.i.i, align 4
476:   %283 = load i32* %scevgep29, align 4
477:   %285 = add nsw i32 %xa2.0.i.i, %284
479:   %286 = add nsw i32 %273, 1
481:   %289 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4
483:   %290 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4
492:   %292 = phi i32 [ 0, %287 ], [ %298, %295 ]
485:   %ad_ptr1.0.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %294
486:   %ac_ptr.1.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %293
487:   %ac_ptr1.0.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %294
488:   %ad_ptr.1.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %293
489:   %296 = load i32* %ac_ptr1.0.i.i, align 4
490:   %297 = load i32* %ad_ptr1.0.i.i, align 4
491:   %298 = add nsw i32 %292, 1
493:   %302 = add nsw i32 %xa1.0.i.i, %300
494:   %304 = add nsw i32 %xa2.0.i.i, %301
497:   %indvar.next36 = add i32 %indvar35, 1
506:   %306 = phi i32 [ %312, %307 ], [ 0, %adpcm_main.exit.preheader ]
Memory: Int -> Value* mapping
67: @dec_del_dltx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
21: @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
23: @delay_bpl = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
11: @decis_levl = internal unnamed_addr constant [30 x i32] [i32 280, i32 576, i32 880, i32 1200, i32 1520, i32 1864, i32 2208, i32 2584, i32 2960, i32 3376, i32 3784, i32 4240, i32 4696, i32 5200, i32 5712, i32 6288, i32 6864, i32 7520, i32 8184, i32 8968, i32 9752, i32 10712, i32 11664, i32 12896, i32 14120, i32 15840, i32 17560, i32 20456, i32 23352, i32 32767], align 4
13: @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 32], align 4
7: @wl_code_table = internal unnamed_addr constant [16 x i32] [i32 -60, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 -60], align 4
9: @ilb_table = internal unnamed_addr constant [32 x i32] [i32 2048, i32 2093, i32 2139, i32 2186, i32 2233, i32 2282, i32 2332, i32 2383, i32 2435, i32 2489, i32 2543, i32 2599, i32 2656, i32 2714, i32 2774, i32 2834, i32 2896, i32 2960, i32 3025, i32 3091, i32 3158, i32 3228, i32 3298, i32 3371, i32 3444, i32 3520, i32 3597, i32 3676, i32 3756, i32 3838, i32 3922, i32 4008], align 4
5: @qq6_code6_table = internal unnamed_addr constant [64 x i32] [i32 -136, i32 -136, i32 -136, i32 -136, i32 -24808, i32 -21904, i32 -19008, i32 -16704, i32 -14984, i32 -13512, i32 -12280, i32 -11192, i32 -10232, i32 -9360, i32 -8576, i32 -7856, i32 -7192, i32 -6576, i32 -6000, i32 -5456, i32 -4944, i32 -4464, i32 -4008, i32 -3576, i32 -3168, i32 -2776, i32 -2400, i32 -2032, i32 -1688, i32 -1360, i32 -1040, i32 -728, i32 24808, i32 21904, i32 19008, i32 16704, i32 14984, i32 13512, i32 12280, i32 11192, i32 10232, i32 9360, i32 8576, i32 7856, i32 7192, i32 6576, i32 6000, i32 5456, i32 4944, i32 4464, i32 4008, i32 3576, i32 3168, i32 2776, i32 2400, i32 2032, i32 1688, i32 1360, i32 1040, i32 728, i32 432, i32 136, i32 -432, i32 -136], align 4
69: @dec_del_bph = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
3: @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, i32 2584, i32 1200, i32 0], align 4
1: @h = internal unnamed_addr constant [24 x i32] [i32 12, i32 -44, i32 -44, i32 212, i32 48, i32 -624, i32 128, i32 1448, i32 -840, i32 -3220, i32 3804, i32 15504, i32 15504, i32 3804, i32 -3220, i32 -840, i32 1448, i32 128, i32 -624, i32 48, i32 212, i32 -44, i32 -44, i32 12], align 4
15: @quant26bt_neg = internal unnamed_addr constant [31 x i32] [i32 63, i32 62, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 4], align 4
17: @qq2_code2_table = internal unnamed_addr constant [4 x i32] [i32 -7408, i32 -1616, i32 7408, i32 1616], align 4
37: @il = internal unnamed_addr global i32 0, align 4
39: @nbl = internal unnamed_addr global i32 0, align 4
19: @wh_code_table = internal unnamed_addr constant [4 x i32] [i32 798, i32 -214, i32 798, i32 -214], align 4
35: @detl = internal unnamed_addr global i32 0, align 4
25: @delay_dltx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
27: @rlt1 = internal unnamed_addr global i32 0, align 4
29: @al1 = internal unnamed_addr global i32 0, align 4
31: @rlt2 = internal unnamed_addr global i32 0, align 4
33: @al2 = internal unnamed_addr global i32 0, align 4
71: @dec_del_dhx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
73: @accumc = internal unnamed_addr global [11 x i32] zeroinitializer, align 4
75: @accumd = internal unnamed_addr global [11 x i32] zeroinitializer, align 4
77: @test_data = internal unnamed_addr constant [100 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 67, i32 67, i32 67, i32 67, i32 67, i32 67, i32 67, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 65, i32 65, i32 65, i32 65, i32 65, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 63, i32 63, i32 63, i32 63, i32 63, i32 62, i32 62, i32 62, i32 62, i32 62, i32 62, i32 61, i32 61, i32 61, i32 61, i32 61, i32 61, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 59, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60, i32 60], align 4
79: @test_compressed = internal unnamed_addr constant [100 x i32] [i32 253, i32 222, i32 119, i32 186, i32 244, i32 146, i32 32, i32 160, i32 236, i32 237, i32 238, i32 240, i32 241, i32 241, i32 242, i32 243, i32 244, i32 243, i32 244, i32 245, i32 244, i32 244, i32 245, i32 245, i32 245, i32 246, i32 246, i32 247, i32 247, i32 247, i32 247, i32 248, i32 246, i32 247, i32 249, i32 247, i32 248, i32 247, i32 248, i32 247, i32 248, i32 247, i32 248, i32 247, i32 248, i32 248, i32 246, i32 248, i32 247, i32 248, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
81: @test_result = internal unnamed_addr constant [100 x i32] [i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 -2, i32 -1, i32 -2, i32 0, i32 -3, i32 1, i32 0, i32 0, i32 -4, i32 1, i32 1, i32 2, i32 11, i32 20, i32 18, i32 20, i32 22, i32 28, i32 27, i32 31, i32 31, i32 34, i32 31, i32 34, i32 34, i32 38, i32 37, i32 42, i32 42, i32 44, i32 41, i32 43, i32 42, i32 47, i32 45, i32 47, i32 44, i32 45, i32 43, i32 46, i32 45, i32 48, i32 46, i32 49, i32 48, i32 51, i32 49, i32 52, i32 52, i32 55, i32 53, i32 56, i32 55, i32 58, i32 57, i32 59, i32 57, i32 60, i32 60, i32 60, i32 54, i32 54, i32 53, i32 60, i32 62, i32 62, i32 54, i32 55, i32 56, i32 59, i32 53, i32 54, i32 56, i32 59, i32 53, i32 56, i32 58, i32 59, i32 53, i32 56, i32 58, i32 60, i32 54, i32 55, i32 57], align 4
83: @compressed = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
85: @result = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
87: @.str = private unnamed_addr constant [12 x i8] c"Result: %d \00", align 1
41: @plt1 = internal unnamed_addr global i32 0, align 4
43: @plt2 = internal unnamed_addr global i32 0, align 4
45: @delay_bph = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
47: @delay_dhx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
49: @rh1 = internal unnamed_addr global i32 0, align 4
51: @ah1 = internal unnamed_addr global i32 0, align 4
53: @rh2 = internal unnamed_addr global i32 0, align 4
55: @ah2 = internal unnamed_addr global i32 0, align 4
57: @deth = internal unnamed_addr global i32 0, align 4
59: @nbh = internal unnamed_addr global i32 0, align 4
61: @ph1 = internal unnamed_addr global i32 0, align 4
63: @ph2 = internal unnamed_addr global i32 0, align 4
65: @dec_del_bpl = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
89: @.str1 = private unnamed_addr constant [14 x i8] c"RESULT: PASS \00", align 1
91: @.str2 = private unnamed_addr constant [13 x i8] c"RESULT: FAIL\00", align 1
digraph "_adpcm.bc" {
    1 [label="#1",color=blue,style=solid];
    2 [label="h",color=blue,style=solid];
    3 [label="#3",color=blue,style=solid];
    4 [label="qq4_code4_table",color=blue,style=solid];
    5 [label="#5",color=blue,style=solid];
    6 [label="qq6_code6_table",color=blue,style=solid];
    7 [label="#7",color=blue,style=solid];
    8 [label="wl_code_table",color=blue,style=solid];
    9 [label="#9",color=blue,style=solid];
    10 [label="ilb_table",color=blue,style=solid];
    11 [label="#11",color=blue,style=solid];
    12 [label="decis_levl",color=blue,style=solid];
    13 [label="#13",color=blue,style=solid];
    14 [label="quant26bt_pos",color=blue,style=solid];
    15 [label="#15",color=blue,style=solid];
    16 [label="quant26bt_neg",color=blue,style=solid];
    17 [label="#17",color=blue,style=solid];
    18 [label="qq2_code2_table",color=blue,style=solid];
    19 [label="#19",color=blue,style=solid];
    20 [label="wh_code_table",color=blue,style=solid];
    21 [label="#21",color=blue,style=solid];
    22 [label="tqmf",color=blue,style=solid];
    23 [label="#23",color=blue,style=solid];
    24 [label="delay_bpl",color=blue,style=solid];
    25 [label="#25",color=blue,style=solid];
    26 [label="delay_dltx",color=blue,style=solid];
    27 [label="#27",color=blue,style=solid];
    28 [label="rlt1",color=blue,style=solid];
    29 [label="#29",color=blue,style=solid];
    30 [label="al1",color=blue,style=solid];
    31 [label="#31",color=blue,style=solid];
    32 [label="rlt2",color=blue,style=solid];
    33 [label="#33",color=blue,style=solid];
    34 [label="al2",color=blue,style=solid];
    35 [label="#35",color=blue,style=solid];
    36 [label="detl",color=blue,style=solid];
    37 [label="#37",color=blue,style=solid];
    38 [label="il",color=blue,style=solid];
    39 [label="#39",color=blue,style=solid];
    40 [label="nbl",color=blue,style=solid];
    41 [label="#41",color=blue,style=solid];
    42 [label="plt1",color=blue,style=solid];
    43 [label="#43",color=blue,style=solid];
    44 [label="plt2",color=blue,style=solid];
    45 [label="#45",color=blue,style=solid];
    46 [label="delay_bph",color=blue,style=solid];
    47 [label="#47",color=blue,style=solid];
    48 [label="delay_dhx",color=blue,style=solid];
    49 [label="#49",color=blue,style=solid];
    50 [label="rh1",color=blue,style=solid];
    51 [label="#51",color=blue,style=solid];
    52 [label="ah1",color=blue,style=solid];
    53 [label="#53",color=blue,style=solid];
    54 [label="rh2",color=blue,style=solid];
    55 [label="#55",color=blue,style=solid];
    56 [label="ah2",color=blue,style=solid];
    57 [label="#57",color=blue,style=solid];
    58 [label="deth",color=blue,style=solid];
    59 [label="#59",color=blue,style=solid];
    60 [label="nbh",color=blue,style=solid];
    61 [label="#61",color=blue,style=solid];
    62 [label="ph1",color=blue,style=solid];
    63 [label="#63",color=blue,style=solid];
    64 [label="ph2",color=blue,style=solid];
    65 [label="#65",color=blue,style=solid];
    66 [label="dec_del_bpl",color=blue,style=solid];
    67 [label="#67",color=blue,style=solid];
    68 [label="dec_del_dltx",color=blue,style=solid];
    69 [label="#69",color=blue,style=solid];
    70 [label="dec_del_bph",color=blue,style=solid];
    71 [label="#71",color=blue,style=solid];
    72 [label="dec_del_dhx",color=blue,style=solid];
    73 [label="#73",color=blue,style=solid];
    74 [label="accumc",color=blue,style=solid];
    75 [label="#75",color=blue,style=solid];
    76 [label="accumd",color=blue,style=solid];
    77 [label="#77",color=blue,style=solid];
    78 [label="test_data",color=blue,style=solid];
    79 [label="#79",color=blue,style=solid];
    80 [label="test_compressed",color=blue,style=solid];
    81 [label="#81",color=blue,style=solid];
    82 [label="test_result",color=blue,style=solid];
    83 [label="#83",color=blue,style=solid];
    84 [label="compressed",color=blue,style=solid];
    85 [label="#85",color=blue,style=solid];
    86 [label="result",color=blue,style=solid];
    87 [label="#87",color=blue,style=solid];
    88 [label=".str",color=blue,style=solid];
    89 [label="#89",color=blue,style=solid];
    90 [label=".str1",color=blue,style=solid];
    91 [label="#91",color=blue,style=solid];
    92 [label=".str2",color=blue,style=solid];
    93 [label="unknown",color=blue,style=solid];
    94 [label="constant",color=blue,style=solid];
    95 [label="unknown",color=blue,style=solid];
    96 [label="constant",color=blue,style=solid];
    97 [label="unknown",color=blue,style=solid];
    98 [label="unknown",color=blue,style=solid];
    99 [label="unknown",color=blue,style=solid];
    100 [label="scevgep27",color=blue,style=solid];
    101 [label="h_ptr.0",color=blue,style=solid];
    102 [label="scevgep25",color=blue,style=solid];
    103 [label="tqmf_ptr.0",color=blue,style=solid];
    104 [label="unknown",color=blue,style=solid];
    105 [label="unknown",color=blue,style=solid];
    106 [label="unknown",color=blue,style=solid];
    107 [label="xa.0",color=blue,style=solid];
    108 [label="unknown",color=blue,style=solid];
    109 [label="unknown",color=blue,style=solid];
    110 [label="unknown",color=blue,style=solid];
    111 [label="xb.0",color=blue,style=solid];
    112 [label="unknown",color=blue,style=solid];
    113 [label="unknown",color=blue,style=solid];
    114 [label="unknown",color=blue,style=solid];
    115 [label="constant",color=blue,style=solid];
    116 [label="unknown",color=blue,style=solid];
    117 [label="constant",color=blue,style=solid];
    118 [label="tqmf_ptr.1",color=blue,style=solid];
    119 [label="tqmf_ptr1.0",color=blue,style=solid];
    120 [label="unknown",color=blue,style=solid];
    121 [label="unknown",color=blue,style=solid];
    122 [label="unknown",color=blue,style=solid];
    123 [label="unknown",color=blue,style=solid];
    124 [label="unknown",color=blue,style=solid];
    125 [label="constant",color=blue,style=solid];
    126 [label="unknown",color=blue,style=solid];
    127 [label="constant",color=blue,style=solid];
    128 [label="i.0.i",color=blue,style=solid];
    129 [label="indvar15",color=blue,style=solid];
    130 [label=".0.i",color=blue,style=solid];
    131 [label=".01.i",color=blue,style=solid];
    132 [label="unknown",color=blue,style=solid];
    133 [label="unknown",color=blue,style=solid];
    134 [label="unknown",color=blue,style=solid];
    135 [label="zl.0.i",color=blue,style=solid];
    136 [label="indvar.next16",color=blue,style=solid];
    137 [label="unknown",color=blue,style=solid];
    138 [label="unknown",color=blue,style=solid];
    139 [label="unknown",color=blue,style=solid];
    140 [label="unknown",color=blue,style=solid];
    141 [label="unknown",color=blue,style=solid];
    142 [label="unknown",color=blue,style=solid];
    143 [label="unknown",color=blue,style=solid];
    144 [label="unknown",color=blue,style=solid];
    145 [label="unknown",color=blue,style=solid];
    146 [label="unknown",color=blue,style=solid];
    147 [label="unknown",color=blue,style=solid];
    148 [label="scevgep14",color=blue,style=solid];
    149 [label="unknown",color=blue,style=solid];
    150 [label="unknown",color=blue,style=solid];
    151 [label="unknown",color=blue,style=solid];
    152 [label="quant26bt_pos.quant26bt_neg",color=blue,style=solid];
    153 [label=".in",color=blue,style=solid];
    154 [label="unknown",color=blue,style=solid];
    155 [label="unknown",color=blue,style=solid];
    156 [label="unknown",color=blue,style=solid];
    157 [label="unknown",color=blue,style=solid];
    158 [label="unknown",color=blue,style=solid];
    159 [label="unknown",color=blue,style=solid];
    160 [label="unknown",color=blue,style=solid];
    161 [label="unknown",color=blue,style=solid];
    162 [label="unknown",color=blue,style=solid];
    163 [label="unknown",color=blue,style=solid];
    164 [label="unknown",color=blue,style=solid];
    165 [label="unknown",color=blue,style=solid];
    166 [label="scevgep10",color=blue,style=solid];
    167 [label="unknown",color=blue,style=solid];
    168 [label="unknown",color=blue,style=solid];
    169 [label="unknown",color=blue,style=solid];
    170 [label="scevgep12",color=blue,style=solid];
    171 [label="scevgep13",color=blue,style=solid];
    172 [label="unknown",color=blue,style=solid];
    173 [label="unknown",color=blue,style=solid];
    174 [label="unknown",color=blue,style=solid];
    175 [label="unknown",color=blue,style=solid];
    176 [label="unknown",color=blue,style=solid];
    177 [label="unknown",color=blue,style=solid];
    178 [label="unknown",color=blue,style=solid];
    179 [label="constant",color=blue,style=solid];
    180 [label="constant",color=blue,style=solid];
    181 [label="unknown",color=blue,style=solid];
    182 [label="constant",color=blue,style=solid];
    183 [label="unknown",color=blue,style=solid];
    184 [label="constant",color=blue,style=solid];
    185 [label="constant",color=blue,style=solid];
    186 [label="unknown",color=blue,style=solid];
    187 [label="unknown",color=blue,style=solid];
    188 [label="wd4.0.i14",color=blue,style=solid];
    189 [label="unknown",color=blue,style=solid];
    190 [label="unknown",color=blue,style=solid];
    191 [label="unknown",color=blue,style=solid];
    192 [label="unknown",color=blue,style=solid];
    193 [label="apl1.0.i9",color=blue,style=solid];
    194 [label="unknown",color=blue,style=solid];
    195 [label="unknown",color=blue,style=solid];
    196 [label="unknown",color=blue,style=solid];
    197 [label="constant",color=blue,style=solid];
    198 [label="unknown",color=blue,style=solid];
    199 [label="constant",color=blue,style=solid];
    200 [label="i.0.i5",color=blue,style=solid];
    201 [label="indvar",color=blue,style=solid];
    202 [label=".0.i7",color=blue,style=solid];
    203 [label=".01.i6",color=blue,style=solid];
    204 [label="unknown",color=blue,style=solid];
    205 [label="unknown",color=blue,style=solid];
    206 [label="unknown",color=blue,style=solid];
    207 [label="zl.0.i4",color=blue,style=solid];
    208 [label="indvar.next",color=blue,style=solid];
    209 [label="unknown",color=blue,style=solid];
    210 [label="unknown",color=blue,style=solid];
    211 [label="unknown",color=blue,style=solid];
    212 [label="unknown",color=blue,style=solid];
    213 [label="unknown",color=blue,style=solid];
    214 [label="unknown",color=blue,style=solid];
    215 [label="unknown",color=blue,style=solid];
    216 [label="unknown",color=blue,style=solid];
    217 [label="unknown",color=blue,style=solid];
    218 [label=".3",color=blue,style=solid];
    219 [label="unknown",color=blue,style=solid];
    220 [label="unknown",color=blue,style=solid];
    221 [label="unknown",color=blue,style=solid];
    222 [label="unknown",color=blue,style=solid];
    223 [label="unknown",color=blue,style=solid];
    224 [label="unknown",color=blue,style=solid];
    225 [label="unknown",color=blue,style=solid];
    226 [label="unknown",color=blue,style=solid];
    227 [label="unknown",color=blue,style=solid];
    228 [label="unknown",color=blue,style=solid];
    229 [label="unknown",color=blue,style=solid];
    230 [label="unknown",color=blue,style=solid];
    231 [label="scevgep",color=blue,style=solid];
    232 [label="unknown",color=blue,style=solid];
    233 [label="unknown",color=blue,style=solid];
    234 [label="unknown",color=blue,style=solid];
    235 [label="scevgep4",color=blue,style=solid];
    236 [label="scevgep5",color=blue,style=solid];
    237 [label="unknown",color=blue,style=solid];
    238 [label="unknown",color=blue,style=solid];
    239 [label="unknown",color=blue,style=solid];
    240 [label="unknown",color=blue,style=solid];
    241 [label="unknown",color=blue,style=solid];
    242 [label="unknown",color=blue,style=solid];
    243 [label="unknown",color=blue,style=solid];
    244 [label="constant",color=blue,style=solid];
    245 [label="constant",color=blue,style=solid];
    246 [label="unknown",color=blue,style=solid];
    247 [label="constant",color=blue,style=solid];
    248 [label="unknown",color=blue,style=solid];
    249 [label="constant",color=blue,style=solid];
    250 [label="constant",color=blue,style=solid];
    251 [label="unknown",color=blue,style=solid];
    252 [label="unknown",color=blue,style=solid];
    253 [label="wd4.0.i",color=blue,style=solid];
    254 [label="unknown",color=blue,style=solid];
    255 [label="unknown",color=blue,style=solid];
    256 [label="unknown",color=blue,style=solid];
    257 [label="unknown",color=blue,style=solid];
    258 [label="apl1.0.i",color=blue,style=solid];
    259 [label="unknown",color=blue,style=solid];
    260 [label="unknown",color=blue,style=solid];
    261 [label="xin1",color=blue,style=solid];
    262 [label="unknown",color=blue,style=solid];
    263 [label="xin2",color=blue,style=solid];
    264 [label="unknown",color=blue,style=solid];
    265 [label="unknown",color=blue,style=solid];
    266 [label="unknown",color=blue,style=solid];
    267 [label="unknown",color=blue,style=solid];
    268 [label="unknown",color=blue,style=solid];
    269 [label="unknown",color=blue,style=solid];
    270 [label="unknown",color=blue,style=solid];
    271 [label="unknown",color=blue,style=solid];
    272 [label="unknown",color=blue,style=solid];
    273 [label="unknown",color=blue,style=solid];
    274 [label="unknown",color=blue,style=solid];
    275 [label="unknown",color=blue,style=solid];
    276 [label="unknown",color=blue,style=solid];
    277 [label="unknown",color=blue,style=solid];
    278 [label="unknown",color=blue,style=solid];
    279 [label="encode",color=blue,style=solid];
    280 [label="unknown",color=blue,style=solid];
    281 [label="scevgep76",color=blue,style=solid];
    282 [label="scevgep75",color=blue,style=solid];
    283 [label="scevgep74",color=blue,style=solid];
    284 [label="scevgep73",color=blue,style=solid];
    285 [label="unknown",color=blue,style=solid];
    286 [label="unknown",color=blue,style=solid];
    287 [label="scevgep71",color=blue,style=solid];
    288 [label="scevgep70",color=blue,style=solid];
    289 [label="scevgep69",color=blue,style=solid];
    290 [label="scevgep68",color=blue,style=solid];
    291 [label="unknown",color=blue,style=solid];
    292 [label="unknown",color=blue,style=solid];
    293 [label="scevgep66",color=blue,style=solid];
    294 [label="unknown",color=blue,style=solid];
    295 [label="unknown",color=blue,style=solid];
    296 [label="scevgep64",color=blue,style=solid];
    297 [label="scevgep63",color=blue,style=solid];
    298 [label="unknown",color=blue,style=solid];
    299 [label="unknown",color=blue,style=solid];
    300 [label="unknown",color=blue,style=solid];
    301 [label="i1.0.i",color=blue,style=solid];
    302 [label="unknown",color=blue,style=solid];
    303 [label="unknown",color=blue,style=solid];
    304 [label="unknown",color=blue,style=solid];
    305 [label="unknown",color=blue,style=solid];
    306 [label="unknown",color=blue,style=solid];
    307 [label="scevgep61",color=blue,style=solid];
    308 [label="scevgep60",color=blue,style=solid];
    309 [label="scevgep59",color=blue,style=solid];
    310 [label="unknown",color=blue,style=solid];
    311 [label="scevgep58",color=blue,style=solid];
    312 [label="scevgep57",color=blue,style=solid];
    313 [label="unknown",color=blue,style=solid];
    314 [label="scevgep56",color=blue,style=solid];
    315 [label="scevgep55",color=blue,style=solid];
    316 [label="unknown",color=blue,style=solid];
    317 [label="scevgep54",color=blue,style=solid];
    318 [label="scevgep53",color=blue,style=solid];
    319 [label="unknown",color=blue,style=solid];
    320 [label="scevgep52",color=blue,style=solid];
    321 [label="scevgep51",color=blue,style=solid];
    322 [label="unknown",color=blue,style=solid];
    323 [label="scevgep50",color=blue,style=solid];
    324 [label="scevgep49",color=blue,style=solid];
    325 [label="unknown",color=blue,style=solid];
    326 [label="scevgep48",color=blue,style=solid];
    327 [label="unknown",color=blue,style=solid];
    328 [label="unknown",color=blue,style=solid];
    329 [label="unknown",color=blue,style=solid];
    330 [label="unknown",color=blue,style=solid];
    331 [label="unknown",color=blue,style=solid];
    332 [label="unknown",color=blue,style=solid];
    333 [label="unknown",color=blue,style=solid];
    334 [label="indvar.next46",color=blue,style=solid];
    335 [label="indvar45",color=blue,style=solid];
    336 [label="i1.1.i",color=blue,style=solid];
    337 [label="unknown",color=blue,style=solid];
    338 [label="unknown",color=blue,style=solid];
    339 [label="unknown",color=blue,style=solid];
    340 [label="scevgep44",color=blue,style=solid];
    341 [label="unknown",color=blue,style=solid];
    342 [label="scevgep43",color=blue,style=solid];
    343 [label="unknown",color=blue,style=solid];
    344 [label="indvar.next41",color=blue,style=solid];
    345 [label="indvar40",color=blue,style=solid];
    346 [label="scevgep38",color=blue,style=solid];
    347 [label="scevgep39",color=blue,style=solid];
    348 [label="unknown",color=blue,style=solid];
    349 [label="unknown",color=blue,style=solid];
    350 [label="unknown",color=blue,style=solid];
    351 [label="constant",color=blue,style=solid];
    352 [label="unknown",color=blue,style=solid];
    353 [label="constant",color=blue,style=solid];
    354 [label="i.0.i.i.i",color=blue,style=solid];
    355 [label="indvar",color=blue,style=solid];
    356 [label=".0.i.i.i",color=blue,style=solid];
    357 [label=".01.i.i.i",color=blue,style=solid];
    358 [label="unknown",color=blue,style=solid];
    359 [label="unknown",color=blue,style=solid];
    360 [label="unknown",color=blue,style=solid];
    361 [label="zl.0.i.i.i",color=blue,style=solid];
    362 [label="indvar.next",color=blue,style=solid];
    363 [label="unknown",color=blue,style=solid];
    364 [label="unknown",color=blue,style=solid];
    365 [label="unknown",color=blue,style=solid];
    366 [label="unknown",color=blue,style=solid];
    367 [label="unknown",color=blue,style=solid];
    368 [label="unknown",color=blue,style=solid];
    369 [label="unknown",color=blue,style=solid];
    370 [label="unknown",color=blue,style=solid];
    371 [label="unknown",color=blue,style=solid];
    372 [label="unknown",color=blue,style=solid];
    373 [label="unknown",color=blue,style=solid];
    374 [label="unknown",color=blue,style=solid];
    375 [label="unknown",color=blue,style=solid];
    376 [label="unknown",color=blue,style=solid];
    377 [label="unknown",color=blue,style=solid];
    378 [label="unknown",color=blue,style=solid];
    379 [label="unknown",color=blue,style=solid];
    380 [label="scevgep14",color=blue,style=solid];
    381 [label="unknown",color=blue,style=solid];
    382 [label="unknown",color=blue,style=solid];
    383 [label="unknown",color=blue,style=solid];
    384 [label="scevgep11",color=blue,style=solid];
    385 [label="scevgep12",color=blue,style=solid];
    386 [label="unknown",color=blue,style=solid];
    387 [label="unknown",color=blue,style=solid];
    388 [label="unknown",color=blue,style=solid];
    389 [label="unknown",color=blue,style=solid];
    390 [label="unknown",color=blue,style=solid];
    391 [label="unknown",color=blue,style=solid];
    392 [label="unknown",color=blue,style=solid];
    393 [label="constant",color=blue,style=solid];
    394 [label="constant",color=blue,style=solid];
    395 [label="unknown",color=blue,style=solid];
    396 [label="constant",color=blue,style=solid];
    397 [label="unknown",color=blue,style=solid];
    398 [label="constant",color=blue,style=solid];
    399 [label="constant",color=blue,style=solid];
    400 [label="wd4.0.i14.i.i",color=blue,style=solid];
    401 [label="unknown",color=blue,style=solid];
    402 [label="unknown",color=blue,style=solid];
    403 [label="unknown",color=blue,style=solid];
    404 [label="unknown",color=blue,style=solid];
    405 [label="apl1.0.i9.i.i",color=blue,style=solid];
    406 [label="unknown",color=blue,style=solid];
    407 [label="unknown",color=blue,style=solid];
    408 [label="constant",color=blue,style=solid];
    409 [label="unknown",color=blue,style=solid];
    410 [label="constant",color=blue,style=solid];
    411 [label="i.0.i5.i.i",color=blue,style=solid];
    412 [label="indvar15",color=blue,style=solid];
    413 [label=".0.i7.i.i",color=blue,style=solid];
    414 [label=".01.i6.i.i",color=blue,style=solid];
    415 [label="unknown",color=blue,style=solid];
    416 [label="unknown",color=blue,style=solid];
    417 [label="unknown",color=blue,style=solid];
    418 [label="zl.0.i4.i.i",color=blue,style=solid];
    419 [label="indvar.next16",color=blue,style=solid];
    420 [label="unknown",color=blue,style=solid];
    421 [label="unknown",color=blue,style=solid];
    422 [label="unknown",color=blue,style=solid];
    423 [label="unknown",color=blue,style=solid];
    424 [label="unknown",color=blue,style=solid];
    425 [label="unknown",color=blue,style=solid];
    426 [label="unknown",color=blue,style=solid];
    427 [label="unknown",color=blue,style=solid];
    428 [label="unknown",color=blue,style=solid];
    429 [label="unknown",color=blue,style=solid];
    430 [label="unknown",color=blue,style=solid];
    431 [label="unknown",color=blue,style=solid];
    432 [label="unknown",color=blue,style=solid];
    433 [label="unknown",color=blue,style=solid];
    434 [label="unknown",color=blue,style=solid];
    435 [label="scevgep24",color=blue,style=solid];
    436 [label="unknown",color=blue,style=solid];
    437 [label="unknown",color=blue,style=solid];
    438 [label="unknown",color=blue,style=solid];
    439 [label="scevgep21",color=blue,style=solid];
    440 [label="scevgep22",color=blue,style=solid];
    441 [label="unknown",color=blue,style=solid];
    442 [label="unknown",color=blue,style=solid];
    443 [label="unknown",color=blue,style=solid];
    444 [label="unknown",color=blue,style=solid];
    445 [label="unknown",color=blue,style=solid];
    446 [label="unknown",color=blue,style=solid];
    447 [label="unknown",color=blue,style=solid];
    448 [label="constant",color=blue,style=solid];
    449 [label="constant",color=blue,style=solid];
    450 [label="unknown",color=blue,style=solid];
    451 [label="constant",color=blue,style=solid];
    452 [label="unknown",color=blue,style=solid];
    453 [label="constant",color=blue,style=solid];
    454 [label="constant",color=blue,style=solid];
    455 [label="wd4.0.i.i.i",color=blue,style=solid];
    456 [label="unknown",color=blue,style=solid];
    457 [label="unknown",color=blue,style=solid];
    458 [label="unknown",color=blue,style=solid];
    459 [label="unknown",color=blue,style=solid];
    460 [label="apl1.0.i.i.i",color=blue,style=solid];
    461 [label="unknown",color=blue,style=solid];
    462 [label="unknown",color=blue,style=solid];
    463 [label="unknown",color=blue,style=solid];
    464 [label="unknown",color=blue,style=solid];
    465 [label="unknown",color=blue,style=solid];
    466 [label="scevgep29",color=blue,style=solid];
    467 [label="unknown",color=blue,style=solid];
    468 [label="h_ptr.0.i.i",color=blue,style=solid];
    469 [label="ac_ptr.0.i.i",color=blue,style=solid];
    470 [label="ad_ptr.0.i.i",color=blue,style=solid];
    471 [label="unknown",color=blue,style=solid];
    472 [label="unknown",color=blue,style=solid];
    473 [label="unknown",color=blue,style=solid];
    474 [label="xa1.0.i.i",color=blue,style=solid];
    475 [label="unknown",color=blue,style=solid];
    476 [label="unknown",color=blue,style=solid];
    477 [label="unknown",color=blue,style=solid];
    478 [label="xa2.0.i.i",color=blue,style=solid];
    479 [label="unknown",color=blue,style=solid];
    480 [label="unknown",color=blue,style=solid];
    481 [label="unknown",color=blue,style=solid];
    482 [label="constant",color=blue,style=solid];
    483 [label="unknown",color=blue,style=solid];
    484 [label="constant",color=blue,style=solid];
    485 [label="ad_ptr1.0.i.i",color=blue,style=solid];
    486 [label="ac_ptr.1.i.i",color=blue,style=solid];
    487 [label="ac_ptr1.0.i.i",color=blue,style=solid];
    488 [label="ad_ptr.1.i.i",color=blue,style=solid];
    489 [label="unknown",color=blue,style=solid];
    490 [label="unknown",color=blue,style=solid];
    491 [label="unknown",color=blue,style=solid];
    492 [label="unknown",color=blue,style=solid];
    493 [label="unknown",color=blue,style=solid];
    494 [label="unknown",color=blue,style=solid];
    495 [label="constant",color=blue,style=solid];
    496 [label="constant",color=blue,style=solid];
    497 [label="indvar.next36",color=blue,style=solid];
    498 [label="indvar35",color=blue,style=solid];
    499 [label="scevgep6",color=blue,style=solid];
    500 [label="scevgep5",color=blue,style=solid];
    501 [label="unknown",color=blue,style=solid];
    502 [label="unknown",color=blue,style=solid];
    503 [label=".main_result.0",color=blue,style=solid];
    504 [label="main_result.0",color=blue,style=solid];
    505 [label="unknown",color=blue,style=solid];
    506 [label="unknown",color=blue,style=solid];
    507 [label="scevgep4",color=blue,style=solid];
    508 [label="scevgep",color=blue,style=solid];
    509 [label="unknown",color=blue,style=solid];
    510 [label="unknown",color=blue,style=solid];
    511 [label=".main_result.2",color=blue,style=solid];
    512 [label="main_result.2",color=blue,style=solid];
    513 [label="unknown",color=blue,style=solid];
    514 [label="unknown",color=blue,style=solid];
    1 -> 105;
    1 -> 109;
    1 -> 472;
    1 -> 476;
    2 -> 100;
    2 -> 101;
    2 -> 466;
    2 -> 468;
    3 -> 156;
    3 -> 368;
    4 -> 155;
    4 -> 367;
    5 -> 369;
    6 -> 339;
    7 -> 159;
    7 -> 373;
    8 -> 158;
    8 -> 372;
    9 -> 163;
    9 -> 228;
    9 -> 377;
    9 -> 432;
    10 -> 162;
    10 -> 227;
    10 -> 376;
    10 -> 431;
    11 -> 149;
    12 -> 148;
    13 -> 154;
    14 -> 152;
    15 -> 154;
    16 -> 152;
    17 -> 221;
    17 -> 426;
    18 -> 220;
    18 -> 425;
    19 -> 224;
    19 -> 428;
    20 -> 223;
    20 -> 427;
    21 -> 93;
    21 -> 95;
    21 -> 104;
    21 -> 108;
    21 -> 114;
    21 -> 116;
    21 -> 120;
    22 -> 94;
    22 -> 96;
    22 -> 102;
    22 -> 103;
    22 -> 115;
    22 -> 117;
    22 -> 118;
    22 -> 119;
    22 -> 293;
    23 -> 124;
    23 -> 132;
    23 -> 167;
    23 -> 173;
    24 -> 125;
    24 -> 130;
    24 -> 166;
    24 -> 170;
    24 -> 287;
    25 -> 126;
    25 -> 133;
    25 -> 172;
    25 -> 178;
    25 -> 181;
    25 -> 183;
    26 -> 127;
    26 -> 131;
    26 -> 171;
    26 -> 179;
    26 -> 180;
    26 -> 182;
    26 -> 184;
    26 -> 185;
    26 -> 281;
    27 -> 139;
    29 -> 140;
    31 -> 141;
    33 -> 142;
    35 -> 147;
    37 -> 338;
    39 -> 157;
    41 -> 186;
    43 -> 187;
    45 -> 196;
    45 -> 204;
    45 -> 232;
    45 -> 238;
    46 -> 197;
    46 -> 202;
    46 -> 231;
    46 -> 235;
    46 -> 288;
    47 -> 198;
    47 -> 205;
    47 -> 237;
    47 -> 243;
    47 -> 246;
    47 -> 248;
    48 -> 199;
    48 -> 203;
    48 -> 236;
    48 -> 244;
    48 -> 245;
    48 -> 247;
    48 -> 249;
    48 -> 250;
    48 -> 282;
    49 -> 209;
    51 -> 210;
    53 -> 211;
    55 -> 212;
    57 -> 217;
    59 -> 222;
    61 -> 251;
    63 -> 252;
    65 -> 350;
    65 -> 358;
    65 -> 381;
    65 -> 387;
    66 -> 289;
    66 -> 351;
    66 -> 356;
    66 -> 380;
    66 -> 384;
    67 -> 352;
    67 -> 359;
    67 -> 386;
    67 -> 392;
    67 -> 395;
    67 -> 397;
    68 -> 283;
    68 -> 353;
    68 -> 357;
    68 -> 385;
    68 -> 393;
    68 -> 394;
    68 -> 396;
    68 -> 398;
    68 -> 399;
    69 -> 407;
    69 -> 415;
    69 -> 436;
    69 -> 442;
    70 -> 290;
    70 -> 408;
    70 -> 413;
    70 -> 435;
    70 -> 439;
    71 -> 409;
    71 -> 416;
    71 -> 441;
    71 -> 447;
    71 -> 450;
    71 -> 452;
    72 -> 284;
    72 -> 410;
    72 -> 414;
    72 -> 440;
    72 -> 448;
    72 -> 449;
    72 -> 451;
    72 -> 453;
    72 -> 454;
    73 -> 471;
    73 -> 481;
    73 -> 489;
    74 -> 296;
    74 -> 469;
    74 -> 482;
    74 -> 486;
    74 -> 487;
    74 -> 495;
    75 -> 475;
    75 -> 483;
    75 -> 490;
    76 -> 297;
    76 -> 470;
    76 -> 484;
    76 -> 485;
    76 -> 488;
    76 -> 496;
    77 -> 262;
    77 -> 264;
    77 -> 265;
    77 -> 266;
    77 -> 267;
    77 -> 268;
    77 -> 269;
    77 -> 270;
    77 -> 271;
    77 -> 272;
    77 -> 273;
    77 -> 274;
    77 -> 275;
    77 -> 276;
    77 -> 277;
    77 -> 278;
    78 -> 307;
    78 -> 308;
    78 -> 309;
    78 -> 311;
    78 -> 312;
    78 -> 314;
    78 -> 315;
    78 -> 317;
    78 -> 318;
    78 -> 320;
    78 -> 321;
    78 -> 323;
    78 -> 324;
    78 -> 326;
    78 -> 340;
    78 -> 342;
    79 -> 502;
    80 -> 500;
    81 -> 510;
    82 -> 508;
    83 -> 349;
    83 -> 501;
    84 -> 327;
    84 -> 328;
    84 -> 329;
    84 -> 330;
    84 -> 331;
    84 -> 332;
    84 -> 333;
    84 -> 343;
    84 -> 348;
    84 -> 499;
    85 -> 509;
    86 -> 346;
    86 -> 347;
    86 -> 507;
    98 -> 97;
    98 -> 99;
    107 -> 106;
    107 -> 123;
    111 -> 110;
    111 -> 137;
    113 -> 112;
    122 -> 121;
    123 -> 138;
    129 -> 128;
    129 -> 136;
    135 -> 134;
    137 -> 138;
    144 -> 143;
    145 -> 195;
    146 -> 145;
    146 -> 164;
    151 -> 150;
    152 -> 153;
    159 -> 160;
    161 -> 160;
    165 -> 164;
    165 -> 195;
    169 -> 168;
    175 -> 174;
    177 -> 176;
    188 -> 190;
    189 -> 188;
    191 -> 193;
    192 -> 191;
    194 -> 193;
    201 -> 200;
    201 -> 208;
    207 -> 206;
    214 -> 213;
    215 -> 260;
    216 -> 215;
    219 -> 218;
    224 -> 225;
    226 -> 225;
    230 -> 229;
    230 -> 260;
    234 -> 233;
    240 -> 239;
    242 -> 241;
    253 -> 255;
    254 -> 253;
    256 -> 258;
    257 -> 256;
    259 -> 258;
    262 -> 261;
    264 -> 263;
    265 -> 261;
    266 -> 263;
    267 -> 261;
    268 -> 263;
    269 -> 261;
    270 -> 263;
    271 -> 261;
    272 -> 263;
    273 -> 261;
    274 -> 263;
    275 -> 261;
    276 -> 263;
    277 -> 261;
    278 -> 263;
    280 -> 279;
    286 -> 285;
    292 -> 291;
    295 -> 294;
    299 -> 298;
    301 -> 300;
    301 -> 302;
    301 -> 303;
    301 -> 304;
    301 -> 305;
    301 -> 306;
    301 -> 310;
    301 -> 313;
    301 -> 316;
    301 -> 319;
    301 -> 322;
    301 -> 325;
    335 -> 334;
    337 -> 336;
    337 -> 341;
    345 -> 344;
    355 -> 354;
    355 -> 362;
    361 -> 360;
    364 -> 363;
    365 -> 370;
    365 -> 420;
    366 -> 365;
    370 -> 463;
    371 -> 370;
    373 -> 374;
    375 -> 374;
    379 -> 378;
    379 -> 420;
    383 -> 382;
    389 -> 388;
    391 -> 390;
    400 -> 402;
    401 -> 400;
    403 -> 405;
    404 -> 403;
    406 -> 405;
    412 -> 411;
    412 -> 419;
    418 -> 417;
    422 -> 421;
    423 -> 462;
    424 -> 423;
    428 -> 429;
    430 -> 429;
    434 -> 433;
    434 -> 462;
    438 -> 437;
    444 -> 443;
    446 -> 445;
    455 -> 457;
    456 -> 455;
    458 -> 460;
    459 -> 458;
    461 -> 460;
    462 -> 463;
    465 -> 464;
    465 -> 467;
    474 -> 473;
    474 -> 493;
    478 -> 477;
    478 -> 494;
    480 -> 479;
    492 -> 491;
    498 -> 497;
    504 -> 503;
    506 -> 505;
    512 -> 511;
    514 -> 513;
    pts2 [label="#1",color=red,style=dashed,shape=box];
    2 -> pts2 [color=red,style=dashed];
    pts4 [label="#3",color=red,style=dashed,shape=box];
    4 -> pts4 [color=red,style=dashed];
    pts6 [label="#5",color=red,style=dashed,shape=box];
    6 -> pts6 [color=red,style=dashed];
    pts8 [label="#7",color=red,style=dashed,shape=box];
    8 -> pts8 [color=red,style=dashed];
    pts10 [label="#9",color=red,style=dashed,shape=box];
    10 -> pts10 [color=red,style=dashed];
    pts12 [label="#11",color=red,style=dashed,shape=box];
    12 -> pts12 [color=red,style=dashed];
    pts14 [label="#13",color=red,style=dashed,shape=box];
    14 -> pts14 [color=red,style=dashed];
    pts16 [label="#15",color=red,style=dashed,shape=box];
    16 -> pts16 [color=red,style=dashed];
    pts18 [label="#17",color=red,style=dashed,shape=box];
    18 -> pts18 [color=red,style=dashed];
    pts20 [label="#19",color=red,style=dashed,shape=box];
    20 -> pts20 [color=red,style=dashed];
    pts22 [label="#21",color=red,style=dashed,shape=box];
    22 -> pts22 [color=red,style=dashed];
    pts24 [label="#23",color=red,style=dashed,shape=box];
    24 -> pts24 [color=red,style=dashed];
    pts26 [label="#25",color=red,style=dashed,shape=box];
    26 -> pts26 [color=red,style=dashed];
    pts28 [label="#27",color=red,style=dashed,shape=box];
    28 -> pts28 [color=red,style=dashed];
    pts30 [label="#29",color=red,style=dashed,shape=box];
    30 -> pts30 [color=red,style=dashed];
    pts32 [label="#31",color=red,style=dashed,shape=box];
    32 -> pts32 [color=red,style=dashed];
    pts34 [label="#33",color=red,style=dashed,shape=box];
    34 -> pts34 [color=red,style=dashed];
    pts36 [label="#35",color=red,style=dashed,shape=box];
    36 -> pts36 [color=red,style=dashed];
    pts38 [label="#37",color=red,style=dashed,shape=box];
    38 -> pts38 [color=red,style=dashed];
    pts40 [label="#39",color=red,style=dashed,shape=box];
    40 -> pts40 [color=red,style=dashed];
    pts42 [label="#41",color=red,style=dashed,shape=box];
    42 -> pts42 [color=red,style=dashed];
    pts44 [label="#43",color=red,style=dashed,shape=box];
    44 -> pts44 [color=red,style=dashed];
    pts46 [label="#45",color=red,style=dashed,shape=box];
    46 -> pts46 [color=red,style=dashed];
    pts48 [label="#47",color=red,style=dashed,shape=box];
    48 -> pts48 [color=red,style=dashed];
    pts50 [label="#49",color=red,style=dashed,shape=box];
    50 -> pts50 [color=red,style=dashed];
    pts52 [label="#51",color=red,style=dashed,shape=box];
    52 -> pts52 [color=red,style=dashed];
    pts54 [label="#53",color=red,style=dashed,shape=box];
    54 -> pts54 [color=red,style=dashed];
    pts56 [label="#55",color=red,style=dashed,shape=box];
    56 -> pts56 [color=red,style=dashed];
    pts58 [label="#57",color=red,style=dashed,shape=box];
    58 -> pts58 [color=red,style=dashed];
    pts60 [label="#59",color=red,style=dashed,shape=box];
    60 -> pts60 [color=red,style=dashed];
    pts62 [label="#61",color=red,style=dashed,shape=box];
    62 -> pts62 [color=red,style=dashed];
    pts64 [label="#63",color=red,style=dashed,shape=box];
    64 -> pts64 [color=red,style=dashed];
    pts66 [label="#65",color=red,style=dashed,shape=box];
    66 -> pts66 [color=red,style=dashed];
    pts68 [label="#67",color=red,style=dashed,shape=box];
    68 -> pts68 [color=red,style=dashed];
    pts70 [label="#69",color=red,style=dashed,shape=box];
    70 -> pts70 [color=red,style=dashed];
    pts72 [label="#71",color=red,style=dashed,shape=box];
    72 -> pts72 [color=red,style=dashed];
    pts74 [label="#73",color=red,style=dashed,shape=box];
    74 -> pts74 [color=red,style=dashed];
    pts76 [label="#75",color=red,style=dashed,shape=box];
    76 -> pts76 [color=red,style=dashed];
    pts78 [label="#77",color=red,style=dashed,shape=box];
    78 -> pts78 [color=red,style=dashed];
    pts80 [label="#79",color=red,style=dashed,shape=box];
    80 -> pts80 [color=red,style=dashed];
    pts82 [label="#81",color=red,style=dashed,shape=box];
    82 -> pts82 [color=red,style=dashed];
    pts84 [label="#83",color=red,style=dashed,shape=box];
    84 -> pts84 [color=red,style=dashed];
    pts86 [label="#85",color=red,style=dashed,shape=box];
    86 -> pts86 [color=red,style=dashed];
    pts88 [label="#87",color=red,style=dashed,shape=box];
    88 -> pts88 [color=red,style=dashed];
    pts90 [label="#89",color=red,style=dashed,shape=box];
    90 -> pts90 [color=red,style=dashed];
    pts92 [label="#91",color=red,style=dashed,shape=box];
    92 -> pts92 [color=red,style=dashed];
    pts94 [label="#21",color=red,style=dashed,shape=box];
    94 -> pts94 [color=red,style=dashed];
    pts96 [label="#21",color=red,style=dashed,shape=box];
    96 -> pts96 [color=red,style=dashed];
    pts100 [label="#1",color=red,style=dashed,shape=box];
    100 -> pts100 [color=red,style=dashed];
    pts101 [label="#1",color=red,style=dashed,shape=box];
    101 -> pts101 [color=red,style=dashed];
    pts102 [label="#21",color=red,style=dashed,shape=box];
    102 -> pts102 [color=red,style=dashed];
    pts103 [label="#21",color=red,style=dashed,shape=box];
    103 -> pts103 [color=red,style=dashed];
    pts115 [label="#21",color=red,style=dashed,shape=box];
    115 -> pts115 [color=red,style=dashed];
    pts117 [label="#21",color=red,style=dashed,shape=box];
    117 -> pts117 [color=red,style=dashed];
    pts118 [label="#21",color=red,style=dashed,shape=box];
    118 -> pts118 [color=red,style=dashed];
    pts119 [label="#21",color=red,style=dashed,shape=box];
    119 -> pts119 [color=red,style=dashed];
    pts125 [label="#23",color=red,style=dashed,shape=box];
    125 -> pts125 [color=red,style=dashed];
    pts127 [label="#25",color=red,style=dashed,shape=box];
    127 -> pts127 [color=red,style=dashed];
    pts130 [label="#23",color=red,style=dashed,shape=box];
    130 -> pts130 [color=red,style=dashed];
    pts131 [label="#25",color=red,style=dashed,shape=box];
    131 -> pts131 [color=red,style=dashed];
    pts148 [label="#11",color=red,style=dashed,shape=box];
    148 -> pts148 [color=red,style=dashed];
    pts152 [label="#13, #15",color=red,style=dashed,shape=box];
    152 -> pts152 [color=red,style=dashed];
    pts153 [label="#13, #15",color=red,style=dashed,shape=box];
    153 -> pts153 [color=red,style=dashed];
    pts155 [label="#3",color=red,style=dashed,shape=box];
    155 -> pts155 [color=red,style=dashed];
    pts158 [label="#7",color=red,style=dashed,shape=box];
    158 -> pts158 [color=red,style=dashed];
    pts162 [label="#9",color=red,style=dashed,shape=box];
    162 -> pts162 [color=red,style=dashed];
    pts166 [label="#23",color=red,style=dashed,shape=box];
    166 -> pts166 [color=red,style=dashed];
    pts170 [label="#23",color=red,style=dashed,shape=box];
    170 -> pts170 [color=red,style=dashed];
    pts171 [label="#25",color=red,style=dashed,shape=box];
    171 -> pts171 [color=red,style=dashed];
    pts179 [label="#25",color=red,style=dashed,shape=box];
    179 -> pts179 [color=red,style=dashed];
    pts180 [label="#25",color=red,style=dashed,shape=box];
    180 -> pts180 [color=red,style=dashed];
    pts182 [label="#25",color=red,style=dashed,shape=box];
    182 -> pts182 [color=red,style=dashed];
    pts184 [label="#25",color=red,style=dashed,shape=box];
    184 -> pts184 [color=red,style=dashed];
    pts185 [label="#25",color=red,style=dashed,shape=box];
    185 -> pts185 [color=red,style=dashed];
    pts197 [label="#45",color=red,style=dashed,shape=box];
    197 -> pts197 [color=red,style=dashed];
    pts199 [label="#47",color=red,style=dashed,shape=box];
    199 -> pts199 [color=red,style=dashed];
    pts202 [label="#45",color=red,style=dashed,shape=box];
    202 -> pts202 [color=red,style=dashed];
    pts203 [label="#47",color=red,style=dashed,shape=box];
    203 -> pts203 [color=red,style=dashed];
    pts220 [label="#17",color=red,style=dashed,shape=box];
    220 -> pts220 [color=red,style=dashed];
    pts223 [label="#19",color=red,style=dashed,shape=box];
    223 -> pts223 [color=red,style=dashed];
    pts227 [label="#9",color=red,style=dashed,shape=box];
    227 -> pts227 [color=red,style=dashed];
    pts231 [label="#45",color=red,style=dashed,shape=box];
    231 -> pts231 [color=red,style=dashed];
    pts235 [label="#45",color=red,style=dashed,shape=box];
    235 -> pts235 [color=red,style=dashed];
    pts236 [label="#47",color=red,style=dashed,shape=box];
    236 -> pts236 [color=red,style=dashed];
    pts244 [label="#47",color=red,style=dashed,shape=box];
    244 -> pts244 [color=red,style=dashed];
    pts245 [label="#47",color=red,style=dashed,shape=box];
    245 -> pts245 [color=red,style=dashed];
    pts247 [label="#47",color=red,style=dashed,shape=box];
    247 -> pts247 [color=red,style=dashed];
    pts249 [label="#47",color=red,style=dashed,shape=box];
    249 -> pts249 [color=red,style=dashed];
    pts250 [label="#47",color=red,style=dashed,shape=box];
    250 -> pts250 [color=red,style=dashed];
    pts281 [label="#25",color=red,style=dashed,shape=box];
    281 -> pts281 [color=red,style=dashed];
    pts282 [label="#47",color=red,style=dashed,shape=box];
    282 -> pts282 [color=red,style=dashed];
    pts283 [label="#67",color=red,style=dashed,shape=box];
    283 -> pts283 [color=red,style=dashed];
    pts284 [label="#71",color=red,style=dashed,shape=box];
    284 -> pts284 [color=red,style=dashed];
    pts287 [label="#23",color=red,style=dashed,shape=box];
    287 -> pts287 [color=red,style=dashed];
    pts288 [label="#45",color=red,style=dashed,shape=box];
    288 -> pts288 [color=red,style=dashed];
    pts289 [label="#65",color=red,style=dashed,shape=box];
    289 -> pts289 [color=red,style=dashed];
    pts290 [label="#69",color=red,style=dashed,shape=box];
    290 -> pts290 [color=red,style=dashed];
    pts293 [label="#21",color=red,style=dashed,shape=box];
    293 -> pts293 [color=red,style=dashed];
    pts296 [label="#73",color=red,style=dashed,shape=box];
    296 -> pts296 [color=red,style=dashed];
    pts297 [label="#75",color=red,style=dashed,shape=box];
    297 -> pts297 [color=red,style=dashed];
    pts307 [label="#77",color=red,style=dashed,shape=box];
    307 -> pts307 [color=red,style=dashed];
    pts308 [label="#77",color=red,style=dashed,shape=box];
    308 -> pts308 [color=red,style=dashed];
    pts309 [label="#77",color=red,style=dashed,shape=box];
    309 -> pts309 [color=red,style=dashed];
    pts311 [label="#77",color=red,style=dashed,shape=box];
    311 -> pts311 [color=red,style=dashed];
    pts312 [label="#77",color=red,style=dashed,shape=box];
    312 -> pts312 [color=red,style=dashed];
    pts314 [label="#77",color=red,style=dashed,shape=box];
    314 -> pts314 [color=red,style=dashed];
    pts315 [label="#77",color=red,style=dashed,shape=box];
    315 -> pts315 [color=red,style=dashed];
    pts317 [label="#77",color=red,style=dashed,shape=box];
    317 -> pts317 [color=red,style=dashed];
    pts318 [label="#77",color=red,style=dashed,shape=box];
    318 -> pts318 [color=red,style=dashed];
    pts320 [label="#77",color=red,style=dashed,shape=box];
    320 -> pts320 [color=red,style=dashed];
    pts321 [label="#77",color=red,style=dashed,shape=box];
    321 -> pts321 [color=red,style=dashed];
    pts323 [label="#77",color=red,style=dashed,shape=box];
    323 -> pts323 [color=red,style=dashed];
    pts324 [label="#77",color=red,style=dashed,shape=box];
    324 -> pts324 [color=red,style=dashed];
    pts326 [label="#77",color=red,style=dashed,shape=box];
    326 -> pts326 [color=red,style=dashed];
    pts327 [label="#83",color=red,style=dashed,shape=box];
    327 -> pts327 [color=red,style=dashed];
    pts328 [label="#83",color=red,style=dashed,shape=box];
    328 -> pts328 [color=red,style=dashed];
    pts329 [label="#83",color=red,style=dashed,shape=box];
    329 -> pts329 [color=red,style=dashed];
    pts330 [label="#83",color=red,style=dashed,shape=box];
    330 -> pts330 [color=red,style=dashed];
    pts331 [label="#83",color=red,style=dashed,shape=box];
    331 -> pts331 [color=red,style=dashed];
    pts332 [label="#83",color=red,style=dashed,shape=box];
    332 -> pts332 [color=red,style=dashed];
    pts333 [label="#83",color=red,style=dashed,shape=box];
    333 -> pts333 [color=red,style=dashed];
    pts339 [label="#5",color=red,style=dashed,shape=box];
    339 -> pts339 [color=red,style=dashed];
    pts340 [label="#77",color=red,style=dashed,shape=box];
    340 -> pts340 [color=red,style=dashed];
    pts342 [label="#77",color=red,style=dashed,shape=box];
    342 -> pts342 [color=red,style=dashed];
    pts343 [label="#83",color=red,style=dashed,shape=box];
    343 -> pts343 [color=red,style=dashed];
    pts346 [label="#85",color=red,style=dashed,shape=box];
    346 -> pts346 [color=red,style=dashed];
    pts347 [label="#85",color=red,style=dashed,shape=box];
    347 -> pts347 [color=red,style=dashed];
    pts348 [label="#83",color=red,style=dashed,shape=box];
    348 -> pts348 [color=red,style=dashed];
    pts351 [label="#65",color=red,style=dashed,shape=box];
    351 -> pts351 [color=red,style=dashed];
    pts353 [label="#67",color=red,style=dashed,shape=box];
    353 -> pts353 [color=red,style=dashed];
    pts356 [label="#65",color=red,style=dashed,shape=box];
    356 -> pts356 [color=red,style=dashed];
    pts357 [label="#67",color=red,style=dashed,shape=box];
    357 -> pts357 [color=red,style=dashed];
    pts367 [label="#3",color=red,style=dashed,shape=box];
    367 -> pts367 [color=red,style=dashed];
    pts372 [label="#7",color=red,style=dashed,shape=box];
    372 -> pts372 [color=red,style=dashed];
    pts376 [label="#9",color=red,style=dashed,shape=box];
    376 -> pts376 [color=red,style=dashed];
    pts380 [label="#65",color=red,style=dashed,shape=box];
    380 -> pts380 [color=red,style=dashed];
    pts384 [label="#65",color=red,style=dashed,shape=box];
    384 -> pts384 [color=red,style=dashed];
    pts385 [label="#67",color=red,style=dashed,shape=box];
    385 -> pts385 [color=red,style=dashed];
    pts393 [label="#67",color=red,style=dashed,shape=box];
    393 -> pts393 [color=red,style=dashed];
    pts394 [label="#67",color=red,style=dashed,shape=box];
    394 -> pts394 [color=red,style=dashed];
    pts396 [label="#67",color=red,style=dashed,shape=box];
    396 -> pts396 [color=red,style=dashed];
    pts398 [label="#67",color=red,style=dashed,shape=box];
    398 -> pts398 [color=red,style=dashed];
    pts399 [label="#67",color=red,style=dashed,shape=box];
    399 -> pts399 [color=red,style=dashed];
    pts408 [label="#69",color=red,style=dashed,shape=box];
    408 -> pts408 [color=red,style=dashed];
    pts410 [label="#71",color=red,style=dashed,shape=box];
    410 -> pts410 [color=red,style=dashed];
    pts413 [label="#69",color=red,style=dashed,shape=box];
    413 -> pts413 [color=red,style=dashed];
    pts414 [label="#71",color=red,style=dashed,shape=box];
    414 -> pts414 [color=red,style=dashed];
    pts425 [label="#17",color=red,style=dashed,shape=box];
    425 -> pts425 [color=red,style=dashed];
    pts427 [label="#19",color=red,style=dashed,shape=box];
    427 -> pts427 [color=red,style=dashed];
    pts431 [label="#9",color=red,style=dashed,shape=box];
    431 -> pts431 [color=red,style=dashed];
    pts435 [label="#69",color=red,style=dashed,shape=box];
    435 -> pts435 [color=red,style=dashed];
    pts439 [label="#69",color=red,style=dashed,shape=box];
    439 -> pts439 [color=red,style=dashed];
    pts440 [label="#71",color=red,style=dashed,shape=box];
    440 -> pts440 [color=red,style=dashed];
    pts448 [label="#71",color=red,style=dashed,shape=box];
    448 -> pts448 [color=red,style=dashed];
    pts449 [label="#71",color=red,style=dashed,shape=box];
    449 -> pts449 [color=red,style=dashed];
    pts451 [label="#71",color=red,style=dashed,shape=box];
    451 -> pts451 [color=red,style=dashed];
    pts453 [label="#71",color=red,style=dashed,shape=box];
    453 -> pts453 [color=red,style=dashed];
    pts454 [label="#71",color=red,style=dashed,shape=box];
    454 -> pts454 [color=red,style=dashed];
    pts466 [label="#1",color=red,style=dashed,shape=box];
    466 -> pts466 [color=red,style=dashed];
    pts468 [label="#1",color=red,style=dashed,shape=box];
    468 -> pts468 [color=red,style=dashed];
    pts469 [label="#73",color=red,style=dashed,shape=box];
    469 -> pts469 [color=red,style=dashed];
    pts470 [label="#75",color=red,style=dashed,shape=box];
    470 -> pts470 [color=red,style=dashed];
    pts482 [label="#73",color=red,style=dashed,shape=box];
    482 -> pts482 [color=red,style=dashed];
    pts484 [label="#75",color=red,style=dashed,shape=box];
    484 -> pts484 [color=red,style=dashed];
    pts485 [label="#75",color=red,style=dashed,shape=box];
    485 -> pts485 [color=red,style=dashed];
    pts486 [label="#73",color=red,style=dashed,shape=box];
    486 -> pts486 [color=red,style=dashed];
    pts487 [label="#73",color=red,style=dashed,shape=box];
    487 -> pts487 [color=red,style=dashed];
    pts488 [label="#75",color=red,style=dashed,shape=box];
    488 -> pts488 [color=red,style=dashed];
    pts495 [label="#73",color=red,style=dashed,shape=box];
    495 -> pts495 [color=red,style=dashed];
    pts496 [label="#75",color=red,style=dashed,shape=box];
    496 -> pts496 [color=red,style=dashed];
    pts499 [label="#83",color=red,style=dashed,shape=box];
    499 -> pts499 [color=red,style=dashed];
    pts500 [label="#79",color=red,style=dashed,shape=box];
    500 -> pts500 [color=red,style=dashed];
    pts507 [label="#85",color=red,style=dashed,shape=box];
    507 -> pts507 [color=red,style=dashed];
    pts508 [label="#81",color=red,style=dashed,shape=box];
    508 -> pts508 [color=red,style=dashed];
}
%1 -> { 
	Addr: @tqmf
		RAM: tqmf
			Adding Local RAM: tqmf to Fct: @encode
}
%3 -> { 
	Addr: @tqmf
		RAM: tqmf
			Adding Local RAM: tqmf to Fct: @encode
}
%11 -> { 
	Addr: @tqmf
		RAM: tqmf
			Adding Local RAM: tqmf to Fct: @encode
}
%12 -> { 
	Addr: @h
		RAM: h
			Adding Local RAM: h to Fct: @encode
}
%15 -> { 
	Addr: @tqmf
		RAM: tqmf
			Adding Local RAM: tqmf to Fct: @encode
}
%16 -> { 
	Addr: @h
		RAM: h
			Adding Local RAM: h to Fct: @encode
}
%21 -> { 
	Addr: @tqmf
		RAM: tqmf
			Adding Local RAM: tqmf to Fct: @encode
}
%22 -> { 
	Addr: @tqmf
		RAM: tqmf
			Adding Local RAM: tqmf to Fct: @encode
}
%28 -> { 
	Addr: @tqmf
		RAM: tqmf
			Adding Local RAM: tqmf to Fct: @encode
}
<badref> -> { 
	Addr: @tqmf
		RAM: tqmf
			Adding Local RAM: tqmf to Fct: @encode
}
<badref> -> { 
	Addr: @tqmf
		RAM: tqmf
			Adding Local RAM: tqmf to Fct: @encode
}
<badref> -> { 
	Addr: @tqmf
		RAM: tqmf
			Adding Local RAM: tqmf to Fct: @encode
}
%33 -> { 
	Addr: @delay_bpl
		RAM: delay_bpl
			Adding Local RAM: delay_bpl to Fct: @encode
}
%34 -> { 
	Addr: @delay_dltx
		RAM: delay_dltx
			Adding Local RAM: delay_dltx to Fct: @encode
}
%38 -> { 
	Addr: @delay_bpl
		RAM: delay_bpl
			Adding Local RAM: delay_bpl to Fct: @encode
}
%39 -> { 
	Addr: @delay_dltx
		RAM: delay_dltx
			Adding Local RAM: delay_dltx to Fct: @encode
}
%49 -> { 
	Addr: @rlt1
		RAM: rlt1
			Adding Local RAM: rlt1 to Fct: @encode
}
%50 -> { 
	Addr: @al1
		RAM: al1
			Adding Local RAM: al1 to Fct: @encode
}
%51 -> { 
	Addr: @rlt2
		RAM: rlt2
			Adding Local RAM: rlt2 to Fct: @encode
}
%52 -> { 
	Addr: @al2
		RAM: al2
			Adding Local RAM: al2 to Fct: @encode
}
%61 -> { 
	Addr: @detl
		RAM: detl
			Adding Local RAM: detl to Fct: @encode
}
%68 -> { 
	Addr: @decis_levl
		RAM: decis_levl
			Adding Local RAM: decis_levl to Fct: @encode
}
%74 -> { 
	Addr: @quant26bt_pos
		RAM: quant26bt_pos
			Variable points to multiple RAMs. Making global RAM: quant26bt_pos
	Addr: @quant26bt_neg
		RAM: quant26bt_neg
			Variable points to multiple RAMs. Making global RAM: quant26bt_neg
}
<badref> -> { 
	Addr: @il
		RAM: il
			Adding Local RAM: il to Fct: @encode
}
%77 -> { 
	Addr: @qq4_code4_table
		RAM: qq4_code4_table
			Adding Local RAM: qq4_code4_table to Fct: @encode
}
%80 -> { 
	Addr: @nbl
		RAM: nbl
			Adding Local RAM: nbl to Fct: @encode
}
%84 -> { 
	Addr: @wl_code_table
		RAM: wl_code_table
			Adding Local RAM: wl_code_table to Fct: @encode
}
<badref> -> { 
	Addr: @nbl
		RAM: nbl
			Adding Local RAM: nbl to Fct: @encode
}
%93 -> { 
	Addr: @ilb_table
		RAM: ilb_table
			Adding Local RAM: ilb_table to Fct: @encode
}
<badref> -> { 
	Addr: @detl
		RAM: detl
			Adding Local RAM: detl to Fct: @encode
}
%101 -> { 
	Addr: @delay_bpl
		RAM: delay_bpl
			Adding Local RAM: delay_bpl to Fct: @encode
}
<badref> -> { 
	Addr: @delay_bpl
		RAM: delay_bpl
			Adding Local RAM: delay_bpl to Fct: @encode
}
%107 -> { 
	Addr: @delay_dltx
		RAM: delay_dltx
			Adding Local RAM: delay_dltx to Fct: @encode
}
%112 -> { 
	Addr: @delay_bpl
		RAM: delay_bpl
			Adding Local RAM: delay_bpl to Fct: @encode
}
<badref> -> { 
	Addr: @delay_bpl
		RAM: delay_bpl
			Adding Local RAM: delay_bpl to Fct: @encode
}
%117 -> { 
	Addr: @delay_dltx
		RAM: delay_dltx
			Adding Local RAM: delay_dltx to Fct: @encode
}
<badref> -> { 
	Addr: @delay_dltx
		RAM: delay_dltx
			Adding Local RAM: delay_dltx to Fct: @encode
}
%118 -> { 
	Addr: @delay_dltx
		RAM: delay_dltx
			Adding Local RAM: delay_dltx to Fct: @encode
}
<badref> -> { 
	Addr: @delay_dltx
		RAM: delay_dltx
			Adding Local RAM: delay_dltx to Fct: @encode
}
%119 -> { 
	Addr: @delay_dltx
		RAM: delay_dltx
			Adding Local RAM: delay_dltx to Fct: @encode
}
<badref> -> { 
	Addr: @delay_dltx
		RAM: delay_dltx
			Adding Local RAM: delay_dltx to Fct: @encode
}
<badref> -> { 
	Addr: @delay_dltx
		RAM: delay_dltx
			Adding Local RAM: delay_dltx to Fct: @encode
}
<badref> -> { 
	Addr: @delay_dltx
		RAM: delay_dltx
			Adding Local RAM: delay_dltx to Fct: @encode
}
%120 -> { 
	Addr: @plt1
		RAM: plt1
			Adding Local RAM: plt1 to Fct: @encode
}
%121 -> { 
	Addr: @plt2
		RAM: plt2
			Adding Local RAM: plt2 to Fct: @encode
}
<badref> -> { 
	Addr: @al2
		RAM: al2
			Adding Local RAM: al2 to Fct: @encode
}
<badref> -> { 
	Addr: @al1
		RAM: al1
			Adding Local RAM: al1 to Fct: @encode
}
<badref> -> { 
	Addr: @rlt2
		RAM: rlt2
			Adding Local RAM: rlt2 to Fct: @encode
}
<badref> -> { 
	Addr: @rlt1
		RAM: rlt1
			Adding Local RAM: rlt1 to Fct: @encode
}
<badref> -> { 
	Addr: @plt2
		RAM: plt2
			Adding Local RAM: plt2 to Fct: @encode
}
<badref> -> { 
	Addr: @plt1
		RAM: plt1
			Adding Local RAM: plt1 to Fct: @encode
}
%147 -> { 
	Addr: @delay_bph
		RAM: delay_bph
			Adding Local RAM: delay_bph to Fct: @encode
}
%148 -> { 
	Addr: @delay_dhx
		RAM: delay_dhx
			Adding Local RAM: delay_dhx to Fct: @encode
}
%152 -> { 
	Addr: @delay_bph
		RAM: delay_bph
			Adding Local RAM: delay_bph to Fct: @encode
}
%153 -> { 
	Addr: @delay_dhx
		RAM: delay_dhx
			Adding Local RAM: delay_dhx to Fct: @encode
}
%157 -> { 
	Addr: @rh1
		RAM: rh1
			Adding Local RAM: rh1 to Fct: @encode
}
%158 -> { 
	Addr: @ah1
		RAM: ah1
			Adding Local RAM: ah1 to Fct: @encode
}
%159 -> { 
	Addr: @rh2
		RAM: rh2
			Adding Local RAM: rh2 to Fct: @encode
}
%160 -> { 
	Addr: @ah2
		RAM: ah2
			Adding Local RAM: ah2 to Fct: @encode
}
%170 -> { 
	Addr: @deth
		RAM: deth
			Adding Local RAM: deth to Fct: @encode
}
%178 -> { 
	Addr: @qq2_code2_table
		RAM: qq2_code2_table
			Adding Local RAM: qq2_code2_table to Fct: @encode
}
%181 -> { 
	Addr: @nbh
		RAM: nbh
			Adding Local RAM: nbh to Fct: @encode
}
%185 -> { 
	Addr: @wh_code_table
		RAM: wh_code_table
			Adding Local RAM: wh_code_table to Fct: @encode
}
<badref> -> { 
	Addr: @nbh
		RAM: nbh
			Adding Local RAM: nbh to Fct: @encode
}
%194 -> { 
	Addr: @ilb_table
		RAM: ilb_table
			Adding Local RAM: ilb_table to Fct: @encode
}
<badref> -> { 
	Addr: @deth
		RAM: deth
			Adding Local RAM: deth to Fct: @encode
}
%202 -> { 
	Addr: @delay_bph
		RAM: delay_bph
			Adding Local RAM: delay_bph to Fct: @encode
}
<badref> -> { 
	Addr: @delay_bph
		RAM: delay_bph
			Adding Local RAM: delay_bph to Fct: @encode
}
%208 -> { 
	Addr: @delay_dhx
		RAM: delay_dhx
			Adding Local RAM: delay_dhx to Fct: @encode
}
%213 -> { 
	Addr: @delay_bph
		RAM: delay_bph
			Adding Local RAM: delay_bph to Fct: @encode
}
<badref> -> { 
	Addr: @delay_bph
		RAM: delay_bph
			Adding Local RAM: delay_bph to Fct: @encode
}
%218 -> { 
	Addr: @delay_dhx
		RAM: delay_dhx
			Adding Local RAM: delay_dhx to Fct: @encode
}
<badref> -> { 
	Addr: @delay_dhx
		RAM: delay_dhx
			Adding Local RAM: delay_dhx to Fct: @encode
}
%219 -> { 
	Addr: @delay_dhx
		RAM: delay_dhx
			Adding Local RAM: delay_dhx to Fct: @encode
}
<badref> -> { 
	Addr: @delay_dhx
		RAM: delay_dhx
			Adding Local RAM: delay_dhx to Fct: @encode
}
%220 -> { 
	Addr: @delay_dhx
		RAM: delay_dhx
			Adding Local RAM: delay_dhx to Fct: @encode
}
<badref> -> { 
	Addr: @delay_dhx
		RAM: delay_dhx
			Adding Local RAM: delay_dhx to Fct: @encode
}
<badref> -> { 
	Addr: @delay_dhx
		RAM: delay_dhx
			Adding Local RAM: delay_dhx to Fct: @encode
}
<badref> -> { 
	Addr: @delay_dhx
		RAM: delay_dhx
			Adding Local RAM: delay_dhx to Fct: @encode
}
%221 -> { 
	Addr: @ph1
		RAM: ph1
			Adding Local RAM: ph1 to Fct: @encode
}
%222 -> { 
	Addr: @ph2
		RAM: ph2
			Adding Local RAM: ph2 to Fct: @encode
}
<badref> -> { 
	Addr: @ah2
		RAM: ah2
			Adding Local RAM: ah2 to Fct: @encode
}
<badref> -> { 
	Addr: @ah1
		RAM: ah1
			Adding Local RAM: ah1 to Fct: @encode
}
<badref> -> { 
	Addr: @rh2
		RAM: rh2
			Adding Local RAM: rh2 to Fct: @encode
}
<badref> -> { 
	Addr: @rh1
		RAM: rh1
			Adding Local RAM: rh1 to Fct: @encode
}
<badref> -> { 
	Addr: @ph2
		RAM: ph2
			Adding Local RAM: ph2 to Fct: @encode
}
<badref> -> { 
	Addr: @ph1
		RAM: ph1
			Adding Local RAM: ph1 to Fct: @encode
}
<badref> -> { 
	Addr: @detl
		RAM: detl
			Adding Local RAM: detl to Fct: @main
}
<badref> -> { 
	Addr: @deth
		RAM: deth
			Adding Local RAM: deth to Fct: @main
}
<badref> -> { 
	Addr: @rlt2
		RAM: rlt2
			Adding Local RAM: rlt2 to Fct: @main
}
<badref> -> { 
	Addr: @rlt1
		RAM: rlt1
			Adding Local RAM: rlt1 to Fct: @main
}
<badref> -> { 
	Addr: @plt2
		RAM: plt2
			Adding Local RAM: plt2 to Fct: @main
}
<badref> -> { 
	Addr: @plt1
		RAM: plt1
			Adding Local RAM: plt1 to Fct: @main
}
<badref> -> { 
	Addr: @al2
		RAM: al2
			Adding Local RAM: al2 to Fct: @main
}
<badref> -> { 
	Addr: @al1
		RAM: al1
			Adding Local RAM: al1 to Fct: @main
}
<badref> -> { 
	Addr: @nbl
		RAM: nbl
			Adding Local RAM: nbl to Fct: @main
}
<badref> -> { 
	Addr: @rh2
		RAM: rh2
			Adding Local RAM: rh2 to Fct: @main
}
<badref> -> { 
	Addr: @rh1
		RAM: rh1
			Adding Local RAM: rh1 to Fct: @main
}
<badref> -> { 
	Addr: @ph2
		RAM: ph2
			Adding Local RAM: ph2 to Fct: @main
}
<badref> -> { 
	Addr: @ph1
		RAM: ph1
			Adding Local RAM: ph1 to Fct: @main
}
<badref> -> { 
	Addr: @ah2
		RAM: ah2
			Adding Local RAM: ah2 to Fct: @main
}
<badref> -> { 
	Addr: @ah1
		RAM: ah1
			Adding Local RAM: ah1 to Fct: @main
}
<badref> -> { 
	Addr: @nbh
		RAM: nbh
			Adding Local RAM: nbh to Fct: @main
}
<badref> -> { 
	Addr: @delay_dltx
		RAM: delay_dltx
			Adding Local RAM: delay_dltx to Fct: @main
}
<badref> -> { 
	Addr: @delay_dhx
		RAM: delay_dhx
			Adding Local RAM: delay_dhx to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_dltx
		RAM: dec_del_dltx
			Adding Local RAM: dec_del_dltx to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_dhx
		RAM: dec_del_dhx
			Adding Local RAM: dec_del_dhx to Fct: @main
}
<badref> -> { 
	Addr: @delay_bpl
		RAM: delay_bpl
			Adding Local RAM: delay_bpl to Fct: @main
}
<badref> -> { 
	Addr: @delay_bph
		RAM: delay_bph
			Adding Local RAM: delay_bph to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_bpl
		RAM: dec_del_bpl
			Adding Local RAM: dec_del_bpl to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_bph
		RAM: dec_del_bph
			Adding Local RAM: dec_del_bph to Fct: @main
}
<badref> -> { 
	Addr: @tqmf
		RAM: tqmf
			Adding Local RAM: tqmf to Fct: @main
}
<badref> -> { 
	Addr: @accumc
		RAM: accumc
			Adding Local RAM: accumc to Fct: @main
}
<badref> -> { 
	Addr: @accumd
		RAM: accumd
			Adding Local RAM: accumd to Fct: @main
}
%31 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
%32 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
<badref> -> { 
	Addr: @compressed
		RAM: compressed
			Adding Local RAM: compressed to Fct: @main
}
%38 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
%39 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
<badref> -> { 
	Addr: @compressed
		RAM: compressed
			Adding Local RAM: compressed to Fct: @main
}
%45 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
%46 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
<badref> -> { 
	Addr: @compressed
		RAM: compressed
			Adding Local RAM: compressed to Fct: @main
}
%52 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
%53 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
<badref> -> { 
	Addr: @compressed
		RAM: compressed
			Adding Local RAM: compressed to Fct: @main
}
%59 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
%60 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
<badref> -> { 
	Addr: @compressed
		RAM: compressed
			Adding Local RAM: compressed to Fct: @main
}
%66 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
%67 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
<badref> -> { 
	Addr: @compressed
		RAM: compressed
			Adding Local RAM: compressed to Fct: @main
}
%73 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
%74 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
<badref> -> { 
	Addr: @compressed
		RAM: compressed
			Adding Local RAM: compressed to Fct: @main
}
%78 -> { 
	Addr: @il
		RAM: il
			Adding Local RAM: il to Fct: @main
}
%83 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
%84 -> { 
	Addr: @test_data
		RAM: test_data
			Adding Local RAM: test_data to Fct: @main
}
<badref> -> { 
	Addr: @compressed
		RAM: compressed
			Adding Local RAM: compressed to Fct: @main
}
%92 -> { 
	Addr: @compressed
		RAM: compressed
			Adding Local RAM: compressed to Fct: @main
}
%93 -> { 
	Addr: @dec_del_bpl
		RAM: dec_del_bpl
			Adding Local RAM: dec_del_bpl to Fct: @main
}
%94 -> { 
	Addr: @dec_del_dltx
		RAM: dec_del_dltx
			Adding Local RAM: dec_del_dltx to Fct: @main
}
%98 -> { 
	Addr: @dec_del_bpl
		RAM: dec_del_bpl
			Adding Local RAM: dec_del_bpl to Fct: @main
}
%99 -> { 
	Addr: @dec_del_dltx
		RAM: dec_del_dltx
			Adding Local RAM: dec_del_dltx to Fct: @main
}
%114 -> { 
	Addr: @qq4_code4_table
		RAM: qq4_code4_table
			Adding Local RAM: qq4_code4_table to Fct: @main
}
%117 -> { 
	Addr: @qq6_code6_table
		RAM: qq6_code6_table
			Adding Local RAM: qq6_code6_table to Fct: @main
}
%124 -> { 
	Addr: @wl_code_table
		RAM: wl_code_table
			Adding Local RAM: wl_code_table to Fct: @main
}
%133 -> { 
	Addr: @ilb_table
		RAM: ilb_table
			Adding Local RAM: ilb_table to Fct: @main
}
%141 -> { 
	Addr: @dec_del_bpl
		RAM: dec_del_bpl
			Adding Local RAM: dec_del_bpl to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_bpl
		RAM: dec_del_bpl
			Adding Local RAM: dec_del_bpl to Fct: @main
}
%147 -> { 
	Addr: @dec_del_dltx
		RAM: dec_del_dltx
			Adding Local RAM: dec_del_dltx to Fct: @main
}
%152 -> { 
	Addr: @dec_del_bpl
		RAM: dec_del_bpl
			Adding Local RAM: dec_del_bpl to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_bpl
		RAM: dec_del_bpl
			Adding Local RAM: dec_del_bpl to Fct: @main
}
%157 -> { 
	Addr: @dec_del_dltx
		RAM: dec_del_dltx
			Adding Local RAM: dec_del_dltx to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_dltx
		RAM: dec_del_dltx
			Adding Local RAM: dec_del_dltx to Fct: @main
}
%158 -> { 
	Addr: @dec_del_dltx
		RAM: dec_del_dltx
			Adding Local RAM: dec_del_dltx to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_dltx
		RAM: dec_del_dltx
			Adding Local RAM: dec_del_dltx to Fct: @main
}
%159 -> { 
	Addr: @dec_del_dltx
		RAM: dec_del_dltx
			Adding Local RAM: dec_del_dltx to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_dltx
		RAM: dec_del_dltx
			Adding Local RAM: dec_del_dltx to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_dltx
		RAM: dec_del_dltx
			Adding Local RAM: dec_del_dltx to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_dltx
		RAM: dec_del_dltx
			Adding Local RAM: dec_del_dltx to Fct: @main
}
%182 -> { 
	Addr: @dec_del_bph
		RAM: dec_del_bph
			Adding Local RAM: dec_del_bph to Fct: @main
}
%183 -> { 
	Addr: @dec_del_dhx
		RAM: dec_del_dhx
			Adding Local RAM: dec_del_dhx to Fct: @main
}
%187 -> { 
	Addr: @dec_del_bph
		RAM: dec_del_bph
			Adding Local RAM: dec_del_bph to Fct: @main
}
%188 -> { 
	Addr: @dec_del_dhx
		RAM: dec_del_dhx
			Adding Local RAM: dec_del_dhx to Fct: @main
}
%203 -> { 
	Addr: @qq2_code2_table
		RAM: qq2_code2_table
			Adding Local RAM: qq2_code2_table to Fct: @main
}
%209 -> { 
	Addr: @wh_code_table
		RAM: wh_code_table
			Adding Local RAM: wh_code_table to Fct: @main
}
%218 -> { 
	Addr: @ilb_table
		RAM: ilb_table
			Adding Local RAM: ilb_table to Fct: @main
}
%226 -> { 
	Addr: @dec_del_bph
		RAM: dec_del_bph
			Adding Local RAM: dec_del_bph to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_bph
		RAM: dec_del_bph
			Adding Local RAM: dec_del_bph to Fct: @main
}
%232 -> { 
	Addr: @dec_del_dhx
		RAM: dec_del_dhx
			Adding Local RAM: dec_del_dhx to Fct: @main
}
%237 -> { 
	Addr: @dec_del_bph
		RAM: dec_del_bph
			Adding Local RAM: dec_del_bph to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_bph
		RAM: dec_del_bph
			Adding Local RAM: dec_del_bph to Fct: @main
}
%242 -> { 
	Addr: @dec_del_dhx
		RAM: dec_del_dhx
			Adding Local RAM: dec_del_dhx to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_dhx
		RAM: dec_del_dhx
			Adding Local RAM: dec_del_dhx to Fct: @main
}
%243 -> { 
	Addr: @dec_del_dhx
		RAM: dec_del_dhx
			Adding Local RAM: dec_del_dhx to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_dhx
		RAM: dec_del_dhx
			Adding Local RAM: dec_del_dhx to Fct: @main
}
%244 -> { 
	Addr: @dec_del_dhx
		RAM: dec_del_dhx
			Adding Local RAM: dec_del_dhx to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_dhx
		RAM: dec_del_dhx
			Adding Local RAM: dec_del_dhx to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_dhx
		RAM: dec_del_dhx
			Adding Local RAM: dec_del_dhx to Fct: @main
}
<badref> -> { 
	Addr: @dec_del_dhx
		RAM: dec_del_dhx
			Adding Local RAM: dec_del_dhx to Fct: @main
}
%278 -> { 
	Addr: @accumc
		RAM: accumc
			Adding Local RAM: accumc to Fct: @main
}
%279 -> { 
	Addr: @h
		RAM: h
			Adding Local RAM: h to Fct: @main
}
%282 -> { 
	Addr: @accumd
		RAM: accumd
			Adding Local RAM: accumd to Fct: @main
}
%283 -> { 
	Addr: @h
		RAM: h
			Adding Local RAM: h to Fct: @main
}
%289 -> { 
	Addr: @accumc
		RAM: accumc
			Adding Local RAM: accumc to Fct: @main
}
%290 -> { 
	Addr: @accumd
		RAM: accumd
			Adding Local RAM: accumd to Fct: @main
}
%296 -> { 
	Addr: @accumc
		RAM: accumc
			Adding Local RAM: accumc to Fct: @main
}
<badref> -> { 
	Addr: @accumc
		RAM: accumc
			Adding Local RAM: accumc to Fct: @main
}
%297 -> { 
	Addr: @accumd
		RAM: accumd
			Adding Local RAM: accumd to Fct: @main
}
<badref> -> { 
	Addr: @accumd
		RAM: accumd
			Adding Local RAM: accumd to Fct: @main
}
<badref> -> { 
	Addr: @accumc
		RAM: accumc
			Adding Local RAM: accumc to Fct: @main
}
<badref> -> { 
	Addr: @accumd
		RAM: accumd
			Adding Local RAM: accumd to Fct: @main
}
<badref> -> { 
	Addr: @result
		RAM: result
			Adding Local RAM: result to Fct: @main
}
<badref> -> { 
	Addr: @result
		RAM: result
			Adding Local RAM: result to Fct: @main
}
%308 -> { 
	Addr: @compressed
		RAM: compressed
			Adding Local RAM: compressed to Fct: @main
}
%309 -> { 
	Addr: @test_compressed
		RAM: test_compressed
			Adding Local RAM: test_compressed to Fct: @main
}
%315 -> { 
	Addr: @result
		RAM: result
			Adding Local RAM: result to Fct: @main
}
%316 -> { 
	Addr: @test_result
		RAM: test_result
			Adding Local RAM: test_result to Fct: @main
}
Final memory allocation:
Global Memories:
	ROM: h
	ROM: qq4_code4_table
	ROM: wl_code_table
	ROM: ilb_table
	ROM: quant26bt_pos
	ROM: quant26bt_neg
	ROM: qq2_code2_table
	ROM: wh_code_table
	RAM: tqmf
	RAM: delay_bpl
	RAM: delay_dltx
	RAM: rlt1
	RAM: al1
	RAM: rlt2
	RAM: al2
	RAM: detl
	RAM: il
	RAM: nbl
	RAM: plt1
	RAM: plt2
	RAM: delay_bph
	RAM: delay_dhx
	RAM: rh1
	RAM: ah1
	RAM: rh2
	RAM: ah2
	RAM: deth
	RAM: nbh
	RAM: ph1
	RAM: ph2
Local Memories:
	ROM: qq6_code6_table Function: main
	ROM: decis_levl Function: encode
	RAM: dec_del_bpl Function: main
	RAM: dec_del_dltx Function: main
	RAM: dec_del_bph Function: main
	RAM: dec_del_dhx Function: main
	RAM: accumc Function: main
	RAM: accumd Function: main
	ROM: test_data Function: main
	ROM: test_compressed Function: main
	ROM: test_result Function: main
	RAM: compressed Function: main
	RAM: result Function: main
Creating new physical ram: rom_32
Creating new physical ram: ram_32
Running static memory allocation for grouped physical ram: rom_32
Placing RAM: ilb_table at: 0
Holes after allocating ram: ilb_table size: 128 alignment: 128 offset: 0
Hole: 128 - 8388607 size = 8388480
Placing RAM: quant26bt_pos at: 128
Holes after allocating ram: quant26bt_pos size: 124 alignment: 128 offset: 128
Hole: 252 - 8388607 size = 8388356
Placing RAM: quant26bt_neg at: 256
Holes after allocating ram: quant26bt_neg size: 124 alignment: 128 offset: 256
Hole: 252 - 255 size = 4
Hole: 380 - 8388607 size = 8388228
Placing RAM: h at: 384
Holes after allocating ram: h size: 96 alignment: 128 offset: 384
Hole: 252 - 255 size = 4
Hole: 380 - 383 size = 4
Hole: 480 - 8388607 size = 8388128
Placing RAM: qq4_code4_table at: 512
Holes after allocating ram: qq4_code4_table size: 64 alignment: 64 offset: 512
Hole: 252 - 255 size = 4
Hole: 380 - 383 size = 4
Hole: 480 - 511 size = 32
Hole: 576 - 8388607 size = 8388032
Placing RAM: wl_code_table at: 576
Holes after allocating ram: wl_code_table size: 64 alignment: 64 offset: 576
Hole: 252 - 255 size = 4
Hole: 380 - 383 size = 4
Hole: 480 - 511 size = 32
Hole: 640 - 8388607 size = 8387968
Placing RAM: qq2_code2_table at: 480
Holes after allocating ram: qq2_code2_table size: 16 alignment: 16 offset: 480
Hole: 252 - 255 size = 4
Hole: 380 - 383 size = 4
Hole: 496 - 511 size = 16
Hole: 640 - 8388607 size = 8387968
Placing RAM: wh_code_table at: 496
Holes after allocating ram: wh_code_table size: 16 alignment: 16 offset: 496
Hole: 252 - 255 size = 4
Hole: 380 - 383 size = 4
Hole: 640 - 8388607 size = 8387968
Final memory allocation for physical ram: rom_32
ram: ilb_table                               	size (bytes): 128   (hex:0x80   )	alignment (bytes): 128   (hex:0x80   ) offset (bytes): 0     (hex:0x0    ) unused (bytes): 0    
ram: quant26bt_pos                           	size (bytes): 124   (hex:0x7c   )	alignment (bytes): 128   (hex:0x80   ) offset (bytes): 128   (hex:0x80   ) unused (bytes): 0    
ram: quant26bt_neg                           	size (bytes): 124   (hex:0x7c   )	alignment (bytes): 128   (hex:0x80   ) offset (bytes): 256   (hex:0x100  ) unused (bytes): 4    
ram: h                                       	size (bytes): 96    (hex:0x60   )	alignment (bytes): 128   (hex:0x80   ) offset (bytes): 384   (hex:0x180  ) unused (bytes): 4    
ram: qq2_code2_table                         	size (bytes): 16    (hex:0x10   )	alignment (bytes): 16    (hex:0x10   ) offset (bytes): 480   (hex:0x1e0  ) unused (bytes): 0    
ram: wh_code_table                           	size (bytes): 16    (hex:0x10   )	alignment (bytes): 16    (hex:0x10   ) offset (bytes): 496   (hex:0x1f0  ) unused (bytes): 0    
ram: qq4_code4_table                         	size (bytes): 64    (hex:0x40   )	alignment (bytes): 64    (hex:0x40   ) offset (bytes): 512   (hex:0x200  ) unused (bytes): 0    
ram: wl_code_table                           	size (bytes): 64    (hex:0x40   )	alignment (bytes): 64    (hex:0x40   ) offset (bytes): 576   (hex:0x240  ) unused (bytes): 0    
Total Unused (B): 8
Total Memory (B): 640
Fragmentation Ratio (Total Unused / Total Memory): 1.250000e-02 (1%)
Running static memory allocation for grouped physical ram: ram_32
Placing RAM: tqmf at: 0
Holes after allocating ram: tqmf size: 96 alignment: 128 offset: 0
Hole: 96 - 8388607 size = 8388512
Placing RAM: delay_bpl at: 96
Holes after allocating ram: delay_bpl size: 24 alignment: 32 offset: 96
Hole: 120 - 8388607 size = 8388488
Placing RAM: delay_dltx at: 128
Holes after allocating ram: delay_dltx size: 24 alignment: 32 offset: 128
Hole: 120 - 127 size = 8
Hole: 152 - 8388607 size = 8388456
Placing RAM: delay_dhx at: 160
Holes after allocating ram: delay_dhx size: 24 alignment: 32 offset: 160
Hole: 120 - 127 size = 8
Hole: 152 - 159 size = 8
Hole: 184 - 8388607 size = 8388424
Placing RAM: delay_bph at: 192
Holes after allocating ram: delay_bph size: 24 alignment: 32 offset: 192
Hole: 120 - 127 size = 8
Hole: 152 - 159 size = 8
Hole: 184 - 191 size = 8
Hole: 216 - 8388607 size = 8388392
Placing RAM: ph2 at: 120
Holes after allocating ram: ph2 size: 4 alignment: 4 offset: 120
Hole: 124 - 127 size = 4
Hole: 152 - 159 size = 8
Hole: 184 - 191 size = 8
Hole: 216 - 8388607 size = 8388392
Placing RAM: ph1 at: 124
Holes after allocating ram: ph1 size: 4 alignment: 4 offset: 124
Hole: 152 - 159 size = 8
Hole: 184 - 191 size = 8
Hole: 216 - 8388607 size = 8388392
Placing RAM: nbh at: 152
Holes after allocating ram: nbh size: 4 alignment: 4 offset: 152
Hole: 156 - 159 size = 4
Hole: 184 - 191 size = 8
Hole: 216 - 8388607 size = 8388392
Placing RAM: deth at: 156
Holes after allocating ram: deth size: 4 alignment: 4 offset: 156
Hole: 184 - 191 size = 8
Hole: 216 - 8388607 size = 8388392
Placing RAM: ah2 at: 184
Holes after allocating ram: ah2 size: 4 alignment: 4 offset: 184
Hole: 188 - 191 size = 4
Hole: 216 - 8388607 size = 8388392
Placing RAM: rh2 at: 188
Holes after allocating ram: rh2 size: 4 alignment: 4 offset: 188
Hole: 216 - 8388607 size = 8388392
Placing RAM: ah1 at: 216
Holes after allocating ram: ah1 size: 4 alignment: 4 offset: 216
Hole: 220 - 8388607 size = 8388388
Placing RAM: rh1 at: 220
Holes after allocating ram: rh1 size: 4 alignment: 4 offset: 220
Hole: 224 - 8388607 size = 8388384
Placing RAM: plt2 at: 224
Holes after allocating ram: plt2 size: 4 alignment: 4 offset: 224
Hole: 228 - 8388607 size = 8388380
Placing RAM: plt1 at: 228
Holes after allocating ram: plt1 size: 4 alignment: 4 offset: 228
Hole: 232 - 8388607 size = 8388376
Placing RAM: nbl at: 232
Holes after allocating ram: nbl size: 4 alignment: 4 offset: 232
Hole: 236 - 8388607 size = 8388372
Placing RAM: il at: 236
Holes after allocating ram: il size: 4 alignment: 4 offset: 236
Hole: 240 - 8388607 size = 8388368
Placing RAM: detl at: 240
Holes after allocating ram: detl size: 4 alignment: 4 offset: 240
Hole: 244 - 8388607 size = 8388364
Placing RAM: al2 at: 244
Holes after allocating ram: al2 size: 4 alignment: 4 offset: 244
Hole: 248 - 8388607 size = 8388360
Placing RAM: rlt2 at: 248
Holes after allocating ram: rlt2 size: 4 alignment: 4 offset: 248
Hole: 252 - 8388607 size = 8388356
Placing RAM: al1 at: 252
Holes after allocating ram: al1 size: 4 alignment: 4 offset: 252
Hole: 256 - 8388607 size = 8388352
Placing RAM: rlt1 at: 256
Holes after allocating ram: rlt1 size: 4 alignment: 4 offset: 256
Hole: 260 - 8388607 size = 8388348
Final memory allocation for physical ram: ram_32
ram: tqmf                                    	size (bytes): 96    (hex:0x60   )	alignment (bytes): 128   (hex:0x80   ) offset (bytes): 0     (hex:0x0    ) unused (bytes): 0    
ram: delay_bpl                               	size (bytes): 24    (hex:0x18   )	alignment (bytes): 32    (hex:0x20   ) offset (bytes): 96    (hex:0x60   ) unused (bytes): 0    
ram: ph2                                     	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 120   (hex:0x78   ) unused (bytes): 0    
ram: ph1                                     	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 124   (hex:0x7c   ) unused (bytes): 0    
ram: delay_dltx                              	size (bytes): 24    (hex:0x18   )	alignment (bytes): 32    (hex:0x20   ) offset (bytes): 128   (hex:0x80   ) unused (bytes): 0    
ram: nbh                                     	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 152   (hex:0x98   ) unused (bytes): 0    
ram: deth                                    	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 156   (hex:0x9c   ) unused (bytes): 0    
ram: delay_dhx                               	size (bytes): 24    (hex:0x18   )	alignment (bytes): 32    (hex:0x20   ) offset (bytes): 160   (hex:0xa0   ) unused (bytes): 0    
ram: ah2                                     	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 184   (hex:0xb8   ) unused (bytes): 0    
ram: rh2                                     	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 188   (hex:0xbc   ) unused (bytes): 0    
ram: delay_bph                               	size (bytes): 24    (hex:0x18   )	alignment (bytes): 32    (hex:0x20   ) offset (bytes): 192   (hex:0xc0   ) unused (bytes): 0    
ram: ah1                                     	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 216   (hex:0xd8   ) unused (bytes): 0    
ram: rh1                                     	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 220   (hex:0xdc   ) unused (bytes): 0    
ram: plt2                                    	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 224   (hex:0xe0   ) unused (bytes): 0    
ram: plt1                                    	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 228   (hex:0xe4   ) unused (bytes): 0    
ram: nbl                                     	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 232   (hex:0xe8   ) unused (bytes): 0    
ram: il                                      	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 236   (hex:0xec   ) unused (bytes): 0    
ram: detl                                    	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 240   (hex:0xf0   ) unused (bytes): 0    
ram: al2                                     	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 244   (hex:0xf4   ) unused (bytes): 0    
ram: rlt2                                    	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 248   (hex:0xf8   ) unused (bytes): 0    
ram: al1                                     	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 252   (hex:0xfc   ) unused (bytes): 0    
ram: rlt1                                    	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 256   (hex:0x100  ) unused (bytes): 0    
Total Unused (B): 0
Total Memory (B): 260
Fragmentation Ratio (Total Unused / Total Memory): 0.000000e+00 (0%)
