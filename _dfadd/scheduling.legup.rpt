//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 14:59:13 2017
//----------------------------------------------------------------------------//

Target Family: CycloneV
Clock period constraint: 2.000000e+01ns
Start Function: roundAndPackFloat64
state: LEGUP_0
   Transition: if (start): LEGUP_F_roundAndPackFloat64_BB__0_1 default: LEGUP_0
state: LEGUP_F_roundAndPackFloat64_BB__0_1
   %.tr = trunc i64 %zSig to i32 (endState: LEGUP_F_roundAndPackFloat64_BB__0_1)
   %1 = and i32 %.tr, 1023 (endState: LEGUP_F_roundAndPackFloat64_BB__0_1)
   %2 = and i32 %zExp, 65535 (endState: LEGUP_F_roundAndPackFloat64_BB__0_1)
   %3 = icmp ugt i32 %2, 2044 (endState: LEGUP_F_roundAndPackFloat64_BB__0_1)
   br i1 %3, label %4, label %.thread
   Transition: if (%3): LEGUP_F_roundAndPackFloat64_BB__4_2 default: LEGUP_F_roundAndPackFloat64_BB_thread_18
state: LEGUP_F_roundAndPackFloat64_BB__4_2
   %5 = icmp sgt i32 %zExp, 2045 (endState: LEGUP_F_roundAndPackFloat64_BB__4_2)
   br i1 %5, label %11, label %6
   Transition: if (%5): LEGUP_F_roundAndPackFloat64_BB__11_5 default: LEGUP_F_roundAndPackFloat64_BB__6_3
state: LEGUP_F_roundAndPackFloat64_BB__6_3
   %7 = icmp eq i32 %zExp, 2045 (endState: LEGUP_F_roundAndPackFloat64_BB__6_3)
   br i1 %7, label %8, label %17
   Transition: if (%7): LEGUP_F_roundAndPackFloat64_BB__8_4 default: LEGUP_F_roundAndPackFloat64_BB__17_9
state: LEGUP_F_roundAndPackFloat64_BB__8_4
   %9 = add i64 %zSig, 512 (endState: LEGUP_F_roundAndPackFloat64_BB__8_4)
   %10 = icmp slt i64 %9, 0 (endState: LEGUP_F_roundAndPackFloat64_BB__8_4)
   br i1 %10, label %11, label %.thread
   Transition: if (%10): LEGUP_F_roundAndPackFloat64_BB__11_5 default: LEGUP_F_roundAndPackFloat64_BB_thread_18
state: LEGUP_F_roundAndPackFloat64_BB__11_5
   %12 = load i32* @float_exception_flags, align 4, !tbaa !1 (endState: LEGUP_F_roundAndPackFloat64_BB__11_7)
   %14 = zext i32 %zSign to i64 (endState: LEGUP_F_roundAndPackFloat64_BB__11_5)
   %15 = shl i64 %14, 63 (endState: LEGUP_F_roundAndPackFloat64_BB__11_5)
   %16 = or i64 %15, 9218868437227405312 (endState: LEGUP_F_roundAndPackFloat64_BB__11_5)
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__11_6
state: LEGUP_F_roundAndPackFloat64_BB__11_6
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__11_7
state: LEGUP_F_roundAndPackFloat64_BB__11_7
   %13 = or i32 %12, 9 (endState: LEGUP_F_roundAndPackFloat64_BB__11_7)
   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1 (endState: LEGUP_F_roundAndPackFloat64_BB__11_8)
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__11_8
state: LEGUP_F_roundAndPackFloat64_BB__11_8
   br label %57
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__57_24
state: LEGUP_F_roundAndPackFloat64_BB__17_9
   %18 = icmp slt i32 %zExp, 0 (endState: LEGUP_F_roundAndPackFloat64_BB__17_9)
   br i1 %18, label %19, label %.thread
   Transition: if (%18): LEGUP_F_roundAndPackFloat64_BB__19_10 default: LEGUP_F_roundAndPackFloat64_BB_thread_18
state: LEGUP_F_roundAndPackFloat64_BB__19_10
   %20 = icmp sgt i32 %zExp, -64 (endState: LEGUP_F_roundAndPackFloat64_BB__19_10)
   br i1 %20, label %21, label %31
   Transition: if (%20): LEGUP_F_roundAndPackFloat64_BB__21_11 default: LEGUP_F_roundAndPackFloat64_BB__31_12
state: LEGUP_F_roundAndPackFloat64_BB__21_11
   %22 = sub nsw i32 0, %zExp (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %23 = zext i32 %22 to i64 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %24 = lshr i64 %zSig, %23 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %25 = and i32 %zExp, 63 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %26 = zext i32 %25 to i64 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %27 = shl i64 %zSig, %26 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %28 = icmp ne i64 %27, 0 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %29 = zext i1 %28 to i64 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %30 = or i64 %29, %24 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   br label %shift64RightJamming.exit
   Transition: default: LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13
state: LEGUP_F_roundAndPackFloat64_BB__31_12
   %32 = icmp ne i64 %zSig, 0 (endState: LEGUP_F_roundAndPackFloat64_BB__31_12)
   %33 = zext i1 %32 to i64 (endState: LEGUP_F_roundAndPackFloat64_BB__31_12)
   br label %shift64RightJamming.exit
   Transition: default: LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13
state: LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13
   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ] (endState: LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)
   %.tr3 = trunc i64 %z.0.i to i32 (endState: LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)
   %34 = and i32 %.tr3, 1023 (endState: LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)
   %35 = icmp eq i32 %34, 0 (endState: LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)
   br i1 %35, label %.thread6, label %36
   Transition: if (%35): LEGUP_F_roundAndPackFloat64_BB_thread6_23 default: LEGUP_F_roundAndPackFloat64_BB__36_14
state: LEGUP_F_roundAndPackFloat64_BB__36_14
   %37 = load i32* @float_exception_flags, align 4, !tbaa !1 (endState: LEGUP_F_roundAndPackFloat64_BB__36_16)
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__36_15
state: LEGUP_F_roundAndPackFloat64_BB__36_15
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__36_16
state: LEGUP_F_roundAndPackFloat64_BB__36_16
   %38 = or i32 %37, 4 (endState: LEGUP_F_roundAndPackFloat64_BB__36_16)
   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1 (endState: LEGUP_F_roundAndPackFloat64_BB__36_17)
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__36_17
state: LEGUP_F_roundAndPackFloat64_BB__36_17
   br label %.thread
   Transition: default: LEGUP_F_roundAndPackFloat64_BB_thread_18
state: LEGUP_F_roundAndPackFloat64_BB_thread_18
   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ] (endState: LEGUP_F_roundAndPackFloat64_BB_thread_18)
   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ] (endState: LEGUP_F_roundAndPackFloat64_BB_thread_18)
   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ] (endState: LEGUP_F_roundAndPackFloat64_BB_thread_18)
   %39 = icmp eq i32 %roundBits.0, 0 (endState: LEGUP_F_roundAndPackFloat64_BB_thread_18)
   br i1 %39, label %.thread6, label %40
   Transition: if (%39): LEGUP_F_roundAndPackFloat64_BB_thread6_23 default: LEGUP_F_roundAndPackFloat64_BB__40_19
state: LEGUP_F_roundAndPackFloat64_BB__40_19
   %41 = load i32* @float_exception_flags, align 4, !tbaa !1 (endState: LEGUP_F_roundAndPackFloat64_BB__40_21)
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__40_20
state: LEGUP_F_roundAndPackFloat64_BB__40_20
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__40_21
state: LEGUP_F_roundAndPackFloat64_BB__40_21
   %42 = or i32 %41, 1 (endState: LEGUP_F_roundAndPackFloat64_BB__40_21)
   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1 (endState: LEGUP_F_roundAndPackFloat64_BB__40_22)
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__40_22
state: LEGUP_F_roundAndPackFloat64_BB__40_22
   br label %.thread6
   Transition: default: LEGUP_F_roundAndPackFloat64_BB_thread6_23
state: LEGUP_F_roundAndPackFloat64_BB_thread6_23
   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ] (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ] (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ] (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %43 = add i64 %zSig57, 512 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %44 = lshr i64 %43, 10 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %45 = icmp eq i32 %roundBits.09, 512 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %46 = zext i1 %45 to i32 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %47 = xor i32 %46, -1 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %48 = sext i32 %47 to i64 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %49 = and i64 %44, %48 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %50 = icmp eq i64 %49, 0 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %51 = zext i32 %zSign to i64 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %52 = shl i64 %51, 63 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %53 = zext i32 %.028 to i64 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %.op = shl i64 %53, 52 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %54 = select i1 %50, i64 0, i64 %.op (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %55 = or i64 %49, %52 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   %56 = add i64 %54, %55 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_23)
   br label %57
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__57_24
state: LEGUP_F_roundAndPackFloat64_BB__57_24
   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ] (endState: LEGUP_F_roundAndPackFloat64_BB__57_24)
   ret i64 %.0
   Transition: default: LEGUP_0

Basic Block: %0 Num States: 1
Basic Block: %4 Num States: 1
Basic Block: %6 Num States: 1
Basic Block: %8 Num States: 1
Basic Block: %11 Num States: 4
Basic Block: %17 Num States: 1
Basic Block: %19 Num States: 1
Basic Block: %21 Num States: 1
Basic Block: %31 Num States: 1
Basic Block: %shift64RightJamming.exit Num States: 1
Basic Block: %36 Num States: 4
Basic Block: %.thread Num States: 1
Basic Block: %40 Num States: 4
Basic Block: %.thread6 Num States: 1
Basic Block: %57 Num States: 1
End Function: roundAndPackFloat64
--------------------------------------------------------------------------------

Target Family: CycloneV
Clock period constraint: 2.000000e+01ns
Start Function: main
state: LEGUP_0
   br label %1
   Transition: if (start): LEGUP_F_main_BB__1_1 default: LEGUP_0
state: LEGUP_F_main_BB__1_1
   %main_result.02 = phi i32 [ 0, %0 ], [ %217, %float64_add.exit ] (endState: LEGUP_F_main_BB__1_1)
   %i.01 = phi i32 [ 0, %0 ], [ %218, %float64_add.exit ] (endState: LEGUP_F_main_BB__1_1)
   %scevgep = getelementptr [46 x i64]* @z_output, i32 0, i32 %i.01 (endState: LEGUP_F_main_BB__1_1)
   %scevgep2 = getelementptr [46 x i64]* @b_input, i32 0, i32 %i.01 (endState: LEGUP_F_main_BB__1_1)
   %scevgep3 = getelementptr [46 x i64]* @a_input, i32 0, i32 %i.01 (endState: LEGUP_F_main_BB__1_1)
   %2 = load i64* %scevgep3, align 8, !tbaa !1 (endState: LEGUP_F_main_BB__1_2)
   %3 = load i64* %scevgep2, align 8, !tbaa !1 (endState: LEGUP_F_main_BB__1_2)
   Transition: default: LEGUP_F_main_BB__1_2
state: LEGUP_F_main_BB__1_2
   %4 = lshr i64 %2, 63 (endState: LEGUP_F_main_BB__1_2)
   %5 = trunc i64 %4 to i32 (endState: LEGUP_F_main_BB__1_2)
   %6 = lshr i64 %3, 63 (endState: LEGUP_F_main_BB__1_2)
   %7 = trunc i64 %6 to i32 (endState: LEGUP_F_main_BB__1_2)
   %8 = icmp eq i32 %5, %7 (endState: LEGUP_F_main_BB__1_2)
   %9 = lshr i64 %2, 52 (endState: LEGUP_F_main_BB__1_2)
   %.tr.i.i = trunc i64 %9 to i32 (endState: LEGUP_F_main_BB__1_2)
   %10 = and i32 %.tr.i.i, 2047 (endState: LEGUP_F_main_BB__1_2)
   %11 = lshr i64 %3, 52 (endState: LEGUP_F_main_BB__1_2)
   %.tr.i17.i = trunc i64 %11 to i32 (endState: LEGUP_F_main_BB__1_2)
   %12 = and i32 %.tr.i17.i, 2047 (endState: LEGUP_F_main_BB__1_2)
   %13 = sub nsw i32 %10, %12 (endState: LEGUP_F_main_BB__1_2)
   br i1 %8, label %14, label %102
   Transition: if (%8): LEGUP_F_main_BB__14_3 default: LEGUP_F_main_BB__102_34
state: LEGUP_F_main_BB__14_3
   %15 = shl i64 %2, 9 (endState: LEGUP_F_main_BB__14_3)
   %16 = and i64 %15, 2305843009213693440 (endState: LEGUP_F_main_BB__14_3)
   %17 = shl i64 %3, 9 (endState: LEGUP_F_main_BB__14_3)
   %18 = and i64 %17, 2305843009213693440 (endState: LEGUP_F_main_BB__14_3)
   %19 = icmp sgt i32 %13, 0 (endState: LEGUP_F_main_BB__14_3)
   br i1 %19, label %20, label %47
   Transition: if (%19): LEGUP_F_main_BB__20_4 default: LEGUP_F_main_BB__47_12
state: LEGUP_F_main_BB__20_4
   %21 = icmp eq i32 %10, 2047 (endState: LEGUP_F_main_BB__20_4)
   br i1 %21, label %22, label %26
   Transition: if (%21): LEGUP_F_main_BB__22_5 default: LEGUP_F_main_BB__26_8
state: LEGUP_F_main_BB__22_5
   %23 = icmp eq i64 %16, 0 (endState: LEGUP_F_main_BB__22_5)
   br i1 %23, label %float64_add.exit, label %float64_is_signaling_nan.exit1.i10.i
   Transition: if (%23): LEGUP_F_main_BB_float64_addexit_74 default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_6
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_6
   %24 = trunc i64 %3 to i63 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_6)
   %25 = icmp ugt i63 %24, -4503599627370496 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_6)
   Transition: default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_7
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_7
   %.mux2.v.i14.i = select i1 %25, i64 %3, i64 %2 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_7)
   %.mux2.i15.i = or i64 %.mux2.v.i14.i, 2251799813685248 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_7)
   br label %float64_add.exit
   Transition: default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB__26_8
   %27 = icmp eq i32 %12, 0 (endState: LEGUP_F_main_BB__26_8)
   %28 = or i64 %18, 2305843009213693952 (endState: LEGUP_F_main_BB__26_8)
   %29 = select i1 %27, i64 %18, i64 %28 (endState: LEGUP_F_main_BB__26_8)
   %30 = sext i1 %27 to i32 (endState: LEGUP_F_main_BB__26_8)
   %expDiff.0.i = add nsw i32 %30, %13 (endState: LEGUP_F_main_BB__26_8)
   %31 = icmp eq i32 %expDiff.0.i, 0 (endState: LEGUP_F_main_BB__26_8)
   br i1 %31, label %shift64RightJamming.exit9.i, label %32
   Transition: if (%31): LEGUP_F_main_BB_shift64RightJammingexit9i_28 default: LEGUP_F_main_BB__32_9
state: LEGUP_F_main_BB__32_9
   %33 = icmp slt i32 %expDiff.0.i, 64 (endState: LEGUP_F_main_BB__32_9)
   br i1 %33, label %34, label %44
   Transition: if (%33): LEGUP_F_main_BB__34_10 default: LEGUP_F_main_BB__44_11
state: LEGUP_F_main_BB__34_10
   %35 = zext i32 %expDiff.0.i to i64 (endState: LEGUP_F_main_BB__34_10)
   %36 = lshr i64 %29, %35 (endState: LEGUP_F_main_BB__34_10)
   %37 = sub nsw i32 0, %expDiff.0.i (endState: LEGUP_F_main_BB__34_10)
   %38 = and i32 %37, 63 (endState: LEGUP_F_main_BB__34_10)
   %39 = zext i32 %38 to i64 (endState: LEGUP_F_main_BB__34_10)
   %40 = shl i64 %29, %39 (endState: LEGUP_F_main_BB__34_10)
   %41 = icmp ne i64 %40, 0 (endState: LEGUP_F_main_BB__34_10)
   %42 = zext i1 %41 to i64 (endState: LEGUP_F_main_BB__34_10)
   %43 = or i64 %42, %36 (endState: LEGUP_F_main_BB__34_10)
   br label %shift64RightJamming.exit9.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit9i_28
state: LEGUP_F_main_BB__44_11
   %45 = icmp ne i64 %29, 0 (endState: LEGUP_F_main_BB__44_11)
   %46 = zext i1 %45 to i64 (endState: LEGUP_F_main_BB__44_11)
   br label %shift64RightJamming.exit9.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit9i_28
state: LEGUP_F_main_BB__47_12
   %48 = icmp slt i32 %13, 0 (endState: LEGUP_F_main_BB__47_12)
   br i1 %48, label %49, label %79
   Transition: if (%48): LEGUP_F_main_BB__49_13 default: LEGUP_F_main_BB__79_22
state: LEGUP_F_main_BB__49_13
   %50 = icmp eq i32 %12, 2047 (endState: LEGUP_F_main_BB__49_13)
   br i1 %50, label %51, label %58
   Transition: if (%50): LEGUP_F_main_BB__51_14 default: LEGUP_F_main_BB__58_18
state: LEGUP_F_main_BB__51_14
   %52 = icmp eq i64 %18, 0 (endState: LEGUP_F_main_BB__51_14)
   br i1 %52, label %55, label %float64_is_signaling_nan.exit1.i1.i
   Transition: if (%52): LEGUP_F_main_BB__55_17 default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_15
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_15
   %53 = trunc i64 %3 to i63 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_15)
   %54 = icmp ugt i63 %53, -4503599627370496 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_15)
   Transition: default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_16
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_16
   %.mux2.v.i5.i = select i1 %54, i64 %3, i64 %2 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_16)
   %.mux2.i6.i = or i64 %.mux2.v.i5.i, 2251799813685248 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_16)
   br label %float64_add.exit
   Transition: default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB__55_17
   %56 = shl nuw i64 %4, 63 (endState: LEGUP_F_main_BB__55_17)
   %57 = or i64 %56, 9218868437227405312 (endState: LEGUP_F_main_BB__55_17)
   br label %float64_add.exit
   Transition: default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB__58_18
   %59 = icmp eq i32 %10, 0 (endState: LEGUP_F_main_BB__58_18)
   %60 = or i64 %16, 2305843009213693952 (endState: LEGUP_F_main_BB__58_18)
   %61 = select i1 %59, i64 %16, i64 %60 (endState: LEGUP_F_main_BB__58_18)
   %62 = zext i1 %59 to i32 (endState: LEGUP_F_main_BB__58_18)
   %expDiff.1.i = add nsw i32 %13, %62 (endState: LEGUP_F_main_BB__58_18)
   %63 = sub nsw i32 0, %expDiff.1.i (endState: LEGUP_F_main_BB__58_18)
   %64 = icmp eq i32 %expDiff.1.i, 0 (endState: LEGUP_F_main_BB__58_18)
   br i1 %64, label %shift64RightJamming.exit9.i, label %65
   Transition: if (%64): LEGUP_F_main_BB_shift64RightJammingexit9i_28 default: LEGUP_F_main_BB__65_19
state: LEGUP_F_main_BB__65_19
   %66 = icmp sgt i32 %expDiff.1.i, -64 (endState: LEGUP_F_main_BB__65_19)
   br i1 %66, label %67, label %76
   Transition: if (%66): LEGUP_F_main_BB__67_20 default: LEGUP_F_main_BB__76_21
state: LEGUP_F_main_BB__67_20
   %68 = zext i32 %63 to i64 (endState: LEGUP_F_main_BB__67_20)
   %69 = lshr i64 %61, %68 (endState: LEGUP_F_main_BB__67_20)
   %70 = and i32 %expDiff.1.i, 63 (endState: LEGUP_F_main_BB__67_20)
   %71 = zext i32 %70 to i64 (endState: LEGUP_F_main_BB__67_20)
   %72 = shl i64 %61, %71 (endState: LEGUP_F_main_BB__67_20)
   %73 = icmp ne i64 %72, 0 (endState: LEGUP_F_main_BB__67_20)
   %74 = zext i1 %73 to i64 (endState: LEGUP_F_main_BB__67_20)
   %75 = or i64 %74, %69 (endState: LEGUP_F_main_BB__67_20)
   br label %shift64RightJamming.exit9.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit9i_28
state: LEGUP_F_main_BB__76_21
   %77 = icmp ne i64 %61, 0 (endState: LEGUP_F_main_BB__76_21)
   %78 = zext i1 %77 to i64 (endState: LEGUP_F_main_BB__76_21)
   br label %shift64RightJamming.exit9.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit9i_28
state: LEGUP_F_main_BB__79_22
   switch i32 %10, label %90 [
    i32 2047, label %80
    i32 0, label %85
  ]
   Transition: switch (%10) 2047: LEGUP_F_main_BB__80_23 0: LEGUP_F_main_BB__85_26 default: LEGUP_F_main_BB__90_27
state: LEGUP_F_main_BB__80_23
   %81 = or i64 %18, %16 (endState: LEGUP_F_main_BB__80_23)
   %82 = icmp eq i64 %81, 0 (endState: LEGUP_F_main_BB__80_23)
   br i1 %82, label %float64_add.exit, label %float64_is_signaling_nan.exit1.i.i
   Transition: if (%82): LEGUP_F_main_BB_float64_addexit_74 default: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_24
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_24
   %83 = trunc i64 %3 to i63 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_24)
   %84 = icmp ugt i63 %83, -4503599627370496 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_24)
   Transition: default: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25
   %.mux2.v.i.i = select i1 %84, i64 %3, i64 %2 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25)
   %.mux2.i.i = or i64 %.mux2.v.i.i, 2251799813685248 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25)
   br label %float64_add.exit
   Transition: default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB__85_26
   %86 = add nuw nsw i64 %18, %16 (endState: LEGUP_F_main_BB__85_26)
   %87 = lshr exact i64 %86, 9 (endState: LEGUP_F_main_BB__85_26)
   %88 = shl nuw i64 %4, 63 (endState: LEGUP_F_main_BB__85_26)
   %89 = or i64 %87, %88 (endState: LEGUP_F_main_BB__85_26)
   br label %float64_add.exit
   Transition: default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB__90_27
   %91 = or i64 %16, 4611686018427387904 (endState: LEGUP_F_main_BB__90_27)
   %92 = add nuw i64 %91, %18 (endState: LEGUP_F_main_BB__90_27)
   br label %100
   Transition: default: LEGUP_F_main_BB__100_31
state: LEGUP_F_main_BB_shift64RightJammingexit9i_28
   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ] (endState: LEGUP_F_main_BB_shift64RightJammingexit9i_28)
   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ] (endState: LEGUP_F_main_BB_shift64RightJammingexit9i_28)
   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ] (endState: LEGUP_F_main_BB_shift64RightJammingexit9i_28)
   %95 = or i64 %93, 2305843009213693952 (endState: LEGUP_F_main_BB_shift64RightJammingexit9i_28)
   %96 = add i64 %95, %94 (endState: LEGUP_F_main_BB_shift64RightJammingexit9i_28)
   %97 = shl i64 %96, 1 (endState: LEGUP_F_main_BB_shift64RightJammingexit9i_28)
   %98 = icmp slt i64 %97, 0 (endState: LEGUP_F_main_BB_shift64RightJammingexit9i_28)
   %..i = select i1 %98, i64 %96, i64 %97 (endState: LEGUP_F_main_BB_shift64RightJammingexit9i_28)
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit9i_29
state: LEGUP_F_main_BB_shift64RightJammingexit9i_29
   %not..i = xor i1 %98, true (endState: LEGUP_F_main_BB_shift64RightJammingexit9i_29)
   %99 = sext i1 %not..i to i32 (endState: LEGUP_F_main_BB_shift64RightJammingexit9i_29)
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit9i_30
state: LEGUP_F_main_BB_shift64RightJammingexit9i_30
   %zExp.0..i = add nsw i32 %99, %zExp.0.i (endState: LEGUP_F_main_BB_shift64RightJammingexit9i_30)
   br label %100
   Transition: default: LEGUP_F_main_BB__100_31
state: LEGUP_F_main_BB__100_31
   %zExp.1.i = phi i32 [ %10, %90 ], [ %zExp.0..i, %shift64RightJamming.exit9.i ] (endState: LEGUP_F_main_BB__100_31)
   %zSig.0.i = phi i64 [ %92, %90 ], [ %..i, %shift64RightJamming.exit9.i ] (endState: LEGUP_F_main_BB__100_31)
   Transition: default: LEGUP_function_call_32
state: LEGUP_function_call_32
   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1 (endState: LEGUP_function_call_32)
   Transition: if (roundAndPackFloat64_finish_final): LEGUP_F_main_BB__100_33 default: LEGUP_function_call_32
state: LEGUP_F_main_BB__100_33
   br label %float64_add.exit
   Transition: default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB__102_34
   %103 = shl i64 %2, 10 (endState: LEGUP_F_main_BB__102_34)
   %104 = and i64 %103, 4611686018427386880 (endState: LEGUP_F_main_BB__102_34)
   %105 = shl i64 %3, 10 (endState: LEGUP_F_main_BB__102_34)
   %106 = and i64 %105, 4611686018427386880 (endState: LEGUP_F_main_BB__102_34)
   %107 = icmp sgt i32 %13, 0 (endState: LEGUP_F_main_BB__102_34)
   br i1 %107, label %162, label %108
   Transition: if (%107): LEGUP_F_main_BB__162_58 default: LEGUP_F_main_BB__108_35
state: LEGUP_F_main_BB__108_35
   %109 = icmp slt i32 %13, 0 (endState: LEGUP_F_main_BB__108_35)
   br i1 %109, label %124, label %110
   Transition: if (%109): LEGUP_F_main_BB__124_47 default: LEGUP_F_main_BB__110_36
state: LEGUP_F_main_BB__110_36
   switch i32 %10, label %120 [
    i32 2047, label %111
    i32 0, label %119
  ]
   Transition: switch (%10) 2047: LEGUP_F_main_BB__111_37 0: LEGUP_F_main_BB__119_44 default: LEGUP_F_main_BB__120_45
state: LEGUP_F_main_BB__111_37
   %112 = or i64 %106, %104 (endState: LEGUP_F_main_BB__111_37)
   %113 = icmp eq i64 %112, 0 (endState: LEGUP_F_main_BB__111_37)
   br i1 %113, label %116, label %float64_is_signaling_nan.exit1.i11.i
   Transition: if (%113): LEGUP_F_main_BB__116_40 default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_38
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_38
   %114 = trunc i64 %3 to i63 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_38)
   %115 = icmp ugt i63 %114, -4503599627370496 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_38)
   Transition: default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_39
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_39
   %.mux2.v.i15.i = select i1 %115, i64 %3, i64 %2 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_39)
   %.mux2.i16.i = or i64 %.mux2.v.i15.i, 2251799813685248 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_39)
   br label %float64_add.exit
   Transition: default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB__116_40
   %117 = load i32* @float_exception_flags, align 4, !tbaa !5 (endState: LEGUP_F_main_BB__116_42)
   Transition: default: LEGUP_F_main_BB__116_41
state: LEGUP_F_main_BB__116_41
   Transition: default: LEGUP_F_main_BB__116_42
state: LEGUP_F_main_BB__116_42
   %118 = or i32 %117, 16 (endState: LEGUP_F_main_BB__116_42)
   store i32 %118, i32* @float_exception_flags, align 4, !tbaa !5 (endState: LEGUP_F_main_BB__116_43)
   Transition: default: LEGUP_F_main_BB__116_43
state: LEGUP_F_main_BB__116_43
   br label %float64_add.exit
   Transition: default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB__119_44
   br label %120
   Transition: default: LEGUP_F_main_BB__120_45
state: LEGUP_F_main_BB__120_45
   %aExp.0.i = phi i32 [ 1, %119 ], [ %10, %110 ] (endState: LEGUP_F_main_BB__120_45)
   %bExp.0.i = phi i32 [ 1, %119 ], [ %12, %110 ] (endState: LEGUP_F_main_BB__120_45)
   %121 = icmp ult i64 %106, %104 (endState: LEGUP_F_main_BB__120_45)
   br i1 %121, label %190, label %122
   Transition: if (%121): LEGUP_F_main_BB__190_67 default: LEGUP_F_main_BB__122_46
state: LEGUP_F_main_BB__122_46
   %123 = icmp ult i64 %104, %106 (endState: LEGUP_F_main_BB__122_46)
   br i1 %123, label %157, label %float64_add.exit
   Transition: if (%123): LEGUP_F_main_BB__157_57 default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB__124_47
   %125 = icmp eq i32 %12, 2047 (endState: LEGUP_F_main_BB__124_47)
   br i1 %125, label %126, label %135
   Transition: if (%125): LEGUP_F_main_BB__126_48 default: LEGUP_F_main_BB__135_52
state: LEGUP_F_main_BB__126_48
   %127 = icmp eq i64 %106, 0 (endState: LEGUP_F_main_BB__126_48)
   br i1 %127, label %130, label %float64_is_signaling_nan.exit1.i4.i
   Transition: if (%127): LEGUP_F_main_BB__130_51 default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_49
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_49
   %128 = trunc i64 %3 to i63 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_49)
   %129 = icmp ugt i63 %128, -4503599627370496 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_49)
   Transition: default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_50
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_50
   %.mux2.v.i8.i = select i1 %129, i64 %3, i64 %2 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_50)
   %.mux2.i9.i = or i64 %.mux2.v.i8.i, 2251799813685248 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_50)
   br label %float64_add.exit
   Transition: default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB__130_51
   %131 = xor i32 %5, 1 (endState: LEGUP_F_main_BB__130_51)
   %132 = zext i32 %131 to i64 (endState: LEGUP_F_main_BB__130_51)
   %133 = shl nuw i64 %132, 63 (endState: LEGUP_F_main_BB__130_51)
   %134 = or i64 %133, 9218868437227405312 (endState: LEGUP_F_main_BB__130_51)
   br label %float64_add.exit
   Transition: default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB__135_52
   %136 = icmp eq i32 %10, 0 (endState: LEGUP_F_main_BB__135_52)
   %137 = or i64 %104, 4611686018427387904 (endState: LEGUP_F_main_BB__135_52)
   %138 = select i1 %136, i64 %104, i64 %137 (endState: LEGUP_F_main_BB__135_52)
   %139 = zext i1 %136 to i32 (endState: LEGUP_F_main_BB__135_52)
   %expDiff.0.i3 = add nsw i32 %13, %139 (endState: LEGUP_F_main_BB__135_52)
   %140 = sub nsw i32 0, %expDiff.0.i3 (endState: LEGUP_F_main_BB__135_52)
   %141 = icmp eq i32 %expDiff.0.i3, 0 (endState: LEGUP_F_main_BB__135_52)
   br i1 %141, label %shift64RightJamming.exit3.i, label %142
   Transition: if (%141): LEGUP_F_main_BB_shift64RightJammingexit3i_56 default: LEGUP_F_main_BB__142_53
state: LEGUP_F_main_BB__142_53
   %143 = icmp sgt i32 %expDiff.0.i3, -64 (endState: LEGUP_F_main_BB__142_53)
   br i1 %143, label %144, label %153
   Transition: if (%143): LEGUP_F_main_BB__144_54 default: LEGUP_F_main_BB__153_55
state: LEGUP_F_main_BB__144_54
   %145 = zext i32 %140 to i64 (endState: LEGUP_F_main_BB__144_54)
   %146 = lshr i64 %138, %145 (endState: LEGUP_F_main_BB__144_54)
   %147 = and i32 %expDiff.0.i3, 63 (endState: LEGUP_F_main_BB__144_54)
   %148 = zext i32 %147 to i64 (endState: LEGUP_F_main_BB__144_54)
   %149 = shl i64 %138, %148 (endState: LEGUP_F_main_BB__144_54)
   %150 = icmp ne i64 %149, 0 (endState: LEGUP_F_main_BB__144_54)
   %151 = zext i1 %150 to i64 (endState: LEGUP_F_main_BB__144_54)
   %152 = or i64 %151, %146 (endState: LEGUP_F_main_BB__144_54)
   br label %shift64RightJamming.exit3.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit3i_56
state: LEGUP_F_main_BB__153_55
   %154 = icmp ne i64 %138, 0 (endState: LEGUP_F_main_BB__153_55)
   %155 = zext i1 %154 to i64 (endState: LEGUP_F_main_BB__153_55)
   br label %shift64RightJamming.exit3.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit3i_56
state: LEGUP_F_main_BB_shift64RightJammingexit3i_56
   %z.0.i2.i = phi i64 [ %152, %144 ], [ %155, %153 ], [ %138, %135 ] (endState: LEGUP_F_main_BB_shift64RightJammingexit3i_56)
   %156 = or i64 %106, 4611686018427387904 (endState: LEGUP_F_main_BB_shift64RightJammingexit3i_56)
   br label %157
   Transition: default: LEGUP_F_main_BB__157_57
state: LEGUP_F_main_BB__157_57
   %158 = phi i64 [ %z.0.i2.i, %shift64RightJamming.exit3.i ], [ %104, %122 ] (endState: LEGUP_F_main_BB__157_57)
   %159 = phi i64 [ %156, %shift64RightJamming.exit3.i ], [ %106, %122 ] (endState: LEGUP_F_main_BB__157_57)
   %bExp.1.i = phi i32 [ %12, %shift64RightJamming.exit3.i ], [ %bExp.0.i, %122 ] (endState: LEGUP_F_main_BB__157_57)
   %160 = sub i64 %159, %158 (endState: LEGUP_F_main_BB__157_57)
   %161 = xor i32 %5, 1 (endState: LEGUP_F_main_BB__157_57)
   br label %194
   Transition: default: LEGUP_F_main_BB__194_68
state: LEGUP_F_main_BB__162_58
   %163 = icmp eq i32 %10, 2047 (endState: LEGUP_F_main_BB__162_58)
   br i1 %163, label %164, label %168
   Transition: if (%163): LEGUP_F_main_BB__164_59 default: LEGUP_F_main_BB__168_62
state: LEGUP_F_main_BB__164_59
   %165 = icmp eq i64 %104, 0 (endState: LEGUP_F_main_BB__164_59)
   br i1 %165, label %float64_add.exit, label %float64_is_signaling_nan.exit1.i.i4
   Transition: if (%165): LEGUP_F_main_BB_float64_addexit_74 default: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_60
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_60
   %166 = trunc i64 %3 to i63 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_60)
   %167 = icmp ugt i63 %166, -4503599627370496 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_60)
   Transition: default: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_61
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_61
   %.mux2.v.i.i8 = select i1 %167, i64 %3, i64 %2 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_61)
   %.mux2.i.i9 = or i64 %.mux2.v.i.i8, 2251799813685248 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_61)
   br label %float64_add.exit
   Transition: default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB__168_62
   %169 = icmp eq i32 %12, 0 (endState: LEGUP_F_main_BB__168_62)
   %170 = or i64 %106, 4611686018427387904 (endState: LEGUP_F_main_BB__168_62)
   %171 = select i1 %169, i64 %106, i64 %170 (endState: LEGUP_F_main_BB__168_62)
   %172 = sext i1 %169 to i32 (endState: LEGUP_F_main_BB__168_62)
   %expDiff.1.i11 = add nsw i32 %172, %13 (endState: LEGUP_F_main_BB__168_62)
   %173 = icmp eq i32 %expDiff.1.i11, 0 (endState: LEGUP_F_main_BB__168_62)
   br i1 %173, label %shift64RightJamming.exit.i, label %174
   Transition: if (%173): LEGUP_F_main_BB_shift64RightJammingexiti_66 default: LEGUP_F_main_BB__174_63
state: LEGUP_F_main_BB__174_63
   %175 = icmp slt i32 %expDiff.1.i11, 64 (endState: LEGUP_F_main_BB__174_63)
   br i1 %175, label %176, label %186
   Transition: if (%175): LEGUP_F_main_BB__176_64 default: LEGUP_F_main_BB__186_65
state: LEGUP_F_main_BB__176_64
   %177 = zext i32 %expDiff.1.i11 to i64 (endState: LEGUP_F_main_BB__176_64)
   %178 = lshr i64 %171, %177 (endState: LEGUP_F_main_BB__176_64)
   %179 = sub nsw i32 0, %expDiff.1.i11 (endState: LEGUP_F_main_BB__176_64)
   %180 = and i32 %179, 63 (endState: LEGUP_F_main_BB__176_64)
   %181 = zext i32 %180 to i64 (endState: LEGUP_F_main_BB__176_64)
   %182 = shl i64 %171, %181 (endState: LEGUP_F_main_BB__176_64)
   %183 = icmp ne i64 %182, 0 (endState: LEGUP_F_main_BB__176_64)
   %184 = zext i1 %183 to i64 (endState: LEGUP_F_main_BB__176_64)
   %185 = or i64 %184, %178 (endState: LEGUP_F_main_BB__176_64)
   br label %shift64RightJamming.exit.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexiti_66
state: LEGUP_F_main_BB__186_65
   %187 = icmp ne i64 %171, 0 (endState: LEGUP_F_main_BB__186_65)
   %188 = zext i1 %187 to i64 (endState: LEGUP_F_main_BB__186_65)
   br label %shift64RightJamming.exit.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexiti_66
state: LEGUP_F_main_BB_shift64RightJammingexiti_66
   %z.0.i.i = phi i64 [ %185, %176 ], [ %188, %186 ], [ %171, %168 ] (endState: LEGUP_F_main_BB_shift64RightJammingexiti_66)
   %189 = or i64 %104, 4611686018427387904 (endState: LEGUP_F_main_BB_shift64RightJammingexiti_66)
   br label %190
   Transition: default: LEGUP_F_main_BB__190_67
state: LEGUP_F_main_BB__190_67
   %191 = phi i64 [ %189, %shift64RightJamming.exit.i ], [ %104, %120 ] (endState: LEGUP_F_main_BB__190_67)
   %192 = phi i64 [ %z.0.i.i, %shift64RightJamming.exit.i ], [ %106, %120 ] (endState: LEGUP_F_main_BB__190_67)
   %aExp.1.i = phi i32 [ %10, %shift64RightJamming.exit.i ], [ %aExp.0.i, %120 ] (endState: LEGUP_F_main_BB__190_67)
   %193 = sub i64 %191, %192 (endState: LEGUP_F_main_BB__190_67)
   br label %194
   Transition: default: LEGUP_F_main_BB__194_68
state: LEGUP_F_main_BB__194_68
   %.0.i12 = phi i32 [ %5, %190 ], [ %161, %157 ] (endState: LEGUP_F_main_BB__194_68)
   %zExp.0.i13 = phi i32 [ %aExp.1.i, %190 ], [ %bExp.1.i, %157 ] (endState: LEGUP_F_main_BB__194_68)
   %zSig.0.i14 = phi i64 [ %193, %190 ], [ %160, %157 ] (endState: LEGUP_F_main_BB__194_68)
   %195 = add nsw i32 %zExp.0.i13, -1 (endState: LEGUP_F_main_BB__194_68)
   %196 = icmp ult i64 %zSig.0.i14, 4294967296 (endState: LEGUP_F_main_BB__194_68)
   %197 = lshr i64 %zSig.0.i14, 32 (endState: LEGUP_F_main_BB__194_68)
   %a.sink.i.i.i = select i1 %196, i64 %zSig.0.i14, i64 %197 (endState: LEGUP_F_main_BB__194_68)
   %extract.t.i.i.i = trunc i64 %a.sink.i.i.i to i32 (endState: LEGUP_F_main_BB__194_68)
   %198 = icmp ult i32 %extract.t.i.i.i, 65536 (endState: LEGUP_F_main_BB__194_68)
   %199 = shl i32 %extract.t.i.i.i, 16 (endState: LEGUP_F_main_BB__194_68)
   %.a.i.i.i.i = select i1 %198, i32 %199, i32 %extract.t.i.i.i (endState: LEGUP_F_main_BB__194_68)
   %..i.i.i.i = select i1 %198, i32 16, i32 0 (endState: LEGUP_F_main_BB__194_68)
   %200 = icmp ult i32 %.a.i.i.i.i, 16777216 (endState: LEGUP_F_main_BB__194_68)
   br i1 %200, label %201, label %normalizeRoundAndPackFloat64.exit.i
   Transition: if (%200): LEGUP_F_main_BB__201_69 default: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70
state: LEGUP_F_main_BB__201_69
   %202 = or i32 %..i.i.i.i, 8 (endState: LEGUP_F_main_BB__201_69)
   %203 = shl i32 %.a.i.i.i.i, 8 (endState: LEGUP_F_main_BB__201_69)
   br label %normalizeRoundAndPackFloat64.exit.i
   Transition: default: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70
state: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70
   %.1.i.i.i.i = phi i32 [ %203, %201 ], [ %.a.i.i.i.i, %194 ] (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70)
   %shiftCount.1.i.i.i.i = phi i32 [ %202, %201 ], [ %..i.i.i.i, %194 ] (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70)
   %204 = lshr i32 %.1.i.i.i.i, 24 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70)
   %205 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %204 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70)
   %206 = load i32* %205, align 4, !tbaa !5 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)
   %207 = select i1 %196, i32 31, i32 -1 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70)
   %208 = add nsw i32 %shiftCount.1.i.i.i.i, %207 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70)
   Transition: default: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71
state: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71
   %209 = add i32 %208, %206 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)
   %210 = sub i32 %195, %209 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)
   %211 = zext i32 %209 to i64 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)
   %212 = shl i64 %zSig.0.i14, %211 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)
   Transition: default: LEGUP_function_call_72
state: LEGUP_function_call_72
   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1 (endState: LEGUP_function_call_72)
   Transition: if (roundAndPackFloat64_finish_final): LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_73 default: LEGUP_function_call_72
state: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_73
   br label %float64_add.exit
   Transition: default: LEGUP_F_main_BB_float64_addexit_74
state: LEGUP_F_main_BB_float64_addexit_74
   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ] (endState: LEGUP_F_main_BB_float64_addexit_74)
   %214 = load i64* %scevgep, align 8, !tbaa !1 (endState: LEGUP_F_main_BB_float64_addexit_75)
   %218 = add nsw i32 %i.01, 1 (endState: LEGUP_F_main_BB_float64_addexit_74)
   %exitcond1 = icmp eq i32 %218, 46 (endState: LEGUP_F_main_BB_float64_addexit_74)
   Transition: default: LEGUP_F_main_BB_float64_addexit_75
state: LEGUP_F_main_BB_float64_addexit_75
   %215 = icmp eq i64 %.0.i, %214 (endState: LEGUP_F_main_BB_float64_addexit_75)
   %216 = zext i1 %215 to i32 (endState: LEGUP_F_main_BB_float64_addexit_75)
   %217 = add nsw i32 %216, %main_result.02 (endState: LEGUP_F_main_BB_float64_addexit_75)
   br i1 %exitcond1, label %219, label %1
   Transition: if (%exitcond1): LEGUP_F_main_BB__219_76 default: LEGUP_F_main_BB__1_1
state: LEGUP_F_main_BB__219_76
   %220 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str, i32 0, i32 0), i32 %217) #1 (endState: LEGUP_F_main_BB__219_76)
   %221 = icmp eq i32 %217, 46 (endState: LEGUP_F_main_BB__219_76)
   br i1 %221, label %222, label %224
   Transition: if (%221): LEGUP_F_main_BB__222_77 default: LEGUP_F_main_BB__224_78
state: LEGUP_F_main_BB__222_77
   %223 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str1, i32 0, i32 0)) #1 (endState: LEGUP_F_main_BB__222_77)
   br label %226
   Transition: default: LEGUP_F_main_BB__226_79
state: LEGUP_F_main_BB__224_78
   %225 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0)) #1 (endState: LEGUP_F_main_BB__224_78)
   br label %226
   Transition: default: LEGUP_F_main_BB__226_79
state: LEGUP_F_main_BB__226_79
   ret i32 %217
   Transition: default: LEGUP_0

Basic Block: %0 Num States: 1
Basic Block: %1 Num States: 2
Basic Block: %14 Num States: 1
Basic Block: %20 Num States: 1
Basic Block: %22 Num States: 1
Basic Block: %float64_is_signaling_nan.exit1.i10.i Num States: 2
Basic Block: %26 Num States: 1
Basic Block: %32 Num States: 1
Basic Block: %34 Num States: 1
Basic Block: %44 Num States: 1
Basic Block: %47 Num States: 1
Basic Block: %49 Num States: 1
Basic Block: %51 Num States: 1
Basic Block: %float64_is_signaling_nan.exit1.i1.i Num States: 2
Basic Block: %55 Num States: 1
Basic Block: %58 Num States: 1
Basic Block: %65 Num States: 1
Basic Block: %67 Num States: 1
Basic Block: %76 Num States: 1
Basic Block: %79 Num States: 1
Basic Block: %80 Num States: 1
Basic Block: %float64_is_signaling_nan.exit1.i.i Num States: 2
Basic Block: %85 Num States: 1
Basic Block: %90 Num States: 1
Basic Block: %shift64RightJamming.exit9.i Num States: 3
Basic Block: %100 Num States: 3
Basic Block: %102 Num States: 1
Basic Block: %108 Num States: 1
Basic Block: %110 Num States: 1
Basic Block: %111 Num States: 1
Basic Block: %float64_is_signaling_nan.exit1.i11.i Num States: 2
Basic Block: %116 Num States: 4
Basic Block: %119 Num States: 1
Basic Block: %120 Num States: 1
Basic Block: %122 Num States: 1
Basic Block: %124 Num States: 1
Basic Block: %126 Num States: 1
Basic Block: %float64_is_signaling_nan.exit1.i4.i Num States: 2
Basic Block: %130 Num States: 1
Basic Block: %135 Num States: 1
Basic Block: %142 Num States: 1
Basic Block: %144 Num States: 1
Basic Block: %153 Num States: 1
Basic Block: %shift64RightJamming.exit3.i Num States: 1
Basic Block: %157 Num States: 1
Basic Block: %162 Num States: 1
Basic Block: %164 Num States: 1
Basic Block: %float64_is_signaling_nan.exit1.i.i4 Num States: 2
Basic Block: %168 Num States: 1
Basic Block: %174 Num States: 1
Basic Block: %176 Num States: 1
Basic Block: %186 Num States: 1
Basic Block: %shift64RightJamming.exit.i Num States: 1
Basic Block: %190 Num States: 1
Basic Block: %194 Num States: 1
Basic Block: %201 Num States: 1
Basic Block: %normalizeRoundAndPackFloat64.exit.i Num States: 4
Basic Block: %float64_add.exit Num States: 2
Basic Block: %219 Num States: 1
Basic Block: %222 Num States: 1
Basic Block: %224 Num States: 1
Basic Block: %226 Num States: 1
End Function: main
--------------------------------------------------------------------------------

