//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 14:06:25 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 5
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @float_exception_flags = internal unnamed_addr global i32 0, align 4
`define TAG_g_float_exception_flags `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_float_exception_flags_a {`TAG_g_float_exception_flags, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [0:0] ram_32_address_a;
reg [0:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @float_exception_flags = internal unnamed_addr global i32 0, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 1;
defparam ram_32.widthad_b = 1;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 1;
defparam ram_32.numwords_b = 1;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 2);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	ram_32_address_a = memory_controller_address_a [1-1+2:2] & {1{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 2);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	ram_32_address_b = memory_controller_address_b [1-1+2:2] & {1{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module roundAndPackFloat64
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_zSign,
	arg_zExp,
	arg_zSig
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__4_2 = 5'd2;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__6_3 = 5'd3;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__8_4 = 5'd4;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_5 = 5'd5;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_6 = 5'd6;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_7 = 5'd7;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_8 = 5'd8;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__17_9 = 5'd9;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__19_10 = 5'd10;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__21_11 = 5'd11;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__31_12 = 5'd12;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13 = 5'd13;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_14 = 5'd14;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_15 = 5'd15;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_16 = 5'd16;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_17 = 5'd17;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread_18 = 5'd18;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_19 = 5'd19;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_20 = 5'd20;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_21 = 5'd21;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_22 = 5'd22;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread6_23 = 5'd23;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__57_24 = 5'd24;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [63:0] return_val;
input [31:0] arg_zSign;
input [31:0] arg_zExp;
input [63:0] arg_zSig;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] roundAndPackFloat64_0_tr;
reg [31:0] roundAndPackFloat64_0_tr_reg;
reg [31:0] roundAndPackFloat64_0_1;
reg [31:0] roundAndPackFloat64_0_1_reg;
reg [31:0] roundAndPackFloat64_0_2;
reg [31:0] roundAndPackFloat64_0_2_reg;
reg  roundAndPackFloat64_0_3;
reg  roundAndPackFloat64_0_3_reg;
reg  roundAndPackFloat64_4_5;
reg  roundAndPackFloat64_4_5_reg;
reg  roundAndPackFloat64_6_7;
reg  roundAndPackFloat64_6_7_reg;
reg [63:0] roundAndPackFloat64_8_9;
reg [63:0] roundAndPackFloat64_8_9_reg;
reg  roundAndPackFloat64_8_10;
reg  roundAndPackFloat64_8_10_reg;
reg [31:0] roundAndPackFloat64_11_12;
reg [31:0] roundAndPackFloat64_11_12_reg;
reg [31:0] roundAndPackFloat64_11_13;
reg [31:0] roundAndPackFloat64_11_13_reg;
reg [63:0] roundAndPackFloat64_11_14;
reg [63:0] roundAndPackFloat64_11_14_reg;
reg [63:0] roundAndPackFloat64_11_15;
reg [63:0] roundAndPackFloat64_11_15_reg;
reg [63:0] roundAndPackFloat64_11_16;
reg [63:0] roundAndPackFloat64_11_16_reg;
reg  roundAndPackFloat64_17_18;
reg  roundAndPackFloat64_17_18_reg;
reg  roundAndPackFloat64_19_20;
reg  roundAndPackFloat64_19_20_reg;
reg [31:0] roundAndPackFloat64_21_22;
reg [31:0] roundAndPackFloat64_21_22_reg;
reg [63:0] roundAndPackFloat64_21_23;
reg [63:0] roundAndPackFloat64_21_23_reg;
reg [63:0] roundAndPackFloat64_21_24;
reg [63:0] roundAndPackFloat64_21_24_reg;
reg [31:0] roundAndPackFloat64_21_25;
reg [31:0] roundAndPackFloat64_21_25_reg;
reg [63:0] roundAndPackFloat64_21_26;
reg [63:0] roundAndPackFloat64_21_26_reg;
reg [63:0] roundAndPackFloat64_21_27;
reg [63:0] roundAndPackFloat64_21_27_reg;
reg  roundAndPackFloat64_21_28;
reg  roundAndPackFloat64_21_28_reg;
reg [63:0] roundAndPackFloat64_21_29;
reg [63:0] roundAndPackFloat64_21_29_reg;
reg [63:0] roundAndPackFloat64_21_30;
reg [63:0] roundAndPackFloat64_21_30_reg;
reg  roundAndPackFloat64_31_32;
reg  roundAndPackFloat64_31_32_reg;
reg [63:0] roundAndPackFloat64_31_33;
reg [63:0] roundAndPackFloat64_31_33_reg;
reg [63:0] roundAndPackFloat64_shift64RightJammingexit_z0i;
reg [63:0] roundAndPackFloat64_shift64RightJammingexit_z0i_reg;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_tr3;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_tr3_reg;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_34;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_34_reg;
reg  roundAndPackFloat64_shift64RightJammingexit_35;
reg  roundAndPackFloat64_shift64RightJammingexit_35_reg;
reg [31:0] roundAndPackFloat64_36_37;
reg [31:0] roundAndPackFloat64_36_37_reg;
reg [31:0] roundAndPackFloat64_36_38;
reg [31:0] roundAndPackFloat64_36_38_reg;
reg [63:0] roundAndPackFloat64_thread_zSig5;
reg [63:0] roundAndPackFloat64_thread_zSig5_reg;
reg [31:0] roundAndPackFloat64_thread_02;
reg [31:0] roundAndPackFloat64_thread_02_reg;
reg [31:0] roundAndPackFloat64_thread_roundBits0;
reg [31:0] roundAndPackFloat64_thread_roundBits0_reg;
reg  roundAndPackFloat64_thread_39;
reg  roundAndPackFloat64_thread_39_reg;
reg [31:0] roundAndPackFloat64_40_41;
reg [31:0] roundAndPackFloat64_40_41_reg;
reg [31:0] roundAndPackFloat64_40_42;
reg [31:0] roundAndPackFloat64_40_42_reg;
reg [31:0] roundAndPackFloat64_thread6_roundBits09;
reg [31:0] roundAndPackFloat64_thread6_roundBits09_reg;
reg [31:0] roundAndPackFloat64_thread6_028;
reg [31:0] roundAndPackFloat64_thread6_028_reg;
reg [63:0] roundAndPackFloat64_thread6_zSig57;
reg [63:0] roundAndPackFloat64_thread6_zSig57_reg;
reg [63:0] roundAndPackFloat64_thread6_43;
reg [63:0] roundAndPackFloat64_thread6_43_reg;
reg [63:0] roundAndPackFloat64_thread6_44;
reg [63:0] roundAndPackFloat64_thread6_44_reg;
reg  roundAndPackFloat64_thread6_45;
reg  roundAndPackFloat64_thread6_45_reg;
reg [31:0] roundAndPackFloat64_thread6_46;
reg [31:0] roundAndPackFloat64_thread6_46_reg;
reg [31:0] roundAndPackFloat64_thread6_47;
reg [31:0] roundAndPackFloat64_thread6_47_reg;
reg [63:0] roundAndPackFloat64_thread6_48;
reg [63:0] roundAndPackFloat64_thread6_48_reg;
reg [63:0] roundAndPackFloat64_thread6_49;
reg [63:0] roundAndPackFloat64_thread6_49_reg;
reg  roundAndPackFloat64_thread6_50;
reg  roundAndPackFloat64_thread6_50_reg;
reg [63:0] roundAndPackFloat64_thread6_51;
reg [63:0] roundAndPackFloat64_thread6_51_reg;
reg [63:0] roundAndPackFloat64_thread6_52;
reg [63:0] roundAndPackFloat64_thread6_52_reg;
reg [63:0] roundAndPackFloat64_thread6_53;
reg [63:0] roundAndPackFloat64_thread6_53_reg;
reg [63:0] roundAndPackFloat64_thread6_op;
reg [63:0] roundAndPackFloat64_thread6_op_reg;
reg [63:0] roundAndPackFloat64_thread6_54;
reg [63:0] roundAndPackFloat64_thread6_54_reg;
reg [63:0] roundAndPackFloat64_thread6_55;
reg [63:0] roundAndPackFloat64_thread6_55_reg;
reg [63:0] roundAndPackFloat64_thread6_56;
reg [63:0] roundAndPackFloat64_thread6_56_reg;
reg [63:0] roundAndPackFloat64_57_0;
reg [63:0] roundAndPackFloat64_57_0_reg;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [7:0] countLeadingZeros32countLeadingZerosHigh_address_a;
wire  countLeadingZeros32countLeadingZerosHigh_write_enable_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_a;
wire [7:0] countLeadingZeros32countLeadingZerosHigh_address_b;
wire  countLeadingZeros32countLeadingZerosHigh_write_enable_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_b;
wire [5:0] a_input_address_a;
wire  a_input_write_enable_a;
wire [63:0] a_input_in_a;
wire [63:0] a_input_out_a;
wire [5:0] a_input_address_b;
wire  a_input_write_enable_b;
wire [63:0] a_input_in_b;
wire [63:0] a_input_out_b;
wire [5:0] b_input_address_a;
wire  b_input_write_enable_a;
wire [63:0] b_input_in_a;
wire [63:0] b_input_out_a;
wire [5:0] b_input_address_b;
wire  b_input_write_enable_b;
wire [63:0] b_input_in_b;
wire [63:0] b_input_out_b;
wire [5:0] z_output_address_a;
wire  z_output_write_enable_a;
wire [63:0] z_output_in_a;
wire [63:0] z_output_out_a;
wire [5:0] z_output_address_b;
wire  z_output_write_enable_b;
wire [63:0] z_output_in_b;
wire [63:0] z_output_out_b;

// Local Rams


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__0_1;
LEGUP_F_roundAndPackFloat64_BB__0_1:
	if ((roundAndPackFloat64_0_3 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__4_2;
	else if ((roundAndPackFloat64_0_3 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__11_5:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_6;
LEGUP_F_roundAndPackFloat64_BB__11_6:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_7;
LEGUP_F_roundAndPackFloat64_BB__11_7:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_8;
LEGUP_F_roundAndPackFloat64_BB__11_8:
		next_state = LEGUP_F_roundAndPackFloat64_BB__57_24;
LEGUP_F_roundAndPackFloat64_BB__17_9:
	if ((roundAndPackFloat64_17_18 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__19_10;
	else if ((roundAndPackFloat64_17_18 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__19_10:
	if ((roundAndPackFloat64_19_20 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__21_11;
	else if ((roundAndPackFloat64_19_20 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__31_12;
LEGUP_F_roundAndPackFloat64_BB__21_11:
		next_state = LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13;
LEGUP_F_roundAndPackFloat64_BB__31_12:
		next_state = LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13;
LEGUP_F_roundAndPackFloat64_BB__36_14:
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_15;
LEGUP_F_roundAndPackFloat64_BB__36_15:
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_16;
LEGUP_F_roundAndPackFloat64_BB__36_16:
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_17;
LEGUP_F_roundAndPackFloat64_BB__36_17:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__40_19:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_20;
LEGUP_F_roundAndPackFloat64_BB__40_20:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_21;
LEGUP_F_roundAndPackFloat64_BB__40_21:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_22;
LEGUP_F_roundAndPackFloat64_BB__40_22:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_23;
LEGUP_F_roundAndPackFloat64_BB__4_2:
	if ((roundAndPackFloat64_4_5 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_5;
	else if ((roundAndPackFloat64_4_5 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__6_3;
LEGUP_F_roundAndPackFloat64_BB__57_24:
		next_state = LEGUP_0;
LEGUP_F_roundAndPackFloat64_BB__6_3:
	if ((roundAndPackFloat64_6_7 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__8_4;
	else if ((roundAndPackFloat64_6_7 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__17_9;
LEGUP_F_roundAndPackFloat64_BB__8_4:
	if ((roundAndPackFloat64_8_10 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_5;
	else if ((roundAndPackFloat64_8_10 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13:
	if ((roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_23;
	else if ((roundAndPackFloat64_shift64RightJammingexit_35 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_14;
LEGUP_F_roundAndPackFloat64_BB_thread6_23:
		next_state = LEGUP_F_roundAndPackFloat64_BB__57_24;
LEGUP_F_roundAndPackFloat64_BB_thread_18:
	if ((roundAndPackFloat64_thread_39 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_23;
	else if ((roundAndPackFloat64_thread_39 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_19;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %.tr = trunc i64 %zSig to i32*/
		roundAndPackFloat64_0_tr = arg_zSig[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %.tr = trunc i64 %zSig to i32*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_tr_reg <= roundAndPackFloat64_0_tr;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_tr) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_tr_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %1 = and i32 %.tr, 1023*/
		roundAndPackFloat64_0_1 = (roundAndPackFloat64_0_tr & 32'd1023);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %1 = and i32 %.tr, 1023*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_1_reg <= roundAndPackFloat64_0_1;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %2 = and i32 %zExp, 65535*/
		roundAndPackFloat64_0_2 = (arg_zExp & 32'd65535);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %2 = and i32 %zExp, 65535*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_2_reg <= roundAndPackFloat64_0_2;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %3 = icmp ugt i32 %2, 2044*/
		roundAndPackFloat64_0_3 = (roundAndPackFloat64_0_2 > 32'd2044);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %3 = icmp ugt i32 %2, 2044*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_3_reg <= roundAndPackFloat64_0_3;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %4*/
	/*   %5 = icmp sgt i32 %zExp, 2045*/
		roundAndPackFloat64_4_5 = ($signed(arg_zExp) > $signed(32'd2045));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %4*/
	/*   %5 = icmp sgt i32 %zExp, 2045*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__4_2)) begin
		roundAndPackFloat64_4_5_reg <= roundAndPackFloat64_4_5;
		if (start == 1'b0 && ^(roundAndPackFloat64_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_4_5_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %6*/
	/*   %7 = icmp eq i32 %zExp, 2045*/
		roundAndPackFloat64_6_7 = (arg_zExp == 32'd2045);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %6*/
	/*   %7 = icmp eq i32 %zExp, 2045*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__6_3)) begin
		roundAndPackFloat64_6_7_reg <= roundAndPackFloat64_6_7;
		if (start == 1'b0 && ^(roundAndPackFloat64_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %8*/
	/*   %9 = add i64 %zSig, 512*/
		roundAndPackFloat64_8_9 = (arg_zSig + 64'd512);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %8*/
	/*   %9 = add i64 %zSig, 512*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4)) begin
		roundAndPackFloat64_8_9_reg <= roundAndPackFloat64_8_9;
		if (start == 1'b0 && ^(roundAndPackFloat64_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_8_9_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %8*/
	/*   %10 = icmp slt i64 %9, 0*/
		roundAndPackFloat64_8_10 = ($signed(roundAndPackFloat64_8_9) < $signed(64'd0));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %8*/
	/*   %10 = icmp slt i64 %9, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4)) begin
		roundAndPackFloat64_8_10_reg <= roundAndPackFloat64_8_10;
		if (start == 1'b0 && ^(roundAndPackFloat64_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_8_10_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		roundAndPackFloat64_11_12 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		roundAndPackFloat64_11_12_reg <= roundAndPackFloat64_11_12;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %13 = or i32 %12, 9*/
		roundAndPackFloat64_11_13 = (roundAndPackFloat64_11_12 | 32'd9);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %13 = or i32 %12, 9*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		roundAndPackFloat64_11_13_reg <= roundAndPackFloat64_11_13;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_13_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %14 = zext i32 %zSign to i64*/
		roundAndPackFloat64_11_14 = arg_zSign;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %14 = zext i32 %zSign to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_14_reg <= roundAndPackFloat64_11_14;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_14_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %15 = shl i64 %14, 63*/
		roundAndPackFloat64_11_15 = (roundAndPackFloat64_11_14 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %15 = shl i64 %14, 63*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_15_reg <= roundAndPackFloat64_11_15;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_15_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %16 = or i64 %15, 9218868437227405312*/
		roundAndPackFloat64_11_16 = (roundAndPackFloat64_11_15 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %16 = or i64 %15, 9218868437227405312*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_16_reg <= roundAndPackFloat64_11_16;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_16_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %17*/
	/*   %18 = icmp slt i32 %zExp, 0*/
		roundAndPackFloat64_17_18 = ($signed(arg_zExp) < $signed(32'd0));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %17*/
	/*   %18 = icmp slt i32 %zExp, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9)) begin
		roundAndPackFloat64_17_18_reg <= roundAndPackFloat64_17_18;
		if (start == 1'b0 && ^(roundAndPackFloat64_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_17_18_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %19*/
	/*   %20 = icmp sgt i32 %zExp, -64*/
		roundAndPackFloat64_19_20 = ($signed(arg_zExp) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %19*/
	/*   %20 = icmp sgt i32 %zExp, -64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__19_10)) begin
		roundAndPackFloat64_19_20_reg <= roundAndPackFloat64_19_20;
		if (start == 1'b0 && ^(roundAndPackFloat64_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_19_20_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %22 = sub nsw i32 0, %zExp*/
		roundAndPackFloat64_21_22 = (32'd0 - arg_zExp);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %22 = sub nsw i32 0, %zExp*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_22_reg <= roundAndPackFloat64_21_22;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_22_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %23 = zext i32 %22 to i64*/
		roundAndPackFloat64_21_23 = roundAndPackFloat64_21_22;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %23 = zext i32 %22 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_23_reg <= roundAndPackFloat64_21_23;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_23_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %24 = lshr i64 %zSig, %23*/
		roundAndPackFloat64_21_24 = (arg_zSig >>> (roundAndPackFloat64_21_23 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %24 = lshr i64 %zSig, %23*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_24_reg <= roundAndPackFloat64_21_24;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_24_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %25 = and i32 %zExp, 63*/
		roundAndPackFloat64_21_25 = (arg_zExp & 32'd63);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %25 = and i32 %zExp, 63*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_25_reg <= roundAndPackFloat64_21_25;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_25_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %26 = zext i32 %25 to i64*/
		roundAndPackFloat64_21_26 = roundAndPackFloat64_21_25;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %26 = zext i32 %25 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_26_reg <= roundAndPackFloat64_21_26;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_26_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %27 = shl i64 %zSig, %26*/
		roundAndPackFloat64_21_27 = (arg_zSig <<< (roundAndPackFloat64_21_26 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %27 = shl i64 %zSig, %26*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_27_reg <= roundAndPackFloat64_21_27;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_27_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %28 = icmp ne i64 %27, 0*/
		roundAndPackFloat64_21_28 = (roundAndPackFloat64_21_27 != 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %28 = icmp ne i64 %27, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_28_reg <= roundAndPackFloat64_21_28;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_28_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %29 = zext i1 %28 to i64*/
		roundAndPackFloat64_21_29 = roundAndPackFloat64_21_28;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %29 = zext i1 %28 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_29_reg <= roundAndPackFloat64_21_29;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_29_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %30 = or i64 %29, %24*/
		roundAndPackFloat64_21_30 = (roundAndPackFloat64_21_29 | roundAndPackFloat64_21_24);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %30 = or i64 %29, %24*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_30_reg <= roundAndPackFloat64_21_30;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_30_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %31*/
	/*   %32 = icmp ne i64 %zSig, 0*/
		roundAndPackFloat64_31_32 = (arg_zSig != 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %31*/
	/*   %32 = icmp ne i64 %zSig, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12)) begin
		roundAndPackFloat64_31_32_reg <= roundAndPackFloat64_31_32;
		if (start == 1'b0 && ^(roundAndPackFloat64_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_31_32_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %31*/
	/*   %33 = zext i1 %32 to i64*/
		roundAndPackFloat64_31_33 = roundAndPackFloat64_31_32;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %31*/
	/*   %33 = zext i1 %32 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12)) begin
		roundAndPackFloat64_31_33_reg <= roundAndPackFloat64_31_33;
		if (start == 1'b0 && ^(roundAndPackFloat64_31_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_31_33_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_shift64RightJammingexit_z0i = roundAndPackFloat64_21_30;
	end
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_shift64RightJammingexit_z0i = roundAndPackFloat64_31_33;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_shift64RightJammingexit_z0i_reg <= roundAndPackFloat64_shift64RightJammingexit_z0i;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_z0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_z0i_reg"); $finish; end
	end
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_shift64RightJammingexit_z0i_reg <= roundAndPackFloat64_shift64RightJammingexit_z0i;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_z0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_z0i_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %.tr3 = trunc i64 %z.0.i to i32*/
		roundAndPackFloat64_shift64RightJammingexit_tr3 = roundAndPackFloat64_shift64RightJammingexit_z0i_reg[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %.tr3 = trunc i64 %z.0.i to i32*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)) begin
		roundAndPackFloat64_shift64RightJammingexit_tr3_reg <= roundAndPackFloat64_shift64RightJammingexit_tr3;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_tr3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_tr3_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %34 = and i32 %.tr3, 1023*/
		roundAndPackFloat64_shift64RightJammingexit_34 = (roundAndPackFloat64_shift64RightJammingexit_tr3 & 32'd1023);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %34 = and i32 %.tr3, 1023*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)) begin
		roundAndPackFloat64_shift64RightJammingexit_34_reg <= roundAndPackFloat64_shift64RightJammingexit_34;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_34_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %35 = icmp eq i32 %34, 0*/
		roundAndPackFloat64_shift64RightJammingexit_35 = (roundAndPackFloat64_shift64RightJammingexit_34 == 32'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %35 = icmp eq i32 %34, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)) begin
		roundAndPackFloat64_shift64RightJammingexit_35_reg <= roundAndPackFloat64_shift64RightJammingexit_35;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_35_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		roundAndPackFloat64_36_37 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		roundAndPackFloat64_36_37_reg <= roundAndPackFloat64_36_37;
		if (start == 1'b0 && ^(roundAndPackFloat64_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_36_37_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %36*/
	/*   %38 = or i32 %37, 4*/
		roundAndPackFloat64_36_38 = (roundAndPackFloat64_36_37 | 32'd4);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %36*/
	/*   %38 = or i32 %37, 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		roundAndPackFloat64_36_38_reg <= roundAndPackFloat64_36_38;
		if (start == 1'b0 && ^(roundAndPackFloat64_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_36_38_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread_zSig5 = roundAndPackFloat64_shift64RightJammingexit_z0i_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_02 = arg_zExp;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_02 = 32'd2045;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_02 = arg_zExp;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread_02 = 32'd0;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_0_1;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_0_1_reg;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_0_1_reg;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_shift64RightJammingexit_34_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %39 = icmp eq i32 %roundBits.0, 0*/
		roundAndPackFloat64_thread_39 = (roundAndPackFloat64_thread_roundBits0_reg == 32'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %39 = icmp eq i32 %roundBits.0, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18)) begin
		roundAndPackFloat64_thread_39_reg <= roundAndPackFloat64_thread_39;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_39_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		roundAndPackFloat64_40_41 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		roundAndPackFloat64_40_41_reg <= roundAndPackFloat64_40_41;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_41_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %42 = or i32 %41, 1*/
		roundAndPackFloat64_40_42 = (roundAndPackFloat64_40_41 | 32'd1);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %40*/
	/*   %42 = or i32 %41, 1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		roundAndPackFloat64_40_42_reg <= roundAndPackFloat64_40_42;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_42_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_roundBits09 = roundAndPackFloat64_thread_roundBits0_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09_reg <= roundAndPackFloat64_thread6_roundBits09;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits09_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09_reg <= roundAndPackFloat64_thread6_roundBits09;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits09_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_roundBits09_reg <= roundAndPackFloat64_thread6_roundBits09;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits09_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_028 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_028 = roundAndPackFloat64_thread_02_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_028 = roundAndPackFloat64_thread_02_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_028_reg <= roundAndPackFloat64_thread6_028;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_028_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_028_reg <= roundAndPackFloat64_thread6_028;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_028_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_028_reg <= roundAndPackFloat64_thread6_028;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_028_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57 = roundAndPackFloat64_shift64RightJammingexit_z0i_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57 = roundAndPackFloat64_thread_zSig5_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_zSig57 = roundAndPackFloat64_thread_zSig5_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57_reg <= roundAndPackFloat64_thread6_zSig57;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_zSig57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_zSig57_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57_reg <= roundAndPackFloat64_thread6_zSig57;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_zSig57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_zSig57_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_zSig57_reg <= roundAndPackFloat64_thread6_zSig57;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_zSig57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_zSig57_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %43 = add i64 %zSig57, 512*/
		roundAndPackFloat64_thread6_43 = (roundAndPackFloat64_thread6_zSig57_reg + 64'd512);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %43 = add i64 %zSig57, 512*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_43_reg <= roundAndPackFloat64_thread6_43;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_43_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %44 = lshr i64 %43, 10*/
		roundAndPackFloat64_thread6_44 = (roundAndPackFloat64_thread6_43 >>> (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %44 = lshr i64 %43, 10*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_44_reg <= roundAndPackFloat64_thread6_44;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_44_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %45 = icmp eq i32 %roundBits.09, 512*/
		roundAndPackFloat64_thread6_45 = (roundAndPackFloat64_thread6_roundBits09_reg == 32'd512);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %45 = icmp eq i32 %roundBits.09, 512*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_45_reg <= roundAndPackFloat64_thread6_45;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_45_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %46 = zext i1 %45 to i32*/
		roundAndPackFloat64_thread6_46 = roundAndPackFloat64_thread6_45;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %46 = zext i1 %45 to i32*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_46_reg <= roundAndPackFloat64_thread6_46;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_46_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %47 = xor i32 %46, -1*/
		roundAndPackFloat64_thread6_47 = (roundAndPackFloat64_thread6_46 ^ -32'd1);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %47 = xor i32 %46, -1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_47_reg <= roundAndPackFloat64_thread6_47;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_47_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %48 = sext i32 %47 to i64*/
		roundAndPackFloat64_thread6_48 = $signed(roundAndPackFloat64_thread6_47);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %48 = sext i32 %47 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_48_reg <= roundAndPackFloat64_thread6_48;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_48_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %49 = and i64 %44, %48*/
		roundAndPackFloat64_thread6_49 = (roundAndPackFloat64_thread6_44 & roundAndPackFloat64_thread6_48);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %49 = and i64 %44, %48*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_49_reg <= roundAndPackFloat64_thread6_49;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_49_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %50 = icmp eq i64 %49, 0*/
		roundAndPackFloat64_thread6_50 = (roundAndPackFloat64_thread6_49 == 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %50 = icmp eq i64 %49, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_50_reg <= roundAndPackFloat64_thread6_50;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_50_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %51 = zext i32 %zSign to i64*/
		roundAndPackFloat64_thread6_51 = arg_zSign;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %51 = zext i32 %zSign to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_51_reg <= roundAndPackFloat64_thread6_51;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_51_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %52 = shl i64 %51, 63*/
		roundAndPackFloat64_thread6_52 = (roundAndPackFloat64_thread6_51 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %52 = shl i64 %51, 63*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_52_reg <= roundAndPackFloat64_thread6_52;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_52_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %53 = zext i32 %.028 to i64*/
		roundAndPackFloat64_thread6_53 = roundAndPackFloat64_thread6_028_reg;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %53 = zext i32 %.028 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_53_reg <= roundAndPackFloat64_thread6_53;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_53_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.op = shl i64 %53, 52*/
		roundAndPackFloat64_thread6_op = (roundAndPackFloat64_thread6_53 <<< (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.op = shl i64 %53, 52*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_op_reg <= roundAndPackFloat64_thread6_op;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_op) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_op_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %54 = select i1 %50, i64 0, i64 %.op*/
		roundAndPackFloat64_thread6_54 = (roundAndPackFloat64_thread6_50 ? 64'd0 : roundAndPackFloat64_thread6_op);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %54 = select i1 %50, i64 0, i64 %.op*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_54_reg <= roundAndPackFloat64_thread6_54;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_54_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %55 = or i64 %49, %52*/
		roundAndPackFloat64_thread6_55 = (roundAndPackFloat64_thread6_49 | roundAndPackFloat64_thread6_52);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %55 = or i64 %49, %52*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_55_reg <= roundAndPackFloat64_thread6_55;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_55_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %56 = add i64 %54, %55*/
		roundAndPackFloat64_thread6_56 = (roundAndPackFloat64_thread6_54 + roundAndPackFloat64_thread6_55);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %56 = add i64 %54, %55*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_56_reg <= roundAndPackFloat64_thread6_56;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_56_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_8) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0 = roundAndPackFloat64_11_16_reg;
	end
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_57_0 = roundAndPackFloat64_thread6_56;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_8) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0_reg <= roundAndPackFloat64_57_0;
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_57_0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0_reg <= roundAndPackFloat64_57_0;
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_57_0_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* roundAndPackFloat64: %57*/
	/*   ret i64 %.0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__57_24)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_in_a = roundAndPackFloat64_11_13;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_in_a = roundAndPackFloat64_36_38;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_in_a = roundAndPackFloat64_40_42;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* roundAndPackFloat64: %57*/
	/*   ret i64 %.0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__57_24)) begin
		return_val <= roundAndPackFloat64_57_0_reg;
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB__1_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__1_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB__14_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB__20_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB__22_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB__26_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB__32_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB__34_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB__44_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB__47_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB__49_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB__51_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB__55_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB__58_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB__65_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB__67_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB__76_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB__79_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB__80_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB__85_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB__90_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexit9i_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexit9i_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexit9i_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB__100_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB__100_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB__102_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB__108_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB__110_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB__111_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB__116_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB__116_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB__116_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB__116_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB__119_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB__120_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB__122_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB__124_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB__126_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB__130_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB__135_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB__142_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB__144_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB__153_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexit3i_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB__157_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB__162_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB__164_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB__168_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB__174_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB__176_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB__186_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexiti_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB__190_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB__194_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB__201_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_73 = 7'd73;
parameter [6:0] LEGUP_F_main_BB_float64_addexit_74 = 7'd74;
parameter [6:0] LEGUP_F_main_BB_float64_addexit_75 = 7'd75;
parameter [6:0] LEGUP_F_main_BB__219_76 = 7'd76;
parameter [6:0] LEGUP_F_main_BB__222_77 = 7'd77;
parameter [6:0] LEGUP_F_main_BB__224_78 = 7'd78;
parameter [6:0] LEGUP_F_main_BB__226_79 = 7'd79;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [6:0] LEGUP_function_call_32 = 7'd32;
parameter [6:0] LEGUP_function_call_72 = 7'd72;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] main_1_main_result02;
reg [31:0] main_1_main_result02_reg;
reg [31:0] main_1_i01;
reg [31:0] main_1_i01_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3_reg;
reg [63:0] main_1_2;
reg [63:0] main_1_2_reg;
reg [63:0] main_1_3;
reg [63:0] main_1_3_reg;
reg [63:0] main_1_4;
reg [63:0] main_1_4_reg;
reg [31:0] main_1_5;
reg [31:0] main_1_5_reg;
reg [63:0] main_1_6;
reg [63:0] main_1_6_reg;
reg [31:0] main_1_7;
reg [31:0] main_1_7_reg;
reg  main_1_8;
reg  main_1_8_reg;
reg [63:0] main_1_9;
reg [63:0] main_1_9_reg;
reg [31:0] main_1_trii;
reg [31:0] main_1_trii_reg;
reg [31:0] main_1_10;
reg [31:0] main_1_10_reg;
reg [63:0] main_1_11;
reg [63:0] main_1_11_reg;
reg [31:0] main_1_tri17i;
reg [31:0] main_1_tri17i_reg;
reg [31:0] main_1_12;
reg [31:0] main_1_12_reg;
reg [31:0] main_1_13;
reg [31:0] main_1_13_reg;
reg [63:0] main_14_15;
reg [63:0] main_14_15_reg;
reg [63:0] main_14_16;
reg [63:0] main_14_16_reg;
reg [63:0] main_14_17;
reg [63:0] main_14_17_reg;
reg [63:0] main_14_18;
reg [63:0] main_14_18_reg;
reg  main_14_19;
reg  main_14_19_reg;
reg  main_20_21;
reg  main_20_21_reg;
reg  main_22_23;
reg  main_22_23_reg;
reg [62:0] main_float64_is_signaling_nanexit1i10i_24;
reg [62:0] main_float64_is_signaling_nanexit1i10i_24_reg;
reg  main_float64_is_signaling_nanexit1i10i_25;
reg  main_float64_is_signaling_nanexit1i10i_25_reg;
reg [63:0] main_float64_is_signaling_nanexit1i10i_mux2vi14i;
reg [63:0] main_float64_is_signaling_nanexit1i10i_mux2vi14i_reg;
reg [63:0] main_float64_is_signaling_nanexit1i10i_mux2i15i;
reg [63:0] main_float64_is_signaling_nanexit1i10i_mux2i15i_reg;
reg  main_26_27;
reg  main_26_27_reg;
reg [63:0] main_26_28;
reg [63:0] main_26_28_reg;
reg [63:0] main_26_29;
reg [63:0] main_26_29_reg;
reg [31:0] main_26_30;
reg [31:0] main_26_30_reg;
reg [31:0] main_26_expDiff0i;
reg [31:0] main_26_expDiff0i_reg;
reg  main_26_31;
reg  main_26_31_reg;
reg  main_32_33;
reg  main_32_33_reg;
reg [63:0] main_34_35;
reg [63:0] main_34_35_reg;
reg [63:0] main_34_36;
reg [63:0] main_34_36_reg;
reg [31:0] main_34_37;
reg [31:0] main_34_37_reg;
reg [31:0] main_34_38;
reg [31:0] main_34_38_reg;
reg [63:0] main_34_39;
reg [63:0] main_34_39_reg;
reg [63:0] main_34_40;
reg [63:0] main_34_40_reg;
reg  main_34_41;
reg  main_34_41_reg;
reg [63:0] main_34_42;
reg [63:0] main_34_42_reg;
reg [63:0] main_34_43;
reg [63:0] main_34_43_reg;
reg  main_44_45;
reg  main_44_45_reg;
reg [63:0] main_44_46;
reg [63:0] main_44_46_reg;
reg  main_47_48;
reg  main_47_48_reg;
reg  main_49_50;
reg  main_49_50_reg;
reg  main_51_52;
reg  main_51_52_reg;
reg [62:0] main_float64_is_signaling_nanexit1i1i_53;
reg [62:0] main_float64_is_signaling_nanexit1i1i_53_reg;
reg  main_float64_is_signaling_nanexit1i1i_54;
reg  main_float64_is_signaling_nanexit1i1i_54_reg;
reg [63:0] main_float64_is_signaling_nanexit1i1i_mux2vi5i;
reg [63:0] main_float64_is_signaling_nanexit1i1i_mux2vi5i_reg;
reg [63:0] main_float64_is_signaling_nanexit1i1i_mux2i6i;
reg [63:0] main_float64_is_signaling_nanexit1i1i_mux2i6i_reg;
reg [63:0] main_55_56;
reg [63:0] main_55_56_reg;
reg [63:0] main_55_57;
reg [63:0] main_55_57_reg;
reg  main_58_59;
reg  main_58_59_reg;
reg [63:0] main_58_60;
reg [63:0] main_58_60_reg;
reg [63:0] main_58_61;
reg [63:0] main_58_61_reg;
reg [31:0] main_58_62;
reg [31:0] main_58_62_reg;
reg [31:0] main_58_expDiff1i;
reg [31:0] main_58_expDiff1i_reg;
reg [31:0] main_58_63;
reg [31:0] main_58_63_reg;
reg  main_58_64;
reg  main_58_64_reg;
reg  main_65_66;
reg  main_65_66_reg;
reg [63:0] main_67_68;
reg [63:0] main_67_68_reg;
reg [63:0] main_67_69;
reg [63:0] main_67_69_reg;
reg [31:0] main_67_70;
reg [31:0] main_67_70_reg;
reg [63:0] main_67_71;
reg [63:0] main_67_71_reg;
reg [63:0] main_67_72;
reg [63:0] main_67_72_reg;
reg  main_67_73;
reg  main_67_73_reg;
reg [63:0] main_67_74;
reg [63:0] main_67_74_reg;
reg [63:0] main_67_75;
reg [63:0] main_67_75_reg;
reg  main_76_77;
reg  main_76_77_reg;
reg [63:0] main_76_78;
reg [63:0] main_76_78_reg;
reg [63:0] main_80_81;
reg [63:0] main_80_81_reg;
reg  main_80_82;
reg  main_80_82_reg;
reg [62:0] main_float64_is_signaling_nanexit1ii_83;
reg [62:0] main_float64_is_signaling_nanexit1ii_83_reg;
reg  main_float64_is_signaling_nanexit1ii_84;
reg  main_float64_is_signaling_nanexit1ii_84_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii_mux2vii;
reg [63:0] main_float64_is_signaling_nanexit1ii_mux2vii_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii_mux2ii;
reg [63:0] main_float64_is_signaling_nanexit1ii_mux2ii_reg;
reg [63:0] main_85_86;
reg [63:0] main_85_86_reg;
reg [63:0] main_85_87;
reg [63:0] main_85_87_reg;
reg [63:0] main_85_88;
reg [63:0] main_85_88_reg;
reg [63:0] main_85_89;
reg [63:0] main_85_89_reg;
reg [63:0] main_90_91;
reg [63:0] main_90_91_reg;
reg [63:0] main_90_92;
reg [63:0] main_90_92_reg;
reg [63:0] main_shift64RightJammingexit9i_93;
reg [63:0] main_shift64RightJammingexit9i_93_reg;
reg [63:0] main_shift64RightJammingexit9i_94;
reg [63:0] main_shift64RightJammingexit9i_94_reg;
reg [31:0] main_shift64RightJammingexit9i_zExp0i;
reg [31:0] main_shift64RightJammingexit9i_zExp0i_reg;
reg [63:0] main_shift64RightJammingexit9i_95;
reg [63:0] main_shift64RightJammingexit9i_95_reg;
reg [63:0] main_shift64RightJammingexit9i_96;
reg [63:0] main_shift64RightJammingexit9i_96_reg;
reg [63:0] main_shift64RightJammingexit9i_97;
reg [63:0] main_shift64RightJammingexit9i_97_reg;
reg  main_shift64RightJammingexit9i_98;
reg  main_shift64RightJammingexit9i_98_reg;
reg  main_shift64RightJammingexit9i_noti;
reg  main_shift64RightJammingexit9i_noti_reg;
reg [31:0] main_shift64RightJammingexit9i_99;
reg [31:0] main_shift64RightJammingexit9i_99_reg;
reg [31:0] main_shift64RightJammingexit9i_zExp0i_var0;
reg [31:0] main_shift64RightJammingexit9i_zExp0i_var0_reg;
reg [63:0] main_shift64RightJammingexit9i_i;
reg [63:0] main_shift64RightJammingexit9i_i_reg;
reg [31:0] main_100_zExp1i;
reg [31:0] main_100_zExp1i_reg;
reg [63:0] main_100_zSig0i;
reg [63:0] main_100_zSig0i_reg;
reg [63:0] main_100_101;
reg [63:0] main_100_101_reg;
reg [63:0] main_102_103;
reg [63:0] main_102_103_reg;
reg [63:0] main_102_104;
reg [63:0] main_102_104_reg;
reg [63:0] main_102_105;
reg [63:0] main_102_105_reg;
reg [63:0] main_102_106;
reg [63:0] main_102_106_reg;
reg  main_102_107;
reg  main_102_107_reg;
reg  main_108_109;
reg  main_108_109_reg;
reg [63:0] main_111_112;
reg [63:0] main_111_112_reg;
reg  main_111_113;
reg  main_111_113_reg;
reg [62:0] main_float64_is_signaling_nanexit1i11i_114;
reg [62:0] main_float64_is_signaling_nanexit1i11i_114_reg;
reg  main_float64_is_signaling_nanexit1i11i_115;
reg  main_float64_is_signaling_nanexit1i11i_115_reg;
reg [63:0] main_float64_is_signaling_nanexit1i11i_mux2vi15i;
reg [63:0] main_float64_is_signaling_nanexit1i11i_mux2vi15i_reg;
reg [63:0] main_float64_is_signaling_nanexit1i11i_mux2i16i;
reg [63:0] main_float64_is_signaling_nanexit1i11i_mux2i16i_reg;
reg [31:0] main_116_117;
reg [31:0] main_116_117_reg;
reg [31:0] main_116_118;
reg [31:0] main_116_118_reg;
reg [31:0] main_120_aExp0i;
reg [31:0] main_120_aExp0i_reg;
reg [31:0] main_120_bExp0i;
reg [31:0] main_120_bExp0i_reg;
reg  main_120_121;
reg  main_120_121_reg;
reg  main_122_123;
reg  main_122_123_reg;
reg  main_124_125;
reg  main_124_125_reg;
reg  main_126_127;
reg  main_126_127_reg;
reg [62:0] main_float64_is_signaling_nanexit1i4i_128;
reg [62:0] main_float64_is_signaling_nanexit1i4i_128_reg;
reg  main_float64_is_signaling_nanexit1i4i_129;
reg  main_float64_is_signaling_nanexit1i4i_129_reg;
reg [63:0] main_float64_is_signaling_nanexit1i4i_mux2vi8i;
reg [63:0] main_float64_is_signaling_nanexit1i4i_mux2vi8i_reg;
reg [63:0] main_float64_is_signaling_nanexit1i4i_mux2i9i;
reg [63:0] main_float64_is_signaling_nanexit1i4i_mux2i9i_reg;
reg [31:0] main_130_131;
reg [31:0] main_130_131_reg;
reg [63:0] main_130_132;
reg [63:0] main_130_132_reg;
reg [63:0] main_130_133;
reg [63:0] main_130_133_reg;
reg [63:0] main_130_134;
reg [63:0] main_130_134_reg;
reg  main_135_136;
reg  main_135_136_reg;
reg [63:0] main_135_137;
reg [63:0] main_135_137_reg;
reg [63:0] main_135_138;
reg [63:0] main_135_138_reg;
reg [31:0] main_135_139;
reg [31:0] main_135_139_reg;
reg [31:0] main_135_expDiff0i3;
reg [31:0] main_135_expDiff0i3_reg;
reg [31:0] main_135_140;
reg [31:0] main_135_140_reg;
reg  main_135_141;
reg  main_135_141_reg;
reg  main_142_143;
reg  main_142_143_reg;
reg [63:0] main_144_145;
reg [63:0] main_144_145_reg;
reg [63:0] main_144_146;
reg [63:0] main_144_146_reg;
reg [31:0] main_144_147;
reg [31:0] main_144_147_reg;
reg [63:0] main_144_148;
reg [63:0] main_144_148_reg;
reg [63:0] main_144_149;
reg [63:0] main_144_149_reg;
reg  main_144_150;
reg  main_144_150_reg;
reg [63:0] main_144_151;
reg [63:0] main_144_151_reg;
reg [63:0] main_144_152;
reg [63:0] main_144_152_reg;
reg  main_153_154;
reg  main_153_154_reg;
reg [63:0] main_153_155;
reg [63:0] main_153_155_reg;
reg [63:0] main_shift64RightJammingexit3i_z0i2i;
reg [63:0] main_shift64RightJammingexit3i_z0i2i_reg;
reg [63:0] main_shift64RightJammingexit3i_156;
reg [63:0] main_shift64RightJammingexit3i_156_reg;
reg [63:0] main_157_158;
reg [63:0] main_157_158_reg;
reg [63:0] main_157_159;
reg [63:0] main_157_159_reg;
reg [31:0] main_157_bExp1i;
reg [31:0] main_157_bExp1i_reg;
reg [63:0] main_157_160;
reg [63:0] main_157_160_reg;
reg [31:0] main_157_161;
reg [31:0] main_157_161_reg;
reg  main_162_163;
reg  main_162_163_reg;
reg  main_164_165;
reg  main_164_165_reg;
reg [62:0] main_float64_is_signaling_nanexit1ii4_166;
reg [62:0] main_float64_is_signaling_nanexit1ii4_166_reg;
reg  main_float64_is_signaling_nanexit1ii4_167;
reg  main_float64_is_signaling_nanexit1ii4_167_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii4_mux2vii8;
reg [63:0] main_float64_is_signaling_nanexit1ii4_mux2vii8_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii4_mux2ii9;
reg [63:0] main_float64_is_signaling_nanexit1ii4_mux2ii9_reg;
reg  main_168_169;
reg  main_168_169_reg;
reg [63:0] main_168_170;
reg [63:0] main_168_170_reg;
reg [63:0] main_168_171;
reg [63:0] main_168_171_reg;
reg [31:0] main_168_172;
reg [31:0] main_168_172_reg;
reg [31:0] main_168_expDiff1i11;
reg [31:0] main_168_expDiff1i11_reg;
reg  main_168_173;
reg  main_168_173_reg;
reg  main_174_175;
reg  main_174_175_reg;
reg [63:0] main_176_177;
reg [63:0] main_176_177_reg;
reg [63:0] main_176_178;
reg [63:0] main_176_178_reg;
reg [31:0] main_176_179;
reg [31:0] main_176_179_reg;
reg [31:0] main_176_180;
reg [31:0] main_176_180_reg;
reg [63:0] main_176_181;
reg [63:0] main_176_181_reg;
reg [63:0] main_176_182;
reg [63:0] main_176_182_reg;
reg  main_176_183;
reg  main_176_183_reg;
reg [63:0] main_176_184;
reg [63:0] main_176_184_reg;
reg [63:0] main_176_185;
reg [63:0] main_176_185_reg;
reg  main_186_187;
reg  main_186_187_reg;
reg [63:0] main_186_188;
reg [63:0] main_186_188_reg;
reg [63:0] main_shift64RightJammingexiti_z0ii;
reg [63:0] main_shift64RightJammingexiti_z0ii_reg;
reg [63:0] main_shift64RightJammingexiti_189;
reg [63:0] main_shift64RightJammingexiti_189_reg;
reg [63:0] main_190_191;
reg [63:0] main_190_191_reg;
reg [63:0] main_190_192;
reg [63:0] main_190_192_reg;
reg [31:0] main_190_aExp1i;
reg [31:0] main_190_aExp1i_reg;
reg [63:0] main_190_193;
reg [63:0] main_190_193_reg;
reg [31:0] main_194_0i12;
reg [31:0] main_194_0i12_reg;
reg [31:0] main_194_zExp0i13;
reg [31:0] main_194_zExp0i13_reg;
reg [63:0] main_194_zSig0i14;
reg [63:0] main_194_zSig0i14_reg;
reg [31:0] main_194_195;
reg [31:0] main_194_195_reg;
reg  main_194_196;
reg  main_194_196_reg;
reg [63:0] main_194_197;
reg [63:0] main_194_197_reg;
reg [63:0] main_194_asinkiii;
reg [63:0] main_194_asinkiii_reg;
reg [31:0] main_194_extracttiii;
reg [31:0] main_194_extracttiii_reg;
reg  main_194_198;
reg  main_194_198_reg;
reg [31:0] main_194_199;
reg [31:0] main_194_199_reg;
reg [31:0] main_194_aiiii;
reg [31:0] main_194_aiiii_reg;
reg [31:0] main_194_iiii;
reg [31:0] main_194_iiii_reg;
reg  main_194_200;
reg  main_194_200_reg;
reg [31:0] main_201_202;
reg [31:0] main_201_202_reg;
reg [31:0] main_201_203;
reg [31:0] main_201_203_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_1iiii;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_1iiii_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_204;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_204_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeRoundAndPackFloat64exiti_205;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeRoundAndPackFloat64exiti_205_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_206;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_206_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_207;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_207_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_208;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_208_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_209;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_209_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_210;
reg [31:0] main_normalizeRoundAndPackFloat64exiti_210_reg;
reg [63:0] main_normalizeRoundAndPackFloat64exiti_211;
reg [63:0] main_normalizeRoundAndPackFloat64exiti_211_reg;
reg [63:0] main_normalizeRoundAndPackFloat64exiti_212;
reg [63:0] main_normalizeRoundAndPackFloat64exiti_212_reg;
reg [63:0] main_normalizeRoundAndPackFloat64exiti_213;
reg [63:0] main_normalizeRoundAndPackFloat64exiti_213_reg;
reg [63:0] main_float64_addexit_0i;
reg [63:0] main_float64_addexit_0i_reg;
reg [63:0] main_float64_addexit_214;
reg [63:0] main_float64_addexit_214_reg;
reg  main_float64_addexit_215;
reg  main_float64_addexit_215_reg;
reg [31:0] main_float64_addexit_216;
reg [31:0] main_float64_addexit_216_reg;
reg [31:0] main_float64_addexit_217;
reg [31:0] main_float64_addexit_217_reg;
reg [31:0] main_float64_addexit_218;
reg [31:0] main_float64_addexit_218_reg;
reg  main_float64_addexit_exitcond1;
reg  main_float64_addexit_exitcond1_reg;
reg  main_219_221;
reg  main_219_221_reg;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [7:0] countLeadingZeros32countLeadingZerosHigh_address_a;
reg  countLeadingZeros32countLeadingZerosHigh_write_enable_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_a;
wire [7:0] countLeadingZeros32countLeadingZerosHigh_address_b;
wire  countLeadingZeros32countLeadingZerosHigh_write_enable_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_b;
reg [5:0] a_input_address_a;
reg  a_input_write_enable_a;
wire [63:0] a_input_in_a;
wire [63:0] a_input_out_a;
wire [5:0] a_input_address_b;
wire  a_input_write_enable_b;
wire [63:0] a_input_in_b;
wire [63:0] a_input_out_b;
reg [5:0] b_input_address_a;
reg  b_input_write_enable_a;
wire [63:0] b_input_in_a;
wire [63:0] b_input_out_a;
wire [5:0] b_input_address_b;
wire  b_input_write_enable_b;
wire [63:0] b_input_in_b;
wire [63:0] b_input_out_b;
reg [5:0] z_output_address_a;
reg  z_output_write_enable_a;
wire [63:0] z_output_in_a;
wire [63:0] z_output_out_a;
wire [5:0] z_output_address_b;
wire  z_output_write_enable_b;
wire [63:0] z_output_in_b;
wire [63:0] z_output_out_b;
reg  roundAndPackFloat64_start;
reg [31:0] roundAndPackFloat64_arg_zSign;
reg [31:0] roundAndPackFloat64_arg_zExp;
reg [63:0] roundAndPackFloat64_arg_zSig;
wire  roundAndPackFloat64_memory_controller_enable_a;
wire  roundAndPackFloat64_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] roundAndPackFloat64_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_out_a;
wire [1:0] roundAndPackFloat64_memory_controller_size_a;
wire  roundAndPackFloat64_memory_controller_enable_b;
wire  roundAndPackFloat64_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] roundAndPackFloat64_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_out_b;
wire [1:0] roundAndPackFloat64_memory_controller_size_b;
reg  roundAndPackFloat64_memory_controller_waitrequest;
reg  roundAndPackFloat64_finish_final;
reg  roundAndPackFloat64_finish_reg;
wire  roundAndPackFloat64_finish;
wire [63:0] roundAndPackFloat64_return_val;
reg [63:0] roundAndPackFloat64_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;


roundAndPackFloat64 roundAndPackFloat64 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (roundAndPackFloat64_memory_controller_enable_a),
	.memory_controller_address_a (roundAndPackFloat64_memory_controller_address_a),
	.memory_controller_write_enable_a (roundAndPackFloat64_memory_controller_write_enable_a),
	.memory_controller_in_a (roundAndPackFloat64_memory_controller_in_a),
	.memory_controller_size_a (roundAndPackFloat64_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (roundAndPackFloat64_memory_controller_enable_b),
	.memory_controller_address_b (roundAndPackFloat64_memory_controller_address_b),
	.memory_controller_write_enable_b (roundAndPackFloat64_memory_controller_write_enable_b),
	.memory_controller_in_b (roundAndPackFloat64_memory_controller_in_b),
	.memory_controller_size_b (roundAndPackFloat64_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (roundAndPackFloat64_start),
	.finish (roundAndPackFloat64_finish),
	.return_val (roundAndPackFloat64_return_val),
	.arg_zSign (roundAndPackFloat64_arg_zSign),
	.arg_zExp (roundAndPackFloat64_arg_zExp),
	.arg_zSig (roundAndPackFloat64_arg_zSig)
);

defparam
	roundAndPackFloat64.tag_offset = tag_offset;

// Local Rams


// @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4,...
rom_dual_port countLeadingZeros32countLeadingZerosHigh (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( countLeadingZeros32countLeadingZerosHigh_address_a ),
	.address_b( countLeadingZeros32countLeadingZerosHigh_address_b ),
	.q_a( countLeadingZeros32countLeadingZerosHigh_out_a ),
	.q_b( countLeadingZeros32countLeadingZerosHigh_out_b)
);
defparam countLeadingZeros32countLeadingZerosHigh.width_a = 32;
defparam countLeadingZeros32countLeadingZerosHigh.width_b = 32;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_a = 8;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_b = 8;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_a = 256;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_b = 256;
defparam countLeadingZeros32countLeadingZerosHigh.latency = 1;
defparam countLeadingZeros32countLeadingZerosHigh.init_file = "countLeadingZeros32countLeadingZerosHigh.mif";


// @a_input = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4611686018427387904, i64 4607182418800017408, i64 46071824188000174...
rom_dual_port a_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( a_input_address_a ),
	.address_b( a_input_address_b ),
	.q_a( a_input_out_a ),
	.q_b( a_input_out_b)
);
defparam a_input.width_a = 64;
defparam a_input.width_b = 64;
defparam a_input.widthad_a = 6;
defparam a_input.widthad_b = 6;
defparam a_input.numwords_a = 46;
defparam a_input.numwords_b = 46;
defparam a_input.latency = 1;
defparam a_input.init_file = "a_input.mif";


// @b_input = internal unnamed_addr constant [46 x i64] [i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656, i64 9221120237041090560, i64 9218868437227405312, i64 4611686018...
rom_dual_port b_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( b_input_address_a ),
	.address_b( b_input_address_b ),
	.q_a( b_input_out_a ),
	.q_b( b_input_out_b)
);
defparam b_input.width_a = 64;
defparam b_input.width_b = 64;
defparam b_input.widthad_a = 6;
defparam b_input.widthad_b = 6;
defparam b_input.numwords_a = 46;
defparam b_input.numwords_b = 46;
defparam b_input.latency = 1;
defparam b_input.init_file = "b_input.mif";


// @z_output = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4615063718147915776, i64 9221120237041090560, i64 9218868437227405...
rom_dual_port z_output (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( z_output_address_a ),
	.address_b( z_output_address_b ),
	.q_a( z_output_out_a ),
	.q_b( z_output_out_b)
);
defparam z_output.width_a = 64;
defparam z_output.width_b = 64;
defparam z_output.widthad_a = 6;
defparam z_output.widthad_b = 6;
defparam z_output.numwords_a = 46;
defparam z_output.numwords_b = 46;
defparam z_output.latency = 1;
defparam z_output.init_file = "z_output.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %219*/
	/*   %220 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str, i32 0, i32 0), i32 %217) #1*/
	if ((cur_state == LEGUP_F_main_BB__219_76)) begin
		$write("Result: %d", $signed(main_float64_addexit_217_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_float64_addexit_217_reg) === 1'bX) finish <= 0;
	end
	/* main: %222*/
	/*   %223 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__222_77)) begin
		$write("RESULT: PASS");
	end
	/* main: %224*/
	/*   %225 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__224_78)) begin
		$write("RESULT: FAIL");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__100_31:
		next_state = LEGUP_function_call_32;
LEGUP_F_main_BB__100_33:
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB__102_34:
	if ((main_102_107 == 1'd1))
		next_state = LEGUP_F_main_BB__162_58;
	else if ((main_102_107 == 1'd0))
		next_state = LEGUP_F_main_BB__108_35;
LEGUP_F_main_BB__108_35:
	if ((main_108_109 == 1'd1))
		next_state = LEGUP_F_main_BB__124_47;
	else if ((main_108_109 == 1'd0))
		next_state = LEGUP_F_main_BB__110_36;
LEGUP_F_main_BB__110_36:
	if ((main_1_10_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__111_37;
	else if ((main_1_10_reg == 32'd0))
		next_state = LEGUP_F_main_BB__119_44;
	else if ((main_1_10_reg != 32'd2047) && (main_1_10_reg != 32'd0))
		next_state = LEGUP_F_main_BB__120_45;
LEGUP_F_main_BB__111_37:
	if ((main_111_113 == 1'd1))
		next_state = LEGUP_F_main_BB__116_40;
	else if ((main_111_113 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_38;
LEGUP_F_main_BB__116_40:
		next_state = LEGUP_F_main_BB__116_41;
LEGUP_F_main_BB__116_41:
		next_state = LEGUP_F_main_BB__116_42;
LEGUP_F_main_BB__116_42:
		next_state = LEGUP_F_main_BB__116_43;
LEGUP_F_main_BB__116_43:
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB__119_44:
		next_state = LEGUP_F_main_BB__120_45;
LEGUP_F_main_BB__120_45:
	if ((main_120_121 == 1'd1))
		next_state = LEGUP_F_main_BB__190_67;
	else if ((main_120_121 == 1'd0))
		next_state = LEGUP_F_main_BB__122_46;
LEGUP_F_main_BB__122_46:
	if ((main_122_123 == 1'd1))
		next_state = LEGUP_F_main_BB__157_57;
	else if ((main_122_123 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB__124_47:
	if ((main_124_125 == 1'd1))
		next_state = LEGUP_F_main_BB__126_48;
	else if ((main_124_125 == 1'd0))
		next_state = LEGUP_F_main_BB__135_52;
LEGUP_F_main_BB__126_48:
	if ((main_126_127 == 1'd1))
		next_state = LEGUP_F_main_BB__130_51;
	else if ((main_126_127 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_49;
LEGUP_F_main_BB__130_51:
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB__135_52:
	if ((main_135_141 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3i_56;
	else if ((main_135_141 == 1'd0))
		next_state = LEGUP_F_main_BB__142_53;
LEGUP_F_main_BB__142_53:
	if ((main_142_143 == 1'd1))
		next_state = LEGUP_F_main_BB__144_54;
	else if ((main_142_143 == 1'd0))
		next_state = LEGUP_F_main_BB__153_55;
LEGUP_F_main_BB__144_54:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3i_56;
LEGUP_F_main_BB__14_3:
	if ((main_14_19 == 1'd1))
		next_state = LEGUP_F_main_BB__20_4;
	else if ((main_14_19 == 1'd0))
		next_state = LEGUP_F_main_BB__47_12;
LEGUP_F_main_BB__153_55:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3i_56;
LEGUP_F_main_BB__157_57:
		next_state = LEGUP_F_main_BB__194_68;
LEGUP_F_main_BB__162_58:
	if ((main_162_163 == 1'd1))
		next_state = LEGUP_F_main_BB__164_59;
	else if ((main_162_163 == 1'd0))
		next_state = LEGUP_F_main_BB__168_62;
LEGUP_F_main_BB__164_59:
	if ((main_164_165 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_addexit_74;
	else if ((main_164_165 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_60;
LEGUP_F_main_BB__168_62:
	if ((main_168_173 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexiti_66;
	else if ((main_168_173 == 1'd0))
		next_state = LEGUP_F_main_BB__174_63;
LEGUP_F_main_BB__174_63:
	if ((main_174_175 == 1'd1))
		next_state = LEGUP_F_main_BB__176_64;
	else if ((main_174_175 == 1'd0))
		next_state = LEGUP_F_main_BB__186_65;
LEGUP_F_main_BB__176_64:
		next_state = LEGUP_F_main_BB_shift64RightJammingexiti_66;
LEGUP_F_main_BB__186_65:
		next_state = LEGUP_F_main_BB_shift64RightJammingexiti_66;
LEGUP_F_main_BB__190_67:
		next_state = LEGUP_F_main_BB__194_68;
LEGUP_F_main_BB__194_68:
	if ((main_194_200 == 1'd1))
		next_state = LEGUP_F_main_BB__201_69;
	else if ((main_194_200 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70;
LEGUP_F_main_BB__1_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_2:
	if ((main_1_8 == 1'd1))
		next_state = LEGUP_F_main_BB__14_3;
	else if ((main_1_8 == 1'd0))
		next_state = LEGUP_F_main_BB__102_34;
LEGUP_F_main_BB__201_69:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70;
LEGUP_F_main_BB__20_4:
	if ((main_20_21 == 1'd1))
		next_state = LEGUP_F_main_BB__22_5;
	else if ((main_20_21 == 1'd0))
		next_state = LEGUP_F_main_BB__26_8;
LEGUP_F_main_BB__219_76:
	if ((main_219_221 == 1'd1))
		next_state = LEGUP_F_main_BB__222_77;
	else if ((main_219_221 == 1'd0))
		next_state = LEGUP_F_main_BB__224_78;
LEGUP_F_main_BB__222_77:
		next_state = LEGUP_F_main_BB__226_79;
LEGUP_F_main_BB__224_78:
		next_state = LEGUP_F_main_BB__226_79;
LEGUP_F_main_BB__226_79:
		next_state = LEGUP_0;
LEGUP_F_main_BB__22_5:
	if ((main_22_23 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_addexit_74;
	else if ((main_22_23 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_6;
LEGUP_F_main_BB__26_8:
	if ((main_26_31 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9i_28;
	else if ((main_26_31 == 1'd0))
		next_state = LEGUP_F_main_BB__32_9;
LEGUP_F_main_BB__32_9:
	if ((main_32_33 == 1'd1))
		next_state = LEGUP_F_main_BB__34_10;
	else if ((main_32_33 == 1'd0))
		next_state = LEGUP_F_main_BB__44_11;
LEGUP_F_main_BB__34_10:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9i_28;
LEGUP_F_main_BB__44_11:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9i_28;
LEGUP_F_main_BB__47_12:
	if ((main_47_48 == 1'd1))
		next_state = LEGUP_F_main_BB__49_13;
	else if ((main_47_48 == 1'd0))
		next_state = LEGUP_F_main_BB__79_22;
LEGUP_F_main_BB__49_13:
	if ((main_49_50 == 1'd1))
		next_state = LEGUP_F_main_BB__51_14;
	else if ((main_49_50 == 1'd0))
		next_state = LEGUP_F_main_BB__58_18;
LEGUP_F_main_BB__51_14:
	if ((main_51_52 == 1'd1))
		next_state = LEGUP_F_main_BB__55_17;
	else if ((main_51_52 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_15;
LEGUP_F_main_BB__55_17:
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB__58_18:
	if ((main_58_64 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9i_28;
	else if ((main_58_64 == 1'd0))
		next_state = LEGUP_F_main_BB__65_19;
LEGUP_F_main_BB__65_19:
	if ((main_65_66 == 1'd1))
		next_state = LEGUP_F_main_BB__67_20;
	else if ((main_65_66 == 1'd0))
		next_state = LEGUP_F_main_BB__76_21;
LEGUP_F_main_BB__67_20:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9i_28;
LEGUP_F_main_BB__76_21:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9i_28;
LEGUP_F_main_BB__79_22:
	if ((main_1_10_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__80_23;
	else if ((main_1_10_reg == 32'd0))
		next_state = LEGUP_F_main_BB__85_26;
	else if ((main_1_10_reg != 32'd2047) && (main_1_10_reg != 32'd0))
		next_state = LEGUP_F_main_BB__90_27;
LEGUP_F_main_BB__80_23:
	if ((main_80_82 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_addexit_74;
	else if ((main_80_82 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_24;
LEGUP_F_main_BB__85_26:
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB__90_27:
		next_state = LEGUP_F_main_BB__100_31;
LEGUP_F_main_BB_float64_addexit_74:
		next_state = LEGUP_F_main_BB_float64_addexit_75;
LEGUP_F_main_BB_float64_addexit_75:
	if ((main_float64_addexit_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB__219_76;
	else if ((main_float64_addexit_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_6:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_7;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_7:
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_38:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_39;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_39:
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_15:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_16;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_16:
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_49:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_50;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_50:
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_60:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_61;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_61:
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_24:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25:
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71:
		next_state = LEGUP_function_call_72;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_73:
		next_state = LEGUP_F_main_BB_float64_addexit_74;
LEGUP_F_main_BB_shift64RightJammingexit3i_56:
		next_state = LEGUP_F_main_BB__157_57;
LEGUP_F_main_BB_shift64RightJammingexit9i_28:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9i_29;
LEGUP_F_main_BB_shift64RightJammingexit9i_29:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9i_30;
LEGUP_F_main_BB_shift64RightJammingexit9i_30:
		next_state = LEGUP_F_main_BB__100_31;
LEGUP_F_main_BB_shift64RightJammingexiti_66:
		next_state = LEGUP_F_main_BB__190_67;
LEGUP_function_call_32:
	if ((roundAndPackFloat64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__100_33;
LEGUP_function_call_72:
	if ((roundAndPackFloat64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_73;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %217, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02 = 32'd0;
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %217, %float64_add.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_addexit_75) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond1_reg == 1'd0))) */ begin
		main_1_main_result02 = main_float64_addexit_217;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %217, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %217, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_addexit_75) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond1_reg == 1'd0))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %218, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_i01 = 32'd0;
	end
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %218, %float64_add.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_addexit_75) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond1_reg == 1'd0))) */ begin
		main_1_i01 = main_float64_addexit_218_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %218, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_i01_reg <= main_1_i01;
		if (start == 1'b0 && ^(main_1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg"); $finish; end
	end
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %218, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_addexit_75) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond1_reg == 1'd0))) begin
		main_1_i01_reg <= main_1_i01;
		if (start == 1'b0 && ^(main_1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [46 x i64]* @z_output, i32 0, i32 %i.01*/
		main_1_scevgep = (1'd0 | (8 * main_1_i01_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [46 x i64]* @z_output, i32 0, i32 %i.01*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep_reg <= main_1_scevgep;
		if (start == 1'b0 && ^(main_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep2 = getelementptr [46 x i64]* @b_input, i32 0, i32 %i.01*/
		main_1_scevgep2 = (1'd0 | (8 * main_1_i01_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep2 = getelementptr [46 x i64]* @b_input, i32 0, i32 %i.01*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep2_reg <= main_1_scevgep2;
		if (start == 1'b0 && ^(main_1_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep3 = getelementptr [46 x i64]* @a_input, i32 0, i32 %i.01*/
		main_1_scevgep3 = (1'd0 | (8 * main_1_i01_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep3 = getelementptr [46 x i64]* @a_input, i32 0, i32 %i.01*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep3_reg <= main_1_scevgep3;
		if (start == 1'b0 && ^(main_1_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = load i64* %scevgep3, align 8, !tbaa !1*/
		main_1_2 = a_input_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = load i64* %scevgep2, align 8, !tbaa !1*/
		main_1_3 = b_input_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = lshr i64 %2, 63*/
		main_1_4 = (main_1_2 >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = lshr i64 %2, 63*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = trunc i64 %4 to i32*/
		main_1_5 = main_1_4[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = trunc i64 %4 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %6 = lshr i64 %3, 63*/
		main_1_6 = (main_1_3 >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %6 = lshr i64 %3, 63*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_6_reg <= main_1_6;
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %7 = trunc i64 %6 to i32*/
		main_1_7 = main_1_6[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %7 = trunc i64 %6 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_7_reg <= main_1_7;
		if (start == 1'b0 && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %8 = icmp eq i32 %5, %7*/
		main_1_8 = (main_1_5 == main_1_7);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %8 = icmp eq i32 %5, %7*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_8_reg <= main_1_8;
		if (start == 1'b0 && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %9 = lshr i64 %2, 52*/
		main_1_9 = (main_1_2 >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = lshr i64 %2, 52*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_9_reg <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %.tr.i.i = trunc i64 %9 to i32*/
		main_1_trii = main_1_9[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %.tr.i.i = trunc i64 %9 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_trii_reg <= main_1_trii;
		if (start == 1'b0 && ^(main_1_trii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_trii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %10 = and i32 %.tr.i.i, 2047*/
		main_1_10 = (main_1_trii & 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %10 = and i32 %.tr.i.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_10_reg <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %11 = lshr i64 %3, 52*/
		main_1_11 = (main_1_3 >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %11 = lshr i64 %3, 52*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_11_reg <= main_1_11;
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %.tr.i17.i = trunc i64 %11 to i32*/
		main_1_tri17i = main_1_11[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %.tr.i17.i = trunc i64 %11 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_tri17i_reg <= main_1_tri17i;
		if (start == 1'b0 && ^(main_1_tri17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tri17i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %12 = and i32 %.tr.i17.i, 2047*/
		main_1_12 = (main_1_tri17i & 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = and i32 %.tr.i17.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_12_reg <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %13 = sub nsw i32 %10, %12*/
		main_1_13 = (main_1_10 - main_1_12);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %13 = sub nsw i32 %10, %12*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_13_reg <= main_1_13;
		if (start == 1'b0 && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %14*/
	/*   %15 = shl i64 %2, 9*/
		main_14_15 = (main_1_2_reg <<< (64'd9 % 64'd64));
end
always @(posedge clk) begin
	/* main: %14*/
	/*   %15 = shl i64 %2, 9*/
	if ((cur_state == LEGUP_F_main_BB__14_3)) begin
		main_14_15_reg <= main_14_15;
		if (start == 1'b0 && ^(main_14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_14_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %14*/
	/*   %16 = and i64 %15, 2305843009213693440*/
		main_14_16 = (main_14_15 & 64'd2305843009213693440);
end
always @(posedge clk) begin
	/* main: %14*/
	/*   %16 = and i64 %15, 2305843009213693440*/
	if ((cur_state == LEGUP_F_main_BB__14_3)) begin
		main_14_16_reg <= main_14_16;
		if (start == 1'b0 && ^(main_14_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_14_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %14*/
	/*   %17 = shl i64 %3, 9*/
		main_14_17 = (main_1_3_reg <<< (64'd9 % 64'd64));
end
always @(posedge clk) begin
	/* main: %14*/
	/*   %17 = shl i64 %3, 9*/
	if ((cur_state == LEGUP_F_main_BB__14_3)) begin
		main_14_17_reg <= main_14_17;
		if (start == 1'b0 && ^(main_14_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_14_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %14*/
	/*   %18 = and i64 %17, 2305843009213693440*/
		main_14_18 = (main_14_17 & 64'd2305843009213693440);
end
always @(posedge clk) begin
	/* main: %14*/
	/*   %18 = and i64 %17, 2305843009213693440*/
	if ((cur_state == LEGUP_F_main_BB__14_3)) begin
		main_14_18_reg <= main_14_18;
		if (start == 1'b0 && ^(main_14_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_14_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %14*/
	/*   %19 = icmp sgt i32 %13, 0*/
		main_14_19 = ($signed(main_1_13_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %14*/
	/*   %19 = icmp sgt i32 %13, 0*/
	if ((cur_state == LEGUP_F_main_BB__14_3)) begin
		main_14_19_reg <= main_14_19;
		if (start == 1'b0 && ^(main_14_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_14_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %21 = icmp eq i32 %10, 2047*/
		main_20_21 = (main_1_10_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %21 = icmp eq i32 %10, 2047*/
	if ((cur_state == LEGUP_F_main_BB__20_4)) begin
		main_20_21_reg <= main_20_21;
		if (start == 1'b0 && ^(main_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %22*/
	/*   %23 = icmp eq i64 %16, 0*/
		main_22_23 = (main_14_16_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %22*/
	/*   %23 = icmp eq i64 %16, 0*/
	if ((cur_state == LEGUP_F_main_BB__22_5)) begin
		main_22_23_reg <= main_22_23;
		if (start == 1'b0 && ^(main_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %24 = trunc i64 %3 to i63*/
		main_float64_is_signaling_nanexit1i10i_24 = main_1_3_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %24 = trunc i64 %3 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_6)) begin
		main_float64_is_signaling_nanexit1i10i_24_reg <= main_float64_is_signaling_nanexit1i10i_24;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10i_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10i_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %25 = icmp ugt i63 %24, -4503599627370496*/
		main_float64_is_signaling_nanexit1i10i_25 = (main_float64_is_signaling_nanexit1i10i_24 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %25 = icmp ugt i63 %24, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_6)) begin
		main_float64_is_signaling_nanexit1i10i_25_reg <= main_float64_is_signaling_nanexit1i10i_25;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10i_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10i_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %.mux2.v.i14.i = select i1 %25, i64 %3, i64 %2*/
		main_float64_is_signaling_nanexit1i10i_mux2vi14i = (main_float64_is_signaling_nanexit1i10i_25_reg ? main_1_3_reg : main_1_2_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %.mux2.v.i14.i = select i1 %25, i64 %3, i64 %2*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_7)) begin
		main_float64_is_signaling_nanexit1i10i_mux2vi14i_reg <= main_float64_is_signaling_nanexit1i10i_mux2vi14i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10i_mux2vi14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10i_mux2vi14i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %.mux2.i15.i = or i64 %.mux2.v.i14.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1i10i_mux2i15i = (main_float64_is_signaling_nanexit1i10i_mux2vi14i | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i*/
	/*   %.mux2.i15.i = or i64 %.mux2.v.i14.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_7)) begin
		main_float64_is_signaling_nanexit1i10i_mux2i15i_reg <= main_float64_is_signaling_nanexit1i10i_mux2i15i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10i_mux2i15i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10i_mux2i15i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %27 = icmp eq i32 %12, 0*/
		main_26_27 = (main_1_12_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %27 = icmp eq i32 %12, 0*/
	if ((cur_state == LEGUP_F_main_BB__26_8)) begin
		main_26_27_reg <= main_26_27;
		if (start == 1'b0 && ^(main_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %28 = or i64 %18, 2305843009213693952*/
		main_26_28 = (main_14_18_reg | 64'd2305843009213693952);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %28 = or i64 %18, 2305843009213693952*/
	if ((cur_state == LEGUP_F_main_BB__26_8)) begin
		main_26_28_reg <= main_26_28;
		if (start == 1'b0 && ^(main_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %29 = select i1 %27, i64 %18, i64 %28*/
		main_26_29 = (main_26_27 ? main_14_18_reg : main_26_28);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %29 = select i1 %27, i64 %18, i64 %28*/
	if ((cur_state == LEGUP_F_main_BB__26_8)) begin
		main_26_29_reg <= main_26_29;
		if (start == 1'b0 && ^(main_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %30 = sext i1 %27 to i32*/
		main_26_30 = $signed(main_26_27);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %30 = sext i1 %27 to i32*/
	if ((cur_state == LEGUP_F_main_BB__26_8)) begin
		main_26_30_reg <= main_26_30;
		if (start == 1'b0 && ^(main_26_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %expDiff.0.i = add nsw i32 %30, %13*/
		main_26_expDiff0i = (main_26_30 + main_1_13_reg);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %expDiff.0.i = add nsw i32 %30, %13*/
	if ((cur_state == LEGUP_F_main_BB__26_8)) begin
		main_26_expDiff0i_reg <= main_26_expDiff0i;
		if (start == 1'b0 && ^(main_26_expDiff0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_expDiff0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %31 = icmp eq i32 %expDiff.0.i, 0*/
		main_26_31 = (main_26_expDiff0i == 32'd0);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %31 = icmp eq i32 %expDiff.0.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__26_8)) begin
		main_26_31_reg <= main_26_31;
		if (start == 1'b0 && ^(main_26_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %32*/
	/*   %33 = icmp slt i32 %expDiff.0.i, 64*/
		main_32_33 = ($signed(main_26_expDiff0i_reg) < $signed(32'd64));
end
always @(posedge clk) begin
	/* main: %32*/
	/*   %33 = icmp slt i32 %expDiff.0.i, 64*/
	if ((cur_state == LEGUP_F_main_BB__32_9)) begin
		main_32_33_reg <= main_32_33;
		if (start == 1'b0 && ^(main_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %35 = zext i32 %expDiff.0.i to i64*/
		main_34_35 = main_26_expDiff0i_reg;
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %35 = zext i32 %expDiff.0.i to i64*/
	if ((cur_state == LEGUP_F_main_BB__34_10)) begin
		main_34_35_reg <= main_34_35;
		if (start == 1'b0 && ^(main_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %36 = lshr i64 %29, %35*/
		main_34_36 = (main_26_29_reg >>> (main_34_35 % 64'd64));
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %36 = lshr i64 %29, %35*/
	if ((cur_state == LEGUP_F_main_BB__34_10)) begin
		main_34_36_reg <= main_34_36;
		if (start == 1'b0 && ^(main_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %37 = sub nsw i32 0, %expDiff.0.i*/
		main_34_37 = (32'd0 - main_26_expDiff0i_reg);
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %37 = sub nsw i32 0, %expDiff.0.i*/
	if ((cur_state == LEGUP_F_main_BB__34_10)) begin
		main_34_37_reg <= main_34_37;
		if (start == 1'b0 && ^(main_34_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %38 = and i32 %37, 63*/
		main_34_38 = (main_34_37 & 32'd63);
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %38 = and i32 %37, 63*/
	if ((cur_state == LEGUP_F_main_BB__34_10)) begin
		main_34_38_reg <= main_34_38;
		if (start == 1'b0 && ^(main_34_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %39 = zext i32 %38 to i64*/
		main_34_39 = main_34_38;
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %39 = zext i32 %38 to i64*/
	if ((cur_state == LEGUP_F_main_BB__34_10)) begin
		main_34_39_reg <= main_34_39;
		if (start == 1'b0 && ^(main_34_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %40 = shl i64 %29, %39*/
		main_34_40 = (main_26_29_reg <<< (main_34_39 % 64'd64));
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %40 = shl i64 %29, %39*/
	if ((cur_state == LEGUP_F_main_BB__34_10)) begin
		main_34_40_reg <= main_34_40;
		if (start == 1'b0 && ^(main_34_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %41 = icmp ne i64 %40, 0*/
		main_34_41 = (main_34_40 != 64'd0);
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %41 = icmp ne i64 %40, 0*/
	if ((cur_state == LEGUP_F_main_BB__34_10)) begin
		main_34_41_reg <= main_34_41;
		if (start == 1'b0 && ^(main_34_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %42 = zext i1 %41 to i64*/
		main_34_42 = main_34_41;
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %42 = zext i1 %41 to i64*/
	if ((cur_state == LEGUP_F_main_BB__34_10)) begin
		main_34_42_reg <= main_34_42;
		if (start == 1'b0 && ^(main_34_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %43 = or i64 %42, %36*/
		main_34_43 = (main_34_42 | main_34_36);
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %43 = or i64 %42, %36*/
	if ((cur_state == LEGUP_F_main_BB__34_10)) begin
		main_34_43_reg <= main_34_43;
		if (start == 1'b0 && ^(main_34_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %44*/
	/*   %45 = icmp ne i64 %29, 0*/
		main_44_45 = (main_26_29_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %44*/
	/*   %45 = icmp ne i64 %29, 0*/
	if ((cur_state == LEGUP_F_main_BB__44_11)) begin
		main_44_45_reg <= main_44_45;
		if (start == 1'b0 && ^(main_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_44_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %44*/
	/*   %46 = zext i1 %45 to i64*/
		main_44_46 = main_44_45;
end
always @(posedge clk) begin
	/* main: %44*/
	/*   %46 = zext i1 %45 to i64*/
	if ((cur_state == LEGUP_F_main_BB__44_11)) begin
		main_44_46_reg <= main_44_46;
		if (start == 1'b0 && ^(main_44_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_44_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %48 = icmp slt i32 %13, 0*/
		main_47_48 = ($signed(main_1_13_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %48 = icmp slt i32 %13, 0*/
	if ((cur_state == LEGUP_F_main_BB__47_12)) begin
		main_47_48_reg <= main_47_48;
		if (start == 1'b0 && ^(main_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %50 = icmp eq i32 %12, 2047*/
		main_49_50 = (main_1_12_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %50 = icmp eq i32 %12, 2047*/
	if ((cur_state == LEGUP_F_main_BB__49_13)) begin
		main_49_50_reg <= main_49_50;
		if (start == 1'b0 && ^(main_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %52 = icmp eq i64 %18, 0*/
		main_51_52 = (main_14_18_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %52 = icmp eq i64 %18, 0*/
	if ((cur_state == LEGUP_F_main_BB__51_14)) begin
		main_51_52_reg <= main_51_52;
		if (start == 1'b0 && ^(main_51_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i*/
	/*   %53 = trunc i64 %3 to i63*/
		main_float64_is_signaling_nanexit1i1i_53 = main_1_3_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i*/
	/*   %53 = trunc i64 %3 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_15)) begin
		main_float64_is_signaling_nanexit1i1i_53_reg <= main_float64_is_signaling_nanexit1i1i_53;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1i_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1i_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i*/
	/*   %54 = icmp ugt i63 %53, -4503599627370496*/
		main_float64_is_signaling_nanexit1i1i_54 = (main_float64_is_signaling_nanexit1i1i_53 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i*/
	/*   %54 = icmp ugt i63 %53, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_15)) begin
		main_float64_is_signaling_nanexit1i1i_54_reg <= main_float64_is_signaling_nanexit1i1i_54;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1i_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1i_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i*/
	/*   %.mux2.v.i5.i = select i1 %54, i64 %3, i64 %2*/
		main_float64_is_signaling_nanexit1i1i_mux2vi5i = (main_float64_is_signaling_nanexit1i1i_54_reg ? main_1_3_reg : main_1_2_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i*/
	/*   %.mux2.v.i5.i = select i1 %54, i64 %3, i64 %2*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_16)) begin
		main_float64_is_signaling_nanexit1i1i_mux2vi5i_reg <= main_float64_is_signaling_nanexit1i1i_mux2vi5i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1i_mux2vi5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1i_mux2vi5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i*/
	/*   %.mux2.i6.i = or i64 %.mux2.v.i5.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1i1i_mux2i6i = (main_float64_is_signaling_nanexit1i1i_mux2vi5i | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i*/
	/*   %.mux2.i6.i = or i64 %.mux2.v.i5.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_16)) begin
		main_float64_is_signaling_nanexit1i1i_mux2i6i_reg <= main_float64_is_signaling_nanexit1i1i_mux2i6i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1i_mux2i6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1i_mux2i6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %56 = shl nuw i64 %4, 63*/
		main_55_56 = (main_1_4_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %56 = shl nuw i64 %4, 63*/
	if ((cur_state == LEGUP_F_main_BB__55_17)) begin
		main_55_56_reg <= main_55_56;
		if (start == 1'b0 && ^(main_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %57 = or i64 %56, 9218868437227405312*/
		main_55_57 = (main_55_56 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %57 = or i64 %56, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__55_17)) begin
		main_55_57_reg <= main_55_57;
		if (start == 1'b0 && ^(main_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %59 = icmp eq i32 %10, 0*/
		main_58_59 = (main_1_10_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %59 = icmp eq i32 %10, 0*/
	if ((cur_state == LEGUP_F_main_BB__58_18)) begin
		main_58_59_reg <= main_58_59;
		if (start == 1'b0 && ^(main_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %60 = or i64 %16, 2305843009213693952*/
		main_58_60 = (main_14_16_reg | 64'd2305843009213693952);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %60 = or i64 %16, 2305843009213693952*/
	if ((cur_state == LEGUP_F_main_BB__58_18)) begin
		main_58_60_reg <= main_58_60;
		if (start == 1'b0 && ^(main_58_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %61 = select i1 %59, i64 %16, i64 %60*/
		main_58_61 = (main_58_59 ? main_14_16_reg : main_58_60);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %61 = select i1 %59, i64 %16, i64 %60*/
	if ((cur_state == LEGUP_F_main_BB__58_18)) begin
		main_58_61_reg <= main_58_61;
		if (start == 1'b0 && ^(main_58_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %62 = zext i1 %59 to i32*/
		main_58_62 = main_58_59;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %62 = zext i1 %59 to i32*/
	if ((cur_state == LEGUP_F_main_BB__58_18)) begin
		main_58_62_reg <= main_58_62;
		if (start == 1'b0 && ^(main_58_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %expDiff.1.i = add nsw i32 %13, %62*/
		main_58_expDiff1i = (main_1_13_reg + main_58_62);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %expDiff.1.i = add nsw i32 %13, %62*/
	if ((cur_state == LEGUP_F_main_BB__58_18)) begin
		main_58_expDiff1i_reg <= main_58_expDiff1i;
		if (start == 1'b0 && ^(main_58_expDiff1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_expDiff1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %63 = sub nsw i32 0, %expDiff.1.i*/
		main_58_63 = (32'd0 - main_58_expDiff1i);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %63 = sub nsw i32 0, %expDiff.1.i*/
	if ((cur_state == LEGUP_F_main_BB__58_18)) begin
		main_58_63_reg <= main_58_63;
		if (start == 1'b0 && ^(main_58_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %64 = icmp eq i32 %expDiff.1.i, 0*/
		main_58_64 = (main_58_expDiff1i == 32'd0);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %64 = icmp eq i32 %expDiff.1.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__58_18)) begin
		main_58_64_reg <= main_58_64;
		if (start == 1'b0 && ^(main_58_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %65*/
	/*   %66 = icmp sgt i32 %expDiff.1.i, -64*/
		main_65_66 = ($signed(main_58_expDiff1i_reg) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* main: %65*/
	/*   %66 = icmp sgt i32 %expDiff.1.i, -64*/
	if ((cur_state == LEGUP_F_main_BB__65_19)) begin
		main_65_66_reg <= main_65_66;
		if (start == 1'b0 && ^(main_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_65_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %68 = zext i32 %63 to i64*/
		main_67_68 = main_58_63_reg;
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %68 = zext i32 %63 to i64*/
	if ((cur_state == LEGUP_F_main_BB__67_20)) begin
		main_67_68_reg <= main_67_68;
		if (start == 1'b0 && ^(main_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %69 = lshr i64 %61, %68*/
		main_67_69 = (main_58_61_reg >>> (main_67_68 % 64'd64));
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %69 = lshr i64 %61, %68*/
	if ((cur_state == LEGUP_F_main_BB__67_20)) begin
		main_67_69_reg <= main_67_69;
		if (start == 1'b0 && ^(main_67_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %70 = and i32 %expDiff.1.i, 63*/
		main_67_70 = (main_58_expDiff1i_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %70 = and i32 %expDiff.1.i, 63*/
	if ((cur_state == LEGUP_F_main_BB__67_20)) begin
		main_67_70_reg <= main_67_70;
		if (start == 1'b0 && ^(main_67_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %71 = zext i32 %70 to i64*/
		main_67_71 = main_67_70;
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %71 = zext i32 %70 to i64*/
	if ((cur_state == LEGUP_F_main_BB__67_20)) begin
		main_67_71_reg <= main_67_71;
		if (start == 1'b0 && ^(main_67_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %72 = shl i64 %61, %71*/
		main_67_72 = (main_58_61_reg <<< (main_67_71 % 64'd64));
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %72 = shl i64 %61, %71*/
	if ((cur_state == LEGUP_F_main_BB__67_20)) begin
		main_67_72_reg <= main_67_72;
		if (start == 1'b0 && ^(main_67_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %73 = icmp ne i64 %72, 0*/
		main_67_73 = (main_67_72 != 64'd0);
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %73 = icmp ne i64 %72, 0*/
	if ((cur_state == LEGUP_F_main_BB__67_20)) begin
		main_67_73_reg <= main_67_73;
		if (start == 1'b0 && ^(main_67_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %74 = zext i1 %73 to i64*/
		main_67_74 = main_67_73;
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %74 = zext i1 %73 to i64*/
	if ((cur_state == LEGUP_F_main_BB__67_20)) begin
		main_67_74_reg <= main_67_74;
		if (start == 1'b0 && ^(main_67_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %75 = or i64 %74, %69*/
		main_67_75 = (main_67_74 | main_67_69);
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %75 = or i64 %74, %69*/
	if ((cur_state == LEGUP_F_main_BB__67_20)) begin
		main_67_75_reg <= main_67_75;
		if (start == 1'b0 && ^(main_67_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %77 = icmp ne i64 %61, 0*/
		main_76_77 = (main_58_61_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %77 = icmp ne i64 %61, 0*/
	if ((cur_state == LEGUP_F_main_BB__76_21)) begin
		main_76_77_reg <= main_76_77;
		if (start == 1'b0 && ^(main_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %78 = zext i1 %77 to i64*/
		main_76_78 = main_76_77;
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %78 = zext i1 %77 to i64*/
	if ((cur_state == LEGUP_F_main_BB__76_21)) begin
		main_76_78_reg <= main_76_78;
		if (start == 1'b0 && ^(main_76_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %81 = or i64 %18, %16*/
		main_80_81 = (main_14_18_reg | main_14_16_reg);
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %81 = or i64 %18, %16*/
	if ((cur_state == LEGUP_F_main_BB__80_23)) begin
		main_80_81_reg <= main_80_81;
		if (start == 1'b0 && ^(main_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %82 = icmp eq i64 %81, 0*/
		main_80_82 = (main_80_81 == 64'd0);
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %82 = icmp eq i64 %81, 0*/
	if ((cur_state == LEGUP_F_main_BB__80_23)) begin
		main_80_82_reg <= main_80_82;
		if (start == 1'b0 && ^(main_80_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %83 = trunc i64 %3 to i63*/
		main_float64_is_signaling_nanexit1ii_83 = main_1_3_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %83 = trunc i64 %3 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_24)) begin
		main_float64_is_signaling_nanexit1ii_83_reg <= main_float64_is_signaling_nanexit1ii_83;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %84 = icmp ugt i63 %83, -4503599627370496*/
		main_float64_is_signaling_nanexit1ii_84 = (main_float64_is_signaling_nanexit1ii_83 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %84 = icmp ugt i63 %83, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_24)) begin
		main_float64_is_signaling_nanexit1ii_84_reg <= main_float64_is_signaling_nanexit1ii_84;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.mux2.v.i.i = select i1 %84, i64 %3, i64 %2*/
		main_float64_is_signaling_nanexit1ii_mux2vii = (main_float64_is_signaling_nanexit1ii_84_reg ? main_1_3_reg : main_1_2_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.mux2.v.i.i = select i1 %84, i64 %3, i64 %2*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25)) begin
		main_float64_is_signaling_nanexit1ii_mux2vii_reg <= main_float64_is_signaling_nanexit1ii_mux2vii;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_mux2vii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_mux2vii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.mux2.i.i = or i64 %.mux2.v.i.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1ii_mux2ii = (main_float64_is_signaling_nanexit1ii_mux2vii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.mux2.i.i = or i64 %.mux2.v.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25)) begin
		main_float64_is_signaling_nanexit1ii_mux2ii_reg <= main_float64_is_signaling_nanexit1ii_mux2ii;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_mux2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_mux2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %85*/
	/*   %86 = add nuw nsw i64 %18, %16*/
		main_85_86 = (main_14_18_reg + main_14_16_reg);
end
always @(posedge clk) begin
	/* main: %85*/
	/*   %86 = add nuw nsw i64 %18, %16*/
	if ((cur_state == LEGUP_F_main_BB__85_26)) begin
		main_85_86_reg <= main_85_86;
		if (start == 1'b0 && ^(main_85_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_85_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %85*/
	/*   %87 = lshr exact i64 %86, 9*/
		main_85_87 = (main_85_86 >>> (64'd9 % 64'd64));
end
always @(posedge clk) begin
	/* main: %85*/
	/*   %87 = lshr exact i64 %86, 9*/
	if ((cur_state == LEGUP_F_main_BB__85_26)) begin
		main_85_87_reg <= main_85_87;
		if (start == 1'b0 && ^(main_85_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_85_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %85*/
	/*   %88 = shl nuw i64 %4, 63*/
		main_85_88 = (main_1_4_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %85*/
	/*   %88 = shl nuw i64 %4, 63*/
	if ((cur_state == LEGUP_F_main_BB__85_26)) begin
		main_85_88_reg <= main_85_88;
		if (start == 1'b0 && ^(main_85_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_85_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %85*/
	/*   %89 = or i64 %87, %88*/
		main_85_89 = (main_85_87 | main_85_88);
end
always @(posedge clk) begin
	/* main: %85*/
	/*   %89 = or i64 %87, %88*/
	if ((cur_state == LEGUP_F_main_BB__85_26)) begin
		main_85_89_reg <= main_85_89;
		if (start == 1'b0 && ^(main_85_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_85_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %91 = or i64 %16, 4611686018427387904*/
		main_90_91 = (main_14_16_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %91 = or i64 %16, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__90_27)) begin
		main_90_91_reg <= main_90_91;
		if (start == 1'b0 && ^(main_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %92 = add nuw i64 %91, %18*/
		main_90_92 = (main_90_91 + main_14_18_reg);
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %92 = add nuw i64 %91, %18*/
	if ((cur_state == LEGUP_F_main_BB__90_27)) begin
		main_90_92_reg <= main_90_92;
		if (start == 1'b0 && ^(main_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ]*/
	if ((((cur_state == LEGUP_F_main_BB__26_8) & (memory_controller_waitrequest == 1'd0)) & (main_26_31 == 1'd1))) begin
		main_shift64RightJammingexit9i_93 = main_14_16_reg;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ]*/
	else if (((cur_state == LEGUP_F_main_BB__34_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_93 = main_14_16_reg;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ]*/
	else if (((cur_state == LEGUP_F_main_BB__44_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_93 = main_14_16_reg;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__58_18) & (memory_controller_waitrequest == 1'd0)) & (main_58_64 == 1'd1))) begin
		main_shift64RightJammingexit9i_93 = main_58_61;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ]*/
	else if (((cur_state == LEGUP_F_main_BB__67_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_93 = main_67_75;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__76_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit9i_93 = main_76_78;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ]*/
	if ((((cur_state == LEGUP_F_main_BB__26_8) & (memory_controller_waitrequest == 1'd0)) & (main_26_31 == 1'd1))) begin
		main_shift64RightJammingexit9i_93_reg <= main_shift64RightJammingexit9i_93;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_93_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ]*/
	if (((cur_state == LEGUP_F_main_BB__34_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_93_reg <= main_shift64RightJammingexit9i_93;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_93_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ]*/
	if (((cur_state == LEGUP_F_main_BB__44_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_93_reg <= main_shift64RightJammingexit9i_93;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_93_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_18) & (memory_controller_waitrequest == 1'd0)) & (main_58_64 == 1'd1))) begin
		main_shift64RightJammingexit9i_93_reg <= main_shift64RightJammingexit9i_93;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_93_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ]*/
	if (((cur_state == LEGUP_F_main_BB__67_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_93_reg <= main_shift64RightJammingexit9i_93;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_93_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %93 = phi i64 [ %16, %26 ], [ %16, %34 ], [ %16, %44 ], [ %75, %67 ], [ %78, %76 ], [ %61, %58 ]*/
	if (((cur_state == LEGUP_F_main_BB__76_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_93_reg <= main_shift64RightJammingexit9i_93;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ]*/
	if ((((cur_state == LEGUP_F_main_BB__26_8) & (memory_controller_waitrequest == 1'd0)) & (main_26_31 == 1'd1))) begin
		main_shift64RightJammingexit9i_94 = main_26_29;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ]*/
	else if (((cur_state == LEGUP_F_main_BB__34_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_94 = main_34_43;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ]*/
	else if (((cur_state == LEGUP_F_main_BB__44_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_94 = main_44_46;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__58_18) & (memory_controller_waitrequest == 1'd0)) & (main_58_64 == 1'd1))) begin
		main_shift64RightJammingexit9i_94 = main_14_18_reg;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ]*/
	else if (((cur_state == LEGUP_F_main_BB__67_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_94 = main_14_18_reg;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__76_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit9i_94 = main_14_18_reg;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ]*/
	if ((((cur_state == LEGUP_F_main_BB__26_8) & (memory_controller_waitrequest == 1'd0)) & (main_26_31 == 1'd1))) begin
		main_shift64RightJammingexit9i_94_reg <= main_shift64RightJammingexit9i_94;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_94_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ]*/
	if (((cur_state == LEGUP_F_main_BB__34_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_94_reg <= main_shift64RightJammingexit9i_94;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_94_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ]*/
	if (((cur_state == LEGUP_F_main_BB__44_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_94_reg <= main_shift64RightJammingexit9i_94;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_94_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_18) & (memory_controller_waitrequest == 1'd0)) & (main_58_64 == 1'd1))) begin
		main_shift64RightJammingexit9i_94_reg <= main_shift64RightJammingexit9i_94;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_94_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ]*/
	if (((cur_state == LEGUP_F_main_BB__67_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_94_reg <= main_shift64RightJammingexit9i_94;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_94_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %94 = phi i64 [ %29, %26 ], [ %43, %34 ], [ %46, %44 ], [ %18, %67 ], [ %18, %76 ], [ %18, %58 ]*/
	if (((cur_state == LEGUP_F_main_BB__76_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_94_reg <= main_shift64RightJammingexit9i_94;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ]*/
	if ((((cur_state == LEGUP_F_main_BB__26_8) & (memory_controller_waitrequest == 1'd0)) & (main_26_31 == 1'd1))) begin
		main_shift64RightJammingexit9i_zExp0i = main_1_10_reg;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ]*/
	else if (((cur_state == LEGUP_F_main_BB__34_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_zExp0i = main_1_10_reg;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ]*/
	else if (((cur_state == LEGUP_F_main_BB__44_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_zExp0i = main_1_10_reg;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__58_18) & (memory_controller_waitrequest == 1'd0)) & (main_58_64 == 1'd1))) begin
		main_shift64RightJammingexit9i_zExp0i = main_1_12_reg;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ]*/
	else if (((cur_state == LEGUP_F_main_BB__67_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_zExp0i = main_1_12_reg;
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__76_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit9i_zExp0i = main_1_12_reg;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ]*/
	if ((((cur_state == LEGUP_F_main_BB__26_8) & (memory_controller_waitrequest == 1'd0)) & (main_26_31 == 1'd1))) begin
		main_shift64RightJammingexit9i_zExp0i_reg <= main_shift64RightJammingexit9i_zExp0i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_zExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_zExp0i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ]*/
	if (((cur_state == LEGUP_F_main_BB__34_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_zExp0i_reg <= main_shift64RightJammingexit9i_zExp0i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_zExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_zExp0i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ]*/
	if (((cur_state == LEGUP_F_main_BB__44_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_zExp0i_reg <= main_shift64RightJammingexit9i_zExp0i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_zExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_zExp0i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_18) & (memory_controller_waitrequest == 1'd0)) & (main_58_64 == 1'd1))) begin
		main_shift64RightJammingexit9i_zExp0i_reg <= main_shift64RightJammingexit9i_zExp0i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_zExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_zExp0i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ]*/
	if (((cur_state == LEGUP_F_main_BB__67_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_zExp0i_reg <= main_shift64RightJammingexit9i_zExp0i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_zExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_zExp0i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0.i = phi i32 [ %10, %26 ], [ %10, %34 ], [ %10, %44 ], [ %12, %67 ], [ %12, %76 ], [ %12, %58 ]*/
	if (((cur_state == LEGUP_F_main_BB__76_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9i_zExp0i_reg <= main_shift64RightJammingexit9i_zExp0i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_zExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_zExp0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %95 = or i64 %93, 2305843009213693952*/
		main_shift64RightJammingexit9i_95 = (main_shift64RightJammingexit9i_93_reg | 64'd2305843009213693952);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %95 = or i64 %93, 2305843009213693952*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9i_28)) begin
		main_shift64RightJammingexit9i_95_reg <= main_shift64RightJammingexit9i_95;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %96 = add i64 %95, %94*/
		main_shift64RightJammingexit9i_96 = (main_shift64RightJammingexit9i_95 + main_shift64RightJammingexit9i_94_reg);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %96 = add i64 %95, %94*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9i_28)) begin
		main_shift64RightJammingexit9i_96_reg <= main_shift64RightJammingexit9i_96;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %97 = shl i64 %96, 1*/
		main_shift64RightJammingexit9i_97 = (main_shift64RightJammingexit9i_96 <<< (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %97 = shl i64 %96, 1*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9i_28)) begin
		main_shift64RightJammingexit9i_97_reg <= main_shift64RightJammingexit9i_97;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %98 = icmp slt i64 %97, 0*/
		main_shift64RightJammingexit9i_98 = ($signed(main_shift64RightJammingexit9i_97) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %98 = icmp slt i64 %97, 0*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9i_28)) begin
		main_shift64RightJammingexit9i_98_reg <= main_shift64RightJammingexit9i_98;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %not..i = xor i1 %98, true*/
		main_shift64RightJammingexit9i_noti = (main_shift64RightJammingexit9i_98_reg ^ 1'd1);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %not..i = xor i1 %98, true*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9i_29)) begin
		main_shift64RightJammingexit9i_noti_reg <= main_shift64RightJammingexit9i_noti;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_noti) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_noti_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %99 = sext i1 %not..i to i32*/
		main_shift64RightJammingexit9i_99 = $signed(main_shift64RightJammingexit9i_noti);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %99 = sext i1 %not..i to i32*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9i_29)) begin
		main_shift64RightJammingexit9i_99_reg <= main_shift64RightJammingexit9i_99;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0..i = add nsw i32 %99, %zExp.0.i*/
		main_shift64RightJammingexit9i_zExp0i_var0 = (main_shift64RightJammingexit9i_99_reg + main_shift64RightJammingexit9i_zExp0i_reg);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %zExp.0..i = add nsw i32 %99, %zExp.0.i*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9i_30)) begin
		main_shift64RightJammingexit9i_zExp0i_var0_reg <= main_shift64RightJammingexit9i_zExp0i_var0;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_zExp0i_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_zExp0i_var0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %..i = select i1 %98, i64 %96, i64 %97*/
		main_shift64RightJammingexit9i_i = (main_shift64RightJammingexit9i_98 ? main_shift64RightJammingexit9i_96 : main_shift64RightJammingexit9i_97);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i*/
	/*   %..i = select i1 %98, i64 %96, i64 %97*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9i_28)) begin
		main_shift64RightJammingexit9i_i_reg <= main_shift64RightJammingexit9i_i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9i_i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %zExp.1.i = phi i32 [ %10, %90 ], [ %zExp.0..i, %shift64RightJamming.exit9.i ]*/
	if (((cur_state == LEGUP_F_main_BB__90_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_100_zExp1i = main_1_10_reg;
	end
	/* main: %100*/
	/*   %zExp.1.i = phi i32 [ %10, %90 ], [ %zExp.0..i, %shift64RightJamming.exit9.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9i_30) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_100_zExp1i = main_shift64RightJammingexit9i_zExp0i_var0;
	end
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %zExp.1.i = phi i32 [ %10, %90 ], [ %zExp.0..i, %shift64RightJamming.exit9.i ]*/
	if (((cur_state == LEGUP_F_main_BB__90_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_100_zExp1i_reg <= main_100_zExp1i;
		if (start == 1'b0 && ^(main_100_zExp1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_zExp1i_reg"); $finish; end
	end
	/* main: %100*/
	/*   %zExp.1.i = phi i32 [ %10, %90 ], [ %zExp.0..i, %shift64RightJamming.exit9.i ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9i_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_100_zExp1i_reg <= main_100_zExp1i;
		if (start == 1'b0 && ^(main_100_zExp1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_zExp1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %zSig.0.i = phi i64 [ %92, %90 ], [ %..i, %shift64RightJamming.exit9.i ]*/
	if (((cur_state == LEGUP_F_main_BB__90_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_100_zSig0i = main_90_92;
	end
	/* main: %100*/
	/*   %zSig.0.i = phi i64 [ %92, %90 ], [ %..i, %shift64RightJamming.exit9.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9i_30) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_100_zSig0i = main_shift64RightJammingexit9i_i_reg;
	end
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %zSig.0.i = phi i64 [ %92, %90 ], [ %..i, %shift64RightJamming.exit9.i ]*/
	if (((cur_state == LEGUP_F_main_BB__90_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_100_zSig0i_reg <= main_100_zSig0i;
		if (start == 1'b0 && ^(main_100_zSig0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_zSig0i_reg"); $finish; end
	end
	/* main: %100*/
	/*   %zSig.0.i = phi i64 [ %92, %90 ], [ %..i, %shift64RightJamming.exit9.i ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9i_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_100_zSig0i_reg <= main_100_zSig0i;
		if (start == 1'b0 && ^(main_100_zSig0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_zSig0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
		main_100_101 = roundAndPackFloat64_return_val_reg;
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		main_100_101_reg <= main_100_101;
		if (start == 1'b0 && ^(main_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %103 = shl i64 %2, 10*/
		main_102_103 = (main_1_2_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %103 = shl i64 %2, 10*/
	if ((cur_state == LEGUP_F_main_BB__102_34)) begin
		main_102_103_reg <= main_102_103;
		if (start == 1'b0 && ^(main_102_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %104 = and i64 %103, 4611686018427386880*/
		main_102_104 = (main_102_103 & 64'd4611686018427386880);
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %104 = and i64 %103, 4611686018427386880*/
	if ((cur_state == LEGUP_F_main_BB__102_34)) begin
		main_102_104_reg <= main_102_104;
		if (start == 1'b0 && ^(main_102_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %105 = shl i64 %3, 10*/
		main_102_105 = (main_1_3_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %105 = shl i64 %3, 10*/
	if ((cur_state == LEGUP_F_main_BB__102_34)) begin
		main_102_105_reg <= main_102_105;
		if (start == 1'b0 && ^(main_102_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %106 = and i64 %105, 4611686018427386880*/
		main_102_106 = (main_102_105 & 64'd4611686018427386880);
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %106 = and i64 %105, 4611686018427386880*/
	if ((cur_state == LEGUP_F_main_BB__102_34)) begin
		main_102_106_reg <= main_102_106;
		if (start == 1'b0 && ^(main_102_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %107 = icmp sgt i32 %13, 0*/
		main_102_107 = ($signed(main_1_13_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %107 = icmp sgt i32 %13, 0*/
	if ((cur_state == LEGUP_F_main_BB__102_34)) begin
		main_102_107_reg <= main_102_107;
		if (start == 1'b0 && ^(main_102_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %108*/
	/*   %109 = icmp slt i32 %13, 0*/
		main_108_109 = ($signed(main_1_13_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %108*/
	/*   %109 = icmp slt i32 %13, 0*/
	if ((cur_state == LEGUP_F_main_BB__108_35)) begin
		main_108_109_reg <= main_108_109;
		if (start == 1'b0 && ^(main_108_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_108_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %111*/
	/*   %112 = or i64 %106, %104*/
		main_111_112 = (main_102_106_reg | main_102_104_reg);
end
always @(posedge clk) begin
	/* main: %111*/
	/*   %112 = or i64 %106, %104*/
	if ((cur_state == LEGUP_F_main_BB__111_37)) begin
		main_111_112_reg <= main_111_112;
		if (start == 1'b0 && ^(main_111_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_111_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %111*/
	/*   %113 = icmp eq i64 %112, 0*/
		main_111_113 = (main_111_112 == 64'd0);
end
always @(posedge clk) begin
	/* main: %111*/
	/*   %113 = icmp eq i64 %112, 0*/
	if ((cur_state == LEGUP_F_main_BB__111_37)) begin
		main_111_113_reg <= main_111_113;
		if (start == 1'b0 && ^(main_111_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_111_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %114 = trunc i64 %3 to i63*/
		main_float64_is_signaling_nanexit1i11i_114 = main_1_3_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %114 = trunc i64 %3 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_38)) begin
		main_float64_is_signaling_nanexit1i11i_114_reg <= main_float64_is_signaling_nanexit1i11i_114;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11i_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11i_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %115 = icmp ugt i63 %114, -4503599627370496*/
		main_float64_is_signaling_nanexit1i11i_115 = (main_float64_is_signaling_nanexit1i11i_114 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %115 = icmp ugt i63 %114, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_38)) begin
		main_float64_is_signaling_nanexit1i11i_115_reg <= main_float64_is_signaling_nanexit1i11i_115;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11i_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11i_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %.mux2.v.i15.i = select i1 %115, i64 %3, i64 %2*/
		main_float64_is_signaling_nanexit1i11i_mux2vi15i = (main_float64_is_signaling_nanexit1i11i_115_reg ? main_1_3_reg : main_1_2_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %.mux2.v.i15.i = select i1 %115, i64 %3, i64 %2*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_39)) begin
		main_float64_is_signaling_nanexit1i11i_mux2vi15i_reg <= main_float64_is_signaling_nanexit1i11i_mux2vi15i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11i_mux2vi15i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11i_mux2vi15i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %.mux2.i16.i = or i64 %.mux2.v.i15.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1i11i_mux2i16i = (main_float64_is_signaling_nanexit1i11i_mux2vi15i | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i*/
	/*   %.mux2.i16.i = or i64 %.mux2.v.i15.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_39)) begin
		main_float64_is_signaling_nanexit1i11i_mux2i16i_reg <= main_float64_is_signaling_nanexit1i11i_mux2i16i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11i_mux2i16i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11i_mux2i16i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %116*/
	/*   %117 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_116_117 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %116*/
	/*   %117 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__116_42)) begin
		main_116_117_reg <= main_116_117;
		if (start == 1'b0 && ^(main_116_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %116*/
	/*   %118 = or i32 %117, 16*/
		main_116_118 = (main_116_117 | 32'd16);
end
always @(posedge clk) begin
	/* main: %116*/
	/*   %118 = or i32 %117, 16*/
	if ((cur_state == LEGUP_F_main_BB__116_42)) begin
		main_116_118_reg <= main_116_118;
		if (start == 1'b0 && ^(main_116_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %aExp.0.i = phi i32 [ 1, %119 ], [ %10, %110 ]*/
	if (((((cur_state == LEGUP_F_main_BB__110_36) & (memory_controller_waitrequest == 1'd0)) & (main_1_10_reg != 32'd2047)) & (main_1_10_reg != 32'd0))) begin
		main_120_aExp0i = main_1_10_reg;
	end
	/* main: %120*/
	/*   %aExp.0.i = phi i32 [ 1, %119 ], [ %10, %110 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__119_44) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_120_aExp0i = 32'd1;
	end
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %aExp.0.i = phi i32 [ 1, %119 ], [ %10, %110 ]*/
	if (((((cur_state == LEGUP_F_main_BB__110_36) & (memory_controller_waitrequest == 1'd0)) & (main_1_10_reg != 32'd2047)) & (main_1_10_reg != 32'd0))) begin
		main_120_aExp0i_reg <= main_120_aExp0i;
		if (start == 1'b0 && ^(main_120_aExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_aExp0i_reg"); $finish; end
	end
	/* main: %120*/
	/*   %aExp.0.i = phi i32 [ 1, %119 ], [ %10, %110 ]*/
	if (((cur_state == LEGUP_F_main_BB__119_44) & (memory_controller_waitrequest == 1'd0))) begin
		main_120_aExp0i_reg <= main_120_aExp0i;
		if (start == 1'b0 && ^(main_120_aExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_aExp0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %bExp.0.i = phi i32 [ 1, %119 ], [ %12, %110 ]*/
	if (((((cur_state == LEGUP_F_main_BB__110_36) & (memory_controller_waitrequest == 1'd0)) & (main_1_10_reg != 32'd2047)) & (main_1_10_reg != 32'd0))) begin
		main_120_bExp0i = main_1_12_reg;
	end
	/* main: %120*/
	/*   %bExp.0.i = phi i32 [ 1, %119 ], [ %12, %110 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__119_44) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_120_bExp0i = 32'd1;
	end
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %bExp.0.i = phi i32 [ 1, %119 ], [ %12, %110 ]*/
	if (((((cur_state == LEGUP_F_main_BB__110_36) & (memory_controller_waitrequest == 1'd0)) & (main_1_10_reg != 32'd2047)) & (main_1_10_reg != 32'd0))) begin
		main_120_bExp0i_reg <= main_120_bExp0i;
		if (start == 1'b0 && ^(main_120_bExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_bExp0i_reg"); $finish; end
	end
	/* main: %120*/
	/*   %bExp.0.i = phi i32 [ 1, %119 ], [ %12, %110 ]*/
	if (((cur_state == LEGUP_F_main_BB__119_44) & (memory_controller_waitrequest == 1'd0))) begin
		main_120_bExp0i_reg <= main_120_bExp0i;
		if (start == 1'b0 && ^(main_120_bExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_bExp0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %121 = icmp ult i64 %106, %104*/
		main_120_121 = (main_102_106_reg < main_102_104_reg);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %121 = icmp ult i64 %106, %104*/
	if ((cur_state == LEGUP_F_main_BB__120_45)) begin
		main_120_121_reg <= main_120_121;
		if (start == 1'b0 && ^(main_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %122*/
	/*   %123 = icmp ult i64 %104, %106*/
		main_122_123 = (main_102_104_reg < main_102_106_reg);
end
always @(posedge clk) begin
	/* main: %122*/
	/*   %123 = icmp ult i64 %104, %106*/
	if ((cur_state == LEGUP_F_main_BB__122_46)) begin
		main_122_123_reg <= main_122_123;
		if (start == 1'b0 && ^(main_122_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %124*/
	/*   %125 = icmp eq i32 %12, 2047*/
		main_124_125 = (main_1_12_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %124*/
	/*   %125 = icmp eq i32 %12, 2047*/
	if ((cur_state == LEGUP_F_main_BB__124_47)) begin
		main_124_125_reg <= main_124_125;
		if (start == 1'b0 && ^(main_124_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_124_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %127 = icmp eq i64 %106, 0*/
		main_126_127 = (main_102_106_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %127 = icmp eq i64 %106, 0*/
	if ((cur_state == LEGUP_F_main_BB__126_48)) begin
		main_126_127_reg <= main_126_127;
		if (start == 1'b0 && ^(main_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i*/
	/*   %128 = trunc i64 %3 to i63*/
		main_float64_is_signaling_nanexit1i4i_128 = main_1_3_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i*/
	/*   %128 = trunc i64 %3 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_49)) begin
		main_float64_is_signaling_nanexit1i4i_128_reg <= main_float64_is_signaling_nanexit1i4i_128;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4i_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4i_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i*/
	/*   %129 = icmp ugt i63 %128, -4503599627370496*/
		main_float64_is_signaling_nanexit1i4i_129 = (main_float64_is_signaling_nanexit1i4i_128 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i*/
	/*   %129 = icmp ugt i63 %128, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_49)) begin
		main_float64_is_signaling_nanexit1i4i_129_reg <= main_float64_is_signaling_nanexit1i4i_129;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4i_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4i_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i*/
	/*   %.mux2.v.i8.i = select i1 %129, i64 %3, i64 %2*/
		main_float64_is_signaling_nanexit1i4i_mux2vi8i = (main_float64_is_signaling_nanexit1i4i_129_reg ? main_1_3_reg : main_1_2_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i*/
	/*   %.mux2.v.i8.i = select i1 %129, i64 %3, i64 %2*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_50)) begin
		main_float64_is_signaling_nanexit1i4i_mux2vi8i_reg <= main_float64_is_signaling_nanexit1i4i_mux2vi8i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4i_mux2vi8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4i_mux2vi8i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i*/
	/*   %.mux2.i9.i = or i64 %.mux2.v.i8.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1i4i_mux2i9i = (main_float64_is_signaling_nanexit1i4i_mux2vi8i | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i*/
	/*   %.mux2.i9.i = or i64 %.mux2.v.i8.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_50)) begin
		main_float64_is_signaling_nanexit1i4i_mux2i9i_reg <= main_float64_is_signaling_nanexit1i4i_mux2i9i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4i_mux2i9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4i_mux2i9i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %130*/
	/*   %131 = xor i32 %5, 1*/
		main_130_131 = (main_1_5_reg ^ 32'd1);
end
always @(posedge clk) begin
	/* main: %130*/
	/*   %131 = xor i32 %5, 1*/
	if ((cur_state == LEGUP_F_main_BB__130_51)) begin
		main_130_131_reg <= main_130_131;
		if (start == 1'b0 && ^(main_130_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_130_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %130*/
	/*   %132 = zext i32 %131 to i64*/
		main_130_132 = main_130_131;
end
always @(posedge clk) begin
	/* main: %130*/
	/*   %132 = zext i32 %131 to i64*/
	if ((cur_state == LEGUP_F_main_BB__130_51)) begin
		main_130_132_reg <= main_130_132;
		if (start == 1'b0 && ^(main_130_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_130_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %130*/
	/*   %133 = shl nuw i64 %132, 63*/
		main_130_133 = (main_130_132 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %130*/
	/*   %133 = shl nuw i64 %132, 63*/
	if ((cur_state == LEGUP_F_main_BB__130_51)) begin
		main_130_133_reg <= main_130_133;
		if (start == 1'b0 && ^(main_130_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_130_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %130*/
	/*   %134 = or i64 %133, 9218868437227405312*/
		main_130_134 = (main_130_133 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %130*/
	/*   %134 = or i64 %133, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__130_51)) begin
		main_130_134_reg <= main_130_134;
		if (start == 1'b0 && ^(main_130_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_130_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %136 = icmp eq i32 %10, 0*/
		main_135_136 = (main_1_10_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %135*/
	/*   %136 = icmp eq i32 %10, 0*/
	if ((cur_state == LEGUP_F_main_BB__135_52)) begin
		main_135_136_reg <= main_135_136;
		if (start == 1'b0 && ^(main_135_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %137 = or i64 %104, 4611686018427387904*/
		main_135_137 = (main_102_104_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %135*/
	/*   %137 = or i64 %104, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__135_52)) begin
		main_135_137_reg <= main_135_137;
		if (start == 1'b0 && ^(main_135_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %138 = select i1 %136, i64 %104, i64 %137*/
		main_135_138 = (main_135_136 ? main_102_104_reg : main_135_137);
end
always @(posedge clk) begin
	/* main: %135*/
	/*   %138 = select i1 %136, i64 %104, i64 %137*/
	if ((cur_state == LEGUP_F_main_BB__135_52)) begin
		main_135_138_reg <= main_135_138;
		if (start == 1'b0 && ^(main_135_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %139 = zext i1 %136 to i32*/
		main_135_139 = main_135_136;
end
always @(posedge clk) begin
	/* main: %135*/
	/*   %139 = zext i1 %136 to i32*/
	if ((cur_state == LEGUP_F_main_BB__135_52)) begin
		main_135_139_reg <= main_135_139;
		if (start == 1'b0 && ^(main_135_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %expDiff.0.i3 = add nsw i32 %13, %139*/
		main_135_expDiff0i3 = (main_1_13_reg + main_135_139);
end
always @(posedge clk) begin
	/* main: %135*/
	/*   %expDiff.0.i3 = add nsw i32 %13, %139*/
	if ((cur_state == LEGUP_F_main_BB__135_52)) begin
		main_135_expDiff0i3_reg <= main_135_expDiff0i3;
		if (start == 1'b0 && ^(main_135_expDiff0i3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_expDiff0i3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %140 = sub nsw i32 0, %expDiff.0.i3*/
		main_135_140 = (32'd0 - main_135_expDiff0i3);
end
always @(posedge clk) begin
	/* main: %135*/
	/*   %140 = sub nsw i32 0, %expDiff.0.i3*/
	if ((cur_state == LEGUP_F_main_BB__135_52)) begin
		main_135_140_reg <= main_135_140;
		if (start == 1'b0 && ^(main_135_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %141 = icmp eq i32 %expDiff.0.i3, 0*/
		main_135_141 = (main_135_expDiff0i3 == 32'd0);
end
always @(posedge clk) begin
	/* main: %135*/
	/*   %141 = icmp eq i32 %expDiff.0.i3, 0*/
	if ((cur_state == LEGUP_F_main_BB__135_52)) begin
		main_135_141_reg <= main_135_141;
		if (start == 1'b0 && ^(main_135_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %142*/
	/*   %143 = icmp sgt i32 %expDiff.0.i3, -64*/
		main_142_143 = ($signed(main_135_expDiff0i3_reg) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* main: %142*/
	/*   %143 = icmp sgt i32 %expDiff.0.i3, -64*/
	if ((cur_state == LEGUP_F_main_BB__142_53)) begin
		main_142_143_reg <= main_142_143;
		if (start == 1'b0 && ^(main_142_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_142_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %144*/
	/*   %145 = zext i32 %140 to i64*/
		main_144_145 = main_135_140_reg;
end
always @(posedge clk) begin
	/* main: %144*/
	/*   %145 = zext i32 %140 to i64*/
	if ((cur_state == LEGUP_F_main_BB__144_54)) begin
		main_144_145_reg <= main_144_145;
		if (start == 1'b0 && ^(main_144_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_144_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %144*/
	/*   %146 = lshr i64 %138, %145*/
		main_144_146 = (main_135_138_reg >>> (main_144_145 % 64'd64));
end
always @(posedge clk) begin
	/* main: %144*/
	/*   %146 = lshr i64 %138, %145*/
	if ((cur_state == LEGUP_F_main_BB__144_54)) begin
		main_144_146_reg <= main_144_146;
		if (start == 1'b0 && ^(main_144_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_144_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %144*/
	/*   %147 = and i32 %expDiff.0.i3, 63*/
		main_144_147 = (main_135_expDiff0i3_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %144*/
	/*   %147 = and i32 %expDiff.0.i3, 63*/
	if ((cur_state == LEGUP_F_main_BB__144_54)) begin
		main_144_147_reg <= main_144_147;
		if (start == 1'b0 && ^(main_144_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_144_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %144*/
	/*   %148 = zext i32 %147 to i64*/
		main_144_148 = main_144_147;
end
always @(posedge clk) begin
	/* main: %144*/
	/*   %148 = zext i32 %147 to i64*/
	if ((cur_state == LEGUP_F_main_BB__144_54)) begin
		main_144_148_reg <= main_144_148;
		if (start == 1'b0 && ^(main_144_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_144_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %144*/
	/*   %149 = shl i64 %138, %148*/
		main_144_149 = (main_135_138_reg <<< (main_144_148 % 64'd64));
end
always @(posedge clk) begin
	/* main: %144*/
	/*   %149 = shl i64 %138, %148*/
	if ((cur_state == LEGUP_F_main_BB__144_54)) begin
		main_144_149_reg <= main_144_149;
		if (start == 1'b0 && ^(main_144_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_144_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %144*/
	/*   %150 = icmp ne i64 %149, 0*/
		main_144_150 = (main_144_149 != 64'd0);
end
always @(posedge clk) begin
	/* main: %144*/
	/*   %150 = icmp ne i64 %149, 0*/
	if ((cur_state == LEGUP_F_main_BB__144_54)) begin
		main_144_150_reg <= main_144_150;
		if (start == 1'b0 && ^(main_144_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_144_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %144*/
	/*   %151 = zext i1 %150 to i64*/
		main_144_151 = main_144_150;
end
always @(posedge clk) begin
	/* main: %144*/
	/*   %151 = zext i1 %150 to i64*/
	if ((cur_state == LEGUP_F_main_BB__144_54)) begin
		main_144_151_reg <= main_144_151;
		if (start == 1'b0 && ^(main_144_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_144_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %144*/
	/*   %152 = or i64 %151, %146*/
		main_144_152 = (main_144_151 | main_144_146);
end
always @(posedge clk) begin
	/* main: %144*/
	/*   %152 = or i64 %151, %146*/
	if ((cur_state == LEGUP_F_main_BB__144_54)) begin
		main_144_152_reg <= main_144_152;
		if (start == 1'b0 && ^(main_144_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_144_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %153*/
	/*   %154 = icmp ne i64 %138, 0*/
		main_153_154 = (main_135_138_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %153*/
	/*   %154 = icmp ne i64 %138, 0*/
	if ((cur_state == LEGUP_F_main_BB__153_55)) begin
		main_153_154_reg <= main_153_154;
		if (start == 1'b0 && ^(main_153_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_153_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %153*/
	/*   %155 = zext i1 %154 to i64*/
		main_153_155 = main_153_154;
end
always @(posedge clk) begin
	/* main: %153*/
	/*   %155 = zext i1 %154 to i64*/
	if ((cur_state == LEGUP_F_main_BB__153_55)) begin
		main_153_155_reg <= main_153_155;
		if (start == 1'b0 && ^(main_153_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_153_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit3.i*/
	/*   %z.0.i2.i = phi i64 [ %152, %144 ], [ %155, %153 ], [ %138, %135 ]*/
	if ((((cur_state == LEGUP_F_main_BB__135_52) & (memory_controller_waitrequest == 1'd0)) & (main_135_141 == 1'd1))) begin
		main_shift64RightJammingexit3i_z0i2i = main_135_138;
	end
	/* main: %shift64RightJamming.exit3.i*/
	/*   %z.0.i2.i = phi i64 [ %152, %144 ], [ %155, %153 ], [ %138, %135 ]*/
	else if (((cur_state == LEGUP_F_main_BB__144_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3i_z0i2i = main_144_152;
	end
	/* main: %shift64RightJamming.exit3.i*/
	/*   %z.0.i2.i = phi i64 [ %152, %144 ], [ %155, %153 ], [ %138, %135 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__153_55) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit3i_z0i2i = main_153_155;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit3.i*/
	/*   %z.0.i2.i = phi i64 [ %152, %144 ], [ %155, %153 ], [ %138, %135 ]*/
	if ((((cur_state == LEGUP_F_main_BB__135_52) & (memory_controller_waitrequest == 1'd0)) & (main_135_141 == 1'd1))) begin
		main_shift64RightJammingexit3i_z0i2i_reg <= main_shift64RightJammingexit3i_z0i2i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3i_z0i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3i_z0i2i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit3.i*/
	/*   %z.0.i2.i = phi i64 [ %152, %144 ], [ %155, %153 ], [ %138, %135 ]*/
	if (((cur_state == LEGUP_F_main_BB__144_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3i_z0i2i_reg <= main_shift64RightJammingexit3i_z0i2i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3i_z0i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3i_z0i2i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit3.i*/
	/*   %z.0.i2.i = phi i64 [ %152, %144 ], [ %155, %153 ], [ %138, %135 ]*/
	if (((cur_state == LEGUP_F_main_BB__153_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3i_z0i2i_reg <= main_shift64RightJammingexit3i_z0i2i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3i_z0i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3i_z0i2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit3.i*/
	/*   %156 = or i64 %106, 4611686018427387904*/
		main_shift64RightJammingexit3i_156 = (main_102_106_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit3.i*/
	/*   %156 = or i64 %106, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3i_56)) begin
		main_shift64RightJammingexit3i_156_reg <= main_shift64RightJammingexit3i_156;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3i_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3i_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %158 = phi i64 [ %z.0.i2.i, %shift64RightJamming.exit3.i ], [ %104, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_46) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd1))) begin
		main_157_158 = main_102_104_reg;
	end
	/* main: %157*/
	/*   %158 = phi i64 [ %z.0.i2.i, %shift64RightJamming.exit3.i ], [ %104, %122 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3i_56) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_157_158 = main_shift64RightJammingexit3i_z0i2i_reg;
	end
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %158 = phi i64 [ %z.0.i2.i, %shift64RightJamming.exit3.i ], [ %104, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_46) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd1))) begin
		main_157_158_reg <= main_157_158;
		if (start == 1'b0 && ^(main_157_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_158_reg"); $finish; end
	end
	/* main: %157*/
	/*   %158 = phi i64 [ %z.0.i2.i, %shift64RightJamming.exit3.i ], [ %104, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3i_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_157_158_reg <= main_157_158;
		if (start == 1'b0 && ^(main_157_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %159 = phi i64 [ %156, %shift64RightJamming.exit3.i ], [ %106, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_46) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd1))) begin
		main_157_159 = main_102_106_reg;
	end
	/* main: %157*/
	/*   %159 = phi i64 [ %156, %shift64RightJamming.exit3.i ], [ %106, %122 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3i_56) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_157_159 = main_shift64RightJammingexit3i_156;
	end
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %159 = phi i64 [ %156, %shift64RightJamming.exit3.i ], [ %106, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_46) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd1))) begin
		main_157_159_reg <= main_157_159;
		if (start == 1'b0 && ^(main_157_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_159_reg"); $finish; end
	end
	/* main: %157*/
	/*   %159 = phi i64 [ %156, %shift64RightJamming.exit3.i ], [ %106, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3i_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_157_159_reg <= main_157_159;
		if (start == 1'b0 && ^(main_157_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %bExp.1.i = phi i32 [ %12, %shift64RightJamming.exit3.i ], [ %bExp.0.i, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_46) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd1))) begin
		main_157_bExp1i = main_120_bExp0i_reg;
	end
	/* main: %157*/
	/*   %bExp.1.i = phi i32 [ %12, %shift64RightJamming.exit3.i ], [ %bExp.0.i, %122 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3i_56) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_157_bExp1i = main_1_12_reg;
	end
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %bExp.1.i = phi i32 [ %12, %shift64RightJamming.exit3.i ], [ %bExp.0.i, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_46) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd1))) begin
		main_157_bExp1i_reg <= main_157_bExp1i;
		if (start == 1'b0 && ^(main_157_bExp1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_bExp1i_reg"); $finish; end
	end
	/* main: %157*/
	/*   %bExp.1.i = phi i32 [ %12, %shift64RightJamming.exit3.i ], [ %bExp.0.i, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3i_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_157_bExp1i_reg <= main_157_bExp1i;
		if (start == 1'b0 && ^(main_157_bExp1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_bExp1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %160 = sub i64 %159, %158*/
		main_157_160 = (main_157_159_reg - main_157_158_reg);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %160 = sub i64 %159, %158*/
	if ((cur_state == LEGUP_F_main_BB__157_57)) begin
		main_157_160_reg <= main_157_160;
		if (start == 1'b0 && ^(main_157_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %161 = xor i32 %5, 1*/
		main_157_161 = (main_1_5_reg ^ 32'd1);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %161 = xor i32 %5, 1*/
	if ((cur_state == LEGUP_F_main_BB__157_57)) begin
		main_157_161_reg <= main_157_161;
		if (start == 1'b0 && ^(main_157_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %162*/
	/*   %163 = icmp eq i32 %10, 2047*/
		main_162_163 = (main_1_10_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %162*/
	/*   %163 = icmp eq i32 %10, 2047*/
	if ((cur_state == LEGUP_F_main_BB__162_58)) begin
		main_162_163_reg <= main_162_163;
		if (start == 1'b0 && ^(main_162_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_162_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %164*/
	/*   %165 = icmp eq i64 %104, 0*/
		main_164_165 = (main_102_104_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %164*/
	/*   %165 = icmp eq i64 %104, 0*/
	if ((cur_state == LEGUP_F_main_BB__164_59)) begin
		main_164_165_reg <= main_164_165;
		if (start == 1'b0 && ^(main_164_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_164_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4*/
	/*   %166 = trunc i64 %3 to i63*/
		main_float64_is_signaling_nanexit1ii4_166 = main_1_3_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4*/
	/*   %166 = trunc i64 %3 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_60)) begin
		main_float64_is_signaling_nanexit1ii4_166_reg <= main_float64_is_signaling_nanexit1ii4_166;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4*/
	/*   %167 = icmp ugt i63 %166, -4503599627370496*/
		main_float64_is_signaling_nanexit1ii4_167 = (main_float64_is_signaling_nanexit1ii4_166 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4*/
	/*   %167 = icmp ugt i63 %166, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_60)) begin
		main_float64_is_signaling_nanexit1ii4_167_reg <= main_float64_is_signaling_nanexit1ii4_167;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4*/
	/*   %.mux2.v.i.i8 = select i1 %167, i64 %3, i64 %2*/
		main_float64_is_signaling_nanexit1ii4_mux2vii8 = (main_float64_is_signaling_nanexit1ii4_167_reg ? main_1_3_reg : main_1_2_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4*/
	/*   %.mux2.v.i.i8 = select i1 %167, i64 %3, i64 %2*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_61)) begin
		main_float64_is_signaling_nanexit1ii4_mux2vii8_reg <= main_float64_is_signaling_nanexit1ii4_mux2vii8;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4_mux2vii8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4_mux2vii8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4*/
	/*   %.mux2.i.i9 = or i64 %.mux2.v.i.i8, 2251799813685248*/
		main_float64_is_signaling_nanexit1ii4_mux2ii9 = (main_float64_is_signaling_nanexit1ii4_mux2vii8 | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4*/
	/*   %.mux2.i.i9 = or i64 %.mux2.v.i.i8, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_61)) begin
		main_float64_is_signaling_nanexit1ii4_mux2ii9_reg <= main_float64_is_signaling_nanexit1ii4_mux2ii9;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4_mux2ii9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4_mux2ii9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %169 = icmp eq i32 %12, 0*/
		main_168_169 = (main_1_12_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %169 = icmp eq i32 %12, 0*/
	if ((cur_state == LEGUP_F_main_BB__168_62)) begin
		main_168_169_reg <= main_168_169;
		if (start == 1'b0 && ^(main_168_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %170 = or i64 %106, 4611686018427387904*/
		main_168_170 = (main_102_106_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %170 = or i64 %106, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__168_62)) begin
		main_168_170_reg <= main_168_170;
		if (start == 1'b0 && ^(main_168_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %171 = select i1 %169, i64 %106, i64 %170*/
		main_168_171 = (main_168_169 ? main_102_106_reg : main_168_170);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %171 = select i1 %169, i64 %106, i64 %170*/
	if ((cur_state == LEGUP_F_main_BB__168_62)) begin
		main_168_171_reg <= main_168_171;
		if (start == 1'b0 && ^(main_168_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %172 = sext i1 %169 to i32*/
		main_168_172 = $signed(main_168_169);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %172 = sext i1 %169 to i32*/
	if ((cur_state == LEGUP_F_main_BB__168_62)) begin
		main_168_172_reg <= main_168_172;
		if (start == 1'b0 && ^(main_168_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %expDiff.1.i11 = add nsw i32 %172, %13*/
		main_168_expDiff1i11 = (main_168_172 + main_1_13_reg);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %expDiff.1.i11 = add nsw i32 %172, %13*/
	if ((cur_state == LEGUP_F_main_BB__168_62)) begin
		main_168_expDiff1i11_reg <= main_168_expDiff1i11;
		if (start == 1'b0 && ^(main_168_expDiff1i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_expDiff1i11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %173 = icmp eq i32 %expDiff.1.i11, 0*/
		main_168_173 = (main_168_expDiff1i11 == 32'd0);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %173 = icmp eq i32 %expDiff.1.i11, 0*/
	if ((cur_state == LEGUP_F_main_BB__168_62)) begin
		main_168_173_reg <= main_168_173;
		if (start == 1'b0 && ^(main_168_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %174*/
	/*   %175 = icmp slt i32 %expDiff.1.i11, 64*/
		main_174_175 = ($signed(main_168_expDiff1i11_reg) < $signed(32'd64));
end
always @(posedge clk) begin
	/* main: %174*/
	/*   %175 = icmp slt i32 %expDiff.1.i11, 64*/
	if ((cur_state == LEGUP_F_main_BB__174_63)) begin
		main_174_175_reg <= main_174_175;
		if (start == 1'b0 && ^(main_174_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_174_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %177 = zext i32 %expDiff.1.i11 to i64*/
		main_176_177 = main_168_expDiff1i11_reg;
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %177 = zext i32 %expDiff.1.i11 to i64*/
	if ((cur_state == LEGUP_F_main_BB__176_64)) begin
		main_176_177_reg <= main_176_177;
		if (start == 1'b0 && ^(main_176_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %178 = lshr i64 %171, %177*/
		main_176_178 = (main_168_171_reg >>> (main_176_177 % 64'd64));
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %178 = lshr i64 %171, %177*/
	if ((cur_state == LEGUP_F_main_BB__176_64)) begin
		main_176_178_reg <= main_176_178;
		if (start == 1'b0 && ^(main_176_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %179 = sub nsw i32 0, %expDiff.1.i11*/
		main_176_179 = (32'd0 - main_168_expDiff1i11_reg);
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %179 = sub nsw i32 0, %expDiff.1.i11*/
	if ((cur_state == LEGUP_F_main_BB__176_64)) begin
		main_176_179_reg <= main_176_179;
		if (start == 1'b0 && ^(main_176_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %180 = and i32 %179, 63*/
		main_176_180 = (main_176_179 & 32'd63);
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %180 = and i32 %179, 63*/
	if ((cur_state == LEGUP_F_main_BB__176_64)) begin
		main_176_180_reg <= main_176_180;
		if (start == 1'b0 && ^(main_176_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %181 = zext i32 %180 to i64*/
		main_176_181 = main_176_180;
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %181 = zext i32 %180 to i64*/
	if ((cur_state == LEGUP_F_main_BB__176_64)) begin
		main_176_181_reg <= main_176_181;
		if (start == 1'b0 && ^(main_176_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %182 = shl i64 %171, %181*/
		main_176_182 = (main_168_171_reg <<< (main_176_181 % 64'd64));
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %182 = shl i64 %171, %181*/
	if ((cur_state == LEGUP_F_main_BB__176_64)) begin
		main_176_182_reg <= main_176_182;
		if (start == 1'b0 && ^(main_176_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %183 = icmp ne i64 %182, 0*/
		main_176_183 = (main_176_182 != 64'd0);
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %183 = icmp ne i64 %182, 0*/
	if ((cur_state == LEGUP_F_main_BB__176_64)) begin
		main_176_183_reg <= main_176_183;
		if (start == 1'b0 && ^(main_176_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %184 = zext i1 %183 to i64*/
		main_176_184 = main_176_183;
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %184 = zext i1 %183 to i64*/
	if ((cur_state == LEGUP_F_main_BB__176_64)) begin
		main_176_184_reg <= main_176_184;
		if (start == 1'b0 && ^(main_176_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %185 = or i64 %184, %178*/
		main_176_185 = (main_176_184 | main_176_178);
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %185 = or i64 %184, %178*/
	if ((cur_state == LEGUP_F_main_BB__176_64)) begin
		main_176_185_reg <= main_176_185;
		if (start == 1'b0 && ^(main_176_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %187 = icmp ne i64 %171, 0*/
		main_186_187 = (main_168_171_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %187 = icmp ne i64 %171, 0*/
	if ((cur_state == LEGUP_F_main_BB__186_65)) begin
		main_186_187_reg <= main_186_187;
		if (start == 1'b0 && ^(main_186_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %188 = zext i1 %187 to i64*/
		main_186_188 = main_186_187;
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %188 = zext i1 %187 to i64*/
	if ((cur_state == LEGUP_F_main_BB__186_65)) begin
		main_186_188_reg <= main_186_188;
		if (start == 1'b0 && ^(main_186_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i*/
	/*   %z.0.i.i = phi i64 [ %185, %176 ], [ %188, %186 ], [ %171, %168 ]*/
	if ((((cur_state == LEGUP_F_main_BB__168_62) & (memory_controller_waitrequest == 1'd0)) & (main_168_173 == 1'd1))) begin
		main_shift64RightJammingexiti_z0ii = main_168_171;
	end
	/* main: %shift64RightJamming.exit.i*/
	/*   %z.0.i.i = phi i64 [ %185, %176 ], [ %188, %186 ], [ %171, %168 ]*/
	else if (((cur_state == LEGUP_F_main_BB__176_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexiti_z0ii = main_176_185;
	end
	/* main: %shift64RightJamming.exit.i*/
	/*   %z.0.i.i = phi i64 [ %185, %176 ], [ %188, %186 ], [ %171, %168 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__186_65) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexiti_z0ii = main_186_188;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i*/
	/*   %z.0.i.i = phi i64 [ %185, %176 ], [ %188, %186 ], [ %171, %168 ]*/
	if ((((cur_state == LEGUP_F_main_BB__168_62) & (memory_controller_waitrequest == 1'd0)) & (main_168_173 == 1'd1))) begin
		main_shift64RightJammingexiti_z0ii_reg <= main_shift64RightJammingexiti_z0ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexiti_z0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexiti_z0ii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit.i*/
	/*   %z.0.i.i = phi i64 [ %185, %176 ], [ %188, %186 ], [ %171, %168 ]*/
	if (((cur_state == LEGUP_F_main_BB__176_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexiti_z0ii_reg <= main_shift64RightJammingexiti_z0ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexiti_z0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexiti_z0ii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit.i*/
	/*   %z.0.i.i = phi i64 [ %185, %176 ], [ %188, %186 ], [ %171, %168 ]*/
	if (((cur_state == LEGUP_F_main_BB__186_65) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexiti_z0ii_reg <= main_shift64RightJammingexiti_z0ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexiti_z0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexiti_z0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i*/
	/*   %189 = or i64 %104, 4611686018427387904*/
		main_shift64RightJammingexiti_189 = (main_102_104_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i*/
	/*   %189 = or i64 %104, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexiti_66)) begin
		main_shift64RightJammingexiti_189_reg <= main_shift64RightJammingexiti_189;
		if (start == 1'b0 && ^(main_shift64RightJammingexiti_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexiti_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %190*/
	/*   %191 = phi i64 [ %189, %shift64RightJamming.exit.i ], [ %104, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_45) & (memory_controller_waitrequest == 1'd0)) & (main_120_121 == 1'd1))) begin
		main_190_191 = main_102_104_reg;
	end
	/* main: %190*/
	/*   %191 = phi i64 [ %189, %shift64RightJamming.exit.i ], [ %104, %120 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexiti_66) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_190_191 = main_shift64RightJammingexiti_189;
	end
end
always @(posedge clk) begin
	/* main: %190*/
	/*   %191 = phi i64 [ %189, %shift64RightJamming.exit.i ], [ %104, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_45) & (memory_controller_waitrequest == 1'd0)) & (main_120_121 == 1'd1))) begin
		main_190_191_reg <= main_190_191;
		if (start == 1'b0 && ^(main_190_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_190_191_reg"); $finish; end
	end
	/* main: %190*/
	/*   %191 = phi i64 [ %189, %shift64RightJamming.exit.i ], [ %104, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexiti_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_190_191_reg <= main_190_191;
		if (start == 1'b0 && ^(main_190_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_190_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %190*/
	/*   %192 = phi i64 [ %z.0.i.i, %shift64RightJamming.exit.i ], [ %106, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_45) & (memory_controller_waitrequest == 1'd0)) & (main_120_121 == 1'd1))) begin
		main_190_192 = main_102_106_reg;
	end
	/* main: %190*/
	/*   %192 = phi i64 [ %z.0.i.i, %shift64RightJamming.exit.i ], [ %106, %120 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexiti_66) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_190_192 = main_shift64RightJammingexiti_z0ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %190*/
	/*   %192 = phi i64 [ %z.0.i.i, %shift64RightJamming.exit.i ], [ %106, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_45) & (memory_controller_waitrequest == 1'd0)) & (main_120_121 == 1'd1))) begin
		main_190_192_reg <= main_190_192;
		if (start == 1'b0 && ^(main_190_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_190_192_reg"); $finish; end
	end
	/* main: %190*/
	/*   %192 = phi i64 [ %z.0.i.i, %shift64RightJamming.exit.i ], [ %106, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexiti_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_190_192_reg <= main_190_192;
		if (start == 1'b0 && ^(main_190_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_190_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %190*/
	/*   %aExp.1.i = phi i32 [ %10, %shift64RightJamming.exit.i ], [ %aExp.0.i, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_45) & (memory_controller_waitrequest == 1'd0)) & (main_120_121 == 1'd1))) begin
		main_190_aExp1i = main_120_aExp0i_reg;
	end
	/* main: %190*/
	/*   %aExp.1.i = phi i32 [ %10, %shift64RightJamming.exit.i ], [ %aExp.0.i, %120 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexiti_66) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_190_aExp1i = main_1_10_reg;
	end
end
always @(posedge clk) begin
	/* main: %190*/
	/*   %aExp.1.i = phi i32 [ %10, %shift64RightJamming.exit.i ], [ %aExp.0.i, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_45) & (memory_controller_waitrequest == 1'd0)) & (main_120_121 == 1'd1))) begin
		main_190_aExp1i_reg <= main_190_aExp1i;
		if (start == 1'b0 && ^(main_190_aExp1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_190_aExp1i_reg"); $finish; end
	end
	/* main: %190*/
	/*   %aExp.1.i = phi i32 [ %10, %shift64RightJamming.exit.i ], [ %aExp.0.i, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexiti_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_190_aExp1i_reg <= main_190_aExp1i;
		if (start == 1'b0 && ^(main_190_aExp1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_190_aExp1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %190*/
	/*   %193 = sub i64 %191, %192*/
		main_190_193 = (main_190_191_reg - main_190_192_reg);
end
always @(posedge clk) begin
	/* main: %190*/
	/*   %193 = sub i64 %191, %192*/
	if ((cur_state == LEGUP_F_main_BB__190_67)) begin
		main_190_193_reg <= main_190_193;
		if (start == 1'b0 && ^(main_190_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_190_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %.0.i12 = phi i32 [ %5, %190 ], [ %161, %157 ]*/
	if (((cur_state == LEGUP_F_main_BB__157_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_194_0i12 = main_157_161;
	end
	/* main: %194*/
	/*   %.0.i12 = phi i32 [ %5, %190 ], [ %161, %157 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__190_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_194_0i12 = main_1_5_reg;
	end
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %.0.i12 = phi i32 [ %5, %190 ], [ %161, %157 ]*/
	if (((cur_state == LEGUP_F_main_BB__157_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_194_0i12_reg <= main_194_0i12;
		if (start == 1'b0 && ^(main_194_0i12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_0i12_reg"); $finish; end
	end
	/* main: %194*/
	/*   %.0.i12 = phi i32 [ %5, %190 ], [ %161, %157 ]*/
	if (((cur_state == LEGUP_F_main_BB__190_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_194_0i12_reg <= main_194_0i12;
		if (start == 1'b0 && ^(main_194_0i12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_0i12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %zExp.0.i13 = phi i32 [ %aExp.1.i, %190 ], [ %bExp.1.i, %157 ]*/
	if (((cur_state == LEGUP_F_main_BB__157_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_194_zExp0i13 = main_157_bExp1i_reg;
	end
	/* main: %194*/
	/*   %zExp.0.i13 = phi i32 [ %aExp.1.i, %190 ], [ %bExp.1.i, %157 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__190_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_194_zExp0i13 = main_190_aExp1i_reg;
	end
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %zExp.0.i13 = phi i32 [ %aExp.1.i, %190 ], [ %bExp.1.i, %157 ]*/
	if (((cur_state == LEGUP_F_main_BB__157_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_194_zExp0i13_reg <= main_194_zExp0i13;
		if (start == 1'b0 && ^(main_194_zExp0i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_zExp0i13_reg"); $finish; end
	end
	/* main: %194*/
	/*   %zExp.0.i13 = phi i32 [ %aExp.1.i, %190 ], [ %bExp.1.i, %157 ]*/
	if (((cur_state == LEGUP_F_main_BB__190_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_194_zExp0i13_reg <= main_194_zExp0i13;
		if (start == 1'b0 && ^(main_194_zExp0i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_zExp0i13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %zSig.0.i14 = phi i64 [ %193, %190 ], [ %160, %157 ]*/
	if (((cur_state == LEGUP_F_main_BB__157_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_194_zSig0i14 = main_157_160;
	end
	/* main: %194*/
	/*   %zSig.0.i14 = phi i64 [ %193, %190 ], [ %160, %157 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__190_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_194_zSig0i14 = main_190_193;
	end
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %zSig.0.i14 = phi i64 [ %193, %190 ], [ %160, %157 ]*/
	if (((cur_state == LEGUP_F_main_BB__157_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_194_zSig0i14_reg <= main_194_zSig0i14;
		if (start == 1'b0 && ^(main_194_zSig0i14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_zSig0i14_reg"); $finish; end
	end
	/* main: %194*/
	/*   %zSig.0.i14 = phi i64 [ %193, %190 ], [ %160, %157 ]*/
	if (((cur_state == LEGUP_F_main_BB__190_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_194_zSig0i14_reg <= main_194_zSig0i14;
		if (start == 1'b0 && ^(main_194_zSig0i14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_zSig0i14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %195 = add nsw i32 %zExp.0.i13, -1*/
		main_194_195 = (main_194_zExp0i13_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %195 = add nsw i32 %zExp.0.i13, -1*/
	if ((cur_state == LEGUP_F_main_BB__194_68)) begin
		main_194_195_reg <= main_194_195;
		if (start == 1'b0 && ^(main_194_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %196 = icmp ult i64 %zSig.0.i14, 4294967296*/
		main_194_196 = (main_194_zSig0i14_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %196 = icmp ult i64 %zSig.0.i14, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__194_68)) begin
		main_194_196_reg <= main_194_196;
		if (start == 1'b0 && ^(main_194_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %197 = lshr i64 %zSig.0.i14, 32*/
		main_194_197 = (main_194_zSig0i14_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %197 = lshr i64 %zSig.0.i14, 32*/
	if ((cur_state == LEGUP_F_main_BB__194_68)) begin
		main_194_197_reg <= main_194_197;
		if (start == 1'b0 && ^(main_194_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %a.sink.i.i.i = select i1 %196, i64 %zSig.0.i14, i64 %197*/
		main_194_asinkiii = (main_194_196 ? main_194_zSig0i14_reg : main_194_197);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %a.sink.i.i.i = select i1 %196, i64 %zSig.0.i14, i64 %197*/
	if ((cur_state == LEGUP_F_main_BB__194_68)) begin
		main_194_asinkiii_reg <= main_194_asinkiii;
		if (start == 1'b0 && ^(main_194_asinkiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_asinkiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %extract.t.i.i.i = trunc i64 %a.sink.i.i.i to i32*/
		main_194_extracttiii = main_194_asinkiii[31:0];
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %extract.t.i.i.i = trunc i64 %a.sink.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__194_68)) begin
		main_194_extracttiii_reg <= main_194_extracttiii;
		if (start == 1'b0 && ^(main_194_extracttiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_extracttiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %198 = icmp ult i32 %extract.t.i.i.i, 65536*/
		main_194_198 = (main_194_extracttiii < 32'd65536);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %198 = icmp ult i32 %extract.t.i.i.i, 65536*/
	if ((cur_state == LEGUP_F_main_BB__194_68)) begin
		main_194_198_reg <= main_194_198;
		if (start == 1'b0 && ^(main_194_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %199 = shl i32 %extract.t.i.i.i, 16*/
		main_194_199 = (main_194_extracttiii <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %199 = shl i32 %extract.t.i.i.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__194_68)) begin
		main_194_199_reg <= main_194_199;
		if (start == 1'b0 && ^(main_194_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %.a.i.i.i.i = select i1 %198, i32 %199, i32 %extract.t.i.i.i*/
		main_194_aiiii = (main_194_198 ? main_194_199 : main_194_extracttiii);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %.a.i.i.i.i = select i1 %198, i32 %199, i32 %extract.t.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__194_68)) begin
		main_194_aiiii_reg <= main_194_aiiii;
		if (start == 1'b0 && ^(main_194_aiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_aiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %..i.i.i.i = select i1 %198, i32 16, i32 0*/
		main_194_iiii = (main_194_198 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %..i.i.i.i = select i1 %198, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__194_68)) begin
		main_194_iiii_reg <= main_194_iiii;
		if (start == 1'b0 && ^(main_194_iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %200 = icmp ult i32 %.a.i.i.i.i, 16777216*/
		main_194_200 = (main_194_aiiii < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %200 = icmp ult i32 %.a.i.i.i.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__194_68)) begin
		main_194_200_reg <= main_194_200;
		if (start == 1'b0 && ^(main_194_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %201*/
	/*   %202 = or i32 %..i.i.i.i, 8*/
		main_201_202 = (main_194_iiii_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %201*/
	/*   %202 = or i32 %..i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__201_69)) begin
		main_201_202_reg <= main_201_202;
		if (start == 1'b0 && ^(main_201_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_201_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %201*/
	/*   %203 = shl i32 %.a.i.i.i.i, 8*/
		main_201_203 = (main_194_aiiii_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %201*/
	/*   %203 = shl i32 %.a.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__201_69)) begin
		main_201_203_reg <= main_201_203;
		if (start == 1'b0 && ^(main_201_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_201_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %203, %201 ], [ %.a.i.i.i.i, %194 ]*/
	if ((((cur_state == LEGUP_F_main_BB__194_68) & (memory_controller_waitrequest == 1'd0)) & (main_194_200 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exiti_1iiii = main_194_aiiii;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %203, %201 ], [ %.a.i.i.i.i, %194 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__201_69) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeRoundAndPackFloat64exiti_1iiii = main_201_203;
	end
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %203, %201 ], [ %.a.i.i.i.i, %194 ]*/
	if ((((cur_state == LEGUP_F_main_BB__194_68) & (memory_controller_waitrequest == 1'd0)) & (main_194_200 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exiti_1iiii_reg <= main_normalizeRoundAndPackFloat64exiti_1iiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_1iiii_reg"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %203, %201 ], [ %.a.i.i.i.i, %194 ]*/
	if (((cur_state == LEGUP_F_main_BB__201_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exiti_1iiii_reg <= main_normalizeRoundAndPackFloat64exiti_1iiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_1iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %202, %201 ], [ %..i.i.i.i, %194 ]*/
	if ((((cur_state == LEGUP_F_main_BB__194_68) & (memory_controller_waitrequest == 1'd0)) & (main_194_200 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii = main_194_iiii;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %202, %201 ], [ %..i.i.i.i, %194 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__201_69) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii = main_201_202;
	end
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %202, %201 ], [ %..i.i.i.i, %194 ]*/
	if ((((cur_state == LEGUP_F_main_BB__194_68) & (memory_controller_waitrequest == 1'd0)) & (main_194_200 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii_reg <= main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii_reg"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %202, %201 ], [ %..i.i.i.i, %194 ]*/
	if (((cur_state == LEGUP_F_main_BB__201_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii_reg <= main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %204 = lshr i32 %.1.i.i.i.i, 24*/
		main_normalizeRoundAndPackFloat64exiti_204 = (main_normalizeRoundAndPackFloat64exiti_1iiii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %204 = lshr i32 %.1.i.i.i.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70)) begin
		main_normalizeRoundAndPackFloat64exiti_204_reg <= main_normalizeRoundAndPackFloat64exiti_204;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %205 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %204*/
		main_normalizeRoundAndPackFloat64exiti_205 = (1'd0 | (4 * main_normalizeRoundAndPackFloat64exiti_204));
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %205 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %204*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70)) begin
		main_normalizeRoundAndPackFloat64exiti_205_reg <= main_normalizeRoundAndPackFloat64exiti_205;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %206 = load i32* %205, align 4, !tbaa !5*/
		main_normalizeRoundAndPackFloat64exiti_206 = countLeadingZeros32countLeadingZerosHigh_out_a;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %206 = load i32* %205, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)) begin
		main_normalizeRoundAndPackFloat64exiti_206_reg <= main_normalizeRoundAndPackFloat64exiti_206;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %207 = select i1 %196, i32 31, i32 -1*/
		main_normalizeRoundAndPackFloat64exiti_207 = (main_194_196_reg ? 32'd31 : -32'd1);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %207 = select i1 %196, i32 31, i32 -1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70)) begin
		main_normalizeRoundAndPackFloat64exiti_207_reg <= main_normalizeRoundAndPackFloat64exiti_207;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %208 = add nsw i32 %shiftCount.1.i.i.i.i, %207*/
		main_normalizeRoundAndPackFloat64exiti_208 = (main_normalizeRoundAndPackFloat64exiti_shiftCount1iiii_reg + main_normalizeRoundAndPackFloat64exiti_207);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %208 = add nsw i32 %shiftCount.1.i.i.i.i, %207*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70)) begin
		main_normalizeRoundAndPackFloat64exiti_208_reg <= main_normalizeRoundAndPackFloat64exiti_208;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %209 = add i32 %208, %206*/
		main_normalizeRoundAndPackFloat64exiti_209 = (main_normalizeRoundAndPackFloat64exiti_208_reg + main_normalizeRoundAndPackFloat64exiti_206);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %209 = add i32 %208, %206*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)) begin
		main_normalizeRoundAndPackFloat64exiti_209_reg <= main_normalizeRoundAndPackFloat64exiti_209;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %210 = sub i32 %195, %209*/
		main_normalizeRoundAndPackFloat64exiti_210 = (main_194_195_reg - main_normalizeRoundAndPackFloat64exiti_209);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %210 = sub i32 %195, %209*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)) begin
		main_normalizeRoundAndPackFloat64exiti_210_reg <= main_normalizeRoundAndPackFloat64exiti_210;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %211 = zext i32 %209 to i64*/
		main_normalizeRoundAndPackFloat64exiti_211 = main_normalizeRoundAndPackFloat64exiti_209;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %211 = zext i32 %209 to i64*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)) begin
		main_normalizeRoundAndPackFloat64exiti_211_reg <= main_normalizeRoundAndPackFloat64exiti_211;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %212 = shl i64 %zSig.0.i14, %211*/
		main_normalizeRoundAndPackFloat64exiti_212 = (main_194_zSig0i14_reg <<< (main_normalizeRoundAndPackFloat64exiti_211 % 64'd64));
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %212 = shl i64 %zSig.0.i14, %211*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)) begin
		main_normalizeRoundAndPackFloat64exiti_212_reg <= main_normalizeRoundAndPackFloat64exiti_212;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
		main_normalizeRoundAndPackFloat64exiti_213 = roundAndPackFloat64_return_val_reg;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		main_normalizeRoundAndPackFloat64exiti_213_reg <= main_normalizeRoundAndPackFloat64exiti_213;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exiti_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__22_5) & (memory_controller_waitrequest == 1'd0)) & (main_22_23 == 1'd1))) begin
		main_float64_addexit_0i = main_1_2_reg;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_7) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_float64_is_signaling_nanexit1i10i_mux2i15i;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_float64_is_signaling_nanexit1i1i_mux2i6i;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if (((cur_state == LEGUP_F_main_BB__55_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_55_57;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__80_23) & (memory_controller_waitrequest == 1'd0)) & (main_80_82 == 1'd1))) begin
		main_float64_addexit_0i = main_1_2_reg;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_float64_is_signaling_nanexit1ii_mux2ii;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if (((cur_state == LEGUP_F_main_BB__85_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_85_89;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if (((cur_state == LEGUP_F_main_BB__100_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_100_101_reg;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_float64_is_signaling_nanexit1i11i_mux2i16i;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if (((cur_state == LEGUP_F_main_BB__116_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = 64'd9223372036854775807;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__122_46) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd0))) begin
		main_float64_addexit_0i = 64'd0;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_float64_is_signaling_nanexit1i4i_mux2i9i;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if (((cur_state == LEGUP_F_main_BB__130_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_130_134;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__164_59) & (memory_controller_waitrequest == 1'd0)) & (main_164_165 == 1'd1))) begin
		main_float64_addexit_0i = main_1_2_reg;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_float64_is_signaling_nanexit1ii4_mux2ii9;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_73) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_addexit_0i = main_normalizeRoundAndPackFloat64exiti_213_reg;
	end
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__22_5) & (memory_controller_waitrequest == 1'd0)) & (main_22_23 == 1'd1))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10i_7) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1i_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB__55_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__80_23) & (memory_controller_waitrequest == 1'd0)) & (main_80_82 == 1'd1))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB__85_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB__100_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11i_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB__116_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_46) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB__130_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__164_59) & (memory_controller_waitrequest == 1'd0)) & (main_164_165 == 1'd1))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i, %float64_is_signaling_nan.exit1.i10.i ], [ %101, %100 ], [ %.mux2.i6.i, %float64_is_signaling_nan.exit1.i1.i ], [ %57, %55 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ], [ %89, %85 ], [ %2, %22 ], [ %2, %80 ], [ %.mux2.i.i9, %float64_is_signaling_nan.exit1.i.i4 ], [ %213, %normalizeRoundAndPackFloat64.exit.i ], [ %.mux2.i9.i, %float64_is_signaling_nan.exit1.i4.i ], [ %134, %130 ], [ %.mux2.i16.i, %float64_is_signaling_nan.exit1.i11.i ], [ 9223372036854775807, %116 ], [ %2, %164 ], [ 0, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_73) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %214 = load i64* %scevgep, align 8, !tbaa !1*/
		main_float64_addexit_214 = z_output_out_a;
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %214 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_75)) begin
		main_float64_addexit_214_reg <= main_float64_addexit_214;
		if (start == 1'b0 && ^(main_float64_addexit_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %215 = icmp eq i64 %.0.i, %214*/
		main_float64_addexit_215 = (main_float64_addexit_0i_reg == main_float64_addexit_214);
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %215 = icmp eq i64 %.0.i, %214*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_75)) begin
		main_float64_addexit_215_reg <= main_float64_addexit_215;
		if (start == 1'b0 && ^(main_float64_addexit_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %216 = zext i1 %215 to i32*/
		main_float64_addexit_216 = main_float64_addexit_215;
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %216 = zext i1 %215 to i32*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_75)) begin
		main_float64_addexit_216_reg <= main_float64_addexit_216;
		if (start == 1'b0 && ^(main_float64_addexit_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %217 = add nsw i32 %216, %main_result.02*/
		main_float64_addexit_217 = (main_float64_addexit_216 + main_1_main_result02_reg);
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %217 = add nsw i32 %216, %main_result.02*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_75)) begin
		main_float64_addexit_217_reg <= main_float64_addexit_217;
		if (start == 1'b0 && ^(main_float64_addexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %218 = add nsw i32 %i.01, 1*/
		main_float64_addexit_218 = (main_1_i01_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %218 = add nsw i32 %i.01, 1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_74)) begin
		main_float64_addexit_218_reg <= main_float64_addexit_218;
		if (start == 1'b0 && ^(main_float64_addexit_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %exitcond1 = icmp eq i32 %218, 46*/
		main_float64_addexit_exitcond1 = (main_float64_addexit_218 == 32'd46);
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %exitcond1 = icmp eq i32 %218, 46*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_74)) begin
		main_float64_addexit_exitcond1_reg <= main_float64_addexit_exitcond1;
		if (start == 1'b0 && ^(main_float64_addexit_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %219*/
	/*   %221 = icmp eq i32 %217, 46*/
		main_219_221 = (main_float64_addexit_217_reg == 32'd46);
end
always @(posedge clk) begin
	/* main: %219*/
	/*   %221 = icmp eq i32 %217, 46*/
	if ((cur_state == LEGUP_F_main_BB__219_76)) begin
		main_219_221_reg <= main_219_221;
		if (start == 1'b0 && ^(main_219_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_219_221_reg"); $finish; end
	end
end
always @(*) begin
	countLeadingZeros32countLeadingZerosHigh_address_a = 1'd0;
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %206 = load i32* %205, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70)) begin
		countLeadingZeros32countLeadingZerosHigh_address_a = (main_normalizeRoundAndPackFloat64exiti_205 >>> 3'd2);
	end
end
always @(*) begin
	countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %206 = load i32* %205, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_70)) begin
		countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	end
end
always @(*) begin
	a_input_address_a = 1'd0;
	/* main: %1*/
	/*   %2 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		a_input_address_a = (main_1_scevgep3 >>> 3'd3);
	end
end
always @(*) begin
	a_input_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %2 = load i64* %scevgep3, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		a_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	b_input_address_a = 1'd0;
	/* main: %1*/
	/*   %3 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		b_input_address_a = (main_1_scevgep2 >>> 3'd3);
	end
end
always @(*) begin
	b_input_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %3 = load i64* %scevgep2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		b_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	z_output_address_a = 1'd0;
	/* main: %float64_add.exit*/
	/*   %214 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_74)) begin
		z_output_address_a = (main_1_scevgep_reg >>> 3'd3);
	end
end
always @(*) begin
	z_output_write_enable_a = 1'd0;
	/* main: %float64_add.exit*/
	/*   %214 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_74)) begin
		z_output_write_enable_a = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__100_31)) begin
		roundAndPackFloat64_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		roundAndPackFloat64_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)) begin
		roundAndPackFloat64_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_72)) begin
		roundAndPackFloat64_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__100_31)) begin
		roundAndPackFloat64_arg_zSign <= main_1_5_reg;
		if (start == 1'b0 && ^(main_1_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSign"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)) begin
		roundAndPackFloat64_arg_zSign <= main_194_0i12_reg;
		if (start == 1'b0 && ^(main_194_0i12_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSign"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__100_31)) begin
		roundAndPackFloat64_arg_zExp <= main_100_zExp1i_reg;
		if (start == 1'b0 && ^(main_100_zExp1i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zExp"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)) begin
		roundAndPackFloat64_arg_zExp <= main_normalizeRoundAndPackFloat64exiti_210;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zExp"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__100_31)) begin
		roundAndPackFloat64_arg_zSig <= main_100_zSig0i_reg;
		if (start == 1'b0 && ^(main_100_zSig0i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSig"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71)) begin
		roundAndPackFloat64_arg_zSig <= main_normalizeRoundAndPackFloat64exiti_212;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exiti_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSig"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		roundAndPackFloat64_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	else /* if ((cur_state == LEGUP_function_call_72)) */ begin
		roundAndPackFloat64_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		roundAndPackFloat64_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	else /* if ((cur_state == LEGUP_function_call_72)) */ begin
		roundAndPackFloat64_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	roundAndPackFloat64_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	roundAndPackFloat64_finish_final = roundAndPackFloat64_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__100_31))) begin
		roundAndPackFloat64_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71))) begin
		roundAndPackFloat64_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__100_31))) begin
		roundAndPackFloat64_return_val_reg <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_return_val_reg <= roundAndPackFloat64_return_val;
		if (start == 1'b0 && ^(roundAndPackFloat64_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exiti_71))) begin
		roundAndPackFloat64_return_val_reg <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_return_val_reg <= roundAndPackFloat64_return_val;
		if (start == 1'b0 && ^(roundAndPackFloat64_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		legup_function_call = 1'd1;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %226*/
	/*   ret i32 %217*/
	if ((cur_state == LEGUP_F_main_BB__226_79)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %116*/
	/*   %117 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__116_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %116*/
	/*   store i32 %118, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__116_42)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %116*/
	/*   %117 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__116_40)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %116*/
	/*   store i32 %118, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__116_42)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %116*/
	/*   %117 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__116_40)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %116*/
	/*   store i32 %118, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__116_42)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %116*/
	/*   store i32 %118, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__116_42)) begin
		memory_controller_in_a = main_116_118;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %116*/
	/*   %117 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__116_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %116*/
	/*   store i32 %118, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__116_42)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* main: %100*/
	/*   %101 = tail call fastcc i64 @roundAndPackFloat64(i32 %5, i32 %zExp.1.i, i64 %zSig.0.i) #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i*/
	/*   %213 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i12, i32 %210, i64 %212) #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %226*/
	/*   ret i32 %217*/
	if ((cur_state == LEGUP_F_main_BB__226_79)) begin
		return_val <= main_float64_addexit_217_reg;
		if (start == 1'b0 && ^(main_float64_addexit_217_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
