
====== START ORIO ======
Processing dfadd.c,_dfadd.c

----- begin reading the source file: dfadd.c -----
----- finished reading the source file -----

----- begin reading the tuning specification file: dfadd.spec -----
----- finished reading the tuning specification -----

----- begin parsing annotations -----
PARSING ANNOTATION [[("/*@ begin PerfTuning (spec unroll_vectorize {\n def build {\n   arg build_command = 'clang-3.5';\n   arg libs = '-lrt';\n }\n def performance_counter {\n   #arg method = 'bgp counter';\n   arg repetitions = 500;\n }\n def performance_params {\n   param UF[] = range(1,10);\n   param VEC[] = [False,True];\n   param CFLAGS[] = ['-O0', '-O1','-O2','-O3'];\n   #constraint divisible_by_two = (UF % 2 == 0);\n }\n def input_params {\n   param N[] = [46];\n }\n def input_vars {\n   decl static int a_input[46] = random;\n   decl static int b_input[46] = random;\n   decl static int z_input[46] = random;\n }\n def search {\n  arg algorithm = 'Randomsearch';\n  arg total_runs = 300;\n }\n}\n\n)\n@*/", 1, 0, True), [('\n#include <stdio.h>\n#include "softfloat.c"\n\n#define N 46\nconst float64 a_input[N] = {\n  0x7FF8000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x4000000000000000ULL,\n  0x4000000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x0000000000000000ULL,\n  0x3FF8000000000000ULL,\n  0x7FF8000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x0000000000000000ULL,\n  0x3FF8000000000000ULL,\n  0xFFF8000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xC000000000000000ULL,\n  0xC000000000000000ULL,\n  0xBFF0000000000000ULL,\n  0xBFF0000000000000ULL,\n  0x8000000000000000ULL,\n  0xBFF8000000000000ULL,\n  0xFFF8000000000000ULL,\n  0xFFF0000000000000ULL,\n  0x8000000000000000ULL,\n  0xBFF8000000000000ULL,\n  0x7FF8000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x0000000000000000ULL,\n  0x3FF8000000000000ULL,\n  0x7FF8000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x4000000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xBFF0000000000000ULL,\n  0xBFF0000000000000ULL,\n  0xBFF0000000000000ULL,\n  0x8000000000000000ULL,\n  0xBFF8000000000000ULL,\n  0xFFF8000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xBFF0000000000000ULL,\n  0xC000000000000000ULL\n};\n\nconst float64 b_input[N] = {\n  0x3FF0000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x0000000000000000ULL,\n  0x3FF8000000000000ULL,\n  0x7FF8000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x4000000000000000ULL,\n  0x4000000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x0000000000000000ULL,\n  0x3FF0000000000000ULL,\n  0xBFF0000000000000ULL,\n  0xBFF0000000000000ULL,\n  0x8000000000000000ULL,\n  0xBFF8000000000000ULL,\n  0xFFF8000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xC000000000000000ULL,\n  0xC000000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xFFF0000000000000ULL,\n  0x8000000000000000ULL,\n  0xBFF0000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xBFF0000000000000ULL,\n  0xFFF8000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xBFF0000000000000ULL,\n  0xC000000000000000ULL,\n  0xBFF0000000000000ULL,\n  0xBFF0000000000000ULL,\n  0x8000000000000000ULL,\n  0xBFF8000000000000ULL,\n  0x7FF8000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x7FF8000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x4000000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x0000000000000000ULL,\n  0x3FF8000000000000ULL\n};\n\nconst float64 z_output[N] = {\n  0x7FF8000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x4000000000000000ULL,\n  0x400C000000000000ULL,\n  0x7FF8000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x4000000000000000ULL,\n  0x400C000000000000ULL,\n  0x7FF8000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x0000000000000000ULL,\n  0x4004000000000000ULL,\n  0xFFF8000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xC000000000000000ULL,\n  0xC00C000000000000ULL,\n  0xFFF8000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xC000000000000000ULL,\n  0xC00C000000000000ULL,\n  0xFFF8000000000000ULL,\n  0xFFF0000000000000ULL,\n  0x8000000000000000ULL,\n  0xC004000000000000ULL,\n  0x7FF8000000000000ULL,\n  0x7FFFFFFFFFFFFFFFULL,\n  0x0000000000000000ULL,\n  0xFFF8000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xBFF0000000000000ULL,\n  0xBFE0000000000000ULL,\n  0x7FF8000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x3FE0000000000000ULL,\n  0x7FF8000000000000ULL,\n  0x7FFFFFFFFFFFFFFFULL,\n  0x0000000000000000ULL,\n  0x7FF8000000000000ULL,\n  0x7FF0000000000000ULL,\n  0x3FF0000000000000ULL,\n  0x3FE0000000000000ULL,\n  0xFFF8000000000000ULL,\n  0xFFF0000000000000ULL,\n  0xBFF0000000000000ULL,\n  0xBFE0000000000000ULL\n};\n\nint\nmain ()\n{\n  int main_result;\n  int i;\n  float64 x1, x2;\n      main_result = 0;\n  ', 31, 0, False), [("/*@ begin Loop (\n      transform Composite(\n        unrolljam = (['i'],[UF]),\n        vector = (VEC, ['ivdep','vector always'])\n       )\n      for (i = 0; i <= N-1; i=i+1)\n\t{\n\t  float64 result;\n\t  x1 = a_input[i];\n\t  x2 = b_input[i];\n\t  result = float64_add (x1, x2);\n\t  main_result += (result == z_output[i]);\n\t}\n  ) @*/", 190, 2, True), [('\n      for (i = 0; i <= N-1; i=i+1)\n\t{\n\t  float64 result;\n\t  x1 = a_input[i];\n\t  x2 = b_input[i];\n\t  result = float64_add (x1, x2);\n\t  main_result += (result == z_output[i]);\n\t}\n  ', 203, 0, False)], ('/*@ end @*/', 212, 2, True)], ('\n\n      printf ("Result: %d", main_result);\n      if (main_result == 46) {\n          printf("RESULT: PASS");\n      } else {\n          printf("RESULT: FAIL");\n      }\n      return main_result;\n    }\n\n', 212, 0, False)], ('/*@ end @*/', 223, 0, True)], ('\n', 223, 0, False)]
----- finished parsing annotations -----

----- begin optimizations -----
__optimizeCodeFrag: code_frag type is AnnCodeRegion
OptDriver line 113: PerfTuning
OptDriver line 116, detected tuning spec
tune_info TuningInfo pparam_params[('UF', [1, 2, 3, 4, 5, 6, 7, 8, 9]), ('VEC', [False, True]), ('CFLAGS', ['-O0', '-O1', '-O2', '-O3'])]
BUILDING COORD SYSTEM
Search_Space         = 7.200e+01
Number_of_Parameters = 03
Numeric_Parameters   = 02
Binary_Parameters    = 01
['UF', 'VEC', 'CFLAGS']
[[1, 2, 3, 4, 5, 6, 7, 8, 9], [False, True], ['-O0', '-O1', '-O2', '-O3']]

----- begin empirical tuning for problem size -----
 N = 46
[('N', 46)]
[Search] performance parameters: {'search_total_runs': 300, 'cfrags': [<orio.main.code_frag.NonAnn instance at 0x7fa513b72b48>, <orio.main.code_frag.AnnCodeRegion instance at 0x7fa513b72c68>, <orio.main.code_frag.NonAnn instance at 0x7fa513b72cb0>], 'ptdriver': <orio.main.tuner.ptest_driver.PerfTestDriver instance at 0x7fa513b8c638>, 'search_resume': False, 'input_params': [('N', 46)], 'axis_names': ['UF', 'VEC', 'CFLAGS'], 'ptcodegen': <orio.main.tuner.ptest_codegen.PerfTestCodeGen object at 0x7fa513515a90>, 'pparam_constraint': 'True', 'axis_val_ranges': [[1, 2, 3, 4, 5, 6, 7, 8, 9], [False, True], ['-O0', '-O1', '-O2', '-O3']], 'search_time_limit': -60, 'odriver': <orio.main.opt_driver.OptDriver instance at 0x7fa513b72ab8>, 'use_parallel_search': False, 'search_opts': {}}


----- begin random search -----
sample-point:[0, 0, 0]
sample-point:[1, 1, 3]
sample-point:[2, 0, 1]
sample-point:[5, 1, 0]
sample-point:[0, 1, 1]
sample-point:[6, 0, 1]
sample-point:[6, 0, 3]
sample-point:[8, 0, 0]
sample-point:[4, 1, 1]
sample-point:[1, 0, 0]
sample-point:[1, 0, 1]
sample-point:[2, 0, 0]
sample-point:[4, 0, 0]
sample-point:[7, 1, 2]
sample-point:[1, 0, 2]
sample-point:[6, 1, 1]
sample-point:[7, 1, 1]
sample-point:[5, 1, 3]
sample-point:[4, 1, 0]
sample-point:[2, 1, 1]
sample-point:[1, 1, 2]
sample-point:[4, 1, 2]
sample-point:[3, 0, 0]
sample-point:[0, 1, 3]
sample-point:[5, 0, 0]
sample-point:[4, 1, 3]
sample-point:[4, 0, 2]
sample-point:[8, 0, 3]
sample-point:[3, 0, 3]
sample-point:[5, 0, 2]
sample-point:[4, 0, 1]
sample-point:[7, 1, 3]
sample-point:[2, 1, 2]
sample-point:[6, 0, 0]
sample-point:[1, 1, 0]
sample-point:[0, 1, 2]
sample-point:[6, 0, 2]
sample-point:[6, 1, 0]
sample-point:[8, 1, 2]
sample-point:[0, 0, 3]
sample-point:[7, 0, 3]
sample-point:[8, 1, 0]
sample-point:[1, 1, 1]
sample-point:[7, 1, 0]
sample-point:[1, 0, 3]
sample-point:[7, 0, 0]
sample-point:[6, 1, 3]
sample-point:[3, 1, 2]
sample-point:[5, 1, 1]
sample-point:[8, 0, 1]
sample-point:[8, 1, 1]
sample-point:[8, 0, 2]
sample-point:[8, 1, 3]
sample-point:[3, 0, 1]
sample-point:[2, 1, 3]
sample-point:[2, 0, 2]
sample-point:[5, 0, 3]
sample-point:[2, 1, 0]
sample-point:[3, 1, 0]
sample-point:[2, 0, 3]
sample-point:[7, 0, 2]
sample-point:[0, 0, 1]
sample-point:[6, 1, 2]
sample-point:[4, 0, 3]
sample-point:[3, 1, 3]
sample-point:[7, 0, 1]
sample-point:[5, 0, 1]
sample-point:[5, 1, 2]
sample-point:[0, 0, 2]
sample-point:[3, 1, 1]
sample-point:[0, 1, 0]
sample-point:[3, 0, 2]
__optimizeCodeFrag: code_frag type is NonAnn
OptDriver::__optimizeCodeFrag line 106
__optimizeCodeFrag: code_frag type is AnnCodeRegion
OptDriver line 113: Loop
OptDriver line 142, detected code annotated for tuning
__optimizeCodeFrag: code_frag type is NonAnn
OptDriver::__optimizeCodeFrag line 106
about to load module.class orio.module.loop.loop.Loop corresponding to annotation Loop
about to instantiate transformation class: orio.module.loop.loop.Loop
successfully instantiated transformation class: orio.module.loop.loop.Loop
applying array copy
Code stats:
        Number of loops: 	1
        Max loop nest depth: 	1
        Additions: 		3
        Multiplications: 	0
        Divisions: 		0
        Logical: 		0
        Reads: 			19
        Writes: 		6
        Comparisons:		2
        Gotos: 			0
        
__optimizeCodeFrag: code_frag type is NonAnn
OptDriver::__optimizeCodeFrag line 106
 compiling timer:
	clang-3.5 -O0 -c -o timer_cpu.o timer_cpu.c
 building the original code:
	clang-3.5  -DORIO_REPS=500 -DORIGINAL -o __orio_perftest_original.exe __orio_perftest1.c timer_cpu.o -lrt
orio.main.tuner.ptest_driver:  failed to compile the original version of the code: "clang-3.5  -DORIO_REPS=500 -DORIGINAL -o __orio_perftest_original.exe __orio_perftest1.c timer_cpu.o -lrt"
  File "/usr/local/bin/orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/usr/local/lib/python2.7/dist-packages/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/usr/local/lib/python2.7/dist-packages/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/usr/local/lib/python2.7/dist-packages/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/usr/local/lib/python2.7/dist-packages/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/usr/local/lib/python2.7/dist-packages/orio/main/tuner/search/search.py", line 119, in search
    best_coord,best_perf,search_time,runs = self.searchBestCoord(startCoord)

  File "/usr/local/lib/python2.7/dist-packages/orio/main/tuner/search/randomsearch/randomsearch.py", line 164, in searchBestCoord
    perf_costs = self.getPerfCosts([coord])

  File "/usr/local/lib/python2.7/dist-packages/orio/main/tuner/search/search.py", line 307, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/usr/local/lib/python2.7/dist-packages/orio/main/tuner/ptest_driver.py", line 481, in run
    self.__build(perf_params=perf_params,coord=coord)

  File "/usr/local/lib/python2.7/dist-packages/orio/main/tuner/ptest_driver.py", line 256, in __build
    err('orio.main.tuner.ptest_driver:  failed to compile the original version of the code: "%s"' % cmd)

  File "/usr/local/lib/python2.7/dist-packages/orio/main/util/globals.py", line 317, in err
    Globals().loggers['TuningLog'].error(errmsg + '\n' + '\n'.join(traceback.format_stack()))

