//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 15:27:05 2017
//----------------------------------------------------------------------------//

allocateRAM: @float_exception_flags
Constant: 0
allocateRAM: @a_input
Constant: 1
allocateRAM: @b_input
Constant: 1
allocateRAM: @z_output
Constant: 1
allocateRAM: @countLeadingZeros32.countLeadingZerosHigh
Constant: 1
allocating global ram: @float_exception_flags
allocating global ram: @a_input
allocating global ram: @b_input
allocating global ram: @z_output
allocating global ram: @countLeadingZeros32.countLeadingZerosHigh
# of Vertices: 88
Representatives: 
1 -> 1
2 -> 2
3 -> 3
4 -> 4
5 -> 5
6 -> 6
7 -> 7
8 -> 8
9 -> 9
10 -> 10
11 -> 11
12 -> 12
13 -> 13
14 -> 14
15 -> 15
16 -> 16
17 -> 17
18 -> 18
19 -> 19
20 -> 20
21 -> 21
22 -> 22
23 -> 23
24 -> 24
25 -> 25
26 -> 26
27 -> 27
28 -> 28
29 -> 29
30 -> 30
31 -> 31
32 -> 32
33 -> 33
34 -> 34
35 -> 35
36 -> 36
37 -> 37
38 -> 38
39 -> 39
40 -> 40
41 -> 41
42 -> 42
43 -> 43
44 -> 44
45 -> 45
46 -> 46
47 -> 47
48 -> 48
49 -> 49
50 -> 50
51 -> 51
52 -> 52
53 -> 53
54 -> 54
55 -> 55
56 -> 56
57 -> 57
58 -> 58
59 -> 59
60 -> 60
61 -> 61
62 -> 62
63 -> 63
64 -> 64
65 -> 65
66 -> 66
67 -> 67
68 -> 68
69 -> 69
70 -> 70
71 -> 71
72 -> 72
73 -> 73
74 -> 74
75 -> 75
76 -> 76
77 -> 77
78 -> 78
79 -> 79
80 -> 80
81 -> 81
82 -> 82
83 -> 83
84 -> 84
85 -> 85
86 -> 86
87 -> 87
88 -> 88

Connections (Graph): 
1 -> 48 71 74 75 
2 -> 
3 -> 22 
4 -> 21 
5 -> 23 
6 -> 20 
7 -> 63 
8 -> 19 
9 -> 
10 -> 
11 -> 
12 -> 
13 -> 
14 -> 
15 -> 
16 -> 
17 -> 59 
18 -> 58 
19 -> 
20 -> 
21 -> 
22 -> 
23 -> 32 35 38 47 49 51 
24 -> 80 
25 -> 24 
26 -> 
27 -> 26 
28 -> 
29 -> 28 
30 -> 
31 -> 30 
32 -> 
33 -> 
34 -> 33 
35 -> 
36 -> 
37 -> 36 50 52 
38 -> 
39 -> 
40 -> 39 41 
41 -> 
42 -> 41 
43 -> 
44 -> 43 
45 -> 
46 -> 45 
47 -> 
48 -> 
49 -> 
50 -> 
51 -> 
52 -> 
53 -> 52 
54 -> 
55 -> 54 
56 -> 
57 -> 56 
58 -> 
59 -> 62 
60 -> 62 
61 -> 60 
62 -> 
63 -> 
64 -> 
65 -> 64 
66 -> 
67 -> 66 
68 -> 
69 -> 68 70 
70 -> 
71 -> 
72 -> 
73 -> 72 
74 -> 
75 -> 
76 -> 
77 -> 76 
78 -> 
79 -> 78 
80 -> 
81 -> 80 
82 -> 
83 -> 82 
84 -> 69 
85 -> 82 
86 -> 69 
87 -> 
88 -> 87 

Points-to-set: 
1 -> {}
2 -> {1, }
3 -> {}
4 -> {3, }
5 -> {}
6 -> {5, }
7 -> {}
8 -> {7, }
9 -> {}
10 -> {9, }
11 -> {}
12 -> {11, }
13 -> {}
14 -> {13, }
15 -> {}
16 -> {15, }
17 -> {}
18 -> {17, }
19 -> {7, }
20 -> {5, }
21 -> {3, }
22 -> {}
23 -> {}
24 -> {}
25 -> {}
26 -> {}
27 -> {}
28 -> {}
29 -> {}
30 -> {}
31 -> {}
32 -> {}
33 -> {}
34 -> {}
35 -> {}
36 -> {}
37 -> {}
38 -> {}
39 -> {}
40 -> {}
41 -> {}
42 -> {}
43 -> {}
44 -> {}
45 -> {}
46 -> {}
47 -> {}
48 -> {}
49 -> {}
50 -> {}
51 -> {}
52 -> {}
53 -> {}
54 -> {}
55 -> {}
56 -> {}
57 -> {}
58 -> {17, }
59 -> {}
60 -> {}
61 -> {}
62 -> {}
63 -> {}
64 -> {}
65 -> {}
66 -> {}
67 -> {}
68 -> {}
69 -> {}
70 -> {}
71 -> {}
72 -> {}
73 -> {}
74 -> {}
75 -> {}
76 -> {}
77 -> {}
78 -> {}
79 -> {}
80 -> {}
81 -> {}
82 -> {}
83 -> {}
84 -> {}
85 -> {}
86 -> {}
87 -> {}
88 -> {}

Variable: Int -> Value* mapping
16: @.str3 = private unnamed_addr constant [14 x i8] c"RESULT: FAIL\0A\00", align 1
18: @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
87: 
; Function Attrs: nounwind
define internal fastcc i64 @roundAndPackFloat64(i32 %zSign, i32 %zExp, i64 %zSig) #0 {
  %.tr = trunc i64 %zSig to i32
  %1 = and i32 %.tr, 1023
  %2 = and i32 %zExp, 65535
  %3 = icmp ugt i32 %2, 2044
  br i1 %3, label %4, label %.thread

; <label>:4                                       ; preds = %0
  %5 = icmp sgt i32 %zExp, 2045
  br i1 %5, label %11, label %6

; <label>:6                                       ; preds = %4
  %7 = icmp eq i32 %zExp, 2045
  br i1 %7, label %8, label %17

; <label>:8                                       ; preds = %6
  %9 = add i64 %zSig, 512
  %10 = icmp slt i64 %9, 0
  br i1 %10, label %11, label %.thread

; <label>:11                                      ; preds = %8, %4
  %12 = load i32* @float_exception_flags, align 4, !tbaa !1
  %13 = or i32 %12, 9
  store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1
  %14 = zext i32 %zSign to i64
  %15 = shl i64 %14, 63
  %16 = or i64 %15, 9218868437227405312
  br label %57

; <label>:17                                      ; preds = %6
  %18 = icmp slt i32 %zExp, 0
  br i1 %18, label %19, label %.thread

; <label>:19                                      ; preds = %17
  %20 = icmp sgt i32 %zExp, -64
  br i1 %20, label %21, label %31

; <label>:21                                      ; preds = %19
  %22 = sub nsw i32 0, %zExp
  %23 = zext i32 %22 to i64
  %24 = lshr i64 %zSig, %23
  %25 = and i32 %zExp, 63
  %26 = zext i32 %25 to i64
  %27 = shl i64 %zSig, %26
  %28 = icmp ne i64 %27, 0
  %29 = zext i1 %28 to i64
  %30 = or i64 %29, %24
  br label %shift64RightJamming.exit

; <label>:31                                      ; preds = %19
  %32 = icmp ne i64 %zSig, 0
  %33 = zext i1 %32 to i64
  br label %shift64RightJamming.exit

shift64RightJamming.exit:                         ; preds = %31, %21
  %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]
  %.tr3 = trunc i64 %z.0.i to i32
  %34 = and i32 %.tr3, 1023
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %.thread6, label %36

; <label>:36                                      ; preds = %shift64RightJamming.exit
  %37 = load i32* @float_exception_flags, align 4, !tbaa !1
  %38 = or i32 %37, 4
  store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1
  br label %.thread

.thread:                                          ; preds = %36, %17, %8, %0
  %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]
  %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]
  %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]
  %39 = icmp eq i32 %roundBits.0, 0
  br i1 %39, label %.thread6, label %40

; <label>:40                                      ; preds = %.thread
  %41 = load i32* @float_exception_flags, align 4, !tbaa !1
  %42 = or i32 %41, 1
  store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1
  br label %.thread6

.thread6:                                         ; preds = %40, %.thread, %shift64RightJamming.exit
  %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]
  %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]
  %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]
  %43 = add i64 %zSig57, 512
  %44 = lshr i64 %43, 10
  %45 = icmp eq i32 %roundBits.09, 512
  %46 = zext i1 %45 to i32
  %47 = xor i32 %46, -1
  %48 = sext i32 %47 to i64
  %49 = and i64 %44, %48
  %50 = icmp eq i64 %49, 0
  %51 = zext i32 %zSign to i64
  %52 = shl i64 %51, 63
  %53 = zext i32 %.028 to i64
  %.op = shl i64 %53, 52
  %54 = select i1 %50, i64 0, i64 %.op
  %55 = or i64 %49, %52
  %56 = add i64 %54, %55
  br label %57

; <label>:57                                      ; preds = %.thread6, %11
  %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]
  ret i64 %.0
}

2: @float_exception_flags = internal unnamed_addr global i32 0, align 4
8: @z_output = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4615063718147915776, i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4615063718147915776, i64 9221120237041090560, i64 9218868437227405312, i64 0, i64 4612811918334230528, i64 -2251799813685248, i64 -4503599627370496, i64 -4611686018427387904, i64 -4608308318706860032, i64 -2251799813685248, i64 -4503599627370496, i64 -4611686018427387904, i64 -4608308318706860032, i64 -2251799813685248, i64 -4503599627370496, i64 -9223372036854775808, i64 -4610560118520545280, i64 9221120237041090560, i64 9223372036854775807, i64 0, i64 -2251799813685248, i64 -4503599627370496, i64 -4616189618054758400, i64 -4620693217682128896, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 4602678819172646912, i64 9221120237041090560, i64 9223372036854775807, i64 0, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 4602678819172646912, i64 -2251799813685248, i64 -4503599627370496, i64 -4616189618054758400, i64 -4620693217682128896], align 8
10: @.str = private unnamed_addr constant [65 x i8] c"a_input=%016llx b_input=%016llx expected=%016llx output=%016llx\0A\00", align 1
12: @.str1 = private unnamed_addr constant [12 x i8] c"Result: %d\0A\00", align 1
14: @.str2 = private unnamed_addr constant [14 x i8] c"RESULT: PASS\0A\00", align 1
4: @a_input = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4611686018427387904, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656, i64 9221120237041090560, i64 9218868437227405312, i64 0, i64 4609434218613702656, i64 -2251799813685248, i64 -4503599627370496, i64 -4611686018427387904, i64 -4611686018427387904, i64 -4616189618054758400, i64 -4616189618054758400, i64 -9223372036854775808, i64 -4613937818241073152, i64 -2251799813685248, i64 -4503599627370496, i64 -9223372036854775808, i64 -4613937818241073152, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 4611686018427387904, i64 -4503599627370496, i64 -4503599627370496, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -9223372036854775808, i64 -4613937818241073152, i64 -2251799813685248, i64 -4503599627370496, i64 -4616189618054758400, i64 -4611686018427387904], align 8
6: @b_input = internal unnamed_addr constant [46 x i64] [i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656, i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4611686018427387904, i64 9218868437227405312, i64 9218868437227405312, i64 0, i64 4607182418800017408, i64 -4616189618054758400, i64 -4616189618054758400, i64 -9223372036854775808, i64 -4613937818241073152, i64 -2251799813685248, i64 -4503599627370496, i64 -4611686018427387904, i64 -4611686018427387904, i64 -4503599627370496, i64 -4503599627370496, i64 -9223372036854775808, i64 -4616189618054758400, i64 -4503599627370496, i64 -4503599627370496, i64 -4616189618054758400, i64 -2251799813685248, i64 -4503599627370496, i64 -4616189618054758400, i64 -4611686018427387904, i64 -4616189618054758400, i64 -4616189618054758400, i64 -9223372036854775808, i64 -4613937818241073152, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 4611686018427387904, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656], align 8
80: i32 %zSign
82: i32 %zExp
69: i64 %zSig
67:   %i.01 = phi i32 [ 0, %0 ], [ %219, %float64_add.exit ]
19:   %scevgep = getelementptr [46 x i64]* @z_output, i32 0, i32 %i.01
20:   %scevgep2 = getelementptr [46 x i64]* @b_input, i32 0, i32 %i.01
21:   %scevgep3 = getelementptr [46 x i64]* @a_input, i32 0, i32 %i.01
22:   %2 = load i64* %scevgep3, align 8, !tbaa !1
23:   %3 = load i64* %scevgep2, align 8, !tbaa !1
25:   %4 = lshr i64 %2, 63
24:   %5 = trunc i64 %4 to i32
27:   %6 = lshr i64 %3, 63
26:   %7 = trunc i64 %6 to i32
34:   %30 = sext i1 %27 to i32
33:   %expDiff.0.i2.i = add nsw i32 %30, %13
29:   %9 = lshr i64 %2, 52
28:   %.tr.i.i1.i = trunc i64 %9 to i32
31:   %11 = lshr i64 %3, 52
30:   %.tr.i17.i.i = trunc i64 %11 to i32
37:   %13 = sub nsw i32 %10, %12
40:   %18 = and i64 %17, 2305843009213693440
32:   %24 = trunc i64 %3 to i63
35:   %53 = trunc i64 %3 to i63
50:   %expDiff.0.i.i = add nsw i32 %13, %139
36:   %expDiff.1.i3.i = add nsw i32 %13, %62
38:   %83 = trunc i64 %3 to i63
39:   %86 = add nuw nsw i64 %18, %16
42:   %91 = or i64 %16, 4611686018427387904
41:   %92 = add nuw i64 %91, %18
44:   %95 = or i64 %93, 2305843009213693952
43:   %96 = add i64 %95, %94
46:   %99 = sext i1 %not..i.i to i32
45:   %zExp.0..i.i = add nsw i32 %99, %zExp.0.i11.i
85:   %zExp.1.i.i = phi i32 [ %10, %90 ], [ %zExp.0..i.i, %shift64RightJamming.exit9.i.i ]
86:   %zSig.0.i12.i = phi i64 [ %92, %90 ], [ %..i.i, %shift64RightJamming.exit9.i.i ]
59:   %206 = load i32* %205, align 4, !tbaa !5
60:   %208 = add nsw i32 %shiftCount.1.i.i.i.i.i, %207
62:   %209 = add i32 %208, %206
83:   %210 = sub i32 %195, %209
84:   %212 = shl i64 %zSig.0.i.i, %211
63:   %214 = load i64* %scevgep, align 8, !tbaa !1
47:   %114 = trunc i64 %3 to i63
48:   %117 = load i32* @float_exception_flags, align 4, !tbaa !5
49:   %128 = trunc i64 %3 to i63
51:   %166 = trunc i64 %3 to i63
53:   %172 = sext i1 %169 to i32
52:   %expDiff.1.i.i = add nsw i32 %172, %13
81:   %.0.i.i = phi i32 [ %5, %190 ], [ %161, %157 ]
55:   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %190 ], [ %bExp.1.i.i, %157 ]
54:   %195 = add nsw i32 %zExp.0.i.i, -1
57:   %a.sink.i.i.i.i = select i1 %196, i64 %zSig.0.i.i, i64 %197
56:   %extract.t.i.i.i.i = trunc i64 %a.sink.i.i.i.i to i32
61:   %shiftCount.1.i.i.i.i.i = phi i32 [ %202, %201 ], [ %..i.i.i.i.i, %194 ]
58:   %205 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %204
65:   %216 = zext i1 %215 to i32
64:   %217 = add nsw i32 %216, %main_result.02
66:   %219 = add nsw i32 %i.01, 1
68:   %.tr = trunc i64 %zSig to i32
70:   %9 = add i64 %zSig, 512
71:   %12 = load i32* @float_exception_flags, align 4, !tbaa !1
73:   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]
72:   %.tr3 = trunc i64 %z.0.i to i32
74:   %37 = load i32* @float_exception_flags, align 4, !tbaa !1
75:   %41 = load i32* @float_exception_flags, align 4, !tbaa !1
77:   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]
76:   %43 = add i64 %zSig57, 512
79:   %54 = select i1 %50, i64 0, i64 %.op
78:   %56 = add i64 %54, %55
88:   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]
Memory: Int -> Value* mapping
15: @.str3 = private unnamed_addr constant [14 x i8] c"RESULT: FAIL\0A\00", align 1
17: @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
1: @float_exception_flags = internal unnamed_addr global i32 0, align 4
7: @z_output = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4615063718147915776, i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4615063718147915776, i64 9221120237041090560, i64 9218868437227405312, i64 0, i64 4612811918334230528, i64 -2251799813685248, i64 -4503599627370496, i64 -4611686018427387904, i64 -4608308318706860032, i64 -2251799813685248, i64 -4503599627370496, i64 -4611686018427387904, i64 -4608308318706860032, i64 -2251799813685248, i64 -4503599627370496, i64 -9223372036854775808, i64 -4610560118520545280, i64 9221120237041090560, i64 9223372036854775807, i64 0, i64 -2251799813685248, i64 -4503599627370496, i64 -4616189618054758400, i64 -4620693217682128896, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 4602678819172646912, i64 9221120237041090560, i64 9223372036854775807, i64 0, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 4602678819172646912, i64 -2251799813685248, i64 -4503599627370496, i64 -4616189618054758400, i64 -4620693217682128896], align 8
9: @.str = private unnamed_addr constant [65 x i8] c"a_input=%016llx b_input=%016llx expected=%016llx output=%016llx\0A\00", align 1
11: @.str1 = private unnamed_addr constant [12 x i8] c"Result: %d\0A\00", align 1
13: @.str2 = private unnamed_addr constant [14 x i8] c"RESULT: PASS\0A\00", align 1
3: @a_input = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4611686018427387904, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656, i64 9221120237041090560, i64 9218868437227405312, i64 0, i64 4609434218613702656, i64 -2251799813685248, i64 -4503599627370496, i64 -4611686018427387904, i64 -4611686018427387904, i64 -4616189618054758400, i64 -4616189618054758400, i64 -9223372036854775808, i64 -4613937818241073152, i64 -2251799813685248, i64 -4503599627370496, i64 -9223372036854775808, i64 -4613937818241073152, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 4611686018427387904, i64 -4503599627370496, i64 -4503599627370496, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -9223372036854775808, i64 -4613937818241073152, i64 -2251799813685248, i64 -4503599627370496, i64 -4616189618054758400, i64 -4611686018427387904], align 8
5: @b_input = internal unnamed_addr constant [46 x i64] [i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656, i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4611686018427387904, i64 9218868437227405312, i64 9218868437227405312, i64 0, i64 4607182418800017408, i64 -4616189618054758400, i64 -4616189618054758400, i64 -9223372036854775808, i64 -4613937818241073152, i64 -2251799813685248, i64 -4503599627370496, i64 -4611686018427387904, i64 -4611686018427387904, i64 -4503599627370496, i64 -4503599627370496, i64 -9223372036854775808, i64 -4616189618054758400, i64 -4503599627370496, i64 -4503599627370496, i64 -4616189618054758400, i64 -2251799813685248, i64 -4503599627370496, i64 -4616189618054758400, i64 -4611686018427387904, i64 -4616189618054758400, i64 -4616189618054758400, i64 -9223372036854775808, i64 -4613937818241073152, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 4611686018427387904, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656], align 8
digraph "dfadd.bc" {
    1 [label="#1",color=blue,style=solid];
    2 [label="float_exception_flags",color=blue,style=solid];
    3 [label="#3",color=blue,style=solid];
    4 [label="a_input",color=blue,style=solid];
    5 [label="#5",color=blue,style=solid];
    6 [label="b_input",color=blue,style=solid];
    7 [label="#7",color=blue,style=solid];
    8 [label="z_output",color=blue,style=solid];
    9 [label="#9",color=blue,style=solid];
    10 [label=".str",color=blue,style=solid];
    11 [label="#11",color=blue,style=solid];
    12 [label=".str1",color=blue,style=solid];
    13 [label="#13",color=blue,style=solid];
    14 [label=".str2",color=blue,style=solid];
    15 [label="#15",color=blue,style=solid];
    16 [label=".str3",color=blue,style=solid];
    17 [label="#17",color=blue,style=solid];
    18 [label="countLeadingZeros32.countLeadingZerosHigh",color=blue,style=solid];
    19 [label="scevgep",color=blue,style=solid];
    20 [label="scevgep2",color=blue,style=solid];
    21 [label="scevgep3",color=blue,style=solid];
    22 [label="unknown",color=blue,style=solid];
    23 [label="unknown",color=blue,style=solid];
    24 [label="unknown",color=blue,style=solid];
    25 [label="unknown",color=blue,style=solid];
    26 [label="unknown",color=blue,style=solid];
    27 [label="unknown",color=blue,style=solid];
    28 [label=".tr.i.i1.i",color=blue,style=solid];
    29 [label="unknown",color=blue,style=solid];
    30 [label=".tr.i17.i.i",color=blue,style=solid];
    31 [label="unknown",color=blue,style=solid];
    32 [label="unknown",color=blue,style=solid];
    33 [label="expDiff.0.i2.i",color=blue,style=solid];
    34 [label="unknown",color=blue,style=solid];
    35 [label="unknown",color=blue,style=solid];
    36 [label="expDiff.1.i3.i",color=blue,style=solid];
    37 [label="unknown",color=blue,style=solid];
    38 [label="unknown",color=blue,style=solid];
    39 [label="unknown",color=blue,style=solid];
    40 [label="unknown",color=blue,style=solid];
    41 [label="unknown",color=blue,style=solid];
    42 [label="unknown",color=blue,style=solid];
    43 [label="unknown",color=blue,style=solid];
    44 [label="unknown",color=blue,style=solid];
    45 [label="zExp.0..i.i",color=blue,style=solid];
    46 [label="unknown",color=blue,style=solid];
    47 [label="unknown",color=blue,style=solid];
    48 [label="unknown",color=blue,style=solid];
    49 [label="unknown",color=blue,style=solid];
    50 [label="expDiff.0.i.i",color=blue,style=solid];
    51 [label="unknown",color=blue,style=solid];
    52 [label="expDiff.1.i.i",color=blue,style=solid];
    53 [label="unknown",color=blue,style=solid];
    54 [label="unknown",color=blue,style=solid];
    55 [label="zExp.0.i.i",color=blue,style=solid];
    56 [label="extract.t.i.i.i.i",color=blue,style=solid];
    57 [label="a.sink.i.i.i.i",color=blue,style=solid];
    58 [label="unknown",color=blue,style=solid];
    59 [label="unknown",color=blue,style=solid];
    60 [label="unknown",color=blue,style=solid];
    61 [label="shiftCount.1.i.i.i.i.i",color=blue,style=solid];
    62 [label="unknown",color=blue,style=solid];
    63 [label="unknown",color=blue,style=solid];
    64 [label="unknown",color=blue,style=solid];
    65 [label="unknown",color=blue,style=solid];
    66 [label="unknown",color=blue,style=solid];
    67 [label="i.01",color=blue,style=solid];
    68 [label=".tr",color=blue,style=solid];
    69 [label="zSig",color=blue,style=solid];
    70 [label="unknown",color=blue,style=solid];
    71 [label="unknown",color=blue,style=solid];
    72 [label=".tr3",color=blue,style=solid];
    73 [label="z.0.i",color=blue,style=solid];
    74 [label="unknown",color=blue,style=solid];
    75 [label="unknown",color=blue,style=solid];
    76 [label="unknown",color=blue,style=solid];
    77 [label="zSig57",color=blue,style=solid];
    78 [label="unknown",color=blue,style=solid];
    79 [label="unknown",color=blue,style=solid];
    80 [label="zSign",color=blue,style=solid];
    81 [label=".0.i.i",color=blue,style=solid];
    82 [label="zExp",color=blue,style=solid];
    83 [label="unknown",color=blue,style=solid];
    84 [label="unknown",color=blue,style=solid];
    85 [label="zExp.1.i.i",color=blue,style=solid];
    86 [label="zSig.0.i12.i",color=blue,style=solid];
    87 [label="roundAndPackFloat64",color=blue,style=solid];
    88 [label=".0",color=blue,style=solid];
    1 -> 48;
    1 -> 71;
    1 -> 74;
    1 -> 75;
    3 -> 22;
    4 -> 21;
    5 -> 23;
    6 -> 20;
    7 -> 63;
    8 -> 19;
    17 -> 59;
    18 -> 58;
    23 -> 32;
    23 -> 35;
    23 -> 38;
    23 -> 47;
    23 -> 49;
    23 -> 51;
    24 -> 80;
    25 -> 24;
    27 -> 26;
    29 -> 28;
    31 -> 30;
    34 -> 33;
    37 -> 36;
    37 -> 50;
    37 -> 52;
    40 -> 39;
    40 -> 41;
    42 -> 41;
    44 -> 43;
    46 -> 45;
    53 -> 52;
    55 -> 54;
    57 -> 56;
    59 -> 62;
    60 -> 62;
    61 -> 60;
    65 -> 64;
    67 -> 66;
    69 -> 68;
    69 -> 70;
    73 -> 72;
    77 -> 76;
    79 -> 78;
    81 -> 80;
    83 -> 82;
    84 -> 69;
    85 -> 82;
    86 -> 69;
    88 -> 87;
    pts2 [label="#1",color=red,style=dashed,shape=box];
    2 -> pts2 [color=red,style=dashed];
    pts4 [label="#3",color=red,style=dashed,shape=box];
    4 -> pts4 [color=red,style=dashed];
    pts6 [label="#5",color=red,style=dashed,shape=box];
    6 -> pts6 [color=red,style=dashed];
    pts8 [label="#7",color=red,style=dashed,shape=box];
    8 -> pts8 [color=red,style=dashed];
    pts10 [label="#9",color=red,style=dashed,shape=box];
    10 -> pts10 [color=red,style=dashed];
    pts12 [label="#11",color=red,style=dashed,shape=box];
    12 -> pts12 [color=red,style=dashed];
    pts14 [label="#13",color=red,style=dashed,shape=box];
    14 -> pts14 [color=red,style=dashed];
    pts16 [label="#15",color=red,style=dashed,shape=box];
    16 -> pts16 [color=red,style=dashed];
    pts18 [label="#17",color=red,style=dashed,shape=box];
    18 -> pts18 [color=red,style=dashed];
    pts19 [label="#7",color=red,style=dashed,shape=box];
    19 -> pts19 [color=red,style=dashed];
    pts20 [label="#5",color=red,style=dashed,shape=box];
    20 -> pts20 [color=red,style=dashed];
    pts21 [label="#3",color=red,style=dashed,shape=box];
    21 -> pts21 [color=red,style=dashed];
    pts58 [label="#17",color=red,style=dashed,shape=box];
    58 -> pts58 [color=red,style=dashed];
}
%2 -> { 
	Addr: @a_input
		RAM: a_input
			Adding Local RAM: a_input to Fct: @main
}
%3 -> { 
	Addr: @b_input
		RAM: b_input
			Adding Local RAM: b_input to Fct: @main
}
%117 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%206 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%214 -> { 
	Addr: @z_output
		RAM: z_output
			Adding Local RAM: z_output to Fct: @main
}
%12 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @roundAndPackFloat64
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @roundAndPackFloat64
}
%37 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @roundAndPackFloat64
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @roundAndPackFloat64
}
%41 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @roundAndPackFloat64
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @roundAndPackFloat64
}
Final memory allocation:
Global Memories:
	RAM: float_exception_flags
Local Memories:
	ROM: a_input Function: main
	ROM: b_input Function: main
	ROM: z_output Function: main
	ROM: countLeadingZeros32countLeadingZerosHigh Function: main
Creating new physical ram: ram_32
Running static memory allocation for grouped physical ram: ram_32
Placing RAM: float_exception_flags at: 0
Holes after allocating ram: float_exception_flags size: 4 alignment: 4 offset: 0
Hole: 4 - 8388607 size = 8388604
Final memory allocation for physical ram: ram_32
ram: float_exception_flags                   	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 0     (hex:0x0    ) unused (bytes): 0    
Total Unused (B): 0
Total Memory (B): 4
Fragmentation Ratio (Total Unused / Total Memory): 0.000000e+00 (0%)
