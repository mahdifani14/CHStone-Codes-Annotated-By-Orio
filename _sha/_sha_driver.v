//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Apr 23 10:53:37 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 9
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @sha_info_data = internal unnamed_addr global [16 x i32] zeroinitializer, align 4
`define TAG_g_sha_info_data `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_data_a {`TAG_g_sha_info_data, 23'd0}
// @sha_info_digest.0 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest0 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest0_a {`TAG_g_sha_info_digest0, 23'd64}
// @sha_info_digest.1 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest1 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest1_a {`TAG_g_sha_info_digest1, 23'd68}
// @sha_info_digest.2 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest2 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest2_a {`TAG_g_sha_info_digest2, 23'd72}
// @sha_info_digest.3 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest3 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest3_a {`TAG_g_sha_info_digest3, 23'd76}
// @sha_info_digest.4 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest4 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest4_a {`TAG_g_sha_info_digest4, 23'd80}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [4:0] ram_32_address_a;
reg [4:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @sha_info_digest.0 = internal unnamed_addr global i32 0
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 5;
defparam ram_32.widthad_b = 5;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 21;
defparam ram_32.numwords_b = 21;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 2);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	ram_32_address_a = memory_controller_address_a [5-1+2:2] & {5{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 2);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	ram_32_address_b = memory_controller_address_b [5-1+2:2] & {5{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module sha_transform
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_sha_transform_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_sha_transform_BB__1_2 = 6'd2;
parameter [5:0] LEGUP_F_sha_transform_BB__1_3 = 6'd3;
parameter [5:0] LEGUP_F_sha_transform_BB__1_4 = 6'd4;
parameter [5:0] LEGUP_F_sha_transform_BB__1_5 = 6'd5;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader3preheader_6 = 6'd6;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader3_7 = 6'd7;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader3_8 = 6'd8;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader3_9 = 6'd9;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader3_10 = 6'd10;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader3_11 = 6'd11;
parameter [5:0] LEGUP_F_sha_transform_BB__15_12 = 6'd12;
parameter [5:0] LEGUP_F_sha_transform_BB__15_13 = 6'd13;
parameter [5:0] LEGUP_F_sha_transform_BB__15_14 = 6'd14;
parameter [5:0] LEGUP_F_sha_transform_BB__15_15 = 6'd15;
parameter [5:0] LEGUP_F_sha_transform_BB__15_16 = 6'd16;
parameter [5:0] LEGUP_F_sha_transform_BB__21_17 = 6'd17;
parameter [5:0] LEGUP_F_sha_transform_BB__21_18 = 6'd18;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader2preheader_19 = 6'd19;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader2_20 = 6'd20;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader2_21 = 6'd21;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader2_22 = 6'd22;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader1preheader_23 = 6'd23;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader1_24 = 6'd24;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader1_25 = 6'd25;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader1_26 = 6'd26;
parameter [5:0] LEGUP_F_sha_transform_BB_preheaderpreheader_27 = 6'd27;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader_28 = 6'd28;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader_29 = 6'd29;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader_30 = 6'd30;
parameter [5:0] LEGUP_F_sha_transform_BB__82_31 = 6'd31;
parameter [5:0] LEGUP_F_sha_transform_BB__82_32 = 6'd32;
parameter [5:0] LEGUP_F_sha_transform_BB__82_33 = 6'd33;
parameter [5:0] LEGUP_F_sha_transform_BB__82_34 = 6'd34;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] sha_transform_1_i029;
reg [31:0] sha_transform_1_i029_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_1_scevgep26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_1_scevgep26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_1_scevgep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_1_scevgep27_reg;
reg [31:0] sha_transform_1_2;
reg [31:0] sha_transform_1_2_reg;
reg [31:0] sha_transform_1_3;
reg [31:0] sha_transform_1_3_reg;
reg  sha_transform_1_exitcond25;
reg  sha_transform_1_exitcond25_reg;
reg [31:0] sha_transform_preheader3_indvar17;
reg [31:0] sha_transform_preheader3_indvar17_reg;
reg [31:0] sha_transform_preheader3_4;
reg [31:0] sha_transform_preheader3_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader3_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader3_scevgep20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader3_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader3_scevgep21_reg;
reg [31:0] sha_transform_preheader3_5;
reg [31:0] sha_transform_preheader3_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader3_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader3_scevgep22_reg;
reg [31:0] sha_transform_preheader3_6;
reg [31:0] sha_transform_preheader3_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader3_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader3_scevgep23_reg;
reg [31:0] sha_transform_preheader3_7;
reg [31:0] sha_transform_preheader3_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader3_scevgep24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader3_scevgep24_reg;
reg [31:0] sha_transform_preheader3_8;
reg [31:0] sha_transform_preheader3_8_reg;
reg [31:0] sha_transform_preheader3_9;
reg [31:0] sha_transform_preheader3_9_reg;
reg [31:0] sha_transform_preheader3_10;
reg [31:0] sha_transform_preheader3_10_reg;
reg [31:0] sha_transform_preheader3_11;
reg [31:0] sha_transform_preheader3_11_reg;
reg [31:0] sha_transform_preheader3_12;
reg [31:0] sha_transform_preheader3_12_reg;
reg [31:0] sha_transform_preheader3_13;
reg [31:0] sha_transform_preheader3_13_reg;
reg [31:0] sha_transform_preheader3_14;
reg [31:0] sha_transform_preheader3_14_reg;
reg [31:0] sha_transform_preheader3_indvarnext18;
reg [31:0] sha_transform_preheader3_indvarnext18_reg;
reg  sha_transform_preheader3_exitcond19;
reg  sha_transform_preheader3_exitcond19_reg;
reg [31:0] sha_transform_15_16;
reg [31:0] sha_transform_15_16_reg;
reg [31:0] sha_transform_15_17;
reg [31:0] sha_transform_15_17_reg;
reg [31:0] sha_transform_15_18;
reg [31:0] sha_transform_15_18_reg;
reg [31:0] sha_transform_15_19;
reg [31:0] sha_transform_15_19_reg;
reg [31:0] sha_transform_15_20;
reg [31:0] sha_transform_15_20_reg;
reg [31:0] sha_transform_21_E027;
reg [31:0] sha_transform_21_E027_reg;
reg [31:0] sha_transform_21_D026;
reg [31:0] sha_transform_21_D026_reg;
reg [31:0] sha_transform_21_C025;
reg [31:0] sha_transform_21_C025_reg;
reg [31:0] sha_transform_21_B024;
reg [31:0] sha_transform_21_B024_reg;
reg [31:0] sha_transform_21_A023;
reg [31:0] sha_transform_21_A023_reg;
reg [31:0] sha_transform_21_i222;
reg [31:0] sha_transform_21_i222_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_21_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_21_scevgep16_reg;
reg [31:0] sha_transform_21_22;
reg [31:0] sha_transform_21_22_reg;
reg [31:0] sha_transform_21_23;
reg [31:0] sha_transform_21_23_reg;
reg [31:0] sha_transform_21_24;
reg [31:0] sha_transform_21_24_reg;
reg [31:0] sha_transform_21_25;
reg [31:0] sha_transform_21_25_reg;
reg [31:0] sha_transform_21_26;
reg [31:0] sha_transform_21_26_reg;
reg [31:0] sha_transform_21_27;
reg [31:0] sha_transform_21_27_reg;
reg [31:0] sha_transform_21_28;
reg [31:0] sha_transform_21_28_reg;
reg [31:0] sha_transform_21_29;
reg [31:0] sha_transform_21_29_reg;
reg [31:0] sha_transform_21_30;
reg [31:0] sha_transform_21_30_reg;
reg [31:0] sha_transform_21_31;
reg [31:0] sha_transform_21_31_reg;
reg [31:0] sha_transform_21_32;
reg [31:0] sha_transform_21_32_reg;
reg [31:0] sha_transform_21_33;
reg [31:0] sha_transform_21_33_reg;
reg [31:0] sha_transform_21_34;
reg [31:0] sha_transform_21_34_reg;
reg [31:0] sha_transform_21_35;
reg [31:0] sha_transform_21_35_reg;
reg [31:0] sha_transform_21_36;
reg [31:0] sha_transform_21_36_reg;
reg [31:0] sha_transform_21_37;
reg [31:0] sha_transform_21_37_reg;
reg  sha_transform_21_exitcond15;
reg  sha_transform_21_exitcond15_reg;
reg [31:0] sha_transform_preheader2_indvar11;
reg [31:0] sha_transform_preheader2_indvar11_reg;
reg [31:0] sha_transform_preheader2_E121;
reg [31:0] sha_transform_preheader2_E121_reg;
reg [31:0] sha_transform_preheader2_D120;
reg [31:0] sha_transform_preheader2_D120_reg;
reg [31:0] sha_transform_preheader2_C119;
reg [31:0] sha_transform_preheader2_C119_reg;
reg [31:0] sha_transform_preheader2_B118;
reg [31:0] sha_transform_preheader2_B118_reg;
reg [31:0] sha_transform_preheader2_A117;
reg [31:0] sha_transform_preheader2_A117_reg;
reg [31:0] sha_transform_preheader2_38;
reg [31:0] sha_transform_preheader2_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader2_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader2_scevgep14_reg;
reg [31:0] sha_transform_preheader2_39;
reg [31:0] sha_transform_preheader2_39_reg;
reg [31:0] sha_transform_preheader2_40;
reg [31:0] sha_transform_preheader2_40_reg;
reg [31:0] sha_transform_preheader2_41;
reg [31:0] sha_transform_preheader2_41_reg;
reg [31:0] sha_transform_preheader2_42;
reg [31:0] sha_transform_preheader2_42_reg;
reg [31:0] sha_transform_preheader2_43;
reg [31:0] sha_transform_preheader2_43_reg;
reg [31:0] sha_transform_preheader2_44;
reg [31:0] sha_transform_preheader2_44_reg;
reg [31:0] sha_transform_preheader2_45;
reg [31:0] sha_transform_preheader2_45_reg;
reg [31:0] sha_transform_preheader2_46;
reg [31:0] sha_transform_preheader2_46_reg;
reg [31:0] sha_transform_preheader2_47;
reg [31:0] sha_transform_preheader2_47_reg;
reg [31:0] sha_transform_preheader2_48;
reg [31:0] sha_transform_preheader2_48_reg;
reg [31:0] sha_transform_preheader2_49;
reg [31:0] sha_transform_preheader2_49_reg;
reg [31:0] sha_transform_preheader2_50;
reg [31:0] sha_transform_preheader2_50_reg;
reg [31:0] sha_transform_preheader2_51;
reg [31:0] sha_transform_preheader2_51_reg;
reg [31:0] sha_transform_preheader2_indvarnext12;
reg [31:0] sha_transform_preheader2_indvarnext12_reg;
reg  sha_transform_preheader2_exitcond13;
reg  sha_transform_preheader2_exitcond13_reg;
reg [31:0] sha_transform_preheader1_indvar8;
reg [31:0] sha_transform_preheader1_indvar8_reg;
reg [31:0] sha_transform_preheader1_E215;
reg [31:0] sha_transform_preheader1_E215_reg;
reg [31:0] sha_transform_preheader1_D214;
reg [31:0] sha_transform_preheader1_D214_reg;
reg [31:0] sha_transform_preheader1_C213;
reg [31:0] sha_transform_preheader1_C213_reg;
reg [31:0] sha_transform_preheader1_B212;
reg [31:0] sha_transform_preheader1_B212_reg;
reg [31:0] sha_transform_preheader1_A211;
reg [31:0] sha_transform_preheader1_A211_reg;
reg [31:0] sha_transform_preheader1_52;
reg [31:0] sha_transform_preheader1_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader1_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader1_scevgep10_reg;
reg [31:0] sha_transform_preheader1_53;
reg [31:0] sha_transform_preheader1_53_reg;
reg [31:0] sha_transform_preheader1_54;
reg [31:0] sha_transform_preheader1_54_reg;
reg [31:0] sha_transform_preheader1_55;
reg [31:0] sha_transform_preheader1_55_reg;
reg [31:0] sha_transform_preheader1_56;
reg [31:0] sha_transform_preheader1_56_reg;
reg [31:0] sha_transform_preheader1_57;
reg [31:0] sha_transform_preheader1_57_reg;
reg [31:0] sha_transform_preheader1_58;
reg [31:0] sha_transform_preheader1_58_reg;
reg [31:0] sha_transform_preheader1_59;
reg [31:0] sha_transform_preheader1_59_reg;
reg [31:0] sha_transform_preheader1_60;
reg [31:0] sha_transform_preheader1_60_reg;
reg [31:0] sha_transform_preheader1_61;
reg [31:0] sha_transform_preheader1_61_reg;
reg [31:0] sha_transform_preheader1_62;
reg [31:0] sha_transform_preheader1_62_reg;
reg [31:0] sha_transform_preheader1_63;
reg [31:0] sha_transform_preheader1_63_reg;
reg [31:0] sha_transform_preheader1_64;
reg [31:0] sha_transform_preheader1_64_reg;
reg [31:0] sha_transform_preheader1_65;
reg [31:0] sha_transform_preheader1_65_reg;
reg [31:0] sha_transform_preheader1_66;
reg [31:0] sha_transform_preheader1_66_reg;
reg [31:0] sha_transform_preheader1_67;
reg [31:0] sha_transform_preheader1_67_reg;
reg [31:0] sha_transform_preheader1_indvarnext9;
reg [31:0] sha_transform_preheader1_indvarnext9_reg;
reg  sha_transform_preheader1_exitcond;
reg  sha_transform_preheader1_exitcond_reg;
reg [31:0] sha_transform_preheader_indvar;
reg [31:0] sha_transform_preheader_indvar_reg;
reg [31:0] sha_transform_preheader_E39;
reg [31:0] sha_transform_preheader_E39_reg;
reg [31:0] sha_transform_preheader_D38;
reg [31:0] sha_transform_preheader_D38_reg;
reg [31:0] sha_transform_preheader_C37;
reg [31:0] sha_transform_preheader_C37_reg;
reg [31:0] sha_transform_preheader_B36;
reg [31:0] sha_transform_preheader_B36_reg;
reg [31:0] sha_transform_preheader_A35;
reg [31:0] sha_transform_preheader_A35_reg;
reg [31:0] sha_transform_preheader_68;
reg [31:0] sha_transform_preheader_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader_scevgep_reg;
reg [31:0] sha_transform_preheader_69;
reg [31:0] sha_transform_preheader_69_reg;
reg [31:0] sha_transform_preheader_70;
reg [31:0] sha_transform_preheader_70_reg;
reg [31:0] sha_transform_preheader_71;
reg [31:0] sha_transform_preheader_71_reg;
reg [31:0] sha_transform_preheader_72;
reg [31:0] sha_transform_preheader_72_reg;
reg [31:0] sha_transform_preheader_73;
reg [31:0] sha_transform_preheader_73_reg;
reg [31:0] sha_transform_preheader_74;
reg [31:0] sha_transform_preheader_74_reg;
reg [31:0] sha_transform_preheader_75;
reg [31:0] sha_transform_preheader_75_reg;
reg [31:0] sha_transform_preheader_76;
reg [31:0] sha_transform_preheader_76_reg;
reg [31:0] sha_transform_preheader_77;
reg [31:0] sha_transform_preheader_77_reg;
reg [31:0] sha_transform_preheader_78;
reg [31:0] sha_transform_preheader_78_reg;
reg [31:0] sha_transform_preheader_79;
reg [31:0] sha_transform_preheader_79_reg;
reg [31:0] sha_transform_preheader_80;
reg [31:0] sha_transform_preheader_80_reg;
reg [31:0] sha_transform_preheader_81;
reg [31:0] sha_transform_preheader_81_reg;
reg [31:0] sha_transform_preheader_indvarnext;
reg [31:0] sha_transform_preheader_indvarnext_reg;
reg  sha_transform_preheader_exitcond7;
reg  sha_transform_preheader_exitcond7_reg;
reg [31:0] sha_transform_82_83;
reg [31:0] sha_transform_82_83_reg;
reg [31:0] sha_transform_82_84;
reg [31:0] sha_transform_82_84_reg;
reg [31:0] sha_transform_82_85;
reg [31:0] sha_transform_82_85_reg;
reg [31:0] sha_transform_82_86;
reg [31:0] sha_transform_82_86_reg;
reg [31:0] sha_transform_82_87;
reg [31:0] sha_transform_82_87_reg;
wire [13:0] indata_address_a;
wire  indata_write_enable_a;
wire [7:0] indata_in_a;
wire [7:0] indata_out_a;
wire [13:0] indata_address_b;
wire  indata_write_enable_b;
wire [7:0] indata_in_b;
wire [7:0] indata_out_b;
wire  in_i_address_a;
wire  in_i_write_enable_a;
wire [31:0] in_i_in_a;
wire [31:0] in_i_out_a;
wire  in_i_address_b;
wire  in_i_write_enable_b;
wire [31:0] in_i_in_b;
wire [31:0] in_i_out_b;
wire [3:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [3:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [6:0] sha_transform_0_W_address_a;
reg  sha_transform_0_W_write_enable_a;
reg [31:0] sha_transform_0_W_in_a;
wire [31:0] sha_transform_0_W_out_a;
reg [6:0] sha_transform_0_W_address_b;
reg  sha_transform_0_W_write_enable_b;
reg [31:0] sha_transform_0_W_in_b;
wire [31:0] sha_transform_0_W_out_b;

// Local Rams


//   %W = alloca [80 x i32], align 4
ram_dual_port sha_transform_0_W (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( sha_transform_0_W_address_a ),
	.address_b( sha_transform_0_W_address_b ),
	.wren_a( sha_transform_0_W_write_enable_a ),
	.wren_b( sha_transform_0_W_write_enable_b ),
	.data_a( sha_transform_0_W_in_a ),
	.data_b( sha_transform_0_W_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( sha_transform_0_W_out_a ),
	.q_b( sha_transform_0_W_out_b)
);
defparam sha_transform_0_W.width_a = 32;
defparam sha_transform_0_W.width_b = 32;
defparam sha_transform_0_W.widthad_a = 7;
defparam sha_transform_0_W.widthad_b = 7;
defparam sha_transform_0_W.width_be_a = 1;
defparam sha_transform_0_W.width_be_b = 1;
defparam sha_transform_0_W.numwords_a = 80;
defparam sha_transform_0_W.numwords_b = 80;
defparam sha_transform_0_W.latency = 1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_sha_transform_BB__0_1;
LEGUP_F_sha_transform_BB__0_1:
		next_state = LEGUP_F_sha_transform_BB__1_2;
LEGUP_F_sha_transform_BB__15_12:
		next_state = LEGUP_F_sha_transform_BB__15_13;
LEGUP_F_sha_transform_BB__15_13:
		next_state = LEGUP_F_sha_transform_BB__15_14;
LEGUP_F_sha_transform_BB__15_14:
		next_state = LEGUP_F_sha_transform_BB__15_15;
LEGUP_F_sha_transform_BB__15_15:
		next_state = LEGUP_F_sha_transform_BB__15_16;
LEGUP_F_sha_transform_BB__15_16:
		next_state = LEGUP_F_sha_transform_BB__21_17;
LEGUP_F_sha_transform_BB__1_2:
		next_state = LEGUP_F_sha_transform_BB__1_3;
LEGUP_F_sha_transform_BB__1_3:
		next_state = LEGUP_F_sha_transform_BB__1_4;
LEGUP_F_sha_transform_BB__1_4:
		next_state = LEGUP_F_sha_transform_BB__1_5;
LEGUP_F_sha_transform_BB__1_5:
	if ((sha_transform_1_exitcond25_reg == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_preheader3preheader_6;
	else if ((sha_transform_1_exitcond25_reg == 1'd0))
		next_state = LEGUP_F_sha_transform_BB__1_2;
LEGUP_F_sha_transform_BB__21_17:
		next_state = LEGUP_F_sha_transform_BB__21_18;
LEGUP_F_sha_transform_BB__21_18:
	if ((sha_transform_21_exitcond15_reg == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_preheader2preheader_19;
	else if ((sha_transform_21_exitcond15_reg == 1'd0))
		next_state = LEGUP_F_sha_transform_BB__21_17;
LEGUP_F_sha_transform_BB__82_31:
		next_state = LEGUP_F_sha_transform_BB__82_32;
LEGUP_F_sha_transform_BB__82_32:
		next_state = LEGUP_F_sha_transform_BB__82_33;
LEGUP_F_sha_transform_BB__82_33:
		next_state = LEGUP_F_sha_transform_BB__82_34;
LEGUP_F_sha_transform_BB__82_34:
		next_state = LEGUP_0;
LEGUP_F_sha_transform_BB_preheader1_24:
		next_state = LEGUP_F_sha_transform_BB_preheader1_25;
LEGUP_F_sha_transform_BB_preheader1_25:
		next_state = LEGUP_F_sha_transform_BB_preheader1_26;
LEGUP_F_sha_transform_BB_preheader1_26:
	if ((sha_transform_preheader1_exitcond_reg == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_preheaderpreheader_27;
	else if ((sha_transform_preheader1_exitcond_reg == 1'd0))
		next_state = LEGUP_F_sha_transform_BB_preheader1_24;
LEGUP_F_sha_transform_BB_preheader1preheader_23:
		next_state = LEGUP_F_sha_transform_BB_preheader1_24;
LEGUP_F_sha_transform_BB_preheader2_20:
		next_state = LEGUP_F_sha_transform_BB_preheader2_21;
LEGUP_F_sha_transform_BB_preheader2_21:
		next_state = LEGUP_F_sha_transform_BB_preheader2_22;
LEGUP_F_sha_transform_BB_preheader2_22:
	if ((sha_transform_preheader2_exitcond13_reg == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_preheader1preheader_23;
	else if ((sha_transform_preheader2_exitcond13_reg == 1'd0))
		next_state = LEGUP_F_sha_transform_BB_preheader2_20;
LEGUP_F_sha_transform_BB_preheader2preheader_19:
		next_state = LEGUP_F_sha_transform_BB_preheader2_20;
LEGUP_F_sha_transform_BB_preheader3_10:
		next_state = LEGUP_F_sha_transform_BB_preheader3_11;
LEGUP_F_sha_transform_BB_preheader3_11:
	if ((sha_transform_preheader3_exitcond19_reg == 1'd1))
		next_state = LEGUP_F_sha_transform_BB__15_12;
	else if ((sha_transform_preheader3_exitcond19_reg == 1'd0))
		next_state = LEGUP_F_sha_transform_BB_preheader3_7;
LEGUP_F_sha_transform_BB_preheader3_7:
		next_state = LEGUP_F_sha_transform_BB_preheader3_8;
LEGUP_F_sha_transform_BB_preheader3_8:
		next_state = LEGUP_F_sha_transform_BB_preheader3_9;
LEGUP_F_sha_transform_BB_preheader3_9:
		next_state = LEGUP_F_sha_transform_BB_preheader3_10;
LEGUP_F_sha_transform_BB_preheader3preheader_6:
		next_state = LEGUP_F_sha_transform_BB_preheader3_7;
LEGUP_F_sha_transform_BB_preheader_28:
		next_state = LEGUP_F_sha_transform_BB_preheader_29;
LEGUP_F_sha_transform_BB_preheader_29:
		next_state = LEGUP_F_sha_transform_BB_preheader_30;
LEGUP_F_sha_transform_BB_preheader_30:
	if ((sha_transform_preheader_exitcond7_reg == 1'd1))
		next_state = LEGUP_F_sha_transform_BB__82_31;
	else if ((sha_transform_preheader_exitcond7_reg == 1'd0))
		next_state = LEGUP_F_sha_transform_BB_preheader_28;
LEGUP_F_sha_transform_BB_preheaderpreheader_27:
		next_state = LEGUP_F_sha_transform_BB_preheader_28;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* sha_transform: %1*/
	/*   %i.029 = phi i32 [ 0, %0 ], [ %3, %1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_1_i029 = 32'd0;
	end
	/* sha_transform: %1*/
	/*   %i.029 = phi i32 [ 0, %0 ], [ %3, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__1_5) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_1_exitcond25_reg == 1'd0))) */ begin
		sha_transform_1_i029 = sha_transform_1_3_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %1*/
	/*   %i.029 = phi i32 [ 0, %0 ], [ %3, %1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_1_i029_reg <= sha_transform_1_i029;
		if (start == 1'b0 && ^(sha_transform_1_i029) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_1_i029_reg"); $finish; end
	end
	/* sha_transform: %1*/
	/*   %i.029 = phi i32 [ 0, %0 ], [ %3, %1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__1_5) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_1_exitcond25_reg == 1'd0))) begin
		sha_transform_1_i029_reg <= sha_transform_1_i029;
		if (start == 1'b0 && ^(sha_transform_1_i029) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_1_i029_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %1*/
	/*   %scevgep26 = getelementptr [80 x i32]* %W, i32 0, i32 %i.029*/
		sha_transform_1_scevgep26 = (1'd0 | (4 * sha_transform_1_i029_reg));
end
always @(posedge clk) begin
	/* sha_transform: %1*/
	/*   %scevgep26 = getelementptr [80 x i32]* %W, i32 0, i32 %i.029*/
	if ((cur_state == LEGUP_F_sha_transform_BB__1_2)) begin
		sha_transform_1_scevgep26_reg <= sha_transform_1_scevgep26;
		if (start == 1'b0 && ^(sha_transform_1_scevgep26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_1_scevgep26_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %1*/
	/*   %scevgep27 = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %i.029*/
		sha_transform_1_scevgep27 = (`TAG_g_sha_info_data_a | (4 * sha_transform_1_i029_reg));
end
always @(posedge clk) begin
	/* sha_transform: %1*/
	/*   %scevgep27 = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %i.029*/
	if ((cur_state == LEGUP_F_sha_transform_BB__1_2)) begin
		sha_transform_1_scevgep27_reg <= sha_transform_1_scevgep27;
		if (start == 1'b0 && ^(sha_transform_1_scevgep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_1_scevgep27_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %1*/
	/*   %2 = load i32* %scevgep27, align 4, !tbaa !1*/
		sha_transform_1_2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %1*/
	/*   %2 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__1_4)) begin
		sha_transform_1_2_reg <= sha_transform_1_2;
		if (start == 1'b0 && ^(sha_transform_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %1*/
	/*   %3 = add nsw i32 %i.029, 1*/
		sha_transform_1_3 = (sha_transform_1_i029_reg + 32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %1*/
	/*   %3 = add nsw i32 %i.029, 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__1_2)) begin
		sha_transform_1_3_reg <= sha_transform_1_3;
		if (start == 1'b0 && ^(sha_transform_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %1*/
	/*   %exitcond25 = icmp eq i32 %3, 16*/
		sha_transform_1_exitcond25 = (sha_transform_1_3 == 32'd16);
end
always @(posedge clk) begin
	/* sha_transform: %1*/
	/*   %exitcond25 = icmp eq i32 %3, 16*/
	if ((cur_state == LEGUP_F_sha_transform_BB__1_2)) begin
		sha_transform_1_exitcond25_reg <= sha_transform_1_exitcond25;
		if (start == 1'b0 && ^(sha_transform_1_exitcond25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_1_exitcond25_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %indvar17 = phi i32 [ 0, %.preheader3.preheader ], [ %indvar.next18, %.preheader3 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader3preheader_6) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader3_indvar17 = 32'd0;
	end
	/* sha_transform: %.preheader3*/
	/*   %indvar17 = phi i32 [ 0, %.preheader3.preheader ], [ %indvar.next18, %.preheader3 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader3_11) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader3_exitcond19_reg == 1'd0))) */ begin
		sha_transform_preheader3_indvar17 = sha_transform_preheader3_indvarnext18_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %indvar17 = phi i32 [ 0, %.preheader3.preheader ], [ %indvar.next18, %.preheader3 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader3preheader_6) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader3_indvar17_reg <= sha_transform_preheader3_indvar17;
		if (start == 1'b0 && ^(sha_transform_preheader3_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_indvar17_reg"); $finish; end
	end
	/* sha_transform: %.preheader3*/
	/*   %indvar17 = phi i32 [ 0, %.preheader3.preheader ], [ %indvar.next18, %.preheader3 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader3_11) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader3_exitcond19_reg == 1'd0))) begin
		sha_transform_preheader3_indvar17_reg <= sha_transform_preheader3_indvar17;
		if (start == 1'b0 && ^(sha_transform_preheader3_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_indvar17_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %4 = add i32 %indvar17, 16*/
		sha_transform_preheader3_4 = (sha_transform_preheader3_indvar17_reg + 32'd16);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %4 = add i32 %indvar17, 16*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_7)) begin
		sha_transform_preheader3_4_reg <= sha_transform_preheader3_4;
		if (start == 1'b0 && ^(sha_transform_preheader3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_4_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %scevgep20 = getelementptr [80 x i32]* %W, i32 0, i32 %4*/
		sha_transform_preheader3_scevgep20 = (1'd0 | (4 * sha_transform_preheader3_4_reg));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %scevgep20 = getelementptr [80 x i32]* %W, i32 0, i32 %4*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_8)) begin
		sha_transform_preheader3_scevgep20_reg <= sha_transform_preheader3_scevgep20;
		if (start == 1'b0 && ^(sha_transform_preheader3_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_scevgep20_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %scevgep21 = getelementptr [80 x i32]* %W, i32 0, i32 %indvar17*/
		sha_transform_preheader3_scevgep21 = (1'd0 | (4 * sha_transform_preheader3_indvar17_reg));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %scevgep21 = getelementptr [80 x i32]* %W, i32 0, i32 %indvar17*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_7)) begin
		sha_transform_preheader3_scevgep21_reg <= sha_transform_preheader3_scevgep21;
		if (start == 1'b0 && ^(sha_transform_preheader3_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %5 = add i32 %indvar17, 2*/
		sha_transform_preheader3_5 = (sha_transform_preheader3_indvar17_reg + 32'd2);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %5 = add i32 %indvar17, 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_7)) begin
		sha_transform_preheader3_5_reg <= sha_transform_preheader3_5;
		if (start == 1'b0 && ^(sha_transform_preheader3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_5_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %scevgep22 = getelementptr [80 x i32]* %W, i32 0, i32 %5*/
		sha_transform_preheader3_scevgep22 = (1'd0 | (4 * sha_transform_preheader3_5_reg));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %scevgep22 = getelementptr [80 x i32]* %W, i32 0, i32 %5*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_8)) begin
		sha_transform_preheader3_scevgep22_reg <= sha_transform_preheader3_scevgep22;
		if (start == 1'b0 && ^(sha_transform_preheader3_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_scevgep22_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %6 = add i32 %indvar17, 8*/
		sha_transform_preheader3_6 = (sha_transform_preheader3_indvar17_reg + 32'd8);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %6 = add i32 %indvar17, 8*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_7)) begin
		sha_transform_preheader3_6_reg <= sha_transform_preheader3_6;
		if (start == 1'b0 && ^(sha_transform_preheader3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_6_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %scevgep23 = getelementptr [80 x i32]* %W, i32 0, i32 %6*/
		sha_transform_preheader3_scevgep23 = (1'd0 | (4 * sha_transform_preheader3_6_reg));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %scevgep23 = getelementptr [80 x i32]* %W, i32 0, i32 %6*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_8)) begin
		sha_transform_preheader3_scevgep23_reg <= sha_transform_preheader3_scevgep23;
		if (start == 1'b0 && ^(sha_transform_preheader3_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %7 = add i32 %indvar17, 13*/
		sha_transform_preheader3_7 = (sha_transform_preheader3_indvar17_reg + 32'd13);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %7 = add i32 %indvar17, 13*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_7)) begin
		sha_transform_preheader3_7_reg <= sha_transform_preheader3_7;
		if (start == 1'b0 && ^(sha_transform_preheader3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_7_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %scevgep24 = getelementptr [80 x i32]* %W, i32 0, i32 %7*/
		sha_transform_preheader3_scevgep24 = (1'd0 | (4 * sha_transform_preheader3_7_reg));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %scevgep24 = getelementptr [80 x i32]* %W, i32 0, i32 %7*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_8)) begin
		sha_transform_preheader3_scevgep24_reg <= sha_transform_preheader3_scevgep24;
		if (start == 1'b0 && ^(sha_transform_preheader3_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_scevgep24_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %8 = load i32* %scevgep24, align 4, !tbaa !1*/
		sha_transform_preheader3_8 = sha_transform_0_W_out_a;
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %8 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_9)) begin
		sha_transform_preheader3_8_reg <= sha_transform_preheader3_8;
		if (start == 1'b0 && ^(sha_transform_preheader3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_8_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %9 = load i32* %scevgep23, align 4, !tbaa !1*/
		sha_transform_preheader3_9 = sha_transform_0_W_out_b;
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %9 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_9)) begin
		sha_transform_preheader3_9_reg <= sha_transform_preheader3_9;
		if (start == 1'b0 && ^(sha_transform_preheader3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_9_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %10 = xor i32 %9, %8*/
		sha_transform_preheader3_10 = (sha_transform_preheader3_9 ^ sha_transform_preheader3_8);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %10 = xor i32 %9, %8*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_9)) begin
		sha_transform_preheader3_10_reg <= sha_transform_preheader3_10;
		if (start == 1'b0 && ^(sha_transform_preheader3_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_10_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %11 = load i32* %scevgep22, align 4, !tbaa !1*/
		sha_transform_preheader3_11 = sha_transform_0_W_out_a;
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %11 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_10)) begin
		sha_transform_preheader3_11_reg <= sha_transform_preheader3_11;
		if (start == 1'b0 && ^(sha_transform_preheader3_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_11_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %12 = xor i32 %10, %11*/
		sha_transform_preheader3_12 = (sha_transform_preheader3_10_reg ^ sha_transform_preheader3_11);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %12 = xor i32 %10, %11*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_10)) begin
		sha_transform_preheader3_12_reg <= sha_transform_preheader3_12;
		if (start == 1'b0 && ^(sha_transform_preheader3_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_12_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %13 = load i32* %scevgep21, align 4, !tbaa !1*/
		sha_transform_preheader3_13 = sha_transform_0_W_out_b;
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %13 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_10)) begin
		sha_transform_preheader3_13_reg <= sha_transform_preheader3_13;
		if (start == 1'b0 && ^(sha_transform_preheader3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_13_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %14 = xor i32 %12, %13*/
		sha_transform_preheader3_14 = (sha_transform_preheader3_12 ^ sha_transform_preheader3_13);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %14 = xor i32 %12, %13*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_10)) begin
		sha_transform_preheader3_14_reg <= sha_transform_preheader3_14;
		if (start == 1'b0 && ^(sha_transform_preheader3_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_14_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
		sha_transform_preheader3_indvarnext18 = (sha_transform_preheader3_indvar17_reg + 32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_7)) begin
		sha_transform_preheader3_indvarnext18_reg <= sha_transform_preheader3_indvarnext18;
		if (start == 1'b0 && ^(sha_transform_preheader3_indvarnext18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_indvarnext18_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader3*/
	/*   %exitcond19 = icmp eq i32 %indvar.next18, 64*/
		sha_transform_preheader3_exitcond19 = (sha_transform_preheader3_indvarnext18 == 32'd64);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader3*/
	/*   %exitcond19 = icmp eq i32 %indvar.next18, 64*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_7)) begin
		sha_transform_preheader3_exitcond19_reg <= sha_transform_preheader3_exitcond19;
		if (start == 1'b0 && ^(sha_transform_preheader3_exitcond19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader3_exitcond19_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %15*/
	/*   %16 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
		sha_transform_15_16 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %15*/
	/*   %16 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_14)) begin
		sha_transform_15_16_reg <= sha_transform_15_16;
		if (start == 1'b0 && ^(sha_transform_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_15_16_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %15*/
	/*   %17 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
		sha_transform_15_17 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %15*/
	/*   %17 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_14)) begin
		sha_transform_15_17_reg <= sha_transform_15_17;
		if (start == 1'b0 && ^(sha_transform_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_15_17_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %15*/
	/*   %18 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
		sha_transform_15_18 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %15*/
	/*   %18 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_15)) begin
		sha_transform_15_18_reg <= sha_transform_15_18;
		if (start == 1'b0 && ^(sha_transform_15_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_15_18_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %15*/
	/*   %19 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
		sha_transform_15_19 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %15*/
	/*   %19 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_15)) begin
		sha_transform_15_19_reg <= sha_transform_15_19;
		if (start == 1'b0 && ^(sha_transform_15_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_15_19_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %15*/
	/*   %20 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
		sha_transform_15_20 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %15*/
	/*   %20 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_16)) begin
		sha_transform_15_20_reg <= sha_transform_15_20;
		if (start == 1'b0 && ^(sha_transform_15_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_15_20_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %E.027 = phi i32 [ %20, %15 ], [ %D.026, %21 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_21_E027 = sha_transform_15_20;
	end
	/* sha_transform: %21*/
	/*   %E.027 = phi i32 [ %20, %15 ], [ %D.026, %21 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__21_18) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_21_exitcond15_reg == 1'd0))) */ begin
		sha_transform_21_E027 = sha_transform_21_D026_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %E.027 = phi i32 [ %20, %15 ], [ %D.026, %21 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_21_E027_reg <= sha_transform_21_E027;
		if (start == 1'b0 && ^(sha_transform_21_E027) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_E027_reg"); $finish; end
	end
	/* sha_transform: %21*/
	/*   %E.027 = phi i32 [ %20, %15 ], [ %D.026, %21 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__21_18) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_21_exitcond15_reg == 1'd0))) begin
		sha_transform_21_E027_reg <= sha_transform_21_E027;
		if (start == 1'b0 && ^(sha_transform_21_E027) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_E027_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %D.026 = phi i32 [ %19, %15 ], [ %C.025, %21 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_21_D026 = sha_transform_15_19_reg;
	end
	/* sha_transform: %21*/
	/*   %D.026 = phi i32 [ %19, %15 ], [ %C.025, %21 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__21_18) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_21_exitcond15_reg == 1'd0))) */ begin
		sha_transform_21_D026 = sha_transform_21_C025_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %D.026 = phi i32 [ %19, %15 ], [ %C.025, %21 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_21_D026_reg <= sha_transform_21_D026;
		if (start == 1'b0 && ^(sha_transform_21_D026) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_D026_reg"); $finish; end
	end
	/* sha_transform: %21*/
	/*   %D.026 = phi i32 [ %19, %15 ], [ %C.025, %21 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__21_18) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_21_exitcond15_reg == 1'd0))) begin
		sha_transform_21_D026_reg <= sha_transform_21_D026;
		if (start == 1'b0 && ^(sha_transform_21_D026) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_D026_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %C.025 = phi i32 [ %18, %15 ], [ %36, %21 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_21_C025 = sha_transform_15_18_reg;
	end
	/* sha_transform: %21*/
	/*   %C.025 = phi i32 [ %18, %15 ], [ %36, %21 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__21_18) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_21_exitcond15_reg == 1'd0))) */ begin
		sha_transform_21_C025 = sha_transform_21_36_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %C.025 = phi i32 [ %18, %15 ], [ %36, %21 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_21_C025_reg <= sha_transform_21_C025;
		if (start == 1'b0 && ^(sha_transform_21_C025) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_C025_reg"); $finish; end
	end
	/* sha_transform: %21*/
	/*   %C.025 = phi i32 [ %18, %15 ], [ %36, %21 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__21_18) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_21_exitcond15_reg == 1'd0))) begin
		sha_transform_21_C025_reg <= sha_transform_21_C025;
		if (start == 1'b0 && ^(sha_transform_21_C025) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_C025_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %B.024 = phi i32 [ %17, %15 ], [ %A.023, %21 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_21_B024 = sha_transform_15_17_reg;
	end
	/* sha_transform: %21*/
	/*   %B.024 = phi i32 [ %17, %15 ], [ %A.023, %21 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__21_18) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_21_exitcond15_reg == 1'd0))) */ begin
		sha_transform_21_B024 = sha_transform_21_A023_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %B.024 = phi i32 [ %17, %15 ], [ %A.023, %21 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_21_B024_reg <= sha_transform_21_B024;
		if (start == 1'b0 && ^(sha_transform_21_B024) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_B024_reg"); $finish; end
	end
	/* sha_transform: %21*/
	/*   %B.024 = phi i32 [ %17, %15 ], [ %A.023, %21 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__21_18) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_21_exitcond15_reg == 1'd0))) begin
		sha_transform_21_B024_reg <= sha_transform_21_B024;
		if (start == 1'b0 && ^(sha_transform_21_B024) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_B024_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %A.023 = phi i32 [ %16, %15 ], [ %33, %21 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_21_A023 = sha_transform_15_16_reg;
	end
	/* sha_transform: %21*/
	/*   %A.023 = phi i32 [ %16, %15 ], [ %33, %21 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__21_18) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_21_exitcond15_reg == 1'd0))) */ begin
		sha_transform_21_A023 = sha_transform_21_33;
	end
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %A.023 = phi i32 [ %16, %15 ], [ %33, %21 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_21_A023_reg <= sha_transform_21_A023;
		if (start == 1'b0 && ^(sha_transform_21_A023) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_A023_reg"); $finish; end
	end
	/* sha_transform: %21*/
	/*   %A.023 = phi i32 [ %16, %15 ], [ %33, %21 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__21_18) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_21_exitcond15_reg == 1'd0))) begin
		sha_transform_21_A023_reg <= sha_transform_21_A023;
		if (start == 1'b0 && ^(sha_transform_21_A023) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_A023_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %i.222 = phi i32 [ 0, %15 ], [ %37, %21 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_21_i222 = 32'd0;
	end
	/* sha_transform: %21*/
	/*   %i.222 = phi i32 [ 0, %15 ], [ %37, %21 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__21_18) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_21_exitcond15_reg == 1'd0))) */ begin
		sha_transform_21_i222 = sha_transform_21_37_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %i.222 = phi i32 [ 0, %15 ], [ %37, %21 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_21_i222_reg <= sha_transform_21_i222;
		if (start == 1'b0 && ^(sha_transform_21_i222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_i222_reg"); $finish; end
	end
	/* sha_transform: %21*/
	/*   %i.222 = phi i32 [ 0, %15 ], [ %37, %21 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__21_18) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_21_exitcond15_reg == 1'd0))) begin
		sha_transform_21_i222_reg <= sha_transform_21_i222;
		if (start == 1'b0 && ^(sha_transform_21_i222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_i222_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %scevgep16 = getelementptr [80 x i32]* %W, i32 0, i32 %i.222*/
		sha_transform_21_scevgep16 = (1'd0 | (4 * sha_transform_21_i222_reg));
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %scevgep16 = getelementptr [80 x i32]* %W, i32 0, i32 %i.222*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_scevgep16_reg <= sha_transform_21_scevgep16;
		if (start == 1'b0 && ^(sha_transform_21_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %22 = shl i32 %A.023, 5*/
		sha_transform_21_22 = (sha_transform_21_A023_reg <<< (32'd5 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %22 = shl i32 %A.023, 5*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_22_reg <= sha_transform_21_22;
		if (start == 1'b0 && ^(sha_transform_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_22_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %23 = lshr i32 %A.023, 27*/
		sha_transform_21_23 = (sha_transform_21_A023_reg >>> (32'd27 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %23 = lshr i32 %A.023, 27*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_23_reg <= sha_transform_21_23;
		if (start == 1'b0 && ^(sha_transform_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_23_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %24 = or i32 %22, %23*/
		sha_transform_21_24 = (sha_transform_21_22 | sha_transform_21_23);
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %24 = or i32 %22, %23*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_24_reg <= sha_transform_21_24;
		if (start == 1'b0 && ^(sha_transform_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_24_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %25 = and i32 %C.025, %B.024*/
		sha_transform_21_25 = (sha_transform_21_C025_reg & sha_transform_21_B024_reg);
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %25 = and i32 %C.025, %B.024*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_25_reg <= sha_transform_21_25;
		if (start == 1'b0 && ^(sha_transform_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_25_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %26 = xor i32 %B.024, -1*/
		sha_transform_21_26 = (sha_transform_21_B024_reg ^ -32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %26 = xor i32 %B.024, -1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_26_reg <= sha_transform_21_26;
		if (start == 1'b0 && ^(sha_transform_21_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_26_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %27 = and i32 %D.026, %26*/
		sha_transform_21_27 = (sha_transform_21_D026_reg & sha_transform_21_26);
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %27 = and i32 %D.026, %26*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_27_reg <= sha_transform_21_27;
		if (start == 1'b0 && ^(sha_transform_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_27_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %28 = or i32 %27, %25*/
		sha_transform_21_28 = (sha_transform_21_27 | sha_transform_21_25);
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %28 = or i32 %27, %25*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_28_reg <= sha_transform_21_28;
		if (start == 1'b0 && ^(sha_transform_21_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_28_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %29 = load i32* %scevgep16, align 4, !tbaa !1*/
		sha_transform_21_29 = sha_transform_0_W_out_a;
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %29 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_18)) begin
		sha_transform_21_29_reg <= sha_transform_21_29;
		if (start == 1'b0 && ^(sha_transform_21_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_29_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %30 = add i32 %24, 1518500249*/
		sha_transform_21_30 = (sha_transform_21_24 + 32'd1518500249);
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %30 = add i32 %24, 1518500249*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_30_reg <= sha_transform_21_30;
		if (start == 1'b0 && ^(sha_transform_21_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_30_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %31 = add i32 %30, %E.027*/
		sha_transform_21_31 = (sha_transform_21_30 + sha_transform_21_E027_reg);
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %31 = add i32 %30, %E.027*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_31_reg <= sha_transform_21_31;
		if (start == 1'b0 && ^(sha_transform_21_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_31_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %32 = add i32 %31, %28*/
		sha_transform_21_32 = (sha_transform_21_31 + sha_transform_21_28);
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %32 = add i32 %31, %28*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_32_reg <= sha_transform_21_32;
		if (start == 1'b0 && ^(sha_transform_21_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_32_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %33 = add i32 %32, %29*/
		sha_transform_21_33 = (sha_transform_21_32_reg + sha_transform_21_29);
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %33 = add i32 %32, %29*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_18)) begin
		sha_transform_21_33_reg <= sha_transform_21_33;
		if (start == 1'b0 && ^(sha_transform_21_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_33_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %34 = shl i32 %B.024, 30*/
		sha_transform_21_34 = (sha_transform_21_B024_reg <<< (32'd30 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %34 = shl i32 %B.024, 30*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_34_reg <= sha_transform_21_34;
		if (start == 1'b0 && ^(sha_transform_21_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_34_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %35 = lshr i32 %B.024, 2*/
		sha_transform_21_35 = (sha_transform_21_B024_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %35 = lshr i32 %B.024, 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_35_reg <= sha_transform_21_35;
		if (start == 1'b0 && ^(sha_transform_21_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_35_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %36 = or i32 %34, %35*/
		sha_transform_21_36 = (sha_transform_21_34 | sha_transform_21_35);
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %36 = or i32 %34, %35*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_36_reg <= sha_transform_21_36;
		if (start == 1'b0 && ^(sha_transform_21_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_36_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %37 = add nsw i32 %i.222, 1*/
		sha_transform_21_37 = (sha_transform_21_i222_reg + 32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %37 = add nsw i32 %i.222, 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_37_reg <= sha_transform_21_37;
		if (start == 1'b0 && ^(sha_transform_21_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_37_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %21*/
	/*   %exitcond15 = icmp eq i32 %37, 20*/
		sha_transform_21_exitcond15 = (sha_transform_21_37 == 32'd20);
end
always @(posedge clk) begin
	/* sha_transform: %21*/
	/*   %exitcond15 = icmp eq i32 %37, 20*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_21_exitcond15_reg <= sha_transform_21_exitcond15;
		if (start == 1'b0 && ^(sha_transform_21_exitcond15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_21_exitcond15_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %indvar11 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next12, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_indvar11 = 32'd0;
	end
	/* sha_transform: %.preheader2*/
	/*   %indvar11 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next12, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_22) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) */ begin
		sha_transform_preheader2_indvar11 = sha_transform_preheader2_indvarnext12_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %indvar11 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next12, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_indvar11_reg <= sha_transform_preheader2_indvar11;
		if (start == 1'b0 && ^(sha_transform_preheader2_indvar11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_indvar11_reg"); $finish; end
	end
	/* sha_transform: %.preheader2*/
	/*   %indvar11 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next12, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_22) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) begin
		sha_transform_preheader2_indvar11_reg <= sha_transform_preheader2_indvar11;
		if (start == 1'b0 && ^(sha_transform_preheader2_indvar11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_indvar11_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %E.121 = phi i32 [ %D.026, %.preheader2.preheader ], [ %D.120, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_E121 = sha_transform_21_D026_reg;
	end
	/* sha_transform: %.preheader2*/
	/*   %E.121 = phi i32 [ %D.026, %.preheader2.preheader ], [ %D.120, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_22) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) */ begin
		sha_transform_preheader2_E121 = sha_transform_preheader2_D120_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %E.121 = phi i32 [ %D.026, %.preheader2.preheader ], [ %D.120, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_E121_reg <= sha_transform_preheader2_E121;
		if (start == 1'b0 && ^(sha_transform_preheader2_E121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_E121_reg"); $finish; end
	end
	/* sha_transform: %.preheader2*/
	/*   %E.121 = phi i32 [ %D.026, %.preheader2.preheader ], [ %D.120, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_22) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) begin
		sha_transform_preheader2_E121_reg <= sha_transform_preheader2_E121;
		if (start == 1'b0 && ^(sha_transform_preheader2_E121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_E121_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %D.120 = phi i32 [ %C.025, %.preheader2.preheader ], [ %C.119, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_D120 = sha_transform_21_C025_reg;
	end
	/* sha_transform: %.preheader2*/
	/*   %D.120 = phi i32 [ %C.025, %.preheader2.preheader ], [ %C.119, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_22) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) */ begin
		sha_transform_preheader2_D120 = sha_transform_preheader2_C119_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %D.120 = phi i32 [ %C.025, %.preheader2.preheader ], [ %C.119, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_D120_reg <= sha_transform_preheader2_D120;
		if (start == 1'b0 && ^(sha_transform_preheader2_D120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_D120_reg"); $finish; end
	end
	/* sha_transform: %.preheader2*/
	/*   %D.120 = phi i32 [ %C.025, %.preheader2.preheader ], [ %C.119, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_22) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) begin
		sha_transform_preheader2_D120_reg <= sha_transform_preheader2_D120;
		if (start == 1'b0 && ^(sha_transform_preheader2_D120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_D120_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %C.119 = phi i32 [ %36, %.preheader2.preheader ], [ %51, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_C119 = sha_transform_21_36_reg;
	end
	/* sha_transform: %.preheader2*/
	/*   %C.119 = phi i32 [ %36, %.preheader2.preheader ], [ %51, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_22) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) */ begin
		sha_transform_preheader2_C119 = sha_transform_preheader2_51_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %C.119 = phi i32 [ %36, %.preheader2.preheader ], [ %51, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_C119_reg <= sha_transform_preheader2_C119;
		if (start == 1'b0 && ^(sha_transform_preheader2_C119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_C119_reg"); $finish; end
	end
	/* sha_transform: %.preheader2*/
	/*   %C.119 = phi i32 [ %36, %.preheader2.preheader ], [ %51, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_22) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) begin
		sha_transform_preheader2_C119_reg <= sha_transform_preheader2_C119;
		if (start == 1'b0 && ^(sha_transform_preheader2_C119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_C119_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %B.118 = phi i32 [ %A.023, %.preheader2.preheader ], [ %A.117, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_B118 = sha_transform_21_A023_reg;
	end
	/* sha_transform: %.preheader2*/
	/*   %B.118 = phi i32 [ %A.023, %.preheader2.preheader ], [ %A.117, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_22) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) */ begin
		sha_transform_preheader2_B118 = sha_transform_preheader2_A117_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %B.118 = phi i32 [ %A.023, %.preheader2.preheader ], [ %A.117, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_B118_reg <= sha_transform_preheader2_B118;
		if (start == 1'b0 && ^(sha_transform_preheader2_B118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_B118_reg"); $finish; end
	end
	/* sha_transform: %.preheader2*/
	/*   %B.118 = phi i32 [ %A.023, %.preheader2.preheader ], [ %A.117, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_22) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) begin
		sha_transform_preheader2_B118_reg <= sha_transform_preheader2_B118;
		if (start == 1'b0 && ^(sha_transform_preheader2_B118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_B118_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %A.117 = phi i32 [ %33, %.preheader2.preheader ], [ %48, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_A117 = sha_transform_21_33_reg;
	end
	/* sha_transform: %.preheader2*/
	/*   %A.117 = phi i32 [ %33, %.preheader2.preheader ], [ %48, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_22) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) */ begin
		sha_transform_preheader2_A117 = sha_transform_preheader2_48;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %A.117 = phi i32 [ %33, %.preheader2.preheader ], [ %48, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_A117_reg <= sha_transform_preheader2_A117;
		if (start == 1'b0 && ^(sha_transform_preheader2_A117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_A117_reg"); $finish; end
	end
	/* sha_transform: %.preheader2*/
	/*   %A.117 = phi i32 [ %33, %.preheader2.preheader ], [ %48, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_22) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) begin
		sha_transform_preheader2_A117_reg <= sha_transform_preheader2_A117;
		if (start == 1'b0 && ^(sha_transform_preheader2_A117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_A117_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %38 = add i32 %indvar11, 20*/
		sha_transform_preheader2_38 = (sha_transform_preheader2_indvar11_reg + 32'd20);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %38 = add i32 %indvar11, 20*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_38_reg <= sha_transform_preheader2_38;
		if (start == 1'b0 && ^(sha_transform_preheader2_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_38_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %scevgep14 = getelementptr [80 x i32]* %W, i32 0, i32 %38*/
		sha_transform_preheader2_scevgep14 = (1'd0 | (4 * sha_transform_preheader2_38_reg));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %scevgep14 = getelementptr [80 x i32]* %W, i32 0, i32 %38*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_21)) begin
		sha_transform_preheader2_scevgep14_reg <= sha_transform_preheader2_scevgep14;
		if (start == 1'b0 && ^(sha_transform_preheader2_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %39 = shl i32 %A.117, 5*/
		sha_transform_preheader2_39 = (sha_transform_preheader2_A117_reg <<< (32'd5 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %39 = shl i32 %A.117, 5*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_39_reg <= sha_transform_preheader2_39;
		if (start == 1'b0 && ^(sha_transform_preheader2_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_39_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %40 = lshr i32 %A.117, 27*/
		sha_transform_preheader2_40 = (sha_transform_preheader2_A117_reg >>> (32'd27 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %40 = lshr i32 %A.117, 27*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_40_reg <= sha_transform_preheader2_40;
		if (start == 1'b0 && ^(sha_transform_preheader2_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_40_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %41 = or i32 %39, %40*/
		sha_transform_preheader2_41 = (sha_transform_preheader2_39 | sha_transform_preheader2_40);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %41 = or i32 %39, %40*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_41_reg <= sha_transform_preheader2_41;
		if (start == 1'b0 && ^(sha_transform_preheader2_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_41_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %42 = xor i32 %C.119, %B.118*/
		sha_transform_preheader2_42 = (sha_transform_preheader2_C119_reg ^ sha_transform_preheader2_B118_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %42 = xor i32 %C.119, %B.118*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_42_reg <= sha_transform_preheader2_42;
		if (start == 1'b0 && ^(sha_transform_preheader2_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_42_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %43 = xor i32 %42, %D.120*/
		sha_transform_preheader2_43 = (sha_transform_preheader2_42 ^ sha_transform_preheader2_D120_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %43 = xor i32 %42, %D.120*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_43_reg <= sha_transform_preheader2_43;
		if (start == 1'b0 && ^(sha_transform_preheader2_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_43_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %44 = load i32* %scevgep14, align 4, !tbaa !1*/
		sha_transform_preheader2_44 = sha_transform_0_W_out_b;
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %44 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_22)) begin
		sha_transform_preheader2_44_reg <= sha_transform_preheader2_44;
		if (start == 1'b0 && ^(sha_transform_preheader2_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_44_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %45 = add i32 %41, 1859775393*/
		sha_transform_preheader2_45 = (sha_transform_preheader2_41 + 32'd1859775393);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %45 = add i32 %41, 1859775393*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_45_reg <= sha_transform_preheader2_45;
		if (start == 1'b0 && ^(sha_transform_preheader2_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_45_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %46 = add i32 %45, %43*/
		sha_transform_preheader2_46 = (sha_transform_preheader2_45 + sha_transform_preheader2_43);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %46 = add i32 %45, %43*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_46_reg <= sha_transform_preheader2_46;
		if (start == 1'b0 && ^(sha_transform_preheader2_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_46_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %47 = add i32 %46, %E.121*/
		sha_transform_preheader2_47 = (sha_transform_preheader2_46 + sha_transform_preheader2_E121_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %47 = add i32 %46, %E.121*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_47_reg <= sha_transform_preheader2_47;
		if (start == 1'b0 && ^(sha_transform_preheader2_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_47_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %48 = add i32 %47, %44*/
		sha_transform_preheader2_48 = (sha_transform_preheader2_47_reg + sha_transform_preheader2_44);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %48 = add i32 %47, %44*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_22)) begin
		sha_transform_preheader2_48_reg <= sha_transform_preheader2_48;
		if (start == 1'b0 && ^(sha_transform_preheader2_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_48_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %49 = shl i32 %B.118, 30*/
		sha_transform_preheader2_49 = (sha_transform_preheader2_B118_reg <<< (32'd30 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %49 = shl i32 %B.118, 30*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_49_reg <= sha_transform_preheader2_49;
		if (start == 1'b0 && ^(sha_transform_preheader2_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_49_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %50 = lshr i32 %B.118, 2*/
		sha_transform_preheader2_50 = (sha_transform_preheader2_B118_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %50 = lshr i32 %B.118, 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_50_reg <= sha_transform_preheader2_50;
		if (start == 1'b0 && ^(sha_transform_preheader2_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_50_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %51 = or i32 %49, %50*/
		sha_transform_preheader2_51 = (sha_transform_preheader2_49 | sha_transform_preheader2_50);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %51 = or i32 %49, %50*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_51_reg <= sha_transform_preheader2_51;
		if (start == 1'b0 && ^(sha_transform_preheader2_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_51_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %indvar.next12 = add i32 %indvar11, 1*/
		sha_transform_preheader2_indvarnext12 = (sha_transform_preheader2_indvar11_reg + 32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %indvar.next12 = add i32 %indvar11, 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_indvarnext12_reg <= sha_transform_preheader2_indvarnext12;
		if (start == 1'b0 && ^(sha_transform_preheader2_indvarnext12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_indvarnext12_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %exitcond13 = icmp eq i32 %indvar.next12, 20*/
		sha_transform_preheader2_exitcond13 = (sha_transform_preheader2_indvarnext12 == 32'd20);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %exitcond13 = icmp eq i32 %indvar.next12, 20*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_20)) begin
		sha_transform_preheader2_exitcond13_reg <= sha_transform_preheader2_exitcond13;
		if (start == 1'b0 && ^(sha_transform_preheader2_exitcond13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_exitcond13_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %indvar8 = phi i32 [ 0, %.preheader1.preheader ], [ %indvar.next9, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_indvar8 = 32'd0;
	end
	/* sha_transform: %.preheader1*/
	/*   %indvar8 = phi i32 [ 0, %.preheader1.preheader ], [ %indvar.next9, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) */ begin
		sha_transform_preheader1_indvar8 = sha_transform_preheader1_indvarnext9_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %indvar8 = phi i32 [ 0, %.preheader1.preheader ], [ %indvar.next9, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_indvar8_reg <= sha_transform_preheader1_indvar8;
		if (start == 1'b0 && ^(sha_transform_preheader1_indvar8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_indvar8_reg"); $finish; end
	end
	/* sha_transform: %.preheader1*/
	/*   %indvar8 = phi i32 [ 0, %.preheader1.preheader ], [ %indvar.next9, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) begin
		sha_transform_preheader1_indvar8_reg <= sha_transform_preheader1_indvar8;
		if (start == 1'b0 && ^(sha_transform_preheader1_indvar8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_indvar8_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %E.215 = phi i32 [ %D.120, %.preheader1.preheader ], [ %D.214, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_E215 = sha_transform_preheader2_D120_reg;
	end
	/* sha_transform: %.preheader1*/
	/*   %E.215 = phi i32 [ %D.120, %.preheader1.preheader ], [ %D.214, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) */ begin
		sha_transform_preheader1_E215 = sha_transform_preheader1_D214_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %E.215 = phi i32 [ %D.120, %.preheader1.preheader ], [ %D.214, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_E215_reg <= sha_transform_preheader1_E215;
		if (start == 1'b0 && ^(sha_transform_preheader1_E215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_E215_reg"); $finish; end
	end
	/* sha_transform: %.preheader1*/
	/*   %E.215 = phi i32 [ %D.120, %.preheader1.preheader ], [ %D.214, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) begin
		sha_transform_preheader1_E215_reg <= sha_transform_preheader1_E215;
		if (start == 1'b0 && ^(sha_transform_preheader1_E215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_E215_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %D.214 = phi i32 [ %C.119, %.preheader1.preheader ], [ %C.213, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_D214 = sha_transform_preheader2_C119_reg;
	end
	/* sha_transform: %.preheader1*/
	/*   %D.214 = phi i32 [ %C.119, %.preheader1.preheader ], [ %C.213, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) */ begin
		sha_transform_preheader1_D214 = sha_transform_preheader1_C213_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %D.214 = phi i32 [ %C.119, %.preheader1.preheader ], [ %C.213, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_D214_reg <= sha_transform_preheader1_D214;
		if (start == 1'b0 && ^(sha_transform_preheader1_D214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_D214_reg"); $finish; end
	end
	/* sha_transform: %.preheader1*/
	/*   %D.214 = phi i32 [ %C.119, %.preheader1.preheader ], [ %C.213, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) begin
		sha_transform_preheader1_D214_reg <= sha_transform_preheader1_D214;
		if (start == 1'b0 && ^(sha_transform_preheader1_D214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_D214_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %C.213 = phi i32 [ %51, %.preheader1.preheader ], [ %67, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_C213 = sha_transform_preheader2_51_reg;
	end
	/* sha_transform: %.preheader1*/
	/*   %C.213 = phi i32 [ %51, %.preheader1.preheader ], [ %67, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) */ begin
		sha_transform_preheader1_C213 = sha_transform_preheader1_67_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %C.213 = phi i32 [ %51, %.preheader1.preheader ], [ %67, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_C213_reg <= sha_transform_preheader1_C213;
		if (start == 1'b0 && ^(sha_transform_preheader1_C213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_C213_reg"); $finish; end
	end
	/* sha_transform: %.preheader1*/
	/*   %C.213 = phi i32 [ %51, %.preheader1.preheader ], [ %67, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) begin
		sha_transform_preheader1_C213_reg <= sha_transform_preheader1_C213;
		if (start == 1'b0 && ^(sha_transform_preheader1_C213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_C213_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %B.212 = phi i32 [ %A.117, %.preheader1.preheader ], [ %A.211, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_B212 = sha_transform_preheader2_A117_reg;
	end
	/* sha_transform: %.preheader1*/
	/*   %B.212 = phi i32 [ %A.117, %.preheader1.preheader ], [ %A.211, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) */ begin
		sha_transform_preheader1_B212 = sha_transform_preheader1_A211_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %B.212 = phi i32 [ %A.117, %.preheader1.preheader ], [ %A.211, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_B212_reg <= sha_transform_preheader1_B212;
		if (start == 1'b0 && ^(sha_transform_preheader1_B212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_B212_reg"); $finish; end
	end
	/* sha_transform: %.preheader1*/
	/*   %B.212 = phi i32 [ %A.117, %.preheader1.preheader ], [ %A.211, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) begin
		sha_transform_preheader1_B212_reg <= sha_transform_preheader1_B212;
		if (start == 1'b0 && ^(sha_transform_preheader1_B212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_B212_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %A.211 = phi i32 [ %48, %.preheader1.preheader ], [ %64, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_A211 = sha_transform_preheader2_48_reg;
	end
	/* sha_transform: %.preheader1*/
	/*   %A.211 = phi i32 [ %48, %.preheader1.preheader ], [ %64, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) */ begin
		sha_transform_preheader1_A211 = sha_transform_preheader1_64;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %A.211 = phi i32 [ %48, %.preheader1.preheader ], [ %64, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_23) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_A211_reg <= sha_transform_preheader1_A211;
		if (start == 1'b0 && ^(sha_transform_preheader1_A211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_A211_reg"); $finish; end
	end
	/* sha_transform: %.preheader1*/
	/*   %A.211 = phi i32 [ %48, %.preheader1.preheader ], [ %64, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) begin
		sha_transform_preheader1_A211_reg <= sha_transform_preheader1_A211;
		if (start == 1'b0 && ^(sha_transform_preheader1_A211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_A211_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %52 = add i32 %indvar8, 40*/
		sha_transform_preheader1_52 = (sha_transform_preheader1_indvar8_reg + 32'd40);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %52 = add i32 %indvar8, 40*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_52_reg <= sha_transform_preheader1_52;
		if (start == 1'b0 && ^(sha_transform_preheader1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_52_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %scevgep10 = getelementptr [80 x i32]* %W, i32 0, i32 %52*/
		sha_transform_preheader1_scevgep10 = (1'd0 | (4 * sha_transform_preheader1_52_reg));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %scevgep10 = getelementptr [80 x i32]* %W, i32 0, i32 %52*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_25)) begin
		sha_transform_preheader1_scevgep10_reg <= sha_transform_preheader1_scevgep10;
		if (start == 1'b0 && ^(sha_transform_preheader1_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %53 = shl i32 %A.211, 5*/
		sha_transform_preheader1_53 = (sha_transform_preheader1_A211_reg <<< (32'd5 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %53 = shl i32 %A.211, 5*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_53_reg <= sha_transform_preheader1_53;
		if (start == 1'b0 && ^(sha_transform_preheader1_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_53_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %54 = lshr i32 %A.211, 27*/
		sha_transform_preheader1_54 = (sha_transform_preheader1_A211_reg >>> (32'd27 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %54 = lshr i32 %A.211, 27*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_54_reg <= sha_transform_preheader1_54;
		if (start == 1'b0 && ^(sha_transform_preheader1_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_54_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %55 = or i32 %53, %54*/
		sha_transform_preheader1_55 = (sha_transform_preheader1_53 | sha_transform_preheader1_54);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %55 = or i32 %53, %54*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_55_reg <= sha_transform_preheader1_55;
		if (start == 1'b0 && ^(sha_transform_preheader1_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_55_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %56 = or i32 %D.214, %C.213*/
		sha_transform_preheader1_56 = (sha_transform_preheader1_D214_reg | sha_transform_preheader1_C213_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %56 = or i32 %D.214, %C.213*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_56_reg <= sha_transform_preheader1_56;
		if (start == 1'b0 && ^(sha_transform_preheader1_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_56_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %57 = and i32 %56, %B.212*/
		sha_transform_preheader1_57 = (sha_transform_preheader1_56 & sha_transform_preheader1_B212_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %57 = and i32 %56, %B.212*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_57_reg <= sha_transform_preheader1_57;
		if (start == 1'b0 && ^(sha_transform_preheader1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_57_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %58 = and i32 %D.214, %C.213*/
		sha_transform_preheader1_58 = (sha_transform_preheader1_D214_reg & sha_transform_preheader1_C213_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %58 = and i32 %D.214, %C.213*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_58_reg <= sha_transform_preheader1_58;
		if (start == 1'b0 && ^(sha_transform_preheader1_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_58_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %59 = or i32 %57, %58*/
		sha_transform_preheader1_59 = (sha_transform_preheader1_57 | sha_transform_preheader1_58);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %59 = or i32 %57, %58*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_59_reg <= sha_transform_preheader1_59;
		if (start == 1'b0 && ^(sha_transform_preheader1_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_59_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %60 = load i32* %scevgep10, align 4, !tbaa !1*/
		sha_transform_preheader1_60 = sha_transform_0_W_out_a;
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %60 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_26)) begin
		sha_transform_preheader1_60_reg <= sha_transform_preheader1_60;
		if (start == 1'b0 && ^(sha_transform_preheader1_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_60_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %61 = add i32 %55, -1894007588*/
		sha_transform_preheader1_61 = (sha_transform_preheader1_55 + -32'd1894007588);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %61 = add i32 %55, -1894007588*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_61_reg <= sha_transform_preheader1_61;
		if (start == 1'b0 && ^(sha_transform_preheader1_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_61_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %62 = add i32 %61, %E.215*/
		sha_transform_preheader1_62 = (sha_transform_preheader1_61 + sha_transform_preheader1_E215_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %62 = add i32 %61, %E.215*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_62_reg <= sha_transform_preheader1_62;
		if (start == 1'b0 && ^(sha_transform_preheader1_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_62_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %63 = add i32 %62, %59*/
		sha_transform_preheader1_63 = (sha_transform_preheader1_62 + sha_transform_preheader1_59);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %63 = add i32 %62, %59*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_63_reg <= sha_transform_preheader1_63;
		if (start == 1'b0 && ^(sha_transform_preheader1_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_63_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %64 = add i32 %63, %60*/
		sha_transform_preheader1_64 = (sha_transform_preheader1_63_reg + sha_transform_preheader1_60);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %64 = add i32 %63, %60*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_26)) begin
		sha_transform_preheader1_64_reg <= sha_transform_preheader1_64;
		if (start == 1'b0 && ^(sha_transform_preheader1_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_64_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %65 = shl i32 %B.212, 30*/
		sha_transform_preheader1_65 = (sha_transform_preheader1_B212_reg <<< (32'd30 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %65 = shl i32 %B.212, 30*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_65_reg <= sha_transform_preheader1_65;
		if (start == 1'b0 && ^(sha_transform_preheader1_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_65_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %66 = lshr i32 %B.212, 2*/
		sha_transform_preheader1_66 = (sha_transform_preheader1_B212_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %66 = lshr i32 %B.212, 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_66_reg <= sha_transform_preheader1_66;
		if (start == 1'b0 && ^(sha_transform_preheader1_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_66_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %67 = or i32 %65, %66*/
		sha_transform_preheader1_67 = (sha_transform_preheader1_65 | sha_transform_preheader1_66);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %67 = or i32 %65, %66*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_67_reg <= sha_transform_preheader1_67;
		if (start == 1'b0 && ^(sha_transform_preheader1_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_67_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %indvar.next9 = add i32 %indvar8, 1*/
		sha_transform_preheader1_indvarnext9 = (sha_transform_preheader1_indvar8_reg + 32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %indvar.next9 = add i32 %indvar8, 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_indvarnext9_reg <= sha_transform_preheader1_indvarnext9;
		if (start == 1'b0 && ^(sha_transform_preheader1_indvarnext9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_indvarnext9_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %exitcond = icmp eq i32 %indvar.next9, 20*/
		sha_transform_preheader1_exitcond = (sha_transform_preheader1_indvarnext9 == 32'd20);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %exitcond = icmp eq i32 %indvar.next9, 20*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_24)) begin
		sha_transform_preheader1_exitcond_reg <= sha_transform_preheader1_exitcond;
		if (start == 1'b0 && ^(sha_transform_preheader1_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_indvar = 32'd0;
	end
	/* sha_transform: %.preheader*/
	/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_30) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) */ begin
		sha_transform_preheader_indvar = sha_transform_preheader_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_indvar_reg <= sha_transform_preheader_indvar;
		if (start == 1'b0 && ^(sha_transform_preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_indvar_reg"); $finish; end
	end
	/* sha_transform: %.preheader*/
	/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %.preheader ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_30) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) begin
		sha_transform_preheader_indvar_reg <= sha_transform_preheader_indvar;
		if (start == 1'b0 && ^(sha_transform_preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %E.39 = phi i32 [ %D.214, %.preheader.preheader ], [ %D.38, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_E39 = sha_transform_preheader1_D214_reg;
	end
	/* sha_transform: %.preheader*/
	/*   %E.39 = phi i32 [ %D.214, %.preheader.preheader ], [ %D.38, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_30) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) */ begin
		sha_transform_preheader_E39 = sha_transform_preheader_D38_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %E.39 = phi i32 [ %D.214, %.preheader.preheader ], [ %D.38, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_E39_reg <= sha_transform_preheader_E39;
		if (start == 1'b0 && ^(sha_transform_preheader_E39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_E39_reg"); $finish; end
	end
	/* sha_transform: %.preheader*/
	/*   %E.39 = phi i32 [ %D.214, %.preheader.preheader ], [ %D.38, %.preheader ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_30) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) begin
		sha_transform_preheader_E39_reg <= sha_transform_preheader_E39;
		if (start == 1'b0 && ^(sha_transform_preheader_E39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_E39_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %D.38 = phi i32 [ %C.213, %.preheader.preheader ], [ %C.37, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_D38 = sha_transform_preheader1_C213_reg;
	end
	/* sha_transform: %.preheader*/
	/*   %D.38 = phi i32 [ %C.213, %.preheader.preheader ], [ %C.37, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_30) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) */ begin
		sha_transform_preheader_D38 = sha_transform_preheader_C37_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %D.38 = phi i32 [ %C.213, %.preheader.preheader ], [ %C.37, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_D38_reg <= sha_transform_preheader_D38;
		if (start == 1'b0 && ^(sha_transform_preheader_D38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_D38_reg"); $finish; end
	end
	/* sha_transform: %.preheader*/
	/*   %D.38 = phi i32 [ %C.213, %.preheader.preheader ], [ %C.37, %.preheader ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_30) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) begin
		sha_transform_preheader_D38_reg <= sha_transform_preheader_D38;
		if (start == 1'b0 && ^(sha_transform_preheader_D38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_D38_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %C.37 = phi i32 [ %67, %.preheader.preheader ], [ %81, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_C37 = sha_transform_preheader1_67_reg;
	end
	/* sha_transform: %.preheader*/
	/*   %C.37 = phi i32 [ %67, %.preheader.preheader ], [ %81, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_30) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) */ begin
		sha_transform_preheader_C37 = sha_transform_preheader_81_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %C.37 = phi i32 [ %67, %.preheader.preheader ], [ %81, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_C37_reg <= sha_transform_preheader_C37;
		if (start == 1'b0 && ^(sha_transform_preheader_C37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_C37_reg"); $finish; end
	end
	/* sha_transform: %.preheader*/
	/*   %C.37 = phi i32 [ %67, %.preheader.preheader ], [ %81, %.preheader ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_30) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) begin
		sha_transform_preheader_C37_reg <= sha_transform_preheader_C37;
		if (start == 1'b0 && ^(sha_transform_preheader_C37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_C37_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %B.36 = phi i32 [ %A.211, %.preheader.preheader ], [ %A.35, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_B36 = sha_transform_preheader1_A211_reg;
	end
	/* sha_transform: %.preheader*/
	/*   %B.36 = phi i32 [ %A.211, %.preheader.preheader ], [ %A.35, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_30) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) */ begin
		sha_transform_preheader_B36 = sha_transform_preheader_A35_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %B.36 = phi i32 [ %A.211, %.preheader.preheader ], [ %A.35, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_B36_reg <= sha_transform_preheader_B36;
		if (start == 1'b0 && ^(sha_transform_preheader_B36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_B36_reg"); $finish; end
	end
	/* sha_transform: %.preheader*/
	/*   %B.36 = phi i32 [ %A.211, %.preheader.preheader ], [ %A.35, %.preheader ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_30) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) begin
		sha_transform_preheader_B36_reg <= sha_transform_preheader_B36;
		if (start == 1'b0 && ^(sha_transform_preheader_B36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_B36_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %A.35 = phi i32 [ %64, %.preheader.preheader ], [ %78, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_A35 = sha_transform_preheader1_64_reg;
	end
	/* sha_transform: %.preheader*/
	/*   %A.35 = phi i32 [ %64, %.preheader.preheader ], [ %78, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_30) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) */ begin
		sha_transform_preheader_A35 = sha_transform_preheader_78;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %A.35 = phi i32 [ %64, %.preheader.preheader ], [ %78, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_A35_reg <= sha_transform_preheader_A35;
		if (start == 1'b0 && ^(sha_transform_preheader_A35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_A35_reg"); $finish; end
	end
	/* sha_transform: %.preheader*/
	/*   %A.35 = phi i32 [ %64, %.preheader.preheader ], [ %78, %.preheader ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_30) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) begin
		sha_transform_preheader_A35_reg <= sha_transform_preheader_A35;
		if (start == 1'b0 && ^(sha_transform_preheader_A35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_A35_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %68 = add i32 %indvar, 60*/
		sha_transform_preheader_68 = (sha_transform_preheader_indvar_reg + 32'd60);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %68 = add i32 %indvar, 60*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_68_reg <= sha_transform_preheader_68;
		if (start == 1'b0 && ^(sha_transform_preheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_68_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %scevgep = getelementptr [80 x i32]* %W, i32 0, i32 %68*/
		sha_transform_preheader_scevgep = (1'd0 | (4 * sha_transform_preheader_68_reg));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %scevgep = getelementptr [80 x i32]* %W, i32 0, i32 %68*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_29)) begin
		sha_transform_preheader_scevgep_reg <= sha_transform_preheader_scevgep;
		if (start == 1'b0 && ^(sha_transform_preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %69 = shl i32 %A.35, 5*/
		sha_transform_preheader_69 = (sha_transform_preheader_A35_reg <<< (32'd5 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %69 = shl i32 %A.35, 5*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_69_reg <= sha_transform_preheader_69;
		if (start == 1'b0 && ^(sha_transform_preheader_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_69_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %70 = lshr i32 %A.35, 27*/
		sha_transform_preheader_70 = (sha_transform_preheader_A35_reg >>> (32'd27 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %70 = lshr i32 %A.35, 27*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_70_reg <= sha_transform_preheader_70;
		if (start == 1'b0 && ^(sha_transform_preheader_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_70_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %71 = or i32 %69, %70*/
		sha_transform_preheader_71 = (sha_transform_preheader_69 | sha_transform_preheader_70);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %71 = or i32 %69, %70*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_71_reg <= sha_transform_preheader_71;
		if (start == 1'b0 && ^(sha_transform_preheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_71_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %72 = xor i32 %C.37, %B.36*/
		sha_transform_preheader_72 = (sha_transform_preheader_C37_reg ^ sha_transform_preheader_B36_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %72 = xor i32 %C.37, %B.36*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_72_reg <= sha_transform_preheader_72;
		if (start == 1'b0 && ^(sha_transform_preheader_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_72_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %73 = xor i32 %72, %D.38*/
		sha_transform_preheader_73 = (sha_transform_preheader_72 ^ sha_transform_preheader_D38_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %73 = xor i32 %72, %D.38*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_73_reg <= sha_transform_preheader_73;
		if (start == 1'b0 && ^(sha_transform_preheader_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_73_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %74 = load i32* %scevgep, align 4, !tbaa !1*/
		sha_transform_preheader_74 = sha_transform_0_W_out_b;
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %74 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_30)) begin
		sha_transform_preheader_74_reg <= sha_transform_preheader_74;
		if (start == 1'b0 && ^(sha_transform_preheader_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_74_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %75 = add i32 %71, -899497514*/
		sha_transform_preheader_75 = (sha_transform_preheader_71 + -32'd899497514);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %75 = add i32 %71, -899497514*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_75_reg <= sha_transform_preheader_75;
		if (start == 1'b0 && ^(sha_transform_preheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_75_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %76 = add i32 %75, %73*/
		sha_transform_preheader_76 = (sha_transform_preheader_75 + sha_transform_preheader_73);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %76 = add i32 %75, %73*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_76_reg <= sha_transform_preheader_76;
		if (start == 1'b0 && ^(sha_transform_preheader_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_76_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %77 = add i32 %76, %E.39*/
		sha_transform_preheader_77 = (sha_transform_preheader_76 + sha_transform_preheader_E39_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %77 = add i32 %76, %E.39*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_77_reg <= sha_transform_preheader_77;
		if (start == 1'b0 && ^(sha_transform_preheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_77_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %78 = add i32 %77, %74*/
		sha_transform_preheader_78 = (sha_transform_preheader_77_reg + sha_transform_preheader_74);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %78 = add i32 %77, %74*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_30)) begin
		sha_transform_preheader_78_reg <= sha_transform_preheader_78;
		if (start == 1'b0 && ^(sha_transform_preheader_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_78_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %79 = shl i32 %B.36, 30*/
		sha_transform_preheader_79 = (sha_transform_preheader_B36_reg <<< (32'd30 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %79 = shl i32 %B.36, 30*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_79_reg <= sha_transform_preheader_79;
		if (start == 1'b0 && ^(sha_transform_preheader_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_79_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %80 = lshr i32 %B.36, 2*/
		sha_transform_preheader_80 = (sha_transform_preheader_B36_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %80 = lshr i32 %B.36, 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_80_reg <= sha_transform_preheader_80;
		if (start == 1'b0 && ^(sha_transform_preheader_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_80_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %81 = or i32 %79, %80*/
		sha_transform_preheader_81 = (sha_transform_preheader_79 | sha_transform_preheader_80);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %81 = or i32 %79, %80*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_81_reg <= sha_transform_preheader_81;
		if (start == 1'b0 && ^(sha_transform_preheader_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_81_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %indvar.next = add i32 %indvar, 1*/
		sha_transform_preheader_indvarnext = (sha_transform_preheader_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_indvarnext_reg <= sha_transform_preheader_indvarnext;
		if (start == 1'b0 && ^(sha_transform_preheader_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %exitcond7 = icmp eq i32 %indvar.next, 20*/
		sha_transform_preheader_exitcond7 = (sha_transform_preheader_indvarnext == 32'd20);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %exitcond7 = icmp eq i32 %indvar.next, 20*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_28)) begin
		sha_transform_preheader_exitcond7_reg <= sha_transform_preheader_exitcond7;
		if (start == 1'b0 && ^(sha_transform_preheader_exitcond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_exitcond7_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %82*/
	/*   %83 = add i32 %16, %78*/
		sha_transform_82_83 = (sha_transform_15_16_reg + sha_transform_preheader_78_reg);
end
always @(posedge clk) begin
	/* sha_transform: %82*/
	/*   %83 = add i32 %16, %78*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		sha_transform_82_83_reg <= sha_transform_82_83;
		if (start == 1'b0 && ^(sha_transform_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_82_83_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %82*/
	/*   %84 = add i32 %17, %A.35*/
		sha_transform_82_84 = (sha_transform_15_17_reg + sha_transform_preheader_A35_reg);
end
always @(posedge clk) begin
	/* sha_transform: %82*/
	/*   %84 = add i32 %17, %A.35*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		sha_transform_82_84_reg <= sha_transform_82_84;
		if (start == 1'b0 && ^(sha_transform_82_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_82_84_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %82*/
	/*   %85 = add i32 %18, %81*/
		sha_transform_82_85 = (sha_transform_15_18_reg + sha_transform_preheader_81_reg);
end
always @(posedge clk) begin
	/* sha_transform: %82*/
	/*   %85 = add i32 %18, %81*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		sha_transform_82_85_reg <= sha_transform_82_85;
		if (start == 1'b0 && ^(sha_transform_82_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_82_85_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %82*/
	/*   %86 = add i32 %19, %C.37*/
		sha_transform_82_86 = (sha_transform_15_19_reg + sha_transform_preheader_C37_reg);
end
always @(posedge clk) begin
	/* sha_transform: %82*/
	/*   %86 = add i32 %19, %C.37*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		sha_transform_82_86_reg <= sha_transform_82_86;
		if (start == 1'b0 && ^(sha_transform_82_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_82_86_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %82*/
	/*   %87 = add i32 %20, %D.38*/
		sha_transform_82_87 = (sha_transform_15_20_reg + sha_transform_preheader_D38_reg);
end
always @(posedge clk) begin
	/* sha_transform: %82*/
	/*   %87 = add i32 %20, %D.38*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		sha_transform_82_87_reg <= sha_transform_82_87;
		if (start == 1'b0 && ^(sha_transform_82_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_82_87_reg"); $finish; end
	end
end
always @(*) begin
	sha_transform_0_W_address_a = 1'd0;
	/* sha_transform: %1*/
	/*   store i32 %2, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__1_4)) begin
		sha_transform_0_W_address_a = (sha_transform_1_scevgep26_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader3*/
	/*   %8 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_8)) begin
		sha_transform_0_W_address_a = (sha_transform_preheader3_scevgep24 >>> 3'd2);
	end
	/* sha_transform: %.preheader3*/
	/*   %11 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_9)) begin
		sha_transform_0_W_address_a = (sha_transform_preheader3_scevgep22_reg >>> 3'd2);
	end
	/* sha_transform: %21*/
	/*   %29 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_0_W_address_a = (sha_transform_21_scevgep16 >>> 3'd2);
	end
	/* sha_transform: %.preheader1*/
	/*   %60 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_25)) begin
		sha_transform_0_W_address_a = (sha_transform_preheader1_scevgep10 >>> 3'd2);
	end
end
always @(*) begin
	sha_transform_0_W_write_enable_a = 1'd0;
	/* sha_transform: %1*/
	/*   store i32 %2, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__1_4)) begin
		sha_transform_0_W_write_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader3*/
	/*   %8 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_8)) begin
		sha_transform_0_W_write_enable_a = 1'd0;
	end
	/* sha_transform: %.preheader3*/
	/*   %11 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_9)) begin
		sha_transform_0_W_write_enable_a = 1'd0;
	end
	/* sha_transform: %21*/
	/*   %29 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__21_17)) begin
		sha_transform_0_W_write_enable_a = 1'd0;
	end
	/* sha_transform: %.preheader1*/
	/*   %60 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_25)) begin
		sha_transform_0_W_write_enable_a = 1'd0;
	end
end
always @(*) begin
	sha_transform_0_W_in_a = 1'd0;
	/* sha_transform: %1*/
	/*   store i32 %2, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__1_4)) begin
		sha_transform_0_W_in_a = sha_transform_1_2;
	end
end
always @(*) begin
	sha_transform_0_W_address_b = 1'd0;
	/* sha_transform: %.preheader3*/
	/*   %9 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_8)) begin
		sha_transform_0_W_address_b = (sha_transform_preheader3_scevgep23 >>> 3'd2);
	end
	/* sha_transform: %.preheader3*/
	/*   %13 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_9)) begin
		sha_transform_0_W_address_b = (sha_transform_preheader3_scevgep21_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader3*/
	/*   store i32 %14, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_10)) begin
		sha_transform_0_W_address_b = (sha_transform_preheader3_scevgep20_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader2*/
	/*   %44 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_21)) begin
		sha_transform_0_W_address_b = (sha_transform_preheader2_scevgep14 >>> 3'd2);
	end
	/* sha_transform: %.preheader*/
	/*   %74 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_29)) begin
		sha_transform_0_W_address_b = (sha_transform_preheader_scevgep >>> 3'd2);
	end
end
always @(*) begin
	sha_transform_0_W_write_enable_b = 1'd0;
	/* sha_transform: %.preheader3*/
	/*   %9 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_8)) begin
		sha_transform_0_W_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader3*/
	/*   %13 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_9)) begin
		sha_transform_0_W_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader3*/
	/*   store i32 %14, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_10)) begin
		sha_transform_0_W_write_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader2*/
	/*   %44 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_21)) begin
		sha_transform_0_W_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader*/
	/*   %74 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_29)) begin
		sha_transform_0_W_write_enable_b = 1'd0;
	end
end
always @(*) begin
	sha_transform_0_W_in_b = 1'd0;
	/* sha_transform: %.preheader3*/
	/*   store i32 %14, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader3_10)) begin
		sha_transform_0_W_in_b = sha_transform_preheader3_14;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* sha_transform: %82*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_34)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* sha_transform: %1*/
	/*   %2 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__1_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %15*/
	/*   %16 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %15*/
	/*   %18 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %15*/
	/*   %20 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %82*/
	/*   store i32 %83, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %82*/
	/*   store i32 %85, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_32)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* sha_transform: %1*/
	/*   %2 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__1_2)) begin
		memory_controller_address_a = sha_transform_1_scevgep27;
	end
	/* sha_transform: %15*/
	/*   %16 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_12)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* sha_transform: %15*/
	/*   %18 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_13)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
	/* sha_transform: %15*/
	/*   %20 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_14)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest4_a;
	end
	/* sha_transform: %82*/
	/*   store i32 %83, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* sha_transform: %82*/
	/*   store i32 %85, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_32)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %1*/
	/*   %2 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__1_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %15*/
	/*   %16 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_12)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %15*/
	/*   %18 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_13)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %15*/
	/*   %20 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %82*/
	/*   store i32 %83, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %82*/
	/*   store i32 %85, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_32)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* sha_transform: %82*/
	/*   store i32 %83, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		memory_controller_in_a = sha_transform_82_83;
	end
	/* sha_transform: %82*/
	/*   store i32 %85, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_32)) begin
		memory_controller_in_a = sha_transform_82_85_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* sha_transform: %1*/
	/*   %2 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__1_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %15*/
	/*   %16 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %15*/
	/*   %18 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %15*/
	/*   %20 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %82*/
	/*   store i32 %83, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %82*/
	/*   store i32 %85, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_32)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* sha_transform: %15*/
	/*   %17 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %15*/
	/*   %19 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %82*/
	/*   store i32 %84, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %82*/
	/*   store i32 %86, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %82*/
	/*   store i32 %87, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_33)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* sha_transform: %15*/
	/*   %17 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_12)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* sha_transform: %15*/
	/*   %19 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_13)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
	/* sha_transform: %82*/
	/*   store i32 %84, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* sha_transform: %82*/
	/*   store i32 %86, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_32)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
	/* sha_transform: %82*/
	/*   store i32 %87, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_33)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest4_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %15*/
	/*   %17 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_12)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %15*/
	/*   %19 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_13)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %82*/
	/*   store i32 %84, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* sha_transform: %82*/
	/*   store i32 %86, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_32)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* sha_transform: %82*/
	/*   store i32 %87, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_33)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* sha_transform: %82*/
	/*   store i32 %84, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		memory_controller_in_b = sha_transform_82_84;
	end
	/* sha_transform: %82*/
	/*   store i32 %86, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_32)) begin
		memory_controller_in_b = sha_transform_82_86_reg;
	end
	/* sha_transform: %82*/
	/*   store i32 %87, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_33)) begin
		memory_controller_in_b = sha_transform_82_87_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* sha_transform: %15*/
	/*   %17 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %15*/
	/*   %19 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__15_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %82*/
	/*   store i32 %84, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %82*/
	/*   store i32 %86, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %82*/
	/*   store i32 %87, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__82_33)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB__0_2 = 6'd2;
parameter [5:0] LEGUP_F_main_BB__0_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB__0_4 = 6'd4;
parameter [5:0] LEGUP_F_main_BB_preheaderlrphii_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB_preheaderlrphii_6 = 6'd6;
parameter [5:0] LEGUP_F_main_BB_preheaderii_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB_preheaderii_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB__9_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB__9_10 = 6'd10;
parameter [5:0] LEGUP_F_main_BB__9_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB__9_12 = 6'd12;
parameter [5:0] LEGUP_F_main_BB__9_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB_memcpyexitii_14 = 6'd14;
parameter [5:0] LEGUP_F_main_BB_memcpyexitii_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB__30_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB_lrphii1i_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB__31_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB_sha_updateexitiloopexit_20 = 6'd20;
parameter [5:0] LEGUP_F_main_BB_sha_updateexiti_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB_lrphi8preheaderii_22 = 6'd22;
parameter [5:0] LEGUP_F_main_BB_lrphi8preheaderii_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB_lrphi8ii_24 = 6'd24;
parameter [5:0] LEGUP_F_main_BB_lrphi8ii_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB_lrphi8ii_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB_sha_streamexit_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB_sha_streamexit_28 = 6'd28;
parameter [5:0] LEGUP_F_main_BB_sha_streamexit_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB_sha_streamexit_31 = 6'd31;
parameter [5:0] LEGUP_F_main_BB_sha_streamexit_32 = 6'd32;
parameter [5:0] LEGUP_F_main_BB_sha_streamexit_33 = 6'd33;
parameter [5:0] LEGUP_F_main_BB_sha_streamexit_34 = 6'd34;
parameter [5:0] LEGUP_F_main_BB__50_35 = 6'd35;
parameter [5:0] LEGUP_F_main_BB__52_36 = 6'd36;
parameter [5:0] LEGUP_F_main_BB__54_37 = 6'd37;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_15 = 6'd15;
parameter [5:0] LEGUP_function_call_29 = 6'd29;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] main_preheaderlrphii_j02i;
reg [31:0] main_preheaderlrphii_j02i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderlrphii_scevgep30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderlrphii_scevgep30_reg;
reg [31:0] main_preheaderlrphii_1;
reg [31:0] main_preheaderlrphii_1_reg;
reg [31:0] main_preheaderlrphii_2;
reg [31:0] main_preheaderlrphii_2_reg;
reg [31:0] main_preheaderii_indvar4;
reg [31:0] main_preheaderii_indvar4_reg;
reg [31:0] main_preheaderii_3;
reg [31:0] main_preheaderii_3_reg;
reg [31:0] main_preheaderii_4;
reg [31:0] main_preheaderii_4_reg;
reg [31:0] main_preheaderii_5;
reg [31:0] main_preheaderii_5_reg;
reg [31:0] main_preheaderii_6;
reg [31:0] main_preheaderii_6_reg;
reg [31:0] main_preheaderii_7;
reg [31:0] main_preheaderii_7_reg;
reg [31:0] main_preheaderii_8;
reg [31:0] main_preheaderii_8_reg;
reg [31:0] main_9_indvar1;
reg [31:0] main_9_indvar1_reg;
reg [31:0] main_9_10;
reg [31:0] main_9_10_reg;
reg [31:0] main_9_11;
reg [31:0] main_9_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_scevgep_reg;
reg [31:0] main_9_12;
reg [31:0] main_9_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_scevgep6_reg;
reg [31:0] main_9_13;
reg [31:0] main_9_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_p201iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_p201iii_reg;
reg [31:0] main_9_14;
reg [31:0] main_9_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_scevgep8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_p102iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_p102iii_reg;
reg [7:0] main_9_15;
reg [7:0] main_9_15_reg;
reg [31:0] main_9_16;
reg [31:0] main_9_16_reg;
reg [7:0] main_9_17;
reg [7:0] main_9_17_reg;
reg [31:0] main_9_18;
reg [31:0] main_9_18_reg;
reg [31:0] main_9_19;
reg [31:0] main_9_19_reg;
reg [31:0] main_9_20;
reg [31:0] main_9_20_reg;
reg [7:0] main_9_21;
reg [7:0] main_9_21_reg;
reg [31:0] main_9_22;
reg [31:0] main_9_22_reg;
reg [31:0] main_9_23;
reg [31:0] main_9_23_reg;
reg [31:0] main_9_24;
reg [31:0] main_9_24_reg;
reg [7:0] main_9_25;
reg [7:0] main_9_25_reg;
reg [31:0] main_9_26;
reg [31:0] main_9_26_reg;
reg [31:0] main_9_27;
reg [31:0] main_9_27_reg;
reg [31:0] main_9_28;
reg [31:0] main_9_28_reg;
reg [31:0] main_9_indvarnext2;
reg [31:0] main_9_indvarnext2_reg;
reg  main_9_exitcond3;
reg  main_9_exitcond3_reg;
reg  main_memcpyexitii_29;
reg  main_memcpyexitii_29_reg;
reg [31:0] main_memcpyexitii_indvarnext5;
reg [31:0] main_memcpyexitii_indvarnext5_reg;
reg [31:0] main_sha_updateexiti_32;
reg [31:0] main_sha_updateexiti_32_reg;
reg  main_sha_updateexiti_exitcond21;
reg  main_sha_updateexiti_exitcond21_reg;
reg [31:0] main_lrphi8ii_indvar;
reg [31:0] main_lrphi8ii_indvar_reg;
reg [31:0] main_lrphi8ii_33;
reg [31:0] main_lrphi8ii_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi8ii_p11i7ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi8ii_p11i7ii_reg;
reg [31:0] main_lrphi8ii_indvarnext;
reg [31:0] main_lrphi8ii_indvarnext_reg;
reg  main_lrphi8ii_exitcond;
reg  main_lrphi8ii_exitcond_reg;
reg [31:0] main_sha_streamexit_pre;
reg [31:0] main_sha_streamexit_pre_reg;
reg [31:0] main_sha_streamexit_pre4;
reg [31:0] main_sha_streamexit_pre4_reg;
reg [31:0] main_sha_streamexit_pre5;
reg [31:0] main_sha_streamexit_pre5_reg;
reg [31:0] main_sha_streamexit_pre6;
reg [31:0] main_sha_streamexit_pre6_reg;
reg [31:0] main_sha_streamexit_pre7;
reg [31:0] main_sha_streamexit_pre7_reg;
reg  main_sha_streamexit_34;
reg  main_sha_streamexit_34_reg;
reg [31:0] main_sha_streamexit_35;
reg [31:0] main_sha_streamexit_35_reg;
reg  main_sha_streamexit_36;
reg  main_sha_streamexit_36_reg;
reg [31:0] main_sha_streamexit_37;
reg [31:0] main_sha_streamexit_37_reg;
reg [31:0] main_sha_streamexit_38;
reg [31:0] main_sha_streamexit_38_reg;
reg  main_sha_streamexit_39;
reg  main_sha_streamexit_39_reg;
reg [31:0] main_sha_streamexit_40;
reg [31:0] main_sha_streamexit_40_reg;
reg [31:0] main_sha_streamexit_41;
reg [31:0] main_sha_streamexit_41_reg;
reg  main_sha_streamexit_42;
reg  main_sha_streamexit_42_reg;
reg [31:0] main_sha_streamexit_43;
reg [31:0] main_sha_streamexit_43_reg;
reg [31:0] main_sha_streamexit_44;
reg [31:0] main_sha_streamexit_44_reg;
reg  main_sha_streamexit_45;
reg  main_sha_streamexit_45_reg;
reg [31:0] main_sha_streamexit_46;
reg [31:0] main_sha_streamexit_46_reg;
reg [31:0] main_sha_streamexit_47;
reg [31:0] main_sha_streamexit_47_reg;
reg  main_sha_streamexit_49;
reg  main_sha_streamexit_49_reg;
reg [13:0] indata_address_a;
reg  indata_write_enable_a;
wire [7:0] indata_in_a;
wire [7:0] indata_out_a;
reg [13:0] indata_address_b;
reg  indata_write_enable_b;
wire [7:0] indata_in_b;
wire [7:0] indata_out_b;
reg  in_i_address_a;
reg  in_i_write_enable_a;
wire [31:0] in_i_in_a;
wire [31:0] in_i_out_a;
wire  in_i_address_b;
wire  in_i_write_enable_b;
wire [31:0] in_i_in_b;
wire [31:0] in_i_out_b;
wire [3:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [3:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [6:0] sha_transform_0_W_address_a;
wire  sha_transform_0_W_write_enable_a;
wire [31:0] sha_transform_0_W_in_a;
wire [31:0] sha_transform_0_W_out_a;
wire [6:0] sha_transform_0_W_address_b;
wire  sha_transform_0_W_write_enable_b;
wire [31:0] sha_transform_0_W_in_b;
wire [31:0] sha_transform_0_W_out_b;
reg  sha_transform_start;
wire  sha_transform_memory_controller_enable_a;
wire  sha_transform_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sha_transform_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sha_transform_memory_controller_out_a;
wire [1:0] sha_transform_memory_controller_size_a;
wire  sha_transform_memory_controller_enable_b;
wire  sha_transform_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sha_transform_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sha_transform_memory_controller_out_b;
wire [1:0] sha_transform_memory_controller_size_b;
reg  sha_transform_memory_controller_waitrequest;
reg  sha_transform_finish_final;
reg  sha_transform_finish_reg;
wire  sha_transform_finish;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  lpm_mult_main_preheaderii_7_en;
reg [31:0] main_preheaderii_7_stage0_reg;


sha_transform sha_transform (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (sha_transform_memory_controller_enable_a),
	.memory_controller_address_a (sha_transform_memory_controller_address_a),
	.memory_controller_write_enable_a (sha_transform_memory_controller_write_enable_a),
	.memory_controller_in_a (sha_transform_memory_controller_in_a),
	.memory_controller_size_a (sha_transform_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (sha_transform_memory_controller_enable_b),
	.memory_controller_address_b (sha_transform_memory_controller_address_b),
	.memory_controller_write_enable_b (sha_transform_memory_controller_write_enable_b),
	.memory_controller_in_b (sha_transform_memory_controller_in_b),
	.memory_controller_size_b (sha_transform_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (sha_transform_start),
	.finish (sha_transform_finish)
);

defparam
	sha_transform.tag_offset = tag_offset;

// Local Rams


// @indata = internal unnamed_addr constant [2 x [8192 x i8]] [[8192 x i8] c"KurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscr...
rom_dual_port indata (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( indata_address_a ),
	.address_b( indata_address_b ),
	.q_a( indata_out_a ),
	.q_b( indata_out_b)
);
defparam indata.width_a = 8;
defparam indata.width_b = 8;
defparam indata.widthad_a = 14;
defparam indata.widthad_b = 14;
defparam indata.numwords_a = 16384;
defparam indata.numwords_b = 16384;
defparam indata.latency = 1;
defparam indata.init_file = "indata.mif";


// @in_i = internal unnamed_addr constant [2 x i32] [i32 8192, i32 8192], align 4
rom_dual_port in_i (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( in_i_address_a ),
	.address_b( in_i_address_b ),
	.q_a( in_i_out_a ),
	.q_b( in_i_out_b)
);
defparam in_i.width_a = 32;
defparam in_i.width_b = 32;
defparam in_i.widthad_a = 1;
defparam in_i.widthad_b = 1;
defparam in_i.numwords_a = 2;
defparam in_i.numwords_b = 2;
defparam in_i.latency = 1;
defparam in_i.init_file = "in_i.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %sha_stream.exit*/
	/*   %48 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str, i32 0, i32 0), i32 %47) #1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_34)) begin
		$write("Result: %d", $signed(main_sha_streamexit_47));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_sha_streamexit_47) === 1'bX) finish <= 0;
	end
	/* main: %50*/
	/*   %51 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__50_35)) begin
		$write("RESULT: PASS");
	end
	/* main: %52*/
	/*   %53 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__52_36)) begin
		$write("RESULT: FAIL");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state = LEGUP_F_main_BB_preheaderlrphii_5;
LEGUP_F_main_BB__30_17:
	if ((1'd0 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphii1i_18;
	else if ((1'd0 == 1'd0))
		next_state = LEGUP_F_main_BB_sha_updateexiti_21;
LEGUP_F_main_BB__31_19:
	if ((1'd0 == 1'd1))
		next_state = LEGUP_F_main_BB_sha_updateexitiloopexit_20;
LEGUP_F_main_BB__50_35:
		next_state = LEGUP_F_main_BB__54_37;
LEGUP_F_main_BB__52_36:
		next_state = LEGUP_F_main_BB__54_37;
LEGUP_F_main_BB__54_37:
		next_state = LEGUP_0;
LEGUP_F_main_BB__9_10:
		next_state = LEGUP_F_main_BB__9_11;
LEGUP_F_main_BB__9_11:
		next_state = LEGUP_F_main_BB__9_12;
LEGUP_F_main_BB__9_12:
		next_state = LEGUP_F_main_BB__9_13;
LEGUP_F_main_BB__9_13:
	if ((main_9_exitcond3_reg == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexitii_14;
	else if ((main_9_exitcond3_reg == 1'd0))
		next_state = LEGUP_F_main_BB__9_9;
LEGUP_F_main_BB__9_9:
		next_state = LEGUP_F_main_BB__9_10;
LEGUP_F_main_BB_lrphi8ii_24:
		next_state = LEGUP_F_main_BB_lrphi8ii_25;
LEGUP_F_main_BB_lrphi8ii_25:
		next_state = LEGUP_F_main_BB_lrphi8ii_26;
LEGUP_F_main_BB_lrphi8ii_26:
	if ((main_lrphi8ii_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_sha_streamexit_27;
	else if ((main_lrphi8ii_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphi8ii_24;
LEGUP_F_main_BB_lrphi8preheaderii_22:
		next_state = LEGUP_F_main_BB_lrphi8preheaderii_23;
LEGUP_F_main_BB_lrphi8preheaderii_23:
		next_state = LEGUP_F_main_BB_lrphi8ii_24;
LEGUP_F_main_BB_lrphii1i_18:
		next_state = LEGUP_F_main_BB__31_19;
LEGUP_F_main_BB_memcpyexitii_14:
		next_state = LEGUP_function_call_15;
LEGUP_F_main_BB_memcpyexitii_16:
	if ((main_memcpyexitii_29_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderii_7;
	else if ((main_memcpyexitii_29_reg == 1'd0))
		next_state = LEGUP_F_main_BB__30_17;
LEGUP_F_main_BB_preheaderii_7:
		next_state = LEGUP_F_main_BB_preheaderii_8;
LEGUP_F_main_BB_preheaderii_8:
		next_state = LEGUP_F_main_BB__9_9;
LEGUP_F_main_BB_preheaderlrphii_5:
		next_state = LEGUP_F_main_BB_preheaderlrphii_6;
LEGUP_F_main_BB_preheaderlrphii_6:
		next_state = LEGUP_F_main_BB_preheaderii_7;
LEGUP_F_main_BB_sha_streamexit_27:
		next_state = LEGUP_F_main_BB_sha_streamexit_28;
LEGUP_F_main_BB_sha_streamexit_28:
		next_state = LEGUP_function_call_29;
LEGUP_F_main_BB_sha_streamexit_30:
		next_state = LEGUP_F_main_BB_sha_streamexit_31;
LEGUP_F_main_BB_sha_streamexit_31:
		next_state = LEGUP_F_main_BB_sha_streamexit_32;
LEGUP_F_main_BB_sha_streamexit_32:
		next_state = LEGUP_F_main_BB_sha_streamexit_33;
LEGUP_F_main_BB_sha_streamexit_33:
		next_state = LEGUP_F_main_BB_sha_streamexit_34;
LEGUP_F_main_BB_sha_streamexit_34:
	if ((main_sha_streamexit_49 == 1'd1))
		next_state = LEGUP_F_main_BB__50_35;
	else if ((main_sha_streamexit_49 == 1'd0))
		next_state = LEGUP_F_main_BB__52_36;
LEGUP_F_main_BB_sha_updateexiti_21:
	if ((main_sha_updateexiti_exitcond21 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi8preheaderii_22;
	else if ((main_sha_updateexiti_exitcond21 == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderlrphii_5;
LEGUP_F_main_BB_sha_updateexitiloopexit_20:
		next_state = LEGUP_F_main_BB_sha_updateexiti_21;
LEGUP_function_call_15:
	if ((sha_transform_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexitii_16;
LEGUP_function_call_29:
	if ((sha_transform_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_sha_streamexit_30;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.preheader.lr.ph.i.i*/
	/*   %j.02.i = phi i32 [ 0, %0 ], [ %32, %sha_update.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__0_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderlrphii_j02i = 32'd0;
	end
	/* main: %.preheader.lr.ph.i.i*/
	/*   %j.02.i = phi i32 [ 0, %0 ], [ %32, %sha_update.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_sha_updateexiti_21) & (memory_controller_waitrequest == 1'd0)) & (main_sha_updateexiti_exitcond21 == 1'd0))) */ begin
		main_preheaderlrphii_j02i = main_sha_updateexiti_32;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.lr.ph.i.i*/
	/*   %j.02.i = phi i32 [ 0, %0 ], [ %32, %sha_update.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__0_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderlrphii_j02i_reg <= main_preheaderlrphii_j02i;
		if (start == 1'b0 && ^(main_preheaderlrphii_j02i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderlrphii_j02i_reg"); $finish; end
	end
	/* main: %.preheader.lr.ph.i.i*/
	/*   %j.02.i = phi i32 [ 0, %0 ], [ %32, %sha_update.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_sha_updateexiti_21) & (memory_controller_waitrequest == 1'd0)) & (main_sha_updateexiti_exitcond21 == 1'd0))) begin
		main_preheaderlrphii_j02i_reg <= main_preheaderlrphii_j02i;
		if (start == 1'b0 && ^(main_preheaderlrphii_j02i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderlrphii_j02i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.lr.ph.i.i*/
	/*   %scevgep30 = getelementptr [2 x i32]* @in_i, i32 0, i32 %j.02.i*/
		main_preheaderlrphii_scevgep30 = (1'd0 | (4 * main_preheaderlrphii_j02i_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.lr.ph.i.i*/
	/*   %scevgep30 = getelementptr [2 x i32]* @in_i, i32 0, i32 %j.02.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderlrphii_5)) begin
		main_preheaderlrphii_scevgep30_reg <= main_preheaderlrphii_scevgep30;
		if (start == 1'b0 && ^(main_preheaderlrphii_scevgep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderlrphii_scevgep30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.lr.ph.i.i*/
	/*   %1 = load i32* %scevgep30, align 4, !tbaa !1*/
		main_preheaderlrphii_1 = in_i_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.lr.ph.i.i*/
	/*   %1 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderlrphii_6)) begin
		main_preheaderlrphii_1_reg <= main_preheaderlrphii_1;
		if (start == 1'b0 && ^(main_preheaderlrphii_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderlrphii_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.lr.ph.i.i*/
	/*   %2 = add i32 %1, -64*/
		main_preheaderlrphii_2 = (main_preheaderlrphii_1 + -32'd64);
end
always @(posedge clk) begin
	/* main: %.preheader.lr.ph.i.i*/
	/*   %2 = add i32 %1, -64*/
	if ((cur_state == LEGUP_F_main_BB_preheaderlrphii_6)) begin
		main_preheaderlrphii_2_reg <= main_preheaderlrphii_2;
		if (start == 1'b0 && ^(main_preheaderlrphii_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderlrphii_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %indvar4 = phi i32 [ %indvar.next5, %memcpy.exit.i.i ], [ 0, %.preheader.lr.ph.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderlrphii_6) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderii_indvar4 = 32'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %indvar4 = phi i32 [ %indvar.next5, %memcpy.exit.i.i ], [ 0, %.preheader.lr.ph.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_memcpyexitii_16) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexitii_29_reg == 1'd1))) */ begin
		main_preheaderii_indvar4 = main_memcpyexitii_indvarnext5_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %indvar4 = phi i32 [ %indvar.next5, %memcpy.exit.i.i ], [ 0, %.preheader.lr.ph.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderlrphii_6) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderii_indvar4_reg <= main_preheaderii_indvar4;
		if (start == 1'b0 && ^(main_preheaderii_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_indvar4_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %indvar4 = phi i32 [ %indvar.next5, %memcpy.exit.i.i ], [ 0, %.preheader.lr.ph.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_memcpyexitii_16) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexitii_29_reg == 1'd1))) begin
		main_preheaderii_indvar4_reg <= main_preheaderii_indvar4;
		if (start == 1'b0 && ^(main_preheaderii_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_indvar4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %3 = shl i32 %indvar4, 6*/
		main_preheaderii_3 = (main_preheaderii_indvar4_reg <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %3 = shl i32 %indvar4, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_7)) begin
		main_preheaderii_3_reg <= main_preheaderii_3;
		if (start == 1'b0 && ^(main_preheaderii_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %4 = or i32 %3, 3*/
		main_preheaderii_4 = (main_preheaderii_3 | 32'd3);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %4 = or i32 %3, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_7)) begin
		main_preheaderii_4_reg <= main_preheaderii_4;
		if (start == 1'b0 && ^(main_preheaderii_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %5 = or i32 %3, 2*/
		main_preheaderii_5 = (main_preheaderii_3 | 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %5 = or i32 %3, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_7)) begin
		main_preheaderii_5_reg <= main_preheaderii_5;
		if (start == 1'b0 && ^(main_preheaderii_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %6 = or i32 %3, 1*/
		main_preheaderii_6 = (main_preheaderii_3 | 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %6 = or i32 %3, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_7)) begin
		main_preheaderii_6_reg <= main_preheaderii_6;
		if (start == 1'b0 && ^(main_preheaderii_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_6_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderii_7 = main_preheaderii_7_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %7 = mul i32 %indvar4, -64*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_8)) begin
		main_preheaderii_7_reg <= main_preheaderii_7;
		if (start == 1'b0 && ^(main_preheaderii_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_7_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %7 = mul i32 %indvar4, -64*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_8)) begin
		main_preheaderii_7_reg <= main_preheaderii_7;
		if (start == 1'b0 && ^(main_preheaderii_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %8 = add i32 %2, %7*/
		main_preheaderii_8 = (main_preheaderlrphii_2_reg + main_preheaderii_7);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %8 = add i32 %2, %7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_8)) begin
		main_preheaderii_8_reg <= main_preheaderii_8;
		if (start == 1'b0 && ^(main_preheaderii_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %9 ], [ 0, %.preheader.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderii_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_9_indvar1 = 32'd0;
	end
	/* main: %9*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %9 ], [ 0, %.preheader.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__9_13) & (memory_controller_waitrequest == 1'd0)) & (main_9_exitcond3_reg == 1'd0))) */ begin
		main_9_indvar1 = main_9_indvarnext2_reg;
	end
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %9 ], [ 0, %.preheader.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderii_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_9_indvar1_reg <= main_9_indvar1;
		if (start == 1'b0 && ^(main_9_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_indvar1_reg"); $finish; end
	end
	/* main: %9*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %9 ], [ 0, %.preheader.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__9_13) & (memory_controller_waitrequest == 1'd0)) & (main_9_exitcond3_reg == 1'd0))) begin
		main_9_indvar1_reg <= main_9_indvar1;
		if (start == 1'b0 && ^(main_9_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_indvar1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %10 = shl i32 %indvar1, 2*/
		main_9_10 = (main_9_indvar1_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %10 = shl i32 %indvar1, 2*/
	if ((cur_state == LEGUP_F_main_BB__9_9)) begin
		main_9_10_reg <= main_9_10;
		if (start == 1'b0 && ^(main_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %11 = add i32 %4, %10*/
		main_9_11 = (main_preheaderii_4_reg + main_9_10);
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %11 = add i32 %4, %10*/
	if ((cur_state == LEGUP_F_main_BB__9_9)) begin
		main_9_11_reg <= main_9_11;
		if (start == 1'b0 && ^(main_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %scevgep = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 %j.02.i, i32 %11*/
		main_9_scevgep = (1'd0 | ((8192 * main_preheaderlrphii_j02i_reg) + (1 * main_9_11_reg)));
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %scevgep = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 %j.02.i, i32 %11*/
	if ((cur_state == LEGUP_F_main_BB__9_10)) begin
		main_9_scevgep_reg <= main_9_scevgep;
		if (start == 1'b0 && ^(main_9_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %12 = add i32 %5, %10*/
		main_9_12 = (main_preheaderii_5_reg + main_9_10);
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %12 = add i32 %5, %10*/
	if ((cur_state == LEGUP_F_main_BB__9_9)) begin
		main_9_12_reg <= main_9_12;
		if (start == 1'b0 && ^(main_9_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %scevgep6 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 %j.02.i, i32 %12*/
		main_9_scevgep6 = (1'd0 | ((8192 * main_preheaderlrphii_j02i_reg) + (1 * main_9_12_reg)));
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %scevgep6 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 %j.02.i, i32 %12*/
	if ((cur_state == LEGUP_F_main_BB__9_10)) begin
		main_9_scevgep6_reg <= main_9_scevgep6;
		if (start == 1'b0 && ^(main_9_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %13 = add i32 %3, %10*/
		main_9_13 = (main_preheaderii_3_reg + main_9_10);
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %13 = add i32 %3, %10*/
	if ((cur_state == LEGUP_F_main_BB__9_9)) begin
		main_9_13_reg <= main_9_13;
		if (start == 1'b0 && ^(main_9_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %p2.01.i.i.i = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 %j.02.i, i32 %13*/
		main_9_p201iii = (1'd0 | ((8192 * main_preheaderlrphii_j02i_reg) + (1 * main_9_13_reg)));
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %p2.01.i.i.i = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 %j.02.i, i32 %13*/
	if ((cur_state == LEGUP_F_main_BB__9_10)) begin
		main_9_p201iii_reg <= main_9_p201iii;
		if (start == 1'b0 && ^(main_9_p201iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_p201iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %14 = add i32 %6, %10*/
		main_9_14 = (main_preheaderii_6_reg + main_9_10);
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %14 = add i32 %6, %10*/
	if ((cur_state == LEGUP_F_main_BB__9_9)) begin
		main_9_14_reg <= main_9_14;
		if (start == 1'b0 && ^(main_9_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %scevgep8 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 %j.02.i, i32 %14*/
		main_9_scevgep8 = (1'd0 | ((8192 * main_preheaderlrphii_j02i_reg) + (1 * main_9_14_reg)));
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %scevgep8 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 %j.02.i, i32 %14*/
	if ((cur_state == LEGUP_F_main_BB__9_10)) begin
		main_9_scevgep8_reg <= main_9_scevgep8;
		if (start == 1'b0 && ^(main_9_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %p1.02.i.i.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar1*/
		main_9_p102iii = (`TAG_g_sha_info_data_a | (4 * main_9_indvar1_reg));
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %p1.02.i.i.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar1*/
	if ((cur_state == LEGUP_F_main_BB__9_9)) begin
		main_9_p102iii_reg <= main_9_p102iii;
		if (start == 1'b0 && ^(main_9_p102iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_p102iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %15 = load i8* %p2.01.i.i.i, align 1, !tbaa !5*/
		main_9_15 = indata_out_a;
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %15 = load i8* %p2.01.i.i.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__9_11)) begin
		main_9_15_reg <= main_9_15;
		if (start == 1'b0 && ^(main_9_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %16 = zext i8 %15 to i32*/
		main_9_16 = main_9_15;
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %16 = zext i8 %15 to i32*/
	if ((cur_state == LEGUP_F_main_BB__9_11)) begin
		main_9_16_reg <= main_9_16;
		if (start == 1'b0 && ^(main_9_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %17 = load i8* %scevgep8, align 1, !tbaa !5*/
		main_9_17 = indata_out_b;
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %17 = load i8* %scevgep8, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__9_11)) begin
		main_9_17_reg <= main_9_17;
		if (start == 1'b0 && ^(main_9_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %18 = zext i8 %17 to i32*/
		main_9_18 = main_9_17;
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %18 = zext i8 %17 to i32*/
	if ((cur_state == LEGUP_F_main_BB__9_11)) begin
		main_9_18_reg <= main_9_18;
		if (start == 1'b0 && ^(main_9_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %19 = shl nuw nsw i32 %18, 8*/
		main_9_19 = (main_9_18 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %19 = shl nuw nsw i32 %18, 8*/
	if ((cur_state == LEGUP_F_main_BB__9_11)) begin
		main_9_19_reg <= main_9_19;
		if (start == 1'b0 && ^(main_9_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %20 = or i32 %19, %16*/
		main_9_20 = (main_9_19 | main_9_16);
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %20 = or i32 %19, %16*/
	if ((cur_state == LEGUP_F_main_BB__9_11)) begin
		main_9_20_reg <= main_9_20;
		if (start == 1'b0 && ^(main_9_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %21 = load i8* %scevgep6, align 1, !tbaa !5*/
		main_9_21 = indata_out_a;
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %21 = load i8* %scevgep6, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		main_9_21_reg <= main_9_21;
		if (start == 1'b0 && ^(main_9_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %22 = zext i8 %21 to i32*/
		main_9_22 = main_9_21;
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %22 = zext i8 %21 to i32*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		main_9_22_reg <= main_9_22;
		if (start == 1'b0 && ^(main_9_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %23 = shl nuw nsw i32 %22, 16*/
		main_9_23 = (main_9_22 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %23 = shl nuw nsw i32 %22, 16*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		main_9_23_reg <= main_9_23;
		if (start == 1'b0 && ^(main_9_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %24 = or i32 %20, %23*/
		main_9_24 = (main_9_20_reg | main_9_23);
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %24 = or i32 %20, %23*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		main_9_24_reg <= main_9_24;
		if (start == 1'b0 && ^(main_9_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %25 = load i8* %scevgep, align 1, !tbaa !5*/
		main_9_25 = indata_out_b;
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %25 = load i8* %scevgep, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		main_9_25_reg <= main_9_25;
		if (start == 1'b0 && ^(main_9_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %26 = zext i8 %25 to i32*/
		main_9_26 = main_9_25;
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %26 = zext i8 %25 to i32*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		main_9_26_reg <= main_9_26;
		if (start == 1'b0 && ^(main_9_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %27 = shl nuw i32 %26, 24*/
		main_9_27 = (main_9_26 <<< (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %27 = shl nuw i32 %26, 24*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		main_9_27_reg <= main_9_27;
		if (start == 1'b0 && ^(main_9_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %28 = or i32 %24, %27*/
		main_9_28 = (main_9_24 | main_9_27);
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %28 = or i32 %24, %27*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		main_9_28_reg <= main_9_28;
		if (start == 1'b0 && ^(main_9_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %indvar.next2 = add i32 %indvar1, 1*/
		main_9_indvarnext2 = (main_9_indvar1_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %indvar.next2 = add i32 %indvar1, 1*/
	if ((cur_state == LEGUP_F_main_BB__9_9)) begin
		main_9_indvarnext2_reg <= main_9_indvarnext2;
		if (start == 1'b0 && ^(main_9_indvarnext2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_indvarnext2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %exitcond3 = icmp eq i32 %indvar.next2, 16*/
		main_9_exitcond3 = (main_9_indvarnext2 == 32'd16);
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %exitcond3 = icmp eq i32 %indvar.next2, 16*/
	if ((cur_state == LEGUP_F_main_BB__9_9)) begin
		main_9_exitcond3_reg <= main_9_exitcond3;
		if (start == 1'b0 && ^(main_9_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i.i*/
	/*   %29 = icmp sgt i32 %8, 63*/
		main_memcpyexitii_29 = ($signed(main_preheaderii_8_reg) > $signed(32'd63));
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i.i*/
	/*   %29 = icmp sgt i32 %8, 63*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexitii_14)) begin
		main_memcpyexitii_29_reg <= main_memcpyexitii_29;
		if (start == 1'b0 && ^(main_memcpyexitii_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexitii_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i.i*/
	/*   %indvar.next5 = add i32 %indvar4, 1*/
		main_memcpyexitii_indvarnext5 = (main_preheaderii_indvar4_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i.i*/
	/*   %indvar.next5 = add i32 %indvar4, 1*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexitii_14)) begin
		main_memcpyexitii_indvarnext5_reg <= main_memcpyexitii_indvarnext5;
		if (start == 1'b0 && ^(main_memcpyexitii_indvarnext5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexitii_indvarnext5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_update.exit.i*/
	/*   %32 = add nsw i32 %j.02.i, 1*/
		main_sha_updateexiti_32 = (main_preheaderlrphii_j02i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %sha_update.exit.i*/
	/*   %32 = add nsw i32 %j.02.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_sha_updateexiti_21)) begin
		main_sha_updateexiti_32_reg <= main_sha_updateexiti_32;
		if (start == 1'b0 && ^(main_sha_updateexiti_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_updateexiti_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_update.exit.i*/
	/*   %exitcond21 = icmp eq i32 %32, 2*/
		main_sha_updateexiti_exitcond21 = (main_sha_updateexiti_32 == 32'd2);
end
always @(posedge clk) begin
	/* main: %sha_update.exit.i*/
	/*   %exitcond21 = icmp eq i32 %32, 2*/
	if ((cur_state == LEGUP_F_main_BB_sha_updateexiti_21)) begin
		main_sha_updateexiti_exitcond21_reg <= main_sha_updateexiti_exitcond21;
		if (start == 1'b0 && ^(main_sha_updateexiti_exitcond21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_updateexiti_exitcond21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i.i ], [ 0, %.lr.ph.i8.preheader.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi8preheaderii_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi8ii_indvar = 32'd0;
	end
	/* main: %.lr.ph.i8.i.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i.i ], [ 0, %.lr.ph.i8.preheader.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi8ii_26) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi8ii_exitcond_reg == 1'd0))) */ begin
		main_lrphi8ii_indvar = main_lrphi8ii_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i.i ], [ 0, %.lr.ph.i8.preheader.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi8preheaderii_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi8ii_indvar_reg <= main_lrphi8ii_indvar;
		if (start == 1'b0 && ^(main_lrphi8ii_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_indvar_reg"); $finish; end
	end
	/* main: %.lr.ph.i8.i.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i.i ], [ 0, %.lr.ph.i8.preheader.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi8ii_26) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi8ii_exitcond_reg == 1'd0))) begin
		main_lrphi8ii_indvar_reg <= main_lrphi8ii_indvar;
		if (start == 1'b0 && ^(main_lrphi8ii_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %33 = add i32 %indvar, 1*/
		main_lrphi8ii_33 = (main_lrphi8ii_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %33 = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8ii_24)) begin
		main_lrphi8ii_33_reg <= main_lrphi8ii_33;
		if (start == 1'b0 && ^(main_lrphi8ii_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %p.11.i7.i.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %33*/
		main_lrphi8ii_p11i7ii = (`TAG_g_sha_info_data_a | (4 * main_lrphi8ii_33_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %p.11.i7.i.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8ii_25)) begin
		main_lrphi8ii_p11i7ii_reg <= main_lrphi8ii_p11i7ii;
		if (start == 1'b0 && ^(main_lrphi8ii_p11i7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_p11i7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_lrphi8ii_indvarnext = (main_lrphi8ii_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8ii_24)) begin
		main_lrphi8ii_indvarnext_reg <= main_lrphi8ii_indvarnext;
		if (start == 1'b0 && ^(main_lrphi8ii_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %exitcond = icmp eq i32 %indvar.next, 13*/
		main_lrphi8ii_exitcond = (main_lrphi8ii_indvarnext == 32'd13);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i.i*/
	/*   %exitcond = icmp eq i32 %indvar.next, 13*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8ii_24)) begin
		main_lrphi8ii_exitcond_reg <= main_lrphi8ii_exitcond;
		if (start == 1'b0 && ^(main_lrphi8ii_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8ii_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %.pre = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
		main_sha_streamexit_pre = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %.pre = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_32)) begin
		main_sha_streamexit_pre_reg <= main_sha_streamexit_pre;
		if (start == 1'b0 && ^(main_sha_streamexit_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_pre_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %.pre4 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
		main_sha_streamexit_pre4 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %.pre4 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_32)) begin
		main_sha_streamexit_pre4_reg <= main_sha_streamexit_pre4;
		if (start == 1'b0 && ^(main_sha_streamexit_pre4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_pre4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %.pre5 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
		main_sha_streamexit_pre5 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %.pre5 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_33)) begin
		main_sha_streamexit_pre5_reg <= main_sha_streamexit_pre5;
		if (start == 1'b0 && ^(main_sha_streamexit_pre5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_pre5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %.pre6 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
		main_sha_streamexit_pre6 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %.pre6 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_33)) begin
		main_sha_streamexit_pre6_reg <= main_sha_streamexit_pre6;
		if (start == 1'b0 && ^(main_sha_streamexit_pre6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_pre6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %.pre7 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
		main_sha_streamexit_pre7 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %.pre7 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_34)) begin
		main_sha_streamexit_pre7_reg <= main_sha_streamexit_pre7;
		if (start == 1'b0 && ^(main_sha_streamexit_pre7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_pre7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %34 = icmp eq i32 %.pre, 6969911*/
		main_sha_streamexit_34 = (main_sha_streamexit_pre == 32'd6969911);
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %34 = icmp eq i32 %.pre, 6969911*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_32)) begin
		main_sha_streamexit_34_reg <= main_sha_streamexit_34;
		if (start == 1'b0 && ^(main_sha_streamexit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %35 = zext i1 %34 to i32*/
		main_sha_streamexit_35 = main_sha_streamexit_34;
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %35 = zext i1 %34 to i32*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_32)) begin
		main_sha_streamexit_35_reg <= main_sha_streamexit_35;
		if (start == 1'b0 && ^(main_sha_streamexit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %36 = icmp eq i32 %.pre4, -1814260603*/
		main_sha_streamexit_36 = (main_sha_streamexit_pre4 == -32'd1814260603);
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %36 = icmp eq i32 %.pre4, -1814260603*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_32)) begin
		main_sha_streamexit_36_reg <= main_sha_streamexit_36;
		if (start == 1'b0 && ^(main_sha_streamexit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %37 = zext i1 %36 to i32*/
		main_sha_streamexit_37 = main_sha_streamexit_36;
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %37 = zext i1 %36 to i32*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_32)) begin
		main_sha_streamexit_37_reg <= main_sha_streamexit_37;
		if (start == 1'b0 && ^(main_sha_streamexit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %38 = add nuw nsw i32 %35, %37*/
		main_sha_streamexit_38 = (main_sha_streamexit_35 + main_sha_streamexit_37);
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %38 = add nuw nsw i32 %35, %37*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_32)) begin
		main_sha_streamexit_38_reg <= main_sha_streamexit_38;
		if (start == 1'b0 && ^(main_sha_streamexit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %39 = icmp eq i32 %.pre5, 742465810*/
		main_sha_streamexit_39 = (main_sha_streamexit_pre5 == 32'd742465810);
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %39 = icmp eq i32 %.pre5, 742465810*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_33)) begin
		main_sha_streamexit_39_reg <= main_sha_streamexit_39;
		if (start == 1'b0 && ^(main_sha_streamexit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %40 = zext i1 %39 to i32*/
		main_sha_streamexit_40 = main_sha_streamexit_39;
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %40 = zext i1 %39 to i32*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_33)) begin
		main_sha_streamexit_40_reg <= main_sha_streamexit_40;
		if (start == 1'b0 && ^(main_sha_streamexit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %41 = add nuw nsw i32 %38, %40*/
		main_sha_streamexit_41 = (main_sha_streamexit_38_reg + main_sha_streamexit_40);
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %41 = add nuw nsw i32 %38, %40*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_33)) begin
		main_sha_streamexit_41_reg <= main_sha_streamexit_41;
		if (start == 1'b0 && ^(main_sha_streamexit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %42 = icmp eq i32 %.pre6, 1677179459*/
		main_sha_streamexit_42 = (main_sha_streamexit_pre6 == 32'd1677179459);
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %42 = icmp eq i32 %.pre6, 1677179459*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_33)) begin
		main_sha_streamexit_42_reg <= main_sha_streamexit_42;
		if (start == 1'b0 && ^(main_sha_streamexit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %43 = zext i1 %42 to i32*/
		main_sha_streamexit_43 = main_sha_streamexit_42;
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %43 = zext i1 %42 to i32*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_33)) begin
		main_sha_streamexit_43_reg <= main_sha_streamexit_43;
		if (start == 1'b0 && ^(main_sha_streamexit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %44 = add nuw nsw i32 %41, %43*/
		main_sha_streamexit_44 = (main_sha_streamexit_41 + main_sha_streamexit_43);
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %44 = add nuw nsw i32 %41, %43*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_33)) begin
		main_sha_streamexit_44_reg <= main_sha_streamexit_44;
		if (start == 1'b0 && ^(main_sha_streamexit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %45 = icmp eq i32 %.pre7, -1384908510*/
		main_sha_streamexit_45 = (main_sha_streamexit_pre7 == -32'd1384908510);
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %45 = icmp eq i32 %.pre7, -1384908510*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_34)) begin
		main_sha_streamexit_45_reg <= main_sha_streamexit_45;
		if (start == 1'b0 && ^(main_sha_streamexit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %46 = zext i1 %45 to i32*/
		main_sha_streamexit_46 = main_sha_streamexit_45;
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %46 = zext i1 %45 to i32*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_34)) begin
		main_sha_streamexit_46_reg <= main_sha_streamexit_46;
		if (start == 1'b0 && ^(main_sha_streamexit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %47 = add nuw nsw i32 %44, %46*/
		main_sha_streamexit_47 = (main_sha_streamexit_44_reg + main_sha_streamexit_46);
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %47 = add nuw nsw i32 %44, %46*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_34)) begin
		main_sha_streamexit_47_reg <= main_sha_streamexit_47;
		if (start == 1'b0 && ^(main_sha_streamexit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_stream.exit*/
	/*   %49 = icmp eq i32 %47, 5*/
		main_sha_streamexit_49 = (main_sha_streamexit_47 == 32'd5);
end
always @(posedge clk) begin
	/* main: %sha_stream.exit*/
	/*   %49 = icmp eq i32 %47, 5*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_34)) begin
		main_sha_streamexit_49_reg <= main_sha_streamexit_49;
		if (start == 1'b0 && ^(main_sha_streamexit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_streamexit_49_reg"); $finish; end
	end
end
always @(*) begin
	indata_address_a = 1'd0;
	/* main: %9*/
	/*   %15 = load i8* %p2.01.i.i.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__9_10)) begin
		indata_address_a = (main_9_p201iii >>> 3'd0);
	end
	/* main: %9*/
	/*   %21 = load i8* %scevgep6, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__9_11)) begin
		indata_address_a = (main_9_scevgep6_reg >>> 3'd0);
	end
end
always @(*) begin
	indata_write_enable_a = 1'd0;
	/* main: %9*/
	/*   %15 = load i8* %p2.01.i.i.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__9_10)) begin
		indata_write_enable_a = 1'd0;
	end
	/* main: %9*/
	/*   %21 = load i8* %scevgep6, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__9_11)) begin
		indata_write_enable_a = 1'd0;
	end
end
always @(*) begin
	indata_address_b = 1'd0;
	/* main: %9*/
	/*   %17 = load i8* %scevgep8, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__9_10)) begin
		indata_address_b = (main_9_scevgep8 >>> 3'd0);
	end
	/* main: %9*/
	/*   %25 = load i8* %scevgep, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__9_11)) begin
		indata_address_b = (main_9_scevgep_reg >>> 3'd0);
	end
end
always @(*) begin
	indata_write_enable_b = 1'd0;
	/* main: %9*/
	/*   %17 = load i8* %scevgep8, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__9_10)) begin
		indata_write_enable_b = 1'd0;
	end
	/* main: %9*/
	/*   %25 = load i8* %scevgep, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__9_11)) begin
		indata_write_enable_b = 1'd0;
	end
end
always @(*) begin
	in_i_address_a = 1'd0;
	/* main: %.preheader.lr.ph.i.i*/
	/*   %1 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderlrphii_5)) begin
		in_i_address_a = (main_preheaderlrphii_scevgep30 >>> 3'd2);
	end
end
always @(*) begin
	in_i_write_enable_a = 1'd0;
	/* main: %.preheader.lr.ph.i.i*/
	/*   %1 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderlrphii_5)) begin
		in_i_write_enable_a = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexitii_14)) begin
		sha_transform_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_15)) begin
		sha_transform_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_28)) begin
		sha_transform_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_29)) begin
		sha_transform_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		sha_transform_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	else /* if ((cur_state == LEGUP_function_call_29)) */ begin
		sha_transform_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		sha_transform_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	else /* if ((cur_state == LEGUP_function_call_29)) */ begin
		sha_transform_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	sha_transform_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	sha_transform_finish_final = sha_transform_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_memcpyexitii_14))) begin
		sha_transform_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if (sha_transform_finish) begin
		sha_transform_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_sha_streamexit_28))) begin
		sha_transform_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if (sha_transform_finish) begin
		sha_transform_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		legup_function_call = 1'd1;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	lpm_mult_main_preheaderii_7_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %7 = mul i32 %indvar4, -64*/
	if ((lpm_mult_main_preheaderii_7_en == 1'd1)) begin
		main_preheaderii_7_stage0_reg <= (main_preheaderii_indvar4_reg * -32'd64);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %54*/
	/*   ret i32 %47*/
	if ((cur_state == LEGUP_F_main_BB__54_37)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %9*/
	/*   store i32 %28, i32* %p1.02.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %sha_stream.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre5 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_31)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %0*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* main: %0*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
	/* main: %0*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest4_a;
	end
	/* main: %9*/
	/*   store i32 %28, i32* %p1.02.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		memory_controller_address_a = main_9_p102iii_reg;
	end
	/* main: %sha_stream.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_27)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a | (4 * 32'd14));
	end
	/* main: %sha_stream.exit*/
	/*   %.pre = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_30)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre5 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_31)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %9*/
	/*   store i32 %28, i32* %p1.02.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %sha_stream.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_27)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre5 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_31)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %0*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd1732584193;
	end
	/* main: %0*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = -32'd1732584194;
	end
	/* main: %0*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_a = -32'd1009589776;
	end
	/* main: %9*/
	/*   store i32 %28, i32* %p1.02.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		memory_controller_in_a = main_9_28;
	end
	/* main: %sha_stream.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_27)) begin
		memory_controller_in_a = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	/* main: %0*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %9*/
	/*   store i32 %28, i32* %p1.02.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__9_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %sha_stream.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre5 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_31)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i8.preheader.i.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderii_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i8.i.i*/
	/*   store i32 0, i32* %p.11.i7.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8ii_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sha_stream.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre4 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre6 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre7 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_32)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %0*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* main: %0*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
	/* main: %.lr.ph.i8.preheader.i.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderii_22)) begin
		memory_controller_address_b = `TAG_g_sha_info_data_a;
	end
	/* main: %.lr.ph.i8.i.i*/
	/*   store i32 0, i32* %p.11.i7.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8ii_25)) begin
		memory_controller_address_b = main_lrphi8ii_p11i7ii;
	end
	/* main: %sha_stream.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_27)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a | (4 * 32'd15));
	end
	/* main: %sha_stream.exit*/
	/*   %.pre4 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_30)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre6 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_31)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre7 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_32)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest4_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i8.preheader.i.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderii_22)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i8.i.i*/
	/*   store i32 0, i32* %p.11.i7.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8ii_25)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %sha_stream.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_27)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre4 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_30)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre6 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre7 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %0*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = -32'd271733879;
	end
	/* main: %0*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_b = 32'd271733878;
	end
	/* main: %.lr.ph.i8.preheader.i.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderii_22)) begin
		memory_controller_in_b = 32'd128;
	end
	/* main: %.lr.ph.i8.i.i*/
	/*   store i32 0, i32* %p.11.i7.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8ii_25)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %sha_stream.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_27)) begin
		memory_controller_in_b = 32'd131072;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	/* main: %memcpy.exit.i.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	/* main: %sha_stream.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_29)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	/* main: %0*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i8.preheader.i.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderii_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i8.i.i*/
	/*   store i32 0, i32* %p.11.i7.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8ii_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sha_stream.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre4 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre6 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sha_stream.exit*/
	/*   %.pre7 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_streamexit_32)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %54*/
	/*   ret i32 %47*/
	if ((cur_state == LEGUP_F_main_BB__54_37)) begin
		return_val <= main_sha_streamexit_47_reg;
		if (start == 1'b0 && ^(main_sha_streamexit_47_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
