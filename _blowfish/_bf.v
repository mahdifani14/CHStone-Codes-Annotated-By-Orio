//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 12:02:16 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 9
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @key_P = internal unnamed_addr global [18 x i32] zeroinitializer, align 4
`define TAG_g_key_P `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_key_P_a {`TAG_g_key_P, 23'd4096}
// @key_S = internal unnamed_addr global [1024 x i32] zeroinitializer, align 4
`define TAG_g_key_S `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_key_S_a {`TAG_g_key_S, 23'd0}
//   %in.i.i = alloca [2 x i32], align 4
`define TAG_main_0_inii `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_main_0_inii_a {`TAG_main_0_inii, 23'd4168}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [10:0] ram_32_address_a;
reg [10:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @key_P = internal unnamed_addr global [18 x i32] zeroinitializer, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 11;
defparam ram_32.widthad_b = 11;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 1044;
defparam ram_32.numwords_b = 1044;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 2);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	ram_32_address_a = memory_controller_address_a [11-1+2:2] & {11{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 2);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	ram_32_address_b = memory_controller_address_b [11-1+2:2] & {11{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module BF_encrypt
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_data
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_1 = 7'd1;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_2 = 7'd2;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_3 = 7'd3;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_4 = 7'd4;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_5 = 7'd5;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_6 = 7'd6;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_7 = 7'd7;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_8 = 7'd8;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_9 = 7'd9;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_10 = 7'd10;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_11 = 7'd11;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_12 = 7'd12;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_13 = 7'd13;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_14 = 7'd14;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_15 = 7'd15;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_16 = 7'd16;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_17 = 7'd17;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_18 = 7'd18;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_19 = 7'd19;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_20 = 7'd20;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_21 = 7'd21;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_22 = 7'd22;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_23 = 7'd23;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_24 = 7'd24;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_25 = 7'd25;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_26 = 7'd26;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_27 = 7'd27;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_28 = 7'd28;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_29 = 7'd29;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_30 = 7'd30;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_31 = 7'd31;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_32 = 7'd32;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_33 = 7'd33;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_34 = 7'd34;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_35 = 7'd35;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_36 = 7'd36;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_37 = 7'd37;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_38 = 7'd38;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_39 = 7'd39;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_40 = 7'd40;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_41 = 7'd41;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_42 = 7'd42;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_43 = 7'd43;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_44 = 7'd44;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_45 = 7'd45;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_46 = 7'd46;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_47 = 7'd47;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_48 = 7'd48;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_49 = 7'd49;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_50 = 7'd50;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_51 = 7'd51;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_52 = 7'd52;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_53 = 7'd53;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_54 = 7'd54;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_55 = 7'd55;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_56 = 7'd56;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_57 = 7'd57;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_58 = 7'd58;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_59 = 7'd59;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_60 = 7'd60;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_61 = 7'd61;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_62 = 7'd62;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_63 = 7'd63;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_64 = 7'd64;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_65 = 7'd65;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_66 = 7'd66;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_67 = 7'd67;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_68 = 7'd68;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_69 = 7'd69;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_70 = 7'd70;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_71 = 7'd71;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_72 = 7'd72;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_73 = 7'd73;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_74 = 7'd74;
parameter [6:0] LEGUP_F_BF_encrypt_BB__0_75 = 7'd75;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_data;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] BF_encrypt_0_1;
reg [31:0] BF_encrypt_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_2_reg;
reg [31:0] BF_encrypt_0_3;
reg [31:0] BF_encrypt_0_3_reg;
reg [31:0] BF_encrypt_0_4;
reg [31:0] BF_encrypt_0_4_reg;
reg [31:0] BF_encrypt_0_5;
reg [31:0] BF_encrypt_0_5_reg;
reg [31:0] BF_encrypt_0_6;
reg [31:0] BF_encrypt_0_6_reg;
reg [31:0] BF_encrypt_0_7;
reg [31:0] BF_encrypt_0_7_reg;
reg [31:0] BF_encrypt_0_8;
reg [31:0] BF_encrypt_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_9_reg;
reg [31:0] BF_encrypt_0_10;
reg [31:0] BF_encrypt_0_10_reg;
reg [31:0] BF_encrypt_0_11;
reg [31:0] BF_encrypt_0_11_reg;
reg [31:0] BF_encrypt_0_12;
reg [31:0] BF_encrypt_0_12_reg;
reg [31:0] BF_encrypt_0_13;
reg [31:0] BF_encrypt_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_14_reg;
reg [31:0] BF_encrypt_0_15;
reg [31:0] BF_encrypt_0_15_reg;
reg [31:0] BF_encrypt_0_16;
reg [31:0] BF_encrypt_0_16_reg;
reg [31:0] BF_encrypt_0_17;
reg [31:0] BF_encrypt_0_17_reg;
reg [31:0] BF_encrypt_0_18;
reg [31:0] BF_encrypt_0_18_reg;
reg [31:0] BF_encrypt_0_19;
reg [31:0] BF_encrypt_0_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_20_reg;
reg [31:0] BF_encrypt_0_21;
reg [31:0] BF_encrypt_0_21_reg;
reg [31:0] BF_encrypt_0_22;
reg [31:0] BF_encrypt_0_22_reg;
reg [31:0] BF_encrypt_0_23;
reg [31:0] BF_encrypt_0_23_reg;
reg [31:0] BF_encrypt_0_24;
reg [31:0] BF_encrypt_0_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_25_reg;
reg [31:0] BF_encrypt_0_26;
reg [31:0] BF_encrypt_0_26_reg;
reg [31:0] BF_encrypt_0_27;
reg [31:0] BF_encrypt_0_27_reg;
reg [31:0] BF_encrypt_0_28;
reg [31:0] BF_encrypt_0_28_reg;
reg [31:0] BF_encrypt_0_29;
reg [31:0] BF_encrypt_0_29_reg;
reg [31:0] BF_encrypt_0_30;
reg [31:0] BF_encrypt_0_30_reg;
reg [31:0] BF_encrypt_0_31;
reg [31:0] BF_encrypt_0_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_32_reg;
reg [31:0] BF_encrypt_0_33;
reg [31:0] BF_encrypt_0_33_reg;
reg [31:0] BF_encrypt_0_34;
reg [31:0] BF_encrypt_0_34_reg;
reg [31:0] BF_encrypt_0_35;
reg [31:0] BF_encrypt_0_35_reg;
reg [31:0] BF_encrypt_0_36;
reg [31:0] BF_encrypt_0_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_37_reg;
reg [31:0] BF_encrypt_0_38;
reg [31:0] BF_encrypt_0_38_reg;
reg [31:0] BF_encrypt_0_39;
reg [31:0] BF_encrypt_0_39_reg;
reg [31:0] BF_encrypt_0_40;
reg [31:0] BF_encrypt_0_40_reg;
reg [31:0] BF_encrypt_0_41;
reg [31:0] BF_encrypt_0_41_reg;
reg [31:0] BF_encrypt_0_42;
reg [31:0] BF_encrypt_0_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_43_reg;
reg [31:0] BF_encrypt_0_44;
reg [31:0] BF_encrypt_0_44_reg;
reg [31:0] BF_encrypt_0_45;
reg [31:0] BF_encrypt_0_45_reg;
reg [31:0] BF_encrypt_0_46;
reg [31:0] BF_encrypt_0_46_reg;
reg [31:0] BF_encrypt_0_47;
reg [31:0] BF_encrypt_0_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_48_reg;
reg [31:0] BF_encrypt_0_49;
reg [31:0] BF_encrypt_0_49_reg;
reg [31:0] BF_encrypt_0_50;
reg [31:0] BF_encrypt_0_50_reg;
reg [31:0] BF_encrypt_0_51;
reg [31:0] BF_encrypt_0_51_reg;
reg [31:0] BF_encrypt_0_52;
reg [31:0] BF_encrypt_0_52_reg;
reg [31:0] BF_encrypt_0_53;
reg [31:0] BF_encrypt_0_53_reg;
reg [31:0] BF_encrypt_0_54;
reg [31:0] BF_encrypt_0_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_55_reg;
reg [31:0] BF_encrypt_0_56;
reg [31:0] BF_encrypt_0_56_reg;
reg [31:0] BF_encrypt_0_57;
reg [31:0] BF_encrypt_0_57_reg;
reg [31:0] BF_encrypt_0_58;
reg [31:0] BF_encrypt_0_58_reg;
reg [31:0] BF_encrypt_0_59;
reg [31:0] BF_encrypt_0_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_60_reg;
reg [31:0] BF_encrypt_0_61;
reg [31:0] BF_encrypt_0_61_reg;
reg [31:0] BF_encrypt_0_62;
reg [31:0] BF_encrypt_0_62_reg;
reg [31:0] BF_encrypt_0_63;
reg [31:0] BF_encrypt_0_63_reg;
reg [31:0] BF_encrypt_0_64;
reg [31:0] BF_encrypt_0_64_reg;
reg [31:0] BF_encrypt_0_65;
reg [31:0] BF_encrypt_0_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_66_reg;
reg [31:0] BF_encrypt_0_67;
reg [31:0] BF_encrypt_0_67_reg;
reg [31:0] BF_encrypt_0_68;
reg [31:0] BF_encrypt_0_68_reg;
reg [31:0] BF_encrypt_0_69;
reg [31:0] BF_encrypt_0_69_reg;
reg [31:0] BF_encrypt_0_70;
reg [31:0] BF_encrypt_0_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_71_reg;
reg [31:0] BF_encrypt_0_72;
reg [31:0] BF_encrypt_0_72_reg;
reg [31:0] BF_encrypt_0_73;
reg [31:0] BF_encrypt_0_73_reg;
reg [31:0] BF_encrypt_0_74;
reg [31:0] BF_encrypt_0_74_reg;
reg [31:0] BF_encrypt_0_75;
reg [31:0] BF_encrypt_0_75_reg;
reg [31:0] BF_encrypt_0_76;
reg [31:0] BF_encrypt_0_76_reg;
reg [31:0] BF_encrypt_0_77;
reg [31:0] BF_encrypt_0_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_78_reg;
reg [31:0] BF_encrypt_0_79;
reg [31:0] BF_encrypt_0_79_reg;
reg [31:0] BF_encrypt_0_80;
reg [31:0] BF_encrypt_0_80_reg;
reg [31:0] BF_encrypt_0_81;
reg [31:0] BF_encrypt_0_81_reg;
reg [31:0] BF_encrypt_0_82;
reg [31:0] BF_encrypt_0_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_83_reg;
reg [31:0] BF_encrypt_0_84;
reg [31:0] BF_encrypt_0_84_reg;
reg [31:0] BF_encrypt_0_85;
reg [31:0] BF_encrypt_0_85_reg;
reg [31:0] BF_encrypt_0_86;
reg [31:0] BF_encrypt_0_86_reg;
reg [31:0] BF_encrypt_0_87;
reg [31:0] BF_encrypt_0_87_reg;
reg [31:0] BF_encrypt_0_88;
reg [31:0] BF_encrypt_0_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_89_reg;
reg [31:0] BF_encrypt_0_90;
reg [31:0] BF_encrypt_0_90_reg;
reg [31:0] BF_encrypt_0_91;
reg [31:0] BF_encrypt_0_91_reg;
reg [31:0] BF_encrypt_0_92;
reg [31:0] BF_encrypt_0_92_reg;
reg [31:0] BF_encrypt_0_93;
reg [31:0] BF_encrypt_0_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_94_reg;
reg [31:0] BF_encrypt_0_95;
reg [31:0] BF_encrypt_0_95_reg;
reg [31:0] BF_encrypt_0_96;
reg [31:0] BF_encrypt_0_96_reg;
reg [31:0] BF_encrypt_0_97;
reg [31:0] BF_encrypt_0_97_reg;
reg [31:0] BF_encrypt_0_98;
reg [31:0] BF_encrypt_0_98_reg;
reg [31:0] BF_encrypt_0_99;
reg [31:0] BF_encrypt_0_99_reg;
reg [31:0] BF_encrypt_0_100;
reg [31:0] BF_encrypt_0_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_101_reg;
reg [31:0] BF_encrypt_0_102;
reg [31:0] BF_encrypt_0_102_reg;
reg [31:0] BF_encrypt_0_103;
reg [31:0] BF_encrypt_0_103_reg;
reg [31:0] BF_encrypt_0_104;
reg [31:0] BF_encrypt_0_104_reg;
reg [31:0] BF_encrypt_0_105;
reg [31:0] BF_encrypt_0_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_106_reg;
reg [31:0] BF_encrypt_0_107;
reg [31:0] BF_encrypt_0_107_reg;
reg [31:0] BF_encrypt_0_108;
reg [31:0] BF_encrypt_0_108_reg;
reg [31:0] BF_encrypt_0_109;
reg [31:0] BF_encrypt_0_109_reg;
reg [31:0] BF_encrypt_0_110;
reg [31:0] BF_encrypt_0_110_reg;
reg [31:0] BF_encrypt_0_111;
reg [31:0] BF_encrypt_0_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_112_reg;
reg [31:0] BF_encrypt_0_113;
reg [31:0] BF_encrypt_0_113_reg;
reg [31:0] BF_encrypt_0_114;
reg [31:0] BF_encrypt_0_114_reg;
reg [31:0] BF_encrypt_0_115;
reg [31:0] BF_encrypt_0_115_reg;
reg [31:0] BF_encrypt_0_116;
reg [31:0] BF_encrypt_0_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_117_reg;
reg [31:0] BF_encrypt_0_118;
reg [31:0] BF_encrypt_0_118_reg;
reg [31:0] BF_encrypt_0_119;
reg [31:0] BF_encrypt_0_119_reg;
reg [31:0] BF_encrypt_0_120;
reg [31:0] BF_encrypt_0_120_reg;
reg [31:0] BF_encrypt_0_121;
reg [31:0] BF_encrypt_0_121_reg;
reg [31:0] BF_encrypt_0_122;
reg [31:0] BF_encrypt_0_122_reg;
reg [31:0] BF_encrypt_0_123;
reg [31:0] BF_encrypt_0_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_124_reg;
reg [31:0] BF_encrypt_0_125;
reg [31:0] BF_encrypt_0_125_reg;
reg [31:0] BF_encrypt_0_126;
reg [31:0] BF_encrypt_0_126_reg;
reg [31:0] BF_encrypt_0_127;
reg [31:0] BF_encrypt_0_127_reg;
reg [31:0] BF_encrypt_0_128;
reg [31:0] BF_encrypt_0_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_129_reg;
reg [31:0] BF_encrypt_0_130;
reg [31:0] BF_encrypt_0_130_reg;
reg [31:0] BF_encrypt_0_131;
reg [31:0] BF_encrypt_0_131_reg;
reg [31:0] BF_encrypt_0_132;
reg [31:0] BF_encrypt_0_132_reg;
reg [31:0] BF_encrypt_0_133;
reg [31:0] BF_encrypt_0_133_reg;
reg [31:0] BF_encrypt_0_134;
reg [31:0] BF_encrypt_0_134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_135_reg;
reg [31:0] BF_encrypt_0_136;
reg [31:0] BF_encrypt_0_136_reg;
reg [31:0] BF_encrypt_0_137;
reg [31:0] BF_encrypt_0_137_reg;
reg [31:0] BF_encrypt_0_138;
reg [31:0] BF_encrypt_0_138_reg;
reg [31:0] BF_encrypt_0_139;
reg [31:0] BF_encrypt_0_139_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_140;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_140_reg;
reg [31:0] BF_encrypt_0_141;
reg [31:0] BF_encrypt_0_141_reg;
reg [31:0] BF_encrypt_0_142;
reg [31:0] BF_encrypt_0_142_reg;
reg [31:0] BF_encrypt_0_143;
reg [31:0] BF_encrypt_0_143_reg;
reg [31:0] BF_encrypt_0_144;
reg [31:0] BF_encrypt_0_144_reg;
reg [31:0] BF_encrypt_0_145;
reg [31:0] BF_encrypt_0_145_reg;
reg [31:0] BF_encrypt_0_146;
reg [31:0] BF_encrypt_0_146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_147_reg;
reg [31:0] BF_encrypt_0_148;
reg [31:0] BF_encrypt_0_148_reg;
reg [31:0] BF_encrypt_0_149;
reg [31:0] BF_encrypt_0_149_reg;
reg [31:0] BF_encrypt_0_150;
reg [31:0] BF_encrypt_0_150_reg;
reg [31:0] BF_encrypt_0_151;
reg [31:0] BF_encrypt_0_151_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_152;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_152_reg;
reg [31:0] BF_encrypt_0_153;
reg [31:0] BF_encrypt_0_153_reg;
reg [31:0] BF_encrypt_0_154;
reg [31:0] BF_encrypt_0_154_reg;
reg [31:0] BF_encrypt_0_155;
reg [31:0] BF_encrypt_0_155_reg;
reg [31:0] BF_encrypt_0_156;
reg [31:0] BF_encrypt_0_156_reg;
reg [31:0] BF_encrypt_0_157;
reg [31:0] BF_encrypt_0_157_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_158;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_158_reg;
reg [31:0] BF_encrypt_0_159;
reg [31:0] BF_encrypt_0_159_reg;
reg [31:0] BF_encrypt_0_160;
reg [31:0] BF_encrypt_0_160_reg;
reg [31:0] BF_encrypt_0_161;
reg [31:0] BF_encrypt_0_161_reg;
reg [31:0] BF_encrypt_0_162;
reg [31:0] BF_encrypt_0_162_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_163;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_163_reg;
reg [31:0] BF_encrypt_0_164;
reg [31:0] BF_encrypt_0_164_reg;
reg [31:0] BF_encrypt_0_165;
reg [31:0] BF_encrypt_0_165_reg;
reg [31:0] BF_encrypt_0_166;
reg [31:0] BF_encrypt_0_166_reg;
reg [31:0] BF_encrypt_0_167;
reg [31:0] BF_encrypt_0_167_reg;
reg [31:0] BF_encrypt_0_168;
reg [31:0] BF_encrypt_0_168_reg;
reg [31:0] BF_encrypt_0_169;
reg [31:0] BF_encrypt_0_169_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_170_reg;
reg [31:0] BF_encrypt_0_171;
reg [31:0] BF_encrypt_0_171_reg;
reg [31:0] BF_encrypt_0_172;
reg [31:0] BF_encrypt_0_172_reg;
reg [31:0] BF_encrypt_0_173;
reg [31:0] BF_encrypt_0_173_reg;
reg [31:0] BF_encrypt_0_174;
reg [31:0] BF_encrypt_0_174_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_175;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_175_reg;
reg [31:0] BF_encrypt_0_176;
reg [31:0] BF_encrypt_0_176_reg;
reg [31:0] BF_encrypt_0_177;
reg [31:0] BF_encrypt_0_177_reg;
reg [31:0] BF_encrypt_0_178;
reg [31:0] BF_encrypt_0_178_reg;
reg [31:0] BF_encrypt_0_179;
reg [31:0] BF_encrypt_0_179_reg;
reg [31:0] BF_encrypt_0_180;
reg [31:0] BF_encrypt_0_180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_181_reg;
reg [31:0] BF_encrypt_0_182;
reg [31:0] BF_encrypt_0_182_reg;
reg [31:0] BF_encrypt_0_183;
reg [31:0] BF_encrypt_0_183_reg;
reg [31:0] BF_encrypt_0_184;
reg [31:0] BF_encrypt_0_184_reg;
reg [31:0] BF_encrypt_0_185;
reg [31:0] BF_encrypt_0_185_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_186_reg;
reg [31:0] BF_encrypt_0_187;
reg [31:0] BF_encrypt_0_187_reg;
reg [31:0] BF_encrypt_0_188;
reg [31:0] BF_encrypt_0_188_reg;
reg [31:0] BF_encrypt_0_189;
reg [31:0] BF_encrypt_0_189_reg;
reg [31:0] BF_encrypt_0_190;
reg [31:0] BF_encrypt_0_190_reg;
reg [31:0] BF_encrypt_0_191;
reg [31:0] BF_encrypt_0_191_reg;
reg [31:0] BF_encrypt_0_192;
reg [31:0] BF_encrypt_0_192_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_193;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_193_reg;
reg [31:0] BF_encrypt_0_194;
reg [31:0] BF_encrypt_0_194_reg;
reg [31:0] BF_encrypt_0_195;
reg [31:0] BF_encrypt_0_195_reg;
reg [31:0] BF_encrypt_0_196;
reg [31:0] BF_encrypt_0_196_reg;
reg [31:0] BF_encrypt_0_197;
reg [31:0] BF_encrypt_0_197_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_198;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_198_reg;
reg [31:0] BF_encrypt_0_199;
reg [31:0] BF_encrypt_0_199_reg;
reg [31:0] BF_encrypt_0_200;
reg [31:0] BF_encrypt_0_200_reg;
reg [31:0] BF_encrypt_0_201;
reg [31:0] BF_encrypt_0_201_reg;
reg [31:0] BF_encrypt_0_202;
reg [31:0] BF_encrypt_0_202_reg;
reg [31:0] BF_encrypt_0_203;
reg [31:0] BF_encrypt_0_203_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_204;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_204_reg;
reg [31:0] BF_encrypt_0_205;
reg [31:0] BF_encrypt_0_205_reg;
reg [31:0] BF_encrypt_0_206;
reg [31:0] BF_encrypt_0_206_reg;
reg [31:0] BF_encrypt_0_207;
reg [31:0] BF_encrypt_0_207_reg;
reg [31:0] BF_encrypt_0_208;
reg [31:0] BF_encrypt_0_208_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_209;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_209_reg;
reg [31:0] BF_encrypt_0_210;
reg [31:0] BF_encrypt_0_210_reg;
reg [31:0] BF_encrypt_0_211;
reg [31:0] BF_encrypt_0_211_reg;
reg [31:0] BF_encrypt_0_212;
reg [31:0] BF_encrypt_0_212_reg;
reg [31:0] BF_encrypt_0_213;
reg [31:0] BF_encrypt_0_213_reg;
reg [31:0] BF_encrypt_0_214;
reg [31:0] BF_encrypt_0_214_reg;
reg [31:0] BF_encrypt_0_215;
reg [31:0] BF_encrypt_0_215_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_216;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_216_reg;
reg [31:0] BF_encrypt_0_217;
reg [31:0] BF_encrypt_0_217_reg;
reg [31:0] BF_encrypt_0_218;
reg [31:0] BF_encrypt_0_218_reg;
reg [31:0] BF_encrypt_0_219;
reg [31:0] BF_encrypt_0_219_reg;
reg [31:0] BF_encrypt_0_220;
reg [31:0] BF_encrypt_0_220_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_221;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_221_reg;
reg [31:0] BF_encrypt_0_222;
reg [31:0] BF_encrypt_0_222_reg;
reg [31:0] BF_encrypt_0_223;
reg [31:0] BF_encrypt_0_223_reg;
reg [31:0] BF_encrypt_0_224;
reg [31:0] BF_encrypt_0_224_reg;
reg [31:0] BF_encrypt_0_225;
reg [31:0] BF_encrypt_0_225_reg;
reg [31:0] BF_encrypt_0_226;
reg [31:0] BF_encrypt_0_226_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_227;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_227_reg;
reg [31:0] BF_encrypt_0_228;
reg [31:0] BF_encrypt_0_228_reg;
reg [31:0] BF_encrypt_0_229;
reg [31:0] BF_encrypt_0_229_reg;
reg [31:0] BF_encrypt_0_230;
reg [31:0] BF_encrypt_0_230_reg;
reg [31:0] BF_encrypt_0_231;
reg [31:0] BF_encrypt_0_231_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_232;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_232_reg;
reg [31:0] BF_encrypt_0_233;
reg [31:0] BF_encrypt_0_233_reg;
reg [31:0] BF_encrypt_0_234;
reg [31:0] BF_encrypt_0_234_reg;
reg [31:0] BF_encrypt_0_235;
reg [31:0] BF_encrypt_0_235_reg;
reg [31:0] BF_encrypt_0_236;
reg [31:0] BF_encrypt_0_236_reg;
reg [31:0] BF_encrypt_0_237;
reg [31:0] BF_encrypt_0_237_reg;
reg [31:0] BF_encrypt_0_238;
reg [31:0] BF_encrypt_0_238_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_239;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_239_reg;
reg [31:0] BF_encrypt_0_240;
reg [31:0] BF_encrypt_0_240_reg;
reg [31:0] BF_encrypt_0_241;
reg [31:0] BF_encrypt_0_241_reg;
reg [31:0] BF_encrypt_0_242;
reg [31:0] BF_encrypt_0_242_reg;
reg [31:0] BF_encrypt_0_243;
reg [31:0] BF_encrypt_0_243_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_244;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_244_reg;
reg [31:0] BF_encrypt_0_245;
reg [31:0] BF_encrypt_0_245_reg;
reg [31:0] BF_encrypt_0_246;
reg [31:0] BF_encrypt_0_246_reg;
reg [31:0] BF_encrypt_0_247;
reg [31:0] BF_encrypt_0_247_reg;
reg [31:0] BF_encrypt_0_248;
reg [31:0] BF_encrypt_0_248_reg;
reg [31:0] BF_encrypt_0_249;
reg [31:0] BF_encrypt_0_249_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_250;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_250_reg;
reg [31:0] BF_encrypt_0_251;
reg [31:0] BF_encrypt_0_251_reg;
reg [31:0] BF_encrypt_0_252;
reg [31:0] BF_encrypt_0_252_reg;
reg [31:0] BF_encrypt_0_253;
reg [31:0] BF_encrypt_0_253_reg;
reg [31:0] BF_encrypt_0_254;
reg [31:0] BF_encrypt_0_254_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_255;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_255_reg;
reg [31:0] BF_encrypt_0_256;
reg [31:0] BF_encrypt_0_256_reg;
reg [31:0] BF_encrypt_0_257;
reg [31:0] BF_encrypt_0_257_reg;
reg [31:0] BF_encrypt_0_258;
reg [31:0] BF_encrypt_0_258_reg;
reg [31:0] BF_encrypt_0_259;
reg [31:0] BF_encrypt_0_259_reg;
reg [31:0] BF_encrypt_0_260;
reg [31:0] BF_encrypt_0_260_reg;
reg [31:0] BF_encrypt_0_261;
reg [31:0] BF_encrypt_0_261_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_262;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_262_reg;
reg [31:0] BF_encrypt_0_263;
reg [31:0] BF_encrypt_0_263_reg;
reg [31:0] BF_encrypt_0_264;
reg [31:0] BF_encrypt_0_264_reg;
reg [31:0] BF_encrypt_0_265;
reg [31:0] BF_encrypt_0_265_reg;
reg [31:0] BF_encrypt_0_266;
reg [31:0] BF_encrypt_0_266_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_267;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_267_reg;
reg [31:0] BF_encrypt_0_268;
reg [31:0] BF_encrypt_0_268_reg;
reg [31:0] BF_encrypt_0_269;
reg [31:0] BF_encrypt_0_269_reg;
reg [31:0] BF_encrypt_0_270;
reg [31:0] BF_encrypt_0_270_reg;
reg [31:0] BF_encrypt_0_271;
reg [31:0] BF_encrypt_0_271_reg;
reg [31:0] BF_encrypt_0_272;
reg [31:0] BF_encrypt_0_272_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_273;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_273_reg;
reg [31:0] BF_encrypt_0_274;
reg [31:0] BF_encrypt_0_274_reg;
reg [31:0] BF_encrypt_0_275;
reg [31:0] BF_encrypt_0_275_reg;
reg [31:0] BF_encrypt_0_276;
reg [31:0] BF_encrypt_0_276_reg;
reg [31:0] BF_encrypt_0_277;
reg [31:0] BF_encrypt_0_277_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_278;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_278_reg;
reg [31:0] BF_encrypt_0_279;
reg [31:0] BF_encrypt_0_279_reg;
reg [31:0] BF_encrypt_0_280;
reg [31:0] BF_encrypt_0_280_reg;
reg [31:0] BF_encrypt_0_281;
reg [31:0] BF_encrypt_0_281_reg;
reg [31:0] BF_encrypt_0_282;
reg [31:0] BF_encrypt_0_282_reg;
reg [31:0] BF_encrypt_0_283;
reg [31:0] BF_encrypt_0_283_reg;
reg [31:0] BF_encrypt_0_284;
reg [31:0] BF_encrypt_0_284_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_285;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_285_reg;
reg [31:0] BF_encrypt_0_286;
reg [31:0] BF_encrypt_0_286_reg;
reg [31:0] BF_encrypt_0_287;
reg [31:0] BF_encrypt_0_287_reg;
reg [31:0] BF_encrypt_0_288;
reg [31:0] BF_encrypt_0_288_reg;
reg [31:0] BF_encrypt_0_289;
reg [31:0] BF_encrypt_0_289_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_290;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_290_reg;
reg [31:0] BF_encrypt_0_291;
reg [31:0] BF_encrypt_0_291_reg;
reg [31:0] BF_encrypt_0_292;
reg [31:0] BF_encrypt_0_292_reg;
reg [31:0] BF_encrypt_0_293;
reg [31:0] BF_encrypt_0_293_reg;
reg [31:0] BF_encrypt_0_294;
reg [31:0] BF_encrypt_0_294_reg;
reg [31:0] BF_encrypt_0_295;
reg [31:0] BF_encrypt_0_295_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_296;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_296_reg;
reg [31:0] BF_encrypt_0_297;
reg [31:0] BF_encrypt_0_297_reg;
reg [31:0] BF_encrypt_0_298;
reg [31:0] BF_encrypt_0_298_reg;
reg [31:0] BF_encrypt_0_299;
reg [31:0] BF_encrypt_0_299_reg;
reg [31:0] BF_encrypt_0_300;
reg [31:0] BF_encrypt_0_300_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_301;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_301_reg;
reg [31:0] BF_encrypt_0_302;
reg [31:0] BF_encrypt_0_302_reg;
reg [31:0] BF_encrypt_0_303;
reg [31:0] BF_encrypt_0_303_reg;
reg [31:0] BF_encrypt_0_304;
reg [31:0] BF_encrypt_0_304_reg;
reg [31:0] BF_encrypt_0_305;
reg [31:0] BF_encrypt_0_305_reg;
reg [31:0] BF_encrypt_0_306;
reg [31:0] BF_encrypt_0_306_reg;
reg [31:0] BF_encrypt_0_307;
reg [31:0] BF_encrypt_0_307_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_308;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_308_reg;
reg [31:0] BF_encrypt_0_309;
reg [31:0] BF_encrypt_0_309_reg;
reg [31:0] BF_encrypt_0_310;
reg [31:0] BF_encrypt_0_310_reg;
reg [31:0] BF_encrypt_0_311;
reg [31:0] BF_encrypt_0_311_reg;
reg [31:0] BF_encrypt_0_312;
reg [31:0] BF_encrypt_0_312_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_313;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_313_reg;
reg [31:0] BF_encrypt_0_314;
reg [31:0] BF_encrypt_0_314_reg;
reg [31:0] BF_encrypt_0_315;
reg [31:0] BF_encrypt_0_315_reg;
reg [31:0] BF_encrypt_0_316;
reg [31:0] BF_encrypt_0_316_reg;
reg [31:0] BF_encrypt_0_317;
reg [31:0] BF_encrypt_0_317_reg;
reg [31:0] BF_encrypt_0_318;
reg [31:0] BF_encrypt_0_318_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_319;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_319_reg;
reg [31:0] BF_encrypt_0_320;
reg [31:0] BF_encrypt_0_320_reg;
reg [31:0] BF_encrypt_0_321;
reg [31:0] BF_encrypt_0_321_reg;
reg [31:0] BF_encrypt_0_322;
reg [31:0] BF_encrypt_0_322_reg;
reg [31:0] BF_encrypt_0_323;
reg [31:0] BF_encrypt_0_323_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_324;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_324_reg;
reg [31:0] BF_encrypt_0_325;
reg [31:0] BF_encrypt_0_325_reg;
reg [31:0] BF_encrypt_0_326;
reg [31:0] BF_encrypt_0_326_reg;
reg [31:0] BF_encrypt_0_327;
reg [31:0] BF_encrypt_0_327_reg;
reg [31:0] BF_encrypt_0_328;
reg [31:0] BF_encrypt_0_328_reg;
reg [31:0] BF_encrypt_0_329;
reg [31:0] BF_encrypt_0_329_reg;
reg [31:0] BF_encrypt_0_330;
reg [31:0] BF_encrypt_0_330_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_331;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_331_reg;
reg [31:0] BF_encrypt_0_332;
reg [31:0] BF_encrypt_0_332_reg;
reg [31:0] BF_encrypt_0_333;
reg [31:0] BF_encrypt_0_333_reg;
reg [31:0] BF_encrypt_0_334;
reg [31:0] BF_encrypt_0_334_reg;
reg [31:0] BF_encrypt_0_335;
reg [31:0] BF_encrypt_0_335_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_336;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_336_reg;
reg [31:0] BF_encrypt_0_337;
reg [31:0] BF_encrypt_0_337_reg;
reg [31:0] BF_encrypt_0_338;
reg [31:0] BF_encrypt_0_338_reg;
reg [31:0] BF_encrypt_0_339;
reg [31:0] BF_encrypt_0_339_reg;
reg [31:0] BF_encrypt_0_340;
reg [31:0] BF_encrypt_0_340_reg;
reg [31:0] BF_encrypt_0_341;
reg [31:0] BF_encrypt_0_341_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_342;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_342_reg;
reg [31:0] BF_encrypt_0_343;
reg [31:0] BF_encrypt_0_343_reg;
reg [31:0] BF_encrypt_0_344;
reg [31:0] BF_encrypt_0_344_reg;
reg [31:0] BF_encrypt_0_345;
reg [31:0] BF_encrypt_0_345_reg;
reg [31:0] BF_encrypt_0_346;
reg [31:0] BF_encrypt_0_346_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_347;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_347_reg;
reg [31:0] BF_encrypt_0_348;
reg [31:0] BF_encrypt_0_348_reg;
reg [31:0] BF_encrypt_0_349;
reg [31:0] BF_encrypt_0_349_reg;
reg [31:0] BF_encrypt_0_350;
reg [31:0] BF_encrypt_0_350_reg;
reg [31:0] BF_encrypt_0_351;
reg [31:0] BF_encrypt_0_351_reg;
reg [31:0] BF_encrypt_0_352;
reg [31:0] BF_encrypt_0_352_reg;
reg [31:0] BF_encrypt_0_353;
reg [31:0] BF_encrypt_0_353_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_354;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_354_reg;
reg [31:0] BF_encrypt_0_355;
reg [31:0] BF_encrypt_0_355_reg;
reg [31:0] BF_encrypt_0_356;
reg [31:0] BF_encrypt_0_356_reg;
reg [31:0] BF_encrypt_0_357;
reg [31:0] BF_encrypt_0_357_reg;
reg [31:0] BF_encrypt_0_358;
reg [31:0] BF_encrypt_0_358_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_359;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_359_reg;
reg [31:0] BF_encrypt_0_360;
reg [31:0] BF_encrypt_0_360_reg;
reg [31:0] BF_encrypt_0_361;
reg [31:0] BF_encrypt_0_361_reg;
reg [31:0] BF_encrypt_0_362;
reg [31:0] BF_encrypt_0_362_reg;
reg [31:0] BF_encrypt_0_363;
reg [31:0] BF_encrypt_0_363_reg;
reg [31:0] BF_encrypt_0_364;
reg [31:0] BF_encrypt_0_364_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_365;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_365_reg;
reg [31:0] BF_encrypt_0_366;
reg [31:0] BF_encrypt_0_366_reg;
reg [31:0] BF_encrypt_0_367;
reg [31:0] BF_encrypt_0_367_reg;
reg [31:0] BF_encrypt_0_368;
reg [31:0] BF_encrypt_0_368_reg;
reg [31:0] BF_encrypt_0_369;
reg [31:0] BF_encrypt_0_369_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_370;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_0_370_reg;
reg [31:0] BF_encrypt_0_371;
reg [31:0] BF_encrypt_0_371_reg;
reg [31:0] BF_encrypt_0_372;
reg [31:0] BF_encrypt_0_372_reg;
reg [31:0] BF_encrypt_0_373;
reg [31:0] BF_encrypt_0_373_reg;
reg [31:0] BF_encrypt_0_374;
reg [31:0] BF_encrypt_0_374_reg;
reg [31:0] BF_encrypt_0_375;
reg [31:0] BF_encrypt_0_375_reg;
wire [4:0] bf_init_P_address_a;
wire  bf_init_P_write_enable_a;
wire [31:0] bf_init_P_in_a;
wire [31:0] bf_init_P_out_a;
wire [4:0] bf_init_P_address_b;
wire  bf_init_P_write_enable_b;
wire [31:0] bf_init_P_in_b;
wire [31:0] bf_init_P_out_b;
wire [9:0] bf_init_S_address_a;
wire  bf_init_S_write_enable_a;
wire [31:0] bf_init_S_in_a;
wire [31:0] bf_init_S_out_a;
wire [9:0] bf_init_S_address_b;
wire  bf_init_S_write_enable_b;
wire [31:0] bf_init_S_in_b;
wire [31:0] bf_init_S_out_b;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [12:0] in_key_address_a;
wire  in_key_write_enable_a;
wire [7:0] in_key_in_a;
wire [7:0] in_key_out_a;
wire [12:0] in_key_address_b;
wire  in_key_write_enable_b;
wire [7:0] in_key_in_b;
wire [7:0] in_key_out_b;
wire [12:0] out_key_address_a;
wire  out_key_write_enable_a;
wire [7:0] out_key_in_a;
wire [7:0] out_key_out_a;
wire [12:0] out_key_address_b;
wire  out_key_write_enable_b;
wire [7:0] out_key_in_b;
wire [7:0] out_key_out_b;
wire [2:0] main_0_ukeyi_address_a;
wire  main_0_ukeyi_write_enable_a;
wire [7:0] main_0_ukeyi_in_a;
wire [7:0] main_0_ukeyi_out_a;
wire [2:0] main_0_ukeyi_address_b;
wire  main_0_ukeyi_write_enable_b;
wire [7:0] main_0_ukeyi_in_b;
wire [7:0] main_0_ukeyi_out_b;
wire [2:0] main_0_iveci_address_a;
wire  main_0_iveci_write_enable_a;
wire [7:0] main_0_iveci_in_a;
wire [7:0] main_0_iveci_out_a;
wire [2:0] main_0_iveci_address_b;
wire  main_0_iveci_write_enable_b;
wire [7:0] main_0_iveci_in_b;
wire [7:0] main_0_iveci_out_b;

// Local Rams


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_BF_encrypt_BB__0_1;
LEGUP_F_BF_encrypt_BB__0_1:
		next_state = LEGUP_F_BF_encrypt_BB__0_2;
LEGUP_F_BF_encrypt_BB__0_10:
		next_state = LEGUP_F_BF_encrypt_BB__0_11;
LEGUP_F_BF_encrypt_BB__0_11:
		next_state = LEGUP_F_BF_encrypt_BB__0_12;
LEGUP_F_BF_encrypt_BB__0_12:
		next_state = LEGUP_F_BF_encrypt_BB__0_13;
LEGUP_F_BF_encrypt_BB__0_13:
		next_state = LEGUP_F_BF_encrypt_BB__0_14;
LEGUP_F_BF_encrypt_BB__0_14:
		next_state = LEGUP_F_BF_encrypt_BB__0_15;
LEGUP_F_BF_encrypt_BB__0_15:
		next_state = LEGUP_F_BF_encrypt_BB__0_16;
LEGUP_F_BF_encrypt_BB__0_16:
		next_state = LEGUP_F_BF_encrypt_BB__0_17;
LEGUP_F_BF_encrypt_BB__0_17:
		next_state = LEGUP_F_BF_encrypt_BB__0_18;
LEGUP_F_BF_encrypt_BB__0_18:
		next_state = LEGUP_F_BF_encrypt_BB__0_19;
LEGUP_F_BF_encrypt_BB__0_19:
		next_state = LEGUP_F_BF_encrypt_BB__0_20;
LEGUP_F_BF_encrypt_BB__0_2:
		next_state = LEGUP_F_BF_encrypt_BB__0_3;
LEGUP_F_BF_encrypt_BB__0_20:
		next_state = LEGUP_F_BF_encrypt_BB__0_21;
LEGUP_F_BF_encrypt_BB__0_21:
		next_state = LEGUP_F_BF_encrypt_BB__0_22;
LEGUP_F_BF_encrypt_BB__0_22:
		next_state = LEGUP_F_BF_encrypt_BB__0_23;
LEGUP_F_BF_encrypt_BB__0_23:
		next_state = LEGUP_F_BF_encrypt_BB__0_24;
LEGUP_F_BF_encrypt_BB__0_24:
		next_state = LEGUP_F_BF_encrypt_BB__0_25;
LEGUP_F_BF_encrypt_BB__0_25:
		next_state = LEGUP_F_BF_encrypt_BB__0_26;
LEGUP_F_BF_encrypt_BB__0_26:
		next_state = LEGUP_F_BF_encrypt_BB__0_27;
LEGUP_F_BF_encrypt_BB__0_27:
		next_state = LEGUP_F_BF_encrypt_BB__0_28;
LEGUP_F_BF_encrypt_BB__0_28:
		next_state = LEGUP_F_BF_encrypt_BB__0_29;
LEGUP_F_BF_encrypt_BB__0_29:
		next_state = LEGUP_F_BF_encrypt_BB__0_30;
LEGUP_F_BF_encrypt_BB__0_3:
		next_state = LEGUP_F_BF_encrypt_BB__0_4;
LEGUP_F_BF_encrypt_BB__0_30:
		next_state = LEGUP_F_BF_encrypt_BB__0_31;
LEGUP_F_BF_encrypt_BB__0_31:
		next_state = LEGUP_F_BF_encrypt_BB__0_32;
LEGUP_F_BF_encrypt_BB__0_32:
		next_state = LEGUP_F_BF_encrypt_BB__0_33;
LEGUP_F_BF_encrypt_BB__0_33:
		next_state = LEGUP_F_BF_encrypt_BB__0_34;
LEGUP_F_BF_encrypt_BB__0_34:
		next_state = LEGUP_F_BF_encrypt_BB__0_35;
LEGUP_F_BF_encrypt_BB__0_35:
		next_state = LEGUP_F_BF_encrypt_BB__0_36;
LEGUP_F_BF_encrypt_BB__0_36:
		next_state = LEGUP_F_BF_encrypt_BB__0_37;
LEGUP_F_BF_encrypt_BB__0_37:
		next_state = LEGUP_F_BF_encrypt_BB__0_38;
LEGUP_F_BF_encrypt_BB__0_38:
		next_state = LEGUP_F_BF_encrypt_BB__0_39;
LEGUP_F_BF_encrypt_BB__0_39:
		next_state = LEGUP_F_BF_encrypt_BB__0_40;
LEGUP_F_BF_encrypt_BB__0_4:
		next_state = LEGUP_F_BF_encrypt_BB__0_5;
LEGUP_F_BF_encrypt_BB__0_40:
		next_state = LEGUP_F_BF_encrypt_BB__0_41;
LEGUP_F_BF_encrypt_BB__0_41:
		next_state = LEGUP_F_BF_encrypt_BB__0_42;
LEGUP_F_BF_encrypt_BB__0_42:
		next_state = LEGUP_F_BF_encrypt_BB__0_43;
LEGUP_F_BF_encrypt_BB__0_43:
		next_state = LEGUP_F_BF_encrypt_BB__0_44;
LEGUP_F_BF_encrypt_BB__0_44:
		next_state = LEGUP_F_BF_encrypt_BB__0_45;
LEGUP_F_BF_encrypt_BB__0_45:
		next_state = LEGUP_F_BF_encrypt_BB__0_46;
LEGUP_F_BF_encrypt_BB__0_46:
		next_state = LEGUP_F_BF_encrypt_BB__0_47;
LEGUP_F_BF_encrypt_BB__0_47:
		next_state = LEGUP_F_BF_encrypt_BB__0_48;
LEGUP_F_BF_encrypt_BB__0_48:
		next_state = LEGUP_F_BF_encrypt_BB__0_49;
LEGUP_F_BF_encrypt_BB__0_49:
		next_state = LEGUP_F_BF_encrypt_BB__0_50;
LEGUP_F_BF_encrypt_BB__0_5:
		next_state = LEGUP_F_BF_encrypt_BB__0_6;
LEGUP_F_BF_encrypt_BB__0_50:
		next_state = LEGUP_F_BF_encrypt_BB__0_51;
LEGUP_F_BF_encrypt_BB__0_51:
		next_state = LEGUP_F_BF_encrypt_BB__0_52;
LEGUP_F_BF_encrypt_BB__0_52:
		next_state = LEGUP_F_BF_encrypt_BB__0_53;
LEGUP_F_BF_encrypt_BB__0_53:
		next_state = LEGUP_F_BF_encrypt_BB__0_54;
LEGUP_F_BF_encrypt_BB__0_54:
		next_state = LEGUP_F_BF_encrypt_BB__0_55;
LEGUP_F_BF_encrypt_BB__0_55:
		next_state = LEGUP_F_BF_encrypt_BB__0_56;
LEGUP_F_BF_encrypt_BB__0_56:
		next_state = LEGUP_F_BF_encrypt_BB__0_57;
LEGUP_F_BF_encrypt_BB__0_57:
		next_state = LEGUP_F_BF_encrypt_BB__0_58;
LEGUP_F_BF_encrypt_BB__0_58:
		next_state = LEGUP_F_BF_encrypt_BB__0_59;
LEGUP_F_BF_encrypt_BB__0_59:
		next_state = LEGUP_F_BF_encrypt_BB__0_60;
LEGUP_F_BF_encrypt_BB__0_6:
		next_state = LEGUP_F_BF_encrypt_BB__0_7;
LEGUP_F_BF_encrypt_BB__0_60:
		next_state = LEGUP_F_BF_encrypt_BB__0_61;
LEGUP_F_BF_encrypt_BB__0_61:
		next_state = LEGUP_F_BF_encrypt_BB__0_62;
LEGUP_F_BF_encrypt_BB__0_62:
		next_state = LEGUP_F_BF_encrypt_BB__0_63;
LEGUP_F_BF_encrypt_BB__0_63:
		next_state = LEGUP_F_BF_encrypt_BB__0_64;
LEGUP_F_BF_encrypt_BB__0_64:
		next_state = LEGUP_F_BF_encrypt_BB__0_65;
LEGUP_F_BF_encrypt_BB__0_65:
		next_state = LEGUP_F_BF_encrypt_BB__0_66;
LEGUP_F_BF_encrypt_BB__0_66:
		next_state = LEGUP_F_BF_encrypt_BB__0_67;
LEGUP_F_BF_encrypt_BB__0_67:
		next_state = LEGUP_F_BF_encrypt_BB__0_68;
LEGUP_F_BF_encrypt_BB__0_68:
		next_state = LEGUP_F_BF_encrypt_BB__0_69;
LEGUP_F_BF_encrypt_BB__0_69:
		next_state = LEGUP_F_BF_encrypt_BB__0_70;
LEGUP_F_BF_encrypt_BB__0_7:
		next_state = LEGUP_F_BF_encrypt_BB__0_8;
LEGUP_F_BF_encrypt_BB__0_70:
		next_state = LEGUP_F_BF_encrypt_BB__0_71;
LEGUP_F_BF_encrypt_BB__0_71:
		next_state = LEGUP_F_BF_encrypt_BB__0_72;
LEGUP_F_BF_encrypt_BB__0_72:
		next_state = LEGUP_F_BF_encrypt_BB__0_73;
LEGUP_F_BF_encrypt_BB__0_73:
		next_state = LEGUP_F_BF_encrypt_BB__0_74;
LEGUP_F_BF_encrypt_BB__0_74:
		next_state = LEGUP_F_BF_encrypt_BB__0_75;
LEGUP_F_BF_encrypt_BB__0_75:
		next_state = LEGUP_0;
LEGUP_F_BF_encrypt_BB__0_8:
		next_state = LEGUP_F_BF_encrypt_BB__0_9;
LEGUP_F_BF_encrypt_BB__0_9:
		next_state = LEGUP_F_BF_encrypt_BB__0_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %1 = load i32* %data, align 4, !tbaa !1*/
		BF_encrypt_0_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %1 = load i32* %data, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		BF_encrypt_0_1_reg <= BF_encrypt_0_1;
		if (start == 1'b0 && ^(BF_encrypt_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %2 = getelementptr inbounds i32* %data, i32 1*/
		BF_encrypt_0_2 = (arg_data + (4 * 32'd1));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %2 = getelementptr inbounds i32* %data, i32 1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_1)) begin
		BF_encrypt_0_2_reg <= BF_encrypt_0_2;
		if (start == 1'b0 && ^(BF_encrypt_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %3 = load i32* %2, align 4, !tbaa !1*/
		BF_encrypt_0_3 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %3 = load i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_12)) begin
		BF_encrypt_0_3_reg <= BF_encrypt_0_3;
		if (start == 1'b0 && ^(BF_encrypt_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %4 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 0), align 4, !tbaa !1*/
		BF_encrypt_0_4 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %4 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		BF_encrypt_0_4_reg <= BF_encrypt_0_4;
		if (start == 1'b0 && ^(BF_encrypt_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %5 = xor i32 %4, %1*/
		BF_encrypt_0_5 = (BF_encrypt_0_4 ^ BF_encrypt_0_1);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %5 = xor i32 %4, %1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		BF_encrypt_0_5_reg <= BF_encrypt_0_5;
		if (start == 1'b0 && ^(BF_encrypt_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %6 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 1), align 4, !tbaa !1*/
		BF_encrypt_0_6 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %6 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		BF_encrypt_0_6_reg <= BF_encrypt_0_6;
		if (start == 1'b0 && ^(BF_encrypt_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %7 = xor i32 %6, %3*/
		BF_encrypt_0_7 = (BF_encrypt_0_6_reg ^ BF_encrypt_0_3);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %7 = xor i32 %6, %3*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_12)) begin
		BF_encrypt_0_7_reg <= BF_encrypt_0_7;
		if (start == 1'b0 && ^(BF_encrypt_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %8 = lshr i32 %5, 24*/
		BF_encrypt_0_8 = (BF_encrypt_0_5 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %8 = lshr i32 %5, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		BF_encrypt_0_8_reg <= BF_encrypt_0_8;
		if (start == 1'b0 && ^(BF_encrypt_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %9 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %8*/
		BF_encrypt_0_9 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_8_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %9 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		BF_encrypt_0_9_reg <= BF_encrypt_0_9;
		if (start == 1'b0 && ^(BF_encrypt_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
		BF_encrypt_0_10 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_13)) begin
		BF_encrypt_0_10_reg <= BF_encrypt_0_10;
		if (start == 1'b0 && ^(BF_encrypt_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %11 = lshr i32 %5, 16*/
		BF_encrypt_0_11 = (BF_encrypt_0_5 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %11 = lshr i32 %5, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		BF_encrypt_0_11_reg <= BF_encrypt_0_11;
		if (start == 1'b0 && ^(BF_encrypt_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %12 = and i32 %11, 255*/
		BF_encrypt_0_12 = (BF_encrypt_0_11 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %12 = and i32 %11, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		BF_encrypt_0_12_reg <= BF_encrypt_0_12;
		if (start == 1'b0 && ^(BF_encrypt_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_12_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %13 = or i32 %12, 256*/
		BF_encrypt_0_13 = (BF_encrypt_0_12 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %13 = or i32 %12, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		BF_encrypt_0_13_reg <= BF_encrypt_0_13;
		if (start == 1'b0 && ^(BF_encrypt_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %14 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %13*/
		BF_encrypt_0_14 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_13_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %14 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %13*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		BF_encrypt_0_14_reg <= BF_encrypt_0_14;
		if (start == 1'b0 && ^(BF_encrypt_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_14_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
		BF_encrypt_0_15 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_13)) begin
		BF_encrypt_0_15_reg <= BF_encrypt_0_15;
		if (start == 1'b0 && ^(BF_encrypt_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_15_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %16 = add i32 %15, %10*/
		BF_encrypt_0_16 = (BF_encrypt_0_15 + BF_encrypt_0_10);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %16 = add i32 %15, %10*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_13)) begin
		BF_encrypt_0_16_reg <= BF_encrypt_0_16;
		if (start == 1'b0 && ^(BF_encrypt_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_16_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %17 = lshr i32 %5, 8*/
		BF_encrypt_0_17 = (BF_encrypt_0_5 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %17 = lshr i32 %5, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		BF_encrypt_0_17_reg <= BF_encrypt_0_17;
		if (start == 1'b0 && ^(BF_encrypt_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_17_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %18 = and i32 %17, 255*/
		BF_encrypt_0_18 = (BF_encrypt_0_17 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %18 = and i32 %17, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		BF_encrypt_0_18_reg <= BF_encrypt_0_18;
		if (start == 1'b0 && ^(BF_encrypt_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_18_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %19 = or i32 %18, 512*/
		BF_encrypt_0_19 = (BF_encrypt_0_18 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %19 = or i32 %18, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		BF_encrypt_0_19_reg <= BF_encrypt_0_19;
		if (start == 1'b0 && ^(BF_encrypt_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_19_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %20 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %19*/
		BF_encrypt_0_20 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_19_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %20 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %19*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		BF_encrypt_0_20_reg <= BF_encrypt_0_20;
		if (start == 1'b0 && ^(BF_encrypt_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_20_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %21 = load i32* %20, align 4, !tbaa !1*/
		BF_encrypt_0_21 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %21 = load i32* %20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_21_reg <= BF_encrypt_0_21;
		if (start == 1'b0 && ^(BF_encrypt_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_21_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %22 = xor i32 %16, %21*/
		BF_encrypt_0_22 = (BF_encrypt_0_16_reg ^ BF_encrypt_0_21);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %22 = xor i32 %16, %21*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_22_reg <= BF_encrypt_0_22;
		if (start == 1'b0 && ^(BF_encrypt_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_22_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %23 = and i32 %5, 255*/
		BF_encrypt_0_23 = (BF_encrypt_0_5 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %23 = and i32 %5, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		BF_encrypt_0_23_reg <= BF_encrypt_0_23;
		if (start == 1'b0 && ^(BF_encrypt_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_23_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %24 = or i32 %23, 768*/
		BF_encrypt_0_24 = (BF_encrypt_0_23 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %24 = or i32 %23, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		BF_encrypt_0_24_reg <= BF_encrypt_0_24;
		if (start == 1'b0 && ^(BF_encrypt_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_24_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %25 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %24*/
		BF_encrypt_0_25 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_24_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %25 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		BF_encrypt_0_25_reg <= BF_encrypt_0_25;
		if (start == 1'b0 && ^(BF_encrypt_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_25_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %26 = load i32* %25, align 4, !tbaa !1*/
		BF_encrypt_0_26 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %26 = load i32* %25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_26_reg <= BF_encrypt_0_26;
		if (start == 1'b0 && ^(BF_encrypt_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_26_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %27 = add i32 %22, %26*/
		BF_encrypt_0_27 = (BF_encrypt_0_22 + BF_encrypt_0_26);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %27 = add i32 %22, %26*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_27_reg <= BF_encrypt_0_27;
		if (start == 1'b0 && ^(BF_encrypt_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_27_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %28 = xor i32 %7, %27*/
		BF_encrypt_0_28 = (BF_encrypt_0_7_reg ^ BF_encrypt_0_27);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %28 = xor i32 %7, %27*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_28_reg <= BF_encrypt_0_28;
		if (start == 1'b0 && ^(BF_encrypt_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_28_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %29 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 2), align 4, !tbaa !1*/
		BF_encrypt_0_29 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %29 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		BF_encrypt_0_29_reg <= BF_encrypt_0_29;
		if (start == 1'b0 && ^(BF_encrypt_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_29_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %30 = xor i32 %29, %5*/
		BF_encrypt_0_30 = (BF_encrypt_0_29 ^ BF_encrypt_0_5_reg);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %30 = xor i32 %29, %5*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		BF_encrypt_0_30_reg <= BF_encrypt_0_30;
		if (start == 1'b0 && ^(BF_encrypt_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_30_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %31 = lshr i32 %28, 24*/
		BF_encrypt_0_31 = (BF_encrypt_0_28 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %31 = lshr i32 %28, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_31_reg <= BF_encrypt_0_31;
		if (start == 1'b0 && ^(BF_encrypt_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_31_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %32 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %31*/
		BF_encrypt_0_32 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_31_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %32 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_15)) begin
		BF_encrypt_0_32_reg <= BF_encrypt_0_32;
		if (start == 1'b0 && ^(BF_encrypt_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_32_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %33 = load i32* %32, align 4, !tbaa !1*/
		BF_encrypt_0_33 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %33 = load i32* %32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_17)) begin
		BF_encrypt_0_33_reg <= BF_encrypt_0_33;
		if (start == 1'b0 && ^(BF_encrypt_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_33_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %34 = lshr i32 %28, 16*/
		BF_encrypt_0_34 = (BF_encrypt_0_28 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %34 = lshr i32 %28, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_34_reg <= BF_encrypt_0_34;
		if (start == 1'b0 && ^(BF_encrypt_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_34_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %35 = and i32 %34, 255*/
		BF_encrypt_0_35 = (BF_encrypt_0_34 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %35 = and i32 %34, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_35_reg <= BF_encrypt_0_35;
		if (start == 1'b0 && ^(BF_encrypt_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_35_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %36 = or i32 %35, 256*/
		BF_encrypt_0_36 = (BF_encrypt_0_35 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %36 = or i32 %35, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_36_reg <= BF_encrypt_0_36;
		if (start == 1'b0 && ^(BF_encrypt_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_36_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %37 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %36*/
		BF_encrypt_0_37 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_36_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %37 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %36*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_15)) begin
		BF_encrypt_0_37_reg <= BF_encrypt_0_37;
		if (start == 1'b0 && ^(BF_encrypt_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_37_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
		BF_encrypt_0_38 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_17)) begin
		BF_encrypt_0_38_reg <= BF_encrypt_0_38;
		if (start == 1'b0 && ^(BF_encrypt_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_38_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %39 = add i32 %38, %33*/
		BF_encrypt_0_39 = (BF_encrypt_0_38 + BF_encrypt_0_33);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %39 = add i32 %38, %33*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_17)) begin
		BF_encrypt_0_39_reg <= BF_encrypt_0_39;
		if (start == 1'b0 && ^(BF_encrypt_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_39_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %40 = lshr i32 %28, 8*/
		BF_encrypt_0_40 = (BF_encrypt_0_28 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %40 = lshr i32 %28, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_40_reg <= BF_encrypt_0_40;
		if (start == 1'b0 && ^(BF_encrypt_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_40_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %41 = and i32 %40, 255*/
		BF_encrypt_0_41 = (BF_encrypt_0_40 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %41 = and i32 %40, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_41_reg <= BF_encrypt_0_41;
		if (start == 1'b0 && ^(BF_encrypt_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_41_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %42 = or i32 %41, 512*/
		BF_encrypt_0_42 = (BF_encrypt_0_41 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %42 = or i32 %41, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_42_reg <= BF_encrypt_0_42;
		if (start == 1'b0 && ^(BF_encrypt_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_42_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %43 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %42*/
		BF_encrypt_0_43 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_42_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %43 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %42*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_15)) begin
		BF_encrypt_0_43_reg <= BF_encrypt_0_43;
		if (start == 1'b0 && ^(BF_encrypt_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_43_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
		BF_encrypt_0_44 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_44_reg <= BF_encrypt_0_44;
		if (start == 1'b0 && ^(BF_encrypt_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_44_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %45 = xor i32 %39, %44*/
		BF_encrypt_0_45 = (BF_encrypt_0_39_reg ^ BF_encrypt_0_44);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %45 = xor i32 %39, %44*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_45_reg <= BF_encrypt_0_45;
		if (start == 1'b0 && ^(BF_encrypt_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_45_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %46 = and i32 %28, 255*/
		BF_encrypt_0_46 = (BF_encrypt_0_28 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %46 = and i32 %28, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_46_reg <= BF_encrypt_0_46;
		if (start == 1'b0 && ^(BF_encrypt_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_46_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %47 = or i32 %46, 768*/
		BF_encrypt_0_47 = (BF_encrypt_0_46 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %47 = or i32 %46, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_47_reg <= BF_encrypt_0_47;
		if (start == 1'b0 && ^(BF_encrypt_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_47_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %48 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %47*/
		BF_encrypt_0_48 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_47_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %48 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %47*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_15)) begin
		BF_encrypt_0_48_reg <= BF_encrypt_0_48;
		if (start == 1'b0 && ^(BF_encrypt_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_48_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
		BF_encrypt_0_49 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_49_reg <= BF_encrypt_0_49;
		if (start == 1'b0 && ^(BF_encrypt_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_49_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %50 = add i32 %45, %49*/
		BF_encrypt_0_50 = (BF_encrypt_0_45 + BF_encrypt_0_49);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %50 = add i32 %45, %49*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_50_reg <= BF_encrypt_0_50;
		if (start == 1'b0 && ^(BF_encrypt_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_50_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %51 = xor i32 %30, %50*/
		BF_encrypt_0_51 = (BF_encrypt_0_30_reg ^ BF_encrypt_0_50);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %51 = xor i32 %30, %50*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_51_reg <= BF_encrypt_0_51;
		if (start == 1'b0 && ^(BF_encrypt_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_51_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %52 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 3), align 4, !tbaa !1*/
		BF_encrypt_0_52 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %52 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_5)) begin
		BF_encrypt_0_52_reg <= BF_encrypt_0_52;
		if (start == 1'b0 && ^(BF_encrypt_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_52_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %53 = xor i32 %52, %28*/
		BF_encrypt_0_53 = (BF_encrypt_0_52_reg ^ BF_encrypt_0_28);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %53 = xor i32 %52, %28*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_14)) begin
		BF_encrypt_0_53_reg <= BF_encrypt_0_53;
		if (start == 1'b0 && ^(BF_encrypt_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_53_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %54 = lshr i32 %51, 24*/
		BF_encrypt_0_54 = (BF_encrypt_0_51 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %54 = lshr i32 %51, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_54_reg <= BF_encrypt_0_54;
		if (start == 1'b0 && ^(BF_encrypt_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_54_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %55 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %54*/
		BF_encrypt_0_55 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_54_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %55 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %54*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_19)) begin
		BF_encrypt_0_55_reg <= BF_encrypt_0_55;
		if (start == 1'b0 && ^(BF_encrypt_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_55_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
		BF_encrypt_0_56 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_21)) begin
		BF_encrypt_0_56_reg <= BF_encrypt_0_56;
		if (start == 1'b0 && ^(BF_encrypt_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_56_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %57 = lshr i32 %51, 16*/
		BF_encrypt_0_57 = (BF_encrypt_0_51 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %57 = lshr i32 %51, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_57_reg <= BF_encrypt_0_57;
		if (start == 1'b0 && ^(BF_encrypt_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_57_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %58 = and i32 %57, 255*/
		BF_encrypt_0_58 = (BF_encrypt_0_57 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %58 = and i32 %57, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_58_reg <= BF_encrypt_0_58;
		if (start == 1'b0 && ^(BF_encrypt_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_58_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %59 = or i32 %58, 256*/
		BF_encrypt_0_59 = (BF_encrypt_0_58 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %59 = or i32 %58, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_59_reg <= BF_encrypt_0_59;
		if (start == 1'b0 && ^(BF_encrypt_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_59_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %60 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %59*/
		BF_encrypt_0_60 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_59_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %60 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %59*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_19)) begin
		BF_encrypt_0_60_reg <= BF_encrypt_0_60;
		if (start == 1'b0 && ^(BF_encrypt_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_60_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
		BF_encrypt_0_61 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_21)) begin
		BF_encrypt_0_61_reg <= BF_encrypt_0_61;
		if (start == 1'b0 && ^(BF_encrypt_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_61_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %62 = add i32 %61, %56*/
		BF_encrypt_0_62 = (BF_encrypt_0_61 + BF_encrypt_0_56);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %62 = add i32 %61, %56*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_21)) begin
		BF_encrypt_0_62_reg <= BF_encrypt_0_62;
		if (start == 1'b0 && ^(BF_encrypt_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_62_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %63 = lshr i32 %51, 8*/
		BF_encrypt_0_63 = (BF_encrypt_0_51 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %63 = lshr i32 %51, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_63_reg <= BF_encrypt_0_63;
		if (start == 1'b0 && ^(BF_encrypt_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_63_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %64 = and i32 %63, 255*/
		BF_encrypt_0_64 = (BF_encrypt_0_63 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %64 = and i32 %63, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_64_reg <= BF_encrypt_0_64;
		if (start == 1'b0 && ^(BF_encrypt_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_64_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %65 = or i32 %64, 512*/
		BF_encrypt_0_65 = (BF_encrypt_0_64 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %65 = or i32 %64, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_65_reg <= BF_encrypt_0_65;
		if (start == 1'b0 && ^(BF_encrypt_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_65_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %66 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %65*/
		BF_encrypt_0_66 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_65_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %66 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %65*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_19)) begin
		BF_encrypt_0_66_reg <= BF_encrypt_0_66;
		if (start == 1'b0 && ^(BF_encrypt_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_66_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %67 = load i32* %66, align 4, !tbaa !1*/
		BF_encrypt_0_67 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %67 = load i32* %66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_67_reg <= BF_encrypt_0_67;
		if (start == 1'b0 && ^(BF_encrypt_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_67_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %68 = xor i32 %62, %67*/
		BF_encrypt_0_68 = (BF_encrypt_0_62_reg ^ BF_encrypt_0_67);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %68 = xor i32 %62, %67*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_68_reg <= BF_encrypt_0_68;
		if (start == 1'b0 && ^(BF_encrypt_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_68_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %69 = and i32 %51, 255*/
		BF_encrypt_0_69 = (BF_encrypt_0_51 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %69 = and i32 %51, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_69_reg <= BF_encrypt_0_69;
		if (start == 1'b0 && ^(BF_encrypt_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_69_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %70 = or i32 %69, 768*/
		BF_encrypt_0_70 = (BF_encrypt_0_69 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %70 = or i32 %69, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_70_reg <= BF_encrypt_0_70;
		if (start == 1'b0 && ^(BF_encrypt_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_70_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %71 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %70*/
		BF_encrypt_0_71 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_70_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %71 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %70*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_19)) begin
		BF_encrypt_0_71_reg <= BF_encrypt_0_71;
		if (start == 1'b0 && ^(BF_encrypt_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_71_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %72 = load i32* %71, align 4, !tbaa !1*/
		BF_encrypt_0_72 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %72 = load i32* %71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_72_reg <= BF_encrypt_0_72;
		if (start == 1'b0 && ^(BF_encrypt_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_72_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %73 = add i32 %68, %72*/
		BF_encrypt_0_73 = (BF_encrypt_0_68 + BF_encrypt_0_72);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %73 = add i32 %68, %72*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_73_reg <= BF_encrypt_0_73;
		if (start == 1'b0 && ^(BF_encrypt_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_73_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %74 = xor i32 %53, %73*/
		BF_encrypt_0_74 = (BF_encrypt_0_53_reg ^ BF_encrypt_0_73);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %74 = xor i32 %53, %73*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_74_reg <= BF_encrypt_0_74;
		if (start == 1'b0 && ^(BF_encrypt_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_74_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %75 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 4), align 4, !tbaa !1*/
		BF_encrypt_0_75 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %75 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_5)) begin
		BF_encrypt_0_75_reg <= BF_encrypt_0_75;
		if (start == 1'b0 && ^(BF_encrypt_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_75_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %76 = xor i32 %75, %51*/
		BF_encrypt_0_76 = (BF_encrypt_0_75_reg ^ BF_encrypt_0_51);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %76 = xor i32 %75, %51*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_18)) begin
		BF_encrypt_0_76_reg <= BF_encrypt_0_76;
		if (start == 1'b0 && ^(BF_encrypt_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_76_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %77 = lshr i32 %74, 24*/
		BF_encrypt_0_77 = (BF_encrypt_0_74 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %77 = lshr i32 %74, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_77_reg <= BF_encrypt_0_77;
		if (start == 1'b0 && ^(BF_encrypt_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_77_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %78 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %77*/
		BF_encrypt_0_78 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_77_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %78 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %77*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_23)) begin
		BF_encrypt_0_78_reg <= BF_encrypt_0_78;
		if (start == 1'b0 && ^(BF_encrypt_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_78_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %79 = load i32* %78, align 4, !tbaa !1*/
		BF_encrypt_0_79 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %79 = load i32* %78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_25)) begin
		BF_encrypt_0_79_reg <= BF_encrypt_0_79;
		if (start == 1'b0 && ^(BF_encrypt_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_79_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %80 = lshr i32 %74, 16*/
		BF_encrypt_0_80 = (BF_encrypt_0_74 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %80 = lshr i32 %74, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_80_reg <= BF_encrypt_0_80;
		if (start == 1'b0 && ^(BF_encrypt_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_80_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %81 = and i32 %80, 255*/
		BF_encrypt_0_81 = (BF_encrypt_0_80 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %81 = and i32 %80, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_81_reg <= BF_encrypt_0_81;
		if (start == 1'b0 && ^(BF_encrypt_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_81_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %82 = or i32 %81, 256*/
		BF_encrypt_0_82 = (BF_encrypt_0_81 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %82 = or i32 %81, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_82_reg <= BF_encrypt_0_82;
		if (start == 1'b0 && ^(BF_encrypt_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_82_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %83 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %82*/
		BF_encrypt_0_83 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_82_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %83 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %82*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_23)) begin
		BF_encrypt_0_83_reg <= BF_encrypt_0_83;
		if (start == 1'b0 && ^(BF_encrypt_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_83_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %84 = load i32* %83, align 4, !tbaa !1*/
		BF_encrypt_0_84 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %84 = load i32* %83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_25)) begin
		BF_encrypt_0_84_reg <= BF_encrypt_0_84;
		if (start == 1'b0 && ^(BF_encrypt_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_84_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %85 = add i32 %84, %79*/
		BF_encrypt_0_85 = (BF_encrypt_0_84 + BF_encrypt_0_79);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %85 = add i32 %84, %79*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_25)) begin
		BF_encrypt_0_85_reg <= BF_encrypt_0_85;
		if (start == 1'b0 && ^(BF_encrypt_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_85_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %86 = lshr i32 %74, 8*/
		BF_encrypt_0_86 = (BF_encrypt_0_74 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %86 = lshr i32 %74, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_86_reg <= BF_encrypt_0_86;
		if (start == 1'b0 && ^(BF_encrypt_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_86_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %87 = and i32 %86, 255*/
		BF_encrypt_0_87 = (BF_encrypt_0_86 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %87 = and i32 %86, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_87_reg <= BF_encrypt_0_87;
		if (start == 1'b0 && ^(BF_encrypt_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_87_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %88 = or i32 %87, 512*/
		BF_encrypt_0_88 = (BF_encrypt_0_87 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %88 = or i32 %87, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_88_reg <= BF_encrypt_0_88;
		if (start == 1'b0 && ^(BF_encrypt_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_88_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %89 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %88*/
		BF_encrypt_0_89 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_88_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %89 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %88*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_23)) begin
		BF_encrypt_0_89_reg <= BF_encrypt_0_89;
		if (start == 1'b0 && ^(BF_encrypt_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_89_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
		BF_encrypt_0_90 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_90_reg <= BF_encrypt_0_90;
		if (start == 1'b0 && ^(BF_encrypt_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_90_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %91 = xor i32 %85, %90*/
		BF_encrypt_0_91 = (BF_encrypt_0_85_reg ^ BF_encrypt_0_90);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %91 = xor i32 %85, %90*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_91_reg <= BF_encrypt_0_91;
		if (start == 1'b0 && ^(BF_encrypt_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_91_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %92 = and i32 %74, 255*/
		BF_encrypt_0_92 = (BF_encrypt_0_74 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %92 = and i32 %74, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_92_reg <= BF_encrypt_0_92;
		if (start == 1'b0 && ^(BF_encrypt_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_92_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %93 = or i32 %92, 768*/
		BF_encrypt_0_93 = (BF_encrypt_0_92 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %93 = or i32 %92, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_93_reg <= BF_encrypt_0_93;
		if (start == 1'b0 && ^(BF_encrypt_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_93_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %94 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %93*/
		BF_encrypt_0_94 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_93_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %94 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %93*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_23)) begin
		BF_encrypt_0_94_reg <= BF_encrypt_0_94;
		if (start == 1'b0 && ^(BF_encrypt_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_94_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %95 = load i32* %94, align 4, !tbaa !1*/
		BF_encrypt_0_95 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %95 = load i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_95_reg <= BF_encrypt_0_95;
		if (start == 1'b0 && ^(BF_encrypt_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_95_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %96 = add i32 %91, %95*/
		BF_encrypt_0_96 = (BF_encrypt_0_91 + BF_encrypt_0_95);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %96 = add i32 %91, %95*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_96_reg <= BF_encrypt_0_96;
		if (start == 1'b0 && ^(BF_encrypt_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_96_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %97 = xor i32 %76, %96*/
		BF_encrypt_0_97 = (BF_encrypt_0_76_reg ^ BF_encrypt_0_96);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %97 = xor i32 %76, %96*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_97_reg <= BF_encrypt_0_97;
		if (start == 1'b0 && ^(BF_encrypt_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_97_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %98 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 5), align 4, !tbaa !1*/
		BF_encrypt_0_98 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %98 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_6)) begin
		BF_encrypt_0_98_reg <= BF_encrypt_0_98;
		if (start == 1'b0 && ^(BF_encrypt_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_98_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %99 = xor i32 %98, %74*/
		BF_encrypt_0_99 = (BF_encrypt_0_98_reg ^ BF_encrypt_0_74);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %99 = xor i32 %98, %74*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_22)) begin
		BF_encrypt_0_99_reg <= BF_encrypt_0_99;
		if (start == 1'b0 && ^(BF_encrypt_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_99_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %100 = lshr i32 %97, 24*/
		BF_encrypt_0_100 = (BF_encrypt_0_97 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %100 = lshr i32 %97, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_100_reg <= BF_encrypt_0_100;
		if (start == 1'b0 && ^(BF_encrypt_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_100_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %101 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %100*/
		BF_encrypt_0_101 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_100_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %101 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %100*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_27)) begin
		BF_encrypt_0_101_reg <= BF_encrypt_0_101;
		if (start == 1'b0 && ^(BF_encrypt_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_101_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %102 = load i32* %101, align 4, !tbaa !1*/
		BF_encrypt_0_102 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %102 = load i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_29)) begin
		BF_encrypt_0_102_reg <= BF_encrypt_0_102;
		if (start == 1'b0 && ^(BF_encrypt_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_102_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %103 = lshr i32 %97, 16*/
		BF_encrypt_0_103 = (BF_encrypt_0_97 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %103 = lshr i32 %97, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_103_reg <= BF_encrypt_0_103;
		if (start == 1'b0 && ^(BF_encrypt_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_103_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %104 = and i32 %103, 255*/
		BF_encrypt_0_104 = (BF_encrypt_0_103 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %104 = and i32 %103, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_104_reg <= BF_encrypt_0_104;
		if (start == 1'b0 && ^(BF_encrypt_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_104_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %105 = or i32 %104, 256*/
		BF_encrypt_0_105 = (BF_encrypt_0_104 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %105 = or i32 %104, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_105_reg <= BF_encrypt_0_105;
		if (start == 1'b0 && ^(BF_encrypt_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_105_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %106 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %105*/
		BF_encrypt_0_106 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_105_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %106 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %105*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_27)) begin
		BF_encrypt_0_106_reg <= BF_encrypt_0_106;
		if (start == 1'b0 && ^(BF_encrypt_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_106_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
		BF_encrypt_0_107 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_29)) begin
		BF_encrypt_0_107_reg <= BF_encrypt_0_107;
		if (start == 1'b0 && ^(BF_encrypt_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_107_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %108 = add i32 %107, %102*/
		BF_encrypt_0_108 = (BF_encrypt_0_107 + BF_encrypt_0_102);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %108 = add i32 %107, %102*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_29)) begin
		BF_encrypt_0_108_reg <= BF_encrypt_0_108;
		if (start == 1'b0 && ^(BF_encrypt_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_108_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %109 = lshr i32 %97, 8*/
		BF_encrypt_0_109 = (BF_encrypt_0_97 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %109 = lshr i32 %97, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_109_reg <= BF_encrypt_0_109;
		if (start == 1'b0 && ^(BF_encrypt_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_109_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %110 = and i32 %109, 255*/
		BF_encrypt_0_110 = (BF_encrypt_0_109 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %110 = and i32 %109, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_110_reg <= BF_encrypt_0_110;
		if (start == 1'b0 && ^(BF_encrypt_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_110_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %111 = or i32 %110, 512*/
		BF_encrypt_0_111 = (BF_encrypt_0_110 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %111 = or i32 %110, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_111_reg <= BF_encrypt_0_111;
		if (start == 1'b0 && ^(BF_encrypt_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_111_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %112 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %111*/
		BF_encrypt_0_112 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_111_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %112 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %111*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_27)) begin
		BF_encrypt_0_112_reg <= BF_encrypt_0_112;
		if (start == 1'b0 && ^(BF_encrypt_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_112_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
		BF_encrypt_0_113 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_113_reg <= BF_encrypt_0_113;
		if (start == 1'b0 && ^(BF_encrypt_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_113_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %114 = xor i32 %108, %113*/
		BF_encrypt_0_114 = (BF_encrypt_0_108_reg ^ BF_encrypt_0_113);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %114 = xor i32 %108, %113*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_114_reg <= BF_encrypt_0_114;
		if (start == 1'b0 && ^(BF_encrypt_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_114_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %115 = and i32 %97, 255*/
		BF_encrypt_0_115 = (BF_encrypt_0_97 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %115 = and i32 %97, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_115_reg <= BF_encrypt_0_115;
		if (start == 1'b0 && ^(BF_encrypt_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_115_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %116 = or i32 %115, 768*/
		BF_encrypt_0_116 = (BF_encrypt_0_115 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %116 = or i32 %115, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_116_reg <= BF_encrypt_0_116;
		if (start == 1'b0 && ^(BF_encrypt_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_116_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %117 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %116*/
		BF_encrypt_0_117 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_116_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %117 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %116*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_27)) begin
		BF_encrypt_0_117_reg <= BF_encrypt_0_117;
		if (start == 1'b0 && ^(BF_encrypt_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_117_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %118 = load i32* %117, align 4, !tbaa !1*/
		BF_encrypt_0_118 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %118 = load i32* %117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_118_reg <= BF_encrypt_0_118;
		if (start == 1'b0 && ^(BF_encrypt_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_118_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %119 = add i32 %114, %118*/
		BF_encrypt_0_119 = (BF_encrypt_0_114 + BF_encrypt_0_118);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %119 = add i32 %114, %118*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_119_reg <= BF_encrypt_0_119;
		if (start == 1'b0 && ^(BF_encrypt_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_119_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %120 = xor i32 %99, %119*/
		BF_encrypt_0_120 = (BF_encrypt_0_99_reg ^ BF_encrypt_0_119);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %120 = xor i32 %99, %119*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_120_reg <= BF_encrypt_0_120;
		if (start == 1'b0 && ^(BF_encrypt_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_120_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %121 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 6), align 4, !tbaa !1*/
		BF_encrypt_0_121 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %121 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_6)) begin
		BF_encrypt_0_121_reg <= BF_encrypt_0_121;
		if (start == 1'b0 && ^(BF_encrypt_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_121_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %122 = xor i32 %121, %97*/
		BF_encrypt_0_122 = (BF_encrypt_0_121_reg ^ BF_encrypt_0_97);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %122 = xor i32 %121, %97*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_26)) begin
		BF_encrypt_0_122_reg <= BF_encrypt_0_122;
		if (start == 1'b0 && ^(BF_encrypt_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_122_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %123 = lshr i32 %120, 24*/
		BF_encrypt_0_123 = (BF_encrypt_0_120 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %123 = lshr i32 %120, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_123_reg <= BF_encrypt_0_123;
		if (start == 1'b0 && ^(BF_encrypt_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_123_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %124 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %123*/
		BF_encrypt_0_124 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_123_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %124 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %123*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_31)) begin
		BF_encrypt_0_124_reg <= BF_encrypt_0_124;
		if (start == 1'b0 && ^(BF_encrypt_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_124_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
		BF_encrypt_0_125 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_33)) begin
		BF_encrypt_0_125_reg <= BF_encrypt_0_125;
		if (start == 1'b0 && ^(BF_encrypt_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_125_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %126 = lshr i32 %120, 16*/
		BF_encrypt_0_126 = (BF_encrypt_0_120 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %126 = lshr i32 %120, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_126_reg <= BF_encrypt_0_126;
		if (start == 1'b0 && ^(BF_encrypt_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_126_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %127 = and i32 %126, 255*/
		BF_encrypt_0_127 = (BF_encrypt_0_126 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %127 = and i32 %126, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_127_reg <= BF_encrypt_0_127;
		if (start == 1'b0 && ^(BF_encrypt_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_127_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %128 = or i32 %127, 256*/
		BF_encrypt_0_128 = (BF_encrypt_0_127 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %128 = or i32 %127, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_128_reg <= BF_encrypt_0_128;
		if (start == 1'b0 && ^(BF_encrypt_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_128_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %129 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %128*/
		BF_encrypt_0_129 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_128_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %129 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %128*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_31)) begin
		BF_encrypt_0_129_reg <= BF_encrypt_0_129;
		if (start == 1'b0 && ^(BF_encrypt_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_129_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
		BF_encrypt_0_130 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_33)) begin
		BF_encrypt_0_130_reg <= BF_encrypt_0_130;
		if (start == 1'b0 && ^(BF_encrypt_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_130_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %131 = add i32 %130, %125*/
		BF_encrypt_0_131 = (BF_encrypt_0_130 + BF_encrypt_0_125);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %131 = add i32 %130, %125*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_33)) begin
		BF_encrypt_0_131_reg <= BF_encrypt_0_131;
		if (start == 1'b0 && ^(BF_encrypt_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_131_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %132 = lshr i32 %120, 8*/
		BF_encrypt_0_132 = (BF_encrypt_0_120 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %132 = lshr i32 %120, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_132_reg <= BF_encrypt_0_132;
		if (start == 1'b0 && ^(BF_encrypt_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_132_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %133 = and i32 %132, 255*/
		BF_encrypt_0_133 = (BF_encrypt_0_132 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %133 = and i32 %132, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_133_reg <= BF_encrypt_0_133;
		if (start == 1'b0 && ^(BF_encrypt_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_133_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %134 = or i32 %133, 512*/
		BF_encrypt_0_134 = (BF_encrypt_0_133 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %134 = or i32 %133, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_134_reg <= BF_encrypt_0_134;
		if (start == 1'b0 && ^(BF_encrypt_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_134_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %135 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %134*/
		BF_encrypt_0_135 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_134_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %135 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %134*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_31)) begin
		BF_encrypt_0_135_reg <= BF_encrypt_0_135;
		if (start == 1'b0 && ^(BF_encrypt_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_135_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
		BF_encrypt_0_136 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_136_reg <= BF_encrypt_0_136;
		if (start == 1'b0 && ^(BF_encrypt_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_136_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %137 = xor i32 %131, %136*/
		BF_encrypt_0_137 = (BF_encrypt_0_131_reg ^ BF_encrypt_0_136);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %137 = xor i32 %131, %136*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_137_reg <= BF_encrypt_0_137;
		if (start == 1'b0 && ^(BF_encrypt_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_137_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %138 = and i32 %120, 255*/
		BF_encrypt_0_138 = (BF_encrypt_0_120 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %138 = and i32 %120, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_138_reg <= BF_encrypt_0_138;
		if (start == 1'b0 && ^(BF_encrypt_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_138_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %139 = or i32 %138, 768*/
		BF_encrypt_0_139 = (BF_encrypt_0_138 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %139 = or i32 %138, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_139_reg <= BF_encrypt_0_139;
		if (start == 1'b0 && ^(BF_encrypt_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_139_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %140 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %139*/
		BF_encrypt_0_140 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_139_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %140 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %139*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_31)) begin
		BF_encrypt_0_140_reg <= BF_encrypt_0_140;
		if (start == 1'b0 && ^(BF_encrypt_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_140_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %141 = load i32* %140, align 4, !tbaa !1*/
		BF_encrypt_0_141 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %141 = load i32* %140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_141_reg <= BF_encrypt_0_141;
		if (start == 1'b0 && ^(BF_encrypt_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_141_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %142 = add i32 %137, %141*/
		BF_encrypt_0_142 = (BF_encrypt_0_137 + BF_encrypt_0_141);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %142 = add i32 %137, %141*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_142_reg <= BF_encrypt_0_142;
		if (start == 1'b0 && ^(BF_encrypt_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_142_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %143 = xor i32 %122, %142*/
		BF_encrypt_0_143 = (BF_encrypt_0_122_reg ^ BF_encrypt_0_142);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %143 = xor i32 %122, %142*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_143_reg <= BF_encrypt_0_143;
		if (start == 1'b0 && ^(BF_encrypt_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_143_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %144 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 7), align 4, !tbaa !1*/
		BF_encrypt_0_144 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %144 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_7)) begin
		BF_encrypt_0_144_reg <= BF_encrypt_0_144;
		if (start == 1'b0 && ^(BF_encrypt_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_144_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %145 = xor i32 %144, %120*/
		BF_encrypt_0_145 = (BF_encrypt_0_144_reg ^ BF_encrypt_0_120);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %145 = xor i32 %144, %120*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_30)) begin
		BF_encrypt_0_145_reg <= BF_encrypt_0_145;
		if (start == 1'b0 && ^(BF_encrypt_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_145_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %146 = lshr i32 %143, 24*/
		BF_encrypt_0_146 = (BF_encrypt_0_143 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %146 = lshr i32 %143, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_146_reg <= BF_encrypt_0_146;
		if (start == 1'b0 && ^(BF_encrypt_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_146_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %147 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %146*/
		BF_encrypt_0_147 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_146_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %147 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %146*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_35)) begin
		BF_encrypt_0_147_reg <= BF_encrypt_0_147;
		if (start == 1'b0 && ^(BF_encrypt_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_147_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
		BF_encrypt_0_148 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_37)) begin
		BF_encrypt_0_148_reg <= BF_encrypt_0_148;
		if (start == 1'b0 && ^(BF_encrypt_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_148_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %149 = lshr i32 %143, 16*/
		BF_encrypt_0_149 = (BF_encrypt_0_143 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %149 = lshr i32 %143, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_149_reg <= BF_encrypt_0_149;
		if (start == 1'b0 && ^(BF_encrypt_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_149_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %150 = and i32 %149, 255*/
		BF_encrypt_0_150 = (BF_encrypt_0_149 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %150 = and i32 %149, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_150_reg <= BF_encrypt_0_150;
		if (start == 1'b0 && ^(BF_encrypt_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_150_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %151 = or i32 %150, 256*/
		BF_encrypt_0_151 = (BF_encrypt_0_150 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %151 = or i32 %150, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_151_reg <= BF_encrypt_0_151;
		if (start == 1'b0 && ^(BF_encrypt_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_151_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %152 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %151*/
		BF_encrypt_0_152 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_151_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %152 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %151*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_35)) begin
		BF_encrypt_0_152_reg <= BF_encrypt_0_152;
		if (start == 1'b0 && ^(BF_encrypt_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_152_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %153 = load i32* %152, align 4, !tbaa !1*/
		BF_encrypt_0_153 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %153 = load i32* %152, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_37)) begin
		BF_encrypt_0_153_reg <= BF_encrypt_0_153;
		if (start == 1'b0 && ^(BF_encrypt_0_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_153_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %154 = add i32 %153, %148*/
		BF_encrypt_0_154 = (BF_encrypt_0_153 + BF_encrypt_0_148);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %154 = add i32 %153, %148*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_37)) begin
		BF_encrypt_0_154_reg <= BF_encrypt_0_154;
		if (start == 1'b0 && ^(BF_encrypt_0_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_154_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %155 = lshr i32 %143, 8*/
		BF_encrypt_0_155 = (BF_encrypt_0_143 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %155 = lshr i32 %143, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_155_reg <= BF_encrypt_0_155;
		if (start == 1'b0 && ^(BF_encrypt_0_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_155_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %156 = and i32 %155, 255*/
		BF_encrypt_0_156 = (BF_encrypt_0_155 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %156 = and i32 %155, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_156_reg <= BF_encrypt_0_156;
		if (start == 1'b0 && ^(BF_encrypt_0_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_156_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %157 = or i32 %156, 512*/
		BF_encrypt_0_157 = (BF_encrypt_0_156 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %157 = or i32 %156, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_157_reg <= BF_encrypt_0_157;
		if (start == 1'b0 && ^(BF_encrypt_0_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_157_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %158 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %157*/
		BF_encrypt_0_158 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_157_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %158 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %157*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_35)) begin
		BF_encrypt_0_158_reg <= BF_encrypt_0_158;
		if (start == 1'b0 && ^(BF_encrypt_0_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_158_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %159 = load i32* %158, align 4, !tbaa !1*/
		BF_encrypt_0_159 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %159 = load i32* %158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_159_reg <= BF_encrypt_0_159;
		if (start == 1'b0 && ^(BF_encrypt_0_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_159_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %160 = xor i32 %154, %159*/
		BF_encrypt_0_160 = (BF_encrypt_0_154_reg ^ BF_encrypt_0_159);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %160 = xor i32 %154, %159*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_160_reg <= BF_encrypt_0_160;
		if (start == 1'b0 && ^(BF_encrypt_0_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_160_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %161 = and i32 %143, 255*/
		BF_encrypt_0_161 = (BF_encrypt_0_143 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %161 = and i32 %143, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_161_reg <= BF_encrypt_0_161;
		if (start == 1'b0 && ^(BF_encrypt_0_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_161_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %162 = or i32 %161, 768*/
		BF_encrypt_0_162 = (BF_encrypt_0_161 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %162 = or i32 %161, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_162_reg <= BF_encrypt_0_162;
		if (start == 1'b0 && ^(BF_encrypt_0_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_162_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %163 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %162*/
		BF_encrypt_0_163 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_162_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %163 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %162*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_35)) begin
		BF_encrypt_0_163_reg <= BF_encrypt_0_163;
		if (start == 1'b0 && ^(BF_encrypt_0_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_163_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
		BF_encrypt_0_164 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_164_reg <= BF_encrypt_0_164;
		if (start == 1'b0 && ^(BF_encrypt_0_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_164_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %165 = add i32 %160, %164*/
		BF_encrypt_0_165 = (BF_encrypt_0_160 + BF_encrypt_0_164);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %165 = add i32 %160, %164*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_165_reg <= BF_encrypt_0_165;
		if (start == 1'b0 && ^(BF_encrypt_0_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_165_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %166 = xor i32 %145, %165*/
		BF_encrypt_0_166 = (BF_encrypt_0_145_reg ^ BF_encrypt_0_165);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %166 = xor i32 %145, %165*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_166_reg <= BF_encrypt_0_166;
		if (start == 1'b0 && ^(BF_encrypt_0_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_166_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %167 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 8), align 4, !tbaa !1*/
		BF_encrypt_0_167 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %167 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_7)) begin
		BF_encrypt_0_167_reg <= BF_encrypt_0_167;
		if (start == 1'b0 && ^(BF_encrypt_0_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_167_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %168 = xor i32 %167, %143*/
		BF_encrypt_0_168 = (BF_encrypt_0_167_reg ^ BF_encrypt_0_143);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %168 = xor i32 %167, %143*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_34)) begin
		BF_encrypt_0_168_reg <= BF_encrypt_0_168;
		if (start == 1'b0 && ^(BF_encrypt_0_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_168_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %169 = lshr i32 %166, 24*/
		BF_encrypt_0_169 = (BF_encrypt_0_166 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %169 = lshr i32 %166, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_169_reg <= BF_encrypt_0_169;
		if (start == 1'b0 && ^(BF_encrypt_0_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_169_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %170 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %169*/
		BF_encrypt_0_170 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_169_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %170 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %169*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_39)) begin
		BF_encrypt_0_170_reg <= BF_encrypt_0_170;
		if (start == 1'b0 && ^(BF_encrypt_0_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_170_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %171 = load i32* %170, align 4, !tbaa !1*/
		BF_encrypt_0_171 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %171 = load i32* %170, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_41)) begin
		BF_encrypt_0_171_reg <= BF_encrypt_0_171;
		if (start == 1'b0 && ^(BF_encrypt_0_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_171_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %172 = lshr i32 %166, 16*/
		BF_encrypt_0_172 = (BF_encrypt_0_166 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %172 = lshr i32 %166, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_172_reg <= BF_encrypt_0_172;
		if (start == 1'b0 && ^(BF_encrypt_0_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_172_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %173 = and i32 %172, 255*/
		BF_encrypt_0_173 = (BF_encrypt_0_172 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %173 = and i32 %172, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_173_reg <= BF_encrypt_0_173;
		if (start == 1'b0 && ^(BF_encrypt_0_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_173_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %174 = or i32 %173, 256*/
		BF_encrypt_0_174 = (BF_encrypt_0_173 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %174 = or i32 %173, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_174_reg <= BF_encrypt_0_174;
		if (start == 1'b0 && ^(BF_encrypt_0_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_174_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %175 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %174*/
		BF_encrypt_0_175 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_174_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %175 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %174*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_39)) begin
		BF_encrypt_0_175_reg <= BF_encrypt_0_175;
		if (start == 1'b0 && ^(BF_encrypt_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_175_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
		BF_encrypt_0_176 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_41)) begin
		BF_encrypt_0_176_reg <= BF_encrypt_0_176;
		if (start == 1'b0 && ^(BF_encrypt_0_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_176_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %177 = add i32 %176, %171*/
		BF_encrypt_0_177 = (BF_encrypt_0_176 + BF_encrypt_0_171);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %177 = add i32 %176, %171*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_41)) begin
		BF_encrypt_0_177_reg <= BF_encrypt_0_177;
		if (start == 1'b0 && ^(BF_encrypt_0_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_177_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %178 = lshr i32 %166, 8*/
		BF_encrypt_0_178 = (BF_encrypt_0_166 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %178 = lshr i32 %166, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_178_reg <= BF_encrypt_0_178;
		if (start == 1'b0 && ^(BF_encrypt_0_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_178_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %179 = and i32 %178, 255*/
		BF_encrypt_0_179 = (BF_encrypt_0_178 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %179 = and i32 %178, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_179_reg <= BF_encrypt_0_179;
		if (start == 1'b0 && ^(BF_encrypt_0_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_179_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %180 = or i32 %179, 512*/
		BF_encrypt_0_180 = (BF_encrypt_0_179 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %180 = or i32 %179, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_180_reg <= BF_encrypt_0_180;
		if (start == 1'b0 && ^(BF_encrypt_0_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_180_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %181 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %180*/
		BF_encrypt_0_181 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_180_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %181 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %180*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_39)) begin
		BF_encrypt_0_181_reg <= BF_encrypt_0_181;
		if (start == 1'b0 && ^(BF_encrypt_0_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_181_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
		BF_encrypt_0_182 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_182_reg <= BF_encrypt_0_182;
		if (start == 1'b0 && ^(BF_encrypt_0_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_182_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %183 = xor i32 %177, %182*/
		BF_encrypt_0_183 = (BF_encrypt_0_177_reg ^ BF_encrypt_0_182);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %183 = xor i32 %177, %182*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_183_reg <= BF_encrypt_0_183;
		if (start == 1'b0 && ^(BF_encrypt_0_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_183_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %184 = and i32 %166, 255*/
		BF_encrypt_0_184 = (BF_encrypt_0_166 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %184 = and i32 %166, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_184_reg <= BF_encrypt_0_184;
		if (start == 1'b0 && ^(BF_encrypt_0_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_184_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %185 = or i32 %184, 768*/
		BF_encrypt_0_185 = (BF_encrypt_0_184 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %185 = or i32 %184, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_185_reg <= BF_encrypt_0_185;
		if (start == 1'b0 && ^(BF_encrypt_0_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_185_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %186 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %185*/
		BF_encrypt_0_186 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_185_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %186 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %185*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_39)) begin
		BF_encrypt_0_186_reg <= BF_encrypt_0_186;
		if (start == 1'b0 && ^(BF_encrypt_0_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_186_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
		BF_encrypt_0_187 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_187_reg <= BF_encrypt_0_187;
		if (start == 1'b0 && ^(BF_encrypt_0_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_187_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %188 = add i32 %183, %187*/
		BF_encrypt_0_188 = (BF_encrypt_0_183 + BF_encrypt_0_187);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %188 = add i32 %183, %187*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_188_reg <= BF_encrypt_0_188;
		if (start == 1'b0 && ^(BF_encrypt_0_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_188_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %189 = xor i32 %168, %188*/
		BF_encrypt_0_189 = (BF_encrypt_0_168_reg ^ BF_encrypt_0_188);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %189 = xor i32 %168, %188*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_189_reg <= BF_encrypt_0_189;
		if (start == 1'b0 && ^(BF_encrypt_0_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_189_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %190 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 9), align 4, !tbaa !1*/
		BF_encrypt_0_190 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %190 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_8)) begin
		BF_encrypt_0_190_reg <= BF_encrypt_0_190;
		if (start == 1'b0 && ^(BF_encrypt_0_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_190_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %191 = xor i32 %190, %166*/
		BF_encrypt_0_191 = (BF_encrypt_0_190_reg ^ BF_encrypt_0_166);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %191 = xor i32 %190, %166*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_38)) begin
		BF_encrypt_0_191_reg <= BF_encrypt_0_191;
		if (start == 1'b0 && ^(BF_encrypt_0_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_191_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %192 = lshr i32 %189, 24*/
		BF_encrypt_0_192 = (BF_encrypt_0_189 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %192 = lshr i32 %189, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_192_reg <= BF_encrypt_0_192;
		if (start == 1'b0 && ^(BF_encrypt_0_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_192_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %193 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %192*/
		BF_encrypt_0_193 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_192_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %193 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %192*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_43)) begin
		BF_encrypt_0_193_reg <= BF_encrypt_0_193;
		if (start == 1'b0 && ^(BF_encrypt_0_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_193_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %194 = load i32* %193, align 4, !tbaa !1*/
		BF_encrypt_0_194 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %194 = load i32* %193, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_45)) begin
		BF_encrypt_0_194_reg <= BF_encrypt_0_194;
		if (start == 1'b0 && ^(BF_encrypt_0_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_194_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %195 = lshr i32 %189, 16*/
		BF_encrypt_0_195 = (BF_encrypt_0_189 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %195 = lshr i32 %189, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_195_reg <= BF_encrypt_0_195;
		if (start == 1'b0 && ^(BF_encrypt_0_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_195_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %196 = and i32 %195, 255*/
		BF_encrypt_0_196 = (BF_encrypt_0_195 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %196 = and i32 %195, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_196_reg <= BF_encrypt_0_196;
		if (start == 1'b0 && ^(BF_encrypt_0_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_196_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %197 = or i32 %196, 256*/
		BF_encrypt_0_197 = (BF_encrypt_0_196 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %197 = or i32 %196, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_197_reg <= BF_encrypt_0_197;
		if (start == 1'b0 && ^(BF_encrypt_0_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_197_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %198 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %197*/
		BF_encrypt_0_198 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_197_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %198 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %197*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_43)) begin
		BF_encrypt_0_198_reg <= BF_encrypt_0_198;
		if (start == 1'b0 && ^(BF_encrypt_0_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_198_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %199 = load i32* %198, align 4, !tbaa !1*/
		BF_encrypt_0_199 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %199 = load i32* %198, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_45)) begin
		BF_encrypt_0_199_reg <= BF_encrypt_0_199;
		if (start == 1'b0 && ^(BF_encrypt_0_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_199_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %200 = add i32 %199, %194*/
		BF_encrypt_0_200 = (BF_encrypt_0_199 + BF_encrypt_0_194);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %200 = add i32 %199, %194*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_45)) begin
		BF_encrypt_0_200_reg <= BF_encrypt_0_200;
		if (start == 1'b0 && ^(BF_encrypt_0_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_200_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %201 = lshr i32 %189, 8*/
		BF_encrypt_0_201 = (BF_encrypt_0_189 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %201 = lshr i32 %189, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_201_reg <= BF_encrypt_0_201;
		if (start == 1'b0 && ^(BF_encrypt_0_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_201_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %202 = and i32 %201, 255*/
		BF_encrypt_0_202 = (BF_encrypt_0_201 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %202 = and i32 %201, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_202_reg <= BF_encrypt_0_202;
		if (start == 1'b0 && ^(BF_encrypt_0_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_202_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %203 = or i32 %202, 512*/
		BF_encrypt_0_203 = (BF_encrypt_0_202 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %203 = or i32 %202, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_203_reg <= BF_encrypt_0_203;
		if (start == 1'b0 && ^(BF_encrypt_0_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_203_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %204 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %203*/
		BF_encrypt_0_204 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_203_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %204 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %203*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_43)) begin
		BF_encrypt_0_204_reg <= BF_encrypt_0_204;
		if (start == 1'b0 && ^(BF_encrypt_0_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_204_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %205 = load i32* %204, align 4, !tbaa !1*/
		BF_encrypt_0_205 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %205 = load i32* %204, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_205_reg <= BF_encrypt_0_205;
		if (start == 1'b0 && ^(BF_encrypt_0_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_205_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %206 = xor i32 %200, %205*/
		BF_encrypt_0_206 = (BF_encrypt_0_200_reg ^ BF_encrypt_0_205);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %206 = xor i32 %200, %205*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_206_reg <= BF_encrypt_0_206;
		if (start == 1'b0 && ^(BF_encrypt_0_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_206_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %207 = and i32 %189, 255*/
		BF_encrypt_0_207 = (BF_encrypt_0_189 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %207 = and i32 %189, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_207_reg <= BF_encrypt_0_207;
		if (start == 1'b0 && ^(BF_encrypt_0_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_207_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %208 = or i32 %207, 768*/
		BF_encrypt_0_208 = (BF_encrypt_0_207 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %208 = or i32 %207, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_208_reg <= BF_encrypt_0_208;
		if (start == 1'b0 && ^(BF_encrypt_0_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_208_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %209 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %208*/
		BF_encrypt_0_209 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_208_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %209 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %208*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_43)) begin
		BF_encrypt_0_209_reg <= BF_encrypt_0_209;
		if (start == 1'b0 && ^(BF_encrypt_0_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_209_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
		BF_encrypt_0_210 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_210_reg <= BF_encrypt_0_210;
		if (start == 1'b0 && ^(BF_encrypt_0_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_210_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %211 = add i32 %206, %210*/
		BF_encrypt_0_211 = (BF_encrypt_0_206 + BF_encrypt_0_210);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %211 = add i32 %206, %210*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_211_reg <= BF_encrypt_0_211;
		if (start == 1'b0 && ^(BF_encrypt_0_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_211_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %212 = xor i32 %191, %211*/
		BF_encrypt_0_212 = (BF_encrypt_0_191_reg ^ BF_encrypt_0_211);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %212 = xor i32 %191, %211*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_212_reg <= BF_encrypt_0_212;
		if (start == 1'b0 && ^(BF_encrypt_0_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_212_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %213 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 10), align 4, !tbaa !1*/
		BF_encrypt_0_213 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %213 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_8)) begin
		BF_encrypt_0_213_reg <= BF_encrypt_0_213;
		if (start == 1'b0 && ^(BF_encrypt_0_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_213_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %214 = xor i32 %213, %189*/
		BF_encrypt_0_214 = (BF_encrypt_0_213_reg ^ BF_encrypt_0_189);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %214 = xor i32 %213, %189*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_42)) begin
		BF_encrypt_0_214_reg <= BF_encrypt_0_214;
		if (start == 1'b0 && ^(BF_encrypt_0_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_214_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %215 = lshr i32 %212, 24*/
		BF_encrypt_0_215 = (BF_encrypt_0_212 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %215 = lshr i32 %212, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_215_reg <= BF_encrypt_0_215;
		if (start == 1'b0 && ^(BF_encrypt_0_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_215_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %216 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %215*/
		BF_encrypt_0_216 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_215_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %216 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %215*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_47)) begin
		BF_encrypt_0_216_reg <= BF_encrypt_0_216;
		if (start == 1'b0 && ^(BF_encrypt_0_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_216_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %217 = load i32* %216, align 4, !tbaa !1*/
		BF_encrypt_0_217 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %217 = load i32* %216, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_49)) begin
		BF_encrypt_0_217_reg <= BF_encrypt_0_217;
		if (start == 1'b0 && ^(BF_encrypt_0_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_217_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %218 = lshr i32 %212, 16*/
		BF_encrypt_0_218 = (BF_encrypt_0_212 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %218 = lshr i32 %212, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_218_reg <= BF_encrypt_0_218;
		if (start == 1'b0 && ^(BF_encrypt_0_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_218_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %219 = and i32 %218, 255*/
		BF_encrypt_0_219 = (BF_encrypt_0_218 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %219 = and i32 %218, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_219_reg <= BF_encrypt_0_219;
		if (start == 1'b0 && ^(BF_encrypt_0_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_219_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %220 = or i32 %219, 256*/
		BF_encrypt_0_220 = (BF_encrypt_0_219 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %220 = or i32 %219, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_220_reg <= BF_encrypt_0_220;
		if (start == 1'b0 && ^(BF_encrypt_0_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_220_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %221 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %220*/
		BF_encrypt_0_221 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_220_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %221 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %220*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_47)) begin
		BF_encrypt_0_221_reg <= BF_encrypt_0_221;
		if (start == 1'b0 && ^(BF_encrypt_0_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_221_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %222 = load i32* %221, align 4, !tbaa !1*/
		BF_encrypt_0_222 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %222 = load i32* %221, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_49)) begin
		BF_encrypt_0_222_reg <= BF_encrypt_0_222;
		if (start == 1'b0 && ^(BF_encrypt_0_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_222_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %223 = add i32 %222, %217*/
		BF_encrypt_0_223 = (BF_encrypt_0_222 + BF_encrypt_0_217);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %223 = add i32 %222, %217*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_49)) begin
		BF_encrypt_0_223_reg <= BF_encrypt_0_223;
		if (start == 1'b0 && ^(BF_encrypt_0_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_223_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %224 = lshr i32 %212, 8*/
		BF_encrypt_0_224 = (BF_encrypt_0_212 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %224 = lshr i32 %212, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_224_reg <= BF_encrypt_0_224;
		if (start == 1'b0 && ^(BF_encrypt_0_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_224_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %225 = and i32 %224, 255*/
		BF_encrypt_0_225 = (BF_encrypt_0_224 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %225 = and i32 %224, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_225_reg <= BF_encrypt_0_225;
		if (start == 1'b0 && ^(BF_encrypt_0_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_225_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %226 = or i32 %225, 512*/
		BF_encrypt_0_226 = (BF_encrypt_0_225 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %226 = or i32 %225, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_226_reg <= BF_encrypt_0_226;
		if (start == 1'b0 && ^(BF_encrypt_0_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_226_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %227 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %226*/
		BF_encrypt_0_227 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_226_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %227 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %226*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_47)) begin
		BF_encrypt_0_227_reg <= BF_encrypt_0_227;
		if (start == 1'b0 && ^(BF_encrypt_0_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_227_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
		BF_encrypt_0_228 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_228_reg <= BF_encrypt_0_228;
		if (start == 1'b0 && ^(BF_encrypt_0_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_228_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %229 = xor i32 %223, %228*/
		BF_encrypt_0_229 = (BF_encrypt_0_223_reg ^ BF_encrypt_0_228);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %229 = xor i32 %223, %228*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_229_reg <= BF_encrypt_0_229;
		if (start == 1'b0 && ^(BF_encrypt_0_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_229_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %230 = and i32 %212, 255*/
		BF_encrypt_0_230 = (BF_encrypt_0_212 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %230 = and i32 %212, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_230_reg <= BF_encrypt_0_230;
		if (start == 1'b0 && ^(BF_encrypt_0_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_230_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %231 = or i32 %230, 768*/
		BF_encrypt_0_231 = (BF_encrypt_0_230 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %231 = or i32 %230, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_231_reg <= BF_encrypt_0_231;
		if (start == 1'b0 && ^(BF_encrypt_0_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_231_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %232 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %231*/
		BF_encrypt_0_232 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_231_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %232 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %231*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_47)) begin
		BF_encrypt_0_232_reg <= BF_encrypt_0_232;
		if (start == 1'b0 && ^(BF_encrypt_0_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_232_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %233 = load i32* %232, align 4, !tbaa !1*/
		BF_encrypt_0_233 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %233 = load i32* %232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_233_reg <= BF_encrypt_0_233;
		if (start == 1'b0 && ^(BF_encrypt_0_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_233_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %234 = add i32 %229, %233*/
		BF_encrypt_0_234 = (BF_encrypt_0_229 + BF_encrypt_0_233);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %234 = add i32 %229, %233*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_234_reg <= BF_encrypt_0_234;
		if (start == 1'b0 && ^(BF_encrypt_0_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_234_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %235 = xor i32 %214, %234*/
		BF_encrypt_0_235 = (BF_encrypt_0_214_reg ^ BF_encrypt_0_234);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %235 = xor i32 %214, %234*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_235_reg <= BF_encrypt_0_235;
		if (start == 1'b0 && ^(BF_encrypt_0_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_235_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %236 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 11), align 4, !tbaa !1*/
		BF_encrypt_0_236 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %236 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_9)) begin
		BF_encrypt_0_236_reg <= BF_encrypt_0_236;
		if (start == 1'b0 && ^(BF_encrypt_0_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_236_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %237 = xor i32 %236, %212*/
		BF_encrypt_0_237 = (BF_encrypt_0_236_reg ^ BF_encrypt_0_212);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %237 = xor i32 %236, %212*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_46)) begin
		BF_encrypt_0_237_reg <= BF_encrypt_0_237;
		if (start == 1'b0 && ^(BF_encrypt_0_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_237_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %238 = lshr i32 %235, 24*/
		BF_encrypt_0_238 = (BF_encrypt_0_235 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %238 = lshr i32 %235, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_238_reg <= BF_encrypt_0_238;
		if (start == 1'b0 && ^(BF_encrypt_0_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_238_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %239 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %238*/
		BF_encrypt_0_239 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_238_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %239 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %238*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_51)) begin
		BF_encrypt_0_239_reg <= BF_encrypt_0_239;
		if (start == 1'b0 && ^(BF_encrypt_0_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_239_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %240 = load i32* %239, align 4, !tbaa !1*/
		BF_encrypt_0_240 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %240 = load i32* %239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_53)) begin
		BF_encrypt_0_240_reg <= BF_encrypt_0_240;
		if (start == 1'b0 && ^(BF_encrypt_0_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_240_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %241 = lshr i32 %235, 16*/
		BF_encrypt_0_241 = (BF_encrypt_0_235 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %241 = lshr i32 %235, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_241_reg <= BF_encrypt_0_241;
		if (start == 1'b0 && ^(BF_encrypt_0_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_241_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %242 = and i32 %241, 255*/
		BF_encrypt_0_242 = (BF_encrypt_0_241 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %242 = and i32 %241, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_242_reg <= BF_encrypt_0_242;
		if (start == 1'b0 && ^(BF_encrypt_0_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_242_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %243 = or i32 %242, 256*/
		BF_encrypt_0_243 = (BF_encrypt_0_242 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %243 = or i32 %242, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_243_reg <= BF_encrypt_0_243;
		if (start == 1'b0 && ^(BF_encrypt_0_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_243_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %244 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %243*/
		BF_encrypt_0_244 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_243_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %244 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %243*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_51)) begin
		BF_encrypt_0_244_reg <= BF_encrypt_0_244;
		if (start == 1'b0 && ^(BF_encrypt_0_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_244_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
		BF_encrypt_0_245 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_53)) begin
		BF_encrypt_0_245_reg <= BF_encrypt_0_245;
		if (start == 1'b0 && ^(BF_encrypt_0_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_245_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %246 = add i32 %245, %240*/
		BF_encrypt_0_246 = (BF_encrypt_0_245 + BF_encrypt_0_240);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %246 = add i32 %245, %240*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_53)) begin
		BF_encrypt_0_246_reg <= BF_encrypt_0_246;
		if (start == 1'b0 && ^(BF_encrypt_0_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_246_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %247 = lshr i32 %235, 8*/
		BF_encrypt_0_247 = (BF_encrypt_0_235 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %247 = lshr i32 %235, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_247_reg <= BF_encrypt_0_247;
		if (start == 1'b0 && ^(BF_encrypt_0_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_247_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %248 = and i32 %247, 255*/
		BF_encrypt_0_248 = (BF_encrypt_0_247 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %248 = and i32 %247, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_248_reg <= BF_encrypt_0_248;
		if (start == 1'b0 && ^(BF_encrypt_0_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_248_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %249 = or i32 %248, 512*/
		BF_encrypt_0_249 = (BF_encrypt_0_248 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %249 = or i32 %248, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_249_reg <= BF_encrypt_0_249;
		if (start == 1'b0 && ^(BF_encrypt_0_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_249_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %250 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %249*/
		BF_encrypt_0_250 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_249_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %250 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %249*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_51)) begin
		BF_encrypt_0_250_reg <= BF_encrypt_0_250;
		if (start == 1'b0 && ^(BF_encrypt_0_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_250_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
		BF_encrypt_0_251 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_251_reg <= BF_encrypt_0_251;
		if (start == 1'b0 && ^(BF_encrypt_0_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_251_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %252 = xor i32 %246, %251*/
		BF_encrypt_0_252 = (BF_encrypt_0_246_reg ^ BF_encrypt_0_251);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %252 = xor i32 %246, %251*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_252_reg <= BF_encrypt_0_252;
		if (start == 1'b0 && ^(BF_encrypt_0_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_252_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %253 = and i32 %235, 255*/
		BF_encrypt_0_253 = (BF_encrypt_0_235 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %253 = and i32 %235, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_253_reg <= BF_encrypt_0_253;
		if (start == 1'b0 && ^(BF_encrypt_0_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_253_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %254 = or i32 %253, 768*/
		BF_encrypt_0_254 = (BF_encrypt_0_253 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %254 = or i32 %253, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_254_reg <= BF_encrypt_0_254;
		if (start == 1'b0 && ^(BF_encrypt_0_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_254_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %255 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %254*/
		BF_encrypt_0_255 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_254_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %255 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %254*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_51)) begin
		BF_encrypt_0_255_reg <= BF_encrypt_0_255;
		if (start == 1'b0 && ^(BF_encrypt_0_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_255_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %256 = load i32* %255, align 4, !tbaa !1*/
		BF_encrypt_0_256 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %256 = load i32* %255, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_256_reg <= BF_encrypt_0_256;
		if (start == 1'b0 && ^(BF_encrypt_0_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_256_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %257 = add i32 %252, %256*/
		BF_encrypt_0_257 = (BF_encrypt_0_252 + BF_encrypt_0_256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %257 = add i32 %252, %256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_257_reg <= BF_encrypt_0_257;
		if (start == 1'b0 && ^(BF_encrypt_0_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_257_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %258 = xor i32 %237, %257*/
		BF_encrypt_0_258 = (BF_encrypt_0_237_reg ^ BF_encrypt_0_257);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %258 = xor i32 %237, %257*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_258_reg <= BF_encrypt_0_258;
		if (start == 1'b0 && ^(BF_encrypt_0_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_258_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %259 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 12), align 4, !tbaa !1*/
		BF_encrypt_0_259 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %259 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_9)) begin
		BF_encrypt_0_259_reg <= BF_encrypt_0_259;
		if (start == 1'b0 && ^(BF_encrypt_0_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_259_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %260 = xor i32 %259, %235*/
		BF_encrypt_0_260 = (BF_encrypt_0_259_reg ^ BF_encrypt_0_235);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %260 = xor i32 %259, %235*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_50)) begin
		BF_encrypt_0_260_reg <= BF_encrypt_0_260;
		if (start == 1'b0 && ^(BF_encrypt_0_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_260_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %261 = lshr i32 %258, 24*/
		BF_encrypt_0_261 = (BF_encrypt_0_258 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %261 = lshr i32 %258, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_261_reg <= BF_encrypt_0_261;
		if (start == 1'b0 && ^(BF_encrypt_0_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_261_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %262 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %261*/
		BF_encrypt_0_262 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_261_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %262 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %261*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_55)) begin
		BF_encrypt_0_262_reg <= BF_encrypt_0_262;
		if (start == 1'b0 && ^(BF_encrypt_0_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_262_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %263 = load i32* %262, align 4, !tbaa !1*/
		BF_encrypt_0_263 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %263 = load i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_57)) begin
		BF_encrypt_0_263_reg <= BF_encrypt_0_263;
		if (start == 1'b0 && ^(BF_encrypt_0_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_263_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %264 = lshr i32 %258, 16*/
		BF_encrypt_0_264 = (BF_encrypt_0_258 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %264 = lshr i32 %258, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_264_reg <= BF_encrypt_0_264;
		if (start == 1'b0 && ^(BF_encrypt_0_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_264_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %265 = and i32 %264, 255*/
		BF_encrypt_0_265 = (BF_encrypt_0_264 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %265 = and i32 %264, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_265_reg <= BF_encrypt_0_265;
		if (start == 1'b0 && ^(BF_encrypt_0_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_265_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %266 = or i32 %265, 256*/
		BF_encrypt_0_266 = (BF_encrypt_0_265 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %266 = or i32 %265, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_266_reg <= BF_encrypt_0_266;
		if (start == 1'b0 && ^(BF_encrypt_0_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_266_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %267 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %266*/
		BF_encrypt_0_267 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_266_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %267 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %266*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_55)) begin
		BF_encrypt_0_267_reg <= BF_encrypt_0_267;
		if (start == 1'b0 && ^(BF_encrypt_0_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_267_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %268 = load i32* %267, align 4, !tbaa !1*/
		BF_encrypt_0_268 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %268 = load i32* %267, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_57)) begin
		BF_encrypt_0_268_reg <= BF_encrypt_0_268;
		if (start == 1'b0 && ^(BF_encrypt_0_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_268_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %269 = add i32 %268, %263*/
		BF_encrypt_0_269 = (BF_encrypt_0_268 + BF_encrypt_0_263);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %269 = add i32 %268, %263*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_57)) begin
		BF_encrypt_0_269_reg <= BF_encrypt_0_269;
		if (start == 1'b0 && ^(BF_encrypt_0_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_269_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %270 = lshr i32 %258, 8*/
		BF_encrypt_0_270 = (BF_encrypt_0_258 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %270 = lshr i32 %258, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_270_reg <= BF_encrypt_0_270;
		if (start == 1'b0 && ^(BF_encrypt_0_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_270_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %271 = and i32 %270, 255*/
		BF_encrypt_0_271 = (BF_encrypt_0_270 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %271 = and i32 %270, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_271_reg <= BF_encrypt_0_271;
		if (start == 1'b0 && ^(BF_encrypt_0_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_271_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %272 = or i32 %271, 512*/
		BF_encrypt_0_272 = (BF_encrypt_0_271 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %272 = or i32 %271, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_272_reg <= BF_encrypt_0_272;
		if (start == 1'b0 && ^(BF_encrypt_0_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_272_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %273 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %272*/
		BF_encrypt_0_273 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_272_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %273 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %272*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_55)) begin
		BF_encrypt_0_273_reg <= BF_encrypt_0_273;
		if (start == 1'b0 && ^(BF_encrypt_0_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_273_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %274 = load i32* %273, align 4, !tbaa !1*/
		BF_encrypt_0_274 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %274 = load i32* %273, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_274_reg <= BF_encrypt_0_274;
		if (start == 1'b0 && ^(BF_encrypt_0_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_274_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %275 = xor i32 %269, %274*/
		BF_encrypt_0_275 = (BF_encrypt_0_269_reg ^ BF_encrypt_0_274);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %275 = xor i32 %269, %274*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_275_reg <= BF_encrypt_0_275;
		if (start == 1'b0 && ^(BF_encrypt_0_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_275_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %276 = and i32 %258, 255*/
		BF_encrypt_0_276 = (BF_encrypt_0_258 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %276 = and i32 %258, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_276_reg <= BF_encrypt_0_276;
		if (start == 1'b0 && ^(BF_encrypt_0_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_276_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %277 = or i32 %276, 768*/
		BF_encrypt_0_277 = (BF_encrypt_0_276 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %277 = or i32 %276, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_277_reg <= BF_encrypt_0_277;
		if (start == 1'b0 && ^(BF_encrypt_0_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_277_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %278 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %277*/
		BF_encrypt_0_278 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_277_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %278 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %277*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_55)) begin
		BF_encrypt_0_278_reg <= BF_encrypt_0_278;
		if (start == 1'b0 && ^(BF_encrypt_0_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_278_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %279 = load i32* %278, align 4, !tbaa !1*/
		BF_encrypt_0_279 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %279 = load i32* %278, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_279_reg <= BF_encrypt_0_279;
		if (start == 1'b0 && ^(BF_encrypt_0_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_279_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %280 = add i32 %275, %279*/
		BF_encrypt_0_280 = (BF_encrypt_0_275 + BF_encrypt_0_279);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %280 = add i32 %275, %279*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_280_reg <= BF_encrypt_0_280;
		if (start == 1'b0 && ^(BF_encrypt_0_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_280_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %281 = xor i32 %260, %280*/
		BF_encrypt_0_281 = (BF_encrypt_0_260_reg ^ BF_encrypt_0_280);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %281 = xor i32 %260, %280*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_281_reg <= BF_encrypt_0_281;
		if (start == 1'b0 && ^(BF_encrypt_0_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_281_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %282 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 13), align 4, !tbaa !1*/
		BF_encrypt_0_282 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %282 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_10)) begin
		BF_encrypt_0_282_reg <= BF_encrypt_0_282;
		if (start == 1'b0 && ^(BF_encrypt_0_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_282_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %283 = xor i32 %282, %258*/
		BF_encrypt_0_283 = (BF_encrypt_0_282_reg ^ BF_encrypt_0_258);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %283 = xor i32 %282, %258*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_54)) begin
		BF_encrypt_0_283_reg <= BF_encrypt_0_283;
		if (start == 1'b0 && ^(BF_encrypt_0_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_283_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %284 = lshr i32 %281, 24*/
		BF_encrypt_0_284 = (BF_encrypt_0_281 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %284 = lshr i32 %281, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_284_reg <= BF_encrypt_0_284;
		if (start == 1'b0 && ^(BF_encrypt_0_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_284_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %285 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %284*/
		BF_encrypt_0_285 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_284_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %285 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %284*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_59)) begin
		BF_encrypt_0_285_reg <= BF_encrypt_0_285;
		if (start == 1'b0 && ^(BF_encrypt_0_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_285_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %286 = load i32* %285, align 4, !tbaa !1*/
		BF_encrypt_0_286 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %286 = load i32* %285, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_61)) begin
		BF_encrypt_0_286_reg <= BF_encrypt_0_286;
		if (start == 1'b0 && ^(BF_encrypt_0_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_286_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %287 = lshr i32 %281, 16*/
		BF_encrypt_0_287 = (BF_encrypt_0_281 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %287 = lshr i32 %281, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_287_reg <= BF_encrypt_0_287;
		if (start == 1'b0 && ^(BF_encrypt_0_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_287_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %288 = and i32 %287, 255*/
		BF_encrypt_0_288 = (BF_encrypt_0_287 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %288 = and i32 %287, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_288_reg <= BF_encrypt_0_288;
		if (start == 1'b0 && ^(BF_encrypt_0_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_288_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %289 = or i32 %288, 256*/
		BF_encrypt_0_289 = (BF_encrypt_0_288 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %289 = or i32 %288, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_289_reg <= BF_encrypt_0_289;
		if (start == 1'b0 && ^(BF_encrypt_0_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_289_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %290 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %289*/
		BF_encrypt_0_290 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_289_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %290 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %289*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_59)) begin
		BF_encrypt_0_290_reg <= BF_encrypt_0_290;
		if (start == 1'b0 && ^(BF_encrypt_0_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_290_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %291 = load i32* %290, align 4, !tbaa !1*/
		BF_encrypt_0_291 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %291 = load i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_61)) begin
		BF_encrypt_0_291_reg <= BF_encrypt_0_291;
		if (start == 1'b0 && ^(BF_encrypt_0_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_291_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %292 = add i32 %291, %286*/
		BF_encrypt_0_292 = (BF_encrypt_0_291 + BF_encrypt_0_286);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %292 = add i32 %291, %286*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_61)) begin
		BF_encrypt_0_292_reg <= BF_encrypt_0_292;
		if (start == 1'b0 && ^(BF_encrypt_0_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_292_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %293 = lshr i32 %281, 8*/
		BF_encrypt_0_293 = (BF_encrypt_0_281 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %293 = lshr i32 %281, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_293_reg <= BF_encrypt_0_293;
		if (start == 1'b0 && ^(BF_encrypt_0_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_293_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %294 = and i32 %293, 255*/
		BF_encrypt_0_294 = (BF_encrypt_0_293 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %294 = and i32 %293, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_294_reg <= BF_encrypt_0_294;
		if (start == 1'b0 && ^(BF_encrypt_0_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_294_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %295 = or i32 %294, 512*/
		BF_encrypt_0_295 = (BF_encrypt_0_294 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %295 = or i32 %294, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_295_reg <= BF_encrypt_0_295;
		if (start == 1'b0 && ^(BF_encrypt_0_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_295_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %296 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %295*/
		BF_encrypt_0_296 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_295_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %296 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %295*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_59)) begin
		BF_encrypt_0_296_reg <= BF_encrypt_0_296;
		if (start == 1'b0 && ^(BF_encrypt_0_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_296_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
		BF_encrypt_0_297 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_297_reg <= BF_encrypt_0_297;
		if (start == 1'b0 && ^(BF_encrypt_0_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_297_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %298 = xor i32 %292, %297*/
		BF_encrypt_0_298 = (BF_encrypt_0_292_reg ^ BF_encrypt_0_297);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %298 = xor i32 %292, %297*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_298_reg <= BF_encrypt_0_298;
		if (start == 1'b0 && ^(BF_encrypt_0_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_298_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %299 = and i32 %281, 255*/
		BF_encrypt_0_299 = (BF_encrypt_0_281 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %299 = and i32 %281, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_299_reg <= BF_encrypt_0_299;
		if (start == 1'b0 && ^(BF_encrypt_0_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_299_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %300 = or i32 %299, 768*/
		BF_encrypt_0_300 = (BF_encrypt_0_299 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %300 = or i32 %299, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_300_reg <= BF_encrypt_0_300;
		if (start == 1'b0 && ^(BF_encrypt_0_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_300_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %301 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %300*/
		BF_encrypt_0_301 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_300_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %301 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %300*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_59)) begin
		BF_encrypt_0_301_reg <= BF_encrypt_0_301;
		if (start == 1'b0 && ^(BF_encrypt_0_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_301_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
		BF_encrypt_0_302 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_302_reg <= BF_encrypt_0_302;
		if (start == 1'b0 && ^(BF_encrypt_0_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_302_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %303 = add i32 %298, %302*/
		BF_encrypt_0_303 = (BF_encrypt_0_298 + BF_encrypt_0_302);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %303 = add i32 %298, %302*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_303_reg <= BF_encrypt_0_303;
		if (start == 1'b0 && ^(BF_encrypt_0_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_303_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %304 = xor i32 %283, %303*/
		BF_encrypt_0_304 = (BF_encrypt_0_283_reg ^ BF_encrypt_0_303);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %304 = xor i32 %283, %303*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_304_reg <= BF_encrypt_0_304;
		if (start == 1'b0 && ^(BF_encrypt_0_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_304_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %305 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 14), align 4, !tbaa !1*/
		BF_encrypt_0_305 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %305 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_10)) begin
		BF_encrypt_0_305_reg <= BF_encrypt_0_305;
		if (start == 1'b0 && ^(BF_encrypt_0_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_305_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %306 = xor i32 %305, %281*/
		BF_encrypt_0_306 = (BF_encrypt_0_305_reg ^ BF_encrypt_0_281);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %306 = xor i32 %305, %281*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_58)) begin
		BF_encrypt_0_306_reg <= BF_encrypt_0_306;
		if (start == 1'b0 && ^(BF_encrypt_0_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_306_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %307 = lshr i32 %304, 24*/
		BF_encrypt_0_307 = (BF_encrypt_0_304 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %307 = lshr i32 %304, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_307_reg <= BF_encrypt_0_307;
		if (start == 1'b0 && ^(BF_encrypt_0_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_307_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %308 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %307*/
		BF_encrypt_0_308 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_307_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %308 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %307*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_63)) begin
		BF_encrypt_0_308_reg <= BF_encrypt_0_308;
		if (start == 1'b0 && ^(BF_encrypt_0_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_308_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %309 = load i32* %308, align 4, !tbaa !1*/
		BF_encrypt_0_309 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %309 = load i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_65)) begin
		BF_encrypt_0_309_reg <= BF_encrypt_0_309;
		if (start == 1'b0 && ^(BF_encrypt_0_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_309_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %310 = lshr i32 %304, 16*/
		BF_encrypt_0_310 = (BF_encrypt_0_304 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %310 = lshr i32 %304, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_310_reg <= BF_encrypt_0_310;
		if (start == 1'b0 && ^(BF_encrypt_0_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_310_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %311 = and i32 %310, 255*/
		BF_encrypt_0_311 = (BF_encrypt_0_310 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %311 = and i32 %310, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_311_reg <= BF_encrypt_0_311;
		if (start == 1'b0 && ^(BF_encrypt_0_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_311_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %312 = or i32 %311, 256*/
		BF_encrypt_0_312 = (BF_encrypt_0_311 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %312 = or i32 %311, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_312_reg <= BF_encrypt_0_312;
		if (start == 1'b0 && ^(BF_encrypt_0_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_312_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %313 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %312*/
		BF_encrypt_0_313 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_312_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %313 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %312*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_63)) begin
		BF_encrypt_0_313_reg <= BF_encrypt_0_313;
		if (start == 1'b0 && ^(BF_encrypt_0_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_313_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %314 = load i32* %313, align 4, !tbaa !1*/
		BF_encrypt_0_314 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %314 = load i32* %313, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_65)) begin
		BF_encrypt_0_314_reg <= BF_encrypt_0_314;
		if (start == 1'b0 && ^(BF_encrypt_0_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_314_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %315 = add i32 %314, %309*/
		BF_encrypt_0_315 = (BF_encrypt_0_314 + BF_encrypt_0_309);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %315 = add i32 %314, %309*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_65)) begin
		BF_encrypt_0_315_reg <= BF_encrypt_0_315;
		if (start == 1'b0 && ^(BF_encrypt_0_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_315_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %316 = lshr i32 %304, 8*/
		BF_encrypt_0_316 = (BF_encrypt_0_304 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %316 = lshr i32 %304, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_316_reg <= BF_encrypt_0_316;
		if (start == 1'b0 && ^(BF_encrypt_0_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_316_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %317 = and i32 %316, 255*/
		BF_encrypt_0_317 = (BF_encrypt_0_316 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %317 = and i32 %316, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_317_reg <= BF_encrypt_0_317;
		if (start == 1'b0 && ^(BF_encrypt_0_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_317_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %318 = or i32 %317, 512*/
		BF_encrypt_0_318 = (BF_encrypt_0_317 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %318 = or i32 %317, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_318_reg <= BF_encrypt_0_318;
		if (start == 1'b0 && ^(BF_encrypt_0_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_318_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %319 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %318*/
		BF_encrypt_0_319 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_318_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %319 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %318*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_63)) begin
		BF_encrypt_0_319_reg <= BF_encrypt_0_319;
		if (start == 1'b0 && ^(BF_encrypt_0_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_319_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %320 = load i32* %319, align 4, !tbaa !1*/
		BF_encrypt_0_320 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %320 = load i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_320_reg <= BF_encrypt_0_320;
		if (start == 1'b0 && ^(BF_encrypt_0_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_320_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %321 = xor i32 %315, %320*/
		BF_encrypt_0_321 = (BF_encrypt_0_315_reg ^ BF_encrypt_0_320);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %321 = xor i32 %315, %320*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_321_reg <= BF_encrypt_0_321;
		if (start == 1'b0 && ^(BF_encrypt_0_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_321_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %322 = and i32 %304, 255*/
		BF_encrypt_0_322 = (BF_encrypt_0_304 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %322 = and i32 %304, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_322_reg <= BF_encrypt_0_322;
		if (start == 1'b0 && ^(BF_encrypt_0_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_322_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %323 = or i32 %322, 768*/
		BF_encrypt_0_323 = (BF_encrypt_0_322 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %323 = or i32 %322, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_323_reg <= BF_encrypt_0_323;
		if (start == 1'b0 && ^(BF_encrypt_0_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_323_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %324 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %323*/
		BF_encrypt_0_324 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_323_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %324 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %323*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_63)) begin
		BF_encrypt_0_324_reg <= BF_encrypt_0_324;
		if (start == 1'b0 && ^(BF_encrypt_0_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_324_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %325 = load i32* %324, align 4, !tbaa !1*/
		BF_encrypt_0_325 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %325 = load i32* %324, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_325_reg <= BF_encrypt_0_325;
		if (start == 1'b0 && ^(BF_encrypt_0_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_325_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %326 = add i32 %321, %325*/
		BF_encrypt_0_326 = (BF_encrypt_0_321 + BF_encrypt_0_325);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %326 = add i32 %321, %325*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_326_reg <= BF_encrypt_0_326;
		if (start == 1'b0 && ^(BF_encrypt_0_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_326_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %327 = xor i32 %306, %326*/
		BF_encrypt_0_327 = (BF_encrypt_0_306_reg ^ BF_encrypt_0_326);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %327 = xor i32 %306, %326*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_327_reg <= BF_encrypt_0_327;
		if (start == 1'b0 && ^(BF_encrypt_0_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_327_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %328 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 15), align 4, !tbaa !1*/
		BF_encrypt_0_328 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %328 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_11)) begin
		BF_encrypt_0_328_reg <= BF_encrypt_0_328;
		if (start == 1'b0 && ^(BF_encrypt_0_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_328_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %329 = xor i32 %328, %304*/
		BF_encrypt_0_329 = (BF_encrypt_0_328_reg ^ BF_encrypt_0_304);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %329 = xor i32 %328, %304*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_62)) begin
		BF_encrypt_0_329_reg <= BF_encrypt_0_329;
		if (start == 1'b0 && ^(BF_encrypt_0_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_329_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %330 = lshr i32 %327, 24*/
		BF_encrypt_0_330 = (BF_encrypt_0_327 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %330 = lshr i32 %327, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_330_reg <= BF_encrypt_0_330;
		if (start == 1'b0 && ^(BF_encrypt_0_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_330_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %331 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %330*/
		BF_encrypt_0_331 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_330_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %331 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %330*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_67)) begin
		BF_encrypt_0_331_reg <= BF_encrypt_0_331;
		if (start == 1'b0 && ^(BF_encrypt_0_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_331_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
		BF_encrypt_0_332 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_69)) begin
		BF_encrypt_0_332_reg <= BF_encrypt_0_332;
		if (start == 1'b0 && ^(BF_encrypt_0_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_332_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %333 = lshr i32 %327, 16*/
		BF_encrypt_0_333 = (BF_encrypt_0_327 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %333 = lshr i32 %327, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_333_reg <= BF_encrypt_0_333;
		if (start == 1'b0 && ^(BF_encrypt_0_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_333_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %334 = and i32 %333, 255*/
		BF_encrypt_0_334 = (BF_encrypt_0_333 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %334 = and i32 %333, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_334_reg <= BF_encrypt_0_334;
		if (start == 1'b0 && ^(BF_encrypt_0_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_334_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %335 = or i32 %334, 256*/
		BF_encrypt_0_335 = (BF_encrypt_0_334 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %335 = or i32 %334, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_335_reg <= BF_encrypt_0_335;
		if (start == 1'b0 && ^(BF_encrypt_0_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_335_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %336 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %335*/
		BF_encrypt_0_336 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_335_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %336 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %335*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_67)) begin
		BF_encrypt_0_336_reg <= BF_encrypt_0_336;
		if (start == 1'b0 && ^(BF_encrypt_0_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_336_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
		BF_encrypt_0_337 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_69)) begin
		BF_encrypt_0_337_reg <= BF_encrypt_0_337;
		if (start == 1'b0 && ^(BF_encrypt_0_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_337_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %338 = add i32 %337, %332*/
		BF_encrypt_0_338 = (BF_encrypt_0_337 + BF_encrypt_0_332);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %338 = add i32 %337, %332*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_69)) begin
		BF_encrypt_0_338_reg <= BF_encrypt_0_338;
		if (start == 1'b0 && ^(BF_encrypt_0_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_338_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %339 = lshr i32 %327, 8*/
		BF_encrypt_0_339 = (BF_encrypt_0_327 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %339 = lshr i32 %327, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_339_reg <= BF_encrypt_0_339;
		if (start == 1'b0 && ^(BF_encrypt_0_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_339_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %340 = and i32 %339, 255*/
		BF_encrypt_0_340 = (BF_encrypt_0_339 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %340 = and i32 %339, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_340_reg <= BF_encrypt_0_340;
		if (start == 1'b0 && ^(BF_encrypt_0_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_340_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %341 = or i32 %340, 512*/
		BF_encrypt_0_341 = (BF_encrypt_0_340 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %341 = or i32 %340, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_341_reg <= BF_encrypt_0_341;
		if (start == 1'b0 && ^(BF_encrypt_0_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_341_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %342 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %341*/
		BF_encrypt_0_342 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_341_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %342 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %341*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_67)) begin
		BF_encrypt_0_342_reg <= BF_encrypt_0_342;
		if (start == 1'b0 && ^(BF_encrypt_0_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_342_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %343 = load i32* %342, align 4, !tbaa !1*/
		BF_encrypt_0_343 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %343 = load i32* %342, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_343_reg <= BF_encrypt_0_343;
		if (start == 1'b0 && ^(BF_encrypt_0_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_343_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %344 = xor i32 %338, %343*/
		BF_encrypt_0_344 = (BF_encrypt_0_338_reg ^ BF_encrypt_0_343);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %344 = xor i32 %338, %343*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_344_reg <= BF_encrypt_0_344;
		if (start == 1'b0 && ^(BF_encrypt_0_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_344_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %345 = and i32 %327, 255*/
		BF_encrypt_0_345 = (BF_encrypt_0_327 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %345 = and i32 %327, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_345_reg <= BF_encrypt_0_345;
		if (start == 1'b0 && ^(BF_encrypt_0_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_345_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %346 = or i32 %345, 768*/
		BF_encrypt_0_346 = (BF_encrypt_0_345 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %346 = or i32 %345, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_346_reg <= BF_encrypt_0_346;
		if (start == 1'b0 && ^(BF_encrypt_0_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_346_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %347 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %346*/
		BF_encrypt_0_347 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_346_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %347 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %346*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_67)) begin
		BF_encrypt_0_347_reg <= BF_encrypt_0_347;
		if (start == 1'b0 && ^(BF_encrypt_0_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_347_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %348 = load i32* %347, align 4, !tbaa !1*/
		BF_encrypt_0_348 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %348 = load i32* %347, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_348_reg <= BF_encrypt_0_348;
		if (start == 1'b0 && ^(BF_encrypt_0_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_348_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %349 = add i32 %344, %348*/
		BF_encrypt_0_349 = (BF_encrypt_0_344 + BF_encrypt_0_348);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %349 = add i32 %344, %348*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_349_reg <= BF_encrypt_0_349;
		if (start == 1'b0 && ^(BF_encrypt_0_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_349_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %350 = xor i32 %329, %349*/
		BF_encrypt_0_350 = (BF_encrypt_0_329_reg ^ BF_encrypt_0_349);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %350 = xor i32 %329, %349*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_350_reg <= BF_encrypt_0_350;
		if (start == 1'b0 && ^(BF_encrypt_0_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_350_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %351 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 16), align 4, !tbaa !1*/
		BF_encrypt_0_351 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %351 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_11)) begin
		BF_encrypt_0_351_reg <= BF_encrypt_0_351;
		if (start == 1'b0 && ^(BF_encrypt_0_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_351_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %352 = xor i32 %351, %327*/
		BF_encrypt_0_352 = (BF_encrypt_0_351_reg ^ BF_encrypt_0_327);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %352 = xor i32 %351, %327*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_66)) begin
		BF_encrypt_0_352_reg <= BF_encrypt_0_352;
		if (start == 1'b0 && ^(BF_encrypt_0_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_352_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %353 = lshr i32 %350, 24*/
		BF_encrypt_0_353 = (BF_encrypt_0_350 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %353 = lshr i32 %350, 24*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_353_reg <= BF_encrypt_0_353;
		if (start == 1'b0 && ^(BF_encrypt_0_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_353_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %354 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %353*/
		BF_encrypt_0_354 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_353_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %354 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %353*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_71)) begin
		BF_encrypt_0_354_reg <= BF_encrypt_0_354;
		if (start == 1'b0 && ^(BF_encrypt_0_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_354_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %355 = load i32* %354, align 4, !tbaa !1*/
		BF_encrypt_0_355 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %355 = load i32* %354, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_73)) begin
		BF_encrypt_0_355_reg <= BF_encrypt_0_355;
		if (start == 1'b0 && ^(BF_encrypt_0_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_355_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %356 = lshr i32 %350, 16*/
		BF_encrypt_0_356 = (BF_encrypt_0_350 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %356 = lshr i32 %350, 16*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_356_reg <= BF_encrypt_0_356;
		if (start == 1'b0 && ^(BF_encrypt_0_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_356_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %357 = and i32 %356, 255*/
		BF_encrypt_0_357 = (BF_encrypt_0_356 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %357 = and i32 %356, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_357_reg <= BF_encrypt_0_357;
		if (start == 1'b0 && ^(BF_encrypt_0_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_357_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %358 = or i32 %357, 256*/
		BF_encrypt_0_358 = (BF_encrypt_0_357 | 32'd256);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %358 = or i32 %357, 256*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_358_reg <= BF_encrypt_0_358;
		if (start == 1'b0 && ^(BF_encrypt_0_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_358_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %359 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %358*/
		BF_encrypt_0_359 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_358_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %359 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %358*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_71)) begin
		BF_encrypt_0_359_reg <= BF_encrypt_0_359;
		if (start == 1'b0 && ^(BF_encrypt_0_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_359_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %360 = load i32* %359, align 4, !tbaa !1*/
		BF_encrypt_0_360 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %360 = load i32* %359, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_73)) begin
		BF_encrypt_0_360_reg <= BF_encrypt_0_360;
		if (start == 1'b0 && ^(BF_encrypt_0_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_360_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %361 = add i32 %360, %355*/
		BF_encrypt_0_361 = (BF_encrypt_0_360 + BF_encrypt_0_355);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %361 = add i32 %360, %355*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_73)) begin
		BF_encrypt_0_361_reg <= BF_encrypt_0_361;
		if (start == 1'b0 && ^(BF_encrypt_0_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_361_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %362 = lshr i32 %350, 8*/
		BF_encrypt_0_362 = (BF_encrypt_0_350 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %362 = lshr i32 %350, 8*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_362_reg <= BF_encrypt_0_362;
		if (start == 1'b0 && ^(BF_encrypt_0_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_362_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %363 = and i32 %362, 255*/
		BF_encrypt_0_363 = (BF_encrypt_0_362 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %363 = and i32 %362, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_363_reg <= BF_encrypt_0_363;
		if (start == 1'b0 && ^(BF_encrypt_0_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_363_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %364 = or i32 %363, 512*/
		BF_encrypt_0_364 = (BF_encrypt_0_363 | 32'd512);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %364 = or i32 %363, 512*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_364_reg <= BF_encrypt_0_364;
		if (start == 1'b0 && ^(BF_encrypt_0_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_364_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %365 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %364*/
		BF_encrypt_0_365 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_364_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %365 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %364*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_71)) begin
		BF_encrypt_0_365_reg <= BF_encrypt_0_365;
		if (start == 1'b0 && ^(BF_encrypt_0_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_365_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %366 = load i32* %365, align 4, !tbaa !1*/
		BF_encrypt_0_366 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %366 = load i32* %365, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		BF_encrypt_0_366_reg <= BF_encrypt_0_366;
		if (start == 1'b0 && ^(BF_encrypt_0_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_366_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %367 = xor i32 %361, %366*/
		BF_encrypt_0_367 = (BF_encrypt_0_361_reg ^ BF_encrypt_0_366);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %367 = xor i32 %361, %366*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		BF_encrypt_0_367_reg <= BF_encrypt_0_367;
		if (start == 1'b0 && ^(BF_encrypt_0_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_367_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %368 = and i32 %350, 255*/
		BF_encrypt_0_368 = (BF_encrypt_0_350 & 32'd255);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %368 = and i32 %350, 255*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_368_reg <= BF_encrypt_0_368;
		if (start == 1'b0 && ^(BF_encrypt_0_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_368_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %369 = or i32 %368, 768*/
		BF_encrypt_0_369 = (BF_encrypt_0_368 | 32'd768);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %369 = or i32 %368, 768*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_369_reg <= BF_encrypt_0_369;
		if (start == 1'b0 && ^(BF_encrypt_0_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_369_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %370 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %369*/
		BF_encrypt_0_370 = (`TAG_g_key_S_a | (4 * BF_encrypt_0_369_reg));
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %370 = getelementptr inbounds [1024 x i32]* @key_S, i32 0, i32 %369*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_71)) begin
		BF_encrypt_0_370_reg <= BF_encrypt_0_370;
		if (start == 1'b0 && ^(BF_encrypt_0_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_370_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %371 = load i32* %370, align 4, !tbaa !1*/
		BF_encrypt_0_371 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %371 = load i32* %370, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		BF_encrypt_0_371_reg <= BF_encrypt_0_371;
		if (start == 1'b0 && ^(BF_encrypt_0_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_371_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %372 = add i32 %367, %371*/
		BF_encrypt_0_372 = (BF_encrypt_0_367 + BF_encrypt_0_371);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %372 = add i32 %367, %371*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		BF_encrypt_0_372_reg <= BF_encrypt_0_372;
		if (start == 1'b0 && ^(BF_encrypt_0_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_372_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %373 = xor i32 %352, %372*/
		BF_encrypt_0_373 = (BF_encrypt_0_352_reg ^ BF_encrypt_0_372);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %373 = xor i32 %352, %372*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		BF_encrypt_0_373_reg <= BF_encrypt_0_373;
		if (start == 1'b0 && ^(BF_encrypt_0_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_373_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %374 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 17), align 4, !tbaa !1*/
		BF_encrypt_0_374 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %374 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_12)) begin
		BF_encrypt_0_374_reg <= BF_encrypt_0_374;
		if (start == 1'b0 && ^(BF_encrypt_0_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_374_reg"); $finish; end
	end
end
always @(*) begin
	/* BF_encrypt: %0*/
	/*   %375 = xor i32 %374, %350*/
		BF_encrypt_0_375 = (BF_encrypt_0_374_reg ^ BF_encrypt_0_350);
end
always @(posedge clk) begin
	/* BF_encrypt: %0*/
	/*   %375 = xor i32 %374, %350*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_70)) begin
		BF_encrypt_0_375_reg <= BF_encrypt_0_375;
		if (start == 1'b0 && ^(BF_encrypt_0_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_0_375_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* BF_encrypt: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_75)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %1 = load i32* %data, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %6 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %52 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %98 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %144 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %190 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %236 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %282 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %328 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %3 = load i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %21 = load i32* %20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %33 = load i32* %32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %67 = load i32* %66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %79 = load i32* %78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %102 = load i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %159 = load i32* %158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %171 = load i32* %170, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %194 = load i32* %193, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %205 = load i32* %204, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %217 = load i32* %216, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %240 = load i32* %239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_52)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %263 = load i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %274 = load i32* %273, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %286 = load i32* %285, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_60)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %309 = load i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_63)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %320 = load i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_64)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_67)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %343 = load i32* %342, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %355 = load i32* %354, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_71)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %366 = load i32* %365, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_72)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   store i32 %373, i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %1 = load i32* %data, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_1)) begin
		memory_controller_address_a = arg_data;
	end
	/* BF_encrypt: %0*/
	/*   %6 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_2)) begin
		memory_controller_address_a = (`TAG_g_key_P_a | (4 * 32'd1));
	end
	/* BF_encrypt: %0*/
	/*   %52 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		memory_controller_address_a = (`TAG_g_key_P_a | (4 * 32'd3));
	end
	/* BF_encrypt: %0*/
	/*   %98 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		memory_controller_address_a = (`TAG_g_key_P_a | (4 * 32'd5));
	end
	/* BF_encrypt: %0*/
	/*   %144 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_key_P_a | (4 * 32'd7));
	end
	/* BF_encrypt: %0*/
	/*   %190 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_6)) begin
		memory_controller_address_a = (`TAG_g_key_P_a | (4 * 32'd9));
	end
	/* BF_encrypt: %0*/
	/*   %236 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_7)) begin
		memory_controller_address_a = (`TAG_g_key_P_a | (4 * 32'd11));
	end
	/* BF_encrypt: %0*/
	/*   %282 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_8)) begin
		memory_controller_address_a = (`TAG_g_key_P_a | (4 * 32'd13));
	end
	/* BF_encrypt: %0*/
	/*   %328 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_9)) begin
		memory_controller_address_a = (`TAG_g_key_P_a | (4 * 32'd15));
	end
	/* BF_encrypt: %0*/
	/*   %3 = load i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_10)) begin
		memory_controller_address_a = BF_encrypt_0_2_reg;
	end
	/* BF_encrypt: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_11)) begin
		memory_controller_address_a = BF_encrypt_0_9_reg;
	end
	/* BF_encrypt: %0*/
	/*   %21 = load i32* %20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_12)) begin
		memory_controller_address_a = BF_encrypt_0_20_reg;
	end
	/* BF_encrypt: %0*/
	/*   %33 = load i32* %32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_15)) begin
		memory_controller_address_a = BF_encrypt_0_32;
	end
	/* BF_encrypt: %0*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_16)) begin
		memory_controller_address_a = BF_encrypt_0_43_reg;
	end
	/* BF_encrypt: %0*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_19)) begin
		memory_controller_address_a = BF_encrypt_0_55;
	end
	/* BF_encrypt: %0*/
	/*   %67 = load i32* %66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_20)) begin
		memory_controller_address_a = BF_encrypt_0_66_reg;
	end
	/* BF_encrypt: %0*/
	/*   %79 = load i32* %78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_23)) begin
		memory_controller_address_a = BF_encrypt_0_78;
	end
	/* BF_encrypt: %0*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_24)) begin
		memory_controller_address_a = BF_encrypt_0_89_reg;
	end
	/* BF_encrypt: %0*/
	/*   %102 = load i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_27)) begin
		memory_controller_address_a = BF_encrypt_0_101;
	end
	/* BF_encrypt: %0*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_28)) begin
		memory_controller_address_a = BF_encrypt_0_112_reg;
	end
	/* BF_encrypt: %0*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_31)) begin
		memory_controller_address_a = BF_encrypt_0_124;
	end
	/* BF_encrypt: %0*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_32)) begin
		memory_controller_address_a = BF_encrypt_0_135_reg;
	end
	/* BF_encrypt: %0*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_35)) begin
		memory_controller_address_a = BF_encrypt_0_147;
	end
	/* BF_encrypt: %0*/
	/*   %159 = load i32* %158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_36)) begin
		memory_controller_address_a = BF_encrypt_0_158_reg;
	end
	/* BF_encrypt: %0*/
	/*   %171 = load i32* %170, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_39)) begin
		memory_controller_address_a = BF_encrypt_0_170;
	end
	/* BF_encrypt: %0*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_40)) begin
		memory_controller_address_a = BF_encrypt_0_181_reg;
	end
	/* BF_encrypt: %0*/
	/*   %194 = load i32* %193, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_43)) begin
		memory_controller_address_a = BF_encrypt_0_193;
	end
	/* BF_encrypt: %0*/
	/*   %205 = load i32* %204, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_44)) begin
		memory_controller_address_a = BF_encrypt_0_204_reg;
	end
	/* BF_encrypt: %0*/
	/*   %217 = load i32* %216, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_47)) begin
		memory_controller_address_a = BF_encrypt_0_216;
	end
	/* BF_encrypt: %0*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_48)) begin
		memory_controller_address_a = BF_encrypt_0_227_reg;
	end
	/* BF_encrypt: %0*/
	/*   %240 = load i32* %239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_51)) begin
		memory_controller_address_a = BF_encrypt_0_239;
	end
	/* BF_encrypt: %0*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_52)) begin
		memory_controller_address_a = BF_encrypt_0_250_reg;
	end
	/* BF_encrypt: %0*/
	/*   %263 = load i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_55)) begin
		memory_controller_address_a = BF_encrypt_0_262;
	end
	/* BF_encrypt: %0*/
	/*   %274 = load i32* %273, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_56)) begin
		memory_controller_address_a = BF_encrypt_0_273_reg;
	end
	/* BF_encrypt: %0*/
	/*   %286 = load i32* %285, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_59)) begin
		memory_controller_address_a = BF_encrypt_0_285;
	end
	/* BF_encrypt: %0*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_60)) begin
		memory_controller_address_a = BF_encrypt_0_296_reg;
	end
	/* BF_encrypt: %0*/
	/*   %309 = load i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_63)) begin
		memory_controller_address_a = BF_encrypt_0_308;
	end
	/* BF_encrypt: %0*/
	/*   %320 = load i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_64)) begin
		memory_controller_address_a = BF_encrypt_0_319_reg;
	end
	/* BF_encrypt: %0*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_67)) begin
		memory_controller_address_a = BF_encrypt_0_331;
	end
	/* BF_encrypt: %0*/
	/*   %343 = load i32* %342, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_68)) begin
		memory_controller_address_a = BF_encrypt_0_342_reg;
	end
	/* BF_encrypt: %0*/
	/*   %355 = load i32* %354, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_71)) begin
		memory_controller_address_a = BF_encrypt_0_354;
	end
	/* BF_encrypt: %0*/
	/*   %366 = load i32* %365, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_72)) begin
		memory_controller_address_a = BF_encrypt_0_365_reg;
	end
	/* BF_encrypt: %0*/
	/*   store i32 %373, i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		memory_controller_address_a = BF_encrypt_0_2_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %1 = load i32* %data, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %6 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %52 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %98 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %144 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %190 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %236 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %282 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %328 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %3 = load i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %21 = load i32* %20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %33 = load i32* %32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %67 = load i32* %66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_20)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %79 = load i32* %78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_23)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_24)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %102 = load i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_27)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_28)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_31)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %159 = load i32* %158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_36)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %171 = load i32* %170, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_39)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_40)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %194 = load i32* %193, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_43)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %205 = load i32* %204, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_44)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %217 = load i32* %216, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_47)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_48)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %240 = load i32* %239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_51)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_52)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %263 = load i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %274 = load i32* %273, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_56)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %286 = load i32* %285, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_59)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_60)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %309 = load i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_63)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %320 = load i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_64)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_67)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %343 = load i32* %342, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_68)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %355 = load i32* %354, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_71)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %366 = load i32* %365, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_72)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   store i32 %373, i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   store i32 %373, i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		memory_controller_in_a = BF_encrypt_0_373;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %1 = load i32* %data, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %6 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %52 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %98 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %144 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %190 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %236 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %282 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %328 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %3 = load i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %21 = load i32* %20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %33 = load i32* %32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %67 = load i32* %66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %79 = load i32* %78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %90 = load i32* %89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %102 = load i32* %101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %125 = load i32* %124, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %159 = load i32* %158, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %171 = load i32* %170, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %182 = load i32* %181, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %194 = load i32* %193, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %205 = load i32* %204, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_44)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %217 = load i32* %216, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_47)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %228 = load i32* %227, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_48)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %240 = load i32* %239, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %251 = load i32* %250, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_52)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %263 = load i32* %262, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_55)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %274 = load i32* %273, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_56)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %286 = load i32* %285, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_59)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %297 = load i32* %296, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_60)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %309 = load i32* %308, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_63)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %320 = load i32* %319, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_64)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %332 = load i32* %331, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_67)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %343 = load i32* %342, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_68)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %355 = load i32* %354, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_71)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %366 = load i32* %365, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_72)) begin
		memory_controller_size_a = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   store i32 %373, i32* %2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %4 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %29 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %75 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %121 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %167 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %213 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %259 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %305 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %351 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %374 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %26 = load i32* %25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %72 = load i32* %71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %84 = load i32* %83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %95 = load i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %118 = load i32* %117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %141 = load i32* %140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %153 = load i32* %152, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_36)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_39)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %199 = load i32* %198, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_44)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %222 = load i32* %221, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_47)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %233 = load i32* %232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_48)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_51)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %256 = load i32* %255, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %268 = load i32* %267, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_55)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %279 = load i32* %278, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %291 = load i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_59)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_60)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %314 = load i32* %313, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_63)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %325 = load i32* %324, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_64)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_67)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %348 = load i32* %347, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_68)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %360 = load i32* %359, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_71)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   %371 = load i32* %370, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_72)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* BF_encrypt: %0*/
	/*   store i32 %375, i32* %data, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %4 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_key_P_a;
	end
	/* BF_encrypt: %0*/
	/*   %29 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_2)) begin
		memory_controller_address_b = (`TAG_g_key_P_a | (4 * 32'd2));
	end
	/* BF_encrypt: %0*/
	/*   %75 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		memory_controller_address_b = (`TAG_g_key_P_a | (4 * 32'd4));
	end
	/* BF_encrypt: %0*/
	/*   %121 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		memory_controller_address_b = (`TAG_g_key_P_a | (4 * 32'd6));
	end
	/* BF_encrypt: %0*/
	/*   %167 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_key_P_a | (4 * 32'd8));
	end
	/* BF_encrypt: %0*/
	/*   %213 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_6)) begin
		memory_controller_address_b = (`TAG_g_key_P_a | (4 * 32'd10));
	end
	/* BF_encrypt: %0*/
	/*   %259 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_7)) begin
		memory_controller_address_b = (`TAG_g_key_P_a | (4 * 32'd12));
	end
	/* BF_encrypt: %0*/
	/*   %305 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_8)) begin
		memory_controller_address_b = (`TAG_g_key_P_a | (4 * 32'd14));
	end
	/* BF_encrypt: %0*/
	/*   %351 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_9)) begin
		memory_controller_address_b = (`TAG_g_key_P_a | (4 * 32'd16));
	end
	/* BF_encrypt: %0*/
	/*   %374 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_10)) begin
		memory_controller_address_b = (`TAG_g_key_P_a | (4 * 32'd17));
	end
	/* BF_encrypt: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_11)) begin
		memory_controller_address_b = BF_encrypt_0_14_reg;
	end
	/* BF_encrypt: %0*/
	/*   %26 = load i32* %25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_12)) begin
		memory_controller_address_b = BF_encrypt_0_25_reg;
	end
	/* BF_encrypt: %0*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_15)) begin
		memory_controller_address_b = BF_encrypt_0_37;
	end
	/* BF_encrypt: %0*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_16)) begin
		memory_controller_address_b = BF_encrypt_0_48_reg;
	end
	/* BF_encrypt: %0*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_19)) begin
		memory_controller_address_b = BF_encrypt_0_60;
	end
	/* BF_encrypt: %0*/
	/*   %72 = load i32* %71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_20)) begin
		memory_controller_address_b = BF_encrypt_0_71_reg;
	end
	/* BF_encrypt: %0*/
	/*   %84 = load i32* %83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_23)) begin
		memory_controller_address_b = BF_encrypt_0_83;
	end
	/* BF_encrypt: %0*/
	/*   %95 = load i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_24)) begin
		memory_controller_address_b = BF_encrypt_0_94_reg;
	end
	/* BF_encrypt: %0*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_27)) begin
		memory_controller_address_b = BF_encrypt_0_106;
	end
	/* BF_encrypt: %0*/
	/*   %118 = load i32* %117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_28)) begin
		memory_controller_address_b = BF_encrypt_0_117_reg;
	end
	/* BF_encrypt: %0*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_31)) begin
		memory_controller_address_b = BF_encrypt_0_129;
	end
	/* BF_encrypt: %0*/
	/*   %141 = load i32* %140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_32)) begin
		memory_controller_address_b = BF_encrypt_0_140_reg;
	end
	/* BF_encrypt: %0*/
	/*   %153 = load i32* %152, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_35)) begin
		memory_controller_address_b = BF_encrypt_0_152;
	end
	/* BF_encrypt: %0*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_36)) begin
		memory_controller_address_b = BF_encrypt_0_163_reg;
	end
	/* BF_encrypt: %0*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_39)) begin
		memory_controller_address_b = BF_encrypt_0_175;
	end
	/* BF_encrypt: %0*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_40)) begin
		memory_controller_address_b = BF_encrypt_0_186_reg;
	end
	/* BF_encrypt: %0*/
	/*   %199 = load i32* %198, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_43)) begin
		memory_controller_address_b = BF_encrypt_0_198;
	end
	/* BF_encrypt: %0*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_44)) begin
		memory_controller_address_b = BF_encrypt_0_209_reg;
	end
	/* BF_encrypt: %0*/
	/*   %222 = load i32* %221, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_47)) begin
		memory_controller_address_b = BF_encrypt_0_221;
	end
	/* BF_encrypt: %0*/
	/*   %233 = load i32* %232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_48)) begin
		memory_controller_address_b = BF_encrypt_0_232_reg;
	end
	/* BF_encrypt: %0*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_51)) begin
		memory_controller_address_b = BF_encrypt_0_244;
	end
	/* BF_encrypt: %0*/
	/*   %256 = load i32* %255, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_52)) begin
		memory_controller_address_b = BF_encrypt_0_255_reg;
	end
	/* BF_encrypt: %0*/
	/*   %268 = load i32* %267, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_55)) begin
		memory_controller_address_b = BF_encrypt_0_267;
	end
	/* BF_encrypt: %0*/
	/*   %279 = load i32* %278, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_56)) begin
		memory_controller_address_b = BF_encrypt_0_278_reg;
	end
	/* BF_encrypt: %0*/
	/*   %291 = load i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_59)) begin
		memory_controller_address_b = BF_encrypt_0_290;
	end
	/* BF_encrypt: %0*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_60)) begin
		memory_controller_address_b = BF_encrypt_0_301_reg;
	end
	/* BF_encrypt: %0*/
	/*   %314 = load i32* %313, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_63)) begin
		memory_controller_address_b = BF_encrypt_0_313;
	end
	/* BF_encrypt: %0*/
	/*   %325 = load i32* %324, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_64)) begin
		memory_controller_address_b = BF_encrypt_0_324_reg;
	end
	/* BF_encrypt: %0*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_67)) begin
		memory_controller_address_b = BF_encrypt_0_336;
	end
	/* BF_encrypt: %0*/
	/*   %348 = load i32* %347, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_68)) begin
		memory_controller_address_b = BF_encrypt_0_347_reg;
	end
	/* BF_encrypt: %0*/
	/*   %360 = load i32* %359, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_71)) begin
		memory_controller_address_b = BF_encrypt_0_359;
	end
	/* BF_encrypt: %0*/
	/*   %371 = load i32* %370, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_72)) begin
		memory_controller_address_b = BF_encrypt_0_370_reg;
	end
	/* BF_encrypt: %0*/
	/*   store i32 %375, i32* %data, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		memory_controller_address_b = arg_data;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %4 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %29 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %75 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %121 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %167 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %213 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %259 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %305 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %351 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %374 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %26 = load i32* %25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_19)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %72 = load i32* %71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_20)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %84 = load i32* %83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_23)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %95 = load i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_24)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_27)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %118 = load i32* %117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_28)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %141 = load i32* %140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %153 = load i32* %152, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_36)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_39)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_40)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %199 = load i32* %198, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_43)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_44)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %222 = load i32* %221, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_47)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %233 = load i32* %232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_48)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_51)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %256 = load i32* %255, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_52)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %268 = load i32* %267, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_55)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %279 = load i32* %278, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_56)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %291 = load i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_59)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_60)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %314 = load i32* %313, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_63)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %325 = load i32* %324, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_64)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_67)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %348 = load i32* %347, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_68)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %360 = load i32* %359, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_71)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %371 = load i32* %370, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_72)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   store i32 %375, i32* %data, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   store i32 %375, i32* %data, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		memory_controller_in_b = BF_encrypt_0_375_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* BF_encrypt: %0*/
	/*   %4 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %29 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %75 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %121 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %167 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %213 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %259 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %305 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %351 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %374 = load i32* getelementptr inbounds ([18 x i32]* @key_P, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %26 = load i32* %25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %61 = load i32* %60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %72 = load i32* %71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %84 = load i32* %83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %95 = load i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %118 = load i32* %117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %141 = load i32* %140, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %153 = load i32* %152, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_36)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %176 = load i32* %175, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_39)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %187 = load i32* %186, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %199 = load i32* %198, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_43)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %210 = load i32* %209, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_44)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %222 = load i32* %221, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_47)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %233 = load i32* %232, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_48)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %245 = load i32* %244, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_51)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %256 = load i32* %255, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_52)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %268 = load i32* %267, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_55)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %279 = load i32* %278, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_56)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %291 = load i32* %290, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_59)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %302 = load i32* %301, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_60)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %314 = load i32* %313, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_63)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %325 = load i32* %324, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_64)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %337 = load i32* %336, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_67)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %348 = load i32* %347, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_68)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %360 = load i32* %359, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_71)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   %371 = load i32* %370, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_72)) begin
		memory_controller_size_b = 2'd2;
	end
	/* BF_encrypt: %0*/
	/*   store i32 %375, i32* %data, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_BF_encrypt_BB__0_74)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB__1_2 = 6'd2;
parameter [5:0] LEGUP_F_main_BB__1_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB_lrphiiipreheader_4 = 6'd4;
parameter [5:0] LEGUP_F_main_BB_lrphiii_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB_lrphiii_6 = 6'd6;
parameter [5:0] LEGUP_F_main_BB_lrphiii_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB_lrphi4iipreheader_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB_lrphi4ii_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB_lrphi4ii_10 = 6'd10;
parameter [5:0] LEGUP_F_main_BB_lrphi4ii_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB_memcpyexit5ii_12 = 6'd12;
parameter [5:0] LEGUP_F_main_BB__7_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB__7_14 = 6'd14;
parameter [5:0] LEGUP_F_main_BB__7_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB__7_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB__7_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB__7_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB__7_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB__7_20 = 6'd20;
parameter [5:0] LEGUP_F_main_BB__33_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB__33_22 = 6'd22;
parameter [5:0] LEGUP_F_main_BB__36_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB__36_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB__36_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB__36_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB__36_28 = 6'd28;
parameter [5:0] LEGUP_F_main_BB_preheaderiipreheader_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB_preheaderii_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB_preheaderii_32 = 6'd32;
parameter [5:0] LEGUP_F_main_BB_preheaderii_33 = 6'd33;
parameter [5:0] LEGUP_F_main_BB_preheaderii_34 = 6'd34;
parameter [5:0] LEGUP_F_main_BB_preheaderii_35 = 6'd35;
parameter [5:0] LEGUP_F_main_BB_BF_set_keyexiti_36 = 6'd36;
parameter [5:0] LEGUP_F_main_BB_loopexiti_37 = 6'd37;
parameter [5:0] LEGUP_F_main_BB_loopexiti_38 = 6'd38;
parameter [5:0] LEGUP_F_main_BB__55_39 = 6'd39;
parameter [5:0] LEGUP_F_main_BB__55_40 = 6'd40;
parameter [5:0] LEGUP_F_main_BB__55_41 = 6'd41;
parameter [5:0] LEGUP_F_main_BB__55_42 = 6'd42;
parameter [5:0] LEGUP_F_main_BB__55_43 = 6'd43;
parameter [5:0] LEGUP_F_main_BB__55_44 = 6'd44;
parameter [5:0] LEGUP_F_main_BB__55_46 = 6'd46;
parameter [5:0] LEGUP_F_main_BB__55_47 = 6'd47;
parameter [5:0] LEGUP_F_main_BB__55_48 = 6'd48;
parameter [5:0] LEGUP_F_main_BB__55_49 = 6'd49;
parameter [5:0] LEGUP_F_main_BB__55_50 = 6'd50;
parameter [5:0] LEGUP_F_main_BB__55_51 = 6'd51;
parameter [5:0] LEGUP_F_main_BB__55_52 = 6'd52;
parameter [5:0] LEGUP_F_main_BB_BF_cfb64_encryptexiti_53 = 6'd53;
parameter [5:0] LEGUP_F_main_BB_BF_cfb64_encryptexiti_54 = 6'd54;
parameter [5:0] LEGUP_F_main_BB_BF_cfb64_encryptexiti_55 = 6'd55;
parameter [5:0] LEGUP_F_main_BB_blowfish_mainexit_56 = 6'd56;
parameter [5:0] LEGUP_F_main_BB__112_57 = 6'd57;
parameter [5:0] LEGUP_F_main_BB__114_58 = 6'd58;
parameter [5:0] LEGUP_F_main_BB__116_59 = 6'd59;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_24 = 6'd24;
parameter [5:0] LEGUP_function_call_31 = 6'd31;
parameter [5:0] LEGUP_function_call_45 = 6'd45;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] main_1_i07i;
reg [31:0] main_1_i07i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep24_reg;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg  main_1_exitcond22;
reg  main_1_exitcond22_reg;
reg [31:0] main_lrphiii_indvar17;
reg [31:0] main_lrphiii_indvar17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiii_p203iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiii_p203iii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiii_p102iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiii_p102iii_reg;
reg [31:0] main_lrphiii_3;
reg [31:0] main_lrphiii_3_reg;
reg [31:0] main_lrphiii_indvarnext18;
reg [31:0] main_lrphiii_indvarnext18_reg;
reg  main_lrphiii_exitcond19;
reg  main_lrphiii_exitcond19_reg;
reg [31:0] main_lrphi4ii_indvar12;
reg [31:0] main_lrphi4ii_indvar12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi4ii_p203i1ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi4ii_p203i1ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi4ii_p102i2ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi4ii_p102i2ii_reg;
reg [31:0] main_lrphi4ii_4;
reg [31:0] main_lrphi4ii_4_reg;
reg [31:0] main_lrphi4ii_indvarnext13;
reg [31:0] main_lrphi4ii_indvarnext13_reg;
reg  main_lrphi4ii_exitcond14;
reg  main_lrphi4ii_exitcond14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_memcpyexit5ii_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_memcpyexit5ii_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_memcpyexit5ii_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_memcpyexit5ii_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_d05ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_d05ii_reg;
reg [31:0] main_7_i04ii;
reg [31:0] main_7_i04ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_scevgep11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_8_reg;
reg [7:0] main_7_9;
reg [7:0] main_7_9_reg;
reg [31:0] main_7_10;
reg [31:0] main_7_10_reg;
reg  main_7_11;
reg  main_7_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_dataii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_dataii_reg;
reg [31:0] main_7_12;
reg [31:0] main_7_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_13_reg;
reg [7:0] main_7_14;
reg [7:0] main_7_14_reg;
reg [31:0] main_7_15;
reg [31:0] main_7_15_reg;
reg [31:0] main_7_16;
reg [31:0] main_7_16_reg;
reg  main_7_17;
reg  main_7_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_d2ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_d2ii_reg;
reg [31:0] main_7_18;
reg [31:0] main_7_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_19_reg;
reg [7:0] main_7_20;
reg [7:0] main_7_20_reg;
reg [31:0] main_7_21;
reg [31:0] main_7_21_reg;
reg [31:0] main_7_22;
reg [31:0] main_7_22_reg;
reg  main_7_23;
reg  main_7_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_data1ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_data1ii_reg;
reg [31:0] main_7_24;
reg [31:0] main_7_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_25_reg;
reg [7:0] main_7_26;
reg [7:0] main_7_26_reg;
reg [31:0] main_7_27;
reg [31:0] main_7_27_reg;
reg [31:0] main_7_28;
reg [31:0] main_7_28_reg;
reg  main_7_29;
reg  main_7_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_d4ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_7_d4ii_reg;
reg [31:0] main_7_30;
reg [31:0] main_7_30_reg;
reg [31:0] main_7_31;
reg [31:0] main_7_31_reg;
reg [31:0] main_7_32;
reg [31:0] main_7_32_reg;
reg  main_7_exitcond10;
reg  main_7_exitcond10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_35_reg;
reg [31:0] main_36_indvar5;
reg [31:0] main_36_indvar5_reg;
reg [31:0] main_36_37;
reg [31:0] main_36_37_reg;
reg [31:0] main_36_38;
reg [31:0] main_36_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_36_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_36_scevgep8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_36_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_36_scevgep9_reg;
reg [31:0] main_36_39;
reg [31:0] main_36_39_reg;
reg [31:0] main_36_40;
reg [31:0] main_36_40_reg;
reg [31:0] main_36_indvarnext6;
reg [31:0] main_36_indvarnext6_reg;
reg  main_36_exitcond7;
reg  main_36_exitcond7_reg;
reg [31:0] main_preheaderii_indvar;
reg [31:0] main_preheaderii_indvar_reg;
reg [31:0] main_preheaderii_41;
reg [31:0] main_preheaderii_41_reg;
reg [31:0] main_preheaderii_42;
reg [31:0] main_preheaderii_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep4_reg;
reg [31:0] main_preheaderii_43;
reg [31:0] main_preheaderii_43_reg;
reg [31:0] main_preheaderii_44;
reg [31:0] main_preheaderii_44_reg;
reg [31:0] main_preheaderii_indvarnext;
reg [31:0] main_preheaderii_indvarnext_reg;
reg  main_preheaderii_exitcond2;
reg  main_preheaderii_exitcond2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_set_keyexiti_52_reg;
reg [31:0] main_loopexiti_numi0;
reg [31:0] main_loopexiti_numi0_reg;
reg [31:0] main_loopexiti_k06i;
reg [31:0] main_loopexiti_k06i_reg;
reg [31:0] main_loopexiti_check05i;
reg [31:0] main_loopexiti_check05i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexiti_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexiti_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexiti_scevgep1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexiti_scevgep1_reg;
reg [7:0] main_loopexiti_53;
reg [7:0] main_loopexiti_53_reg;
reg  main_loopexiti_54;
reg  main_loopexiti_54_reg;
reg [7:0] main_55_56;
reg [7:0] main_55_56_reg;
reg [31:0] main_55_57;
reg [31:0] main_55_57_reg;
reg [31:0] main_55_58;
reg [31:0] main_55_58_reg;
reg [7:0] main_55_59;
reg [7:0] main_55_59_reg;
reg [31:0] main_55_60;
reg [31:0] main_55_60_reg;
reg [31:0] main_55_61;
reg [31:0] main_55_61_reg;
reg [31:0] main_55_62;
reg [31:0] main_55_62_reg;
reg [7:0] main_55_63;
reg [7:0] main_55_63_reg;
reg [31:0] main_55_64;
reg [31:0] main_55_64_reg;
reg [31:0] main_55_65;
reg [31:0] main_55_65_reg;
reg [31:0] main_55_66;
reg [31:0] main_55_66_reg;
reg [7:0] main_55_67;
reg [7:0] main_55_67_reg;
reg [31:0] main_55_68;
reg [31:0] main_55_68_reg;
reg [31:0] main_55_69;
reg [31:0] main_55_69_reg;
reg [7:0] main_55_70;
reg [7:0] main_55_70_reg;
reg [31:0] main_55_71;
reg [31:0] main_55_71_reg;
reg [31:0] main_55_72;
reg [31:0] main_55_72_reg;
reg [7:0] main_55_73;
reg [7:0] main_55_73_reg;
reg [31:0] main_55_74;
reg [31:0] main_55_74_reg;
reg [31:0] main_55_75;
reg [31:0] main_55_75_reg;
reg [31:0] main_55_76;
reg [31:0] main_55_76_reg;
reg [7:0] main_55_77;
reg [7:0] main_55_77_reg;
reg [31:0] main_55_78;
reg [31:0] main_55_78_reg;
reg [31:0] main_55_79;
reg [31:0] main_55_79_reg;
reg [31:0] main_55_80;
reg [31:0] main_55_80_reg;
reg [7:0] main_55_81;
reg [7:0] main_55_81_reg;
reg [31:0] main_55_82;
reg [31:0] main_55_82_reg;
reg [31:0] main_55_83;
reg [31:0] main_55_83_reg;
reg [31:0] main_55_84;
reg [31:0] main_55_84_reg;
reg [31:0] main_55_85;
reg [31:0] main_55_85_reg;
reg [7:0] main_55_86;
reg [7:0] main_55_86_reg;
reg [31:0] main_55_87;
reg [31:0] main_55_87_reg;
reg [7:0] main_55_88;
reg [7:0] main_55_88_reg;
reg [31:0] main_55_89;
reg [31:0] main_55_89_reg;
reg [7:0] main_55_90;
reg [7:0] main_55_90_reg;
reg [7:0] main_55_91;
reg [7:0] main_55_91_reg;
reg [31:0] main_55_92;
reg [31:0] main_55_92_reg;
reg [31:0] main_55_93;
reg [31:0] main_55_93_reg;
reg [7:0] main_55_94;
reg [7:0] main_55_94_reg;
reg [31:0] main_55_95;
reg [31:0] main_55_95_reg;
reg [7:0] main_55_96;
reg [7:0] main_55_96_reg;
reg [31:0] main_55_97;
reg [31:0] main_55_97_reg;
reg [7:0] main_55_98;
reg [7:0] main_55_98_reg;
reg [7:0] main_55_99;
reg [7:0] main_55_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_cfb64_encryptexiti_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_BF_cfb64_encryptexiti_100_reg;
reg [7:0] main_BF_cfb64_encryptexiti_101;
reg [7:0] main_BF_cfb64_encryptexiti_101_reg;
reg [7:0] main_BF_cfb64_encryptexiti_102;
reg [7:0] main_BF_cfb64_encryptexiti_102_reg;
reg [31:0] main_BF_cfb64_encryptexiti_103;
reg [31:0] main_BF_cfb64_encryptexiti_103_reg;
reg [31:0] main_BF_cfb64_encryptexiti_104;
reg [31:0] main_BF_cfb64_encryptexiti_104_reg;
reg [7:0] main_BF_cfb64_encryptexiti_105;
reg [7:0] main_BF_cfb64_encryptexiti_105_reg;
reg  main_BF_cfb64_encryptexiti_106;
reg  main_BF_cfb64_encryptexiti_106_reg;
reg [31:0] main_BF_cfb64_encryptexiti_107;
reg [31:0] main_BF_cfb64_encryptexiti_107_reg;
reg [31:0] main_BF_cfb64_encryptexiti_108;
reg [31:0] main_BF_cfb64_encryptexiti_108_reg;
reg [31:0] main_BF_cfb64_encryptexiti_109;
reg [31:0] main_BF_cfb64_encryptexiti_109_reg;
reg  main_BF_cfb64_encryptexiti_exitcond;
reg  main_BF_cfb64_encryptexiti_exitcond_reg;
reg  main_blowfish_mainexit_111;
reg  main_blowfish_mainexit_111_reg;
reg [4:0] bf_init_P_address_a;
reg  bf_init_P_write_enable_a;
wire [31:0] bf_init_P_in_a;
wire [31:0] bf_init_P_out_a;
wire [4:0] bf_init_P_address_b;
wire  bf_init_P_write_enable_b;
wire [31:0] bf_init_P_in_b;
wire [31:0] bf_init_P_out_b;
reg [9:0] bf_init_S_address_a;
reg  bf_init_S_write_enable_a;
wire [31:0] bf_init_S_in_a;
wire [31:0] bf_init_S_out_a;
wire [9:0] bf_init_S_address_b;
wire  bf_init_S_write_enable_b;
wire [31:0] bf_init_S_in_b;
wire [31:0] bf_init_S_out_b;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [12:0] in_key_address_a;
reg  in_key_write_enable_a;
wire [7:0] in_key_in_a;
wire [7:0] in_key_out_a;
wire [12:0] in_key_address_b;
wire  in_key_write_enable_b;
wire [7:0] in_key_in_b;
wire [7:0] in_key_out_b;
reg [12:0] out_key_address_a;
reg  out_key_write_enable_a;
wire [7:0] out_key_in_a;
wire [7:0] out_key_out_a;
wire [12:0] out_key_address_b;
wire  out_key_write_enable_b;
wire [7:0] out_key_in_b;
wire [7:0] out_key_out_b;
reg [2:0] main_0_ukeyi_address_a;
reg  main_0_ukeyi_write_enable_a;
reg [7:0] main_0_ukeyi_in_a;
wire [7:0] main_0_ukeyi_out_a;
wire [2:0] main_0_ukeyi_address_b;
wire  main_0_ukeyi_write_enable_b;
wire [7:0] main_0_ukeyi_in_b;
wire [7:0] main_0_ukeyi_out_b;
reg [2:0] main_0_iveci_address_a;
reg  main_0_iveci_write_enable_a;
reg [7:0] main_0_iveci_in_a;
wire [7:0] main_0_iveci_out_a;
reg [2:0] main_0_iveci_address_b;
reg  main_0_iveci_write_enable_b;
reg [7:0] main_0_iveci_in_b;
wire [7:0] main_0_iveci_out_b;
reg  BF_encrypt_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_arg_data;
wire  BF_encrypt_memory_controller_enable_a;
wire  BF_encrypt_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] BF_encrypt_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] BF_encrypt_memory_controller_out_a;
wire [1:0] BF_encrypt_memory_controller_size_a;
wire  BF_encrypt_memory_controller_enable_b;
wire  BF_encrypt_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] BF_encrypt_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] BF_encrypt_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] BF_encrypt_memory_controller_out_b;
wire [1:0] BF_encrypt_memory_controller_size_b;
reg  BF_encrypt_memory_controller_waitrequest;
reg  BF_encrypt_finish_final;
reg  BF_encrypt_finish_reg;
wire  BF_encrypt_finish;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;


BF_encrypt BF_encrypt (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (BF_encrypt_memory_controller_enable_a),
	.memory_controller_address_a (BF_encrypt_memory_controller_address_a),
	.memory_controller_write_enable_a (BF_encrypt_memory_controller_write_enable_a),
	.memory_controller_in_a (BF_encrypt_memory_controller_in_a),
	.memory_controller_size_a (BF_encrypt_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (BF_encrypt_memory_controller_enable_b),
	.memory_controller_address_b (BF_encrypt_memory_controller_address_b),
	.memory_controller_write_enable_b (BF_encrypt_memory_controller_write_enable_b),
	.memory_controller_in_b (BF_encrypt_memory_controller_in_b),
	.memory_controller_size_b (BF_encrypt_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (BF_encrypt_start),
	.finish (BF_encrypt_finish),
	.arg_data (BF_encrypt_arg_data)
);

defparam
	BF_encrypt.tag_offset = tag_offset;

// Local Rams


// @bf_init_P = internal unnamed_addr constant [18 x i32] [i32 608135816, i32 -2052912941, i32 320440878, i32 57701188, i32 -1542899678, i32 698298832, i32 137296536, i32 -330404727, i32 1160258022, i32 ...
rom_dual_port bf_init_P (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( bf_init_P_address_a ),
	.address_b( bf_init_P_address_b ),
	.q_a( bf_init_P_out_a ),
	.q_b( bf_init_P_out_b)
);
defparam bf_init_P.width_a = 32;
defparam bf_init_P.width_b = 32;
defparam bf_init_P.widthad_a = 5;
defparam bf_init_P.widthad_b = 5;
defparam bf_init_P.numwords_a = 18;
defparam bf_init_P.numwords_b = 18;
defparam bf_init_P.latency = 1;
defparam bf_init_P.init_file = "bf_init_P.mif";


// @bf_init_S = internal unnamed_addr constant [1024 x i32] [i32 -785314906, i32 -1730169428, i32 805139163, i32 -803545161, i32 -1193168915, i32 1780907670, i32 -1166241723, i32 -248741991, i32 61457031...
rom_dual_port bf_init_S (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( bf_init_S_address_a ),
	.address_b( bf_init_S_address_b ),
	.q_a( bf_init_S_out_a ),
	.q_b( bf_init_S_out_b)
);
defparam bf_init_S.width_a = 32;
defparam bf_init_S.width_b = 32;
defparam bf_init_S.widthad_a = 10;
defparam bf_init_S.widthad_b = 10;
defparam bf_init_S.numwords_a = 1024;
defparam bf_init_S.numwords_b = 1024;
defparam bf_init_S.latency = 1;
defparam bf_init_S.init_file = "bf_init_S.mif";


// @in_key = internal unnamed_addr constant [5200 x i8] c"KurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelong...
rom_dual_port in_key (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( in_key_address_a ),
	.address_b( in_key_address_b ),
	.q_a( in_key_out_a ),
	.q_b( in_key_out_b)
);
defparam in_key.width_a = 8;
defparam in_key.width_b = 8;
defparam in_key.widthad_a = 13;
defparam in_key.widthad_b = 13;
defparam in_key.numwords_a = 5200;
defparam in_key.numwords_b = 5200;
defparam in_key.latency = 1;
defparam in_key.init_file = "in_key.mif";


// @out_key = internal unnamed_addr constant [5200 x i8] c"\05\8C\E517\F7\B3\16\EAt\C5ih\FA\1Ej\FD|)i\EF\FC\BD\EF\B6?\BB\8C\EF\FD\8E\D8\1A\89\AA\E14\F8\0D\ADM4\F9C\C2\F6\CF\05M\11\AA\18!H\FC\09\1C\07!\90...
rom_dual_port out_key (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( out_key_address_a ),
	.address_b( out_key_address_b ),
	.q_a( out_key_out_a ),
	.q_b( out_key_out_b)
);
defparam out_key.width_a = 8;
defparam out_key.width_b = 8;
defparam out_key.widthad_a = 13;
defparam out_key.widthad_b = 13;
defparam out_key.numwords_a = 5200;
defparam out_key.numwords_b = 5200;
defparam out_key.latency = 1;
defparam out_key.init_file = "out_key.mif";


//   %ukey.i = alloca [8 x i8], align 1
ram_dual_port main_0_ukeyi (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_ukeyi_address_a ),
	.address_b( main_0_ukeyi_address_b ),
	.wren_a( main_0_ukeyi_write_enable_a ),
	.wren_b( main_0_ukeyi_write_enable_b ),
	.data_a( main_0_ukeyi_in_a ),
	.data_b( main_0_ukeyi_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_ukeyi_out_a ),
	.q_b( main_0_ukeyi_out_b)
);
defparam main_0_ukeyi.width_a = 8;
defparam main_0_ukeyi.width_b = 8;
defparam main_0_ukeyi.widthad_a = 3;
defparam main_0_ukeyi.widthad_b = 3;
defparam main_0_ukeyi.width_be_a = 1;
defparam main_0_ukeyi.width_be_b = 1;
defparam main_0_ukeyi.numwords_a = 8;
defparam main_0_ukeyi.numwords_b = 8;
defparam main_0_ukeyi.latency = 1;


//   %ivec.i = alloca [8 x i8], align 1
ram_dual_port main_0_iveci (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_iveci_address_a ),
	.address_b( main_0_iveci_address_b ),
	.wren_a( main_0_iveci_write_enable_a ),
	.wren_b( main_0_iveci_write_enable_b ),
	.data_a( main_0_iveci_in_a ),
	.data_b( main_0_iveci_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_iveci_out_a ),
	.q_b( main_0_iveci_out_b)
);
defparam main_0_iveci.width_a = 8;
defparam main_0_iveci.width_b = 8;
defparam main_0_iveci.widthad_a = 3;
defparam main_0_iveci.widthad_b = 3;
defparam main_0_iveci.width_be_a = 1;
defparam main_0_iveci.width_be_b = 1;
defparam main_0_iveci.numwords_a = 8;
defparam main_0_iveci.numwords_b = 8;
defparam main_0_iveci.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %blowfish_main.exit*/
	/*   %110 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str, i32 0, i32 0), i32 %108) #1*/
	if ((cur_state == LEGUP_F_main_BB_blowfish_mainexit_56)) begin
		$write("Result: %d", $signed(main_BF_cfb64_encryptexiti_108_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_BF_cfb64_encryptexiti_108_reg) === 1'bX) finish <= 0;
	end
	/* main: %112*/
	/*   %113 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__112_57)) begin
		$write("RESULT: PASS");
	end
	/* main: %114*/
	/*   %115 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__114_58)) begin
		$write("RESULT: FAIL");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_BF_cfb64_encryptexiti_53:
		next_state = LEGUP_F_main_BB_BF_cfb64_encryptexiti_54;
LEGUP_F_main_BB_BF_cfb64_encryptexiti_54:
		next_state = LEGUP_F_main_BB_BF_cfb64_encryptexiti_55;
LEGUP_F_main_BB_BF_cfb64_encryptexiti_55:
	if ((main_BF_cfb64_encryptexiti_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_blowfish_mainexit_56;
	else if ((main_BF_cfb64_encryptexiti_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_loopexiti_37;
LEGUP_F_main_BB_BF_set_keyexiti_36:
		next_state = LEGUP_F_main_BB_loopexiti_37;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__112_57:
		next_state = LEGUP_F_main_BB__116_59;
LEGUP_F_main_BB__114_58:
		next_state = LEGUP_F_main_BB__116_59;
LEGUP_F_main_BB__116_59:
		next_state = LEGUP_0;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__1_3:
	if ((main_1_exitcond22_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrphiiipreheader_4;
	else if ((main_1_exitcond22_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__33_21:
		next_state = LEGUP_F_main_BB__33_22;
LEGUP_F_main_BB__33_22:
		next_state = LEGUP_F_main_BB__36_23;
LEGUP_F_main_BB__36_23:
		next_state = LEGUP_function_call_24;
LEGUP_F_main_BB__36_25:
		next_state = LEGUP_F_main_BB__36_26;
LEGUP_F_main_BB__36_26:
		next_state = LEGUP_F_main_BB__36_27;
LEGUP_F_main_BB__36_27:
		next_state = LEGUP_F_main_BB__36_28;
LEGUP_F_main_BB__36_28:
	if ((main_36_exitcond7_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderiipreheader_29;
	else if ((main_36_exitcond7_reg == 1'd0))
		next_state = LEGUP_F_main_BB__36_23;
LEGUP_F_main_BB__55_39:
		next_state = LEGUP_F_main_BB__55_40;
LEGUP_F_main_BB__55_40:
		next_state = LEGUP_F_main_BB__55_41;
LEGUP_F_main_BB__55_41:
		next_state = LEGUP_F_main_BB__55_42;
LEGUP_F_main_BB__55_42:
		next_state = LEGUP_F_main_BB__55_43;
LEGUP_F_main_BB__55_43:
		next_state = LEGUP_F_main_BB__55_44;
LEGUP_F_main_BB__55_44:
		next_state = LEGUP_function_call_45;
LEGUP_F_main_BB__55_46:
		next_state = LEGUP_F_main_BB__55_47;
LEGUP_F_main_BB__55_47:
		next_state = LEGUP_F_main_BB__55_48;
LEGUP_F_main_BB__55_48:
		next_state = LEGUP_F_main_BB__55_49;
LEGUP_F_main_BB__55_49:
		next_state = LEGUP_F_main_BB__55_50;
LEGUP_F_main_BB__55_50:
		next_state = LEGUP_F_main_BB__55_51;
LEGUP_F_main_BB__55_51:
		next_state = LEGUP_F_main_BB__55_52;
LEGUP_F_main_BB__55_52:
		next_state = LEGUP_F_main_BB_BF_cfb64_encryptexiti_53;
LEGUP_F_main_BB__7_13:
		next_state = LEGUP_F_main_BB__7_14;
LEGUP_F_main_BB__7_14:
		next_state = LEGUP_F_main_BB__7_15;
LEGUP_F_main_BB__7_15:
		next_state = LEGUP_F_main_BB__7_16;
LEGUP_F_main_BB__7_16:
		next_state = LEGUP_F_main_BB__7_17;
LEGUP_F_main_BB__7_17:
		next_state = LEGUP_F_main_BB__7_18;
LEGUP_F_main_BB__7_18:
		next_state = LEGUP_F_main_BB__7_19;
LEGUP_F_main_BB__7_19:
		next_state = LEGUP_F_main_BB__7_20;
LEGUP_F_main_BB__7_20:
	if ((main_7_exitcond10_reg == 1'd1))
		next_state = LEGUP_F_main_BB__33_21;
	else if ((main_7_exitcond10_reg == 1'd0))
		next_state = LEGUP_F_main_BB__7_13;
LEGUP_F_main_BB_blowfish_mainexit_56:
	if ((main_blowfish_mainexit_111 == 1'd1))
		next_state = LEGUP_F_main_BB__112_57;
	else if ((main_blowfish_mainexit_111 == 1'd0))
		next_state = LEGUP_F_main_BB__114_58;
LEGUP_F_main_BB_loopexiti_37:
		next_state = LEGUP_F_main_BB_loopexiti_38;
LEGUP_F_main_BB_loopexiti_38:
	if ((main_loopexiti_54_reg == 1'd1))
		next_state = LEGUP_F_main_BB__55_39;
	else if ((main_loopexiti_54_reg == 1'd0))
		next_state = LEGUP_F_main_BB_BF_cfb64_encryptexiti_53;
LEGUP_F_main_BB_lrphi4ii_10:
		next_state = LEGUP_F_main_BB_lrphi4ii_11;
LEGUP_F_main_BB_lrphi4ii_11:
	if ((main_lrphi4ii_exitcond14_reg == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexit5ii_12;
	else if ((main_lrphi4ii_exitcond14_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphi4ii_9;
LEGUP_F_main_BB_lrphi4ii_9:
		next_state = LEGUP_F_main_BB_lrphi4ii_10;
LEGUP_F_main_BB_lrphi4iipreheader_8:
		next_state = LEGUP_F_main_BB_lrphi4ii_9;
LEGUP_F_main_BB_lrphiii_5:
		next_state = LEGUP_F_main_BB_lrphiii_6;
LEGUP_F_main_BB_lrphiii_6:
		next_state = LEGUP_F_main_BB_lrphiii_7;
LEGUP_F_main_BB_lrphiii_7:
	if ((main_lrphiii_exitcond19_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi4iipreheader_8;
	else if ((main_lrphiii_exitcond19_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiii_5;
LEGUP_F_main_BB_lrphiiipreheader_4:
		next_state = LEGUP_F_main_BB_lrphiii_5;
LEGUP_F_main_BB_memcpyexit5ii_12:
		next_state = LEGUP_F_main_BB__7_13;
LEGUP_F_main_BB_preheaderii_30:
		next_state = LEGUP_function_call_31;
LEGUP_F_main_BB_preheaderii_32:
		next_state = LEGUP_F_main_BB_preheaderii_33;
LEGUP_F_main_BB_preheaderii_33:
		next_state = LEGUP_F_main_BB_preheaderii_34;
LEGUP_F_main_BB_preheaderii_34:
		next_state = LEGUP_F_main_BB_preheaderii_35;
LEGUP_F_main_BB_preheaderii_35:
	if ((main_preheaderii_exitcond2_reg == 1'd1))
		next_state = LEGUP_F_main_BB_BF_set_keyexiti_36;
	else if ((main_preheaderii_exitcond2_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderii_30;
LEGUP_F_main_BB_preheaderiipreheader_29:
		next_state = LEGUP_F_main_BB_preheaderii_30;
LEGUP_function_call_24:
	if ((BF_encrypt_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__36_25;
LEGUP_function_call_31:
	if ((BF_encrypt_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderii_32;
LEGUP_function_call_45:
	if ((BF_encrypt_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__55_46;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %i.07.i = phi i32 [ 0, %0 ], [ %2, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_i07i = 32'd0;
	end
	/* main: %1*/
	/*   %i.07.i = phi i32 [ 0, %0 ], [ %2, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__1_3) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond22_reg == 1'd0))) */ begin
		main_1_i07i = main_1_2_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %i.07.i = phi i32 [ 0, %0 ], [ %2, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_i07i_reg <= main_1_i07i;
		if (start == 1'b0 && ^(main_1_i07i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i07i_reg"); $finish; end
	end
	/* main: %1*/
	/*   %i.07.i = phi i32 [ 0, %0 ], [ %2, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_3) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond22_reg == 1'd0))) begin
		main_1_i07i_reg <= main_1_i07i;
		if (start == 1'b0 && ^(main_1_i07i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i07i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep23 = getelementptr [8 x i8]* %ivec.i, i32 0, i32 %i.07.i*/
		main_1_scevgep23 = (1'd0 | (1 * main_1_i07i_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep23 = getelementptr [8 x i8]* %ivec.i, i32 0, i32 %i.07.i*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_scevgep23_reg <= main_1_scevgep23;
		if (start == 1'b0 && ^(main_1_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep24 = getelementptr [8 x i8]* %ukey.i, i32 0, i32 %i.07.i*/
		main_1_scevgep24 = (1'd0 | (1 * main_1_i07i_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep24 = getelementptr [8 x i8]* %ukey.i, i32 0, i32 %i.07.i*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_scevgep24_reg <= main_1_scevgep24;
		if (start == 1'b0 && ^(main_1_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = add nsw i32 %i.07.i, 1*/
		main_1_2 = (main_1_i07i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = add nsw i32 %i.07.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond22 = icmp eq i32 %2, 8*/
		main_1_exitcond22 = (main_1_2 == 32'd8);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond22 = icmp eq i32 %2, 8*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_exitcond22_reg <= main_1_exitcond22;
		if (start == 1'b0 && ^(main_1_exitcond22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %indvar17 = phi i32 [ 0, %.lr.ph.i.i.i.preheader ], [ %indvar.next18, %.lr.ph.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiiipreheader_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiii_indvar17 = 32'd0;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %indvar17 = phi i32 [ 0, %.lr.ph.i.i.i.preheader ], [ %indvar.next18, %.lr.ph.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiii_7) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiii_exitcond19_reg == 1'd0))) */ begin
		main_lrphiii_indvar17 = main_lrphiii_indvarnext18_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %indvar17 = phi i32 [ 0, %.lr.ph.i.i.i.preheader ], [ %indvar.next18, %.lr.ph.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiiipreheader_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiii_indvar17_reg <= main_lrphiii_indvar17;
		if (start == 1'b0 && ^(main_lrphiii_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_indvar17_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i*/
	/*   %indvar17 = phi i32 [ 0, %.lr.ph.i.i.i.preheader ], [ %indvar.next18, %.lr.ph.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiii_7) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiii_exitcond19_reg == 1'd0))) begin
		main_lrphiii_indvar17_reg <= main_lrphiii_indvar17;
		if (start == 1'b0 && ^(main_lrphiii_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_indvar17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %p2.03.i.i.i = getelementptr [18 x i32]* @bf_init_P, i32 0, i32 %indvar17*/
		main_lrphiii_p203iii = (1'd0 | (4 * main_lrphiii_indvar17_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %p2.03.i.i.i = getelementptr [18 x i32]* @bf_init_P, i32 0, i32 %indvar17*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_5)) begin
		main_lrphiii_p203iii_reg <= main_lrphiii_p203iii;
		if (start == 1'b0 && ^(main_lrphiii_p203iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_p203iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %p1.02.i.i.i = getelementptr [18 x i32]* @key_P, i32 0, i32 %indvar17*/
		main_lrphiii_p102iii = (`TAG_g_key_P_a | (4 * main_lrphiii_indvar17_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %p1.02.i.i.i = getelementptr [18 x i32]* @key_P, i32 0, i32 %indvar17*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_5)) begin
		main_lrphiii_p102iii_reg <= main_lrphiii_p102iii;
		if (start == 1'b0 && ^(main_lrphiii_p102iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_p102iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %3 = load i32* %p2.03.i.i.i, align 4, !tbaa !4*/
		main_lrphiii_3 = bf_init_P_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %3 = load i32* %p2.03.i.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_6)) begin
		main_lrphiii_3_reg <= main_lrphiii_3;
		if (start == 1'b0 && ^(main_lrphiii_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
		main_lrphiii_indvarnext18 = (main_lrphiii_indvar17_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_5)) begin
		main_lrphiii_indvarnext18_reg <= main_lrphiii_indvarnext18;
		if (start == 1'b0 && ^(main_lrphiii_indvarnext18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_indvarnext18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %exitcond19 = icmp eq i32 %indvar.next18, 18*/
		main_lrphiii_exitcond19 = (main_lrphiii_indvarnext18 == 32'd18);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %exitcond19 = icmp eq i32 %indvar.next18, 18*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_5)) begin
		main_lrphiii_exitcond19_reg <= main_lrphiii_exitcond19;
		if (start == 1'b0 && ^(main_lrphiii_exitcond19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_exitcond19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.i4.i.i.preheader ], [ %indvar.next13, %.lr.ph.i4.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi4iipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi4ii_indvar12 = 32'd0;
	end
	/* main: %.lr.ph.i4.i.i*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.i4.i.i.preheader ], [ %indvar.next13, %.lr.ph.i4.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi4ii_11) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi4ii_exitcond14_reg == 1'd0))) */ begin
		main_lrphi4ii_indvar12 = main_lrphi4ii_indvarnext13_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.i4.i.i.preheader ], [ %indvar.next13, %.lr.ph.i4.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi4iipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi4ii_indvar12_reg <= main_lrphi4ii_indvar12;
		if (start == 1'b0 && ^(main_lrphi4ii_indvar12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_indvar12_reg"); $finish; end
	end
	/* main: %.lr.ph.i4.i.i*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.i4.i.i.preheader ], [ %indvar.next13, %.lr.ph.i4.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi4ii_11) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi4ii_exitcond14_reg == 1'd0))) begin
		main_lrphi4ii_indvar12_reg <= main_lrphi4ii_indvar12;
		if (start == 1'b0 && ^(main_lrphi4ii_indvar12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_indvar12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %p2.03.i1.i.i = getelementptr [1024 x i32]* @bf_init_S, i32 0, i32 %indvar12*/
		main_lrphi4ii_p203i1ii = (1'd0 | (4 * main_lrphi4ii_indvar12_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %p2.03.i1.i.i = getelementptr [1024 x i32]* @bf_init_S, i32 0, i32 %indvar12*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_9)) begin
		main_lrphi4ii_p203i1ii_reg <= main_lrphi4ii_p203i1ii;
		if (start == 1'b0 && ^(main_lrphi4ii_p203i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_p203i1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %p1.02.i2.i.i = getelementptr [1024 x i32]* @key_S, i32 0, i32 %indvar12*/
		main_lrphi4ii_p102i2ii = (`TAG_g_key_S_a | (4 * main_lrphi4ii_indvar12_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %p1.02.i2.i.i = getelementptr [1024 x i32]* @key_S, i32 0, i32 %indvar12*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_9)) begin
		main_lrphi4ii_p102i2ii_reg <= main_lrphi4ii_p102i2ii;
		if (start == 1'b0 && ^(main_lrphi4ii_p102i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_p102i2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %4 = load i32* %p2.03.i1.i.i, align 4, !tbaa !4*/
		main_lrphi4ii_4 = bf_init_S_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %4 = load i32* %p2.03.i1.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_10)) begin
		main_lrphi4ii_4_reg <= main_lrphi4ii_4;
		if (start == 1'b0 && ^(main_lrphi4ii_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %indvar.next13 = add i32 %indvar12, 1*/
		main_lrphi4ii_indvarnext13 = (main_lrphi4ii_indvar12_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %indvar.next13 = add i32 %indvar12, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_9)) begin
		main_lrphi4ii_indvarnext13_reg <= main_lrphi4ii_indvarnext13;
		if (start == 1'b0 && ^(main_lrphi4ii_indvarnext13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_indvarnext13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %exitcond14 = icmp eq i32 %indvar.next13, 1024*/
		main_lrphi4ii_exitcond14 = (main_lrphi4ii_indvarnext13 == 32'd1024);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i4.i.i*/
	/*   %exitcond14 = icmp eq i32 %indvar.next13, 1024*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_9)) begin
		main_lrphi4ii_exitcond14_reg <= main_lrphi4ii_exitcond14;
		if (start == 1'b0 && ^(main_lrphi4ii_exitcond14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi4ii_exitcond14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit5.i.i*/
	/*   %5 = getelementptr inbounds [8 x i8]* %ukey.i, i32 0, i32 0*/
if (reset) begin main_memcpyexit5ii_5 = 0; end
		main_memcpyexit5ii_5 = 1'd0;
end
always @(posedge clk) begin
	/* main: %memcpy.exit5.i.i*/
	/*   %5 = getelementptr inbounds [8 x i8]* %ukey.i, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexit5ii_12)) begin
		main_memcpyexit5ii_5_reg <= main_memcpyexit5ii_5;
		if (start == 1'b0 && ^(main_memcpyexit5ii_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexit5ii_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit5.i.i*/
	/*   %6 = getelementptr inbounds [8 x i8]* %ukey.i, i32 0, i32 8*/
if (reset) begin main_memcpyexit5ii_6 = 0; end
		main_memcpyexit5ii_6 = (1'd0 | (1 * 32'd8));
end
always @(posedge clk) begin
	/* main: %memcpy.exit5.i.i*/
	/*   %6 = getelementptr inbounds [8 x i8]* %ukey.i, i32 0, i32 8*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexit5ii_12)) begin
		main_memcpyexit5ii_6_reg <= main_memcpyexit5ii_6;
		if (start == 1'b0 && ^(main_memcpyexit5ii_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexit5ii_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %d.05.i.i = phi i8* [ %5, %memcpy.exit5.i.i ], [ %d.4.i.i, %7 ]*/
	if (((cur_state == LEGUP_F_main_BB_memcpyexit5ii_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_d05ii = main_memcpyexit5ii_5;
	end
	/* main: %7*/
	/*   %d.05.i.i = phi i8* [ %5, %memcpy.exit5.i.i ], [ %d.4.i.i, %7 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__7_20) & (memory_controller_waitrequest == 1'd0)) & (main_7_exitcond10_reg == 1'd0))) */ begin
		main_7_d05ii = main_7_d4ii;
	end
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %d.05.i.i = phi i8* [ %5, %memcpy.exit5.i.i ], [ %d.4.i.i, %7 ]*/
	if (((cur_state == LEGUP_F_main_BB_memcpyexit5ii_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_d05ii_reg <= main_7_d05ii;
		if (start == 1'b0 && ^(main_7_d05ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_d05ii_reg"); $finish; end
	end
	/* main: %7*/
	/*   %d.05.i.i = phi i8* [ %5, %memcpy.exit5.i.i ], [ %d.4.i.i, %7 ]*/
	if ((((cur_state == LEGUP_F_main_BB__7_20) & (memory_controller_waitrequest == 1'd0)) & (main_7_exitcond10_reg == 1'd0))) begin
		main_7_d05ii_reg <= main_7_d05ii;
		if (start == 1'b0 && ^(main_7_d05ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_d05ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %i.04.i.i = phi i32 [ 0, %memcpy.exit5.i.i ], [ %32, %7 ]*/
	if (((cur_state == LEGUP_F_main_BB_memcpyexit5ii_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_i04ii = 32'd0;
	end
	/* main: %7*/
	/*   %i.04.i.i = phi i32 [ 0, %memcpy.exit5.i.i ], [ %32, %7 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__7_20) & (memory_controller_waitrequest == 1'd0)) & (main_7_exitcond10_reg == 1'd0))) */ begin
		main_7_i04ii = main_7_32_reg;
	end
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %i.04.i.i = phi i32 [ 0, %memcpy.exit5.i.i ], [ %32, %7 ]*/
	if (((cur_state == LEGUP_F_main_BB_memcpyexit5ii_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_7_i04ii_reg <= main_7_i04ii;
		if (start == 1'b0 && ^(main_7_i04ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_i04ii_reg"); $finish; end
	end
	/* main: %7*/
	/*   %i.04.i.i = phi i32 [ 0, %memcpy.exit5.i.i ], [ %32, %7 ]*/
	if ((((cur_state == LEGUP_F_main_BB__7_20) & (memory_controller_waitrequest == 1'd0)) & (main_7_exitcond10_reg == 1'd0))) begin
		main_7_i04ii_reg <= main_7_i04ii;
		if (start == 1'b0 && ^(main_7_i04ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_i04ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %scevgep11 = getelementptr [18 x i32]* @key_P, i32 0, i32 %i.04.i.i*/
		main_7_scevgep11 = (`TAG_g_key_P_a | (4 * main_7_i04ii_reg));
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %scevgep11 = getelementptr [18 x i32]* @key_P, i32 0, i32 %i.04.i.i*/
	if ((cur_state == LEGUP_F_main_BB__7_13)) begin
		main_7_scevgep11_reg <= main_7_scevgep11;
		if (start == 1'b0 && ^(main_7_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %8 = getelementptr inbounds i8* %d.05.i.i, i32 1*/
		main_7_8 = (main_7_d05ii_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %8 = getelementptr inbounds i8* %d.05.i.i, i32 1*/
	if ((cur_state == LEGUP_F_main_BB__7_13)) begin
		main_7_8_reg <= main_7_8;
		if (start == 1'b0 && ^(main_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %9 = load i8* %d.05.i.i, align 1, !tbaa !1*/
		main_7_9 = main_0_ukeyi_out_a;
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %9 = load i8* %d.05.i.i, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__7_14)) begin
		main_7_9_reg <= main_7_9;
		if (start == 1'b0 && ^(main_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %10 = zext i8 %9 to i32*/
		main_7_10 = main_7_9;
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %10 = zext i8 %9 to i32*/
	if ((cur_state == LEGUP_F_main_BB__7_14)) begin
		main_7_10_reg <= main_7_10;
		if (start == 1'b0 && ^(main_7_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %11 = icmp ult i8* %8, %6*/
		main_7_11 = (main_7_8 < main_memcpyexit5ii_6_reg);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %11 = icmp ult i8* %8, %6*/
	if ((cur_state == LEGUP_F_main_BB__7_13)) begin
		main_7_11_reg <= main_7_11;
		if (start == 1'b0 && ^(main_7_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %.data.i.i = select i1 %11, i8* %8, i8* %5*/
		main_7_dataii = (main_7_11_reg ? main_7_8_reg : main_memcpyexit5ii_5_reg);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %.data.i.i = select i1 %11, i8* %8, i8* %5*/
	if ((cur_state == LEGUP_F_main_BB__7_14)) begin
		main_7_dataii_reg <= main_7_dataii;
		if (start == 1'b0 && ^(main_7_dataii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_dataii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %12 = shl nuw nsw i32 %10, 8*/
		main_7_12 = (main_7_10 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %12 = shl nuw nsw i32 %10, 8*/
	if ((cur_state == LEGUP_F_main_BB__7_14)) begin
		main_7_12_reg <= main_7_12;
		if (start == 1'b0 && ^(main_7_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %13 = getelementptr inbounds i8* %.data.i.i, i32 1*/
		main_7_13 = (main_7_dataii + (1 * 32'd1));
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %13 = getelementptr inbounds i8* %.data.i.i, i32 1*/
	if ((cur_state == LEGUP_F_main_BB__7_14)) begin
		main_7_13_reg <= main_7_13;
		if (start == 1'b0 && ^(main_7_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %14 = load i8* %.data.i.i, align 1, !tbaa !1*/
		main_7_14 = main_0_ukeyi_out_a;
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %14 = load i8* %.data.i.i, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__7_15)) begin
		main_7_14_reg <= main_7_14;
		if (start == 1'b0 && ^(main_7_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %15 = zext i8 %14 to i32*/
		main_7_15 = main_7_14;
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %15 = zext i8 %14 to i32*/
	if ((cur_state == LEGUP_F_main_BB__7_15)) begin
		main_7_15_reg <= main_7_15;
		if (start == 1'b0 && ^(main_7_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %16 = or i32 %12, %15*/
		main_7_16 = (main_7_12_reg | main_7_15);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %16 = or i32 %12, %15*/
	if ((cur_state == LEGUP_F_main_BB__7_15)) begin
		main_7_16_reg <= main_7_16;
		if (start == 1'b0 && ^(main_7_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %17 = icmp ult i8* %13, %6*/
		main_7_17 = (main_7_13_reg < main_memcpyexit5ii_6_reg);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %17 = icmp ult i8* %13, %6*/
	if ((cur_state == LEGUP_F_main_BB__7_15)) begin
		main_7_17_reg <= main_7_17;
		if (start == 1'b0 && ^(main_7_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %d.2.i.i = select i1 %17, i8* %13, i8* %5*/
		main_7_d2ii = (main_7_17_reg ? main_7_13_reg : main_memcpyexit5ii_5_reg);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %d.2.i.i = select i1 %17, i8* %13, i8* %5*/
	if ((cur_state == LEGUP_F_main_BB__7_16)) begin
		main_7_d2ii_reg <= main_7_d2ii;
		if (start == 1'b0 && ^(main_7_d2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_d2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %18 = shl nuw nsw i32 %16, 8*/
		main_7_18 = (main_7_16 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %18 = shl nuw nsw i32 %16, 8*/
	if ((cur_state == LEGUP_F_main_BB__7_15)) begin
		main_7_18_reg <= main_7_18;
		if (start == 1'b0 && ^(main_7_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %19 = getelementptr inbounds i8* %d.2.i.i, i32 1*/
		main_7_19 = (main_7_d2ii + (1 * 32'd1));
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %19 = getelementptr inbounds i8* %d.2.i.i, i32 1*/
	if ((cur_state == LEGUP_F_main_BB__7_16)) begin
		main_7_19_reg <= main_7_19;
		if (start == 1'b0 && ^(main_7_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %20 = load i8* %d.2.i.i, align 1, !tbaa !1*/
		main_7_20 = main_0_ukeyi_out_a;
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %20 = load i8* %d.2.i.i, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__7_17)) begin
		main_7_20_reg <= main_7_20;
		if (start == 1'b0 && ^(main_7_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %21 = zext i8 %20 to i32*/
		main_7_21 = main_7_20;
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %21 = zext i8 %20 to i32*/
	if ((cur_state == LEGUP_F_main_BB__7_17)) begin
		main_7_21_reg <= main_7_21;
		if (start == 1'b0 && ^(main_7_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %22 = or i32 %18, %21*/
		main_7_22 = (main_7_18_reg | main_7_21);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %22 = or i32 %18, %21*/
	if ((cur_state == LEGUP_F_main_BB__7_17)) begin
		main_7_22_reg <= main_7_22;
		if (start == 1'b0 && ^(main_7_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %23 = icmp ult i8* %19, %6*/
		main_7_23 = (main_7_19_reg < main_memcpyexit5ii_6_reg);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %23 = icmp ult i8* %19, %6*/
	if ((cur_state == LEGUP_F_main_BB__7_17)) begin
		main_7_23_reg <= main_7_23;
		if (start == 1'b0 && ^(main_7_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %.data1.i.i = select i1 %23, i8* %19, i8* %5*/
		main_7_data1ii = (main_7_23_reg ? main_7_19_reg : main_memcpyexit5ii_5_reg);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %.data1.i.i = select i1 %23, i8* %19, i8* %5*/
	if ((cur_state == LEGUP_F_main_BB__7_18)) begin
		main_7_data1ii_reg <= main_7_data1ii;
		if (start == 1'b0 && ^(main_7_data1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_data1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %24 = shl nuw i32 %22, 8*/
		main_7_24 = (main_7_22 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %24 = shl nuw i32 %22, 8*/
	if ((cur_state == LEGUP_F_main_BB__7_17)) begin
		main_7_24_reg <= main_7_24;
		if (start == 1'b0 && ^(main_7_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %25 = getelementptr inbounds i8* %.data1.i.i, i32 1*/
		main_7_25 = (main_7_data1ii + (1 * 32'd1));
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %25 = getelementptr inbounds i8* %.data1.i.i, i32 1*/
	if ((cur_state == LEGUP_F_main_BB__7_18)) begin
		main_7_25_reg <= main_7_25;
		if (start == 1'b0 && ^(main_7_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %26 = load i8* %.data1.i.i, align 1, !tbaa !1*/
		main_7_26 = main_0_ukeyi_out_a;
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %26 = load i8* %.data1.i.i, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__7_19)) begin
		main_7_26_reg <= main_7_26;
		if (start == 1'b0 && ^(main_7_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %27 = zext i8 %26 to i32*/
		main_7_27 = main_7_26;
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %27 = zext i8 %26 to i32*/
	if ((cur_state == LEGUP_F_main_BB__7_19)) begin
		main_7_27_reg <= main_7_27;
		if (start == 1'b0 && ^(main_7_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %28 = or i32 %24, %27*/
		main_7_28 = (main_7_24_reg | main_7_27);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %28 = or i32 %24, %27*/
	if ((cur_state == LEGUP_F_main_BB__7_19)) begin
		main_7_28_reg <= main_7_28;
		if (start == 1'b0 && ^(main_7_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %29 = icmp ult i8* %25, %6*/
		main_7_29 = (main_7_25_reg < main_memcpyexit5ii_6_reg);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %29 = icmp ult i8* %25, %6*/
	if ((cur_state == LEGUP_F_main_BB__7_19)) begin
		main_7_29_reg <= main_7_29;
		if (start == 1'b0 && ^(main_7_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %d.4.i.i = select i1 %29, i8* %25, i8* %5*/
		main_7_d4ii = (main_7_29_reg ? main_7_25_reg : main_memcpyexit5ii_5_reg);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %d.4.i.i = select i1 %29, i8* %25, i8* %5*/
	if ((cur_state == LEGUP_F_main_BB__7_20)) begin
		main_7_d4ii_reg <= main_7_d4ii;
		if (start == 1'b0 && ^(main_7_d4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_d4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %30 = load i32* %scevgep11, align 4, !tbaa !4*/
		main_7_30 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %30 = load i32* %scevgep11, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__7_15)) begin
		main_7_30_reg <= main_7_30;
		if (start == 1'b0 && ^(main_7_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %31 = xor i32 %28, %30*/
		main_7_31 = (main_7_28 ^ main_7_30_reg);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %31 = xor i32 %28, %30*/
	if ((cur_state == LEGUP_F_main_BB__7_19)) begin
		main_7_31_reg <= main_7_31;
		if (start == 1'b0 && ^(main_7_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %32 = add nsw i32 %i.04.i.i, 1*/
		main_7_32 = (main_7_i04ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %32 = add nsw i32 %i.04.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__7_13)) begin
		main_7_32_reg <= main_7_32;
		if (start == 1'b0 && ^(main_7_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %exitcond10 = icmp eq i32 %32, 18*/
		main_7_exitcond10 = (main_7_32 == 32'd18);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %exitcond10 = icmp eq i32 %32, 18*/
	if ((cur_state == LEGUP_F_main_BB__7_13)) begin
		main_7_exitcond10_reg <= main_7_exitcond10;
		if (start == 1'b0 && ^(main_7_exitcond10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_exitcond10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %34 = getelementptr inbounds [2 x i32]* %in.i.i, i32 0, i32 0*/
if (reset) begin main_33_34 = 0; end
		main_33_34 = `TAG_main_0_inii_a;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %34 = getelementptr inbounds [2 x i32]* %in.i.i, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		main_33_34_reg <= main_33_34;
		if (start == 1'b0 && ^(main_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %35 = getelementptr inbounds [2 x i32]* %in.i.i, i32 0, i32 1*/
if (reset) begin main_33_35 = 0; end
		main_33_35 = (`TAG_main_0_inii_a | (4 * 32'd1));
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %35 = getelementptr inbounds [2 x i32]* %in.i.i, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		main_33_35_reg <= main_33_35;
		if (start == 1'b0 && ^(main_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %indvar5 = phi i32 [ %indvar.next6, %36 ], [ 0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_36_indvar5 = 32'd0;
	end
	/* main: %36*/
	/*   %indvar5 = phi i32 [ %indvar.next6, %36 ], [ 0, %33 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__36_28) & (memory_controller_waitrequest == 1'd0)) & (main_36_exitcond7_reg == 1'd0))) */ begin
		main_36_indvar5 = main_36_indvarnext6_reg;
	end
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %indvar5 = phi i32 [ %indvar.next6, %36 ], [ 0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_36_indvar5_reg <= main_36_indvar5;
		if (start == 1'b0 && ^(main_36_indvar5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_indvar5_reg"); $finish; end
	end
	/* main: %36*/
	/*   %indvar5 = phi i32 [ %indvar.next6, %36 ], [ 0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__36_28) & (memory_controller_waitrequest == 1'd0)) & (main_36_exitcond7_reg == 1'd0))) begin
		main_36_indvar5_reg <= main_36_indvar5;
		if (start == 1'b0 && ^(main_36_indvar5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_indvar5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %37 = shl i32 %indvar5, 1*/
		main_36_37 = (main_36_indvar5_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %37 = shl i32 %indvar5, 1*/
	if ((cur_state == LEGUP_F_main_BB__36_23)) begin
		main_36_37_reg <= main_36_37;
		if (start == 1'b0 && ^(main_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %38 = or i32 %37, 1*/
		main_36_38 = (main_36_37 | 32'd1);
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %38 = or i32 %37, 1*/
	if ((cur_state == LEGUP_F_main_BB__36_23)) begin
		main_36_38_reg <= main_36_38;
		if (start == 1'b0 && ^(main_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %scevgep8 = getelementptr [18 x i32]* @key_P, i32 0, i32 %38*/
		main_36_scevgep8 = (`TAG_g_key_P_a | (4 * main_36_38));
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %scevgep8 = getelementptr [18 x i32]* @key_P, i32 0, i32 %38*/
	if ((cur_state == LEGUP_F_main_BB__36_23)) begin
		main_36_scevgep8_reg <= main_36_scevgep8;
		if (start == 1'b0 && ^(main_36_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %scevgep9 = getelementptr [18 x i32]* @key_P, i32 0, i32 %37*/
		main_36_scevgep9 = (`TAG_g_key_P_a | (4 * main_36_37));
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %scevgep9 = getelementptr [18 x i32]* @key_P, i32 0, i32 %37*/
	if ((cur_state == LEGUP_F_main_BB__36_23)) begin
		main_36_scevgep9_reg <= main_36_scevgep9;
		if (start == 1'b0 && ^(main_36_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_scevgep9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %39 = load i32* %34, align 4, !tbaa !4*/
		main_36_39 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %39 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		main_36_39_reg <= main_36_39;
		if (start == 1'b0 && ^(main_36_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %40 = load i32* %35, align 4, !tbaa !4*/
		main_36_40 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %40 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		main_36_40_reg <= main_36_40;
		if (start == 1'b0 && ^(main_36_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %indvar.next6 = add i32 %indvar5, 1*/
		main_36_indvarnext6 = (main_36_indvar5_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %indvar.next6 = add i32 %indvar5, 1*/
	if ((cur_state == LEGUP_F_main_BB__36_23)) begin
		main_36_indvarnext6_reg <= main_36_indvarnext6;
		if (start == 1'b0 && ^(main_36_indvarnext6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_indvarnext6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %exitcond7 = icmp eq i32 %indvar.next6, 9*/
		main_36_exitcond7 = (main_36_indvarnext6 == 32'd9);
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %exitcond7 = icmp eq i32 %indvar.next6, 9*/
	if ((cur_state == LEGUP_F_main_BB__36_23)) begin
		main_36_exitcond7_reg <= main_36_exitcond7;
		if (start == 1'b0 && ^(main_36_exitcond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_exitcond7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %indvar = phi i32 [ 0, %.preheader.i.i.preheader ], [ %indvar.next, %.preheader.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderiipreheader_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderii_indvar = 32'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %indvar = phi i32 [ 0, %.preheader.i.i.preheader ], [ %indvar.next, %.preheader.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderii_35) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_exitcond2_reg == 1'd0))) */ begin
		main_preheaderii_indvar = main_preheaderii_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %indvar = phi i32 [ 0, %.preheader.i.i.preheader ], [ %indvar.next, %.preheader.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderiipreheader_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderii_indvar_reg <= main_preheaderii_indvar;
		if (start == 1'b0 && ^(main_preheaderii_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_indvar_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %indvar = phi i32 [ 0, %.preheader.i.i.preheader ], [ %indvar.next, %.preheader.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii_35) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_exitcond2_reg == 1'd0))) begin
		main_preheaderii_indvar_reg <= main_preheaderii_indvar;
		if (start == 1'b0 && ^(main_preheaderii_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %41 = shl i32 %indvar, 1*/
		main_preheaderii_41 = (main_preheaderii_indvar_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %41 = shl i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		main_preheaderii_41_reg <= main_preheaderii_41;
		if (start == 1'b0 && ^(main_preheaderii_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %42 = or i32 %41, 1*/
		main_preheaderii_42 = (main_preheaderii_41 | 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %42 = or i32 %41, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		main_preheaderii_42_reg <= main_preheaderii_42;
		if (start == 1'b0 && ^(main_preheaderii_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep3 = getelementptr [1024 x i32]* @key_S, i32 0, i32 %42*/
		main_preheaderii_scevgep3 = (`TAG_g_key_S_a | (4 * main_preheaderii_42));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep3 = getelementptr [1024 x i32]* @key_S, i32 0, i32 %42*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		main_preheaderii_scevgep3_reg <= main_preheaderii_scevgep3;
		if (start == 1'b0 && ^(main_preheaderii_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep4 = getelementptr [1024 x i32]* @key_S, i32 0, i32 %41*/
		main_preheaderii_scevgep4 = (`TAG_g_key_S_a | (4 * main_preheaderii_41));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep4 = getelementptr [1024 x i32]* @key_S, i32 0, i32 %41*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		main_preheaderii_scevgep4_reg <= main_preheaderii_scevgep4;
		if (start == 1'b0 && ^(main_preheaderii_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %43 = load i32* %34, align 4, !tbaa !4*/
		main_preheaderii_43 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %43 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_43_reg <= main_preheaderii_43;
		if (start == 1'b0 && ^(main_preheaderii_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %44 = load i32* %35, align 4, !tbaa !4*/
		main_preheaderii_44 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %44 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		main_preheaderii_44_reg <= main_preheaderii_44;
		if (start == 1'b0 && ^(main_preheaderii_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_preheaderii_indvarnext = (main_preheaderii_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		main_preheaderii_indvarnext_reg <= main_preheaderii_indvarnext;
		if (start == 1'b0 && ^(main_preheaderii_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %exitcond2 = icmp eq i32 %indvar.next, 512*/
		main_preheaderii_exitcond2 = (main_preheaderii_indvarnext == 32'd512);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %exitcond2 = icmp eq i32 %indvar.next, 512*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		main_preheaderii_exitcond2_reg <= main_preheaderii_exitcond2;
		if (start == 1'b0 && ^(main_preheaderii_exitcond2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_exitcond2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_set_key.exit.i*/
	/*   %45 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 0*/
if (reset) begin main_BF_set_keyexiti_45 = 0; end
		main_BF_set_keyexiti_45 = 1'd0;
end
always @(posedge clk) begin
	/* main: %BF_set_key.exit.i*/
	/*   %45 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36)) begin
		main_BF_set_keyexiti_45_reg <= main_BF_set_keyexiti_45;
		if (start == 1'b0 && ^(main_BF_set_keyexiti_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_set_keyexiti_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_set_key.exit.i*/
	/*   %46 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 1*/
if (reset) begin main_BF_set_keyexiti_46 = 0; end
		main_BF_set_keyexiti_46 = (1'd0 | (1 * 32'd1));
end
always @(posedge clk) begin
	/* main: %BF_set_key.exit.i*/
	/*   %46 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36)) begin
		main_BF_set_keyexiti_46_reg <= main_BF_set_keyexiti_46;
		if (start == 1'b0 && ^(main_BF_set_keyexiti_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_set_keyexiti_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_set_key.exit.i*/
	/*   %47 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 2*/
if (reset) begin main_BF_set_keyexiti_47 = 0; end
		main_BF_set_keyexiti_47 = (1'd0 | (1 * 32'd2));
end
always @(posedge clk) begin
	/* main: %BF_set_key.exit.i*/
	/*   %47 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36)) begin
		main_BF_set_keyexiti_47_reg <= main_BF_set_keyexiti_47;
		if (start == 1'b0 && ^(main_BF_set_keyexiti_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_set_keyexiti_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_set_key.exit.i*/
	/*   %48 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 3*/
if (reset) begin main_BF_set_keyexiti_48 = 0; end
		main_BF_set_keyexiti_48 = (1'd0 | (1 * 32'd3));
end
always @(posedge clk) begin
	/* main: %BF_set_key.exit.i*/
	/*   %48 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36)) begin
		main_BF_set_keyexiti_48_reg <= main_BF_set_keyexiti_48;
		if (start == 1'b0 && ^(main_BF_set_keyexiti_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_set_keyexiti_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_set_key.exit.i*/
	/*   %49 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 4*/
if (reset) begin main_BF_set_keyexiti_49 = 0; end
		main_BF_set_keyexiti_49 = (1'd0 | (1 * 32'd4));
end
always @(posedge clk) begin
	/* main: %BF_set_key.exit.i*/
	/*   %49 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36)) begin
		main_BF_set_keyexiti_49_reg <= main_BF_set_keyexiti_49;
		if (start == 1'b0 && ^(main_BF_set_keyexiti_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_set_keyexiti_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_set_key.exit.i*/
	/*   %50 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 5*/
if (reset) begin main_BF_set_keyexiti_50 = 0; end
		main_BF_set_keyexiti_50 = (1'd0 | (1 * 32'd5));
end
always @(posedge clk) begin
	/* main: %BF_set_key.exit.i*/
	/*   %50 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36)) begin
		main_BF_set_keyexiti_50_reg <= main_BF_set_keyexiti_50;
		if (start == 1'b0 && ^(main_BF_set_keyexiti_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_set_keyexiti_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_set_key.exit.i*/
	/*   %51 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 6*/
if (reset) begin main_BF_set_keyexiti_51 = 0; end
		main_BF_set_keyexiti_51 = (1'd0 | (1 * 32'd6));
end
always @(posedge clk) begin
	/* main: %BF_set_key.exit.i*/
	/*   %51 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36)) begin
		main_BF_set_keyexiti_51_reg <= main_BF_set_keyexiti_51;
		if (start == 1'b0 && ^(main_BF_set_keyexiti_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_set_keyexiti_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_set_key.exit.i*/
	/*   %52 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 7*/
if (reset) begin main_BF_set_keyexiti_52 = 0; end
		main_BF_set_keyexiti_52 = (1'd0 | (1 * 32'd7));
end
always @(posedge clk) begin
	/* main: %BF_set_key.exit.i*/
	/*   %52 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36)) begin
		main_BF_set_keyexiti_52_reg <= main_BF_set_keyexiti_52;
		if (start == 1'b0 && ^(main_BF_set_keyexiti_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_set_keyexiti_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i*/
	/*   %num.i.0 = phi i32 [ 0, %BF_set_key.exit.i ], [ %104, %BF_cfb64_encrypt.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexiti_numi0 = 32'd0;
	end
	/* main: %.loopexit.i*/
	/*   %num.i.0 = phi i32 [ 0, %BF_set_key.exit.i ], [ %104, %BF_cfb64_encrypt.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_55) & (memory_controller_waitrequest == 1'd0)) & (main_BF_cfb64_encryptexiti_exitcond_reg == 1'd0))) */ begin
		main_loopexiti_numi0 = main_BF_cfb64_encryptexiti_104_reg;
	end
end
always @(posedge clk) begin
	/* main: %.loopexit.i*/
	/*   %num.i.0 = phi i32 [ 0, %BF_set_key.exit.i ], [ %104, %BF_cfb64_encrypt.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexiti_numi0_reg <= main_loopexiti_numi0;
		if (start == 1'b0 && ^(main_loopexiti_numi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti_numi0_reg"); $finish; end
	end
	/* main: %.loopexit.i*/
	/*   %num.i.0 = phi i32 [ 0, %BF_set_key.exit.i ], [ %104, %BF_cfb64_encrypt.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_55) & (memory_controller_waitrequest == 1'd0)) & (main_BF_cfb64_encryptexiti_exitcond_reg == 1'd0))) begin
		main_loopexiti_numi0_reg <= main_loopexiti_numi0;
		if (start == 1'b0 && ^(main_loopexiti_numi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti_numi0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i*/
	/*   %k.06.i = phi i32 [ 0, %BF_set_key.exit.i ], [ %109, %BF_cfb64_encrypt.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexiti_k06i = 32'd0;
	end
	/* main: %.loopexit.i*/
	/*   %k.06.i = phi i32 [ 0, %BF_set_key.exit.i ], [ %109, %BF_cfb64_encrypt.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_55) & (memory_controller_waitrequest == 1'd0)) & (main_BF_cfb64_encryptexiti_exitcond_reg == 1'd0))) */ begin
		main_loopexiti_k06i = main_BF_cfb64_encryptexiti_109_reg;
	end
end
always @(posedge clk) begin
	/* main: %.loopexit.i*/
	/*   %k.06.i = phi i32 [ 0, %BF_set_key.exit.i ], [ %109, %BF_cfb64_encrypt.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexiti_k06i_reg <= main_loopexiti_k06i;
		if (start == 1'b0 && ^(main_loopexiti_k06i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti_k06i_reg"); $finish; end
	end
	/* main: %.loopexit.i*/
	/*   %k.06.i = phi i32 [ 0, %BF_set_key.exit.i ], [ %109, %BF_cfb64_encrypt.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_55) & (memory_controller_waitrequest == 1'd0)) & (main_BF_cfb64_encryptexiti_exitcond_reg == 1'd0))) begin
		main_loopexiti_k06i_reg <= main_loopexiti_k06i;
		if (start == 1'b0 && ^(main_loopexiti_k06i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti_k06i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i*/
	/*   %check.05.i = phi i32 [ 0, %BF_set_key.exit.i ], [ %108, %BF_cfb64_encrypt.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexiti_check05i = 32'd0;
	end
	/* main: %.loopexit.i*/
	/*   %check.05.i = phi i32 [ 0, %BF_set_key.exit.i ], [ %108, %BF_cfb64_encrypt.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_55) & (memory_controller_waitrequest == 1'd0)) & (main_BF_cfb64_encryptexiti_exitcond_reg == 1'd0))) */ begin
		main_loopexiti_check05i = main_BF_cfb64_encryptexiti_108_reg;
	end
end
always @(posedge clk) begin
	/* main: %.loopexit.i*/
	/*   %check.05.i = phi i32 [ 0, %BF_set_key.exit.i ], [ %108, %BF_cfb64_encrypt.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_BF_set_keyexiti_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexiti_check05i_reg <= main_loopexiti_check05i;
		if (start == 1'b0 && ^(main_loopexiti_check05i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti_check05i_reg"); $finish; end
	end
	/* main: %.loopexit.i*/
	/*   %check.05.i = phi i32 [ 0, %BF_set_key.exit.i ], [ %108, %BF_cfb64_encrypt.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_55) & (memory_controller_waitrequest == 1'd0)) & (main_BF_cfb64_encryptexiti_exitcond_reg == 1'd0))) begin
		main_loopexiti_check05i_reg <= main_loopexiti_check05i;
		if (start == 1'b0 && ^(main_loopexiti_check05i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti_check05i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i*/
	/*   %scevgep = getelementptr [5200 x i8]* @out_key, i32 0, i32 %k.06.i*/
		main_loopexiti_scevgep = (1'd0 | (1 * main_loopexiti_k06i_reg));
end
always @(posedge clk) begin
	/* main: %.loopexit.i*/
	/*   %scevgep = getelementptr [5200 x i8]* @out_key, i32 0, i32 %k.06.i*/
	if ((cur_state == LEGUP_F_main_BB_loopexiti_37)) begin
		main_loopexiti_scevgep_reg <= main_loopexiti_scevgep;
		if (start == 1'b0 && ^(main_loopexiti_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i*/
	/*   %scevgep1 = getelementptr [5200 x i8]* @in_key, i32 0, i32 %k.06.i*/
		main_loopexiti_scevgep1 = (1'd0 | (1 * main_loopexiti_k06i_reg));
end
always @(posedge clk) begin
	/* main: %.loopexit.i*/
	/*   %scevgep1 = getelementptr [5200 x i8]* @in_key, i32 0, i32 %k.06.i*/
	if ((cur_state == LEGUP_F_main_BB_loopexiti_37)) begin
		main_loopexiti_scevgep1_reg <= main_loopexiti_scevgep1;
		if (start == 1'b0 && ^(main_loopexiti_scevgep1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti_scevgep1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i*/
	/*   %53 = load i8* %scevgep1, align 1, !tbaa !1*/
		main_loopexiti_53 = in_key_out_a;
end
always @(posedge clk) begin
	/* main: %.loopexit.i*/
	/*   %53 = load i8* %scevgep1, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexiti_38)) begin
		main_loopexiti_53_reg <= main_loopexiti_53;
		if (start == 1'b0 && ^(main_loopexiti_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i*/
	/*   %54 = icmp eq i32 %num.i.0, 0*/
		main_loopexiti_54 = (main_loopexiti_numi0_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %.loopexit.i*/
	/*   %54 = icmp eq i32 %num.i.0, 0*/
	if ((cur_state == LEGUP_F_main_BB_loopexiti_37)) begin
		main_loopexiti_54_reg <= main_loopexiti_54;
		if (start == 1'b0 && ^(main_loopexiti_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %56 = load i8* %45, align 1, !tbaa !1*/
		main_55_56 = main_0_iveci_out_a;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %56 = load i8* %45, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_40)) begin
		main_55_56_reg <= main_55_56;
		if (start == 1'b0 && ^(main_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %57 = zext i8 %56 to i32*/
		main_55_57 = main_55_56;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %57 = zext i8 %56 to i32*/
	if ((cur_state == LEGUP_F_main_BB__55_40)) begin
		main_55_57_reg <= main_55_57;
		if (start == 1'b0 && ^(main_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %58 = shl nuw i32 %57, 24*/
		main_55_58 = (main_55_57 <<< (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %58 = shl nuw i32 %57, 24*/
	if ((cur_state == LEGUP_F_main_BB__55_40)) begin
		main_55_58_reg <= main_55_58;
		if (start == 1'b0 && ^(main_55_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %59 = load i8* %46, align 1, !tbaa !1*/
		main_55_59 = main_0_iveci_out_b;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %59 = load i8* %46, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_40)) begin
		main_55_59_reg <= main_55_59;
		if (start == 1'b0 && ^(main_55_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %60 = zext i8 %59 to i32*/
		main_55_60 = main_55_59;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %60 = zext i8 %59 to i32*/
	if ((cur_state == LEGUP_F_main_BB__55_40)) begin
		main_55_60_reg <= main_55_60;
		if (start == 1'b0 && ^(main_55_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %61 = shl nuw nsw i32 %60, 16*/
		main_55_61 = (main_55_60 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %61 = shl nuw nsw i32 %60, 16*/
	if ((cur_state == LEGUP_F_main_BB__55_40)) begin
		main_55_61_reg <= main_55_61;
		if (start == 1'b0 && ^(main_55_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %62 = or i32 %61, %58*/
		main_55_62 = (main_55_61 | main_55_58);
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %62 = or i32 %61, %58*/
	if ((cur_state == LEGUP_F_main_BB__55_40)) begin
		main_55_62_reg <= main_55_62;
		if (start == 1'b0 && ^(main_55_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %63 = load i8* %47, align 1, !tbaa !1*/
		main_55_63 = main_0_iveci_out_a;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %63 = load i8* %47, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		main_55_63_reg <= main_55_63;
		if (start == 1'b0 && ^(main_55_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %64 = zext i8 %63 to i32*/
		main_55_64 = main_55_63;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %64 = zext i8 %63 to i32*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		main_55_64_reg <= main_55_64;
		if (start == 1'b0 && ^(main_55_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %65 = shl nuw nsw i32 %64, 8*/
		main_55_65 = (main_55_64 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %65 = shl nuw nsw i32 %64, 8*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		main_55_65_reg <= main_55_65;
		if (start == 1'b0 && ^(main_55_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %66 = or i32 %62, %65*/
		main_55_66 = (main_55_62_reg | main_55_65);
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %66 = or i32 %62, %65*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		main_55_66_reg <= main_55_66;
		if (start == 1'b0 && ^(main_55_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %67 = load i8* %48, align 1, !tbaa !1*/
		main_55_67 = main_0_iveci_out_b;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %67 = load i8* %48, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		main_55_67_reg <= main_55_67;
		if (start == 1'b0 && ^(main_55_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %68 = zext i8 %67 to i32*/
		main_55_68 = main_55_67;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %68 = zext i8 %67 to i32*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		main_55_68_reg <= main_55_68;
		if (start == 1'b0 && ^(main_55_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %69 = or i32 %66, %68*/
		main_55_69 = (main_55_66 | main_55_68);
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %69 = or i32 %66, %68*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		main_55_69_reg <= main_55_69;
		if (start == 1'b0 && ^(main_55_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %70 = load i8* %49, align 1, !tbaa !1*/
		main_55_70 = main_0_iveci_out_a;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %70 = load i8* %49, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_42)) begin
		main_55_70_reg <= main_55_70;
		if (start == 1'b0 && ^(main_55_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %71 = zext i8 %70 to i32*/
		main_55_71 = main_55_70;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %71 = zext i8 %70 to i32*/
	if ((cur_state == LEGUP_F_main_BB__55_42)) begin
		main_55_71_reg <= main_55_71;
		if (start == 1'b0 && ^(main_55_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %72 = shl nuw i32 %71, 24*/
		main_55_72 = (main_55_71 <<< (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %72 = shl nuw i32 %71, 24*/
	if ((cur_state == LEGUP_F_main_BB__55_42)) begin
		main_55_72_reg <= main_55_72;
		if (start == 1'b0 && ^(main_55_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %73 = load i8* %50, align 1, !tbaa !1*/
		main_55_73 = main_0_iveci_out_b;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %73 = load i8* %50, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_42)) begin
		main_55_73_reg <= main_55_73;
		if (start == 1'b0 && ^(main_55_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %74 = zext i8 %73 to i32*/
		main_55_74 = main_55_73;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %74 = zext i8 %73 to i32*/
	if ((cur_state == LEGUP_F_main_BB__55_42)) begin
		main_55_74_reg <= main_55_74;
		if (start == 1'b0 && ^(main_55_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %75 = shl nuw nsw i32 %74, 16*/
		main_55_75 = (main_55_74 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %75 = shl nuw nsw i32 %74, 16*/
	if ((cur_state == LEGUP_F_main_BB__55_42)) begin
		main_55_75_reg <= main_55_75;
		if (start == 1'b0 && ^(main_55_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %76 = or i32 %75, %72*/
		main_55_76 = (main_55_75 | main_55_72);
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %76 = or i32 %75, %72*/
	if ((cur_state == LEGUP_F_main_BB__55_42)) begin
		main_55_76_reg <= main_55_76;
		if (start == 1'b0 && ^(main_55_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %77 = load i8* %51, align 1, !tbaa !1*/
		main_55_77 = main_0_iveci_out_a;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %77 = load i8* %51, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_43)) begin
		main_55_77_reg <= main_55_77;
		if (start == 1'b0 && ^(main_55_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %78 = zext i8 %77 to i32*/
		main_55_78 = main_55_77;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %78 = zext i8 %77 to i32*/
	if ((cur_state == LEGUP_F_main_BB__55_43)) begin
		main_55_78_reg <= main_55_78;
		if (start == 1'b0 && ^(main_55_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %79 = shl nuw nsw i32 %78, 8*/
		main_55_79 = (main_55_78 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %79 = shl nuw nsw i32 %78, 8*/
	if ((cur_state == LEGUP_F_main_BB__55_43)) begin
		main_55_79_reg <= main_55_79;
		if (start == 1'b0 && ^(main_55_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %80 = or i32 %76, %79*/
		main_55_80 = (main_55_76_reg | main_55_79);
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %80 = or i32 %76, %79*/
	if ((cur_state == LEGUP_F_main_BB__55_43)) begin
		main_55_80_reg <= main_55_80;
		if (start == 1'b0 && ^(main_55_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %81 = load i8* %52, align 1, !tbaa !1*/
		main_55_81 = main_0_iveci_out_b;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %81 = load i8* %52, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_43)) begin
		main_55_81_reg <= main_55_81;
		if (start == 1'b0 && ^(main_55_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %82 = zext i8 %81 to i32*/
		main_55_82 = main_55_81;
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %82 = zext i8 %81 to i32*/
	if ((cur_state == LEGUP_F_main_BB__55_43)) begin
		main_55_82_reg <= main_55_82;
		if (start == 1'b0 && ^(main_55_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %83 = or i32 %80, %82*/
		main_55_83 = (main_55_80 | main_55_82);
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %83 = or i32 %80, %82*/
	if ((cur_state == LEGUP_F_main_BB__55_43)) begin
		main_55_83_reg <= main_55_83;
		if (start == 1'b0 && ^(main_55_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %84 = load i32* %34, align 4, !tbaa !4*/
		main_55_84 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %84 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_84_reg <= main_55_84;
		if (start == 1'b0 && ^(main_55_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %85 = lshr i32 %84, 24*/
		main_55_85 = (main_55_84 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %85 = lshr i32 %84, 24*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_85_reg <= main_55_85;
		if (start == 1'b0 && ^(main_55_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %86 = trunc i32 %85 to i8*/
		main_55_86 = main_55_85[7:0];
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %86 = trunc i32 %85 to i8*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_86_reg <= main_55_86;
		if (start == 1'b0 && ^(main_55_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %87 = lshr i32 %84, 16*/
		main_55_87 = (main_55_84 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %87 = lshr i32 %84, 16*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_87_reg <= main_55_87;
		if (start == 1'b0 && ^(main_55_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %88 = trunc i32 %87 to i8*/
		main_55_88 = main_55_87[7:0];
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %88 = trunc i32 %87 to i8*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_88_reg <= main_55_88;
		if (start == 1'b0 && ^(main_55_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %89 = lshr i32 %84, 8*/
		main_55_89 = (main_55_84 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %89 = lshr i32 %84, 8*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_89_reg <= main_55_89;
		if (start == 1'b0 && ^(main_55_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %90 = trunc i32 %89 to i8*/
		main_55_90 = main_55_89[7:0];
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %90 = trunc i32 %89 to i8*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_90_reg <= main_55_90;
		if (start == 1'b0 && ^(main_55_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %91 = trunc i32 %84 to i8*/
		main_55_91 = main_55_84[7:0];
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %91 = trunc i32 %84 to i8*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_91_reg <= main_55_91;
		if (start == 1'b0 && ^(main_55_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %92 = load i32* %35, align 4, !tbaa !4*/
		main_55_92 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %92 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_92_reg <= main_55_92;
		if (start == 1'b0 && ^(main_55_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %93 = lshr i32 %92, 24*/
		main_55_93 = (main_55_92 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %93 = lshr i32 %92, 24*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_93_reg <= main_55_93;
		if (start == 1'b0 && ^(main_55_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %94 = trunc i32 %93 to i8*/
		main_55_94 = main_55_93[7:0];
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %94 = trunc i32 %93 to i8*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_94_reg <= main_55_94;
		if (start == 1'b0 && ^(main_55_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %95 = lshr i32 %92, 16*/
		main_55_95 = (main_55_92 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %95 = lshr i32 %92, 16*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_95_reg <= main_55_95;
		if (start == 1'b0 && ^(main_55_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %96 = trunc i32 %95 to i8*/
		main_55_96 = main_55_95[7:0];
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %96 = trunc i32 %95 to i8*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_96_reg <= main_55_96;
		if (start == 1'b0 && ^(main_55_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %97 = lshr i32 %92, 8*/
		main_55_97 = (main_55_92 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %97 = lshr i32 %92, 8*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_97_reg <= main_55_97;
		if (start == 1'b0 && ^(main_55_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %98 = trunc i32 %97 to i8*/
		main_55_98 = main_55_97[7:0];
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %98 = trunc i32 %97 to i8*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_98_reg <= main_55_98;
		if (start == 1'b0 && ^(main_55_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %55*/
	/*   %99 = trunc i32 %92 to i8*/
		main_55_99 = main_55_92[7:0];
end
always @(posedge clk) begin
	/* main: %55*/
	/*   %99 = trunc i32 %92 to i8*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_55_99_reg <= main_55_99;
		if (start == 1'b0 && ^(main_55_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_55_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %100 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 %num.i.0*/
		main_BF_cfb64_encryptexiti_100 = (1'd0 | (1 * main_loopexiti_numi0_reg));
end
always @(posedge clk) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %100 = getelementptr inbounds [8 x i8]* %ivec.i, i32 0, i32 %num.i.0*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_53)) begin
		main_BF_cfb64_encryptexiti_100_reg <= main_BF_cfb64_encryptexiti_100;
		if (start == 1'b0 && ^(main_BF_cfb64_encryptexiti_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_cfb64_encryptexiti_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %101 = load i8* %100, align 1, !tbaa !1*/
		main_BF_cfb64_encryptexiti_101 = main_0_iveci_out_b;
end
always @(posedge clk) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %101 = load i8* %100, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_54)) begin
		main_BF_cfb64_encryptexiti_101_reg <= main_BF_cfb64_encryptexiti_101;
		if (start == 1'b0 && ^(main_BF_cfb64_encryptexiti_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_cfb64_encryptexiti_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %102 = xor i8 %101, %53*/
		main_BF_cfb64_encryptexiti_102 = (main_BF_cfb64_encryptexiti_101 ^ main_loopexiti_53_reg);
end
always @(posedge clk) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %102 = xor i8 %101, %53*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_54)) begin
		main_BF_cfb64_encryptexiti_102_reg <= main_BF_cfb64_encryptexiti_102;
		if (start == 1'b0 && ^(main_BF_cfb64_encryptexiti_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_cfb64_encryptexiti_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %103 = add nuw nsw i32 %num.i.0, 1*/
		main_BF_cfb64_encryptexiti_103 = (main_loopexiti_numi0_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %103 = add nuw nsw i32 %num.i.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_53)) begin
		main_BF_cfb64_encryptexiti_103_reg <= main_BF_cfb64_encryptexiti_103;
		if (start == 1'b0 && ^(main_BF_cfb64_encryptexiti_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_cfb64_encryptexiti_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %104 = and i32 %103, 7*/
		main_BF_cfb64_encryptexiti_104 = (main_BF_cfb64_encryptexiti_103 & 32'd7);
end
always @(posedge clk) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %104 = and i32 %103, 7*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_53)) begin
		main_BF_cfb64_encryptexiti_104_reg <= main_BF_cfb64_encryptexiti_104;
		if (start == 1'b0 && ^(main_BF_cfb64_encryptexiti_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_cfb64_encryptexiti_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %105 = load i8* %scevgep, align 1, !tbaa !1*/
		main_BF_cfb64_encryptexiti_105 = out_key_out_a;
end
always @(posedge clk) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %105 = load i8* %scevgep, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_54)) begin
		main_BF_cfb64_encryptexiti_105_reg <= main_BF_cfb64_encryptexiti_105;
		if (start == 1'b0 && ^(main_BF_cfb64_encryptexiti_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_cfb64_encryptexiti_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %106 = icmp eq i8 %102, %105*/
		main_BF_cfb64_encryptexiti_106 = (main_BF_cfb64_encryptexiti_102 == main_BF_cfb64_encryptexiti_105);
end
always @(posedge clk) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %106 = icmp eq i8 %102, %105*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_54)) begin
		main_BF_cfb64_encryptexiti_106_reg <= main_BF_cfb64_encryptexiti_106;
		if (start == 1'b0 && ^(main_BF_cfb64_encryptexiti_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_cfb64_encryptexiti_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %107 = zext i1 %106 to i32*/
		main_BF_cfb64_encryptexiti_107 = main_BF_cfb64_encryptexiti_106;
end
always @(posedge clk) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %107 = zext i1 %106 to i32*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_54)) begin
		main_BF_cfb64_encryptexiti_107_reg <= main_BF_cfb64_encryptexiti_107;
		if (start == 1'b0 && ^(main_BF_cfb64_encryptexiti_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_cfb64_encryptexiti_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %108 = add nsw i32 %107, %check.05.i*/
		main_BF_cfb64_encryptexiti_108 = (main_BF_cfb64_encryptexiti_107 + main_loopexiti_check05i_reg);
end
always @(posedge clk) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %108 = add nsw i32 %107, %check.05.i*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_54)) begin
		main_BF_cfb64_encryptexiti_108_reg <= main_BF_cfb64_encryptexiti_108;
		if (start == 1'b0 && ^(main_BF_cfb64_encryptexiti_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_cfb64_encryptexiti_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %109 = add nsw i32 %k.06.i, 1*/
		main_BF_cfb64_encryptexiti_109 = (main_loopexiti_k06i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %109 = add nsw i32 %k.06.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_53)) begin
		main_BF_cfb64_encryptexiti_109_reg <= main_BF_cfb64_encryptexiti_109;
		if (start == 1'b0 && ^(main_BF_cfb64_encryptexiti_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_cfb64_encryptexiti_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %exitcond = icmp eq i32 %109, 5200*/
		main_BF_cfb64_encryptexiti_exitcond = (main_BF_cfb64_encryptexiti_109 == 32'd5200);
end
always @(posedge clk) begin
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %exitcond = icmp eq i32 %109, 5200*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_53)) begin
		main_BF_cfb64_encryptexiti_exitcond_reg <= main_BF_cfb64_encryptexiti_exitcond;
		if (start == 1'b0 && ^(main_BF_cfb64_encryptexiti_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_BF_cfb64_encryptexiti_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %blowfish_main.exit*/
	/*   %111 = icmp eq i32 %108, 5200*/
		main_blowfish_mainexit_111 = (main_BF_cfb64_encryptexiti_108_reg == 32'd5200);
end
always @(posedge clk) begin
	/* main: %blowfish_main.exit*/
	/*   %111 = icmp eq i32 %108, 5200*/
	if ((cur_state == LEGUP_F_main_BB_blowfish_mainexit_56)) begin
		main_blowfish_mainexit_111_reg <= main_blowfish_mainexit_111;
		if (start == 1'b0 && ^(main_blowfish_mainexit_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_blowfish_mainexit_111_reg"); $finish; end
	end
end
always @(*) begin
	bf_init_P_address_a = 1'd0;
	/* main: %.lr.ph.i.i.i*/
	/*   %3 = load i32* %p2.03.i.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_5)) begin
		bf_init_P_address_a = (main_lrphiii_p203iii >>> 3'd2);
	end
end
always @(*) begin
	bf_init_P_write_enable_a = 1'd0;
	/* main: %.lr.ph.i.i.i*/
	/*   %3 = load i32* %p2.03.i.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_5)) begin
		bf_init_P_write_enable_a = 1'd0;
	end
end
always @(*) begin
	bf_init_S_address_a = 1'd0;
	/* main: %.lr.ph.i4.i.i*/
	/*   %4 = load i32* %p2.03.i1.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_9)) begin
		bf_init_S_address_a = (main_lrphi4ii_p203i1ii >>> 3'd2);
	end
end
always @(*) begin
	bf_init_S_write_enable_a = 1'd0;
	/* main: %.lr.ph.i4.i.i*/
	/*   %4 = load i32* %p2.03.i1.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_9)) begin
		bf_init_S_write_enable_a = 1'd0;
	end
end
always @(*) begin
	in_key_address_a = 1'd0;
	/* main: %.loopexit.i*/
	/*   %53 = load i8* %scevgep1, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexiti_37)) begin
		in_key_address_a = (main_loopexiti_scevgep1 >>> 3'd0);
	end
end
always @(*) begin
	in_key_write_enable_a = 1'd0;
	/* main: %.loopexit.i*/
	/*   %53 = load i8* %scevgep1, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexiti_37)) begin
		in_key_write_enable_a = 1'd0;
	end
end
always @(*) begin
	out_key_address_a = 1'd0;
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %105 = load i8* %scevgep, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_53)) begin
		out_key_address_a = (main_loopexiti_scevgep_reg >>> 3'd0);
	end
end
always @(*) begin
	out_key_write_enable_a = 1'd0;
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %105 = load i8* %scevgep, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_53)) begin
		out_key_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_ukeyi_address_a = 1'd0;
	/* main: %1*/
	/*   store i8 0, i8* %scevgep24, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_0_ukeyi_address_a = (main_1_scevgep24 >>> 3'd0);
	end
	/* main: %7*/
	/*   %9 = load i8* %d.05.i.i, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__7_13)) begin
		main_0_ukeyi_address_a = (main_7_d05ii_reg >>> 3'd0);
	end
	/* main: %7*/
	/*   %14 = load i8* %.data.i.i, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__7_14)) begin
		main_0_ukeyi_address_a = (main_7_dataii >>> 3'd0);
	end
	/* main: %7*/
	/*   %20 = load i8* %d.2.i.i, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__7_16)) begin
		main_0_ukeyi_address_a = (main_7_d2ii >>> 3'd0);
	end
	/* main: %7*/
	/*   %26 = load i8* %.data1.i.i, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__7_18)) begin
		main_0_ukeyi_address_a = (main_7_data1ii >>> 3'd0);
	end
end
always @(*) begin
	main_0_ukeyi_write_enable_a = 1'd0;
	/* main: %1*/
	/*   store i8 0, i8* %scevgep24, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_0_ukeyi_write_enable_a = 1'd1;
	end
	/* main: %7*/
	/*   %9 = load i8* %d.05.i.i, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__7_13)) begin
		main_0_ukeyi_write_enable_a = 1'd0;
	end
	/* main: %7*/
	/*   %14 = load i8* %.data.i.i, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__7_14)) begin
		main_0_ukeyi_write_enable_a = 1'd0;
	end
	/* main: %7*/
	/*   %20 = load i8* %d.2.i.i, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__7_16)) begin
		main_0_ukeyi_write_enable_a = 1'd0;
	end
	/* main: %7*/
	/*   %26 = load i8* %.data1.i.i, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__7_18)) begin
		main_0_ukeyi_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_ukeyi_in_a = 1'd0;
	/* main: %1*/
	/*   store i8 0, i8* %scevgep24, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_0_ukeyi_in_a = 8'd0;
	end
end
always @(*) begin
	main_0_iveci_address_a = 1'd0;
	/* main: %1*/
	/*   store i8 0, i8* %scevgep23, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_0_iveci_address_a = (main_1_scevgep23 >>> 3'd0);
	end
	/* main: %55*/
	/*   %56 = load i8* %45, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_39)) begin
		main_0_iveci_address_a = (main_BF_set_keyexiti_45_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   %63 = load i8* %47, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_40)) begin
		main_0_iveci_address_a = (main_BF_set_keyexiti_47_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   %70 = load i8* %49, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		main_0_iveci_address_a = (main_BF_set_keyexiti_49_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   %77 = load i8* %51, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_42)) begin
		main_0_iveci_address_a = (main_BF_set_keyexiti_51_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   store i8 %86, i8* %45, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_0_iveci_address_a = (main_BF_set_keyexiti_45_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   store i8 %90, i8* %47, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_49)) begin
		main_0_iveci_address_a = (main_BF_set_keyexiti_47_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   store i8 %94, i8* %49, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_50)) begin
		main_0_iveci_address_a = (main_BF_set_keyexiti_49_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   store i8 %98, i8* %51, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_51)) begin
		main_0_iveci_address_a = (main_BF_set_keyexiti_51_reg >>> 3'd0);
	end
end
always @(*) begin
	main_0_iveci_write_enable_a = 1'd0;
	/* main: %1*/
	/*   store i8 0, i8* %scevgep23, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_0_iveci_write_enable_a = 1'd1;
	end
	/* main: %55*/
	/*   %56 = load i8* %45, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_39)) begin
		main_0_iveci_write_enable_a = 1'd0;
	end
	/* main: %55*/
	/*   %63 = load i8* %47, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_40)) begin
		main_0_iveci_write_enable_a = 1'd0;
	end
	/* main: %55*/
	/*   %70 = load i8* %49, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		main_0_iveci_write_enable_a = 1'd0;
	end
	/* main: %55*/
	/*   %77 = load i8* %51, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_42)) begin
		main_0_iveci_write_enable_a = 1'd0;
	end
	/* main: %55*/
	/*   store i8 %86, i8* %45, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_0_iveci_write_enable_a = 1'd1;
	end
	/* main: %55*/
	/*   store i8 %90, i8* %47, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_49)) begin
		main_0_iveci_write_enable_a = 1'd1;
	end
	/* main: %55*/
	/*   store i8 %94, i8* %49, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_50)) begin
		main_0_iveci_write_enable_a = 1'd1;
	end
	/* main: %55*/
	/*   store i8 %98, i8* %51, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_51)) begin
		main_0_iveci_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_0_iveci_in_a = 1'd0;
	/* main: %1*/
	/*   store i8 0, i8* %scevgep23, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_0_iveci_in_a = 8'd0;
	end
	/* main: %55*/
	/*   store i8 %86, i8* %45, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_0_iveci_in_a = main_55_86;
	end
	/* main: %55*/
	/*   store i8 %90, i8* %47, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_49)) begin
		main_0_iveci_in_a = main_55_90_reg;
	end
	/* main: %55*/
	/*   store i8 %94, i8* %49, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_50)) begin
		main_0_iveci_in_a = main_55_94_reg;
	end
	/* main: %55*/
	/*   store i8 %98, i8* %51, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_51)) begin
		main_0_iveci_in_a = main_55_98_reg;
	end
end
always @(*) begin
	main_0_iveci_address_b = 1'd0;
	/* main: %55*/
	/*   %59 = load i8* %46, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_39)) begin
		main_0_iveci_address_b = (main_BF_set_keyexiti_46_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   %67 = load i8* %48, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_40)) begin
		main_0_iveci_address_b = (main_BF_set_keyexiti_48_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   %73 = load i8* %50, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		main_0_iveci_address_b = (main_BF_set_keyexiti_50_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   %81 = load i8* %52, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_42)) begin
		main_0_iveci_address_b = (main_BF_set_keyexiti_52_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   store i8 %88, i8* %46, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_0_iveci_address_b = (main_BF_set_keyexiti_46_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   store i8 %91, i8* %48, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_49)) begin
		main_0_iveci_address_b = (main_BF_set_keyexiti_48_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   store i8 %96, i8* %50, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_50)) begin
		main_0_iveci_address_b = (main_BF_set_keyexiti_50_reg >>> 3'd0);
	end
	/* main: %55*/
	/*   store i8 %99, i8* %52, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_51)) begin
		main_0_iveci_address_b = (main_BF_set_keyexiti_52_reg >>> 3'd0);
	end
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %101 = load i8* %100, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_53)) begin
		main_0_iveci_address_b = (main_BF_cfb64_encryptexiti_100 >>> 3'd0);
	end
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   store i8 %102, i8* %100, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_54)) begin
		main_0_iveci_address_b = (main_BF_cfb64_encryptexiti_100_reg >>> 3'd0);
	end
end
always @(*) begin
	main_0_iveci_write_enable_b = 1'd0;
	/* main: %55*/
	/*   %59 = load i8* %46, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_39)) begin
		main_0_iveci_write_enable_b = 1'd0;
	end
	/* main: %55*/
	/*   %67 = load i8* %48, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_40)) begin
		main_0_iveci_write_enable_b = 1'd0;
	end
	/* main: %55*/
	/*   %73 = load i8* %50, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		main_0_iveci_write_enable_b = 1'd0;
	end
	/* main: %55*/
	/*   %81 = load i8* %52, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_42)) begin
		main_0_iveci_write_enable_b = 1'd0;
	end
	/* main: %55*/
	/*   store i8 %88, i8* %46, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_0_iveci_write_enable_b = 1'd1;
	end
	/* main: %55*/
	/*   store i8 %91, i8* %48, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_49)) begin
		main_0_iveci_write_enable_b = 1'd1;
	end
	/* main: %55*/
	/*   store i8 %96, i8* %50, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_50)) begin
		main_0_iveci_write_enable_b = 1'd1;
	end
	/* main: %55*/
	/*   store i8 %99, i8* %52, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_51)) begin
		main_0_iveci_write_enable_b = 1'd1;
	end
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   %101 = load i8* %100, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_53)) begin
		main_0_iveci_write_enable_b = 1'd0;
	end
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   store i8 %102, i8* %100, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_54)) begin
		main_0_iveci_write_enable_b = 1'd1;
	end
end
always @(*) begin
	main_0_iveci_in_b = 1'd0;
	/* main: %55*/
	/*   store i8 %88, i8* %46, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_48)) begin
		main_0_iveci_in_b = main_55_88;
	end
	/* main: %55*/
	/*   store i8 %91, i8* %48, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_49)) begin
		main_0_iveci_in_b = main_55_91_reg;
	end
	/* main: %55*/
	/*   store i8 %96, i8* %50, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_50)) begin
		main_0_iveci_in_b = main_55_96_reg;
	end
	/* main: %55*/
	/*   store i8 %99, i8* %52, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__55_51)) begin
		main_0_iveci_in_b = main_55_99_reg;
	end
	/* main: %BF_cfb64_encrypt.exit.i*/
	/*   store i8 %102, i8* %100, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_BF_cfb64_encryptexiti_54)) begin
		main_0_iveci_in_b = main_BF_cfb64_encryptexiti_102;
	end
end
always @(posedge clk) begin
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_F_main_BB__36_23)) begin
		BF_encrypt_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		BF_encrypt_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_start"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		BF_encrypt_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_31)) begin
		BF_encrypt_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_start"); $finish; end
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_F_main_BB__55_44)) begin
		BF_encrypt_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_45)) begin
		BF_encrypt_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_F_main_BB__36_23)) begin
		BF_encrypt_arg_data <= main_33_34_reg;
		if (start == 1'b0 && ^(main_33_34_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_arg_data"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_30)) begin
		BF_encrypt_arg_data <= main_33_34_reg;
		if (start == 1'b0 && ^(main_33_34_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_arg_data"); $finish; end
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_F_main_BB__55_44)) begin
		BF_encrypt_arg_data <= main_33_34_reg;
		if (start == 1'b0 && ^(main_33_34_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_arg_data"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		BF_encrypt_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	else if ((cur_state == LEGUP_function_call_31)) begin
		BF_encrypt_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	else /* if ((cur_state == LEGUP_function_call_45)) */ begin
		BF_encrypt_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		BF_encrypt_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	else if ((cur_state == LEGUP_function_call_31)) begin
		BF_encrypt_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	else /* if ((cur_state == LEGUP_function_call_45)) */ begin
		BF_encrypt_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	BF_encrypt_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	BF_encrypt_finish_final = BF_encrypt_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__36_23))) begin
		BF_encrypt_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_finish_reg"); $finish; end
	end
	if (BF_encrypt_finish) begin
		BF_encrypt_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheaderii_30))) begin
		BF_encrypt_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_finish_reg"); $finish; end
	end
	if (BF_encrypt_finish) begin
		BF_encrypt_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__55_44))) begin
		BF_encrypt_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_finish_reg"); $finish; end
	end
	if (BF_encrypt_finish) begin
		BF_encrypt_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to BF_encrypt_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		legup_function_call = 1'd1;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %116*/
	/*   ret i32 %108*/
	if ((cur_state == LEGUP_F_main_BB__116_59)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_a = BF_encrypt_memory_controller_enable_a;
	end
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_a = BF_encrypt_memory_controller_enable_a;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_a = BF_encrypt_memory_controller_enable_a;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_a = BF_encrypt_memory_controller_enable_a;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_enable_a = BF_encrypt_memory_controller_enable_a;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_enable_a = BF_encrypt_memory_controller_enable_a;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   store i32 %3, i32* %p1.02.i.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i4.i.i*/
	/*   store i32 %4, i32* %p1.02.i2.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %7*/
	/*   %30 = load i32* %scevgep11, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__7_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %7*/
	/*   store i32 %31, i32* %scevgep11, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__7_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %33*/
	/*   store i32 0, i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %36*/
	/*   %39 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %36*/
	/*   store i32 %39, i32* %scevgep9, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %43 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %43, i32* %scevgep4, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %55*/
	/*   store i32 %69, i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %55*/
	/*   %84 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_46)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = BF_encrypt_memory_controller_address_a;
	end
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = BF_encrypt_memory_controller_address_a;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = BF_encrypt_memory_controller_address_a;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = BF_encrypt_memory_controller_address_a;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = BF_encrypt_memory_controller_address_a;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = BF_encrypt_memory_controller_address_a;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   store i32 %3, i32* %p1.02.i.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_6)) begin
		memory_controller_address_a = main_lrphiii_p102iii_reg;
	end
	/* main: %.lr.ph.i4.i.i*/
	/*   store i32 %4, i32* %p1.02.i2.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_10)) begin
		memory_controller_address_a = main_lrphi4ii_p102i2ii_reg;
	end
	/* main: %7*/
	/*   %30 = load i32* %scevgep11, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__7_13)) begin
		memory_controller_address_a = main_7_scevgep11;
	end
	/* main: %7*/
	/*   store i32 %31, i32* %scevgep11, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__7_19)) begin
		memory_controller_address_a = main_7_scevgep11_reg;
	end
	/* main: %33*/
	/*   store i32 0, i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		memory_controller_address_a = main_33_34;
	end
	/* main: %36*/
	/*   %39 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_25)) begin
		memory_controller_address_a = main_33_34_reg;
	end
	/* main: %36*/
	/*   store i32 %39, i32* %scevgep9, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		memory_controller_address_a = main_36_scevgep9_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %43 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		memory_controller_address_a = main_33_34_reg;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %43, i32* %scevgep4, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_address_a = main_preheaderii_scevgep4_reg;
	end
	/* main: %55*/
	/*   store i32 %69, i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		memory_controller_address_a = main_33_34_reg;
	end
	/* main: %55*/
	/*   %84 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_46)) begin
		memory_controller_address_a = main_33_34_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_a = BF_encrypt_memory_controller_write_enable_a;
	end
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_a = BF_encrypt_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_a = BF_encrypt_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_a = BF_encrypt_memory_controller_write_enable_a;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_write_enable_a = BF_encrypt_memory_controller_write_enable_a;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_write_enable_a = BF_encrypt_memory_controller_write_enable_a;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   store i32 %3, i32* %p1.02.i.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i4.i.i*/
	/*   store i32 %4, i32* %p1.02.i2.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %7*/
	/*   %30 = load i32* %scevgep11, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__7_13)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %7*/
	/*   store i32 %31, i32* %scevgep11, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__7_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %33*/
	/*   store i32 0, i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %36*/
	/*   %39 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_25)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %36*/
	/*   store i32 %39, i32* %scevgep9, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %43 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %43, i32* %scevgep4, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %55*/
	/*   store i32 %69, i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %55*/
	/*   %84 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_46)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = BF_encrypt_memory_controller_in_a;
	end
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = BF_encrypt_memory_controller_in_a;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = BF_encrypt_memory_controller_in_a;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = BF_encrypt_memory_controller_in_a;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = BF_encrypt_memory_controller_in_a;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = BF_encrypt_memory_controller_in_a;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   store i32 %3, i32* %p1.02.i.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_6)) begin
		memory_controller_in_a = main_lrphiii_3;
	end
	/* main: %.lr.ph.i4.i.i*/
	/*   store i32 %4, i32* %p1.02.i2.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_10)) begin
		memory_controller_in_a = main_lrphi4ii_4;
	end
	/* main: %7*/
	/*   store i32 %31, i32* %scevgep11, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__7_19)) begin
		memory_controller_in_a = main_7_31;
	end
	/* main: %33*/
	/*   store i32 0, i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %36*/
	/*   store i32 %39, i32* %scevgep9, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		memory_controller_in_a = main_36_39;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %43, i32* %scevgep4, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_in_a = main_preheaderii_43;
	end
	/* main: %55*/
	/*   store i32 %69, i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		memory_controller_in_a = main_55_69;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_a[1:0] = BF_encrypt_memory_controller_size_a;
	end
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_a[1:0] = BF_encrypt_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_a[1:0] = BF_encrypt_memory_controller_size_a;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_a[1:0] = BF_encrypt_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_size_a[1:0] = BF_encrypt_memory_controller_size_a;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_size_a[1:0] = BF_encrypt_memory_controller_size_a;
	end
	/* main: %.lr.ph.i.i.i*/
	/*   store i32 %3, i32* %p1.02.i.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i4.i.i*/
	/*   store i32 %4, i32* %p1.02.i2.i.i, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_lrphi4ii_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %7*/
	/*   %30 = load i32* %scevgep11, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__7_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %7*/
	/*   store i32 %31, i32* %scevgep11, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__7_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %33*/
	/*   store i32 0, i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %36*/
	/*   %39 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %36*/
	/*   store i32 %39, i32* %scevgep9, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %43 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %43, i32* %scevgep4, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %55*/
	/*   store i32 %69, i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_41)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %55*/
	/*   %84 = load i32* %34, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_46)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_b = BF_encrypt_memory_controller_enable_b;
	end
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_b = BF_encrypt_memory_controller_enable_b;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_b = BF_encrypt_memory_controller_enable_b;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_b = BF_encrypt_memory_controller_enable_b;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_enable_b = BF_encrypt_memory_controller_enable_b;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_enable_b = BF_encrypt_memory_controller_enable_b;
	end
	/* main: %33*/
	/*   store i32 0, i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %36*/
	/*   %40 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %36*/
	/*   store i32 %40, i32* %scevgep8, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %44 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %44, i32* %scevgep3, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %55*/
	/*   store i32 %83, i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %55*/
	/*   %92 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_46)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = BF_encrypt_memory_controller_address_b;
	end
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = BF_encrypt_memory_controller_address_b;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = BF_encrypt_memory_controller_address_b;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = BF_encrypt_memory_controller_address_b;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = BF_encrypt_memory_controller_address_b;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = BF_encrypt_memory_controller_address_b;
	end
	/* main: %33*/
	/*   store i32 0, i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		memory_controller_address_b = main_33_35;
	end
	/* main: %36*/
	/*   %40 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_25)) begin
		memory_controller_address_b = main_33_35_reg;
	end
	/* main: %36*/
	/*   store i32 %40, i32* %scevgep8, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		memory_controller_address_b = main_36_scevgep8_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %44 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		memory_controller_address_b = main_33_35_reg;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %44, i32* %scevgep3, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_address_b = main_preheaderii_scevgep3_reg;
	end
	/* main: %55*/
	/*   store i32 %83, i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_43)) begin
		memory_controller_address_b = main_33_35_reg;
	end
	/* main: %55*/
	/*   %92 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_46)) begin
		memory_controller_address_b = main_33_35_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_b = BF_encrypt_memory_controller_write_enable_b;
	end
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_b = BF_encrypt_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_b = BF_encrypt_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_b = BF_encrypt_memory_controller_write_enable_b;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_write_enable_b = BF_encrypt_memory_controller_write_enable_b;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_write_enable_b = BF_encrypt_memory_controller_write_enable_b;
	end
	/* main: %33*/
	/*   store i32 0, i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %36*/
	/*   %40 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_25)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %36*/
	/*   store i32 %40, i32* %scevgep8, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i.i*/
	/*   %44 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %44, i32* %scevgep3, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %55*/
	/*   store i32 %83, i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_43)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %55*/
	/*   %92 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_46)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = BF_encrypt_memory_controller_in_b;
	end
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = BF_encrypt_memory_controller_in_b;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = BF_encrypt_memory_controller_in_b;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = BF_encrypt_memory_controller_in_b;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = BF_encrypt_memory_controller_in_b;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = BF_encrypt_memory_controller_in_b;
	end
	/* main: %33*/
	/*   store i32 0, i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %36*/
	/*   store i32 %40, i32* %scevgep8, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		memory_controller_in_b = main_36_40;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %44, i32* %scevgep3, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_in_b = main_preheaderii_44;
	end
	/* main: %55*/
	/*   store i32 %83, i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_43)) begin
		memory_controller_in_b = main_55_83;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_b[1:0] = BF_encrypt_memory_controller_size_b;
	end
	/* main: %36*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_b[1:0] = BF_encrypt_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_b[1:0] = BF_encrypt_memory_controller_size_b;
	end
	/* main: %.preheader.i.i*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_b[1:0] = BF_encrypt_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_size_b[1:0] = BF_encrypt_memory_controller_size_b;
	end
	/* main: %55*/
	/*   call fastcc void @BF_encrypt(i32* %34) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_size_b[1:0] = BF_encrypt_memory_controller_size_b;
	end
	/* main: %33*/
	/*   store i32 0, i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__33_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %36*/
	/*   %40 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %36*/
	/*   store i32 %40, i32* %scevgep8, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   %44 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i.i*/
	/*   store i32 %44, i32* %scevgep3, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %55*/
	/*   store i32 %83, i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_43)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %55*/
	/*   %92 = load i32* %35, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__55_46)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %116*/
	/*   ret i32 %108*/
	if ((cur_state == LEGUP_F_main_BB__116_59)) begin
		return_val <= main_BF_cfb64_encryptexiti_108_reg;
		if (start == 1'b0 && ^(main_BF_cfb64_encryptexiti_108_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
