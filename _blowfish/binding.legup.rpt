//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 12:02:16 2017
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: BF_encrypt
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
bf_init_P_local_mem_dual_port 1                             
bf_init_S_local_mem_dual_port 1                             
in_key_local_mem_dual_port    1                             
main_0_iveci_local_mem_dual_port2                             
main_0_ukeyi_local_mem_dual_port1                             
mem_dual_port                 2                             
out_key_local_mem_dual_port   1                             

Running Bipartite Weighted Matching on function: BF_encrypt
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %1 = load i32* %data, align ... (idx: 0)        0                             0                             
  %4 = load i32* getelementptr... (idx: 1)        0                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %1 = load i32* %data, align ... (idx: 0)        1                             0                             
  %4 = load i32* getelementptr... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %1 = load i32* %data, align ... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 0)
  %4 = load i32* getelementptr... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* getelementptr... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %6 = load i32* getelementptr... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %29 = load i32* getelementpt... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %29 = load i32* getelementpt... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %6 = load i32* getelementptr... (idx: 0)        -5                            -5                            
  %29 = load i32* getelementpt... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %6 = load i32* getelementptr... (idx: 0)        1                             0                             
  %29 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* getelementptr... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 0)
  %29 = load i32* getelementpt... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %52 = load i32* getelementpt... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %52 = load i32* getelementpt... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %75 = load i32* getelementpt... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %75 = load i32* getelementpt... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %52 = load i32* getelementpt... (idx: 0)        -5                            -5                            
  %75 = load i32* getelementpt... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %52 = load i32* getelementpt... (idx: 0)        1                             0                             
  %75 = load i32* getelementpt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %52 = load i32* getelementpt... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 0)
  %75 = load i32* getelementpt... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %98 = load i32* getelementpt... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %98 = load i32* getelementpt... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %121 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %121 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %98 = load i32* getelementpt... (idx: 0)        -5                            -5                            
  %121 = load i32* getelementp... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %98 = load i32* getelementpt... (idx: 0)        1                             0                             
  %121 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %98 = load i32* getelementpt... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 0)
  %121 = load i32* getelementp... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %144 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %144 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %167 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %167 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %144 = load i32* getelementp... (idx: 0)        -5                            -5                            
  %167 = load i32* getelementp... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %144 = load i32* getelementp... (idx: 0)        1                             0                             
  %167 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %144 = load i32* getelementp... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 0)
  %167 = load i32* getelementp... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %190 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %190 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %213 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %213 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %190 = load i32* getelementp... (idx: 0)        -5                            -5                            
  %213 = load i32* getelementp... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %190 = load i32* getelementp... (idx: 0)        1                             0                             
  %213 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %190 = load i32* getelementp... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 0)
  %213 = load i32* getelementp... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %236 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %236 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %259 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %259 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %236 = load i32* getelementp... (idx: 0)        -5                            -5                            
  %259 = load i32* getelementp... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %236 = load i32* getelementp... (idx: 0)        1                             0                             
  %259 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %236 = load i32* getelementp... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 0)
  %259 = load i32* getelementp... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %282 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %282 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %305 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %305 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %282 = load i32* getelementp... (idx: 0)        -5                            -5                            
  %305 = load i32* getelementp... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %282 = load i32* getelementp... (idx: 0)        1                             0                             
  %305 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %282 = load i32* getelementp... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 0)
  %305 = load i32* getelementp... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %328 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %328 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %351 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %351 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %328 = load i32* getelementp... (idx: 0)        -5                            -5                            
  %351 = load i32* getelementp... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %328 = load i32* getelementp... (idx: 0)        1                             0                             
  %351 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %328 = load i32* getelementp... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 0)
  %351 = load i32* getelementp... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %3 = load i32* %2, align 4, ... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %3 = load i32* %2, align 4, ... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %374 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %374 = load i32* getelementp... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %3 = load i32* %2, align 4, ... (idx: 0)        5                             5                             
  %374 = load i32* getelementp... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %3 = load i32* %2, align 4, ... (idx: 0)        1                             0                             
  %374 = load i32* getelementp... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %3 = load i32* %2, align 4, ... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 1)
  %374 = load i32* getelementp... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i32* %9, align 4,... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %10 = load i32* %9, align 4,... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %15 = load i32* %14, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %15 = load i32* %14, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %10 = load i32* %9, align 4,... (idx: 0)        6                             5                             
  %15 = load i32* %14, align 4... (idx: 1)        6                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %10 = load i32* %9, align 4,... (idx: 0)        1                             0                             
  %15 = load i32* %14, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i32* %9, align 4,... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 2)
  %15 = load i32* %14, align 4... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %21 = load i32* %20, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %21 = load i32* %20, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %26 = load i32* %25, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %26 = load i32* %25, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %21 = load i32* %20, align 4... (idx: 0)        7                             6                             
  %26 = load i32* %25, align 4... (idx: 1)        7                             6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %21 = load i32* %20, align 4... (idx: 0)        1                             0                             
  %26 = load i32* %25, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %21 = load i32* %20, align 4... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 3)
  %26 = load i32* %25, align 4... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %33 = load i32* %32, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %33 = load i32* %32, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %38 = load i32* %37, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %38 = load i32* %37, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %33 = load i32* %32, align 4... (idx: 0)        8                             7                             
  %38 = load i32* %37, align 4... (idx: 1)        8                             7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %33 = load i32* %32, align 4... (idx: 0)        1                             0                             
  %38 = load i32* %37, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %33 = load i32* %32, align 4... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 4)
  %38 = load i32* %37, align 4... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %44 = load i32* %43, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %44 = load i32* %43, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %49 = load i32* %48, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %49 = load i32* %48, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %44 = load i32* %43, align 4... (idx: 0)        9                             8                             
  %49 = load i32* %48, align 4... (idx: 1)        9                             8                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %44 = load i32* %43, align 4... (idx: 0)        1                             0                             
  %49 = load i32* %48, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %44 = load i32* %43, align 4... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 5)
  %49 = load i32* %48, align 4... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %56 = load i32* %55, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %56 = load i32* %55, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %61 = load i32* %60, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %61 = load i32* %60, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %56 = load i32* %55, align 4... (idx: 0)        10                            9                             
  %61 = load i32* %60, align 4... (idx: 1)        10                            9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %56 = load i32* %55, align 4... (idx: 0)        1                             0                             
  %61 = load i32* %60, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %56 = load i32* %55, align 4... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 6)
  %61 = load i32* %60, align 4... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %67 = load i32* %66, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %67 = load i32* %66, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %72 = load i32* %71, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %72 = load i32* %71, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %67 = load i32* %66, align 4... (idx: 0)        11                            10                            
  %72 = load i32* %71, align 4... (idx: 1)        11                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %67 = load i32* %66, align 4... (idx: 0)        1                             0                             
  %72 = load i32* %71, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %67 = load i32* %66, align 4... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 7)
  %72 = load i32* %71, align 4... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %79 = load i32* %78, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %79 = load i32* %78, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %84 = load i32* %83, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %84 = load i32* %83, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %79 = load i32* %78, align 4... (idx: 0)        12                            11                            
  %84 = load i32* %83, align 4... (idx: 1)        12                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %79 = load i32* %78, align 4... (idx: 0)        1                             0                             
  %84 = load i32* %83, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %79 = load i32* %78, align 4... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 8)
  %84 = load i32* %83, align 4... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 7)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %90 = load i32* %89, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %90 = load i32* %89, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %95 = load i32* %94, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %95 = load i32* %94, align 4... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %90 = load i32* %89, align 4... (idx: 0)        13                            12                            
  %95 = load i32* %94, align 4... (idx: 1)        13                            12                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %90 = load i32* %89, align 4... (idx: 0)        1                             0                             
  %95 = load i32* %94, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %90 = load i32* %89, align 4... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 9)
  %95 = load i32* %94, align 4... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 8)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %102 = load i32* %101, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %102 = load i32* %101, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %107 = load i32* %106, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %107 = load i32* %106, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %102 = load i32* %101, align... (idx: 0)        14                            13                            
  %107 = load i32* %106, align... (idx: 1)        14                            13                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %102 = load i32* %101, align... (idx: 0)        1                             0                             
  %107 = load i32* %106, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %102 = load i32* %101, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 10)
  %107 = load i32* %106, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 9)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %113 = load i32* %112, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %113 = load i32* %112, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %118 = load i32* %117, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %118 = load i32* %117, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %113 = load i32* %112, align... (idx: 0)        15                            14                            
  %118 = load i32* %117, align... (idx: 1)        15                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %113 = load i32* %112, align... (idx: 0)        1                             0                             
  %118 = load i32* %117, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %113 = load i32* %112, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 11)
  %118 = load i32* %117, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 10)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %125 = load i32* %124, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %125 = load i32* %124, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %130 = load i32* %129, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %130 = load i32* %129, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %125 = load i32* %124, align... (idx: 0)        16                            15                            
  %130 = load i32* %129, align... (idx: 1)        16                            15                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %125 = load i32* %124, align... (idx: 0)        1                             0                             
  %130 = load i32* %129, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %125 = load i32* %124, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 12)
  %130 = load i32* %129, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 11)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %136 = load i32* %135, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %136 = load i32* %135, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %141 = load i32* %140, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %141 = load i32* %140, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %136 = load i32* %135, align... (idx: 0)        17                            16                            
  %141 = load i32* %140, align... (idx: 1)        17                            16                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %136 = load i32* %135, align... (idx: 0)        1                             0                             
  %141 = load i32* %140, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %136 = load i32* %135, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 13)
  %141 = load i32* %140, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 12)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %148 = load i32* %147, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %148 = load i32* %147, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %153 = load i32* %152, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %153 = load i32* %152, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %148 = load i32* %147, align... (idx: 0)        18                            17                            
  %153 = load i32* %152, align... (idx: 1)        18                            17                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %148 = load i32* %147, align... (idx: 0)        1                             0                             
  %153 = load i32* %152, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %148 = load i32* %147, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 14)
  %153 = load i32* %152, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 13)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %159 = load i32* %158, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %159 = load i32* %158, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %164 = load i32* %163, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %164 = load i32* %163, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %159 = load i32* %158, align... (idx: 0)        19                            18                            
  %164 = load i32* %163, align... (idx: 1)        19                            18                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %159 = load i32* %158, align... (idx: 0)        1                             0                             
  %164 = load i32* %163, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %159 = load i32* %158, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 15)
  %164 = load i32* %163, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 14)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %171 = load i32* %170, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %171 = load i32* %170, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %176 = load i32* %175, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %176 = load i32* %175, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %171 = load i32* %170, align... (idx: 0)        20                            19                            
  %176 = load i32* %175, align... (idx: 1)        20                            19                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %171 = load i32* %170, align... (idx: 0)        1                             0                             
  %176 = load i32* %175, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %171 = load i32* %170, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 16)
  %176 = load i32* %175, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 15)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %182 = load i32* %181, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %182 = load i32* %181, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %187 = load i32* %186, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %187 = load i32* %186, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %182 = load i32* %181, align... (idx: 0)        21                            20                            
  %187 = load i32* %186, align... (idx: 1)        21                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %182 = load i32* %181, align... (idx: 0)        1                             0                             
  %187 = load i32* %186, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %182 = load i32* %181, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 17)
  %187 = load i32* %186, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 16)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %194 = load i32* %193, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %194 = load i32* %193, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %199 = load i32* %198, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %199 = load i32* %198, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %194 = load i32* %193, align... (idx: 0)        22                            21                            
  %199 = load i32* %198, align... (idx: 1)        22                            21                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %194 = load i32* %193, align... (idx: 0)        1                             0                             
  %199 = load i32* %198, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %194 = load i32* %193, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 18)
  %199 = load i32* %198, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 17)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %205 = load i32* %204, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %205 = load i32* %204, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %210 = load i32* %209, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %210 = load i32* %209, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %205 = load i32* %204, align... (idx: 0)        23                            22                            
  %210 = load i32* %209, align... (idx: 1)        23                            22                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %205 = load i32* %204, align... (idx: 0)        1                             0                             
  %210 = load i32* %209, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %205 = load i32* %204, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 19)
  %210 = load i32* %209, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 18)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %217 = load i32* %216, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %217 = load i32* %216, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %222 = load i32* %221, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %222 = load i32* %221, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %217 = load i32* %216, align... (idx: 0)        24                            23                            
  %222 = load i32* %221, align... (idx: 1)        24                            23                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %217 = load i32* %216, align... (idx: 0)        1                             0                             
  %222 = load i32* %221, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %217 = load i32* %216, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 20)
  %222 = load i32* %221, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 19)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %228 = load i32* %227, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %228 = load i32* %227, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %233 = load i32* %232, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %233 = load i32* %232, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %228 = load i32* %227, align... (idx: 0)        25                            24                            
  %233 = load i32* %232, align... (idx: 1)        25                            24                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %228 = load i32* %227, align... (idx: 0)        1                             0                             
  %233 = load i32* %232, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %228 = load i32* %227, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 21)
  %233 = load i32* %232, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 20)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %240 = load i32* %239, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %240 = load i32* %239, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %245 = load i32* %244, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %245 = load i32* %244, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %240 = load i32* %239, align... (idx: 0)        26                            25                            
  %245 = load i32* %244, align... (idx: 1)        26                            25                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %240 = load i32* %239, align... (idx: 0)        1                             0                             
  %245 = load i32* %244, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %240 = load i32* %239, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 22)
  %245 = load i32* %244, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 21)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %251 = load i32* %250, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %251 = load i32* %250, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %256 = load i32* %255, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %256 = load i32* %255, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %251 = load i32* %250, align... (idx: 0)        27                            26                            
  %256 = load i32* %255, align... (idx: 1)        27                            26                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %251 = load i32* %250, align... (idx: 0)        1                             0                             
  %256 = load i32* %255, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %251 = load i32* %250, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 23)
  %256 = load i32* %255, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 22)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %263 = load i32* %262, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %263 = load i32* %262, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %268 = load i32* %267, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %268 = load i32* %267, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %263 = load i32* %262, align... (idx: 0)        28                            27                            
  %268 = load i32* %267, align... (idx: 1)        28                            27                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %263 = load i32* %262, align... (idx: 0)        1                             0                             
  %268 = load i32* %267, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %263 = load i32* %262, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 24)
  %268 = load i32* %267, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 23)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %274 = load i32* %273, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %274 = load i32* %273, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %279 = load i32* %278, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %279 = load i32* %278, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %274 = load i32* %273, align... (idx: 0)        29                            28                            
  %279 = load i32* %278, align... (idx: 1)        29                            28                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %274 = load i32* %273, align... (idx: 0)        1                             0                             
  %279 = load i32* %278, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %274 = load i32* %273, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 25)
  %279 = load i32* %278, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 24)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %286 = load i32* %285, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %286 = load i32* %285, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %291 = load i32* %290, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %291 = load i32* %290, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %286 = load i32* %285, align... (idx: 0)        30                            29                            
  %291 = load i32* %290, align... (idx: 1)        30                            29                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %286 = load i32* %285, align... (idx: 0)        1                             0                             
  %291 = load i32* %290, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %286 = load i32* %285, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 26)
  %291 = load i32* %290, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 25)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %297 = load i32* %296, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %297 = load i32* %296, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %302 = load i32* %301, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %302 = load i32* %301, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %297 = load i32* %296, align... (idx: 0)        31                            30                            
  %302 = load i32* %301, align... (idx: 1)        31                            30                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %297 = load i32* %296, align... (idx: 0)        1                             0                             
  %302 = load i32* %301, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %297 = load i32* %296, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 27)
  %302 = load i32* %301, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 26)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %309 = load i32* %308, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %309 = load i32* %308, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %314 = load i32* %313, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %314 = load i32* %313, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %309 = load i32* %308, align... (idx: 0)        32                            31                            
  %314 = load i32* %313, align... (idx: 1)        32                            31                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %309 = load i32* %308, align... (idx: 0)        1                             0                             
  %314 = load i32* %313, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %309 = load i32* %308, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 28)
  %314 = load i32* %313, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 27)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %320 = load i32* %319, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %320 = load i32* %319, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %325 = load i32* %324, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %325 = load i32* %324, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %320 = load i32* %319, align... (idx: 0)        33                            32                            
  %325 = load i32* %324, align... (idx: 1)        33                            32                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %320 = load i32* %319, align... (idx: 0)        1                             0                             
  %325 = load i32* %324, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %320 = load i32* %319, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 29)
  %325 = load i32* %324, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 28)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %332 = load i32* %331, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %332 = load i32* %331, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %337 = load i32* %336, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %337 = load i32* %336, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %332 = load i32* %331, align... (idx: 0)        34                            33                            
  %337 = load i32* %336, align... (idx: 1)        34                            33                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %332 = load i32* %331, align... (idx: 0)        1                             0                             
  %337 = load i32* %336, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %332 = load i32* %331, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 30)
  %337 = load i32* %336, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 29)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %343 = load i32* %342, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %343 = load i32* %342, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %348 = load i32* %347, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %348 = load i32* %347, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %343 = load i32* %342, align... (idx: 0)        35                            34                            
  %348 = load i32* %347, align... (idx: 1)        35                            34                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %343 = load i32* %342, align... (idx: 0)        1                             0                             
  %348 = load i32* %347, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %343 = load i32* %342, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 31)
  %348 = load i32* %347, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 30)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %355 = load i32* %354, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %355 = load i32* %354, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %360 = load i32* %359, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %360 = load i32* %359, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %355 = load i32* %354, align... (idx: 0)        36                            35                            
  %360 = load i32* %359, align... (idx: 1)        36                            35                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %355 = load i32* %354, align... (idx: 0)        1                             0                             
  %360 = load i32* %359, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %355 = load i32* %354, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 32)
  %360 = load i32* %359, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 31)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %366 = load i32* %365, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %366 = load i32* %365, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  %371 = load i32* %370, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  %371 = load i32* %370, align... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %366 = load i32* %365, align... (idx: 0)        37                            36                            
  %371 = load i32* %370, align... (idx: 1)        37                            36                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  %366 = load i32* %365, align... (idx: 0)        1                             0                             
  %371 = load i32* %370, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %366 = load i32* %365, align... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 33)
  %371 = load i32* %370, align... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 32)
State: LEGUP_F_BF_encrypt_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %373, i32* %2, ali... can share an input with another operation already assigned to BF_encrypt_mem_dual_port_0
  store i32 %373, i32* %2, ali... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  store i32 %373, i32* %2, ali... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
  store i32 %375, i32* %data, ... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_0
  store i32 %375, i32* %data, ... can share an output register with another operation already assigned to BF_encrypt_mem_dual_port_1
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  store i32 %373, i32* %2, ali... (idx: 0)        38                            47                            
  store i32 %375, i32* %data, ... (idx: 1)        38                            37                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  BF_encrypt_mem_dual_port_0    BF_encrypt_mem_dual_port_1    
  store i32 %373, i32* %2, ali... (idx: 0)        1                             0                             
  store i32 %375, i32* %data, ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %373, i32* %2, ali... (idx: 0) -> BF_encrypt_mem_dual_port_0 (mux inputs: 34)
  store i32 %375, i32* %data, ... (idx: 1) -> BF_encrypt_mem_dual_port_1 (mux inputs: 33)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__1
Binding functional unit type: main_0_iveci_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  store i8 0, i8* %scevgep23, ... (idx: 0)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  store i8 0, i8* %scevgep23, ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 0, i8* %scevgep23, ... (idx: 0) -> main_main_0_iveci_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: main_0_ukeyi_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_main_0_ukeyi_local_mem_dual_port_0
  store i8 0, i8* %scevgep24, ... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_ukeyi_local_mem_dual_port_0
  store i8 0, i8* %scevgep24, ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 0, i8* %scevgep24, ... (idx: 0) -> main_main_0_ukeyi_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_lrphiii
Binding functional unit type: bf_init_P_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_bf_init_P_local_mem_dual_port_0
  %3 = load i32* %p2.03.i.i.i,... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bf_init_P_local_mem_dual_port_0
  %3 = load i32* %p2.03.i.i.i,... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %3 = load i32* %p2.03.i.i.i,... (idx: 0) -> main_bf_init_P_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_lrphiii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %3, i32* %p1.02.i.... (idx: 0)        20                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %3, i32* %p1.02.i.... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %3, i32* %p1.02.i.... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_lrphi4ii
Binding functional unit type: bf_init_S_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_bf_init_S_local_mem_dual_port_0
  %4 = load i32* %p2.03.i1.i.i... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bf_init_S_local_mem_dual_port_0
  %4 = load i32* %p2.03.i1.i.i... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = load i32* %p2.03.i1.i.i... (idx: 0) -> main_bf_init_S_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_lrphi4ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %4, i32* %p1.02.i2... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %4, i32* %p1.02.i2... (idx: 0)        17                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %4, i32* %p1.02.i2... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %4, i32* %p1.02.i2... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB__7
Binding functional unit type: main_0_ukeyi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %9 = load i8* %d.05.i.i, ali... can share an output register with another operation already assigned to main_main_0_ukeyi_local_mem_dual_port_0
                                                  main_main_0_ukeyi_local_mem_dual_port_0
  %9 = load i8* %d.05.i.i, ali... (idx: 0)        6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_ukeyi_local_mem_dual_port_0
  %9 = load i8* %d.05.i.i, ali... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %9 = load i8* %d.05.i.i, ali... (idx: 0) -> main_main_0_ukeyi_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB__7
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %30 = load i32* %scevgep11, ... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %30 = load i32* %scevgep11, ... (idx: 0)        9                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %30 = load i32* %scevgep11, ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %30 = load i32* %scevgep11, ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB__7
Binding functional unit type: main_0_ukeyi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %14 = load i8* %.data.i.i, a... can share an output register with another operation already assigned to main_main_0_ukeyi_local_mem_dual_port_0
                                                  main_main_0_ukeyi_local_mem_dual_port_0
  %14 = load i8* %.data.i.i, a... (idx: 0)        7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_ukeyi_local_mem_dual_port_0
  %14 = load i8* %.data.i.i, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %14 = load i8* %.data.i.i, a... (idx: 0) -> main_main_0_ukeyi_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_main_BB__7
Binding functional unit type: main_0_ukeyi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %20 = load i8* %d.2.i.i, ali... can share an output register with another operation already assigned to main_main_0_ukeyi_local_mem_dual_port_0
                                                  main_main_0_ukeyi_local_mem_dual_port_0
  %20 = load i8* %d.2.i.i, ali... (idx: 0)        8                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_ukeyi_local_mem_dual_port_0
  %20 = load i8* %d.2.i.i, ali... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %20 = load i8* %d.2.i.i, ali... (idx: 0) -> main_main_0_ukeyi_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB__7
Binding functional unit type: main_0_ukeyi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %26 = load i8* %.data1.i.i, ... can share an output register with another operation already assigned to main_main_0_ukeyi_local_mem_dual_port_0
                                                  main_main_0_ukeyi_local_mem_dual_port_0
  %26 = load i8* %.data1.i.i, ... (idx: 0)        9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_ukeyi_local_mem_dual_port_0
  %26 = load i8* %.data1.i.i, ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %26 = load i8* %.data1.i.i, ... (idx: 0) -> main_main_0_ukeyi_local_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB__7
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %31, i32* %scevgep... can share an input with another operation already assigned to main_mem_dual_port_0
  store i32 %31, i32* %scevgep... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %31, i32* %scevgep... (idx: 0)        10                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %31, i32* %scevgep... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %31, i32* %scevgep... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 6)
State: LEGUP_F_main_BB__33
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* %34, align... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* %35, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* %34, align... (idx: 0)        11                            10                            
  store i32 0, i32* %35, align... (idx: 1)        11                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* %34, align... (idx: 0)        1                             0                             
  store i32 0, i32* %35, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* %34, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 7)
  store i32 0, i32* %35, align... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__36
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %39 = load i32* %34, align 4... can share an input with another operation already assigned to main_mem_dual_port_0
  %39 = load i32* %34, align 4... can share an output register with another operation already assigned to main_mem_dual_port_0
  %39 = load i32* %34, align 4... can share an output register with another operation already assigned to main_mem_dual_port_1
  %40 = load i32* %35, align 4... can share an output register with another operation already assigned to main_mem_dual_port_0
  %40 = load i32* %35, align 4... can share an input with another operation already assigned to main_mem_dual_port_1
  %40 = load i32* %35, align 4... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %39 = load i32* %34, align 4... (idx: 0)        2                             6                             
  %40 = load i32* %35, align 4... (idx: 1)        12                            -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %39 = load i32* %34, align 4... (idx: 0)        1                             0                             
  %40 = load i32* %35, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %39 = load i32* %34, align 4... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 7)
  %40 = load i32* %35, align 4... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__36
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %39, i32* %scevgep... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %39, i32* %scevgep... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %40, i32* %scevgep... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %40, i32* %scevgep... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %39, i32* %scevgep... (idx: 0)        22                            16                            
  store i32 %40, i32* %scevgep... (idx: 1)        22                            16                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %39, i32* %scevgep... (idx: 0)        1                             0                             
  store i32 %40, i32* %scevgep... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %39, i32* %scevgep... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 9)
  store i32 %40, i32* %scevgep... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_main_BB_preheaderii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %43 = load i32* %34, align 4... can share an input with another operation already assigned to main_mem_dual_port_0
  %43 = load i32* %34, align 4... can share an output register with another operation already assigned to main_mem_dual_port_0
  %43 = load i32* %34, align 4... can share an output register with another operation already assigned to main_mem_dual_port_1
  %44 = load i32* %35, align 4... can share an output register with another operation already assigned to main_mem_dual_port_0
  %44 = load i32* %35, align 4... can share an input with another operation already assigned to main_mem_dual_port_1
  %44 = load i32* %35, align 4... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %43 = load i32* %34, align 4... (idx: 0)        4                             8                             
  %44 = load i32* %35, align 4... (idx: 1)        14                            -2                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %43 = load i32* %34, align 4... (idx: 0)        1                             0                             
  %44 = load i32* %35, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %43 = load i32* %34, align 4... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 9)
  %44 = load i32* %35, align 4... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_main_BB_preheaderii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %43, i32* %scevgep... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %43, i32* %scevgep... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %44, i32* %scevgep... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %44, i32* %scevgep... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %43, i32* %scevgep... (idx: 0)        24                            18                            
  store i32 %44, i32* %scevgep... (idx: 1)        24                            18                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %43, i32* %scevgep... (idx: 0)        1                             0                             
  store i32 %44, i32* %scevgep... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %43, i32* %scevgep... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 11)
  store i32 %44, i32* %scevgep... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_main_BB_loopexiti
Binding functional unit type: in_key_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_in_key_local_mem_dual_port_0
  %53 = load i8* %scevgep1, al... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_in_key_local_mem_dual_port_0
  %53 = load i8* %scevgep1, al... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %53 = load i8* %scevgep1, al... (idx: 0) -> main_in_key_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__55
Binding functional unit type: main_0_iveci_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %56 = load i8* %45, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  %59 = load i8* %46, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  %56 = load i8* %45, align 1,... (idx: 0)        6                             10                            
  %59 = load i8* %46, align 1,... (idx: 1)        6                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  %56 = load i8* %45, align 1,... (idx: 0)        1                             0                             
  %59 = load i8* %46, align 1,... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %56 = load i8* %45, align 1,... (idx: 0) -> main_main_0_iveci_local_mem_dual_port_0 (mux inputs: 2)
  %59 = load i8* %46, align 1,... (idx: 1) -> main_main_0_iveci_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__55
Binding functional unit type: main_0_iveci_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %63 = load i8* %47, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  %63 = load i8* %47, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
  %67 = load i8* %48, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  %67 = load i8* %48, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  %63 = load i8* %47, align 1,... (idx: 0)        7                             6                             
  %67 = load i8* %48, align 1,... (idx: 1)        7                             6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  %63 = load i8* %47, align 1,... (idx: 0)        1                             0                             
  %67 = load i8* %48, align 1,... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %63 = load i8* %47, align 1,... (idx: 0) -> main_main_0_iveci_local_mem_dual_port_0 (mux inputs: 3)
  %67 = load i8* %48, align 1,... (idx: 1) -> main_main_0_iveci_local_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_main_BB__55
Binding functional unit type: main_0_iveci_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %70 = load i8* %49, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  %70 = load i8* %49, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
  %73 = load i8* %50, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  %73 = load i8* %50, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  %70 = load i8* %49, align 1,... (idx: 0)        8                             7                             
  %73 = load i8* %50, align 1,... (idx: 1)        8                             7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  %70 = load i8* %49, align 1,... (idx: 0)        1                             0                             
  %73 = load i8* %50, align 1,... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %70 = load i8* %49, align 1,... (idx: 0) -> main_main_0_iveci_local_mem_dual_port_0 (mux inputs: 4)
  %73 = load i8* %50, align 1,... (idx: 1) -> main_main_0_iveci_local_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_main_BB__55
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %69, i32* %34, ali... can share an input with another operation already assigned to main_mem_dual_port_0
  store i32 %69, i32* %34, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %69, i32* %34, ali... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %69, i32* %34, ali... (idx: 0)        16                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %69, i32* %34, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %69, i32* %34, ali... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 12)
State: LEGUP_F_main_BB__55
Binding functional unit type: main_0_iveci_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %77 = load i8* %51, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  %77 = load i8* %51, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
  %81 = load i8* %52, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  %81 = load i8* %52, align 1,... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  %77 = load i8* %51, align 1,... (idx: 0)        9                             8                             
  %81 = load i8* %52, align 1,... (idx: 1)        9                             8                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  %77 = load i8* %51, align 1,... (idx: 0)        1                             0                             
  %81 = load i8* %52, align 1,... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %77 = load i8* %51, align 1,... (idx: 0) -> main_main_0_iveci_local_mem_dual_port_0 (mux inputs: 5)
  %81 = load i8* %52, align 1,... (idx: 1) -> main_main_0_iveci_local_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_main_BB__55
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %83, i32* %35, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %83, i32* %35, ali... can share an input with another operation already assigned to main_mem_dual_port_1
  store i32 %83, i32* %35, ali... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %83, i32* %35, ali... (idx: 0)        27                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %83, i32* %35, ali... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %83, i32* %35, ali... (idx: 0) -> main_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_main_BB__55
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %84 = load i32* %34, align 4... can share an input with another operation already assigned to main_mem_dual_port_0
  %84 = load i32* %34, align 4... can share an output register with another operation already assigned to main_mem_dual_port_0
  %84 = load i32* %34, align 4... can share an output register with another operation already assigned to main_mem_dual_port_1
  %92 = load i32* %35, align 4... can share an output register with another operation already assigned to main_mem_dual_port_0
  %92 = load i32* %35, align 4... can share an input with another operation already assigned to main_mem_dual_port_1
  %92 = load i32* %35, align 4... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %84 = load i32* %34, align 4... (idx: 0)        7                             11                            
  %92 = load i32* %35, align 4... (idx: 1)        17                            1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %84 = load i32* %34, align 4... (idx: 0)        1                             0                             
  %92 = load i32* %35, align 4... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %84 = load i32* %34, align 4... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 12)
  %92 = load i32* %35, align 4... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_main_BB__55
Binding functional unit type: main_0_iveci_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i8 %86, i8* %45, align... can share an input with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %86, i8* %45, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %86, i8* %45, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
  store i8 %88, i8* %46, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %88, i8* %46, align... can share an input with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
  store i8 %88, i8* %46, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  store i8 %86, i8* %45, align... (idx: 0)        10                            19                            
  store i8 %88, i8* %46, align... (idx: 1)        20                            9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  store i8 %86, i8* %45, align... (idx: 0)        1                             0                             
  store i8 %88, i8* %46, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %86, i8* %45, align... (idx: 0) -> main_main_0_iveci_local_mem_dual_port_0 (mux inputs: 6)
  store i8 %88, i8* %46, align... (idx: 1) -> main_main_0_iveci_local_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_main_BB__55
Binding functional unit type: main_0_iveci_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i8 %90, i8* %47, align... can share an input with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %90, i8* %47, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %90, i8* %47, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
  store i8 %91, i8* %48, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %91, i8* %48, align... can share an input with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
  store i8 %91, i8* %48, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  store i8 %90, i8* %47, align... (idx: 0)        11                            20                            
  store i8 %91, i8* %48, align... (idx: 1)        21                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  store i8 %90, i8* %47, align... (idx: 0)        1                             0                             
  store i8 %91, i8* %48, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %90, i8* %47, align... (idx: 0) -> main_main_0_iveci_local_mem_dual_port_0 (mux inputs: 7)
  store i8 %91, i8* %48, align... (idx: 1) -> main_main_0_iveci_local_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_main_BB__55
Binding functional unit type: main_0_iveci_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i8 %94, i8* %49, align... can share an input with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %94, i8* %49, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %94, i8* %49, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
  store i8 %96, i8* %50, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %96, i8* %50, align... can share an input with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
  store i8 %96, i8* %50, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  store i8 %94, i8* %49, align... (idx: 0)        12                            21                            
  store i8 %96, i8* %50, align... (idx: 1)        22                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  store i8 %94, i8* %49, align... (idx: 0)        1                             0                             
  store i8 %96, i8* %50, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %94, i8* %49, align... (idx: 0) -> main_main_0_iveci_local_mem_dual_port_0 (mux inputs: 8)
  store i8 %96, i8* %50, align... (idx: 1) -> main_main_0_iveci_local_mem_dual_port_1 (mux inputs: 7)
State: LEGUP_F_main_BB__55
Binding functional unit type: main_0_iveci_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i8 %98, i8* %51, align... can share an input with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %98, i8* %51, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %98, i8* %51, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
  store i8 %99, i8* %52, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %99, i8* %52, align... can share an input with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
  store i8 %99, i8* %52, align... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  store i8 %98, i8* %51, align... (idx: 0)        13                            22                            
  store i8 %99, i8* %52, align... (idx: 1)        23                            12                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  store i8 %98, i8* %51, align... (idx: 0)        1                             0                             
  store i8 %99, i8* %52, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %98, i8* %51, align... (idx: 0) -> main_main_0_iveci_local_mem_dual_port_0 (mux inputs: 9)
  store i8 %99, i8* %52, align... (idx: 1) -> main_main_0_iveci_local_mem_dual_port_1 (mux inputs: 8)
State: LEGUP_F_main_BB_BF_cfb64_encryptexiti
Binding functional unit type: main_0_iveci_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %101 = load i8* %100, align ... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  %101 = load i8* %100, align ... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  %101 = load i8* %100, align ... (idx: 0)        14                            13                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  %101 = load i8* %100, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %101 = load i8* %100, align ... (idx: 0) -> main_main_0_iveci_local_mem_dual_port_1 (mux inputs: 9)
State: LEGUP_F_main_BB_BF_cfb64_encryptexiti
Binding functional unit type: out_key_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_out_key_local_mem_dual_port_0
  %105 = load i8* %scevgep, al... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_out_key_local_mem_dual_port_0
  %105 = load i8* %scevgep, al... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %105 = load i8* %scevgep, al... (idx: 0) -> main_out_key_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_BF_cfb64_encryptexiti
Binding functional unit type: main_0_iveci_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i8 %102, i8* %100, ali... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_0
  store i8 %102, i8* %100, ali... can share an input with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
  store i8 %102, i8* %100, ali... can share an output register with another operation already assigned to main_main_0_iveci_local_mem_dual_port_1
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  store i8 %102, i8* %100, ali... (idx: 0)        24                            14                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_iveci_local_mem_dual_port_0main_main_0_iveci_local_mem_dual_port_1
  store i8 %102, i8* %100, ali... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %102, i8* %100, ali... (idx: 0) -> main_main_0_iveci_local_mem_dual_port_1 (mux inputs: 10)

