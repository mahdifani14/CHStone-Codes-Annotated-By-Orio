//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Apr 25 11:27:45 2017
//----------------------------------------------------------------------------//

allocateRAM: @a_input
Constant: 1
allocateRAM: @b_input
Constant: 1
allocateRAM: @z_output
Constant: 1
allocateRAM: @countLeadingZeros32.countLeadingZerosHigh
Constant: 1
allocating global ram: @a_input
allocating global ram: @b_input
allocating global ram: @z_output
allocating global ram: @countLeadingZeros32.countLeadingZerosHigh
# of Vertices: 74
Representatives: 
1 -> 1
2 -> 2
3 -> 3
4 -> 4
5 -> 5
6 -> 6
7 -> 7
8 -> 8
9 -> 9
10 -> 10
11 -> 11
12 -> 12
13 -> 13
14 -> 14
15 -> 15
16 -> 16
17 -> 17
18 -> 18
19 -> 19
20 -> 20
21 -> 21
22 -> 22
23 -> 23
24 -> 24
25 -> 25
26 -> 26
27 -> 27
28 -> 28
29 -> 29
30 -> 30
31 -> 31
32 -> 32
33 -> 33
34 -> 34
35 -> 35
36 -> 36
37 -> 37
38 -> 38
39 -> 39
40 -> 40
41 -> 41
42 -> 42
43 -> 43
44 -> 44
45 -> 45
46 -> 46
47 -> 47
48 -> 48
49 -> 49
50 -> 50
51 -> 51
52 -> 52
53 -> 53
54 -> 54
55 -> 55
56 -> 56
57 -> 57
58 -> 58
59 -> 59
60 -> 60
61 -> 61
62 -> 62
63 -> 63
64 -> 64
65 -> 65
66 -> 66
67 -> 67
68 -> 68
69 -> 69
70 -> 70
71 -> 71
72 -> 72
73 -> 73
74 -> 74

Connections (Graph): 
1 -> 20 
2 -> 19 
3 -> 21 
4 -> 18 
5 -> 70 
6 -> 17 
7 -> 
8 -> 
9 -> 
10 -> 
11 -> 
12 -> 
13 -> 
14 -> 
15 -> 33 42 
16 -> 32 41 
17 -> 
18 -> 
19 -> 
20 -> 
21 -> 26 27 
22 -> 
23 -> 22 
24 -> 
25 -> 24 
26 -> 
27 -> 
28 -> 
29 -> 28 
30 -> 
31 -> 30 
32 -> 
33 -> 34 
34 -> 36 
35 -> 34 
36 -> 
37 -> 
38 -> 37 
39 -> 
40 -> 39 
41 -> 
42 -> 43 
43 -> 45 
44 -> 43 
45 -> 
46 -> 60 
47 -> 46 
48 -> 50 
49 -> 48 
50 -> 
51 -> 
52 -> 51 
53 -> 55 
54 -> 53 
55 -> 
56 -> 58 
57 -> 56 
58 -> 59 
59 -> 
60 -> 
61 -> 
62 -> 61 63 
63 -> 
64 -> 
65 -> 64 
66 -> 
67 -> 66 
68 -> 
69 -> 68 
70 -> 
71 -> 
72 -> 71 
73 -> 
74 -> 73 

Points-to-set: 
1 -> {}
2 -> {1, }
3 -> {}
4 -> {3, }
5 -> {}
6 -> {5, }
7 -> {}
8 -> {7, }
9 -> {}
10 -> {9, }
11 -> {}
12 -> {11, }
13 -> {}
14 -> {13, }
15 -> {}
16 -> {15, }
17 -> {5, }
18 -> {3, }
19 -> {1, }
20 -> {}
21 -> {}
22 -> {}
23 -> {}
24 -> {}
25 -> {}
26 -> {}
27 -> {}
28 -> {}
29 -> {}
30 -> {}
31 -> {}
32 -> {15, }
33 -> {}
34 -> {}
35 -> {}
36 -> {}
37 -> {}
38 -> {}
39 -> {}
40 -> {}
41 -> {15, }
42 -> {}
43 -> {}
44 -> {}
45 -> {}
46 -> {}
47 -> {}
48 -> {}
49 -> {}
50 -> {}
51 -> {}
52 -> {}
53 -> {}
54 -> {}
55 -> {}
56 -> {}
57 -> {}
58 -> {}
59 -> {}
60 -> {}
61 -> {}
62 -> {}
63 -> {}
64 -> {}
65 -> {}
66 -> {}
67 -> {}
68 -> {}
69 -> {}
70 -> {}
71 -> {}
72 -> {}
73 -> {}
74 -> {}

Variable: Int -> Value* mapping
6: @z_output = internal unnamed_addr constant [20 x i64] [i64 -1, i64 9223090561878065152, i64 9223372036854775807, i64 9218868437227405312, i64 -281474976710656, i64 9223372036854775807, i64 9218868437227405312, i64 0, i64 -9223372036854775808, i64 0, i64 -9223372036854775808, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 -4620693217682128896, i64 -4620693217682128896, i64 -4620693217682128896, i64 -4620693217682128896, i64 0], align 8
16: @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
2: @a_input = internal unnamed_addr constant [20 x i64] [i64 9218868437227405312, i64 9223090561878065152, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 0, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4607182418800017408, i64 4607182418800017408, i64 4611686018427387904, i64 4598175219545276416, i64 -4611686018427387904, i64 -4625196817309499392, i64 4611686018427387904, i64 -4625196817309499392, i64 -4611686018427387904, i64 4598175219545276416, i64 0], align 8
8: @.str = private unnamed_addr constant [65 x i8] c"a_input=%016llx b_input=%016llx expected=%016llx output=%016llx\0A\00", align 1
10: @.str1 = private unnamed_addr constant [12 x i8] c"Result: %d\0A\00", align 1
12: @.str2 = private unnamed_addr constant [14 x i8] c"RESULT: PASS\0A\00", align 1
14: @.str3 = private unnamed_addr constant [14 x i8] c"RESULT: FAIL\0A\00", align 1
4: @b_input = internal unnamed_addr constant [20 x i64] [i64 -1, i64 -4503599627370496, i64 0, i64 4607182418800017408, i64 -281474976710656, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4598175219545276416, i64 4611686018427387904, i64 -4625196817309499392, i64 -4611686018427387904, i64 -4625196817309499392, i64 4611686018427387904, i64 4598175219545276416, i64 -4611686018427387904, i64 0], align 8
74:   %2 = phi i32 [ 0, %0 ], [ %201, %float64_mul.exit ]
17:   %scevgep = getelementptr [20 x i64]* @z_output, i32 0, i32 %2
18:   %scevgep2 = getelementptr [20 x i64]* @b_input, i32 0, i32 %2
19:   %scevgep3 = getelementptr [20 x i64]* @a_input, i32 0, i32 %2
20:   %3 = load i64* %scevgep3, align 8, !tbaa !1
21:   %4 = load i64* %scevgep2, align 8, !tbaa !1
23:   %6 = lshr i64 %3, 52
22:   %.tr.i19.i = trunc i64 %6 to i32
27:   %48 = trunc i64 %4 to i63
37:   %extract.t.i.i.i = trunc i64 %99 to i32
70:   %196 = load i64* %scevgep, align 8, !tbaa !1
72:   %198 = zext i1 %197 to i32
71:   %199 = add nsw i32 %198, %main_result.02
73:   %201 = add nsw i32 %2, 1
44:   %shiftCount.1.i.i.i.i = phi i32 [ %105, %104 ], [ %..i.i.i.i, %98 ]
41:   %108 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %107
42:   %109 = load i32* %108, align 4, !tbaa !5
43:   %110 = add i32 %shiftCount.1.i.i.i.i, %109
45:   %111 = add nsw i32 %110, -11
25:   %9 = lshr i64 %4, 52
24:   %.tr.i18.i = trunc i64 %9 to i32
26:   %22 = trunc i64 %4 to i63
40:   %101 = shl nuw nsw i64 %99, 16
39:   %102 = trunc i64 %101 to i32
29:   %75 = lshr i64 %5, 32
28:   %extract.t.i.i4.i = trunc i64 %75 to i32
31:   %77 = shl nuw nsw i64 %75, 16
30:   %78 = trunc i64 %77 to i32
35:   %shiftCount.1.i.i.i8.i = phi i32 [ %81, %80 ], [ %..i.i.i6.i, %74 ]
32:   %84 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %83
33:   %85 = load i32* %84, align 4, !tbaa !5
34:   %86 = add i32 %shiftCount.1.i.i.i8.i, %85
36:   %87 = add nsw i32 %86, -11
38:   %99 = lshr i64 %8, 32
47:   %116 = phi i32 [ %114, %normalizeFloat64Subnormal.exit.i ], [ %10, %91 ]
46:   %118 = add nsw i32 %116, %92
49:   %overflow_intrinsic = zext i64 %130 to i65
48:   %overflow_intrinsic2 = add nuw i65 %overflow_intrinsic, %overflow_intrinsic1
50:   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64
52:   %133 = lshr i65 %overflow_intrinsic2, 32
51:   %.tr = trunc i65 %133 to i64
54:   %overflow_intrinsic4 = zext i64 %129 to i65
53:   %overflow_intrinsic6 = add nuw i65 %overflow_intrinsic4, %overflow_intrinsic5
55:   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64
57:   %overflow_intrinsic8 = lshr i65 %overflow_intrinsic6, 64
56:   %138 = trunc i65 %overflow_intrinsic8 to i64
58:   %139 = add i64 %138, %132
59:   %140 = add i64 %139, %136
62:   %..i = select i1 %145, i64 %144, i64 %143
60:   %.20.i = add i32 %118, %.20.v.i
61:   %.tr.i.i = trunc i64 %..i to i32
63:   %154 = add i64 %..i, 512
65:   %z.0.i.i.i = phi i64 [ %173, %164 ], [ %176, %174 ]
64:   %.tr3.i.i = trunc i64 %z.0.i.i.i to i32
67:   %zSig57.i.i = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %zSig5.i.i, %.thread.i.i ]
66:   %183 = add i64 %zSig57.i.i, 512
69:   %193 = select i1 %190, i64 0, i64 %.op.i.i
68:   %195 = add i64 %193, %194
Memory: Int -> Value* mapping
5: @z_output = internal unnamed_addr constant [20 x i64] [i64 -1, i64 9223090561878065152, i64 9223372036854775807, i64 9218868437227405312, i64 -281474976710656, i64 9223372036854775807, i64 9218868437227405312, i64 0, i64 -9223372036854775808, i64 0, i64 -9223372036854775808, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 -4620693217682128896, i64 -4620693217682128896, i64 -4620693217682128896, i64 -4620693217682128896, i64 0], align 8
15: @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
1: @a_input = internal unnamed_addr constant [20 x i64] [i64 9218868437227405312, i64 9223090561878065152, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 0, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4607182418800017408, i64 4607182418800017408, i64 4611686018427387904, i64 4598175219545276416, i64 -4611686018427387904, i64 -4625196817309499392, i64 4611686018427387904, i64 -4625196817309499392, i64 -4611686018427387904, i64 4598175219545276416, i64 0], align 8
7: @.str = private unnamed_addr constant [65 x i8] c"a_input=%016llx b_input=%016llx expected=%016llx output=%016llx\0A\00", align 1
9: @.str1 = private unnamed_addr constant [12 x i8] c"Result: %d\0A\00", align 1
11: @.str2 = private unnamed_addr constant [14 x i8] c"RESULT: PASS\0A\00", align 1
13: @.str3 = private unnamed_addr constant [14 x i8] c"RESULT: FAIL\0A\00", align 1
3: @b_input = internal unnamed_addr constant [20 x i64] [i64 -1, i64 -4503599627370496, i64 0, i64 4607182418800017408, i64 -281474976710656, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4598175219545276416, i64 4611686018427387904, i64 -4625196817309499392, i64 -4611686018427387904, i64 -4625196817309499392, i64 4611686018427387904, i64 4598175219545276416, i64 -4611686018427387904, i64 0], align 8
digraph "dfmul.bc" {
    1 [label="#1",color=blue,style=solid];
    2 [label="a_input",color=blue,style=solid];
    3 [label="#3",color=blue,style=solid];
    4 [label="b_input",color=blue,style=solid];
    5 [label="#5",color=blue,style=solid];
    6 [label="z_output",color=blue,style=solid];
    7 [label="#7",color=blue,style=solid];
    8 [label=".str",color=blue,style=solid];
    9 [label="#9",color=blue,style=solid];
    10 [label=".str1",color=blue,style=solid];
    11 [label="#11",color=blue,style=solid];
    12 [label=".str2",color=blue,style=solid];
    13 [label="#13",color=blue,style=solid];
    14 [label=".str3",color=blue,style=solid];
    15 [label="#15",color=blue,style=solid];
    16 [label="countLeadingZeros32.countLeadingZerosHigh",color=blue,style=solid];
    17 [label="scevgep",color=blue,style=solid];
    18 [label="scevgep2",color=blue,style=solid];
    19 [label="scevgep3",color=blue,style=solid];
    20 [label="unknown",color=blue,style=solid];
    21 [label="unknown",color=blue,style=solid];
    22 [label=".tr.i19.i",color=blue,style=solid];
    23 [label="unknown",color=blue,style=solid];
    24 [label=".tr.i18.i",color=blue,style=solid];
    25 [label="unknown",color=blue,style=solid];
    26 [label="unknown",color=blue,style=solid];
    27 [label="unknown",color=blue,style=solid];
    28 [label="extract.t.i.i4.i",color=blue,style=solid];
    29 [label="unknown",color=blue,style=solid];
    30 [label="unknown",color=blue,style=solid];
    31 [label="unknown",color=blue,style=solid];
    32 [label="unknown",color=blue,style=solid];
    33 [label="unknown",color=blue,style=solid];
    34 [label="unknown",color=blue,style=solid];
    35 [label="shiftCount.1.i.i.i8.i",color=blue,style=solid];
    36 [label="unknown",color=blue,style=solid];
    37 [label="extract.t.i.i.i",color=blue,style=solid];
    38 [label="unknown",color=blue,style=solid];
    39 [label="unknown",color=blue,style=solid];
    40 [label="unknown",color=blue,style=solid];
    41 [label="unknown",color=blue,style=solid];
    42 [label="unknown",color=blue,style=solid];
    43 [label="unknown",color=blue,style=solid];
    44 [label="shiftCount.1.i.i.i.i",color=blue,style=solid];
    45 [label="unknown",color=blue,style=solid];
    46 [label="unknown",color=blue,style=solid];
    47 [label="unknown",color=blue,style=solid];
    48 [label="overflow_intrinsic2",color=blue,style=solid];
    49 [label="overflow_intrinsic",color=blue,style=solid];
    50 [label="overflow_intrinsic_sum",color=blue,style=solid];
    51 [label=".tr",color=blue,style=solid];
    52 [label="unknown",color=blue,style=solid];
    53 [label="overflow_intrinsic6",color=blue,style=solid];
    54 [label="overflow_intrinsic4",color=blue,style=solid];
    55 [label="overflow_intrinsic_sum7",color=blue,style=solid];
    56 [label="unknown",color=blue,style=solid];
    57 [label="overflow_intrinsic8",color=blue,style=solid];
    58 [label="unknown",color=blue,style=solid];
    59 [label="unknown",color=blue,style=solid];
    60 [label=".20.i",color=blue,style=solid];
    61 [label=".tr.i.i",color=blue,style=solid];
    62 [label="..i",color=blue,style=solid];
    63 [label="unknown",color=blue,style=solid];
    64 [label=".tr3.i.i",color=blue,style=solid];
    65 [label="z.0.i.i.i",color=blue,style=solid];
    66 [label="unknown",color=blue,style=solid];
    67 [label="zSig57.i.i",color=blue,style=solid];
    68 [label="unknown",color=blue,style=solid];
    69 [label="unknown",color=blue,style=solid];
    70 [label="unknown",color=blue,style=solid];
    71 [label="unknown",color=blue,style=solid];
    72 [label="unknown",color=blue,style=solid];
    73 [label="unknown",color=blue,style=solid];
    74 [label="unknown",color=blue,style=solid];
    1 -> 20;
    2 -> 19;
    3 -> 21;
    4 -> 18;
    5 -> 70;
    6 -> 17;
    15 -> 33;
    15 -> 42;
    16 -> 32;
    16 -> 41;
    21 -> 26;
    21 -> 27;
    23 -> 22;
    25 -> 24;
    29 -> 28;
    31 -> 30;
    33 -> 34;
    34 -> 36;
    35 -> 34;
    38 -> 37;
    40 -> 39;
    42 -> 43;
    43 -> 45;
    44 -> 43;
    46 -> 60;
    47 -> 46;
    48 -> 50;
    49 -> 48;
    52 -> 51;
    53 -> 55;
    54 -> 53;
    56 -> 58;
    57 -> 56;
    58 -> 59;
    62 -> 61;
    62 -> 63;
    65 -> 64;
    67 -> 66;
    69 -> 68;
    72 -> 71;
    74 -> 73;
    pts2 [label="#1",color=red,style=dashed,shape=box];
    2 -> pts2 [color=red,style=dashed];
    pts4 [label="#3",color=red,style=dashed,shape=box];
    4 -> pts4 [color=red,style=dashed];
    pts6 [label="#5",color=red,style=dashed,shape=box];
    6 -> pts6 [color=red,style=dashed];
    pts8 [label="#7",color=red,style=dashed,shape=box];
    8 -> pts8 [color=red,style=dashed];
    pts10 [label="#9",color=red,style=dashed,shape=box];
    10 -> pts10 [color=red,style=dashed];
    pts12 [label="#11",color=red,style=dashed,shape=box];
    12 -> pts12 [color=red,style=dashed];
    pts14 [label="#13",color=red,style=dashed,shape=box];
    14 -> pts14 [color=red,style=dashed];
    pts16 [label="#15",color=red,style=dashed,shape=box];
    16 -> pts16 [color=red,style=dashed];
    pts17 [label="#5",color=red,style=dashed,shape=box];
    17 -> pts17 [color=red,style=dashed];
    pts18 [label="#3",color=red,style=dashed,shape=box];
    18 -> pts18 [color=red,style=dashed];
    pts19 [label="#1",color=red,style=dashed,shape=box];
    19 -> pts19 [color=red,style=dashed];
    pts32 [label="#15",color=red,style=dashed,shape=box];
    32 -> pts32 [color=red,style=dashed];
    pts41 [label="#15",color=red,style=dashed,shape=box];
    41 -> pts41 [color=red,style=dashed];
}
%3 -> { 
	Addr: @a_input
		RAM: a_input
			Adding Local RAM: a_input to Fct: @main
}
%4 -> { 
	Addr: @b_input
		RAM: b_input
			Adding Local RAM: b_input to Fct: @main
}
%85 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%109 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%196 -> { 
	Addr: @z_output
		RAM: z_output
			Adding Local RAM: z_output to Fct: @main
}
Final memory allocation:
Global Memories:
Local Memories:
	ROM: a_input Function: main
	ROM: b_input Function: main
	ROM: z_output Function: main
	ROM: countLeadingZeros32countLeadingZerosHigh Function: main
