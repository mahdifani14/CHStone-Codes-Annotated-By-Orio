//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 15:38:48 2017
//----------------------------------------------------------------------------//

allocateRAM: @a_input
Constant: 1
allocateRAM: @b_input
Constant: 1
allocateRAM: @z_output
Constant: 1
allocateRAM: @countLeadingZeros32.countLeadingZerosHigh
Constant: 1
allocating global ram: @a_input
allocating global ram: @b_input
allocating global ram: @z_output
allocating global ram: @countLeadingZeros32.countLeadingZerosHigh
# of Vertices: 66
Representatives: 
1 -> 1
2 -> 2
3 -> 3
4 -> 4
5 -> 5
6 -> 6
7 -> 7
8 -> 8
9 -> 9
10 -> 10
11 -> 11
12 -> 12
13 -> 13
14 -> 14
15 -> 15
16 -> 16
17 -> 17
18 -> 18
19 -> 19
20 -> 20
21 -> 21
22 -> 22
23 -> 23
24 -> 24
25 -> 25
26 -> 26
27 -> 27
28 -> 28
29 -> 29
30 -> 30
31 -> 31
32 -> 32
33 -> 33
34 -> 34
35 -> 35
36 -> 36
37 -> 37
38 -> 38
39 -> 39
40 -> 40
41 -> 41
42 -> 42
43 -> 43
44 -> 44
45 -> 45
46 -> 46
47 -> 47
48 -> 48
49 -> 49
50 -> 50
51 -> 51
52 -> 52
53 -> 53
54 -> 54
55 -> 55
56 -> 56
57 -> 57
58 -> 58
59 -> 59
60 -> 60
61 -> 61
62 -> 62
63 -> 63
64 -> 64
65 -> 65
66 -> 66

Connections (Graph): 
1 -> 20 
2 -> 18 
3 -> 21 
4 -> 19 
5 -> 62 
6 -> 17 
7 -> 
8 -> 
9 -> 
10 -> 
11 -> 
12 -> 
13 -> 
14 -> 
15 -> 33 42 
16 -> 32 41 
17 -> 
18 -> 
19 -> 
20 -> 
21 -> 26 27 
22 -> 
23 -> 22 
24 -> 
25 -> 24 
26 -> 
27 -> 
28 -> 
29 -> 28 
30 -> 
31 -> 30 
32 -> 
33 -> 34 
34 -> 36 
35 -> 34 
36 -> 
37 -> 
38 -> 37 
39 -> 
40 -> 39 
41 -> 
42 -> 43 
43 -> 45 
44 -> 43 
45 -> 
46 -> 51 
47 -> 46 
48 -> 50 
49 -> 48 
50 -> 
51 -> 
52 -> 
53 -> 52 54 
54 -> 
55 -> 
56 -> 55 
57 -> 
58 -> 57 
59 -> 61 
60 -> 59 
61 -> 
62 -> 
63 -> 
64 -> 63 
65 -> 
66 -> 65 

Points-to-set: 
1 -> {}
2 -> {1, }
3 -> {}
4 -> {3, }
5 -> {}
6 -> {5, }
7 -> {}
8 -> {7, }
9 -> {}
10 -> {9, }
11 -> {}
12 -> {11, }
13 -> {}
14 -> {13, }
15 -> {}
16 -> {15, }
17 -> {5, }
18 -> {1, }
19 -> {3, }
20 -> {}
21 -> {}
22 -> {}
23 -> {}
24 -> {}
25 -> {}
26 -> {}
27 -> {}
28 -> {}
29 -> {}
30 -> {}
31 -> {}
32 -> {15, }
33 -> {}
34 -> {}
35 -> {}
36 -> {}
37 -> {}
38 -> {}
39 -> {}
40 -> {}
41 -> {15, }
42 -> {}
43 -> {}
44 -> {}
45 -> {}
46 -> {}
47 -> {}
48 -> {}
49 -> {}
50 -> {}
51 -> {}
52 -> {}
53 -> {}
54 -> {}
55 -> {}
56 -> {}
57 -> {}
58 -> {}
59 -> {}
60 -> {}
61 -> {}
62 -> {}
63 -> {}
64 -> {}
65 -> {}
66 -> {}

Variable: Int -> Value* mapping
14: @.str3 = private unnamed_addr constant [14 x i8] c"RESULT: FAIL\0A\00", align 1
16: @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
64:   %main_result.0 = phi i32 [ 0, %0 ], [ %207, %roundAndPackFloat64.exit.i ]
6: @z_output = internal unnamed_addr constant [20 x i64] [i64 -1, i64 9223090561878065152, i64 9223372036854775807, i64 9218868437227405312, i64 -281474976710656, i64 9223372036854775807, i64 9218868437227405312, i64 0, i64 -9223372036854775808, i64 0, i64 -9223372036854775808, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 -4620693217682128896, i64 -4620693217682128896, i64 -4620693217682128896, i64 -4620693217682128896, i64 0], align 8
8: @.str = private unnamed_addr constant [65 x i8] c"a_input=%016llx b_input=%016llx expected=%016llx output=%016llx\0A\00", align 1
4: @b_input = internal unnamed_addr constant [20 x i64] [i64 -1, i64 -4503599627370496, i64 0, i64 4607182418800017408, i64 -281474976710656, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4598175219545276416, i64 4611686018427387904, i64 -4625196817309499392, i64 -4611686018427387904, i64 -4625196817309499392, i64 4611686018427387904, i64 4598175219545276416, i64 -4611686018427387904, i64 0], align 8
10: @.str1 = private unnamed_addr constant [12 x i8] c"Result: %d\0A\00", align 1
12: @.str2 = private unnamed_addr constant [14 x i8] c"RESULT: PASS\0A\00", align 1
2: @a_input = internal unnamed_addr constant [20 x i64] [i64 9218868437227405312, i64 9223090561878065152, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 0, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4607182418800017408, i64 4607182418800017408, i64 4611686018427387904, i64 4598175219545276416, i64 -4611686018427387904, i64 -4625196817309499392, i64 4611686018427387904, i64 -4625196817309499392, i64 -4611686018427387904, i64 4598175219545276416, i64 0], align 8
66:   %2 = phi i32 [ 0, %0 ], [ %209, %roundAndPackFloat64.exit.i ]
17:   %scevgep = getelementptr [20 x i64]* @z_output, i32 0, i32 %2
18:   %scevgep3 = getelementptr [20 x i64]* @a_input, i32 0, i32 %2
19:   %scevgep2 = getelementptr [20 x i64]* @b_input, i32 0, i32 %2
20:   %4 = load i64* %scevgep3, align 8
21:   %5 = load i64* %scevgep2, align 8
23:   %7 = lshr i64 %4, 52
22:   %.tr = trunc i64 %7 to i32
25:   %10 = lshr i64 %5, 52
24:   %.tr1 = trunc i64 %10 to i32
26:   %23 = trunc i64 %5 to i63
41:   %114 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %113
42:   %115 = load i32* %114, align 4
43:   %116 = add nsw i32 %shiftCount.1.i.i.i.i, %115
45:   %117 = add nsw i32 %116, -11
46:   %122 = add nsw i32 %aExp.i.0, %bExp.i.0
49:   %136 = mul i64 %134, %131
27:   %51 = trunc i64 %5 to i63
38:   %104 = lshr i64 %9, 32
37:   %105 = trunc i64 %104 to i32
39:   %108 = trunc i64 %107 to i32
29:   %81 = lshr i64 %6, 32
28:   %82 = trunc i64 %81 to i32
31:   %84 = shl nuw nsw i64 %81, 16
30:   %85 = trunc i64 %84 to i32
35:   %shiftCount.1.i.i.i5.i = phi i32 [ %88, %87 ], [ %shiftCount.0.i.i.i3.i, %80 ]
32:   %91 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %90
33:   %92 = load i32* %91, align 4
34:   %93 = add nsw i32 %shiftCount.1.i.i.i5.i, %92
36:   %94 = add nsw i32 %93, -11
47:   %aExp.i.0 = phi i32 [ %97, %normalizeFloat64Subnormal.exit7.i ], [ %8, %74 ]
59:   %202 = add i64 %199, %201
61:   %203 = add i64 %202, %197
62:   %204 = load i64* %scevgep, align 8
63:   %207 = add nsw i32 %main_result.0, %206
65:   %209 = add nsw i32 %2, 1
40:   %107 = shl nuw nsw i64 %104, 16
44:   %shiftCount.1.i.i.i.i = phi i32 [ %111, %110 ], [ %shiftCount.0.i.i.i.i, %103 ]
48:   %143 = add i64 %136, %142
50:   %148 = add i64 %143, %147
53:   %.55 = select i1 %153, i64 %152, i64 %151
51:   %.56 = add i32 %122, %.56.v
52:   %.55.tr = trunc i64 %.55 to i32
54:   %162 = add i64 %.55, 512
56:   %z.1.i.i.i = phi i64 [ %181, %172 ], [ %184, %182 ]
55:   %z.1.i.i.i.tr = trunc i64 %z.1.i.i.i to i32
58:   %.1 = phi i64 [ %.0, %189 ], [ %.55, %.thread ], [ %z.1.i.i.i, %shift64RightJamming.exit.i.i ]
57:   %191 = add i64 %.1, 512
60:   %199 = shl nuw i64 %13, 63
Memory: Int -> Value* mapping
13: @.str3 = private unnamed_addr constant [14 x i8] c"RESULT: FAIL\0A\00", align 1
15: @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
5: @z_output = internal unnamed_addr constant [20 x i64] [i64 -1, i64 9223090561878065152, i64 9223372036854775807, i64 9218868437227405312, i64 -281474976710656, i64 9223372036854775807, i64 9218868437227405312, i64 0, i64 -9223372036854775808, i64 0, i64 -9223372036854775808, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 -4620693217682128896, i64 -4620693217682128896, i64 -4620693217682128896, i64 -4620693217682128896, i64 0], align 8
7: @.str = private unnamed_addr constant [65 x i8] c"a_input=%016llx b_input=%016llx expected=%016llx output=%016llx\0A\00", align 1
3: @b_input = internal unnamed_addr constant [20 x i64] [i64 -1, i64 -4503599627370496, i64 0, i64 4607182418800017408, i64 -281474976710656, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4598175219545276416, i64 4611686018427387904, i64 -4625196817309499392, i64 -4611686018427387904, i64 -4625196817309499392, i64 4611686018427387904, i64 4598175219545276416, i64 -4611686018427387904, i64 0], align 8
9: @.str1 = private unnamed_addr constant [12 x i8] c"Result: %d\0A\00", align 1
11: @.str2 = private unnamed_addr constant [14 x i8] c"RESULT: PASS\0A\00", align 1
1: @a_input = internal unnamed_addr constant [20 x i64] [i64 9218868437227405312, i64 9223090561878065152, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 0, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4607182418800017408, i64 4607182418800017408, i64 4611686018427387904, i64 4598175219545276416, i64 -4611686018427387904, i64 -4625196817309499392, i64 4611686018427387904, i64 -4625196817309499392, i64 -4611686018427387904, i64 4598175219545276416, i64 0], align 8
digraph "dfmul.bc" {
    1 [label="#1",color=blue,style=solid];
    2 [label="a_input",color=blue,style=solid];
    3 [label="#3",color=blue,style=solid];
    4 [label="b_input",color=blue,style=solid];
    5 [label="#5",color=blue,style=solid];
    6 [label="z_output",color=blue,style=solid];
    7 [label="#7",color=blue,style=solid];
    8 [label=".str",color=blue,style=solid];
    9 [label="#9",color=blue,style=solid];
    10 [label=".str1",color=blue,style=solid];
    11 [label="#11",color=blue,style=solid];
    12 [label=".str2",color=blue,style=solid];
    13 [label="#13",color=blue,style=solid];
    14 [label=".str3",color=blue,style=solid];
    15 [label="#15",color=blue,style=solid];
    16 [label="countLeadingZeros32.countLeadingZerosHigh",color=blue,style=solid];
    17 [label="scevgep",color=blue,style=solid];
    18 [label="scevgep3",color=blue,style=solid];
    19 [label="scevgep2",color=blue,style=solid];
    20 [label="unknown",color=blue,style=solid];
    21 [label="unknown",color=blue,style=solid];
    22 [label=".tr",color=blue,style=solid];
    23 [label="unknown",color=blue,style=solid];
    24 [label=".tr1",color=blue,style=solid];
    25 [label="unknown",color=blue,style=solid];
    26 [label="unknown",color=blue,style=solid];
    27 [label="unknown",color=blue,style=solid];
    28 [label="unknown",color=blue,style=solid];
    29 [label="unknown",color=blue,style=solid];
    30 [label="unknown",color=blue,style=solid];
    31 [label="unknown",color=blue,style=solid];
    32 [label="unknown",color=blue,style=solid];
    33 [label="unknown",color=blue,style=solid];
    34 [label="unknown",color=blue,style=solid];
    35 [label="shiftCount.1.i.i.i5.i",color=blue,style=solid];
    36 [label="unknown",color=blue,style=solid];
    37 [label="unknown",color=blue,style=solid];
    38 [label="unknown",color=blue,style=solid];
    39 [label="unknown",color=blue,style=solid];
    40 [label="unknown",color=blue,style=solid];
    41 [label="unknown",color=blue,style=solid];
    42 [label="unknown",color=blue,style=solid];
    43 [label="unknown",color=blue,style=solid];
    44 [label="shiftCount.1.i.i.i.i",color=blue,style=solid];
    45 [label="unknown",color=blue,style=solid];
    46 [label="unknown",color=blue,style=solid];
    47 [label="aExp.i.0",color=blue,style=solid];
    48 [label="unknown",color=blue,style=solid];
    49 [label="unknown",color=blue,style=solid];
    50 [label="unknown",color=blue,style=solid];
    51 [label=".56",color=blue,style=solid];
    52 [label=".55.tr",color=blue,style=solid];
    53 [label=".55",color=blue,style=solid];
    54 [label="unknown",color=blue,style=solid];
    55 [label="z.1.i.i.i.tr",color=blue,style=solid];
    56 [label="z.1.i.i.i",color=blue,style=solid];
    57 [label="unknown",color=blue,style=solid];
    58 [label=".1",color=blue,style=solid];
    59 [label="unknown",color=blue,style=solid];
    60 [label="unknown",color=blue,style=solid];
    61 [label="unknown",color=blue,style=solid];
    62 [label="unknown",color=blue,style=solid];
    63 [label="unknown",color=blue,style=solid];
    64 [label="main_result.0",color=blue,style=solid];
    65 [label="unknown",color=blue,style=solid];
    66 [label="unknown",color=blue,style=solid];
    1 -> 20;
    2 -> 18;
    3 -> 21;
    4 -> 19;
    5 -> 62;
    6 -> 17;
    15 -> 33;
    15 -> 42;
    16 -> 32;
    16 -> 41;
    21 -> 26;
    21 -> 27;
    23 -> 22;
    25 -> 24;
    29 -> 28;
    31 -> 30;
    33 -> 34;
    34 -> 36;
    35 -> 34;
    38 -> 37;
    40 -> 39;
    42 -> 43;
    43 -> 45;
    44 -> 43;
    46 -> 51;
    47 -> 46;
    48 -> 50;
    49 -> 48;
    53 -> 52;
    53 -> 54;
    56 -> 55;
    58 -> 57;
    59 -> 61;
    60 -> 59;
    64 -> 63;
    66 -> 65;
    pts2 [label="#1",color=red,style=dashed,shape=box];
    2 -> pts2 [color=red,style=dashed];
    pts4 [label="#3",color=red,style=dashed,shape=box];
    4 -> pts4 [color=red,style=dashed];
    pts6 [label="#5",color=red,style=dashed,shape=box];
    6 -> pts6 [color=red,style=dashed];
    pts8 [label="#7",color=red,style=dashed,shape=box];
    8 -> pts8 [color=red,style=dashed];
    pts10 [label="#9",color=red,style=dashed,shape=box];
    10 -> pts10 [color=red,style=dashed];
    pts12 [label="#11",color=red,style=dashed,shape=box];
    12 -> pts12 [color=red,style=dashed];
    pts14 [label="#13",color=red,style=dashed,shape=box];
    14 -> pts14 [color=red,style=dashed];
    pts16 [label="#15",color=red,style=dashed,shape=box];
    16 -> pts16 [color=red,style=dashed];
    pts17 [label="#5",color=red,style=dashed,shape=box];
    17 -> pts17 [color=red,style=dashed];
    pts18 [label="#1",color=red,style=dashed,shape=box];
    18 -> pts18 [color=red,style=dashed];
    pts19 [label="#3",color=red,style=dashed,shape=box];
    19 -> pts19 [color=red,style=dashed];
    pts32 [label="#15",color=red,style=dashed,shape=box];
    32 -> pts32 [color=red,style=dashed];
    pts41 [label="#15",color=red,style=dashed,shape=box];
    41 -> pts41 [color=red,style=dashed];
}
%4 -> { 
	Addr: @a_input
		RAM: a_input
			Adding Local RAM: a_input to Fct: @main
}
%5 -> { 
	Addr: @b_input
		RAM: b_input
			Adding Local RAM: b_input to Fct: @main
}
%92 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%115 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%204 -> { 
	Addr: @z_output
		RAM: z_output
			Adding Local RAM: z_output to Fct: @main
}
Final memory allocation:
Global Memories:
Local Memories:
	ROM: a_input Function: main
	ROM: b_input Function: main
	ROM: z_output Function: main
	ROM: countLeadingZeros32countLeadingZerosHigh Function: main
