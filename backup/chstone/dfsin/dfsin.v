//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 16:23:12 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 4
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4,...
`define TAG_g_countLeadingZeros32countLeadingZerosHigh `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_countLeadingZeros32countLeadingZerosHigh_a {`TAG_g_countLeadingZeros32countLeadingZerosHigh, 23'd0}
// @float_exception_flags = internal unnamed_addr global i32 0, align 4
`define TAG_g_float_exception_flags `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_float_exception_flags_a {`TAG_g_float_exception_flags, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [0:0] ram_32_address_a;
reg [0:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @float_exception_flags = internal unnamed_addr global i32 0, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 1;
defparam ram_32.widthad_b = 1;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 1;
defparam ram_32.numwords_b = 1;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";

reg [7:0] rom_32_address_a;
reg [7:0] rom_32_address_b;
reg rom_32_write_enable_a;
reg rom_32_write_enable_b;
reg [31:0] rom_32_in_a;
reg [31:0] rom_32_in_b;
wire [31:0] rom_32_out_a;
wire [31:0] rom_32_out_b;

// @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4,...
rom_dual_port rom_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_32_address_a ),
	.address_b( rom_32_address_b ),
	.q_a( rom_32_out_a ),
	.q_b( rom_32_out_b)
);
defparam rom_32.width_a = 32;
defparam rom_32.width_b = 32;
defparam rom_32.widthad_a = 8;
defparam rom_32.widthad_b = 8;
defparam rom_32.numwords_a = 256;
defparam rom_32.numwords_b = 256;
defparam rom_32.latency = ram_latency;
defparam rom_32.init_file = "rom_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 2);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

wire select_rom_32_a;
assign select_rom_32_a = (tag_a == 3);
reg [ram_latency:0] select_rom_32_reg_a;
wire [31:0] memory_controller_rom_32_out_a;
assign memory_controller_rom_32_out_a = {32{ select_rom_32_reg_a[ram_latency]}} & rom_32_out_a;

always @(*)
begin
	ram_32_address_a = memory_controller_address_a [1-1+2:2] & {1{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	rom_32_address_a = memory_controller_address_a [8-1+2:2] & {8{select_rom_32_a}};
	rom_32_write_enable_a = memory_controller_write_enable_a & select_rom_32_a;
	rom_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}} | {2{select_rom_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_ram_32_out_a | memory_controller_rom_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
end
always @(*)
begin
select_ram_32_reg_a[0] <= select_ram_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
end

reg [2:0] select_not_struct_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 2);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

wire select_rom_32_b;
assign select_rom_32_b = (tag_b == 3);
reg [ram_latency:0] select_rom_32_reg_b;
wire [31:0] memory_controller_rom_32_out_b;
assign memory_controller_rom_32_out_b = {32{ select_rom_32_reg_b[ram_latency]}} & rom_32_out_b;

always @(*)
begin
	ram_32_address_b = memory_controller_address_b [1-1+2:2] & {1{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	rom_32_address_b = memory_controller_address_b [8-1+2:2] & {8{select_rom_32_b}};
	rom_32_write_enable_b = memory_controller_write_enable_b & select_rom_32_b;
	rom_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}} | {2{select_rom_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_ram_32_out_b | memory_controller_rom_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
end
always @(*)
begin
select_ram_32_reg_b[0] <= select_ram_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module roundAndPackFloat64
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_zSign,
	arg_zExp,
	arg_zSig
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__4_2 = 5'd2;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__6_3 = 5'd3;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__8_4 = 5'd4;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_5 = 5'd5;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_6 = 5'd6;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_7 = 5'd7;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_8 = 5'd8;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__17_9 = 5'd9;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__19_10 = 5'd10;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__21_11 = 5'd11;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__31_12 = 5'd12;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13 = 5'd13;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_14 = 5'd14;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_15 = 5'd15;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_16 = 5'd16;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_17 = 5'd17;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread_18 = 5'd18;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_19 = 5'd19;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_20 = 5'd20;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_21 = 5'd21;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_22 = 5'd22;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread6_23 = 5'd23;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__57_24 = 5'd24;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [63:0] return_val;
input [31:0] arg_zSign;
input [31:0] arg_zExp;
input [63:0] arg_zSig;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] roundAndPackFloat64_0_tr;
reg [31:0] roundAndPackFloat64_0_tr_reg;
reg [31:0] roundAndPackFloat64_0_1;
reg [31:0] roundAndPackFloat64_0_1_reg;
reg [31:0] roundAndPackFloat64_0_2;
reg [31:0] roundAndPackFloat64_0_2_reg;
reg  roundAndPackFloat64_0_3;
reg  roundAndPackFloat64_0_3_reg;
reg  roundAndPackFloat64_4_5;
reg  roundAndPackFloat64_4_5_reg;
reg  roundAndPackFloat64_6_7;
reg  roundAndPackFloat64_6_7_reg;
reg [63:0] roundAndPackFloat64_8_9;
reg [63:0] roundAndPackFloat64_8_9_reg;
reg  roundAndPackFloat64_8_10;
reg  roundAndPackFloat64_8_10_reg;
reg [31:0] roundAndPackFloat64_11_12;
reg [31:0] roundAndPackFloat64_11_12_reg;
reg [31:0] roundAndPackFloat64_11_13;
reg [31:0] roundAndPackFloat64_11_13_reg;
reg [63:0] roundAndPackFloat64_11_14;
reg [63:0] roundAndPackFloat64_11_14_reg;
reg [63:0] roundAndPackFloat64_11_15;
reg [63:0] roundAndPackFloat64_11_15_reg;
reg [63:0] roundAndPackFloat64_11_16;
reg [63:0] roundAndPackFloat64_11_16_reg;
reg  roundAndPackFloat64_17_18;
reg  roundAndPackFloat64_17_18_reg;
reg  roundAndPackFloat64_19_20;
reg  roundAndPackFloat64_19_20_reg;
reg [31:0] roundAndPackFloat64_21_22;
reg [31:0] roundAndPackFloat64_21_22_reg;
reg [63:0] roundAndPackFloat64_21_23;
reg [63:0] roundAndPackFloat64_21_23_reg;
reg [63:0] roundAndPackFloat64_21_24;
reg [63:0] roundAndPackFloat64_21_24_reg;
reg [31:0] roundAndPackFloat64_21_25;
reg [31:0] roundAndPackFloat64_21_25_reg;
reg [63:0] roundAndPackFloat64_21_26;
reg [63:0] roundAndPackFloat64_21_26_reg;
reg [63:0] roundAndPackFloat64_21_27;
reg [63:0] roundAndPackFloat64_21_27_reg;
reg  roundAndPackFloat64_21_28;
reg  roundAndPackFloat64_21_28_reg;
reg [63:0] roundAndPackFloat64_21_29;
reg [63:0] roundAndPackFloat64_21_29_reg;
reg [63:0] roundAndPackFloat64_21_30;
reg [63:0] roundAndPackFloat64_21_30_reg;
reg  roundAndPackFloat64_31_32;
reg  roundAndPackFloat64_31_32_reg;
reg [63:0] roundAndPackFloat64_31_33;
reg [63:0] roundAndPackFloat64_31_33_reg;
reg [63:0] roundAndPackFloat64_shift64RightJammingexit_z0i;
reg [63:0] roundAndPackFloat64_shift64RightJammingexit_z0i_reg;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_tr3;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_tr3_reg;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_34;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_34_reg;
reg  roundAndPackFloat64_shift64RightJammingexit_35;
reg  roundAndPackFloat64_shift64RightJammingexit_35_reg;
reg [31:0] roundAndPackFloat64_36_37;
reg [31:0] roundAndPackFloat64_36_37_reg;
reg [31:0] roundAndPackFloat64_36_38;
reg [31:0] roundAndPackFloat64_36_38_reg;
reg [63:0] roundAndPackFloat64_thread_zSig5;
reg [63:0] roundAndPackFloat64_thread_zSig5_reg;
reg [31:0] roundAndPackFloat64_thread_02;
reg [31:0] roundAndPackFloat64_thread_02_reg;
reg [31:0] roundAndPackFloat64_thread_roundBits0;
reg [31:0] roundAndPackFloat64_thread_roundBits0_reg;
reg  roundAndPackFloat64_thread_39;
reg  roundAndPackFloat64_thread_39_reg;
reg [31:0] roundAndPackFloat64_40_41;
reg [31:0] roundAndPackFloat64_40_41_reg;
reg [31:0] roundAndPackFloat64_40_42;
reg [31:0] roundAndPackFloat64_40_42_reg;
reg [31:0] roundAndPackFloat64_thread6_roundBits09;
reg [31:0] roundAndPackFloat64_thread6_roundBits09_reg;
reg [31:0] roundAndPackFloat64_thread6_028;
reg [31:0] roundAndPackFloat64_thread6_028_reg;
reg [63:0] roundAndPackFloat64_thread6_zSig57;
reg [63:0] roundAndPackFloat64_thread6_zSig57_reg;
reg [63:0] roundAndPackFloat64_thread6_43;
reg [63:0] roundAndPackFloat64_thread6_43_reg;
reg [63:0] roundAndPackFloat64_thread6_44;
reg [63:0] roundAndPackFloat64_thread6_44_reg;
reg  roundAndPackFloat64_thread6_45;
reg  roundAndPackFloat64_thread6_45_reg;
reg [31:0] roundAndPackFloat64_thread6_46;
reg [31:0] roundAndPackFloat64_thread6_46_reg;
reg [31:0] roundAndPackFloat64_thread6_47;
reg [31:0] roundAndPackFloat64_thread6_47_reg;
reg [63:0] roundAndPackFloat64_thread6_48;
reg [63:0] roundAndPackFloat64_thread6_48_reg;
reg [63:0] roundAndPackFloat64_thread6_49;
reg [63:0] roundAndPackFloat64_thread6_49_reg;
reg  roundAndPackFloat64_thread6_50;
reg  roundAndPackFloat64_thread6_50_reg;
reg [63:0] roundAndPackFloat64_thread6_51;
reg [63:0] roundAndPackFloat64_thread6_51_reg;
reg [63:0] roundAndPackFloat64_thread6_52;
reg [63:0] roundAndPackFloat64_thread6_52_reg;
reg [63:0] roundAndPackFloat64_thread6_53;
reg [63:0] roundAndPackFloat64_thread6_53_reg;
reg [63:0] roundAndPackFloat64_thread6_op;
reg [63:0] roundAndPackFloat64_thread6_op_reg;
reg [63:0] roundAndPackFloat64_thread6_54;
reg [63:0] roundAndPackFloat64_thread6_54_reg;
reg [63:0] roundAndPackFloat64_thread6_55;
reg [63:0] roundAndPackFloat64_thread6_55_reg;
reg [63:0] roundAndPackFloat64_thread6_56;
reg [63:0] roundAndPackFloat64_thread6_56_reg;
reg [63:0] roundAndPackFloat64_57_0;
reg [63:0] roundAndPackFloat64_57_0_reg;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [5:0] test_in_address_a;
wire  test_in_write_enable_a;
wire [63:0] test_in_in_a;
wire [63:0] test_in_out_a;
wire [5:0] test_in_address_b;
wire  test_in_write_enable_b;
wire [63:0] test_in_in_b;
wire [63:0] test_in_out_b;
wire [5:0] test_out_address_a;
wire  test_out_write_enable_a;
wire [63:0] test_out_in_a;
wire [63:0] test_out_out_a;
wire [5:0] test_out_address_b;
wire  test_out_write_enable_b;
wire [63:0] test_out_in_b;
wire [63:0] test_out_out_b;
wire [7:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [7:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;

// Local Rams


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__0_1;
LEGUP_F_roundAndPackFloat64_BB__0_1:
	if ((roundAndPackFloat64_0_3 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__4_2;
	else if ((roundAndPackFloat64_0_3 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__11_5:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_6;
LEGUP_F_roundAndPackFloat64_BB__11_6:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_7;
LEGUP_F_roundAndPackFloat64_BB__11_7:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_8;
LEGUP_F_roundAndPackFloat64_BB__11_8:
		next_state = LEGUP_F_roundAndPackFloat64_BB__57_24;
LEGUP_F_roundAndPackFloat64_BB__17_9:
	if ((roundAndPackFloat64_17_18 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__19_10;
	else if ((roundAndPackFloat64_17_18 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__19_10:
	if ((roundAndPackFloat64_19_20 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__21_11;
	else if ((roundAndPackFloat64_19_20 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__31_12;
LEGUP_F_roundAndPackFloat64_BB__21_11:
		next_state = LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13;
LEGUP_F_roundAndPackFloat64_BB__31_12:
		next_state = LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13;
LEGUP_F_roundAndPackFloat64_BB__36_14:
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_15;
LEGUP_F_roundAndPackFloat64_BB__36_15:
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_16;
LEGUP_F_roundAndPackFloat64_BB__36_16:
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_17;
LEGUP_F_roundAndPackFloat64_BB__36_17:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__40_19:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_20;
LEGUP_F_roundAndPackFloat64_BB__40_20:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_21;
LEGUP_F_roundAndPackFloat64_BB__40_21:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_22;
LEGUP_F_roundAndPackFloat64_BB__40_22:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_23;
LEGUP_F_roundAndPackFloat64_BB__4_2:
	if ((roundAndPackFloat64_4_5 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_5;
	else if ((roundAndPackFloat64_4_5 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__6_3;
LEGUP_F_roundAndPackFloat64_BB__57_24:
		next_state = LEGUP_0;
LEGUP_F_roundAndPackFloat64_BB__6_3:
	if ((roundAndPackFloat64_6_7 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__8_4;
	else if ((roundAndPackFloat64_6_7 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__17_9;
LEGUP_F_roundAndPackFloat64_BB__8_4:
	if ((roundAndPackFloat64_8_10 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_5;
	else if ((roundAndPackFloat64_8_10 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13:
	if ((roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_23;
	else if ((roundAndPackFloat64_shift64RightJammingexit_35 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_14;
LEGUP_F_roundAndPackFloat64_BB_thread6_23:
		next_state = LEGUP_F_roundAndPackFloat64_BB__57_24;
LEGUP_F_roundAndPackFloat64_BB_thread_18:
	if ((roundAndPackFloat64_thread_39 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_23;
	else if ((roundAndPackFloat64_thread_39 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_19;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %.tr = trunc i64 %zSig to i32*/
		roundAndPackFloat64_0_tr = arg_zSig[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %.tr = trunc i64 %zSig to i32*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_tr_reg <= roundAndPackFloat64_0_tr;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_tr) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_tr_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %1 = and i32 %.tr, 1023*/
		roundAndPackFloat64_0_1 = (roundAndPackFloat64_0_tr & 32'd1023);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %1 = and i32 %.tr, 1023*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_1_reg <= roundAndPackFloat64_0_1;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %2 = and i32 %zExp, 65535*/
		roundAndPackFloat64_0_2 = (arg_zExp & 32'd65535);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %2 = and i32 %zExp, 65535*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_2_reg <= roundAndPackFloat64_0_2;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %3 = icmp ugt i32 %2, 2044*/
		roundAndPackFloat64_0_3 = (roundAndPackFloat64_0_2 > 32'd2044);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %3 = icmp ugt i32 %2, 2044*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_3_reg <= roundAndPackFloat64_0_3;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %4*/
	/*   %5 = icmp sgt i32 %zExp, 2045*/
		roundAndPackFloat64_4_5 = ($signed(arg_zExp) > $signed(32'd2045));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %4*/
	/*   %5 = icmp sgt i32 %zExp, 2045*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__4_2)) begin
		roundAndPackFloat64_4_5_reg <= roundAndPackFloat64_4_5;
		if (start == 1'b0 && ^(roundAndPackFloat64_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_4_5_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %6*/
	/*   %7 = icmp eq i32 %zExp, 2045*/
		roundAndPackFloat64_6_7 = (arg_zExp == 32'd2045);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %6*/
	/*   %7 = icmp eq i32 %zExp, 2045*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__6_3)) begin
		roundAndPackFloat64_6_7_reg <= roundAndPackFloat64_6_7;
		if (start == 1'b0 && ^(roundAndPackFloat64_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %8*/
	/*   %9 = add i64 %zSig, 512*/
		roundAndPackFloat64_8_9 = (arg_zSig + 64'd512);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %8*/
	/*   %9 = add i64 %zSig, 512*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4)) begin
		roundAndPackFloat64_8_9_reg <= roundAndPackFloat64_8_9;
		if (start == 1'b0 && ^(roundAndPackFloat64_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_8_9_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %8*/
	/*   %10 = icmp slt i64 %9, 0*/
		roundAndPackFloat64_8_10 = ($signed(roundAndPackFloat64_8_9) < $signed(64'd0));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %8*/
	/*   %10 = icmp slt i64 %9, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4)) begin
		roundAndPackFloat64_8_10_reg <= roundAndPackFloat64_8_10;
		if (start == 1'b0 && ^(roundAndPackFloat64_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_8_10_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		roundAndPackFloat64_11_12 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		roundAndPackFloat64_11_12_reg <= roundAndPackFloat64_11_12;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %13 = or i32 %12, 9*/
		roundAndPackFloat64_11_13 = (roundAndPackFloat64_11_12 | 32'd9);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %13 = or i32 %12, 9*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		roundAndPackFloat64_11_13_reg <= roundAndPackFloat64_11_13;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_13_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %14 = zext i32 %zSign to i64*/
		roundAndPackFloat64_11_14 = arg_zSign;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %14 = zext i32 %zSign to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_14_reg <= roundAndPackFloat64_11_14;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_14_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %15 = shl i64 %14, 63*/
		roundAndPackFloat64_11_15 = (roundAndPackFloat64_11_14 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %15 = shl i64 %14, 63*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_15_reg <= roundAndPackFloat64_11_15;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_15_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %16 = or i64 %15, 9218868437227405312*/
		roundAndPackFloat64_11_16 = (roundAndPackFloat64_11_15 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %16 = or i64 %15, 9218868437227405312*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_16_reg <= roundAndPackFloat64_11_16;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_16_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %17*/
	/*   %18 = icmp slt i32 %zExp, 0*/
		roundAndPackFloat64_17_18 = ($signed(arg_zExp) < $signed(32'd0));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %17*/
	/*   %18 = icmp slt i32 %zExp, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9)) begin
		roundAndPackFloat64_17_18_reg <= roundAndPackFloat64_17_18;
		if (start == 1'b0 && ^(roundAndPackFloat64_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_17_18_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %19*/
	/*   %20 = icmp sgt i32 %zExp, -64*/
		roundAndPackFloat64_19_20 = ($signed(arg_zExp) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %19*/
	/*   %20 = icmp sgt i32 %zExp, -64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__19_10)) begin
		roundAndPackFloat64_19_20_reg <= roundAndPackFloat64_19_20;
		if (start == 1'b0 && ^(roundAndPackFloat64_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_19_20_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %22 = sub nsw i32 0, %zExp*/
		roundAndPackFloat64_21_22 = (32'd0 - arg_zExp);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %22 = sub nsw i32 0, %zExp*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_22_reg <= roundAndPackFloat64_21_22;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_22_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %23 = zext i32 %22 to i64*/
		roundAndPackFloat64_21_23 = roundAndPackFloat64_21_22;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %23 = zext i32 %22 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_23_reg <= roundAndPackFloat64_21_23;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_23_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %24 = lshr i64 %zSig, %23*/
		roundAndPackFloat64_21_24 = (arg_zSig >>> (roundAndPackFloat64_21_23 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %24 = lshr i64 %zSig, %23*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_24_reg <= roundAndPackFloat64_21_24;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_24_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %25 = and i32 %zExp, 63*/
		roundAndPackFloat64_21_25 = (arg_zExp & 32'd63);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %25 = and i32 %zExp, 63*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_25_reg <= roundAndPackFloat64_21_25;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_25_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %26 = zext i32 %25 to i64*/
		roundAndPackFloat64_21_26 = roundAndPackFloat64_21_25;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %26 = zext i32 %25 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_26_reg <= roundAndPackFloat64_21_26;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_26_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %27 = shl i64 %zSig, %26*/
		roundAndPackFloat64_21_27 = (arg_zSig <<< (roundAndPackFloat64_21_26 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %27 = shl i64 %zSig, %26*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_27_reg <= roundAndPackFloat64_21_27;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_27_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %28 = icmp ne i64 %27, 0*/
		roundAndPackFloat64_21_28 = (roundAndPackFloat64_21_27 != 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %28 = icmp ne i64 %27, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_28_reg <= roundAndPackFloat64_21_28;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_28_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %29 = zext i1 %28 to i64*/
		roundAndPackFloat64_21_29 = roundAndPackFloat64_21_28;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %29 = zext i1 %28 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_29_reg <= roundAndPackFloat64_21_29;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_29_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %30 = or i64 %29, %24*/
		roundAndPackFloat64_21_30 = (roundAndPackFloat64_21_29 | roundAndPackFloat64_21_24);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %30 = or i64 %29, %24*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_30_reg <= roundAndPackFloat64_21_30;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_30_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %31*/
	/*   %32 = icmp ne i64 %zSig, 0*/
		roundAndPackFloat64_31_32 = (arg_zSig != 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %31*/
	/*   %32 = icmp ne i64 %zSig, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12)) begin
		roundAndPackFloat64_31_32_reg <= roundAndPackFloat64_31_32;
		if (start == 1'b0 && ^(roundAndPackFloat64_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_31_32_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %31*/
	/*   %33 = zext i1 %32 to i64*/
		roundAndPackFloat64_31_33 = roundAndPackFloat64_31_32;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %31*/
	/*   %33 = zext i1 %32 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12)) begin
		roundAndPackFloat64_31_33_reg <= roundAndPackFloat64_31_33;
		if (start == 1'b0 && ^(roundAndPackFloat64_31_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_31_33_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_shift64RightJammingexit_z0i = roundAndPackFloat64_21_30;
	end
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_shift64RightJammingexit_z0i = roundAndPackFloat64_31_33;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_shift64RightJammingexit_z0i_reg <= roundAndPackFloat64_shift64RightJammingexit_z0i;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_z0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_z0i_reg"); $finish; end
	end
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_shift64RightJammingexit_z0i_reg <= roundAndPackFloat64_shift64RightJammingexit_z0i;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_z0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_z0i_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %.tr3 = trunc i64 %z.0.i to i32*/
		roundAndPackFloat64_shift64RightJammingexit_tr3 = roundAndPackFloat64_shift64RightJammingexit_z0i_reg[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %.tr3 = trunc i64 %z.0.i to i32*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)) begin
		roundAndPackFloat64_shift64RightJammingexit_tr3_reg <= roundAndPackFloat64_shift64RightJammingexit_tr3;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_tr3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_tr3_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %34 = and i32 %.tr3, 1023*/
		roundAndPackFloat64_shift64RightJammingexit_34 = (roundAndPackFloat64_shift64RightJammingexit_tr3 & 32'd1023);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %34 = and i32 %.tr3, 1023*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)) begin
		roundAndPackFloat64_shift64RightJammingexit_34_reg <= roundAndPackFloat64_shift64RightJammingexit_34;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_34_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %35 = icmp eq i32 %34, 0*/
		roundAndPackFloat64_shift64RightJammingexit_35 = (roundAndPackFloat64_shift64RightJammingexit_34 == 32'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %35 = icmp eq i32 %34, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)) begin
		roundAndPackFloat64_shift64RightJammingexit_35_reg <= roundAndPackFloat64_shift64RightJammingexit_35;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_35_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		roundAndPackFloat64_36_37 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		roundAndPackFloat64_36_37_reg <= roundAndPackFloat64_36_37;
		if (start == 1'b0 && ^(roundAndPackFloat64_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_36_37_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %36*/
	/*   %38 = or i32 %37, 4*/
		roundAndPackFloat64_36_38 = (roundAndPackFloat64_36_37 | 32'd4);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %36*/
	/*   %38 = or i32 %37, 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		roundAndPackFloat64_36_38_reg <= roundAndPackFloat64_36_38;
		if (start == 1'b0 && ^(roundAndPackFloat64_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_36_38_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread_zSig5 = roundAndPackFloat64_shift64RightJammingexit_z0i_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_02 = arg_zExp;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_02 = 32'd2045;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_02 = arg_zExp;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread_02 = 32'd0;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_0_1;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_0_1_reg;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_0_1_reg;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_shift64RightJammingexit_34_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %39 = icmp eq i32 %roundBits.0, 0*/
		roundAndPackFloat64_thread_39 = (roundAndPackFloat64_thread_roundBits0_reg == 32'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %39 = icmp eq i32 %roundBits.0, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18)) begin
		roundAndPackFloat64_thread_39_reg <= roundAndPackFloat64_thread_39;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_39_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		roundAndPackFloat64_40_41 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		roundAndPackFloat64_40_41_reg <= roundAndPackFloat64_40_41;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_41_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %42 = or i32 %41, 1*/
		roundAndPackFloat64_40_42 = (roundAndPackFloat64_40_41 | 32'd1);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %40*/
	/*   %42 = or i32 %41, 1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		roundAndPackFloat64_40_42_reg <= roundAndPackFloat64_40_42;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_42_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_roundBits09 = roundAndPackFloat64_thread_roundBits0_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09_reg <= roundAndPackFloat64_thread6_roundBits09;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits09_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09_reg <= roundAndPackFloat64_thread6_roundBits09;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits09_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_roundBits09_reg <= roundAndPackFloat64_thread6_roundBits09;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits09_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_028 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_028 = roundAndPackFloat64_thread_02_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_028 = roundAndPackFloat64_thread_02_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_028_reg <= roundAndPackFloat64_thread6_028;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_028_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_028_reg <= roundAndPackFloat64_thread6_028;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_028_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_028_reg <= roundAndPackFloat64_thread6_028;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_028_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57 = roundAndPackFloat64_shift64RightJammingexit_z0i_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57 = roundAndPackFloat64_thread_zSig5_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_zSig57 = roundAndPackFloat64_thread_zSig5_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57_reg <= roundAndPackFloat64_thread6_zSig57;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_zSig57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_zSig57_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57_reg <= roundAndPackFloat64_thread6_zSig57;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_zSig57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_zSig57_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_zSig57_reg <= roundAndPackFloat64_thread6_zSig57;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_zSig57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_zSig57_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %43 = add i64 %zSig57, 512*/
		roundAndPackFloat64_thread6_43 = (roundAndPackFloat64_thread6_zSig57_reg + 64'd512);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %43 = add i64 %zSig57, 512*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_43_reg <= roundAndPackFloat64_thread6_43;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_43_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %44 = lshr i64 %43, 10*/
		roundAndPackFloat64_thread6_44 = (roundAndPackFloat64_thread6_43 >>> (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %44 = lshr i64 %43, 10*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_44_reg <= roundAndPackFloat64_thread6_44;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_44_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %45 = icmp eq i32 %roundBits.09, 512*/
		roundAndPackFloat64_thread6_45 = (roundAndPackFloat64_thread6_roundBits09_reg == 32'd512);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %45 = icmp eq i32 %roundBits.09, 512*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_45_reg <= roundAndPackFloat64_thread6_45;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_45_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %46 = zext i1 %45 to i32*/
		roundAndPackFloat64_thread6_46 = roundAndPackFloat64_thread6_45;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %46 = zext i1 %45 to i32*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_46_reg <= roundAndPackFloat64_thread6_46;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_46_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %47 = xor i32 %46, -1*/
		roundAndPackFloat64_thread6_47 = (roundAndPackFloat64_thread6_46 ^ -32'd1);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %47 = xor i32 %46, -1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_47_reg <= roundAndPackFloat64_thread6_47;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_47_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %48 = sext i32 %47 to i64*/
		roundAndPackFloat64_thread6_48 = $signed(roundAndPackFloat64_thread6_47);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %48 = sext i32 %47 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_48_reg <= roundAndPackFloat64_thread6_48;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_48_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %49 = and i64 %44, %48*/
		roundAndPackFloat64_thread6_49 = (roundAndPackFloat64_thread6_44 & roundAndPackFloat64_thread6_48);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %49 = and i64 %44, %48*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_49_reg <= roundAndPackFloat64_thread6_49;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_49_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %50 = icmp eq i64 %49, 0*/
		roundAndPackFloat64_thread6_50 = (roundAndPackFloat64_thread6_49 == 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %50 = icmp eq i64 %49, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_50_reg <= roundAndPackFloat64_thread6_50;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_50_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %51 = zext i32 %zSign to i64*/
		roundAndPackFloat64_thread6_51 = arg_zSign;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %51 = zext i32 %zSign to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_51_reg <= roundAndPackFloat64_thread6_51;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_51_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %52 = shl i64 %51, 63*/
		roundAndPackFloat64_thread6_52 = (roundAndPackFloat64_thread6_51 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %52 = shl i64 %51, 63*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_52_reg <= roundAndPackFloat64_thread6_52;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_52_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %53 = zext i32 %.028 to i64*/
		roundAndPackFloat64_thread6_53 = roundAndPackFloat64_thread6_028_reg;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %53 = zext i32 %.028 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_53_reg <= roundAndPackFloat64_thread6_53;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_53_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.op = shl i64 %53, 52*/
		roundAndPackFloat64_thread6_op = (roundAndPackFloat64_thread6_53 <<< (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.op = shl i64 %53, 52*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_op_reg <= roundAndPackFloat64_thread6_op;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_op) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_op_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %54 = select i1 %50, i64 0, i64 %.op*/
		roundAndPackFloat64_thread6_54 = (roundAndPackFloat64_thread6_50 ? 64'd0 : roundAndPackFloat64_thread6_op);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %54 = select i1 %50, i64 0, i64 %.op*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_54_reg <= roundAndPackFloat64_thread6_54;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_54_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %55 = or i64 %49, %52*/
		roundAndPackFloat64_thread6_55 = (roundAndPackFloat64_thread6_49 | roundAndPackFloat64_thread6_52);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %55 = or i64 %49, %52*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_55_reg <= roundAndPackFloat64_thread6_55;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_55_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %56 = add i64 %54, %55*/
		roundAndPackFloat64_thread6_56 = (roundAndPackFloat64_thread6_54 + roundAndPackFloat64_thread6_55);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %56 = add i64 %54, %55*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_56_reg <= roundAndPackFloat64_thread6_56;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_56_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_8) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0 = roundAndPackFloat64_11_16_reg;
	end
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_57_0 = roundAndPackFloat64_thread6_56;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_8) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0_reg <= roundAndPackFloat64_57_0;
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_57_0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0_reg <= roundAndPackFloat64_57_0;
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_57_0_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* roundAndPackFloat64: %57*/
	/*   ret i64 %.0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__57_24)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_in_a = roundAndPackFloat64_11_13;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_in_a = roundAndPackFloat64_36_38;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_in_a = roundAndPackFloat64_40_42;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* roundAndPackFloat64: %57*/
	/*   ret i64 %.0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__57_24)) begin
		return_val <= roundAndPackFloat64_57_0_reg;
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module float64_mul
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_a,
	arg_b
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_float64_mul_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_float64_mul_BB__11_2 = 6'd2;
parameter [5:0] LEGUP_F_float64_mul_BB__13_3 = 6'd3;
parameter [5:0] LEGUP_F_float64_mul_BB__16_4 = 6'd4;
parameter [5:0] LEGUP_F_float64_mul_BB__19_5 = 6'd5;
parameter [5:0] LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i10_6 = 6'd6;
parameter [5:0] LEGUP_F_float64_mul_BB__27_7 = 6'd7;
parameter [5:0] LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti11_8 = 6'd8;
parameter [5:0] LEGUP_F_float64_mul_BB_threadi12_9 = 6'd9;
parameter [5:0] LEGUP_F_float64_mul_BB_threadi12_10 = 6'd10;
parameter [5:0] LEGUP_F_float64_mul_BB_threadi12_11 = 6'd11;
parameter [5:0] LEGUP_F_float64_mul_BB_threadi12_12 = 6'd12;
parameter [5:0] LEGUP_F_float64_mul_BB_propagateFloat64NaNexit16_13 = 6'd13;
parameter [5:0] LEGUP_F_float64_mul_BB__34_14 = 6'd14;
parameter [5:0] LEGUP_F_float64_mul_BB__38_15 = 6'd15;
parameter [5:0] LEGUP_F_float64_mul_BB__38_16 = 6'd16;
parameter [5:0] LEGUP_F_float64_mul_BB__38_17 = 6'd17;
parameter [5:0] LEGUP_F_float64_mul_BB__38_18 = 6'd18;
parameter [5:0] LEGUP_F_float64_mul_BB__41_19 = 6'd19;
parameter [5:0] LEGUP_F_float64_mul_BB__44_20 = 6'd20;
parameter [5:0] LEGUP_F_float64_mul_BB__46_21 = 6'd21;
parameter [5:0] LEGUP_F_float64_mul_BB__48_22 = 6'd22;
parameter [5:0] LEGUP_F_float64_mul_BB__51_23 = 6'd23;
parameter [5:0] LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i_24 = 6'd24;
parameter [5:0] LEGUP_F_float64_mul_BB__59_25 = 6'd25;
parameter [5:0] LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti_26 = 6'd26;
parameter [5:0] LEGUP_F_float64_mul_BB_threadi_27 = 6'd27;
parameter [5:0] LEGUP_F_float64_mul_BB_threadi_28 = 6'd28;
parameter [5:0] LEGUP_F_float64_mul_BB_threadi_29 = 6'd29;
parameter [5:0] LEGUP_F_float64_mul_BB_threadi_30 = 6'd30;
parameter [5:0] LEGUP_F_float64_mul_BB_propagateFloat64NaNexit_31 = 6'd31;
parameter [5:0] LEGUP_F_float64_mul_BB__66_32 = 6'd32;
parameter [5:0] LEGUP_F_float64_mul_BB__70_33 = 6'd33;
parameter [5:0] LEGUP_F_float64_mul_BB__70_34 = 6'd34;
parameter [5:0] LEGUP_F_float64_mul_BB__70_35 = 6'd35;
parameter [5:0] LEGUP_F_float64_mul_BB__70_36 = 6'd36;
parameter [5:0] LEGUP_F_float64_mul_BB__73_37 = 6'd37;
parameter [5:0] LEGUP_F_float64_mul_BB__76_38 = 6'd38;
parameter [5:0] LEGUP_F_float64_mul_BB__78_39 = 6'd39;
parameter [5:0] LEGUP_F_float64_mul_BB__80_40 = 6'd40;
parameter [5:0] LEGUP_F_float64_mul_BB__82_41 = 6'd41;
parameter [5:0] LEGUP_F_float64_mul_BB__88_42 = 6'd42;
parameter [5:0] LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_43 = 6'd43;
parameter [5:0] LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_44 = 6'd44;
parameter [5:0] LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45 = 6'd45;
parameter [5:0] LEGUP_F_float64_mul_BB__100_46 = 6'd46;
parameter [5:0] LEGUP_F_float64_mul_BB__104_47 = 6'd47;
parameter [5:0] LEGUP_F_float64_mul_BB__106_48 = 6'd48;
parameter [5:0] LEGUP_F_float64_mul_BB__108_49 = 6'd49;
parameter [5:0] LEGUP_F_float64_mul_BB__114_50 = 6'd50;
parameter [5:0] LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_51 = 6'd51;
parameter [5:0] LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_52 = 6'd52;
parameter [5:0] LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53 = 6'd53;
parameter [5:0] LEGUP_F_float64_mul_BB__126_54 = 6'd54;
parameter [5:0] LEGUP_F_float64_mul_BB__126_55 = 6'd55;
parameter [5:0] LEGUP_F_float64_mul_BB__126_56 = 6'd56;
parameter [5:0] LEGUP_F_float64_mul_BB__126_57 = 6'd57;
parameter [5:0] LEGUP_F_float64_mul_BB__126_59 = 6'd59;
parameter [5:0] LEGUP_F_float64_mul_BB__158_60 = 6'd60;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_58 = 6'd58;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [63:0] return_val;
input [63:0] arg_a;
input [63:0] arg_b;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [63:0] float64_mul_0_1;
reg [63:0] float64_mul_0_1_reg;
reg [63:0] float64_mul_0_2;
reg [63:0] float64_mul_0_2_reg;
reg [31:0] float64_mul_0_tri;
reg [31:0] float64_mul_0_tri_reg;
reg [31:0] float64_mul_0_3;
reg [31:0] float64_mul_0_3_reg;
reg [63:0] float64_mul_0_4;
reg [63:0] float64_mul_0_4_reg;
reg [63:0] float64_mul_0_5;
reg [63:0] float64_mul_0_5_reg;
reg [31:0] float64_mul_0_tri17;
reg [31:0] float64_mul_0_tri17_reg;
reg [31:0] float64_mul_0_6;
reg [31:0] float64_mul_0_6_reg;
reg [63:0] float64_mul_0_7;
reg [63:0] float64_mul_0_7_reg;
reg [63:0] float64_mul_0_8;
reg [63:0] float64_mul_0_8_reg;
reg [31:0] float64_mul_0_9;
reg [31:0] float64_mul_0_9_reg;
reg  float64_mul_0_10;
reg  float64_mul_0_10_reg;
reg  float64_mul_11_12;
reg  float64_mul_11_12_reg;
reg  float64_mul_13_14;
reg  float64_mul_13_14_reg;
reg  float64_mul_13_15;
reg  float64_mul_13_15_reg;
reg  float64_mul_13_orcond;
reg  float64_mul_13_orcond_reg;
reg [63:0] float64_mul_16_17;
reg [63:0] float64_mul_16_17_reg;
reg  float64_mul_16_18;
reg  float64_mul_16_18_reg;
reg [63:0] float64_mul_19_20;
reg [63:0] float64_mul_19_20_reg;
reg  float64_mul_19_21;
reg  float64_mul_19_21_reg;
reg  float64_mul_float64_is_signaling_nanexit1i10_22;
reg  float64_mul_float64_is_signaling_nanexit1i10_22_reg;
reg [62:0] float64_mul_float64_is_signaling_nanexit1i10_23;
reg [62:0] float64_mul_float64_is_signaling_nanexit1i10_23_reg;
reg  float64_mul_float64_is_signaling_nanexit1i10_24;
reg  float64_mul_float64_is_signaling_nanexit1i10_24_reg;
reg [63:0] float64_mul_float64_is_signaling_nanexit1i10_25;
reg [63:0] float64_mul_float64_is_signaling_nanexit1i10_25_reg;
reg  float64_mul_float64_is_signaling_nanexit1i10_26;
reg  float64_mul_float64_is_signaling_nanexit1i10_26_reg;
reg [63:0] float64_mul_27_28;
reg [63:0] float64_mul_27_28_reg;
reg  float64_mul_27_29;
reg  float64_mul_27_29_reg;
reg  float64_mul_float64_is_signaling_nanexiti11_30;
reg  float64_mul_float64_is_signaling_nanexiti11_30_reg;
reg  float64_mul_float64_is_signaling_nanexiti11_31;
reg  float64_mul_float64_is_signaling_nanexiti11_31_reg;
reg [31:0] float64_mul_threadi12_32;
reg [31:0] float64_mul_threadi12_32_reg;
reg [31:0] float64_mul_threadi12_33;
reg [31:0] float64_mul_threadi12_33_reg;
reg  float64_mul_propagateFloat64NaNexit16_sinki13;
reg  float64_mul_propagateFloat64NaNexit16_sinki13_reg;
reg [63:0] float64_mul_propagateFloat64NaNexit16_mux2vi14;
reg [63:0] float64_mul_propagateFloat64NaNexit16_mux2vi14_reg;
reg [63:0] float64_mul_propagateFloat64NaNexit16_mux2i15;
reg [63:0] float64_mul_propagateFloat64NaNexit16_mux2i15_reg;
reg [63:0] float64_mul_34_35;
reg [63:0] float64_mul_34_35_reg;
reg [63:0] float64_mul_34_36;
reg [63:0] float64_mul_34_36_reg;
reg  float64_mul_34_37;
reg  float64_mul_34_37_reg;
reg [31:0] float64_mul_38_39;
reg [31:0] float64_mul_38_39_reg;
reg [31:0] float64_mul_38_40;
reg [31:0] float64_mul_38_40_reg;
reg [63:0] float64_mul_41_42;
reg [63:0] float64_mul_41_42_reg;
reg [63:0] float64_mul_41_43;
reg [63:0] float64_mul_41_43_reg;
reg  float64_mul_44_45;
reg  float64_mul_44_45_reg;
reg  float64_mul_46_47;
reg  float64_mul_46_47_reg;
reg [63:0] float64_mul_48_49;
reg [63:0] float64_mul_48_49_reg;
reg  float64_mul_48_50;
reg  float64_mul_48_50_reg;
reg [63:0] float64_mul_51_52;
reg [63:0] float64_mul_51_52_reg;
reg  float64_mul_51_53;
reg  float64_mul_51_53_reg;
reg  float64_mul_float64_is_signaling_nanexit1i_54;
reg  float64_mul_float64_is_signaling_nanexit1i_54_reg;
reg [62:0] float64_mul_float64_is_signaling_nanexit1i_55;
reg [62:0] float64_mul_float64_is_signaling_nanexit1i_55_reg;
reg  float64_mul_float64_is_signaling_nanexit1i_56;
reg  float64_mul_float64_is_signaling_nanexit1i_56_reg;
reg [63:0] float64_mul_float64_is_signaling_nanexit1i_57;
reg [63:0] float64_mul_float64_is_signaling_nanexit1i_57_reg;
reg  float64_mul_float64_is_signaling_nanexit1i_58;
reg  float64_mul_float64_is_signaling_nanexit1i_58_reg;
reg [63:0] float64_mul_59_60;
reg [63:0] float64_mul_59_60_reg;
reg  float64_mul_59_61;
reg  float64_mul_59_61_reg;
reg  float64_mul_float64_is_signaling_nanexiti_62;
reg  float64_mul_float64_is_signaling_nanexiti_62_reg;
reg  float64_mul_float64_is_signaling_nanexiti_63;
reg  float64_mul_float64_is_signaling_nanexiti_63_reg;
reg [31:0] float64_mul_threadi_64;
reg [31:0] float64_mul_threadi_64_reg;
reg [31:0] float64_mul_threadi_65;
reg [31:0] float64_mul_threadi_65_reg;
reg  float64_mul_propagateFloat64NaNexit_sinki;
reg  float64_mul_propagateFloat64NaNexit_sinki_reg;
reg [63:0] float64_mul_propagateFloat64NaNexit_mux2vi;
reg [63:0] float64_mul_propagateFloat64NaNexit_mux2vi_reg;
reg [63:0] float64_mul_propagateFloat64NaNexit_mux2i;
reg [63:0] float64_mul_propagateFloat64NaNexit_mux2i_reg;
reg [63:0] float64_mul_66_67;
reg [63:0] float64_mul_66_67_reg;
reg [63:0] float64_mul_66_68;
reg [63:0] float64_mul_66_68_reg;
reg  float64_mul_66_69;
reg  float64_mul_66_69_reg;
reg [31:0] float64_mul_70_71;
reg [31:0] float64_mul_70_71_reg;
reg [31:0] float64_mul_70_72;
reg [31:0] float64_mul_70_72_reg;
reg [63:0] float64_mul_73_74;
reg [63:0] float64_mul_73_74_reg;
reg [63:0] float64_mul_73_75;
reg [63:0] float64_mul_73_75_reg;
reg  float64_mul_76_77;
reg  float64_mul_76_77_reg;
reg  float64_mul_78_79;
reg  float64_mul_78_79_reg;
reg [63:0] float64_mul_80_81;
reg [63:0] float64_mul_80_81_reg;
reg  float64_mul_82_83;
reg  float64_mul_82_83_reg;
reg [63:0] float64_mul_82_84;
reg [63:0] float64_mul_82_84_reg;
reg [63:0] float64_mul_82_asinkii2;
reg [63:0] float64_mul_82_asinkii2_reg;
reg [31:0] float64_mul_82_shiftCount0ii3;
reg [31:0] float64_mul_82_shiftCount0ii3_reg;
reg [31:0] float64_mul_82_extracttii4;
reg [31:0] float64_mul_82_extracttii4_reg;
reg  float64_mul_82_85;
reg  float64_mul_82_85_reg;
reg [31:0] float64_mul_82_86;
reg [31:0] float64_mul_82_86_reg;
reg [31:0] float64_mul_82_aiii5;
reg [31:0] float64_mul_82_aiii5_reg;
reg [31:0] float64_mul_82_iii6;
reg [31:0] float64_mul_82_iii6_reg;
reg  float64_mul_82_87;
reg  float64_mul_82_87_reg;
reg [31:0] float64_mul_88_89;
reg [31:0] float64_mul_88_89_reg;
reg [31:0] float64_mul_88_90;
reg [31:0] float64_mul_88_90_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_1iii7;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_1iii7_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_91;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] float64_mul_normalizeFloat64Subnormalexit9_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] float64_mul_normalizeFloat64Subnormalexit9_92_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_93;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_93_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_94;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_94_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_95;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_95_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_96;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_96_reg;
reg [63:0] float64_mul_normalizeFloat64Subnormalexit9_97;
reg [63:0] float64_mul_normalizeFloat64Subnormalexit9_97_reg;
reg [63:0] float64_mul_normalizeFloat64Subnormalexit9_98;
reg [63:0] float64_mul_normalizeFloat64Subnormalexit9_98_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_99;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit9_99_reg;
reg [31:0] float64_mul_100_101;
reg [31:0] float64_mul_100_101_reg;
reg [63:0] float64_mul_100_102;
reg [63:0] float64_mul_100_102_reg;
reg  float64_mul_100_103;
reg  float64_mul_100_103_reg;
reg  float64_mul_104_105;
reg  float64_mul_104_105_reg;
reg [63:0] float64_mul_106_107;
reg [63:0] float64_mul_106_107_reg;
reg  float64_mul_108_109;
reg  float64_mul_108_109_reg;
reg [63:0] float64_mul_108_110;
reg [63:0] float64_mul_108_110_reg;
reg [63:0] float64_mul_108_asinkii;
reg [63:0] float64_mul_108_asinkii_reg;
reg [31:0] float64_mul_108_shiftCount0ii;
reg [31:0] float64_mul_108_shiftCount0ii_reg;
reg [31:0] float64_mul_108_extracttii;
reg [31:0] float64_mul_108_extracttii_reg;
reg  float64_mul_108_111;
reg  float64_mul_108_111_reg;
reg [31:0] float64_mul_108_112;
reg [31:0] float64_mul_108_112_reg;
reg [31:0] float64_mul_108_aiii;
reg [31:0] float64_mul_108_aiii_reg;
reg [31:0] float64_mul_108_iii;
reg [31:0] float64_mul_108_iii_reg;
reg  float64_mul_108_113;
reg  float64_mul_108_113_reg;
reg [31:0] float64_mul_114_115;
reg [31:0] float64_mul_114_115_reg;
reg [31:0] float64_mul_114_116;
reg [31:0] float64_mul_114_116_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_1iii;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_1iii_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_117;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] float64_mul_normalizeFloat64Subnormalexit_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] float64_mul_normalizeFloat64Subnormalexit_118_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_119;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_119_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_120;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_120_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_121;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_121_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_122;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_122_reg;
reg [63:0] float64_mul_normalizeFloat64Subnormalexit_123;
reg [63:0] float64_mul_normalizeFloat64Subnormalexit_123_reg;
reg [63:0] float64_mul_normalizeFloat64Subnormalexit_124;
reg [63:0] float64_mul_normalizeFloat64Subnormalexit_124_reg;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_125;
reg [31:0] float64_mul_normalizeFloat64Subnormalexit_125_reg;
reg [31:0] float64_mul_126_127;
reg [31:0] float64_mul_126_127_reg;
reg [63:0] float64_mul_126_128;
reg [63:0] float64_mul_126_128_reg;
reg [31:0] float64_mul_126_129;
reg [31:0] float64_mul_126_129_reg;
reg [63:0] float64_mul_126_130;
reg [63:0] float64_mul_126_130_reg;
reg [63:0] float64_mul_126_131;
reg [63:0] float64_mul_126_131_reg;
reg [63:0] float64_mul_126_132;
reg [63:0] float64_mul_126_132_reg;
reg [63:0] float64_mul_126_133;
reg [63:0] float64_mul_126_133_reg;
reg [63:0] float64_mul_126_134;
reg [63:0] float64_mul_126_134_reg;
reg [63:0] float64_mul_126_135;
reg [63:0] float64_mul_126_135_reg;
reg [63:0] float64_mul_126_136;
reg [63:0] float64_mul_126_136_reg;
reg [63:0] float64_mul_126_137;
reg [63:0] float64_mul_126_137_reg;
reg [63:0] float64_mul_126_138;
reg [63:0] float64_mul_126_138_reg;
reg [63:0] float64_mul_126_139;
reg [63:0] float64_mul_126_139_reg;
reg [63:0] float64_mul_126_140;
reg [63:0] float64_mul_126_140_reg;
reg [63:0] float64_mul_126_141;
reg [63:0] float64_mul_126_141_reg;
reg [63:0] float64_mul_126_142;
reg [63:0] float64_mul_126_142_reg;
reg [63:0] float64_mul_126_143;
reg [63:0] float64_mul_126_143_reg;
reg [64:0] float64_mul_126_overflow_intrinsic;
reg [64:0] float64_mul_126_overflow_intrinsic_reg;
reg [64:0] float64_mul_126_overflow_intrinsic1;
reg [64:0] float64_mul_126_overflow_intrinsic1_reg;
reg [64:0] float64_mul_126_overflow_intrinsic2;
reg [64:0] float64_mul_126_overflow_intrinsic2_reg;
reg [63:0] float64_mul_126_overflow_intrinsic_sum;
reg [63:0] float64_mul_126_overflow_intrinsic_sum_reg;
reg [64:0] float64_mul_126_144;
reg [64:0] float64_mul_126_144_reg;
reg [63:0] float64_mul_126_tr;
reg [63:0] float64_mul_126_tr_reg;
reg [63:0] float64_mul_126_145;
reg [63:0] float64_mul_126_145_reg;
reg [63:0] float64_mul_126_146;
reg [63:0] float64_mul_126_146_reg;
reg [63:0] float64_mul_126_147;
reg [63:0] float64_mul_126_147_reg;
reg [63:0] float64_mul_126_148;
reg [63:0] float64_mul_126_148_reg;
reg [64:0] float64_mul_126_overflow_intrinsic4;
reg [64:0] float64_mul_126_overflow_intrinsic4_reg;
reg [64:0] float64_mul_126_overflow_intrinsic5;
reg [64:0] float64_mul_126_overflow_intrinsic5_reg;
reg [64:0] float64_mul_126_overflow_intrinsic6;
reg [64:0] float64_mul_126_overflow_intrinsic6_reg;
reg [63:0] float64_mul_126_overflow_intrinsic_sum7;
reg [63:0] float64_mul_126_overflow_intrinsic_sum7_reg;
reg [64:0] float64_mul_126_overflow_intrinsic8;
reg [64:0] float64_mul_126_overflow_intrinsic8_reg;
reg [63:0] float64_mul_126_149;
reg [63:0] float64_mul_126_149_reg;
reg [63:0] float64_mul_126_150;
reg [63:0] float64_mul_126_150_reg;
reg [63:0] float64_mul_126_151;
reg [63:0] float64_mul_126_151_reg;
reg  float64_mul_126_152;
reg  float64_mul_126_152_reg;
reg [63:0] float64_mul_126_153;
reg [63:0] float64_mul_126_153_reg;
reg [63:0] float64_mul_126_154;
reg [63:0] float64_mul_126_154_reg;
reg [63:0] float64_mul_126_155;
reg [63:0] float64_mul_126_155_reg;
reg  float64_mul_126_156;
reg  float64_mul_126_156_reg;
reg [63:0] float64_mul_126_;
reg [63:0] float64_mul_126__reg;
reg [31:0] float64_mul_126_18v;
reg [31:0] float64_mul_126_18v_reg;
reg [31:0] float64_mul_126_18;
reg [31:0] float64_mul_126_18_reg;
reg [63:0] float64_mul_126_157;
reg [63:0] float64_mul_126_157_reg;
reg [63:0] float64_mul_158_0;
reg [63:0] float64_mul_158_0_reg;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [5:0] test_in_address_a;
wire  test_in_write_enable_a;
wire [63:0] test_in_in_a;
wire [63:0] test_in_out_a;
wire [5:0] test_in_address_b;
wire  test_in_write_enable_b;
wire [63:0] test_in_in_b;
wire [63:0] test_in_out_b;
wire [5:0] test_out_address_a;
wire  test_out_write_enable_a;
wire [63:0] test_out_in_a;
wire [63:0] test_out_out_a;
wire [5:0] test_out_address_b;
wire  test_out_write_enable_b;
wire [63:0] test_out_in_b;
wire [63:0] test_out_out_b;
wire [7:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [7:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
reg  roundAndPackFloat64_start;
reg [31:0] roundAndPackFloat64_arg_zSign;
reg [31:0] roundAndPackFloat64_arg_zExp;
reg [63:0] roundAndPackFloat64_arg_zSig;
wire  roundAndPackFloat64_memory_controller_enable_a;
wire  roundAndPackFloat64_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] roundAndPackFloat64_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_out_a;
wire [1:0] roundAndPackFloat64_memory_controller_size_a;
wire  roundAndPackFloat64_memory_controller_enable_b;
wire  roundAndPackFloat64_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] roundAndPackFloat64_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_out_b;
wire [1:0] roundAndPackFloat64_memory_controller_size_b;
reg  roundAndPackFloat64_memory_controller_waitrequest;
reg  roundAndPackFloat64_finish_final;
reg  roundAndPackFloat64_finish_reg;
wire  roundAndPackFloat64_finish;
wire [63:0] roundAndPackFloat64_return_val;
reg [63:0] roundAndPackFloat64_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  lpm_mult_float64_mul_126_140_en;
reg [63:0] float64_mul_126_140_stage0_reg;
reg  lpm_mult_float64_mul_126_141_en;
reg [63:0] float64_mul_126_141_stage0_reg;
reg  lpm_mult_float64_mul_126_142_en;
reg [63:0] float64_mul_126_142_stage0_reg;
reg  lpm_mult_float64_mul_126_143_en;
reg [63:0] float64_mul_126_143_stage0_reg;


roundAndPackFloat64 roundAndPackFloat64 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (roundAndPackFloat64_memory_controller_enable_a),
	.memory_controller_address_a (roundAndPackFloat64_memory_controller_address_a),
	.memory_controller_write_enable_a (roundAndPackFloat64_memory_controller_write_enable_a),
	.memory_controller_in_a (roundAndPackFloat64_memory_controller_in_a),
	.memory_controller_size_a (roundAndPackFloat64_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (roundAndPackFloat64_memory_controller_enable_b),
	.memory_controller_address_b (roundAndPackFloat64_memory_controller_address_b),
	.memory_controller_write_enable_b (roundAndPackFloat64_memory_controller_write_enable_b),
	.memory_controller_in_b (roundAndPackFloat64_memory_controller_in_b),
	.memory_controller_size_b (roundAndPackFloat64_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (roundAndPackFloat64_start),
	.finish (roundAndPackFloat64_finish),
	.return_val (roundAndPackFloat64_return_val),
	.arg_zSign (roundAndPackFloat64_arg_zSign),
	.arg_zExp (roundAndPackFloat64_arg_zExp),
	.arg_zSig (roundAndPackFloat64_arg_zSig)
);

defparam
	roundAndPackFloat64.tag_offset = tag_offset;

// Local Rams


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__0_1;
LEGUP_F_float64_mul_BB__0_1:
	if ((float64_mul_0_10 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__11_2;
	else if ((float64_mul_0_10 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB__44_20;
LEGUP_F_float64_mul_BB__100_46:
	if ((float64_mul_100_103 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__104_47;
	else if ((float64_mul_100_103 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB__126_54;
LEGUP_F_float64_mul_BB__104_47:
	if ((float64_mul_104_105 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__106_48;
	else if ((float64_mul_104_105 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB__108_49;
LEGUP_F_float64_mul_BB__106_48:
		next_state = LEGUP_F_float64_mul_BB__158_60;
LEGUP_F_float64_mul_BB__108_49:
	if ((float64_mul_108_113 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__114_50;
	else if ((float64_mul_108_113 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_51;
LEGUP_F_float64_mul_BB__114_50:
		next_state = LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_51;
LEGUP_F_float64_mul_BB__11_2:
	if ((float64_mul_11_12 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__13_3;
	else if ((float64_mul_11_12 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB__16_4;
LEGUP_F_float64_mul_BB__126_54:
		next_state = LEGUP_F_float64_mul_BB__126_55;
LEGUP_F_float64_mul_BB__126_55:
		next_state = LEGUP_F_float64_mul_BB__126_56;
LEGUP_F_float64_mul_BB__126_56:
		next_state = LEGUP_F_float64_mul_BB__126_57;
LEGUP_F_float64_mul_BB__126_57:
		next_state = LEGUP_function_call_58;
LEGUP_F_float64_mul_BB__126_59:
		next_state = LEGUP_F_float64_mul_BB__158_60;
LEGUP_F_float64_mul_BB__13_3:
	if ((float64_mul_13_orcond == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__16_4;
	else if ((float64_mul_13_orcond == 1'd0))
		next_state = LEGUP_F_float64_mul_BB__34_14;
LEGUP_F_float64_mul_BB__158_60:
		next_state = LEGUP_0;
LEGUP_F_float64_mul_BB__16_4:
	if ((float64_mul_16_18 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__19_5;
	else if ((float64_mul_16_18 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i10_6;
LEGUP_F_float64_mul_BB__19_5:
		next_state = LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i10_6;
LEGUP_F_float64_mul_BB__27_7:
		next_state = LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti11_8;
LEGUP_F_float64_mul_BB__34_14:
	if ((float64_mul_34_37 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__38_15;
	else if ((float64_mul_34_37 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB__41_19;
LEGUP_F_float64_mul_BB__38_15:
		next_state = LEGUP_F_float64_mul_BB__38_16;
LEGUP_F_float64_mul_BB__38_16:
		next_state = LEGUP_F_float64_mul_BB__38_17;
LEGUP_F_float64_mul_BB__38_17:
		next_state = LEGUP_F_float64_mul_BB__38_18;
LEGUP_F_float64_mul_BB__38_18:
		next_state = LEGUP_F_float64_mul_BB__158_60;
LEGUP_F_float64_mul_BB__41_19:
		next_state = LEGUP_F_float64_mul_BB__158_60;
LEGUP_F_float64_mul_BB__44_20:
	if ((float64_mul_44_45 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__46_21;
	else if ((float64_mul_44_45 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB__76_38;
LEGUP_F_float64_mul_BB__46_21:
	if ((float64_mul_46_47 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__66_32;
	else if ((float64_mul_46_47 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB__48_22;
LEGUP_F_float64_mul_BB__48_22:
	if ((float64_mul_48_50 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__51_23;
	else if ((float64_mul_48_50 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i_24;
LEGUP_F_float64_mul_BB__51_23:
		next_state = LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i_24;
LEGUP_F_float64_mul_BB__59_25:
		next_state = LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti_26;
LEGUP_F_float64_mul_BB__66_32:
	if ((float64_mul_66_69 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__70_33;
	else if ((float64_mul_66_69 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB__73_37;
LEGUP_F_float64_mul_BB__70_33:
		next_state = LEGUP_F_float64_mul_BB__70_34;
LEGUP_F_float64_mul_BB__70_34:
		next_state = LEGUP_F_float64_mul_BB__70_35;
LEGUP_F_float64_mul_BB__70_35:
		next_state = LEGUP_F_float64_mul_BB__70_36;
LEGUP_F_float64_mul_BB__70_36:
		next_state = LEGUP_F_float64_mul_BB__158_60;
LEGUP_F_float64_mul_BB__73_37:
		next_state = LEGUP_F_float64_mul_BB__158_60;
LEGUP_F_float64_mul_BB__76_38:
	if ((float64_mul_76_77 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__78_39;
	else if ((float64_mul_76_77 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB__100_46;
LEGUP_F_float64_mul_BB__78_39:
	if ((float64_mul_78_79 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__80_40;
	else if ((float64_mul_78_79 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB__82_41;
LEGUP_F_float64_mul_BB__80_40:
		next_state = LEGUP_F_float64_mul_BB__158_60;
LEGUP_F_float64_mul_BB__82_41:
	if ((float64_mul_82_87 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__88_42;
	else if ((float64_mul_82_87 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_43;
LEGUP_F_float64_mul_BB__88_42:
		next_state = LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_43;
LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i10_6:
	if ((float64_mul_float64_is_signaling_nanexit1i10_26 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__27_7;
	else if ((float64_mul_float64_is_signaling_nanexit1i10_26 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti11_8;
LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i_24:
	if ((float64_mul_float64_is_signaling_nanexit1i_58 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__59_25;
	else if ((float64_mul_float64_is_signaling_nanexit1i_58 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti_26;
LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti11_8:
	if ((float64_mul_float64_is_signaling_nanexiti11_31 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB_threadi12_9;
	else if ((float64_mul_float64_is_signaling_nanexiti11_31 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB_propagateFloat64NaNexit16_13;
LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti_26:
	if ((float64_mul_float64_is_signaling_nanexiti_63 == 1'd1))
		next_state = LEGUP_F_float64_mul_BB_threadi_27;
	else if ((float64_mul_float64_is_signaling_nanexiti_63 == 1'd0))
		next_state = LEGUP_F_float64_mul_BB_propagateFloat64NaNexit_31;
LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_43:
		next_state = LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_44;
LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_44:
		next_state = LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45;
LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45:
		next_state = LEGUP_F_float64_mul_BB__100_46;
LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_51:
		next_state = LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_52;
LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_52:
		next_state = LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53;
LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53:
		next_state = LEGUP_F_float64_mul_BB__126_54;
LEGUP_F_float64_mul_BB_propagateFloat64NaNexit16_13:
		next_state = LEGUP_F_float64_mul_BB__158_60;
LEGUP_F_float64_mul_BB_propagateFloat64NaNexit_31:
		next_state = LEGUP_F_float64_mul_BB__158_60;
LEGUP_F_float64_mul_BB_threadi12_10:
		next_state = LEGUP_F_float64_mul_BB_threadi12_11;
LEGUP_F_float64_mul_BB_threadi12_11:
		next_state = LEGUP_F_float64_mul_BB_threadi12_12;
LEGUP_F_float64_mul_BB_threadi12_12:
		next_state = LEGUP_F_float64_mul_BB_propagateFloat64NaNexit16_13;
LEGUP_F_float64_mul_BB_threadi12_9:
		next_state = LEGUP_F_float64_mul_BB_threadi12_10;
LEGUP_F_float64_mul_BB_threadi_27:
		next_state = LEGUP_F_float64_mul_BB_threadi_28;
LEGUP_F_float64_mul_BB_threadi_28:
		next_state = LEGUP_F_float64_mul_BB_threadi_29;
LEGUP_F_float64_mul_BB_threadi_29:
		next_state = LEGUP_F_float64_mul_BB_threadi_30;
LEGUP_F_float64_mul_BB_threadi_30:
		next_state = LEGUP_F_float64_mul_BB_propagateFloat64NaNexit_31;
LEGUP_function_call_58:
	if ((roundAndPackFloat64_finish_final == 1'd1))
		next_state = LEGUP_F_float64_mul_BB__126_59;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* float64_mul: %0*/
	/*   %1 = and i64 %a, 4503599627370495*/
		float64_mul_0_1 = (arg_a & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* float64_mul: %0*/
	/*   %1 = and i64 %a, 4503599627370495*/
	if ((cur_state == LEGUP_F_float64_mul_BB__0_1)) begin
		float64_mul_0_1_reg <= float64_mul_0_1;
		if (start == 1'b0 && ^(float64_mul_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %0*/
	/*   %2 = lshr i64 %a, 52*/
		float64_mul_0_2 = (arg_a >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %0*/
	/*   %2 = lshr i64 %a, 52*/
	if ((cur_state == LEGUP_F_float64_mul_BB__0_1)) begin
		float64_mul_0_2_reg <= float64_mul_0_2;
		if (start == 1'b0 && ^(float64_mul_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %0*/
	/*   %.tr.i = trunc i64 %2 to i32*/
		float64_mul_0_tri = float64_mul_0_2[31:0];
end
always @(posedge clk) begin
	/* float64_mul: %0*/
	/*   %.tr.i = trunc i64 %2 to i32*/
	if ((cur_state == LEGUP_F_float64_mul_BB__0_1)) begin
		float64_mul_0_tri_reg <= float64_mul_0_tri;
		if (start == 1'b0 && ^(float64_mul_0_tri) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_0_tri_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %0*/
	/*   %3 = and i32 %.tr.i, 2047*/
		float64_mul_0_3 = (float64_mul_0_tri & 32'd2047);
end
always @(posedge clk) begin
	/* float64_mul: %0*/
	/*   %3 = and i32 %.tr.i, 2047*/
	if ((cur_state == LEGUP_F_float64_mul_BB__0_1)) begin
		float64_mul_0_3_reg <= float64_mul_0_3;
		if (start == 1'b0 && ^(float64_mul_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %0*/
	/*   %4 = and i64 %b, 4503599627370495*/
		float64_mul_0_4 = (arg_b & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* float64_mul: %0*/
	/*   %4 = and i64 %b, 4503599627370495*/
	if ((cur_state == LEGUP_F_float64_mul_BB__0_1)) begin
		float64_mul_0_4_reg <= float64_mul_0_4;
		if (start == 1'b0 && ^(float64_mul_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %0*/
	/*   %5 = lshr i64 %b, 52*/
		float64_mul_0_5 = (arg_b >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %0*/
	/*   %5 = lshr i64 %b, 52*/
	if ((cur_state == LEGUP_F_float64_mul_BB__0_1)) begin
		float64_mul_0_5_reg <= float64_mul_0_5;
		if (start == 1'b0 && ^(float64_mul_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %0*/
	/*   %.tr.i17 = trunc i64 %5 to i32*/
		float64_mul_0_tri17 = float64_mul_0_5[31:0];
end
always @(posedge clk) begin
	/* float64_mul: %0*/
	/*   %.tr.i17 = trunc i64 %5 to i32*/
	if ((cur_state == LEGUP_F_float64_mul_BB__0_1)) begin
		float64_mul_0_tri17_reg <= float64_mul_0_tri17;
		if (start == 1'b0 && ^(float64_mul_0_tri17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_0_tri17_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %0*/
	/*   %6 = and i32 %.tr.i17, 2047*/
		float64_mul_0_6 = (float64_mul_0_tri17 & 32'd2047);
end
always @(posedge clk) begin
	/* float64_mul: %0*/
	/*   %6 = and i32 %.tr.i17, 2047*/
	if ((cur_state == LEGUP_F_float64_mul_BB__0_1)) begin
		float64_mul_0_6_reg <= float64_mul_0_6;
		if (start == 1'b0 && ^(float64_mul_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %0*/
	/*   %7 = xor i64 %b, %a*/
		float64_mul_0_7 = (arg_b ^ arg_a);
end
always @(posedge clk) begin
	/* float64_mul: %0*/
	/*   %7 = xor i64 %b, %a*/
	if ((cur_state == LEGUP_F_float64_mul_BB__0_1)) begin
		float64_mul_0_7_reg <= float64_mul_0_7;
		if (start == 1'b0 && ^(float64_mul_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %0*/
	/*   %8 = lshr i64 %7, 63*/
		float64_mul_0_8 = (float64_mul_0_7 >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %0*/
	/*   %8 = lshr i64 %7, 63*/
	if ((cur_state == LEGUP_F_float64_mul_BB__0_1)) begin
		float64_mul_0_8_reg <= float64_mul_0_8;
		if (start == 1'b0 && ^(float64_mul_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %0*/
	/*   %9 = trunc i64 %8 to i32*/
		float64_mul_0_9 = float64_mul_0_8[31:0];
end
always @(posedge clk) begin
	/* float64_mul: %0*/
	/*   %9 = trunc i64 %8 to i32*/
	if ((cur_state == LEGUP_F_float64_mul_BB__0_1)) begin
		float64_mul_0_9_reg <= float64_mul_0_9;
		if (start == 1'b0 && ^(float64_mul_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %0*/
	/*   %10 = icmp eq i32 %3, 2047*/
		float64_mul_0_10 = (float64_mul_0_3 == 32'd2047);
end
always @(posedge clk) begin
	/* float64_mul: %0*/
	/*   %10 = icmp eq i32 %3, 2047*/
	if ((cur_state == LEGUP_F_float64_mul_BB__0_1)) begin
		float64_mul_0_10_reg <= float64_mul_0_10;
		if (start == 1'b0 && ^(float64_mul_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %11*/
	/*   %12 = icmp eq i64 %1, 0*/
		float64_mul_11_12 = (float64_mul_0_1_reg == 64'd0);
end
always @(posedge clk) begin
	/* float64_mul: %11*/
	/*   %12 = icmp eq i64 %1, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__11_2)) begin
		float64_mul_11_12_reg <= float64_mul_11_12;
		if (start == 1'b0 && ^(float64_mul_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %13*/
	/*   %14 = icmp eq i32 %6, 2047*/
		float64_mul_13_14 = (float64_mul_0_6_reg == 32'd2047);
end
always @(posedge clk) begin
	/* float64_mul: %13*/
	/*   %14 = icmp eq i32 %6, 2047*/
	if ((cur_state == LEGUP_F_float64_mul_BB__13_3)) begin
		float64_mul_13_14_reg <= float64_mul_13_14;
		if (start == 1'b0 && ^(float64_mul_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_13_14_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %13*/
	/*   %15 = icmp ne i64 %4, 0*/
		float64_mul_13_15 = (float64_mul_0_4_reg != 64'd0);
end
always @(posedge clk) begin
	/* float64_mul: %13*/
	/*   %15 = icmp ne i64 %4, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__13_3)) begin
		float64_mul_13_15_reg <= float64_mul_13_15;
		if (start == 1'b0 && ^(float64_mul_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_13_15_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %13*/
	/*   %or.cond = and i1 %14, %15*/
		float64_mul_13_orcond = (float64_mul_13_14 & float64_mul_13_15);
end
always @(posedge clk) begin
	/* float64_mul: %13*/
	/*   %or.cond = and i1 %14, %15*/
	if ((cur_state == LEGUP_F_float64_mul_BB__13_3)) begin
		float64_mul_13_orcond_reg <= float64_mul_13_orcond;
		if (start == 1'b0 && ^(float64_mul_13_orcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_13_orcond_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %16*/
	/*   %17 = and i64 %a, 9221120237041090560*/
		float64_mul_16_17 = (arg_a & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* float64_mul: %16*/
	/*   %17 = and i64 %a, 9221120237041090560*/
	if ((cur_state == LEGUP_F_float64_mul_BB__16_4)) begin
		float64_mul_16_17_reg <= float64_mul_16_17;
		if (start == 1'b0 && ^(float64_mul_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_16_17_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %16*/
	/*   %18 = icmp eq i64 %17, 9218868437227405312*/
		float64_mul_16_18 = (float64_mul_16_17 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* float64_mul: %16*/
	/*   %18 = icmp eq i64 %17, 9218868437227405312*/
	if ((cur_state == LEGUP_F_float64_mul_BB__16_4)) begin
		float64_mul_16_18_reg <= float64_mul_16_18;
		if (start == 1'b0 && ^(float64_mul_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_16_18_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %19*/
	/*   %20 = and i64 %a, 2251799813685247*/
		float64_mul_19_20 = (arg_a & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* float64_mul: %19*/
	/*   %20 = and i64 %a, 2251799813685247*/
	if ((cur_state == LEGUP_F_float64_mul_BB__19_5)) begin
		float64_mul_19_20_reg <= float64_mul_19_20;
		if (start == 1'b0 && ^(float64_mul_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_19_20_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %19*/
	/*   %21 = icmp ne i64 %20, 0*/
		float64_mul_19_21 = (float64_mul_19_20 != 64'd0);
end
always @(posedge clk) begin
	/* float64_mul: %19*/
	/*   %21 = icmp ne i64 %20, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__19_5)) begin
		float64_mul_19_21_reg <= float64_mul_19_21;
		if (start == 1'b0 && ^(float64_mul_19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_19_21_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i10*/
	/*   %22 = phi i1 [ false, %16 ], [ %21, %19 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__16_4) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_16_18 == 1'd0))) begin
		float64_mul_float64_is_signaling_nanexit1i10_22 = 1'd0;
	end
	/* float64_mul: %float64_is_signaling_nan.exit1.i10*/
	/*   %22 = phi i1 [ false, %16 ], [ %21, %19 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB__19_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_float64_is_signaling_nanexit1i10_22 = float64_mul_19_21;
	end
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i10*/
	/*   %22 = phi i1 [ false, %16 ], [ %21, %19 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__16_4) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_16_18 == 1'd0))) begin
		float64_mul_float64_is_signaling_nanexit1i10_22_reg <= float64_mul_float64_is_signaling_nanexit1i10_22;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexit1i10_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexit1i10_22_reg"); $finish; end
	end
	/* float64_mul: %float64_is_signaling_nan.exit1.i10*/
	/*   %22 = phi i1 [ false, %16 ], [ %21, %19 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__19_5) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_float64_is_signaling_nanexit1i10_22_reg <= float64_mul_float64_is_signaling_nanexit1i10_22;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexit1i10_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexit1i10_22_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i10*/
	/*   %23 = trunc i64 %b to i63*/
		float64_mul_float64_is_signaling_nanexit1i10_23 = arg_b[62:0];
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i10*/
	/*   %23 = trunc i64 %b to i63*/
	if ((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i10_6)) begin
		float64_mul_float64_is_signaling_nanexit1i10_23_reg <= float64_mul_float64_is_signaling_nanexit1i10_23;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexit1i10_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexit1i10_23_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i10*/
	/*   %24 = icmp ugt i63 %23, -4503599627370496*/
		float64_mul_float64_is_signaling_nanexit1i10_24 = (float64_mul_float64_is_signaling_nanexit1i10_23 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i10*/
	/*   %24 = icmp ugt i63 %23, -4503599627370496*/
	if ((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i10_6)) begin
		float64_mul_float64_is_signaling_nanexit1i10_24_reg <= float64_mul_float64_is_signaling_nanexit1i10_24;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexit1i10_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexit1i10_24_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i10*/
	/*   %25 = and i64 %b, 9221120237041090560*/
		float64_mul_float64_is_signaling_nanexit1i10_25 = (arg_b & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i10*/
	/*   %25 = and i64 %b, 9221120237041090560*/
	if ((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i10_6)) begin
		float64_mul_float64_is_signaling_nanexit1i10_25_reg <= float64_mul_float64_is_signaling_nanexit1i10_25;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexit1i10_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexit1i10_25_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i10*/
	/*   %26 = icmp eq i64 %25, 9218868437227405312*/
		float64_mul_float64_is_signaling_nanexit1i10_26 = (float64_mul_float64_is_signaling_nanexit1i10_25 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i10*/
	/*   %26 = icmp eq i64 %25, 9218868437227405312*/
	if ((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i10_6)) begin
		float64_mul_float64_is_signaling_nanexit1i10_26_reg <= float64_mul_float64_is_signaling_nanexit1i10_26;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexit1i10_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexit1i10_26_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %27*/
	/*   %28 = and i64 %b, 2251799813685247*/
		float64_mul_27_28 = (arg_b & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* float64_mul: %27*/
	/*   %28 = and i64 %b, 2251799813685247*/
	if ((cur_state == LEGUP_F_float64_mul_BB__27_7)) begin
		float64_mul_27_28_reg <= float64_mul_27_28;
		if (start == 1'b0 && ^(float64_mul_27_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_27_28_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %27*/
	/*   %29 = icmp ne i64 %28, 0*/
		float64_mul_27_29 = (float64_mul_27_28 != 64'd0);
end
always @(posedge clk) begin
	/* float64_mul: %27*/
	/*   %29 = icmp ne i64 %28, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__27_7)) begin
		float64_mul_27_29_reg <= float64_mul_27_29;
		if (start == 1'b0 && ^(float64_mul_27_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_27_29_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit.i11*/
	/*   %30 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10 ], [ %29, %27 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i10_6) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_float64_is_signaling_nanexit1i10_26 == 1'd0))) begin
		float64_mul_float64_is_signaling_nanexiti11_30 = 1'd0;
	end
	/* float64_mul: %float64_is_signaling_nan.exit.i11*/
	/*   %30 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10 ], [ %29, %27 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB__27_7) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_float64_is_signaling_nanexiti11_30 = float64_mul_27_29;
	end
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit.i11*/
	/*   %30 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10 ], [ %29, %27 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i10_6) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_float64_is_signaling_nanexit1i10_26 == 1'd0))) begin
		float64_mul_float64_is_signaling_nanexiti11_30_reg <= float64_mul_float64_is_signaling_nanexiti11_30;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexiti11_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexiti11_30_reg"); $finish; end
	end
	/* float64_mul: %float64_is_signaling_nan.exit.i11*/
	/*   %30 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10 ], [ %29, %27 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__27_7) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_float64_is_signaling_nanexiti11_30_reg <= float64_mul_float64_is_signaling_nanexiti11_30;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexiti11_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexiti11_30_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit.i11*/
	/*   %31 = or i1 %22, %30*/
		float64_mul_float64_is_signaling_nanexiti11_31 = (float64_mul_float64_is_signaling_nanexit1i10_22_reg | float64_mul_float64_is_signaling_nanexiti11_30_reg);
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit.i11*/
	/*   %31 = or i1 %22, %30*/
	if ((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti11_8)) begin
		float64_mul_float64_is_signaling_nanexiti11_31_reg <= float64_mul_float64_is_signaling_nanexiti11_31;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexiti11_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexiti11_31_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %.thread.i12*/
	/*   %32 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		float64_mul_threadi12_32 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* float64_mul: %.thread.i12*/
	/*   %32 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi12_11)) begin
		float64_mul_threadi12_32_reg <= float64_mul_threadi12_32;
		if (start == 1'b0 && ^(float64_mul_threadi12_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_threadi12_32_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %.thread.i12*/
	/*   %33 = or i32 %32, 16*/
		float64_mul_threadi12_33 = (float64_mul_threadi12_32 | 32'd16);
end
always @(posedge clk) begin
	/* float64_mul: %.thread.i12*/
	/*   %33 = or i32 %32, 16*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi12_11)) begin
		float64_mul_threadi12_33_reg <= float64_mul_threadi12_33;
		if (start == 1'b0 && ^(float64_mul_threadi12_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_threadi12_33_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %propagateFloat64NaN.exit16*/
	/*   %.sink.i13 = phi i1 [ %30, %.thread.i12 ], [ %24, %float64_is_signaling_nan.exit.i11 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti11_8) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_float64_is_signaling_nanexiti11_31 == 1'd0))) begin
		float64_mul_propagateFloat64NaNexit16_sinki13 = float64_mul_float64_is_signaling_nanexit1i10_24_reg;
	end
	/* float64_mul: %propagateFloat64NaN.exit16*/
	/*   %.sink.i13 = phi i1 [ %30, %.thread.i12 ], [ %24, %float64_is_signaling_nan.exit.i11 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB_threadi12_12) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_propagateFloat64NaNexit16_sinki13 = float64_mul_float64_is_signaling_nanexiti11_30_reg;
	end
end
always @(posedge clk) begin
	/* float64_mul: %propagateFloat64NaN.exit16*/
	/*   %.sink.i13 = phi i1 [ %30, %.thread.i12 ], [ %24, %float64_is_signaling_nan.exit.i11 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti11_8) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_float64_is_signaling_nanexiti11_31 == 1'd0))) begin
		float64_mul_propagateFloat64NaNexit16_sinki13_reg <= float64_mul_propagateFloat64NaNexit16_sinki13;
		if (start == 1'b0 && ^(float64_mul_propagateFloat64NaNexit16_sinki13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_propagateFloat64NaNexit16_sinki13_reg"); $finish; end
	end
	/* float64_mul: %propagateFloat64NaN.exit16*/
	/*   %.sink.i13 = phi i1 [ %30, %.thread.i12 ], [ %24, %float64_is_signaling_nan.exit.i11 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB_threadi12_12) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_propagateFloat64NaNexit16_sinki13_reg <= float64_mul_propagateFloat64NaNexit16_sinki13;
		if (start == 1'b0 && ^(float64_mul_propagateFloat64NaNexit16_sinki13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_propagateFloat64NaNexit16_sinki13_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %propagateFloat64NaN.exit16*/
	/*   %.mux2.v.i14 = select i1 %.sink.i13, i64 %b, i64 %a*/
		float64_mul_propagateFloat64NaNexit16_mux2vi14 = (float64_mul_propagateFloat64NaNexit16_sinki13_reg ? arg_b : arg_a);
end
always @(posedge clk) begin
	/* float64_mul: %propagateFloat64NaN.exit16*/
	/*   %.mux2.v.i14 = select i1 %.sink.i13, i64 %b, i64 %a*/
	if ((cur_state == LEGUP_F_float64_mul_BB_propagateFloat64NaNexit16_13)) begin
		float64_mul_propagateFloat64NaNexit16_mux2vi14_reg <= float64_mul_propagateFloat64NaNexit16_mux2vi14;
		if (start == 1'b0 && ^(float64_mul_propagateFloat64NaNexit16_mux2vi14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_propagateFloat64NaNexit16_mux2vi14_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %propagateFloat64NaN.exit16*/
	/*   %.mux2.i15 = or i64 %.mux2.v.i14, 2251799813685248*/
		float64_mul_propagateFloat64NaNexit16_mux2i15 = (float64_mul_propagateFloat64NaNexit16_mux2vi14 | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* float64_mul: %propagateFloat64NaN.exit16*/
	/*   %.mux2.i15 = or i64 %.mux2.v.i14, 2251799813685248*/
	if ((cur_state == LEGUP_F_float64_mul_BB_propagateFloat64NaNexit16_13)) begin
		float64_mul_propagateFloat64NaNexit16_mux2i15_reg <= float64_mul_propagateFloat64NaNexit16_mux2i15;
		if (start == 1'b0 && ^(float64_mul_propagateFloat64NaNexit16_mux2i15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_propagateFloat64NaNexit16_mux2i15_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %34*/
	/*   %35 = zext i32 %6 to i64*/
		float64_mul_34_35 = float64_mul_0_6_reg;
end
always @(posedge clk) begin
	/* float64_mul: %34*/
	/*   %35 = zext i32 %6 to i64*/
	if ((cur_state == LEGUP_F_float64_mul_BB__34_14)) begin
		float64_mul_34_35_reg <= float64_mul_34_35;
		if (start == 1'b0 && ^(float64_mul_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_34_35_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %34*/
	/*   %36 = or i64 %35, %4*/
		float64_mul_34_36 = (float64_mul_34_35 | float64_mul_0_4_reg);
end
always @(posedge clk) begin
	/* float64_mul: %34*/
	/*   %36 = or i64 %35, %4*/
	if ((cur_state == LEGUP_F_float64_mul_BB__34_14)) begin
		float64_mul_34_36_reg <= float64_mul_34_36;
		if (start == 1'b0 && ^(float64_mul_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_34_36_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %34*/
	/*   %37 = icmp eq i64 %36, 0*/
		float64_mul_34_37 = (float64_mul_34_36 == 64'd0);
end
always @(posedge clk) begin
	/* float64_mul: %34*/
	/*   %37 = icmp eq i64 %36, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__34_14)) begin
		float64_mul_34_37_reg <= float64_mul_34_37;
		if (start == 1'b0 && ^(float64_mul_34_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_34_37_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %38*/
	/*   %39 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		float64_mul_38_39 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* float64_mul: %38*/
	/*   %39 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__38_17)) begin
		float64_mul_38_39_reg <= float64_mul_38_39;
		if (start == 1'b0 && ^(float64_mul_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_38_39_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %38*/
	/*   %40 = or i32 %39, 16*/
		float64_mul_38_40 = (float64_mul_38_39 | 32'd16);
end
always @(posedge clk) begin
	/* float64_mul: %38*/
	/*   %40 = or i32 %39, 16*/
	if ((cur_state == LEGUP_F_float64_mul_BB__38_17)) begin
		float64_mul_38_40_reg <= float64_mul_38_40;
		if (start == 1'b0 && ^(float64_mul_38_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_38_40_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %41*/
	/*   %42 = shl nuw i64 %8, 63*/
		float64_mul_41_42 = (float64_mul_0_8_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %41*/
	/*   %42 = shl nuw i64 %8, 63*/
	if ((cur_state == LEGUP_F_float64_mul_BB__41_19)) begin
		float64_mul_41_42_reg <= float64_mul_41_42;
		if (start == 1'b0 && ^(float64_mul_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_41_42_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %41*/
	/*   %43 = or i64 %42, 9218868437227405312*/
		float64_mul_41_43 = (float64_mul_41_42 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* float64_mul: %41*/
	/*   %43 = or i64 %42, 9218868437227405312*/
	if ((cur_state == LEGUP_F_float64_mul_BB__41_19)) begin
		float64_mul_41_43_reg <= float64_mul_41_43;
		if (start == 1'b0 && ^(float64_mul_41_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_41_43_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %44*/
	/*   %45 = icmp eq i32 %6, 2047*/
		float64_mul_44_45 = (float64_mul_0_6_reg == 32'd2047);
end
always @(posedge clk) begin
	/* float64_mul: %44*/
	/*   %45 = icmp eq i32 %6, 2047*/
	if ((cur_state == LEGUP_F_float64_mul_BB__44_20)) begin
		float64_mul_44_45_reg <= float64_mul_44_45;
		if (start == 1'b0 && ^(float64_mul_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_44_45_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %46*/
	/*   %47 = icmp eq i64 %4, 0*/
		float64_mul_46_47 = (float64_mul_0_4_reg == 64'd0);
end
always @(posedge clk) begin
	/* float64_mul: %46*/
	/*   %47 = icmp eq i64 %4, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__46_21)) begin
		float64_mul_46_47_reg <= float64_mul_46_47;
		if (start == 1'b0 && ^(float64_mul_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_46_47_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %48*/
	/*   %49 = and i64 %a, 9221120237041090560*/
		float64_mul_48_49 = (arg_a & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* float64_mul: %48*/
	/*   %49 = and i64 %a, 9221120237041090560*/
	if ((cur_state == LEGUP_F_float64_mul_BB__48_22)) begin
		float64_mul_48_49_reg <= float64_mul_48_49;
		if (start == 1'b0 && ^(float64_mul_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_48_49_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %48*/
	/*   %50 = icmp eq i64 %49, 9218868437227405312*/
		float64_mul_48_50 = (float64_mul_48_49 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* float64_mul: %48*/
	/*   %50 = icmp eq i64 %49, 9218868437227405312*/
	if ((cur_state == LEGUP_F_float64_mul_BB__48_22)) begin
		float64_mul_48_50_reg <= float64_mul_48_50;
		if (start == 1'b0 && ^(float64_mul_48_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_48_50_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %51*/
	/*   %52 = and i64 %a, 2251799813685247*/
		float64_mul_51_52 = (arg_a & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* float64_mul: %51*/
	/*   %52 = and i64 %a, 2251799813685247*/
	if ((cur_state == LEGUP_F_float64_mul_BB__51_23)) begin
		float64_mul_51_52_reg <= float64_mul_51_52;
		if (start == 1'b0 && ^(float64_mul_51_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_51_52_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %51*/
	/*   %53 = icmp ne i64 %52, 0*/
		float64_mul_51_53 = (float64_mul_51_52 != 64'd0);
end
always @(posedge clk) begin
	/* float64_mul: %51*/
	/*   %53 = icmp ne i64 %52, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__51_23)) begin
		float64_mul_51_53_reg <= float64_mul_51_53;
		if (start == 1'b0 && ^(float64_mul_51_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_51_53_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i*/
	/*   %54 = phi i1 [ false, %48 ], [ %53, %51 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__48_22) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_48_50 == 1'd0))) begin
		float64_mul_float64_is_signaling_nanexit1i_54 = 1'd0;
	end
	/* float64_mul: %float64_is_signaling_nan.exit1.i*/
	/*   %54 = phi i1 [ false, %48 ], [ %53, %51 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB__51_23) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_float64_is_signaling_nanexit1i_54 = float64_mul_51_53;
	end
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i*/
	/*   %54 = phi i1 [ false, %48 ], [ %53, %51 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__48_22) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_48_50 == 1'd0))) begin
		float64_mul_float64_is_signaling_nanexit1i_54_reg <= float64_mul_float64_is_signaling_nanexit1i_54;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexit1i_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexit1i_54_reg"); $finish; end
	end
	/* float64_mul: %float64_is_signaling_nan.exit1.i*/
	/*   %54 = phi i1 [ false, %48 ], [ %53, %51 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__51_23) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_float64_is_signaling_nanexit1i_54_reg <= float64_mul_float64_is_signaling_nanexit1i_54;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexit1i_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexit1i_54_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i*/
	/*   %55 = trunc i64 %b to i63*/
		float64_mul_float64_is_signaling_nanexit1i_55 = arg_b[62:0];
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i*/
	/*   %55 = trunc i64 %b to i63*/
	if ((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i_24)) begin
		float64_mul_float64_is_signaling_nanexit1i_55_reg <= float64_mul_float64_is_signaling_nanexit1i_55;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexit1i_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexit1i_55_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i*/
	/*   %56 = icmp ugt i63 %55, -4503599627370496*/
		float64_mul_float64_is_signaling_nanexit1i_56 = (float64_mul_float64_is_signaling_nanexit1i_55 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i*/
	/*   %56 = icmp ugt i63 %55, -4503599627370496*/
	if ((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i_24)) begin
		float64_mul_float64_is_signaling_nanexit1i_56_reg <= float64_mul_float64_is_signaling_nanexit1i_56;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexit1i_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexit1i_56_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i*/
	/*   %57 = and i64 %b, 9221120237041090560*/
		float64_mul_float64_is_signaling_nanexit1i_57 = (arg_b & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i*/
	/*   %57 = and i64 %b, 9221120237041090560*/
	if ((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i_24)) begin
		float64_mul_float64_is_signaling_nanexit1i_57_reg <= float64_mul_float64_is_signaling_nanexit1i_57;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexit1i_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexit1i_57_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i*/
	/*   %58 = icmp eq i64 %57, 9218868437227405312*/
		float64_mul_float64_is_signaling_nanexit1i_58 = (float64_mul_float64_is_signaling_nanexit1i_57 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit1.i*/
	/*   %58 = icmp eq i64 %57, 9218868437227405312*/
	if ((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i_24)) begin
		float64_mul_float64_is_signaling_nanexit1i_58_reg <= float64_mul_float64_is_signaling_nanexit1i_58;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexit1i_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexit1i_58_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %59*/
	/*   %60 = and i64 %b, 2251799813685247*/
		float64_mul_59_60 = (arg_b & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* float64_mul: %59*/
	/*   %60 = and i64 %b, 2251799813685247*/
	if ((cur_state == LEGUP_F_float64_mul_BB__59_25)) begin
		float64_mul_59_60_reg <= float64_mul_59_60;
		if (start == 1'b0 && ^(float64_mul_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_59_60_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %59*/
	/*   %61 = icmp ne i64 %60, 0*/
		float64_mul_59_61 = (float64_mul_59_60 != 64'd0);
end
always @(posedge clk) begin
	/* float64_mul: %59*/
	/*   %61 = icmp ne i64 %60, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__59_25)) begin
		float64_mul_59_61_reg <= float64_mul_59_61;
		if (start == 1'b0 && ^(float64_mul_59_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_59_61_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit.i*/
	/*   %62 = phi i1 [ false, %float64_is_signaling_nan.exit1.i ], [ %61, %59 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i_24) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_float64_is_signaling_nanexit1i_58 == 1'd0))) begin
		float64_mul_float64_is_signaling_nanexiti_62 = 1'd0;
	end
	/* float64_mul: %float64_is_signaling_nan.exit.i*/
	/*   %62 = phi i1 [ false, %float64_is_signaling_nan.exit1.i ], [ %61, %59 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB__59_25) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_float64_is_signaling_nanexiti_62 = float64_mul_59_61;
	end
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit.i*/
	/*   %62 = phi i1 [ false, %float64_is_signaling_nan.exit1.i ], [ %61, %59 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexit1i_24) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_float64_is_signaling_nanexit1i_58 == 1'd0))) begin
		float64_mul_float64_is_signaling_nanexiti_62_reg <= float64_mul_float64_is_signaling_nanexiti_62;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexiti_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexiti_62_reg"); $finish; end
	end
	/* float64_mul: %float64_is_signaling_nan.exit.i*/
	/*   %62 = phi i1 [ false, %float64_is_signaling_nan.exit1.i ], [ %61, %59 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__59_25) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_float64_is_signaling_nanexiti_62_reg <= float64_mul_float64_is_signaling_nanexiti_62;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexiti_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexiti_62_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %float64_is_signaling_nan.exit.i*/
	/*   %63 = or i1 %54, %62*/
		float64_mul_float64_is_signaling_nanexiti_63 = (float64_mul_float64_is_signaling_nanexit1i_54_reg | float64_mul_float64_is_signaling_nanexiti_62_reg);
end
always @(posedge clk) begin
	/* float64_mul: %float64_is_signaling_nan.exit.i*/
	/*   %63 = or i1 %54, %62*/
	if ((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti_26)) begin
		float64_mul_float64_is_signaling_nanexiti_63_reg <= float64_mul_float64_is_signaling_nanexiti_63;
		if (start == 1'b0 && ^(float64_mul_float64_is_signaling_nanexiti_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_float64_is_signaling_nanexiti_63_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %.thread.i*/
	/*   %64 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		float64_mul_threadi_64 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* float64_mul: %.thread.i*/
	/*   %64 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi_29)) begin
		float64_mul_threadi_64_reg <= float64_mul_threadi_64;
		if (start == 1'b0 && ^(float64_mul_threadi_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_threadi_64_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %.thread.i*/
	/*   %65 = or i32 %64, 16*/
		float64_mul_threadi_65 = (float64_mul_threadi_64 | 32'd16);
end
always @(posedge clk) begin
	/* float64_mul: %.thread.i*/
	/*   %65 = or i32 %64, 16*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi_29)) begin
		float64_mul_threadi_65_reg <= float64_mul_threadi_65;
		if (start == 1'b0 && ^(float64_mul_threadi_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_threadi_65_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %propagateFloat64NaN.exit*/
	/*   %.sink.i = phi i1 [ %62, %.thread.i ], [ %56, %float64_is_signaling_nan.exit.i ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti_26) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_float64_is_signaling_nanexiti_63 == 1'd0))) begin
		float64_mul_propagateFloat64NaNexit_sinki = float64_mul_float64_is_signaling_nanexit1i_56_reg;
	end
	/* float64_mul: %propagateFloat64NaN.exit*/
	/*   %.sink.i = phi i1 [ %62, %.thread.i ], [ %56, %float64_is_signaling_nan.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB_threadi_30) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_propagateFloat64NaNexit_sinki = float64_mul_float64_is_signaling_nanexiti_62_reg;
	end
end
always @(posedge clk) begin
	/* float64_mul: %propagateFloat64NaN.exit*/
	/*   %.sink.i = phi i1 [ %62, %.thread.i ], [ %56, %float64_is_signaling_nan.exit.i ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB_float64_is_signaling_nanexiti_26) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_float64_is_signaling_nanexiti_63 == 1'd0))) begin
		float64_mul_propagateFloat64NaNexit_sinki_reg <= float64_mul_propagateFloat64NaNexit_sinki;
		if (start == 1'b0 && ^(float64_mul_propagateFloat64NaNexit_sinki) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_propagateFloat64NaNexit_sinki_reg"); $finish; end
	end
	/* float64_mul: %propagateFloat64NaN.exit*/
	/*   %.sink.i = phi i1 [ %62, %.thread.i ], [ %56, %float64_is_signaling_nan.exit.i ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB_threadi_30) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_propagateFloat64NaNexit_sinki_reg <= float64_mul_propagateFloat64NaNexit_sinki;
		if (start == 1'b0 && ^(float64_mul_propagateFloat64NaNexit_sinki) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_propagateFloat64NaNexit_sinki_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %propagateFloat64NaN.exit*/
	/*   %.mux2.v.i = select i1 %.sink.i, i64 %b, i64 %a*/
		float64_mul_propagateFloat64NaNexit_mux2vi = (float64_mul_propagateFloat64NaNexit_sinki_reg ? arg_b : arg_a);
end
always @(posedge clk) begin
	/* float64_mul: %propagateFloat64NaN.exit*/
	/*   %.mux2.v.i = select i1 %.sink.i, i64 %b, i64 %a*/
	if ((cur_state == LEGUP_F_float64_mul_BB_propagateFloat64NaNexit_31)) begin
		float64_mul_propagateFloat64NaNexit_mux2vi_reg <= float64_mul_propagateFloat64NaNexit_mux2vi;
		if (start == 1'b0 && ^(float64_mul_propagateFloat64NaNexit_mux2vi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_propagateFloat64NaNexit_mux2vi_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %propagateFloat64NaN.exit*/
	/*   %.mux2.i = or i64 %.mux2.v.i, 2251799813685248*/
		float64_mul_propagateFloat64NaNexit_mux2i = (float64_mul_propagateFloat64NaNexit_mux2vi | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* float64_mul: %propagateFloat64NaN.exit*/
	/*   %.mux2.i = or i64 %.mux2.v.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_float64_mul_BB_propagateFloat64NaNexit_31)) begin
		float64_mul_propagateFloat64NaNexit_mux2i_reg <= float64_mul_propagateFloat64NaNexit_mux2i;
		if (start == 1'b0 && ^(float64_mul_propagateFloat64NaNexit_mux2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_propagateFloat64NaNexit_mux2i_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %66*/
	/*   %67 = zext i32 %3 to i64*/
		float64_mul_66_67 = float64_mul_0_3_reg;
end
always @(posedge clk) begin
	/* float64_mul: %66*/
	/*   %67 = zext i32 %3 to i64*/
	if ((cur_state == LEGUP_F_float64_mul_BB__66_32)) begin
		float64_mul_66_67_reg <= float64_mul_66_67;
		if (start == 1'b0 && ^(float64_mul_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_66_67_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %66*/
	/*   %68 = or i64 %67, %1*/
		float64_mul_66_68 = (float64_mul_66_67 | float64_mul_0_1_reg);
end
always @(posedge clk) begin
	/* float64_mul: %66*/
	/*   %68 = or i64 %67, %1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__66_32)) begin
		float64_mul_66_68_reg <= float64_mul_66_68;
		if (start == 1'b0 && ^(float64_mul_66_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_66_68_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %66*/
	/*   %69 = icmp eq i64 %68, 0*/
		float64_mul_66_69 = (float64_mul_66_68 == 64'd0);
end
always @(posedge clk) begin
	/* float64_mul: %66*/
	/*   %69 = icmp eq i64 %68, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__66_32)) begin
		float64_mul_66_69_reg <= float64_mul_66_69;
		if (start == 1'b0 && ^(float64_mul_66_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_66_69_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %70*/
	/*   %71 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		float64_mul_70_71 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* float64_mul: %70*/
	/*   %71 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__70_35)) begin
		float64_mul_70_71_reg <= float64_mul_70_71;
		if (start == 1'b0 && ^(float64_mul_70_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_70_71_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %70*/
	/*   %72 = or i32 %71, 16*/
		float64_mul_70_72 = (float64_mul_70_71 | 32'd16);
end
always @(posedge clk) begin
	/* float64_mul: %70*/
	/*   %72 = or i32 %71, 16*/
	if ((cur_state == LEGUP_F_float64_mul_BB__70_35)) begin
		float64_mul_70_72_reg <= float64_mul_70_72;
		if (start == 1'b0 && ^(float64_mul_70_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_70_72_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %73*/
	/*   %74 = shl nuw i64 %8, 63*/
		float64_mul_73_74 = (float64_mul_0_8_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %73*/
	/*   %74 = shl nuw i64 %8, 63*/
	if ((cur_state == LEGUP_F_float64_mul_BB__73_37)) begin
		float64_mul_73_74_reg <= float64_mul_73_74;
		if (start == 1'b0 && ^(float64_mul_73_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_73_74_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %73*/
	/*   %75 = or i64 %74, 9218868437227405312*/
		float64_mul_73_75 = (float64_mul_73_74 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* float64_mul: %73*/
	/*   %75 = or i64 %74, 9218868437227405312*/
	if ((cur_state == LEGUP_F_float64_mul_BB__73_37)) begin
		float64_mul_73_75_reg <= float64_mul_73_75;
		if (start == 1'b0 && ^(float64_mul_73_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_73_75_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %76*/
	/*   %77 = icmp eq i32 %3, 0*/
		float64_mul_76_77 = (float64_mul_0_3_reg == 32'd0);
end
always @(posedge clk) begin
	/* float64_mul: %76*/
	/*   %77 = icmp eq i32 %3, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__76_38)) begin
		float64_mul_76_77_reg <= float64_mul_76_77;
		if (start == 1'b0 && ^(float64_mul_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_76_77_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %78*/
	/*   %79 = icmp eq i64 %1, 0*/
		float64_mul_78_79 = (float64_mul_0_1_reg == 64'd0);
end
always @(posedge clk) begin
	/* float64_mul: %78*/
	/*   %79 = icmp eq i64 %1, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__78_39)) begin
		float64_mul_78_79_reg <= float64_mul_78_79;
		if (start == 1'b0 && ^(float64_mul_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_78_79_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %80*/
	/*   %81 = shl nuw i64 %8, 63*/
		float64_mul_80_81 = (float64_mul_0_8_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %80*/
	/*   %81 = shl nuw i64 %8, 63*/
	if ((cur_state == LEGUP_F_float64_mul_BB__80_40)) begin
		float64_mul_80_81_reg <= float64_mul_80_81;
		if (start == 1'b0 && ^(float64_mul_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_80_81_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %82*/
	/*   %83 = icmp ult i64 %1, 4294967296*/
		float64_mul_82_83 = (float64_mul_0_1_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* float64_mul: %82*/
	/*   %83 = icmp ult i64 %1, 4294967296*/
	if ((cur_state == LEGUP_F_float64_mul_BB__82_41)) begin
		float64_mul_82_83_reg <= float64_mul_82_83;
		if (start == 1'b0 && ^(float64_mul_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_82_83_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %82*/
	/*   %84 = lshr i64 %1, 32*/
		float64_mul_82_84 = (float64_mul_0_1_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %82*/
	/*   %84 = lshr i64 %1, 32*/
	if ((cur_state == LEGUP_F_float64_mul_BB__82_41)) begin
		float64_mul_82_84_reg <= float64_mul_82_84;
		if (start == 1'b0 && ^(float64_mul_82_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_82_84_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %82*/
	/*   %a.sink.i.i2 = select i1 %83, i64 %a, i64 %84*/
		float64_mul_82_asinkii2 = (float64_mul_82_83 ? arg_a : float64_mul_82_84);
end
always @(posedge clk) begin
	/* float64_mul: %82*/
	/*   %a.sink.i.i2 = select i1 %83, i64 %a, i64 %84*/
	if ((cur_state == LEGUP_F_float64_mul_BB__82_41)) begin
		float64_mul_82_asinkii2_reg <= float64_mul_82_asinkii2;
		if (start == 1'b0 && ^(float64_mul_82_asinkii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_82_asinkii2_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %82*/
	/*   %shiftCount.0.i.i3 = select i1 %83, i32 32, i32 0*/
		float64_mul_82_shiftCount0ii3 = (float64_mul_82_83 ? 32'd32 : 32'd0);
end
always @(posedge clk) begin
	/* float64_mul: %82*/
	/*   %shiftCount.0.i.i3 = select i1 %83, i32 32, i32 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__82_41)) begin
		float64_mul_82_shiftCount0ii3_reg <= float64_mul_82_shiftCount0ii3;
		if (start == 1'b0 && ^(float64_mul_82_shiftCount0ii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_82_shiftCount0ii3_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %82*/
	/*   %extract.t.i.i4 = trunc i64 %a.sink.i.i2 to i32*/
		float64_mul_82_extracttii4 = float64_mul_82_asinkii2[31:0];
end
always @(posedge clk) begin
	/* float64_mul: %82*/
	/*   %extract.t.i.i4 = trunc i64 %a.sink.i.i2 to i32*/
	if ((cur_state == LEGUP_F_float64_mul_BB__82_41)) begin
		float64_mul_82_extracttii4_reg <= float64_mul_82_extracttii4;
		if (start == 1'b0 && ^(float64_mul_82_extracttii4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_82_extracttii4_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %82*/
	/*   %85 = icmp ult i32 %extract.t.i.i4, 65536*/
		float64_mul_82_85 = (float64_mul_82_extracttii4 < 32'd65536);
end
always @(posedge clk) begin
	/* float64_mul: %82*/
	/*   %85 = icmp ult i32 %extract.t.i.i4, 65536*/
	if ((cur_state == LEGUP_F_float64_mul_BB__82_41)) begin
		float64_mul_82_85_reg <= float64_mul_82_85;
		if (start == 1'b0 && ^(float64_mul_82_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_82_85_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %82*/
	/*   %86 = shl i32 %extract.t.i.i4, 16*/
		float64_mul_82_86 = (float64_mul_82_extracttii4 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* float64_mul: %82*/
	/*   %86 = shl i32 %extract.t.i.i4, 16*/
	if ((cur_state == LEGUP_F_float64_mul_BB__82_41)) begin
		float64_mul_82_86_reg <= float64_mul_82_86;
		if (start == 1'b0 && ^(float64_mul_82_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_82_86_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %82*/
	/*   %.a.i.i.i5 = select i1 %85, i32 %86, i32 %extract.t.i.i4*/
		float64_mul_82_aiii5 = (float64_mul_82_85 ? float64_mul_82_86 : float64_mul_82_extracttii4);
end
always @(posedge clk) begin
	/* float64_mul: %82*/
	/*   %.a.i.i.i5 = select i1 %85, i32 %86, i32 %extract.t.i.i4*/
	if ((cur_state == LEGUP_F_float64_mul_BB__82_41)) begin
		float64_mul_82_aiii5_reg <= float64_mul_82_aiii5;
		if (start == 1'b0 && ^(float64_mul_82_aiii5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_82_aiii5_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %82*/
	/*   %..i.i.i6 = select i1 %85, i32 16, i32 0*/
		float64_mul_82_iii6 = (float64_mul_82_85 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* float64_mul: %82*/
	/*   %..i.i.i6 = select i1 %85, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__82_41)) begin
		float64_mul_82_iii6_reg <= float64_mul_82_iii6;
		if (start == 1'b0 && ^(float64_mul_82_iii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_82_iii6_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %82*/
	/*   %87 = icmp ult i32 %.a.i.i.i5, 16777216*/
		float64_mul_82_87 = (float64_mul_82_aiii5 < 32'd16777216);
end
always @(posedge clk) begin
	/* float64_mul: %82*/
	/*   %87 = icmp ult i32 %.a.i.i.i5, 16777216*/
	if ((cur_state == LEGUP_F_float64_mul_BB__82_41)) begin
		float64_mul_82_87_reg <= float64_mul_82_87;
		if (start == 1'b0 && ^(float64_mul_82_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_82_87_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %88*/
	/*   %89 = or i32 %..i.i.i6, 8*/
		float64_mul_88_89 = (float64_mul_82_iii6_reg | 32'd8);
end
always @(posedge clk) begin
	/* float64_mul: %88*/
	/*   %89 = or i32 %..i.i.i6, 8*/
	if ((cur_state == LEGUP_F_float64_mul_BB__88_42)) begin
		float64_mul_88_89_reg <= float64_mul_88_89;
		if (start == 1'b0 && ^(float64_mul_88_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_88_89_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %88*/
	/*   %90 = shl i32 %.a.i.i.i5, 8*/
		float64_mul_88_90 = (float64_mul_82_aiii5_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* float64_mul: %88*/
	/*   %90 = shl i32 %.a.i.i.i5, 8*/
	if ((cur_state == LEGUP_F_float64_mul_BB__88_42)) begin
		float64_mul_88_90_reg <= float64_mul_88_90;
		if (start == 1'b0 && ^(float64_mul_88_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_88_90_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %.1.i.i.i7 = phi i32 [ %90, %88 ], [ %.a.i.i.i5, %82 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__82_41) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_82_87 == 1'd0))) begin
		float64_mul_normalizeFloat64Subnormalexit9_1iii7 = float64_mul_82_aiii5;
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %.1.i.i.i7 = phi i32 [ %90, %88 ], [ %.a.i.i.i5, %82 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB__88_42) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_normalizeFloat64Subnormalexit9_1iii7 = float64_mul_88_90;
	end
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %.1.i.i.i7 = phi i32 [ %90, %88 ], [ %.a.i.i.i5, %82 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__82_41) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_82_87 == 1'd0))) begin
		float64_mul_normalizeFloat64Subnormalexit9_1iii7_reg <= float64_mul_normalizeFloat64Subnormalexit9_1iii7;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_1iii7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_1iii7_reg"); $finish; end
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %.1.i.i.i7 = phi i32 [ %90, %88 ], [ %.a.i.i.i5, %82 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__88_42) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_normalizeFloat64Subnormalexit9_1iii7_reg <= float64_mul_normalizeFloat64Subnormalexit9_1iii7;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_1iii7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_1iii7_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %shiftCount.1.i.i.i8 = phi i32 [ %89, %88 ], [ %..i.i.i6, %82 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__82_41) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_82_87 == 1'd0))) begin
		float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8 = float64_mul_82_iii6;
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %shiftCount.1.i.i.i8 = phi i32 [ %89, %88 ], [ %..i.i.i6, %82 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB__88_42) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8 = float64_mul_88_89;
	end
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %shiftCount.1.i.i.i8 = phi i32 [ %89, %88 ], [ %..i.i.i6, %82 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__82_41) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_82_87 == 1'd0))) begin
		float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8_reg <= float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8_reg"); $finish; end
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %shiftCount.1.i.i.i8 = phi i32 [ %89, %88 ], [ %..i.i.i6, %82 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__88_42) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8_reg <= float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %91 = lshr i32 %.1.i.i.i7, 24*/
		float64_mul_normalizeFloat64Subnormalexit9_91 = (float64_mul_normalizeFloat64Subnormalexit9_1iii7_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %91 = lshr i32 %.1.i.i.i7, 24*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_43)) begin
		float64_mul_normalizeFloat64Subnormalexit9_91_reg <= float64_mul_normalizeFloat64Subnormalexit9_91;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_91_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %92 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %91*/
		float64_mul_normalizeFloat64Subnormalexit9_92 = (`TAG_g_countLeadingZeros32countLeadingZerosHigh_a | (4 * float64_mul_normalizeFloat64Subnormalexit9_91));
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %92 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %91*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_43)) begin
		float64_mul_normalizeFloat64Subnormalexit9_92_reg <= float64_mul_normalizeFloat64Subnormalexit9_92;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_92_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %93 = load i32* %92, align 4, !tbaa !1*/
		float64_mul_normalizeFloat64Subnormalexit9_93 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %93 = load i32* %92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45)) begin
		float64_mul_normalizeFloat64Subnormalexit9_93_reg <= float64_mul_normalizeFloat64Subnormalexit9_93;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_93_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %94 = add nsw i32 %shiftCount.1.i.i.i8, %shiftCount.0.i.i3*/
		float64_mul_normalizeFloat64Subnormalexit9_94 = (float64_mul_normalizeFloat64Subnormalexit9_shiftCount1iii8_reg + float64_mul_82_shiftCount0ii3_reg);
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %94 = add nsw i32 %shiftCount.1.i.i.i8, %shiftCount.0.i.i3*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_43)) begin
		float64_mul_normalizeFloat64Subnormalexit9_94_reg <= float64_mul_normalizeFloat64Subnormalexit9_94;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_94_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %95 = add i32 %94, %93*/
		float64_mul_normalizeFloat64Subnormalexit9_95 = (float64_mul_normalizeFloat64Subnormalexit9_94_reg + float64_mul_normalizeFloat64Subnormalexit9_93);
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %95 = add i32 %94, %93*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45)) begin
		float64_mul_normalizeFloat64Subnormalexit9_95_reg <= float64_mul_normalizeFloat64Subnormalexit9_95;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_95_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %96 = add nsw i32 %95, -11*/
		float64_mul_normalizeFloat64Subnormalexit9_96 = (float64_mul_normalizeFloat64Subnormalexit9_95 + -32'd11);
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %96 = add nsw i32 %95, -11*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45)) begin
		float64_mul_normalizeFloat64Subnormalexit9_96_reg <= float64_mul_normalizeFloat64Subnormalexit9_96;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_96_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %97 = zext i32 %96 to i64*/
		float64_mul_normalizeFloat64Subnormalexit9_97 = float64_mul_normalizeFloat64Subnormalexit9_96;
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %97 = zext i32 %96 to i64*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45)) begin
		float64_mul_normalizeFloat64Subnormalexit9_97_reg <= float64_mul_normalizeFloat64Subnormalexit9_97;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_97_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %98 = shl i64 %1, %97*/
		float64_mul_normalizeFloat64Subnormalexit9_98 = (float64_mul_0_1_reg <<< (float64_mul_normalizeFloat64Subnormalexit9_97 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %98 = shl i64 %1, %97*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45)) begin
		float64_mul_normalizeFloat64Subnormalexit9_98_reg <= float64_mul_normalizeFloat64Subnormalexit9_98;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_98_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %99 = sub i32 12, %95*/
		float64_mul_normalizeFloat64Subnormalexit9_99 = (32'd12 - float64_mul_normalizeFloat64Subnormalexit9_95);
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %99 = sub i32 12, %95*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45)) begin
		float64_mul_normalizeFloat64Subnormalexit9_99_reg <= float64_mul_normalizeFloat64Subnormalexit9_99;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit9_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit9_99_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %100*/
	/*   %101 = phi i32 [ %99, %normalizeFloat64Subnormal.exit9 ], [ %3, %76 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__76_38) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_76_77 == 1'd0))) begin
		float64_mul_100_101 = float64_mul_0_3_reg;
	end
	/* float64_mul: %100*/
	/*   %101 = phi i32 [ %99, %normalizeFloat64Subnormal.exit9 ], [ %3, %76 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_100_101 = float64_mul_normalizeFloat64Subnormalexit9_99;
	end
end
always @(posedge clk) begin
	/* float64_mul: %100*/
	/*   %101 = phi i32 [ %99, %normalizeFloat64Subnormal.exit9 ], [ %3, %76 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__76_38) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_76_77 == 1'd0))) begin
		float64_mul_100_101_reg <= float64_mul_100_101;
		if (start == 1'b0 && ^(float64_mul_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_100_101_reg"); $finish; end
	end
	/* float64_mul: %100*/
	/*   %101 = phi i32 [ %99, %normalizeFloat64Subnormal.exit9 ], [ %3, %76 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_100_101_reg <= float64_mul_100_101;
		if (start == 1'b0 && ^(float64_mul_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_100_101_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %100*/
	/*   %102 = phi i64 [ %98, %normalizeFloat64Subnormal.exit9 ], [ %1, %76 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__76_38) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_76_77 == 1'd0))) begin
		float64_mul_100_102 = float64_mul_0_1_reg;
	end
	/* float64_mul: %100*/
	/*   %102 = phi i64 [ %98, %normalizeFloat64Subnormal.exit9 ], [ %1, %76 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_100_102 = float64_mul_normalizeFloat64Subnormalexit9_98;
	end
end
always @(posedge clk) begin
	/* float64_mul: %100*/
	/*   %102 = phi i64 [ %98, %normalizeFloat64Subnormal.exit9 ], [ %1, %76 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__76_38) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_76_77 == 1'd0))) begin
		float64_mul_100_102_reg <= float64_mul_100_102;
		if (start == 1'b0 && ^(float64_mul_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_100_102_reg"); $finish; end
	end
	/* float64_mul: %100*/
	/*   %102 = phi i64 [ %98, %normalizeFloat64Subnormal.exit9 ], [ %1, %76 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_45) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_100_102_reg <= float64_mul_100_102;
		if (start == 1'b0 && ^(float64_mul_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_100_102_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %100*/
	/*   %103 = icmp eq i32 %6, 0*/
		float64_mul_100_103 = (float64_mul_0_6_reg == 32'd0);
end
always @(posedge clk) begin
	/* float64_mul: %100*/
	/*   %103 = icmp eq i32 %6, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__100_46)) begin
		float64_mul_100_103_reg <= float64_mul_100_103;
		if (start == 1'b0 && ^(float64_mul_100_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_100_103_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %104*/
	/*   %105 = icmp eq i64 %4, 0*/
		float64_mul_104_105 = (float64_mul_0_4_reg == 64'd0);
end
always @(posedge clk) begin
	/* float64_mul: %104*/
	/*   %105 = icmp eq i64 %4, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__104_47)) begin
		float64_mul_104_105_reg <= float64_mul_104_105;
		if (start == 1'b0 && ^(float64_mul_104_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_104_105_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %106*/
	/*   %107 = shl nuw i64 %8, 63*/
		float64_mul_106_107 = (float64_mul_0_8_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %106*/
	/*   %107 = shl nuw i64 %8, 63*/
	if ((cur_state == LEGUP_F_float64_mul_BB__106_48)) begin
		float64_mul_106_107_reg <= float64_mul_106_107;
		if (start == 1'b0 && ^(float64_mul_106_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_106_107_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %108*/
	/*   %109 = icmp ult i64 %4, 4294967296*/
		float64_mul_108_109 = (float64_mul_0_4_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* float64_mul: %108*/
	/*   %109 = icmp ult i64 %4, 4294967296*/
	if ((cur_state == LEGUP_F_float64_mul_BB__108_49)) begin
		float64_mul_108_109_reg <= float64_mul_108_109;
		if (start == 1'b0 && ^(float64_mul_108_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_108_109_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %108*/
	/*   %110 = lshr i64 %4, 32*/
		float64_mul_108_110 = (float64_mul_0_4_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %108*/
	/*   %110 = lshr i64 %4, 32*/
	if ((cur_state == LEGUP_F_float64_mul_BB__108_49)) begin
		float64_mul_108_110_reg <= float64_mul_108_110;
		if (start == 1'b0 && ^(float64_mul_108_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_108_110_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %108*/
	/*   %a.sink.i.i = select i1 %109, i64 %b, i64 %110*/
		float64_mul_108_asinkii = (float64_mul_108_109 ? arg_b : float64_mul_108_110);
end
always @(posedge clk) begin
	/* float64_mul: %108*/
	/*   %a.sink.i.i = select i1 %109, i64 %b, i64 %110*/
	if ((cur_state == LEGUP_F_float64_mul_BB__108_49)) begin
		float64_mul_108_asinkii_reg <= float64_mul_108_asinkii;
		if (start == 1'b0 && ^(float64_mul_108_asinkii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_108_asinkii_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %108*/
	/*   %shiftCount.0.i.i = select i1 %109, i32 32, i32 0*/
		float64_mul_108_shiftCount0ii = (float64_mul_108_109 ? 32'd32 : 32'd0);
end
always @(posedge clk) begin
	/* float64_mul: %108*/
	/*   %shiftCount.0.i.i = select i1 %109, i32 32, i32 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__108_49)) begin
		float64_mul_108_shiftCount0ii_reg <= float64_mul_108_shiftCount0ii;
		if (start == 1'b0 && ^(float64_mul_108_shiftCount0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_108_shiftCount0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %108*/
	/*   %extract.t.i.i = trunc i64 %a.sink.i.i to i32*/
		float64_mul_108_extracttii = float64_mul_108_asinkii[31:0];
end
always @(posedge clk) begin
	/* float64_mul: %108*/
	/*   %extract.t.i.i = trunc i64 %a.sink.i.i to i32*/
	if ((cur_state == LEGUP_F_float64_mul_BB__108_49)) begin
		float64_mul_108_extracttii_reg <= float64_mul_108_extracttii;
		if (start == 1'b0 && ^(float64_mul_108_extracttii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_108_extracttii_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %108*/
	/*   %111 = icmp ult i32 %extract.t.i.i, 65536*/
		float64_mul_108_111 = (float64_mul_108_extracttii < 32'd65536);
end
always @(posedge clk) begin
	/* float64_mul: %108*/
	/*   %111 = icmp ult i32 %extract.t.i.i, 65536*/
	if ((cur_state == LEGUP_F_float64_mul_BB__108_49)) begin
		float64_mul_108_111_reg <= float64_mul_108_111;
		if (start == 1'b0 && ^(float64_mul_108_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_108_111_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %108*/
	/*   %112 = shl i32 %extract.t.i.i, 16*/
		float64_mul_108_112 = (float64_mul_108_extracttii <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* float64_mul: %108*/
	/*   %112 = shl i32 %extract.t.i.i, 16*/
	if ((cur_state == LEGUP_F_float64_mul_BB__108_49)) begin
		float64_mul_108_112_reg <= float64_mul_108_112;
		if (start == 1'b0 && ^(float64_mul_108_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_108_112_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %108*/
	/*   %.a.i.i.i = select i1 %111, i32 %112, i32 %extract.t.i.i*/
		float64_mul_108_aiii = (float64_mul_108_111 ? float64_mul_108_112 : float64_mul_108_extracttii);
end
always @(posedge clk) begin
	/* float64_mul: %108*/
	/*   %.a.i.i.i = select i1 %111, i32 %112, i32 %extract.t.i.i*/
	if ((cur_state == LEGUP_F_float64_mul_BB__108_49)) begin
		float64_mul_108_aiii_reg <= float64_mul_108_aiii;
		if (start == 1'b0 && ^(float64_mul_108_aiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_108_aiii_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %108*/
	/*   %..i.i.i = select i1 %111, i32 16, i32 0*/
		float64_mul_108_iii = (float64_mul_108_111 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* float64_mul: %108*/
	/*   %..i.i.i = select i1 %111, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__108_49)) begin
		float64_mul_108_iii_reg <= float64_mul_108_iii;
		if (start == 1'b0 && ^(float64_mul_108_iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_108_iii_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %108*/
	/*   %113 = icmp ult i32 %.a.i.i.i, 16777216*/
		float64_mul_108_113 = (float64_mul_108_aiii < 32'd16777216);
end
always @(posedge clk) begin
	/* float64_mul: %108*/
	/*   %113 = icmp ult i32 %.a.i.i.i, 16777216*/
	if ((cur_state == LEGUP_F_float64_mul_BB__108_49)) begin
		float64_mul_108_113_reg <= float64_mul_108_113;
		if (start == 1'b0 && ^(float64_mul_108_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_108_113_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %114*/
	/*   %115 = or i32 %..i.i.i, 8*/
		float64_mul_114_115 = (float64_mul_108_iii_reg | 32'd8);
end
always @(posedge clk) begin
	/* float64_mul: %114*/
	/*   %115 = or i32 %..i.i.i, 8*/
	if ((cur_state == LEGUP_F_float64_mul_BB__114_50)) begin
		float64_mul_114_115_reg <= float64_mul_114_115;
		if (start == 1'b0 && ^(float64_mul_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_114_115_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %114*/
	/*   %116 = shl i32 %.a.i.i.i, 8*/
		float64_mul_114_116 = (float64_mul_108_aiii_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* float64_mul: %114*/
	/*   %116 = shl i32 %.a.i.i.i, 8*/
	if ((cur_state == LEGUP_F_float64_mul_BB__114_50)) begin
		float64_mul_114_116_reg <= float64_mul_114_116;
		if (start == 1'b0 && ^(float64_mul_114_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_114_116_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %.1.i.i.i = phi i32 [ %116, %114 ], [ %.a.i.i.i, %108 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__108_49) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_108_113 == 1'd0))) begin
		float64_mul_normalizeFloat64Subnormalexit_1iii = float64_mul_108_aiii;
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %.1.i.i.i = phi i32 [ %116, %114 ], [ %.a.i.i.i, %108 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB__114_50) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_normalizeFloat64Subnormalexit_1iii = float64_mul_114_116;
	end
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %.1.i.i.i = phi i32 [ %116, %114 ], [ %.a.i.i.i, %108 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__108_49) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_108_113 == 1'd0))) begin
		float64_mul_normalizeFloat64Subnormalexit_1iii_reg <= float64_mul_normalizeFloat64Subnormalexit_1iii;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_1iii_reg"); $finish; end
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %.1.i.i.i = phi i32 [ %116, %114 ], [ %.a.i.i.i, %108 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__114_50) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_normalizeFloat64Subnormalexit_1iii_reg <= float64_mul_normalizeFloat64Subnormalexit_1iii;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %shiftCount.1.i.i.i = phi i32 [ %115, %114 ], [ %..i.i.i, %108 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__108_49) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_108_113 == 1'd0))) begin
		float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii = float64_mul_108_iii;
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %shiftCount.1.i.i.i = phi i32 [ %115, %114 ], [ %..i.i.i, %108 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB__114_50) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii = float64_mul_114_115;
	end
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %shiftCount.1.i.i.i = phi i32 [ %115, %114 ], [ %..i.i.i, %108 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__108_49) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_108_113 == 1'd0))) begin
		float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii_reg <= float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii_reg"); $finish; end
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %shiftCount.1.i.i.i = phi i32 [ %115, %114 ], [ %..i.i.i, %108 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__114_50) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii_reg <= float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %117 = lshr i32 %.1.i.i.i, 24*/
		float64_mul_normalizeFloat64Subnormalexit_117 = (float64_mul_normalizeFloat64Subnormalexit_1iii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %117 = lshr i32 %.1.i.i.i, 24*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_51)) begin
		float64_mul_normalizeFloat64Subnormalexit_117_reg <= float64_mul_normalizeFloat64Subnormalexit_117;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_117_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %118 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %117*/
		float64_mul_normalizeFloat64Subnormalexit_118 = (`TAG_g_countLeadingZeros32countLeadingZerosHigh_a | (4 * float64_mul_normalizeFloat64Subnormalexit_117));
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %118 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %117*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_51)) begin
		float64_mul_normalizeFloat64Subnormalexit_118_reg <= float64_mul_normalizeFloat64Subnormalexit_118;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_118_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %119 = load i32* %118, align 4, !tbaa !1*/
		float64_mul_normalizeFloat64Subnormalexit_119 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %119 = load i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53)) begin
		float64_mul_normalizeFloat64Subnormalexit_119_reg <= float64_mul_normalizeFloat64Subnormalexit_119;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_119_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %120 = add nsw i32 %shiftCount.1.i.i.i, %shiftCount.0.i.i*/
		float64_mul_normalizeFloat64Subnormalexit_120 = (float64_mul_normalizeFloat64Subnormalexit_shiftCount1iii_reg + float64_mul_108_shiftCount0ii_reg);
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %120 = add nsw i32 %shiftCount.1.i.i.i, %shiftCount.0.i.i*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_51)) begin
		float64_mul_normalizeFloat64Subnormalexit_120_reg <= float64_mul_normalizeFloat64Subnormalexit_120;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_120_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %121 = add i32 %120, %119*/
		float64_mul_normalizeFloat64Subnormalexit_121 = (float64_mul_normalizeFloat64Subnormalexit_120_reg + float64_mul_normalizeFloat64Subnormalexit_119);
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %121 = add i32 %120, %119*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53)) begin
		float64_mul_normalizeFloat64Subnormalexit_121_reg <= float64_mul_normalizeFloat64Subnormalexit_121;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_121_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %122 = add nsw i32 %121, -11*/
		float64_mul_normalizeFloat64Subnormalexit_122 = (float64_mul_normalizeFloat64Subnormalexit_121 + -32'd11);
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %122 = add nsw i32 %121, -11*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53)) begin
		float64_mul_normalizeFloat64Subnormalexit_122_reg <= float64_mul_normalizeFloat64Subnormalexit_122;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_122_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %123 = zext i32 %122 to i64*/
		float64_mul_normalizeFloat64Subnormalexit_123 = float64_mul_normalizeFloat64Subnormalexit_122;
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %123 = zext i32 %122 to i64*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53)) begin
		float64_mul_normalizeFloat64Subnormalexit_123_reg <= float64_mul_normalizeFloat64Subnormalexit_123;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_123_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %124 = shl i64 %4, %123*/
		float64_mul_normalizeFloat64Subnormalexit_124 = (float64_mul_0_4_reg <<< (float64_mul_normalizeFloat64Subnormalexit_123 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %124 = shl i64 %4, %123*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53)) begin
		float64_mul_normalizeFloat64Subnormalexit_124_reg <= float64_mul_normalizeFloat64Subnormalexit_124;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_124_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %125 = sub i32 12, %121*/
		float64_mul_normalizeFloat64Subnormalexit_125 = (32'd12 - float64_mul_normalizeFloat64Subnormalexit_121);
end
always @(posedge clk) begin
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %125 = sub i32 12, %121*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53)) begin
		float64_mul_normalizeFloat64Subnormalexit_125_reg <= float64_mul_normalizeFloat64Subnormalexit_125;
		if (start == 1'b0 && ^(float64_mul_normalizeFloat64Subnormalexit_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_normalizeFloat64Subnormalexit_125_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %127 = phi i32 [ %125, %normalizeFloat64Subnormal.exit ], [ %6, %100 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__100_46) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_100_103 == 1'd0))) begin
		float64_mul_126_127 = float64_mul_0_6_reg;
	end
	/* float64_mul: %126*/
	/*   %127 = phi i32 [ %125, %normalizeFloat64Subnormal.exit ], [ %6, %100 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_126_127 = float64_mul_normalizeFloat64Subnormalexit_125;
	end
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %127 = phi i32 [ %125, %normalizeFloat64Subnormal.exit ], [ %6, %100 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__100_46) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_100_103 == 1'd0))) begin
		float64_mul_126_127_reg <= float64_mul_126_127;
		if (start == 1'b0 && ^(float64_mul_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_127_reg"); $finish; end
	end
	/* float64_mul: %126*/
	/*   %127 = phi i32 [ %125, %normalizeFloat64Subnormal.exit ], [ %6, %100 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_126_127_reg <= float64_mul_126_127;
		if (start == 1'b0 && ^(float64_mul_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_127_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %128 = phi i64 [ %124, %normalizeFloat64Subnormal.exit ], [ %4, %100 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__100_46) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_100_103 == 1'd0))) begin
		float64_mul_126_128 = float64_mul_0_4_reg;
	end
	/* float64_mul: %126*/
	/*   %128 = phi i64 [ %124, %normalizeFloat64Subnormal.exit ], [ %4, %100 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_126_128 = float64_mul_normalizeFloat64Subnormalexit_124;
	end
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %128 = phi i64 [ %124, %normalizeFloat64Subnormal.exit ], [ %4, %100 ]*/
	if ((((cur_state == LEGUP_F_float64_mul_BB__100_46) & (memory_controller_waitrequest == 1'd0)) & (float64_mul_100_103 == 1'd0))) begin
		float64_mul_126_128_reg <= float64_mul_126_128;
		if (start == 1'b0 && ^(float64_mul_126_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_128_reg"); $finish; end
	end
	/* float64_mul: %126*/
	/*   %128 = phi i64 [ %124, %normalizeFloat64Subnormal.exit ], [ %4, %100 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_53) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_126_128_reg <= float64_mul_126_128;
		if (start == 1'b0 && ^(float64_mul_126_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_128_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %129 = add nsw i32 %127, %101*/
		float64_mul_126_129 = (float64_mul_126_127_reg + float64_mul_100_101_reg);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %129 = add nsw i32 %127, %101*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_54)) begin
		float64_mul_126_129_reg <= float64_mul_126_129;
		if (start == 1'b0 && ^(float64_mul_126_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_129_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %130 = shl i64 %102, 10*/
		float64_mul_126_130 = (float64_mul_100_102_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %130 = shl i64 %102, 10*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_54)) begin
		float64_mul_126_130_reg <= float64_mul_126_130;
		if (start == 1'b0 && ^(float64_mul_126_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_130_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %131 = shl i64 %128, 11*/
		float64_mul_126_131 = (float64_mul_126_128_reg <<< (64'd11 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %131 = shl i64 %128, 11*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_54)) begin
		float64_mul_126_131_reg <= float64_mul_126_131;
		if (start == 1'b0 && ^(float64_mul_126_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_131_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %132 = lshr i64 %102, 22*/
		float64_mul_126_132 = (float64_mul_100_102_reg >>> (64'd22 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %132 = lshr i64 %102, 22*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_54)) begin
		float64_mul_126_132_reg <= float64_mul_126_132;
		if (start == 1'b0 && ^(float64_mul_126_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_132_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %133 = and i64 %132, 3221225471*/
		float64_mul_126_133 = (float64_mul_126_132 & 64'd3221225471);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %133 = and i64 %132, 3221225471*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_54)) begin
		float64_mul_126_133_reg <= float64_mul_126_133;
		if (start == 1'b0 && ^(float64_mul_126_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_133_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %134 = or i64 %133, 1073741824*/
		float64_mul_126_134 = (float64_mul_126_133 | 64'd1073741824);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %134 = or i64 %133, 1073741824*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_54)) begin
		float64_mul_126_134_reg <= float64_mul_126_134;
		if (start == 1'b0 && ^(float64_mul_126_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_134_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %135 = lshr i64 %128, 21*/
		float64_mul_126_135 = (float64_mul_126_128_reg >>> (64'd21 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %135 = lshr i64 %128, 21*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_54)) begin
		float64_mul_126_135_reg <= float64_mul_126_135;
		if (start == 1'b0 && ^(float64_mul_126_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_135_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %136 = and i64 %135, 2147483647*/
		float64_mul_126_136 = (float64_mul_126_135 & 64'd2147483647);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %136 = and i64 %135, 2147483647*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_54)) begin
		float64_mul_126_136_reg <= float64_mul_126_136;
		if (start == 1'b0 && ^(float64_mul_126_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_136_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %137 = or i64 %136, 2147483648*/
		float64_mul_126_137 = (float64_mul_126_136 | 64'd2147483648);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %137 = or i64 %136, 2147483648*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_54)) begin
		float64_mul_126_137_reg <= float64_mul_126_137;
		if (start == 1'b0 && ^(float64_mul_126_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_137_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %138 = and i64 %130, 4294966272*/
		float64_mul_126_138 = (float64_mul_126_130 & 64'd4294966272);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %138 = and i64 %130, 4294966272*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_54)) begin
		float64_mul_126_138_reg <= float64_mul_126_138;
		if (start == 1'b0 && ^(float64_mul_126_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_138_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %139 = and i64 %131, 4294965248*/
		float64_mul_126_139 = (float64_mul_126_131 & 64'd4294965248);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %139 = and i64 %131, 4294965248*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_54)) begin
		float64_mul_126_139_reg <= float64_mul_126_139;
		if (start == 1'b0 && ^(float64_mul_126_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_139_reg"); $finish; end
	end
end
always @(*) begin
	float64_mul_126_140 = float64_mul_126_140_stage0_reg;
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %140 = mul i64 %139, %138*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_140_reg <= float64_mul_126_140;
		if (start == 1'b0 && ^(float64_mul_126_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_140_reg"); $finish; end
	end
	/* float64_mul: %126*/
	/*   %140 = mul i64 %139, %138*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_140_reg <= float64_mul_126_140;
		if (start == 1'b0 && ^(float64_mul_126_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_140_reg"); $finish; end
	end
end
always @(*) begin
	float64_mul_126_141 = float64_mul_126_141_stage0_reg;
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %141 = mul i64 %137, %138*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_141_reg <= float64_mul_126_141;
		if (start == 1'b0 && ^(float64_mul_126_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_141_reg"); $finish; end
	end
	/* float64_mul: %126*/
	/*   %141 = mul i64 %137, %138*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_141_reg <= float64_mul_126_141;
		if (start == 1'b0 && ^(float64_mul_126_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_141_reg"); $finish; end
	end
end
always @(*) begin
	float64_mul_126_142 = float64_mul_126_142_stage0_reg;
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %142 = mul i64 %139, %134*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_142_reg <= float64_mul_126_142;
		if (start == 1'b0 && ^(float64_mul_126_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_142_reg"); $finish; end
	end
	/* float64_mul: %126*/
	/*   %142 = mul i64 %139, %134*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_142_reg <= float64_mul_126_142;
		if (start == 1'b0 && ^(float64_mul_126_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_142_reg"); $finish; end
	end
end
always @(*) begin
	float64_mul_126_143 = float64_mul_126_143_stage0_reg;
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %143 = mul i64 %137, %134*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_143_reg <= float64_mul_126_143;
		if (start == 1'b0 && ^(float64_mul_126_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_143_reg"); $finish; end
	end
	/* float64_mul: %126*/
	/*   %143 = mul i64 %137, %134*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_143_reg <= float64_mul_126_143;
		if (start == 1'b0 && ^(float64_mul_126_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_143_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic = zext i64 %141 to i65*/
		float64_mul_126_overflow_intrinsic = float64_mul_126_141;
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic = zext i64 %141 to i65*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_overflow_intrinsic_reg <= float64_mul_126_overflow_intrinsic;
		if (start == 1'b0 && ^(float64_mul_126_overflow_intrinsic) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_overflow_intrinsic_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic1 = zext i64 %142 to i65*/
		float64_mul_126_overflow_intrinsic1 = float64_mul_126_142;
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic1 = zext i64 %142 to i65*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_overflow_intrinsic1_reg <= float64_mul_126_overflow_intrinsic1;
		if (start == 1'b0 && ^(float64_mul_126_overflow_intrinsic1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_overflow_intrinsic1_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic2 = add nuw i65 %overflow_intrinsic, %overflow_intrinsic1*/
		float64_mul_126_overflow_intrinsic2 = (float64_mul_126_overflow_intrinsic + float64_mul_126_overflow_intrinsic1);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic2 = add nuw i65 %overflow_intrinsic, %overflow_intrinsic1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_overflow_intrinsic2_reg <= float64_mul_126_overflow_intrinsic2;
		if (start == 1'b0 && ^(float64_mul_126_overflow_intrinsic2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_overflow_intrinsic2_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64*/
		float64_mul_126_overflow_intrinsic_sum = float64_mul_126_overflow_intrinsic2[63:0];
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_overflow_intrinsic_sum_reg <= float64_mul_126_overflow_intrinsic_sum;
		if (start == 1'b0 && ^(float64_mul_126_overflow_intrinsic_sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_overflow_intrinsic_sum_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %144 = lshr i65 %overflow_intrinsic2, 32*/
		float64_mul_126_144 = (float64_mul_126_overflow_intrinsic2 >>> (65'd32 % 65'd65));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %144 = lshr i65 %overflow_intrinsic2, 32*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_144_reg <= float64_mul_126_144;
		if (start == 1'b0 && ^(float64_mul_126_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_144_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %.tr = trunc i65 %144 to i64*/
		float64_mul_126_tr = float64_mul_126_144[63:0];
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %.tr = trunc i65 %144 to i64*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_tr_reg <= float64_mul_126_tr;
		if (start == 1'b0 && ^(float64_mul_126_tr) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_tr_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %145 = and i64 %.tr, 4294967296*/
		float64_mul_126_145 = (float64_mul_126_tr & 64'd4294967296);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %145 = and i64 %.tr, 4294967296*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_145_reg <= float64_mul_126_145;
		if (start == 1'b0 && ^(float64_mul_126_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_145_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %146 = lshr i64 %overflow_intrinsic_sum, 32*/
		float64_mul_126_146 = (float64_mul_126_overflow_intrinsic_sum >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %146 = lshr i64 %overflow_intrinsic_sum, 32*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_146_reg <= float64_mul_126_146;
		if (start == 1'b0 && ^(float64_mul_126_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_146_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %147 = or i64 %145, %146*/
		float64_mul_126_147 = (float64_mul_126_145_reg | float64_mul_126_146_reg);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %147 = or i64 %145, %146*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_56)) begin
		float64_mul_126_147_reg <= float64_mul_126_147;
		if (start == 1'b0 && ^(float64_mul_126_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_147_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %148 = shl i64 %overflow_intrinsic_sum, 32*/
		float64_mul_126_148 = (float64_mul_126_overflow_intrinsic_sum <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %148 = shl i64 %overflow_intrinsic_sum, 32*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_148_reg <= float64_mul_126_148;
		if (start == 1'b0 && ^(float64_mul_126_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_148_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic4 = zext i64 %140 to i65*/
		float64_mul_126_overflow_intrinsic4 = float64_mul_126_140;
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic4 = zext i64 %140 to i65*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_overflow_intrinsic4_reg <= float64_mul_126_overflow_intrinsic4;
		if (start == 1'b0 && ^(float64_mul_126_overflow_intrinsic4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_overflow_intrinsic4_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic5 = zext i64 %148 to i65*/
		float64_mul_126_overflow_intrinsic5 = float64_mul_126_148;
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic5 = zext i64 %148 to i65*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_55)) begin
		float64_mul_126_overflow_intrinsic5_reg <= float64_mul_126_overflow_intrinsic5;
		if (start == 1'b0 && ^(float64_mul_126_overflow_intrinsic5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_overflow_intrinsic5_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic6 = add nuw i65 %overflow_intrinsic4, %overflow_intrinsic5*/
		float64_mul_126_overflow_intrinsic6 = (float64_mul_126_overflow_intrinsic4_reg + float64_mul_126_overflow_intrinsic5_reg);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic6 = add nuw i65 %overflow_intrinsic4, %overflow_intrinsic5*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_56)) begin
		float64_mul_126_overflow_intrinsic6_reg <= float64_mul_126_overflow_intrinsic6;
		if (start == 1'b0 && ^(float64_mul_126_overflow_intrinsic6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_overflow_intrinsic6_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64*/
		float64_mul_126_overflow_intrinsic_sum7 = float64_mul_126_overflow_intrinsic6[63:0];
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_56)) begin
		float64_mul_126_overflow_intrinsic_sum7_reg <= float64_mul_126_overflow_intrinsic_sum7;
		if (start == 1'b0 && ^(float64_mul_126_overflow_intrinsic_sum7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_overflow_intrinsic_sum7_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic8 = lshr i65 %overflow_intrinsic6, 64*/
		float64_mul_126_overflow_intrinsic8 = (float64_mul_126_overflow_intrinsic6 >>> (65'd64 % 65'd65));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %overflow_intrinsic8 = lshr i65 %overflow_intrinsic6, 64*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_56)) begin
		float64_mul_126_overflow_intrinsic8_reg <= float64_mul_126_overflow_intrinsic8;
		if (start == 1'b0 && ^(float64_mul_126_overflow_intrinsic8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_overflow_intrinsic8_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %149 = trunc i65 %overflow_intrinsic8 to i64*/
		float64_mul_126_149 = float64_mul_126_overflow_intrinsic8[63:0];
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %149 = trunc i65 %overflow_intrinsic8 to i64*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_56)) begin
		float64_mul_126_149_reg <= float64_mul_126_149;
		if (start == 1'b0 && ^(float64_mul_126_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_149_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %150 = add i64 %149, %143*/
		float64_mul_126_150 = (float64_mul_126_149_reg + float64_mul_126_143_reg);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %150 = add i64 %149, %143*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		float64_mul_126_150_reg <= float64_mul_126_150;
		if (start == 1'b0 && ^(float64_mul_126_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_150_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %151 = add i64 %150, %147*/
		float64_mul_126_151 = (float64_mul_126_150 + float64_mul_126_147_reg);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %151 = add i64 %150, %147*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		float64_mul_126_151_reg <= float64_mul_126_151;
		if (start == 1'b0 && ^(float64_mul_126_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_151_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %152 = icmp ne i64 %overflow_intrinsic_sum7, 0*/
		float64_mul_126_152 = (float64_mul_126_overflow_intrinsic_sum7_reg != 64'd0);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %152 = icmp ne i64 %overflow_intrinsic_sum7, 0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		float64_mul_126_152_reg <= float64_mul_126_152;
		if (start == 1'b0 && ^(float64_mul_126_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_152_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %153 = zext i1 %152 to i64*/
		float64_mul_126_153 = float64_mul_126_152;
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %153 = zext i1 %152 to i64*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		float64_mul_126_153_reg <= float64_mul_126_153;
		if (start == 1'b0 && ^(float64_mul_126_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_153_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %154 = or i64 %151, %153*/
		float64_mul_126_154 = (float64_mul_126_151 | float64_mul_126_153);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %154 = or i64 %151, %153*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		float64_mul_126_154_reg <= float64_mul_126_154;
		if (start == 1'b0 && ^(float64_mul_126_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_154_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %155 = shl i64 %154, 1*/
		float64_mul_126_155 = (float64_mul_126_154 <<< (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %155 = shl i64 %154, 1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		float64_mul_126_155_reg <= float64_mul_126_155;
		if (start == 1'b0 && ^(float64_mul_126_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_155_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %156 = icmp sgt i64 %155, -1*/
		float64_mul_126_156 = ($signed(float64_mul_126_155) > $signed(-64'd1));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %156 = icmp sgt i64 %155, -1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		float64_mul_126_156_reg <= float64_mul_126_156;
		if (start == 1'b0 && ^(float64_mul_126_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_156_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %. = select i1 %156, i64 %155, i64 %154*/
		float64_mul_126_ = (float64_mul_126_156 ? float64_mul_126_155 : float64_mul_126_154);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %. = select i1 %156, i64 %155, i64 %154*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		float64_mul_126__reg <= float64_mul_126_;
		if (start == 1'b0 && ^(float64_mul_126_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126__reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %.18.v = select i1 %156, i32 -1024, i32 -1023*/
		float64_mul_126_18v = (float64_mul_126_156 ? -32'd1024 : -32'd1023);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %.18.v = select i1 %156, i32 -1024, i32 -1023*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		float64_mul_126_18v_reg <= float64_mul_126_18v;
		if (start == 1'b0 && ^(float64_mul_126_18v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_18v_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %.18 = add i32 %129, %.18.v*/
		float64_mul_126_18 = (float64_mul_126_129_reg + float64_mul_126_18v);
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %.18 = add i32 %129, %.18.v*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		float64_mul_126_18_reg <= float64_mul_126_18;
		if (start == 1'b0 && ^(float64_mul_126_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_18_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
		float64_mul_126_157 = roundAndPackFloat64_return_val_reg;
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		float64_mul_126_157_reg <= float64_mul_126_157;
		if (start == 1'b0 && ^(float64_mul_126_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_126_157_reg"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB_propagateFloat64NaNexit16_13) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0 = float64_mul_propagateFloat64NaNexit16_mux2i15;
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	else if (((cur_state == LEGUP_F_float64_mul_BB__38_18) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0 = 64'd9223372036854775807;
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	else if (((cur_state == LEGUP_F_float64_mul_BB__41_19) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0 = float64_mul_41_43;
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	else if (((cur_state == LEGUP_F_float64_mul_BB_propagateFloat64NaNexit_31) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0 = float64_mul_propagateFloat64NaNexit_mux2i;
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	else if (((cur_state == LEGUP_F_float64_mul_BB__70_36) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0 = 64'd9223372036854775807;
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	else if (((cur_state == LEGUP_F_float64_mul_BB__73_37) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0 = float64_mul_73_75;
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	else if (((cur_state == LEGUP_F_float64_mul_BB__80_40) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0 = float64_mul_80_81;
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	else if (((cur_state == LEGUP_F_float64_mul_BB__106_48) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0 = float64_mul_106_107;
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	else /* if (((cur_state == LEGUP_F_float64_mul_BB__126_59) & (memory_controller_waitrequest == 1'd0))) */ begin
		float64_mul_158_0 = float64_mul_126_157_reg;
	end
end
always @(posedge clk) begin
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB_propagateFloat64NaNexit16_13) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0_reg <= float64_mul_158_0;
		if (start == 1'b0 && ^(float64_mul_158_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_158_0_reg"); $finish; end
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__38_18) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0_reg <= float64_mul_158_0;
		if (start == 1'b0 && ^(float64_mul_158_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_158_0_reg"); $finish; end
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__41_19) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0_reg <= float64_mul_158_0;
		if (start == 1'b0 && ^(float64_mul_158_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_158_0_reg"); $finish; end
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB_propagateFloat64NaNexit_31) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0_reg <= float64_mul_158_0;
		if (start == 1'b0 && ^(float64_mul_158_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_158_0_reg"); $finish; end
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__70_36) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0_reg <= float64_mul_158_0;
		if (start == 1'b0 && ^(float64_mul_158_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_158_0_reg"); $finish; end
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__73_37) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0_reg <= float64_mul_158_0;
		if (start == 1'b0 && ^(float64_mul_158_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_158_0_reg"); $finish; end
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__80_40) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0_reg <= float64_mul_158_0;
		if (start == 1'b0 && ^(float64_mul_158_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_158_0_reg"); $finish; end
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__106_48) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0_reg <= float64_mul_158_0;
		if (start == 1'b0 && ^(float64_mul_158_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_158_0_reg"); $finish; end
	end
	/* float64_mul: %158*/
	/*   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]*/
	if (((cur_state == LEGUP_F_float64_mul_BB__126_59) & (memory_controller_waitrequest == 1'd0))) begin
		float64_mul_158_0_reg <= float64_mul_158_0;
		if (start == 1'b0 && ^(float64_mul_158_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_158_0_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		roundAndPackFloat64_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		roundAndPackFloat64_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		roundAndPackFloat64_arg_zSign <= float64_mul_0_9_reg;
		if (start == 1'b0 && ^(float64_mul_0_9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSign"); $finish; end
	end
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		roundAndPackFloat64_arg_zExp <= float64_mul_126_18;
		if (start == 1'b0 && ^(float64_mul_126_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zExp"); $finish; end
	end
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__126_57)) begin
		roundAndPackFloat64_arg_zSig <= float64_mul_126_;
		if (start == 1'b0 && ^(float64_mul_126_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSig"); $finish; end
	end
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
		roundAndPackFloat64_memory_controller_out_a = memory_controller_out_a;
end
always @(*) begin
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
		roundAndPackFloat64_memory_controller_out_b = memory_controller_out_b;
end
always @(*) begin
	roundAndPackFloat64_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	roundAndPackFloat64_finish_final = roundAndPackFloat64_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_float64_mul_BB__126_57))) begin
		roundAndPackFloat64_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_float64_mul_BB__126_57))) begin
		roundAndPackFloat64_return_val_reg <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_return_val_reg <= roundAndPackFloat64_return_val;
		if (start == 1'b0 && ^(roundAndPackFloat64_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	lpm_mult_float64_mul_126_140_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %140 = mul i64 %139, %138*/
	if ((lpm_mult_float64_mul_126_140_en == 1'd1)) begin
		float64_mul_126_140_stage0_reg <= (float64_mul_126_139 * float64_mul_126_138);
	end
end
always @(*) begin
	lpm_mult_float64_mul_126_141_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %141 = mul i64 %137, %138*/
	if ((lpm_mult_float64_mul_126_141_en == 1'd1)) begin
		float64_mul_126_141_stage0_reg <= (float64_mul_126_137 * float64_mul_126_138);
	end
end
always @(*) begin
	lpm_mult_float64_mul_126_142_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %142 = mul i64 %139, %134*/
	if ((lpm_mult_float64_mul_126_142_en == 1'd1)) begin
		float64_mul_126_142_stage0_reg <= (float64_mul_126_139 * float64_mul_126_134);
	end
end
always @(*) begin
	lpm_mult_float64_mul_126_143_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* float64_mul: %126*/
	/*   %143 = mul i64 %137, %134*/
	if ((lpm_mult_float64_mul_126_143_en == 1'd1)) begin
		float64_mul_126_143_stage0_reg <= (float64_mul_126_137 * float64_mul_126_134);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* float64_mul: %158*/
	/*   ret i64 %.0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__158_60)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* float64_mul: %.thread.i12*/
	/*   %32 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi12_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* float64_mul: %.thread.i12*/
	/*   store i32 %33, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi12_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* float64_mul: %38*/
	/*   %39 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__38_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* float64_mul: %38*/
	/*   store i32 %40, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__38_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* float64_mul: %.thread.i*/
	/*   %64 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* float64_mul: %.thread.i*/
	/*   store i32 %65, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* float64_mul: %70*/
	/*   %71 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__70_33)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* float64_mul: %70*/
	/*   store i32 %72, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__70_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %93 = load i32* %92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %119 = load i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_51)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* float64_mul: %.thread.i12*/
	/*   %32 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi12_9)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* float64_mul: %.thread.i12*/
	/*   store i32 %33, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi12_11)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* float64_mul: %38*/
	/*   %39 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__38_15)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* float64_mul: %38*/
	/*   store i32 %40, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__38_17)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* float64_mul: %.thread.i*/
	/*   %64 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi_27)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* float64_mul: %.thread.i*/
	/*   store i32 %65, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi_29)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* float64_mul: %70*/
	/*   %71 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__70_33)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* float64_mul: %70*/
	/*   store i32 %72, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__70_35)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %93 = load i32* %92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_43)) begin
		memory_controller_address_a = float64_mul_normalizeFloat64Subnormalexit9_92;
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %119 = load i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_51)) begin
		memory_controller_address_a = float64_mul_normalizeFloat64Subnormalexit_118;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* float64_mul: %.thread.i12*/
	/*   %32 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi12_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* float64_mul: %.thread.i12*/
	/*   store i32 %33, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi12_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* float64_mul: %38*/
	/*   %39 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__38_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* float64_mul: %38*/
	/*   store i32 %40, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__38_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* float64_mul: %.thread.i*/
	/*   %64 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi_27)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* float64_mul: %.thread.i*/
	/*   store i32 %65, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi_29)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* float64_mul: %70*/
	/*   %71 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__70_33)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* float64_mul: %70*/
	/*   store i32 %72, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__70_35)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %93 = load i32* %92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_43)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %119 = load i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_51)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* float64_mul: %.thread.i12*/
	/*   store i32 %33, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi12_11)) begin
		memory_controller_in_a = float64_mul_threadi12_33;
	end
	/* float64_mul: %38*/
	/*   store i32 %40, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__38_17)) begin
		memory_controller_in_a = float64_mul_38_40;
	end
	/* float64_mul: %.thread.i*/
	/*   store i32 %65, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi_29)) begin
		memory_controller_in_a = float64_mul_threadi_65;
	end
	/* float64_mul: %70*/
	/*   store i32 %72, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__70_35)) begin
		memory_controller_in_a = float64_mul_70_72;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* float64_mul: %.thread.i12*/
	/*   %32 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi12_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* float64_mul: %.thread.i12*/
	/*   store i32 %33, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi12_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* float64_mul: %38*/
	/*   %39 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__38_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* float64_mul: %38*/
	/*   store i32 %40, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__38_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* float64_mul: %.thread.i*/
	/*   %64 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* float64_mul: %.thread.i*/
	/*   store i32 %65, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_threadi_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* float64_mul: %70*/
	/*   %71 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__70_33)) begin
		memory_controller_size_a = 2'd2;
	end
	/* float64_mul: %70*/
	/*   store i32 %72, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB__70_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit9*/
	/*   %93 = load i32* %92, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit9_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* float64_mul: %normalizeFloat64Subnormal.exit*/
	/*   %119 = load i32* %118, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_float64_mul_BB_normalizeFloat64Subnormalexit_51)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* float64_mul: %126*/
	/*   %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* float64_mul: %158*/
	/*   ret i64 %.0*/
	if ((cur_state == LEGUP_F_float64_mul_BB__158_60)) begin
		return_val <= float64_mul_158_0_reg;
		if (start == 1'b0 && ^(float64_mul_158_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_main_BB__1_1 = 9'd1;
parameter [8:0] LEGUP_F_main_BB__1_2 = 9'd2;
parameter [8:0] LEGUP_F_main_BB__1_4 = 9'd4;
parameter [8:0] LEGUP_F_main_BB__5_5 = 9'd5;
parameter [8:0] LEGUP_F_main_BB__5_7 = 9'd7;
parameter [8:0] LEGUP_F_main_BB__12_8 = 9'd8;
parameter [8:0] LEGUP_F_main_BB__19_9 = 9'd9;
parameter [8:0] LEGUP_F_main_BB_countLeadingZeros32exitii_10 = 9'd10;
parameter [8:0] LEGUP_F_main_BB_countLeadingZeros32exitii_11 = 9'd11;
parameter [8:0] LEGUP_F_main_BB_countLeadingZeros32exitii_12 = 9'd12;
parameter [8:0] LEGUP_F_main_BB_int32_to_float64exiti_13 = 9'd13;
parameter [8:0] LEGUP_F_main_BB__47_14 = 9'd14;
parameter [8:0] LEGUP_F_main_BB__49_15 = 9'd15;
parameter [8:0] LEGUP_F_main_BB__52_16 = 9'd16;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i17ii_17 = 9'd17;
parameter [8:0] LEGUP_F_main_BB__60_18 = 9'd18;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti18ii_19 = 9'd19;
parameter [8:0] LEGUP_F_main_BB_threadi19ii_20 = 9'd20;
parameter [8:0] LEGUP_F_main_BB_threadi19ii_21 = 9'd21;
parameter [8:0] LEGUP_F_main_BB_threadi19ii_22 = 9'd22;
parameter [8:0] LEGUP_F_main_BB_threadi19ii_23 = 9'd23;
parameter [8:0] LEGUP_F_main_BB_propagateFloat64NaNexit23ii_24 = 9'd24;
parameter [8:0] LEGUP_F_main_BB__67_25 = 9'd25;
parameter [8:0] LEGUP_F_main_BB__69_26 = 9'd26;
parameter [8:0] LEGUP_F_main_BB__71_27 = 9'd27;
parameter [8:0] LEGUP_F_main_BB__74_28 = 9'd28;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_29 = 9'd29;
parameter [8:0] LEGUP_F_main_BB__82_30 = 9'd30;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_31 = 9'd31;
parameter [8:0] LEGUP_F_main_BB_threadi12ii_32 = 9'd32;
parameter [8:0] LEGUP_F_main_BB_threadi12ii_33 = 9'd33;
parameter [8:0] LEGUP_F_main_BB_threadi12ii_34 = 9'd34;
parameter [8:0] LEGUP_F_main_BB_threadi12ii_35 = 9'd35;
parameter [8:0] LEGUP_F_main_BB_propagateFloat64NaNexit16ii_36 = 9'd36;
parameter [8:0] LEGUP_F_main_BB__89_37 = 9'd37;
parameter [8:0] LEGUP_F_main_BB__89_38 = 9'd38;
parameter [8:0] LEGUP_F_main_BB__89_39 = 9'd39;
parameter [8:0] LEGUP_F_main_BB__89_40 = 9'd40;
parameter [8:0] LEGUP_F_main_BB__92_41 = 9'd41;
parameter [8:0] LEGUP_F_main_BB__95_42 = 9'd42;
parameter [8:0] LEGUP_F_main_BB__96_43 = 9'd43;
parameter [8:0] LEGUP_F_main_BB__98_44 = 9'd44;
parameter [8:0] LEGUP_F_main_BB__101_45 = 9'd45;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_46 = 9'd46;
parameter [8:0] LEGUP_F_main_BB__109_47 = 9'd47;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexitiii_48 = 9'd48;
parameter [8:0] LEGUP_F_main_BB_threadiii_49 = 9'd49;
parameter [8:0] LEGUP_F_main_BB_threadiii_50 = 9'd50;
parameter [8:0] LEGUP_F_main_BB_threadiii_51 = 9'd51;
parameter [8:0] LEGUP_F_main_BB_threadiii_52 = 9'd52;
parameter [8:0] LEGUP_F_main_BB_propagateFloat64NaNexitii_53 = 9'd53;
parameter [8:0] LEGUP_F_main_BB__116_54 = 9'd54;
parameter [8:0] LEGUP_F_main_BB__118_55 = 9'd55;
parameter [8:0] LEGUP_F_main_BB__120_56 = 9'd56;
parameter [8:0] LEGUP_F_main_BB__120_57 = 9'd57;
parameter [8:0] LEGUP_F_main_BB__120_58 = 9'd58;
parameter [8:0] LEGUP_F_main_BB__125_59 = 9'd59;
parameter [8:0] LEGUP_F_main_BB__125_60 = 9'd60;
parameter [8:0] LEGUP_F_main_BB__127_61 = 9'd61;
parameter [8:0] LEGUP_F_main_BB__127_62 = 9'd62;
parameter [8:0] LEGUP_F_main_BB__131_63 = 9'd63;
parameter [8:0] LEGUP_F_main_BB__137_64 = 9'd64;
parameter [8:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_65 = 9'd65;
parameter [8:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_66 = 9'd66;
parameter [8:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67 = 9'd67;
parameter [8:0] LEGUP_F_main_BB__149_68 = 9'd68;
parameter [8:0] LEGUP_F_main_BB__153_69 = 9'd69;
parameter [8:0] LEGUP_F_main_BB__155_70 = 9'd70;
parameter [8:0] LEGUP_F_main_BB__157_71 = 9'd71;
parameter [8:0] LEGUP_F_main_BB__163_72 = 9'd72;
parameter [8:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_73 = 9'd73;
parameter [8:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_74 = 9'd74;
parameter [8:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75 = 9'd75;
parameter [8:0] LEGUP_F_main_BB__175_76 = 9'd76;
parameter [8:0] LEGUP_F_main_BB__186_77 = 9'd77;
parameter [8:0] LEGUP_F_main_BB__189_78 = 9'd78;
parameter [8:0] LEGUP_F_main_BB__192_79 = 9'd79;
parameter [8:0] LEGUP_F_main_BB__196_80 = 9'd80;
parameter [8:0] LEGUP_F_main_BB__196_81 = 9'd81;
parameter [8:0] LEGUP_F_main_BB__196_82 = 9'd82;
parameter [8:0] LEGUP_F_main_BB__196_83 = 9'd83;
parameter [8:0] LEGUP_F_main_BB__196_84 = 9'd84;
parameter [8:0] LEGUP_F_main_BB__196_85 = 9'd85;
parameter [8:0] LEGUP_F_main_BB__196_86 = 9'd86;
parameter [8:0] LEGUP_F_main_BB__196_87 = 9'd87;
parameter [8:0] LEGUP_F_main_BB__196_88 = 9'd88;
parameter [8:0] LEGUP_F_main_BB__196_89 = 9'd89;
parameter [8:0] LEGUP_F_main_BB__196_90 = 9'd90;
parameter [8:0] LEGUP_F_main_BB__196_91 = 9'd91;
parameter [8:0] LEGUP_F_main_BB__196_92 = 9'd92;
parameter [8:0] LEGUP_F_main_BB__196_93 = 9'd93;
parameter [8:0] LEGUP_F_main_BB__196_94 = 9'd94;
parameter [8:0] LEGUP_F_main_BB__196_95 = 9'd95;
parameter [8:0] LEGUP_F_main_BB__196_96 = 9'd96;
parameter [8:0] LEGUP_F_main_BB__196_97 = 9'd97;
parameter [8:0] LEGUP_F_main_BB__196_98 = 9'd98;
parameter [8:0] LEGUP_F_main_BB__196_99 = 9'd99;
parameter [8:0] LEGUP_F_main_BB__196_100 = 9'd100;
parameter [8:0] LEGUP_F_main_BB__196_101 = 9'd101;
parameter [8:0] LEGUP_F_main_BB__196_102 = 9'd102;
parameter [8:0] LEGUP_F_main_BB__196_103 = 9'd103;
parameter [8:0] LEGUP_F_main_BB__196_104 = 9'd104;
parameter [8:0] LEGUP_F_main_BB__196_105 = 9'd105;
parameter [8:0] LEGUP_F_main_BB__196_106 = 9'd106;
parameter [8:0] LEGUP_F_main_BB__196_107 = 9'd107;
parameter [8:0] LEGUP_F_main_BB__196_108 = 9'd108;
parameter [8:0] LEGUP_F_main_BB__196_109 = 9'd109;
parameter [8:0] LEGUP_F_main_BB__196_110 = 9'd110;
parameter [8:0] LEGUP_F_main_BB__196_111 = 9'd111;
parameter [8:0] LEGUP_F_main_BB__196_112 = 9'd112;
parameter [8:0] LEGUP_F_main_BB__196_113 = 9'd113;
parameter [8:0] LEGUP_F_main_BB__196_114 = 9'd114;
parameter [8:0] LEGUP_F_main_BB__196_115 = 9'd115;
parameter [8:0] LEGUP_F_main_BB__196_116 = 9'd116;
parameter [8:0] LEGUP_F_main_BB__196_117 = 9'd117;
parameter [8:0] LEGUP_F_main_BB__196_118 = 9'd118;
parameter [8:0] LEGUP_F_main_BB__196_119 = 9'd119;
parameter [8:0] LEGUP_F_main_BB__196_120 = 9'd120;
parameter [8:0] LEGUP_F_main_BB__196_121 = 9'd121;
parameter [8:0] LEGUP_F_main_BB__196_122 = 9'd122;
parameter [8:0] LEGUP_F_main_BB__196_123 = 9'd123;
parameter [8:0] LEGUP_F_main_BB__196_124 = 9'd124;
parameter [8:0] LEGUP_F_main_BB__196_125 = 9'd125;
parameter [8:0] LEGUP_F_main_BB__196_126 = 9'd126;
parameter [8:0] LEGUP_F_main_BB__196_127 = 9'd127;
parameter [8:0] LEGUP_F_main_BB__196_128 = 9'd128;
parameter [8:0] LEGUP_F_main_BB__196_129 = 9'd129;
parameter [8:0] LEGUP_F_main_BB__196_130 = 9'd130;
parameter [8:0] LEGUP_F_main_BB__196_131 = 9'd131;
parameter [8:0] LEGUP_F_main_BB__196_132 = 9'd132;
parameter [8:0] LEGUP_F_main_BB__196_133 = 9'd133;
parameter [8:0] LEGUP_F_main_BB__196_134 = 9'd134;
parameter [8:0] LEGUP_F_main_BB__196_135 = 9'd135;
parameter [8:0] LEGUP_F_main_BB__196_136 = 9'd136;
parameter [8:0] LEGUP_F_main_BB__196_137 = 9'd137;
parameter [8:0] LEGUP_F_main_BB__196_138 = 9'd138;
parameter [8:0] LEGUP_F_main_BB__196_139 = 9'd139;
parameter [8:0] LEGUP_F_main_BB__196_140 = 9'd140;
parameter [8:0] LEGUP_F_main_BB__196_141 = 9'd141;
parameter [8:0] LEGUP_F_main_BB__196_142 = 9'd142;
parameter [8:0] LEGUP_F_main_BB__196_143 = 9'd143;
parameter [8:0] LEGUP_F_main_BB__196_144 = 9'd144;
parameter [8:0] LEGUP_F_main_BB__199_145 = 9'd145;
parameter [8:0] LEGUP_F_main_BB__199_146 = 9'd146;
parameter [8:0] LEGUP_F_main_BB_lrphiii_147 = 9'd147;
parameter [8:0] LEGUP_F_main_BB__213_148 = 9'd148;
parameter [8:0] LEGUP_F_main_BB__213_149 = 9'd149;
parameter [8:0] LEGUP_F_main_BB__crit_edgeiiiloopexit_150 = 9'd150;
parameter [8:0] LEGUP_F_main_BB__crit_edgeiii_151 = 9'd151;
parameter [8:0] LEGUP_F_main_BB__225_152 = 9'd152;
parameter [8:0] LEGUP_F_main_BB__225_153 = 9'd153;
parameter [8:0] LEGUP_F_main_BB__225_154 = 9'd154;
parameter [8:0] LEGUP_F_main_BB__225_155 = 9'd155;
parameter [8:0] LEGUP_F_main_BB__225_156 = 9'd156;
parameter [8:0] LEGUP_F_main_BB__225_157 = 9'd157;
parameter [8:0] LEGUP_F_main_BB__225_158 = 9'd158;
parameter [8:0] LEGUP_F_main_BB__225_159 = 9'd159;
parameter [8:0] LEGUP_F_main_BB__225_160 = 9'd160;
parameter [8:0] LEGUP_F_main_BB__225_161 = 9'd161;
parameter [8:0] LEGUP_F_main_BB__225_162 = 9'd162;
parameter [8:0] LEGUP_F_main_BB__225_163 = 9'd163;
parameter [8:0] LEGUP_F_main_BB__225_164 = 9'd164;
parameter [8:0] LEGUP_F_main_BB__225_165 = 9'd165;
parameter [8:0] LEGUP_F_main_BB__225_166 = 9'd166;
parameter [8:0] LEGUP_F_main_BB__225_167 = 9'd167;
parameter [8:0] LEGUP_F_main_BB__225_168 = 9'd168;
parameter [8:0] LEGUP_F_main_BB__225_169 = 9'd169;
parameter [8:0] LEGUP_F_main_BB__225_170 = 9'd170;
parameter [8:0] LEGUP_F_main_BB__225_171 = 9'd171;
parameter [8:0] LEGUP_F_main_BB__225_172 = 9'd172;
parameter [8:0] LEGUP_F_main_BB__225_173 = 9'd173;
parameter [8:0] LEGUP_F_main_BB__225_174 = 9'd174;
parameter [8:0] LEGUP_F_main_BB__225_175 = 9'd175;
parameter [8:0] LEGUP_F_main_BB__225_176 = 9'd176;
parameter [8:0] LEGUP_F_main_BB__225_177 = 9'd177;
parameter [8:0] LEGUP_F_main_BB__225_178 = 9'd178;
parameter [8:0] LEGUP_F_main_BB__225_179 = 9'd179;
parameter [8:0] LEGUP_F_main_BB__225_180 = 9'd180;
parameter [8:0] LEGUP_F_main_BB__225_181 = 9'd181;
parameter [8:0] LEGUP_F_main_BB__225_182 = 9'd182;
parameter [8:0] LEGUP_F_main_BB__225_183 = 9'd183;
parameter [8:0] LEGUP_F_main_BB__225_184 = 9'd184;
parameter [8:0] LEGUP_F_main_BB__225_185 = 9'd185;
parameter [8:0] LEGUP_F_main_BB__225_186 = 9'd186;
parameter [8:0] LEGUP_F_main_BB__225_187 = 9'd187;
parameter [8:0] LEGUP_F_main_BB__225_188 = 9'd188;
parameter [8:0] LEGUP_F_main_BB__225_189 = 9'd189;
parameter [8:0] LEGUP_F_main_BB__225_190 = 9'd190;
parameter [8:0] LEGUP_F_main_BB__225_191 = 9'd191;
parameter [8:0] LEGUP_F_main_BB__225_192 = 9'd192;
parameter [8:0] LEGUP_F_main_BB__225_193 = 9'd193;
parameter [8:0] LEGUP_F_main_BB__225_194 = 9'd194;
parameter [8:0] LEGUP_F_main_BB__225_195 = 9'd195;
parameter [8:0] LEGUP_F_main_BB__225_196 = 9'd196;
parameter [8:0] LEGUP_F_main_BB__225_197 = 9'd197;
parameter [8:0] LEGUP_F_main_BB__225_198 = 9'd198;
parameter [8:0] LEGUP_F_main_BB__225_199 = 9'd199;
parameter [8:0] LEGUP_F_main_BB__225_200 = 9'd200;
parameter [8:0] LEGUP_F_main_BB__225_201 = 9'd201;
parameter [8:0] LEGUP_F_main_BB__225_202 = 9'd202;
parameter [8:0] LEGUP_F_main_BB__225_203 = 9'd203;
parameter [8:0] LEGUP_F_main_BB__225_204 = 9'd204;
parameter [8:0] LEGUP_F_main_BB__225_205 = 9'd205;
parameter [8:0] LEGUP_F_main_BB__225_206 = 9'd206;
parameter [8:0] LEGUP_F_main_BB__225_207 = 9'd207;
parameter [8:0] LEGUP_F_main_BB__225_208 = 9'd208;
parameter [8:0] LEGUP_F_main_BB__225_209 = 9'd209;
parameter [8:0] LEGUP_F_main_BB__225_210 = 9'd210;
parameter [8:0] LEGUP_F_main_BB__225_211 = 9'd211;
parameter [8:0] LEGUP_F_main_BB__225_212 = 9'd212;
parameter [8:0] LEGUP_F_main_BB__225_213 = 9'd213;
parameter [8:0] LEGUP_F_main_BB__225_214 = 9'd214;
parameter [8:0] LEGUP_F_main_BB__225_215 = 9'd215;
parameter [8:0] LEGUP_F_main_BB__225_216 = 9'd216;
parameter [8:0] LEGUP_F_main_BB_estimateDiv128To64exitii_217 = 9'd217;
parameter [8:0] LEGUP_F_main_BB__231_218 = 9'd218;
parameter [8:0] LEGUP_F_main_BB__231_219 = 9'd219;
parameter [8:0] LEGUP_F_main_BB__231_220 = 9'd220;
parameter [8:0] LEGUP_F_main_BB__231_221 = 9'd221;
parameter [8:0] LEGUP_F_main_BB_lrphiipreheader_222 = 9'd222;
parameter [8:0] LEGUP_F_main_BB_lrphii_223 = 9'd223;
parameter [8:0] LEGUP_F_main_BB_lrphii_224 = 9'd224;
parameter [8:0] LEGUP_F_main_BB__crit_edgeiiloopexit_225 = 9'd225;
parameter [8:0] LEGUP_F_main_BB__crit_edgeii_226 = 9'd226;
parameter [8:0] LEGUP_F_main_BB_estimateDiv128To64exitthreadii_227 = 9'd227;
parameter [8:0] LEGUP_F_main_BB_estimateDiv128To64exitthreadii_229 = 9'd229;
parameter [8:0] LEGUP_F_main_BB_float64_divexiti_230 = 9'd230;
parameter [8:0] LEGUP_F_main_BB__268_231 = 9'd231;
parameter [8:0] LEGUP_F_main_BB__274_232 = 9'd232;
parameter [8:0] LEGUP_F_main_BB__276_233 = 9'd233;
parameter [8:0] LEGUP_F_main_BB__278_234 = 9'd234;
parameter [8:0] LEGUP_F_main_BB__281_235 = 9'd235;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i10iii_236 = 9'd236;
parameter [8:0] LEGUP_F_main_BB__289_237 = 9'd237;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti11iii_238 = 9'd238;
parameter [8:0] LEGUP_F_main_BB_threadi12iii_239 = 9'd239;
parameter [8:0] LEGUP_F_main_BB_threadi12iii_240 = 9'd240;
parameter [8:0] LEGUP_F_main_BB_threadi12iii_241 = 9'd241;
parameter [8:0] LEGUP_F_main_BB_threadi12iii_242 = 9'd242;
parameter [8:0] LEGUP_F_main_BB_propagateFloat64NaNexit16iii_243 = 9'd243;
parameter [8:0] LEGUP_F_main_BB__296_244 = 9'd244;
parameter [8:0] LEGUP_F_main_BB__302_245 = 9'd245;
parameter [8:0] LEGUP_F_main_BB__304_246 = 9'd246;
parameter [8:0] LEGUP_F_main_BB__314_247 = 9'd247;
parameter [8:0] LEGUP_F_main_BB__317_248 = 9'd248;
parameter [8:0] LEGUP_F_main_BB__319_249 = 9'd249;
parameter [8:0] LEGUP_F_main_BB__321_250 = 9'd250;
parameter [8:0] LEGUP_F_main_BB__323_251 = 9'd251;
parameter [8:0] LEGUP_F_main_BB__326_252 = 9'd252;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i1iii_253 = 9'd253;
parameter [8:0] LEGUP_F_main_BB__334_254 = 9'd254;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti2iii_255 = 9'd255;
parameter [8:0] LEGUP_F_main_BB_threadi3iii_256 = 9'd256;
parameter [8:0] LEGUP_F_main_BB_threadi3iii_257 = 9'd257;
parameter [8:0] LEGUP_F_main_BB_threadi3iii_258 = 9'd258;
parameter [8:0] LEGUP_F_main_BB_threadi3iii_259 = 9'd259;
parameter [8:0] LEGUP_F_main_BB_propagateFloat64NaNexit7iii_260 = 9'd260;
parameter [8:0] LEGUP_F_main_BB__341_261 = 9'd261;
parameter [8:0] LEGUP_F_main_BB__344_262 = 9'd262;
parameter [8:0] LEGUP_F_main_BB__351_263 = 9'd263;
parameter [8:0] LEGUP_F_main_BB__353_264 = 9'd264;
parameter [8:0] LEGUP_F_main_BB__362_265 = 9'd265;
parameter [8:0] LEGUP_F_main_BB__365_266 = 9'd266;
parameter [8:0] LEGUP_F_main_BB__366_267 = 9'd267;
parameter [8:0] LEGUP_F_main_BB__369_268 = 9'd268;
parameter [8:0] LEGUP_F_main_BB__372_269 = 9'd269;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4ii_270 = 9'd270;
parameter [8:0] LEGUP_F_main_BB__380_271 = 9'd271;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexitii5ii_272 = 9'd272;
parameter [8:0] LEGUP_F_main_BB_threadii6ii_273 = 9'd273;
parameter [8:0] LEGUP_F_main_BB_threadii6ii_274 = 9'd274;
parameter [8:0] LEGUP_F_main_BB_threadii6ii_275 = 9'd275;
parameter [8:0] LEGUP_F_main_BB_threadii6ii_276 = 9'd276;
parameter [8:0] LEGUP_F_main_BB_propagateFloat64NaNexiti10ii_277 = 9'd277;
parameter [8:0] LEGUP_F_main_BB__387_278 = 9'd278;
parameter [8:0] LEGUP_F_main_BB__392_279 = 9'd279;
parameter [8:0] LEGUP_F_main_BB_shift64RightJammingexit9iii_280 = 9'd280;
parameter [8:0] LEGUP_F_main_BB_shift64RightJammingexit9iii_281 = 9'd281;
parameter [8:0] LEGUP_F_main_BB_shift64RightJammingexit9iii_282 = 9'd282;
parameter [8:0] LEGUP_F_main_BB__402_283 = 9'd283;
parameter [8:0] LEGUP_F_main_BB__402_285 = 9'd285;
parameter [8:0] LEGUP_F_main_BB__404_286 = 9'd286;
parameter [8:0] LEGUP_F_main_BB__410_287 = 9'd287;
parameter [8:0] LEGUP_F_main_BB__412_288 = 9'd288;
parameter [8:0] LEGUP_F_main_BB__413_289 = 9'd289;
parameter [8:0] LEGUP_F_main_BB__416_290 = 9'd290;
parameter [8:0] LEGUP_F_main_BB__419_291 = 9'd291;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i11iii_292 = 9'd292;
parameter [8:0] LEGUP_F_main_BB__427_293 = 9'd293;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti12iii_294 = 9'd294;
parameter [8:0] LEGUP_F_main_BB_threadi13iii_295 = 9'd295;
parameter [8:0] LEGUP_F_main_BB_threadi13iii_296 = 9'd296;
parameter [8:0] LEGUP_F_main_BB_threadi13iii_297 = 9'd297;
parameter [8:0] LEGUP_F_main_BB_threadi13iii_298 = 9'd298;
parameter [8:0] LEGUP_F_main_BB_propagateFloat64NaNexit17iii_299 = 9'd299;
parameter [8:0] LEGUP_F_main_BB__434_300 = 9'd300;
parameter [8:0] LEGUP_F_main_BB__434_301 = 9'd301;
parameter [8:0] LEGUP_F_main_BB__434_302 = 9'd302;
parameter [8:0] LEGUP_F_main_BB__434_303 = 9'd303;
parameter [8:0] LEGUP_F_main_BB__437_304 = 9'd304;
parameter [8:0] LEGUP_F_main_BB__438_305 = 9'd305;
parameter [8:0] LEGUP_F_main_BB__440_306 = 9'd306;
parameter [8:0] LEGUP_F_main_BB__442_307 = 9'd307;
parameter [8:0] LEGUP_F_main_BB__444_308 = 9'd308;
parameter [8:0] LEGUP_F_main_BB__446_309 = 9'd309;
parameter [8:0] LEGUP_F_main_BB__449_310 = 9'd310;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i4iii_311 = 9'd311;
parameter [8:0] LEGUP_F_main_BB__457_312 = 9'd312;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti5iii_313 = 9'd313;
parameter [8:0] LEGUP_F_main_BB_threadi6iii_314 = 9'd314;
parameter [8:0] LEGUP_F_main_BB_threadi6iii_315 = 9'd315;
parameter [8:0] LEGUP_F_main_BB_threadi6iii_316 = 9'd316;
parameter [8:0] LEGUP_F_main_BB_threadi6iii_317 = 9'd317;
parameter [8:0] LEGUP_F_main_BB_propagateFloat64NaNexit10iii_318 = 9'd318;
parameter [8:0] LEGUP_F_main_BB__464_319 = 9'd319;
parameter [8:0] LEGUP_F_main_BB__469_320 = 9'd320;
parameter [8:0] LEGUP_F_main_BB__476_321 = 9'd321;
parameter [8:0] LEGUP_F_main_BB__478_322 = 9'd322;
parameter [8:0] LEGUP_F_main_BB__487_323 = 9'd323;
parameter [8:0] LEGUP_F_main_BB_shift64RightJammingexit3iii_324 = 9'd324;
parameter [8:0] LEGUP_F_main_BB__491_325 = 9'd325;
parameter [8:0] LEGUP_F_main_BB__496_326 = 9'd326;
parameter [8:0] LEGUP_F_main_BB__498_327 = 9'd327;
parameter [8:0] LEGUP_F_main_BB__500_328 = 9'd328;
parameter [8:0] LEGUP_F_main_BB__503_329 = 9'd329;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1iiii_330 = 9'd330;
parameter [8:0] LEGUP_F_main_BB__511_331 = 9'd331;
parameter [8:0] LEGUP_F_main_BB_float64_is_signaling_nanexitiiii_332 = 9'd332;
parameter [8:0] LEGUP_F_main_BB_threadiiii_333 = 9'd333;
parameter [8:0] LEGUP_F_main_BB_threadiiii_334 = 9'd334;
parameter [8:0] LEGUP_F_main_BB_threadiiii_335 = 9'd335;
parameter [8:0] LEGUP_F_main_BB_threadiiii_336 = 9'd336;
parameter [8:0] LEGUP_F_main_BB_propagateFloat64NaNexitiii_337 = 9'd337;
parameter [8:0] LEGUP_F_main_BB__518_338 = 9'd338;
parameter [8:0] LEGUP_F_main_BB__524_339 = 9'd339;
parameter [8:0] LEGUP_F_main_BB__526_340 = 9'd340;
parameter [8:0] LEGUP_F_main_BB__536_341 = 9'd341;
parameter [8:0] LEGUP_F_main_BB_shift64RightJammingexitiii_342 = 9'd342;
parameter [8:0] LEGUP_F_main_BB__540_343 = 9'd343;
parameter [8:0] LEGUP_F_main_BB__544_344 = 9'd344;
parameter [8:0] LEGUP_F_main_BB__551_345 = 9'd345;
parameter [8:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_346 = 9'd346;
parameter [8:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_347 = 9'd347;
parameter [8:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348 = 9'd348;
parameter [8:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_350 = 9'd350;
parameter [8:0] LEGUP_F_main_BB_float64_addexiti_351 = 9'd351;
parameter [8:0] LEGUP_F_main_BB__568_352 = 9'd352;
parameter [8:0] LEGUP_F_main_BB__568_353 = 9'd353;
parameter [8:0] LEGUP_F_main_BB__568_354 = 9'd354;
parameter [8:0] LEGUP_F_main_BB__568_355 = 9'd355;
parameter [8:0] LEGUP_F_main_BB_float64_geexiti_356 = 9'd356;
parameter [8:0] LEGUP_F_main_BB_dfsinexitloopexit_357 = 9'd357;
parameter [8:0] LEGUP_F_main_BB_dfsinexit_358 = 9'd358;
parameter [8:0] LEGUP_F_main_BB_dfsinexit_359 = 9'd359;
parameter [8:0] LEGUP_F_main_BB__579_360 = 9'd360;
parameter [8:0] LEGUP_F_main_BB__582_361 = 9'd361;
parameter [8:0] LEGUP_F_main_BB__584_362 = 9'd362;
parameter [8:0] LEGUP_F_main_BB__586_363 = 9'd363;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [8:0] LEGUP_function_call_3 = 9'd3;
parameter [8:0] LEGUP_function_call_6 = 9'd6;
parameter [8:0] LEGUP_function_call_228 = 9'd228;
parameter [8:0] LEGUP_function_call_284 = 9'd284;
parameter [8:0] LEGUP_function_call_349 = 9'd349;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [8:0] cur_state;
reg [8:0] next_state;
reg [31:0] main_1_main_result02;
reg [31:0] main_1_main_result02_reg;
reg [31:0] main_1_i01;
reg [31:0] main_1_i01_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6_reg;
reg [63:0] main_1_2;
reg [63:0] main_1_2_reg;
reg [63:0] main_1_3;
reg [63:0] main_1_3_reg;
reg [63:0] main_1_4;
reg [63:0] main_1_4_reg;
reg [31:0] main_5_indvar;
reg [31:0] main_5_indvar_reg;
reg [63:0] main_5_diff0i;
reg [63:0] main_5_diff0i_reg;
reg [63:0] main_5_app0i;
reg [63:0] main_5_app0i_reg;
reg [31:0] main_5_6;
reg [31:0] main_5_6_reg;
reg [31:0] main_5_7;
reg [31:0] main_5_7_reg;
reg [31:0] main_5_8;
reg [31:0] main_5_8_reg;
reg [63:0] main_5_9;
reg [63:0] main_5_9_reg;
reg [31:0] main_5_10;
reg [31:0] main_5_10_reg;
reg  main_5_11;
reg  main_5_11_reg;
reg  main_12_13;
reg  main_12_13_reg;
reg [31:0] main_12_alobitii;
reg [31:0] main_12_alobitii_reg;
reg [31:0] main_12_14;
reg [31:0] main_12_14_reg;
reg [31:0] main_12_15;
reg [31:0] main_12_15_reg;
reg  main_12_16;
reg  main_12_16_reg;
reg [31:0] main_12_17;
reg [31:0] main_12_17_reg;
reg [31:0] main_12_aiii;
reg [31:0] main_12_aiii_reg;
reg [31:0] main_12_iii;
reg [31:0] main_12_iii_reg;
reg  main_12_18;
reg  main_12_18_reg;
reg [31:0] main_19_20;
reg [31:0] main_19_20_reg;
reg [31:0] main_19_21;
reg [31:0] main_19_21_reg;
reg [31:0] main_countLeadingZeros32exitii_1iii;
reg [31:0] main_countLeadingZeros32exitii_1iii_reg;
reg [31:0] main_countLeadingZeros32exitii_shiftCount1iii;
reg [31:0] main_countLeadingZeros32exitii_shiftCount1iii_reg;
reg [31:0] main_countLeadingZeros32exitii_22;
reg [31:0] main_countLeadingZeros32exitii_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_countLeadingZeros32exitii_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_countLeadingZeros32exitii_23_reg;
reg [31:0] main_countLeadingZeros32exitii_24;
reg [31:0] main_countLeadingZeros32exitii_24_reg;
reg [31:0] main_countLeadingZeros32exitii_25;
reg [31:0] main_countLeadingZeros32exitii_25_reg;
reg [31:0] main_countLeadingZeros32exitii_26;
reg [31:0] main_countLeadingZeros32exitii_26_reg;
reg [63:0] main_countLeadingZeros32exitii_27;
reg [63:0] main_countLeadingZeros32exitii_27_reg;
reg [31:0] main_countLeadingZeros32exitii_28;
reg [31:0] main_countLeadingZeros32exitii_28_reg;
reg [63:0] main_countLeadingZeros32exitii_29;
reg [63:0] main_countLeadingZeros32exitii_29_reg;
reg [63:0] main_countLeadingZeros32exitii_30;
reg [63:0] main_countLeadingZeros32exitii_30_reg;
reg [63:0] main_countLeadingZeros32exitii_31;
reg [63:0] main_countLeadingZeros32exitii_31_reg;
reg [63:0] main_countLeadingZeros32exitii_32;
reg [63:0] main_countLeadingZeros32exitii_32_reg;
reg [63:0] main_countLeadingZeros32exitii_33;
reg [63:0] main_countLeadingZeros32exitii_33_reg;
reg [63:0] main_countLeadingZeros32exitii_34;
reg [63:0] main_countLeadingZeros32exitii_34_reg;
reg [63:0] main_countLeadingZeros32exitii_35;
reg [63:0] main_countLeadingZeros32exitii_35_reg;
reg [63:0] main_countLeadingZeros32exitii_36;
reg [63:0] main_countLeadingZeros32exitii_36_reg;
reg [63:0] main_int32_to_float64exiti_0ii;
reg [63:0] main_int32_to_float64exiti_0ii_reg;
reg [63:0] main_int32_to_float64exiti_37;
reg [63:0] main_int32_to_float64exiti_37_reg;
reg [63:0] main_int32_to_float64exiti_38;
reg [63:0] main_int32_to_float64exiti_38_reg;
reg [31:0] main_int32_to_float64exiti_triii;
reg [31:0] main_int32_to_float64exiti_triii_reg;
reg [31:0] main_int32_to_float64exiti_39;
reg [31:0] main_int32_to_float64exiti_39_reg;
reg [63:0] main_int32_to_float64exiti_40;
reg [63:0] main_int32_to_float64exiti_40_reg;
reg [63:0] main_int32_to_float64exiti_41;
reg [63:0] main_int32_to_float64exiti_41_reg;
reg [31:0] main_int32_to_float64exiti_tri24ii;
reg [31:0] main_int32_to_float64exiti_tri24ii_reg;
reg [31:0] main_int32_to_float64exiti_42;
reg [31:0] main_int32_to_float64exiti_42_reg;
reg [63:0] main_int32_to_float64exiti_43;
reg [63:0] main_int32_to_float64exiti_43_reg;
reg [63:0] main_int32_to_float64exiti_44;
reg [63:0] main_int32_to_float64exiti_44_reg;
reg [31:0] main_int32_to_float64exiti_45;
reg [31:0] main_int32_to_float64exiti_45_reg;
reg  main_int32_to_float64exiti_46;
reg  main_int32_to_float64exiti_46_reg;
reg  main_47_48;
reg  main_47_48_reg;
reg [63:0] main_49_50;
reg [63:0] main_49_50_reg;
reg  main_49_51;
reg  main_49_51_reg;
reg [63:0] main_52_53;
reg [63:0] main_52_53_reg;
reg  main_52_54;
reg  main_52_54_reg;
reg  main_float64_is_signaling_nanexit1i17ii_55;
reg  main_float64_is_signaling_nanexit1i17ii_55_reg;
reg [62:0] main_float64_is_signaling_nanexit1i17ii_56;
reg [62:0] main_float64_is_signaling_nanexit1i17ii_56_reg;
reg  main_float64_is_signaling_nanexit1i17ii_57;
reg  main_float64_is_signaling_nanexit1i17ii_57_reg;
reg [63:0] main_float64_is_signaling_nanexit1i17ii_58;
reg [63:0] main_float64_is_signaling_nanexit1i17ii_58_reg;
reg  main_float64_is_signaling_nanexit1i17ii_59;
reg  main_float64_is_signaling_nanexit1i17ii_59_reg;
reg [63:0] main_60_61;
reg [63:0] main_60_61_reg;
reg  main_60_62;
reg  main_60_62_reg;
reg  main_float64_is_signaling_nanexiti18ii_63;
reg  main_float64_is_signaling_nanexiti18ii_63_reg;
reg  main_float64_is_signaling_nanexiti18ii_64;
reg  main_float64_is_signaling_nanexiti18ii_64_reg;
reg [31:0] main_threadi19ii_65;
reg [31:0] main_threadi19ii_65_reg;
reg [31:0] main_threadi19ii_66;
reg [31:0] main_threadi19ii_66_reg;
reg  main_propagateFloat64NaNexit23ii_sinki20ii;
reg  main_propagateFloat64NaNexit23ii_sinki20ii_reg;
reg [63:0] main_propagateFloat64NaNexit23ii_mux2vi21ii;
reg [63:0] main_propagateFloat64NaNexit23ii_mux2vi21ii_reg;
reg [63:0] main_propagateFloat64NaNexit23ii_mux2i22ii;
reg [63:0] main_propagateFloat64NaNexit23ii_mux2i22ii_reg;
reg  main_67_68;
reg  main_67_68_reg;
reg  main_69_70;
reg  main_69_70_reg;
reg [63:0] main_71_72;
reg [63:0] main_71_72_reg;
reg  main_71_73;
reg  main_71_73_reg;
reg [63:0] main_74_75;
reg [63:0] main_74_75_reg;
reg  main_74_76;
reg  main_74_76_reg;
reg  main_float64_is_signaling_nanexit1i10ii_77;
reg  main_float64_is_signaling_nanexit1i10ii_77_reg;
reg [62:0] main_float64_is_signaling_nanexit1i10ii_78;
reg [62:0] main_float64_is_signaling_nanexit1i10ii_78_reg;
reg  main_float64_is_signaling_nanexit1i10ii_79;
reg  main_float64_is_signaling_nanexit1i10ii_79_reg;
reg [63:0] main_float64_is_signaling_nanexit1i10ii_80;
reg [63:0] main_float64_is_signaling_nanexit1i10ii_80_reg;
reg  main_float64_is_signaling_nanexit1i10ii_81;
reg  main_float64_is_signaling_nanexit1i10ii_81_reg;
reg [63:0] main_82_83;
reg [63:0] main_82_83_reg;
reg  main_82_84;
reg  main_82_84_reg;
reg  main_float64_is_signaling_nanexiti11ii_85;
reg  main_float64_is_signaling_nanexiti11ii_85_reg;
reg  main_float64_is_signaling_nanexiti11ii_86;
reg  main_float64_is_signaling_nanexiti11ii_86_reg;
reg [31:0] main_threadi12ii_87;
reg [31:0] main_threadi12ii_87_reg;
reg [31:0] main_threadi12ii_88;
reg [31:0] main_threadi12ii_88_reg;
reg  main_propagateFloat64NaNexit16ii_sinki13ii;
reg  main_propagateFloat64NaNexit16ii_sinki13ii_reg;
reg [63:0] main_propagateFloat64NaNexit16ii_mux2vi14ii;
reg [63:0] main_propagateFloat64NaNexit16ii_mux2vi14ii_reg;
reg [63:0] main_propagateFloat64NaNexit16ii_mux2i15ii;
reg [63:0] main_propagateFloat64NaNexit16ii_mux2i15ii_reg;
reg [31:0] main_89_90;
reg [31:0] main_89_90_reg;
reg [31:0] main_89_91;
reg [31:0] main_89_91_reg;
reg [63:0] main_92_93;
reg [63:0] main_92_93_reg;
reg [63:0] main_92_94;
reg [63:0] main_92_94_reg;
reg  main_96_97;
reg  main_96_97_reg;
reg [63:0] main_98_99;
reg [63:0] main_98_99_reg;
reg  main_98_100;
reg  main_98_100_reg;
reg [63:0] main_101_102;
reg [63:0] main_101_102_reg;
reg  main_101_103;
reg  main_101_103_reg;
reg  main_float64_is_signaling_nanexit1iii_104;
reg  main_float64_is_signaling_nanexit1iii_104_reg;
reg [62:0] main_float64_is_signaling_nanexit1iii_105;
reg [62:0] main_float64_is_signaling_nanexit1iii_105_reg;
reg  main_float64_is_signaling_nanexit1iii_106;
reg  main_float64_is_signaling_nanexit1iii_106_reg;
reg [63:0] main_float64_is_signaling_nanexit1iii_107;
reg [63:0] main_float64_is_signaling_nanexit1iii_107_reg;
reg  main_float64_is_signaling_nanexit1iii_108;
reg  main_float64_is_signaling_nanexit1iii_108_reg;
reg [63:0] main_109_110;
reg [63:0] main_109_110_reg;
reg  main_109_111;
reg  main_109_111_reg;
reg  main_float64_is_signaling_nanexitiii_112;
reg  main_float64_is_signaling_nanexitiii_112_reg;
reg  main_float64_is_signaling_nanexitiii_113;
reg  main_float64_is_signaling_nanexitiii_113_reg;
reg [31:0] main_threadiii_114;
reg [31:0] main_threadiii_114_reg;
reg [31:0] main_threadiii_115;
reg [31:0] main_threadiii_115_reg;
reg  main_propagateFloat64NaNexitii_sinkiii;
reg  main_propagateFloat64NaNexitii_sinkiii_reg;
reg [63:0] main_propagateFloat64NaNexitii_mux2viii;
reg [63:0] main_propagateFloat64NaNexitii_mux2viii_reg;
reg [63:0] main_propagateFloat64NaNexitii_mux2iii;
reg [63:0] main_propagateFloat64NaNexitii_mux2iii_reg;
reg [63:0] main_116_117;
reg [63:0] main_116_117_reg;
reg  main_118_119;
reg  main_118_119_reg;
reg [63:0] main_120_121;
reg [63:0] main_120_121_reg;
reg [63:0] main_120_122;
reg [63:0] main_120_122_reg;
reg  main_120_123;
reg  main_120_123_reg;
reg [31:0] main_120_124;
reg [31:0] main_120_124_reg;
reg [31:0] main_125_126;
reg [31:0] main_125_126_reg;
reg [31:0] main_127_128;
reg [31:0] main_127_128_reg;
reg [63:0] main_127_129;
reg [63:0] main_127_129_reg;
reg [63:0] main_127_130;
reg [63:0] main_127_130_reg;
reg  main_131_132;
reg  main_131_132_reg;
reg [63:0] main_131_133;
reg [63:0] main_131_133_reg;
reg [63:0] main_131_asinkii2ii;
reg [63:0] main_131_asinkii2ii_reg;
reg [31:0] main_131_shiftCount0ii3ii;
reg [31:0] main_131_shiftCount0ii3ii_reg;
reg [31:0] main_131_extracttii4ii;
reg [31:0] main_131_extracttii4ii_reg;
reg  main_131_134;
reg  main_131_134_reg;
reg [31:0] main_131_135;
reg [31:0] main_131_135_reg;
reg [31:0] main_131_aiii5ii;
reg [31:0] main_131_aiii5ii_reg;
reg [31:0] main_131_iii6ii;
reg [31:0] main_131_iii6ii_reg;
reg  main_131_136;
reg  main_131_136_reg;
reg [31:0] main_137_138;
reg [31:0] main_137_138_reg;
reg [31:0] main_137_139;
reg [31:0] main_137_139_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_1iii7ii;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_1iii7ii_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_140;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexit9ii_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexit9ii_141_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_142;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_142_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_143;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_143_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_144;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_144_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_145;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_145_reg;
reg [63:0] main_normalizeFloat64Subnormalexit9ii_146;
reg [63:0] main_normalizeFloat64Subnormalexit9ii_146_reg;
reg [63:0] main_normalizeFloat64Subnormalexit9ii_147;
reg [63:0] main_normalizeFloat64Subnormalexit9ii_147_reg;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_148;
reg [31:0] main_normalizeFloat64Subnormalexit9ii_148_reg;
reg [31:0] main_149_150;
reg [31:0] main_149_150_reg;
reg [63:0] main_149_151;
reg [63:0] main_149_151_reg;
reg  main_149_152;
reg  main_149_152_reg;
reg  main_153_154;
reg  main_153_154_reg;
reg [63:0] main_155_156;
reg [63:0] main_155_156_reg;
reg  main_157_158;
reg  main_157_158_reg;
reg [63:0] main_157_159;
reg [63:0] main_157_159_reg;
reg [63:0] main_157_asinkiiii;
reg [63:0] main_157_asinkiiii_reg;
reg [31:0] main_157_shiftCount0iiii;
reg [31:0] main_157_shiftCount0iiii_reg;
reg [31:0] main_157_extracttiiii;
reg [31:0] main_157_extracttiiii_reg;
reg  main_157_160;
reg  main_157_160_reg;
reg [31:0] main_157_161;
reg [31:0] main_157_161_reg;
reg [31:0] main_157_aiiiii;
reg [31:0] main_157_aiiiii_reg;
reg [31:0] main_157_iiiii;
reg [31:0] main_157_iiiii_reg;
reg  main_157_162;
reg  main_157_162_reg;
reg [31:0] main_163_164;
reg [31:0] main_163_164_reg;
reg [31:0] main_163_165;
reg [31:0] main_163_165_reg;
reg [31:0] main_normalizeFloat64Subnormalexitii_1iiiii;
reg [31:0] main_normalizeFloat64Subnormalexitii_1iiiii_reg;
reg [31:0] main_normalizeFloat64Subnormalexitii_shiftCount1iiiii;
reg [31:0] main_normalizeFloat64Subnormalexitii_shiftCount1iiiii_reg;
reg [31:0] main_normalizeFloat64Subnormalexitii_166;
reg [31:0] main_normalizeFloat64Subnormalexitii_166_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexitii_167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexitii_167_reg;
reg [31:0] main_normalizeFloat64Subnormalexitii_168;
reg [31:0] main_normalizeFloat64Subnormalexitii_168_reg;
reg [31:0] main_normalizeFloat64Subnormalexitii_169;
reg [31:0] main_normalizeFloat64Subnormalexitii_169_reg;
reg [31:0] main_normalizeFloat64Subnormalexitii_170;
reg [31:0] main_normalizeFloat64Subnormalexitii_170_reg;
reg [31:0] main_normalizeFloat64Subnormalexitii_171;
reg [31:0] main_normalizeFloat64Subnormalexitii_171_reg;
reg [63:0] main_normalizeFloat64Subnormalexitii_172;
reg [63:0] main_normalizeFloat64Subnormalexitii_172_reg;
reg [63:0] main_normalizeFloat64Subnormalexitii_173;
reg [63:0] main_normalizeFloat64Subnormalexitii_173_reg;
reg [31:0] main_normalizeFloat64Subnormalexitii_174;
reg [31:0] main_normalizeFloat64Subnormalexitii_174_reg;
reg [31:0] main_175_176;
reg [31:0] main_175_176_reg;
reg [63:0] main_175_177;
reg [63:0] main_175_177_reg;
reg [31:0] main_175_178;
reg [31:0] main_175_178_reg;
reg [31:0] main_175_179;
reg [31:0] main_175_179_reg;
reg [63:0] main_175_180;
reg [63:0] main_175_180_reg;
reg [63:0] main_175_181;
reg [63:0] main_175_181_reg;
reg [63:0] main_175_182;
reg [63:0] main_175_182_reg;
reg [63:0] main_175_183;
reg [63:0] main_175_183_reg;
reg [63:0] main_175_184;
reg [63:0] main_175_184_reg;
reg  main_175_185;
reg  main_175_185_reg;
reg [63:0] main_186_187;
reg [63:0] main_186_187_reg;
reg [31:0] main_186_188;
reg [31:0] main_186_188_reg;
reg [63:0] main_189_190;
reg [63:0] main_189_190_reg;
reg [31:0] main_189_zExp0ii;
reg [31:0] main_189_zExp0ii_reg;
reg  main_189_191;
reg  main_189_191_reg;
reg [63:0] main_192_193;
reg [63:0] main_192_193_reg;
reg [63:0] main_192_194;
reg [63:0] main_192_194_reg;
reg  main_192_195;
reg  main_192_195_reg;
reg [63:0] main_196_197;
reg [63:0] main_196_197_reg;
reg [63:0] main_196_198;
reg [63:0] main_196_198_reg;
reg [63:0] main_199_200;
reg [63:0] main_199_200_reg;
reg [63:0] main_199_201;
reg [63:0] main_199_201_reg;
reg [63:0] main_199_202;
reg [63:0] main_199_202_reg;
reg [63:0] main_199_203;
reg [63:0] main_199_203_reg;
reg [63:0] main_199_204;
reg [63:0] main_199_204_reg;
reg [63:0] main_199_205;
reg [63:0] main_199_205_reg;
reg [63:0] main_199_206;
reg [63:0] main_199_206_reg;
reg [63:0] main_199_207;
reg [63:0] main_199_207_reg;
reg  main_199_208;
reg  main_199_208_reg;
reg [63:0] main_199_negiiii;
reg [63:0] main_199_negiiii_reg;
reg [63:0] main_199_neg3iii;
reg [63:0] main_199_neg3iii_reg;
reg [63:0] main_199_209;
reg [63:0] main_199_209_reg;
reg [63:0] main_199_210;
reg [63:0] main_199_210_reg;
reg  main_199_211;
reg  main_199_211_reg;
reg [63:0] main_lrphiii_212;
reg [63:0] main_lrphiii_212_reg;
reg [64:0] main_lrphiii_overflow_intrinsic1;
reg [64:0] main_lrphiii_overflow_intrinsic1_reg;
reg [63:0] main_213_z05iii;
reg [63:0] main_213_z05iii_reg;
reg [63:0] main_213_214;
reg [63:0] main_213_214_reg;
reg [63:0] main_213_215;
reg [63:0] main_213_215_reg;
reg [63:0] main_213_216;
reg [63:0] main_213_216_reg;
reg [64:0] main_213_overflow_intrinsic;
reg [64:0] main_213_overflow_intrinsic_reg;
reg [64:0] main_213_overflow_intrinsic2;
reg [64:0] main_213_overflow_intrinsic2_reg;
reg [63:0] main_213_overflow_intrinsic_sum;
reg [63:0] main_213_overflow_intrinsic_sum_reg;
reg [64:0] main_213_overflow_intrinsic3;
reg [64:0] main_213_overflow_intrinsic3_reg;
reg [63:0] main_213_217;
reg [63:0] main_213_217_reg;
reg [63:0] main_213_218;
reg [63:0] main_213_218_reg;
reg [63:0] main_213_219;
reg [63:0] main_213_219_reg;
reg  main_213_220;
reg  main_213_220_reg;
reg [63:0] main__crit_edgeiii_z0lcssaiii;
reg [63:0] main__crit_edgeiii_z0lcssaiii_reg;
reg [63:0] main__crit_edgeiii_lcssa4iii;
reg [63:0] main__crit_edgeiii_lcssa4iii_reg;
reg [63:0] main__crit_edgeiii_lcssaiii;
reg [63:0] main__crit_edgeiii_lcssaiii_reg;
reg [63:0] main__crit_edgeiii_221;
reg [63:0] main__crit_edgeiii_221_reg;
reg [63:0] main__crit_edgeiii_222;
reg [63:0] main__crit_edgeiii_222_reg;
reg [63:0] main__crit_edgeiii_223;
reg [63:0] main__crit_edgeiii_223_reg;
reg  main__crit_edgeiii_224;
reg  main__crit_edgeiii_224_reg;
reg [63:0] main_225_226;
reg [63:0] main_225_226_reg;
reg [63:0] main_estimateDiv128To64exitii_227;
reg [63:0] main_estimateDiv128To64exitii_227_reg;
reg [63:0] main_estimateDiv128To64exitii_228;
reg [63:0] main_estimateDiv128To64exitii_228_reg;
reg [63:0] main_estimateDiv128To64exitii_229;
reg [63:0] main_estimateDiv128To64exitii_229_reg;
reg  main_estimateDiv128To64exitii_230;
reg  main_estimateDiv128To64exitii_230_reg;
reg [63:0] main_231_232;
reg [63:0] main_231_232_reg;
reg [63:0] main_231_233;
reg [63:0] main_231_233_reg;
reg [63:0] main_231_234;
reg [63:0] main_231_234_reg;
reg [63:0] main_231_235;
reg [63:0] main_231_235_reg;
reg [63:0] main_231_236;
reg [63:0] main_231_236_reg;
reg [63:0] main_231_237;
reg [63:0] main_231_237_reg;
reg [64:0] main_231_overflow_intrinsic4;
reg [64:0] main_231_overflow_intrinsic4_reg;
reg [64:0] main_231_overflow_intrinsic5;
reg [64:0] main_231_overflow_intrinsic5_reg;
reg [64:0] main_231_overflow_intrinsic6;
reg [64:0] main_231_overflow_intrinsic6_reg;
reg [63:0] main_231_overflow_intrinsic_sum7;
reg [63:0] main_231_overflow_intrinsic_sum7_reg;
reg [64:0] main_231_238;
reg [64:0] main_231_238_reg;
reg [63:0] main_231_tr;
reg [63:0] main_231_tr_reg;
reg [63:0] main_231_239;
reg [63:0] main_231_239_reg;
reg [63:0] main_231_240;
reg [63:0] main_231_240_reg;
reg [63:0] main_231_241;
reg [63:0] main_231_241_reg;
reg [63:0] main_231_242;
reg [63:0] main_231_242_reg;
reg [64:0] main_231_overflow_intrinsic10;
reg [64:0] main_231_overflow_intrinsic10_reg;
reg [64:0] main_231_overflow_intrinsic11;
reg [64:0] main_231_overflow_intrinsic11_reg;
reg [64:0] main_231_overflow_intrinsic12;
reg [64:0] main_231_overflow_intrinsic12_reg;
reg [63:0] main_231_overflow_intrinsic_sum13;
reg [63:0] main_231_overflow_intrinsic_sum13_reg;
reg [63:0] main_231_243;
reg [63:0] main_231_243_reg;
reg [64:0] main_231_sext;
reg [64:0] main_231_sext_reg;
reg [63:0] main_231_neg26ii;
reg [63:0] main_231_neg26ii_reg;
reg  main_231_244;
reg  main_231_244_reg;
reg [63:0] main_231_negiii;
reg [63:0] main_231_negiii_reg;
reg [63:0] main_231_neg28ii;
reg [63:0] main_231_neg28ii_reg;
reg [63:0] main_231_neg30ii;
reg [63:0] main_231_neg30ii_reg;
reg [63:0] main_231_245;
reg [63:0] main_231_245_reg;
reg [63:0] main_231_246;
reg [63:0] main_231_246_reg;
reg  main_231_247;
reg  main_231_247_reg;
reg [64:0] main_lrphiipreheader_overflow_intrinsic17;
reg [64:0] main_lrphiipreheader_overflow_intrinsic17_reg;
reg [63:0] main_lrphii_zSig034ii;
reg [63:0] main_lrphii_zSig034ii_reg;
reg [63:0] main_lrphii_248;
reg [63:0] main_lrphii_248_reg;
reg [63:0] main_lrphii_249;
reg [63:0] main_lrphii_249_reg;
reg [63:0] main_lrphii_250;
reg [63:0] main_lrphii_250_reg;
reg [64:0] main_lrphii_overflow_intrinsic16;
reg [64:0] main_lrphii_overflow_intrinsic16_reg;
reg [64:0] main_lrphii_overflow_intrinsic18;
reg [64:0] main_lrphii_overflow_intrinsic18_reg;
reg [63:0] main_lrphii_overflow_intrinsic_sum19;
reg [63:0] main_lrphii_overflow_intrinsic_sum19_reg;
reg [64:0] main_lrphii_overflow_intrinsic20;
reg [64:0] main_lrphii_overflow_intrinsic20_reg;
reg [63:0] main_lrphii_251;
reg [63:0] main_lrphii_251_reg;
reg [63:0] main_lrphii_252;
reg [63:0] main_lrphii_252_reg;
reg  main_lrphii_253;
reg  main_lrphii_253_reg;
reg [63:0] main__crit_edgeii_zSig0lcssaii;
reg [63:0] main__crit_edgeii_zSig0lcssaii_reg;
reg [63:0] main__crit_edgeii_lcssaii;
reg [63:0] main__crit_edgeii_lcssaii_reg;
reg  main__crit_edgeii_254;
reg  main__crit_edgeii_254_reg;
reg [63:0] main__crit_edgeii_255;
reg [63:0] main__crit_edgeii_255_reg;
reg [63:0] main__crit_edgeii_256;
reg [63:0] main__crit_edgeii_256_reg;
reg [63:0] main_estimateDiv128To64exitthreadii_zSig1ii;
reg [63:0] main_estimateDiv128To64exitthreadii_zSig1ii_reg;
reg [63:0] main_estimateDiv128To64exitthreadii_257;
reg [63:0] main_estimateDiv128To64exitthreadii_257_reg;
reg [63:0] main_float64_divexiti_0i1i;
reg [63:0] main_float64_divexiti_0i1i_reg;
reg [63:0] main_float64_divexiti_258;
reg [63:0] main_float64_divexiti_258_reg;
reg [31:0] main_float64_divexiti_259;
reg [31:0] main_float64_divexiti_259_reg;
reg [63:0] main_float64_divexiti_260;
reg [63:0] main_float64_divexiti_260_reg;
reg [31:0] main_float64_divexiti_261;
reg [31:0] main_float64_divexiti_261_reg;
reg  main_float64_divexiti_262;
reg  main_float64_divexiti_262_reg;
reg [63:0] main_float64_divexiti_263;
reg [63:0] main_float64_divexiti_263_reg;
reg [31:0] main_float64_divexiti_trii1ii;
reg [31:0] main_float64_divexiti_trii1ii_reg;
reg [31:0] main_float64_divexiti_264;
reg [31:0] main_float64_divexiti_264_reg;
reg [63:0] main_float64_divexiti_265;
reg [63:0] main_float64_divexiti_265_reg;
reg [31:0] main_float64_divexiti_tri17iii;
reg [31:0] main_float64_divexiti_tri17iii_reg;
reg [31:0] main_float64_divexiti_266;
reg [31:0] main_float64_divexiti_266_reg;
reg [31:0] main_float64_divexiti_267;
reg [31:0] main_float64_divexiti_267_reg;
reg [63:0] main_268_269;
reg [63:0] main_268_269_reg;
reg [63:0] main_268_270;
reg [63:0] main_268_270_reg;
reg [63:0] main_268_271;
reg [63:0] main_268_271_reg;
reg [63:0] main_268_272;
reg [63:0] main_268_272_reg;
reg  main_268_273;
reg  main_268_273_reg;
reg  main_274_275;
reg  main_274_275_reg;
reg  main_276_277;
reg  main_276_277_reg;
reg [63:0] main_278_279;
reg [63:0] main_278_279_reg;
reg  main_278_280;
reg  main_278_280_reg;
reg [63:0] main_281_282;
reg [63:0] main_281_282_reg;
reg  main_281_283;
reg  main_281_283_reg;
reg  main_float64_is_signaling_nanexit1i10iii_284;
reg  main_float64_is_signaling_nanexit1i10iii_284_reg;
reg [62:0] main_float64_is_signaling_nanexit1i10iii_285;
reg [62:0] main_float64_is_signaling_nanexit1i10iii_285_reg;
reg  main_float64_is_signaling_nanexit1i10iii_286;
reg  main_float64_is_signaling_nanexit1i10iii_286_reg;
reg [63:0] main_float64_is_signaling_nanexit1i10iii_287;
reg [63:0] main_float64_is_signaling_nanexit1i10iii_287_reg;
reg  main_float64_is_signaling_nanexit1i10iii_288;
reg  main_float64_is_signaling_nanexit1i10iii_288_reg;
reg [63:0] main_289_290;
reg [63:0] main_289_290_reg;
reg  main_289_291;
reg  main_289_291_reg;
reg  main_float64_is_signaling_nanexiti11iii_292;
reg  main_float64_is_signaling_nanexiti11iii_292_reg;
reg  main_float64_is_signaling_nanexiti11iii_293;
reg  main_float64_is_signaling_nanexiti11iii_293_reg;
reg [31:0] main_threadi12iii_294;
reg [31:0] main_threadi12iii_294_reg;
reg [31:0] main_threadi12iii_295;
reg [31:0] main_threadi12iii_295_reg;
reg  main_propagateFloat64NaNexit16iii_sinki13iii;
reg  main_propagateFloat64NaNexit16iii_sinki13iii_reg;
reg [63:0] main_propagateFloat64NaNexit16iii_mux2vi14iii;
reg [63:0] main_propagateFloat64NaNexit16iii_mux2vi14iii_reg;
reg [63:0] main_propagateFloat64NaNexit16iii_mux2i15iii;
reg [63:0] main_propagateFloat64NaNexit16iii_mux2i15iii_reg;
reg  main_296_297;
reg  main_296_297_reg;
reg [63:0] main_296_298;
reg [63:0] main_296_298_reg;
reg [63:0] main_296_299;
reg [63:0] main_296_299_reg;
reg [31:0] main_296_300;
reg [31:0] main_296_300_reg;
reg [31:0] main_296_expDiff0i2ii;
reg [31:0] main_296_expDiff0i2ii_reg;
reg  main_296_301;
reg  main_296_301_reg;
reg  main_302_303;
reg  main_302_303_reg;
reg [63:0] main_304_305;
reg [63:0] main_304_305_reg;
reg [63:0] main_304_306;
reg [63:0] main_304_306_reg;
reg [31:0] main_304_307;
reg [31:0] main_304_307_reg;
reg [31:0] main_304_308;
reg [31:0] main_304_308_reg;
reg [63:0] main_304_309;
reg [63:0] main_304_309_reg;
reg [63:0] main_304_310;
reg [63:0] main_304_310_reg;
reg  main_304_311;
reg  main_304_311_reg;
reg [63:0] main_304_312;
reg [63:0] main_304_312_reg;
reg [63:0] main_304_313;
reg [63:0] main_304_313_reg;
reg  main_314_315;
reg  main_314_315_reg;
reg [63:0] main_314_316;
reg [63:0] main_314_316_reg;
reg  main_317_318;
reg  main_317_318_reg;
reg  main_319_320;
reg  main_319_320_reg;
reg  main_321_322;
reg  main_321_322_reg;
reg [63:0] main_323_324;
reg [63:0] main_323_324_reg;
reg  main_323_325;
reg  main_323_325_reg;
reg [63:0] main_326_327;
reg [63:0] main_326_327_reg;
reg  main_326_328;
reg  main_326_328_reg;
reg  main_float64_is_signaling_nanexit1i1iii_329;
reg  main_float64_is_signaling_nanexit1i1iii_329_reg;
reg [62:0] main_float64_is_signaling_nanexit1i1iii_330;
reg [62:0] main_float64_is_signaling_nanexit1i1iii_330_reg;
reg  main_float64_is_signaling_nanexit1i1iii_331;
reg  main_float64_is_signaling_nanexit1i1iii_331_reg;
reg [63:0] main_float64_is_signaling_nanexit1i1iii_332;
reg [63:0] main_float64_is_signaling_nanexit1i1iii_332_reg;
reg  main_float64_is_signaling_nanexit1i1iii_333;
reg  main_float64_is_signaling_nanexit1i1iii_333_reg;
reg [63:0] main_334_335;
reg [63:0] main_334_335_reg;
reg  main_334_336;
reg  main_334_336_reg;
reg  main_float64_is_signaling_nanexiti2iii_337;
reg  main_float64_is_signaling_nanexiti2iii_337_reg;
reg  main_float64_is_signaling_nanexiti2iii_338;
reg  main_float64_is_signaling_nanexiti2iii_338_reg;
reg [31:0] main_threadi3iii_339;
reg [31:0] main_threadi3iii_339_reg;
reg [31:0] main_threadi3iii_340;
reg [31:0] main_threadi3iii_340_reg;
reg  main_propagateFloat64NaNexit7iii_sinki4iii;
reg  main_propagateFloat64NaNexit7iii_sinki4iii_reg;
reg [63:0] main_propagateFloat64NaNexit7iii_mux2vi5iii;
reg [63:0] main_propagateFloat64NaNexit7iii_mux2vi5iii_reg;
reg [63:0] main_propagateFloat64NaNexit7iii_mux2i6iii;
reg [63:0] main_propagateFloat64NaNexit7iii_mux2i6iii_reg;
reg [63:0] main_341_342;
reg [63:0] main_341_342_reg;
reg [63:0] main_341_343;
reg [63:0] main_341_343_reg;
reg  main_344_345;
reg  main_344_345_reg;
reg [63:0] main_344_346;
reg [63:0] main_344_346_reg;
reg [63:0] main_344_347;
reg [63:0] main_344_347_reg;
reg [31:0] main_344_348;
reg [31:0] main_344_348_reg;
reg [31:0] main_344_expDiff1i3ii;
reg [31:0] main_344_expDiff1i3ii_reg;
reg [31:0] main_344_349;
reg [31:0] main_344_349_reg;
reg  main_344_350;
reg  main_344_350_reg;
reg  main_351_352;
reg  main_351_352_reg;
reg [63:0] main_353_354;
reg [63:0] main_353_354_reg;
reg [63:0] main_353_355;
reg [63:0] main_353_355_reg;
reg [31:0] main_353_356;
reg [31:0] main_353_356_reg;
reg [63:0] main_353_357;
reg [63:0] main_353_357_reg;
reg [63:0] main_353_358;
reg [63:0] main_353_358_reg;
reg  main_353_359;
reg  main_353_359_reg;
reg [63:0] main_353_360;
reg [63:0] main_353_360_reg;
reg [63:0] main_353_361;
reg [63:0] main_353_361_reg;
reg  main_362_363;
reg  main_362_363_reg;
reg [63:0] main_362_364;
reg [63:0] main_362_364_reg;
reg [63:0] main_366_367;
reg [63:0] main_366_367_reg;
reg  main_366_368;
reg  main_366_368_reg;
reg [63:0] main_369_370;
reg [63:0] main_369_370_reg;
reg  main_369_371;
reg  main_369_371_reg;
reg [63:0] main_372_373;
reg [63:0] main_372_373_reg;
reg  main_372_374;
reg  main_372_374_reg;
reg  main_float64_is_signaling_nanexit1ii4ii_375;
reg  main_float64_is_signaling_nanexit1ii4ii_375_reg;
reg [62:0] main_float64_is_signaling_nanexit1ii4ii_376;
reg [62:0] main_float64_is_signaling_nanexit1ii4ii_376_reg;
reg  main_float64_is_signaling_nanexit1ii4ii_377;
reg  main_float64_is_signaling_nanexit1ii4ii_377_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii4ii_378;
reg [63:0] main_float64_is_signaling_nanexit1ii4ii_378_reg;
reg  main_float64_is_signaling_nanexit1ii4ii_379;
reg  main_float64_is_signaling_nanexit1ii4ii_379_reg;
reg [63:0] main_380_381;
reg [63:0] main_380_381_reg;
reg  main_380_382;
reg  main_380_382_reg;
reg  main_float64_is_signaling_nanexitii5ii_383;
reg  main_float64_is_signaling_nanexitii5ii_383_reg;
reg  main_float64_is_signaling_nanexitii5ii_384;
reg  main_float64_is_signaling_nanexitii5ii_384_reg;
reg [31:0] main_threadii6ii_385;
reg [31:0] main_threadii6ii_385_reg;
reg [31:0] main_threadii6ii_386;
reg [31:0] main_threadii6ii_386_reg;
reg  main_propagateFloat64NaNexiti10ii_sinkii7ii;
reg  main_propagateFloat64NaNexiti10ii_sinkii7ii_reg;
reg [63:0] main_propagateFloat64NaNexiti10ii_mux2vii8ii;
reg [63:0] main_propagateFloat64NaNexiti10ii_mux2vii8ii_reg;
reg [63:0] main_propagateFloat64NaNexiti10ii_mux2ii9ii;
reg [63:0] main_propagateFloat64NaNexiti10ii_mux2ii9ii_reg;
reg [63:0] main_387_388;
reg [63:0] main_387_388_reg;
reg [63:0] main_387_389;
reg [63:0] main_387_389_reg;
reg [63:0] main_387_390;
reg [63:0] main_387_390_reg;
reg [63:0] main_387_391;
reg [63:0] main_387_391_reg;
reg [63:0] main_392_393;
reg [63:0] main_392_393_reg;
reg [63:0] main_392_394;
reg [63:0] main_392_394_reg;
reg [63:0] main_shift64RightJammingexit9iii_395;
reg [63:0] main_shift64RightJammingexit9iii_395_reg;
reg [63:0] main_shift64RightJammingexit9iii_396;
reg [63:0] main_shift64RightJammingexit9iii_396_reg;
reg [31:0] main_shift64RightJammingexit9iii_zExp0i11ii;
reg [31:0] main_shift64RightJammingexit9iii_zExp0i11ii_reg;
reg [63:0] main_shift64RightJammingexit9iii_397;
reg [63:0] main_shift64RightJammingexit9iii_397_reg;
reg [63:0] main_shift64RightJammingexit9iii_398;
reg [63:0] main_shift64RightJammingexit9iii_398_reg;
reg [63:0] main_shift64RightJammingexit9iii_399;
reg [63:0] main_shift64RightJammingexit9iii_399_reg;
reg  main_shift64RightJammingexit9iii_400;
reg  main_shift64RightJammingexit9iii_400_reg;
reg  main_shift64RightJammingexit9iii_notiii;
reg  main_shift64RightJammingexit9iii_notiii_reg;
reg [31:0] main_shift64RightJammingexit9iii_401;
reg [31:0] main_shift64RightJammingexit9iii_401_reg;
reg [31:0] main_shift64RightJammingexit9iii_zExp0iii;
reg [31:0] main_shift64RightJammingexit9iii_zExp0iii_reg;
reg [63:0] main_shift64RightJammingexit9iii_ii2i;
reg [63:0] main_shift64RightJammingexit9iii_ii2i_reg;
reg [31:0] main_402_zExp1iii;
reg [31:0] main_402_zExp1iii_reg;
reg [63:0] main_402_zSig0i12ii;
reg [63:0] main_402_zSig0i12ii_reg;
reg [63:0] main_402_403;
reg [63:0] main_402_403_reg;
reg [63:0] main_404_405;
reg [63:0] main_404_405_reg;
reg [63:0] main_404_406;
reg [63:0] main_404_406_reg;
reg [63:0] main_404_407;
reg [63:0] main_404_407_reg;
reg [63:0] main_404_408;
reg [63:0] main_404_408_reg;
reg  main_404_409;
reg  main_404_409_reg;
reg  main_410_411;
reg  main_410_411_reg;
reg [63:0] main_413_414;
reg [63:0] main_413_414_reg;
reg  main_413_415;
reg  main_413_415_reg;
reg [63:0] main_416_417;
reg [63:0] main_416_417_reg;
reg  main_416_418;
reg  main_416_418_reg;
reg [63:0] main_419_420;
reg [63:0] main_419_420_reg;
reg  main_419_421;
reg  main_419_421_reg;
reg  main_float64_is_signaling_nanexit1i11iii_422;
reg  main_float64_is_signaling_nanexit1i11iii_422_reg;
reg [62:0] main_float64_is_signaling_nanexit1i11iii_423;
reg [62:0] main_float64_is_signaling_nanexit1i11iii_423_reg;
reg  main_float64_is_signaling_nanexit1i11iii_424;
reg  main_float64_is_signaling_nanexit1i11iii_424_reg;
reg [63:0] main_float64_is_signaling_nanexit1i11iii_425;
reg [63:0] main_float64_is_signaling_nanexit1i11iii_425_reg;
reg  main_float64_is_signaling_nanexit1i11iii_426;
reg  main_float64_is_signaling_nanexit1i11iii_426_reg;
reg [63:0] main_427_428;
reg [63:0] main_427_428_reg;
reg  main_427_429;
reg  main_427_429_reg;
reg  main_float64_is_signaling_nanexiti12iii_430;
reg  main_float64_is_signaling_nanexiti12iii_430_reg;
reg  main_float64_is_signaling_nanexiti12iii_431;
reg  main_float64_is_signaling_nanexiti12iii_431_reg;
reg [31:0] main_threadi13iii_432;
reg [31:0] main_threadi13iii_432_reg;
reg [31:0] main_threadi13iii_433;
reg [31:0] main_threadi13iii_433_reg;
reg  main_propagateFloat64NaNexit17iii_sinki14iii;
reg  main_propagateFloat64NaNexit17iii_sinki14iii_reg;
reg [63:0] main_propagateFloat64NaNexit17iii_mux2vi15iii;
reg [63:0] main_propagateFloat64NaNexit17iii_mux2vi15iii_reg;
reg [63:0] main_propagateFloat64NaNexit17iii_mux2i16iii;
reg [63:0] main_propagateFloat64NaNexit17iii_mux2i16iii_reg;
reg [31:0] main_434_435;
reg [31:0] main_434_435_reg;
reg [31:0] main_434_436;
reg [31:0] main_434_436_reg;
reg [31:0] main_438_aExp0iii;
reg [31:0] main_438_aExp0iii_reg;
reg [31:0] main_438_bExp0iii;
reg [31:0] main_438_bExp0iii_reg;
reg  main_438_439;
reg  main_438_439_reg;
reg  main_440_441;
reg  main_440_441_reg;
reg  main_442_443;
reg  main_442_443_reg;
reg  main_444_445;
reg  main_444_445_reg;
reg [63:0] main_446_447;
reg [63:0] main_446_447_reg;
reg  main_446_448;
reg  main_446_448_reg;
reg [63:0] main_449_450;
reg [63:0] main_449_450_reg;
reg  main_449_451;
reg  main_449_451_reg;
reg  main_float64_is_signaling_nanexit1i4iii_452;
reg  main_float64_is_signaling_nanexit1i4iii_452_reg;
reg [62:0] main_float64_is_signaling_nanexit1i4iii_453;
reg [62:0] main_float64_is_signaling_nanexit1i4iii_453_reg;
reg  main_float64_is_signaling_nanexit1i4iii_454;
reg  main_float64_is_signaling_nanexit1i4iii_454_reg;
reg [63:0] main_float64_is_signaling_nanexit1i4iii_455;
reg [63:0] main_float64_is_signaling_nanexit1i4iii_455_reg;
reg  main_float64_is_signaling_nanexit1i4iii_456;
reg  main_float64_is_signaling_nanexit1i4iii_456_reg;
reg [63:0] main_457_458;
reg [63:0] main_457_458_reg;
reg  main_457_459;
reg  main_457_459_reg;
reg  main_float64_is_signaling_nanexiti5iii_460;
reg  main_float64_is_signaling_nanexiti5iii_460_reg;
reg  main_float64_is_signaling_nanexiti5iii_461;
reg  main_float64_is_signaling_nanexiti5iii_461_reg;
reg [31:0] main_threadi6iii_462;
reg [31:0] main_threadi6iii_462_reg;
reg [31:0] main_threadi6iii_463;
reg [31:0] main_threadi6iii_463_reg;
reg  main_propagateFloat64NaNexit10iii_sinki7iii;
reg  main_propagateFloat64NaNexit10iii_sinki7iii_reg;
reg [63:0] main_propagateFloat64NaNexit10iii_mux2vi8iii;
reg [63:0] main_propagateFloat64NaNexit10iii_mux2vi8iii_reg;
reg [63:0] main_propagateFloat64NaNexit10iii_mux2i9iii;
reg [63:0] main_propagateFloat64NaNexit10iii_mux2i9iii_reg;
reg [31:0] main_464_465;
reg [31:0] main_464_465_reg;
reg [63:0] main_464_466;
reg [63:0] main_464_466_reg;
reg [63:0] main_464_467;
reg [63:0] main_464_467_reg;
reg [63:0] main_464_468;
reg [63:0] main_464_468_reg;
reg  main_469_470;
reg  main_469_470_reg;
reg [63:0] main_469_471;
reg [63:0] main_469_471_reg;
reg [63:0] main_469_472;
reg [63:0] main_469_472_reg;
reg [31:0] main_469_473;
reg [31:0] main_469_473_reg;
reg [31:0] main_469_expDiff0iii;
reg [31:0] main_469_expDiff0iii_reg;
reg [31:0] main_469_474;
reg [31:0] main_469_474_reg;
reg  main_469_475;
reg  main_469_475_reg;
reg  main_476_477;
reg  main_476_477_reg;
reg [63:0] main_478_479;
reg [63:0] main_478_479_reg;
reg [63:0] main_478_480;
reg [63:0] main_478_480_reg;
reg [31:0] main_478_481;
reg [31:0] main_478_481_reg;
reg [63:0] main_478_482;
reg [63:0] main_478_482_reg;
reg [63:0] main_478_483;
reg [63:0] main_478_483_reg;
reg  main_478_484;
reg  main_478_484_reg;
reg [63:0] main_478_485;
reg [63:0] main_478_485_reg;
reg [63:0] main_478_486;
reg [63:0] main_478_486_reg;
reg  main_487_488;
reg  main_487_488_reg;
reg [63:0] main_487_489;
reg [63:0] main_487_489_reg;
reg [63:0] main_shift64RightJammingexit3iii_z0i2iii;
reg [63:0] main_shift64RightJammingexit3iii_z0i2iii_reg;
reg [63:0] main_shift64RightJammingexit3iii_490;
reg [63:0] main_shift64RightJammingexit3iii_490_reg;
reg [63:0] main_491_492;
reg [63:0] main_491_492_reg;
reg [63:0] main_491_493;
reg [63:0] main_491_493_reg;
reg [31:0] main_491_bExp1iii;
reg [31:0] main_491_bExp1iii_reg;
reg [63:0] main_491_494;
reg [63:0] main_491_494_reg;
reg [31:0] main_491_495;
reg [31:0] main_491_495_reg;
reg  main_496_497;
reg  main_496_497_reg;
reg  main_498_499;
reg  main_498_499_reg;
reg [63:0] main_500_501;
reg [63:0] main_500_501_reg;
reg  main_500_502;
reg  main_500_502_reg;
reg [63:0] main_503_504;
reg [63:0] main_503_504_reg;
reg  main_503_505;
reg  main_503_505_reg;
reg  main_float64_is_signaling_nanexit1iiii_506;
reg  main_float64_is_signaling_nanexit1iiii_506_reg;
reg [62:0] main_float64_is_signaling_nanexit1iiii_507;
reg [62:0] main_float64_is_signaling_nanexit1iiii_507_reg;
reg  main_float64_is_signaling_nanexit1iiii_508;
reg  main_float64_is_signaling_nanexit1iiii_508_reg;
reg [63:0] main_float64_is_signaling_nanexit1iiii_509;
reg [63:0] main_float64_is_signaling_nanexit1iiii_509_reg;
reg  main_float64_is_signaling_nanexit1iiii_510;
reg  main_float64_is_signaling_nanexit1iiii_510_reg;
reg [63:0] main_511_512;
reg [63:0] main_511_512_reg;
reg  main_511_513;
reg  main_511_513_reg;
reg  main_float64_is_signaling_nanexitiiii_514;
reg  main_float64_is_signaling_nanexitiiii_514_reg;
reg  main_float64_is_signaling_nanexitiiii_515;
reg  main_float64_is_signaling_nanexitiiii_515_reg;
reg [31:0] main_threadiiii_516;
reg [31:0] main_threadiiii_516_reg;
reg [31:0] main_threadiiii_517;
reg [31:0] main_threadiiii_517_reg;
reg  main_propagateFloat64NaNexitiii_sinkiiii;
reg  main_propagateFloat64NaNexitiii_sinkiiii_reg;
reg [63:0] main_propagateFloat64NaNexitiii_mux2viiii;
reg [63:0] main_propagateFloat64NaNexitiii_mux2viiii_reg;
reg [63:0] main_propagateFloat64NaNexitiii_mux2iiii;
reg [63:0] main_propagateFloat64NaNexitiii_mux2iiii_reg;
reg  main_518_519;
reg  main_518_519_reg;
reg [63:0] main_518_520;
reg [63:0] main_518_520_reg;
reg [63:0] main_518_521;
reg [63:0] main_518_521_reg;
reg [31:0] main_518_522;
reg [31:0] main_518_522_reg;
reg [31:0] main_518_expDiff1iii;
reg [31:0] main_518_expDiff1iii_reg;
reg  main_518_523;
reg  main_518_523_reg;
reg  main_524_525;
reg  main_524_525_reg;
reg [63:0] main_526_527;
reg [63:0] main_526_527_reg;
reg [63:0] main_526_528;
reg [63:0] main_526_528_reg;
reg [31:0] main_526_529;
reg [31:0] main_526_529_reg;
reg [31:0] main_526_530;
reg [31:0] main_526_530_reg;
reg [63:0] main_526_531;
reg [63:0] main_526_531_reg;
reg [63:0] main_526_532;
reg [63:0] main_526_532_reg;
reg  main_526_533;
reg  main_526_533_reg;
reg [63:0] main_526_534;
reg [63:0] main_526_534_reg;
reg [63:0] main_526_535;
reg [63:0] main_526_535_reg;
reg  main_536_537;
reg  main_536_537_reg;
reg [63:0] main_536_538;
reg [63:0] main_536_538_reg;
reg [63:0] main_shift64RightJammingexitiii_z0iiii;
reg [63:0] main_shift64RightJammingexitiii_z0iiii_reg;
reg [63:0] main_shift64RightJammingexitiii_539;
reg [63:0] main_shift64RightJammingexitiii_539_reg;
reg [63:0] main_540_541;
reg [63:0] main_540_541_reg;
reg [63:0] main_540_542;
reg [63:0] main_540_542_reg;
reg [31:0] main_540_aExp1iii;
reg [31:0] main_540_aExp1iii_reg;
reg [63:0] main_540_543;
reg [63:0] main_540_543_reg;
reg [31:0] main_544_0iii;
reg [31:0] main_544_0iii_reg;
reg [31:0] main_544_zExp0iii;
reg [31:0] main_544_zExp0iii_reg;
reg [63:0] main_544_zSig0iii;
reg [63:0] main_544_zSig0iii_reg;
reg [31:0] main_544_545;
reg [31:0] main_544_545_reg;
reg  main_544_546;
reg  main_544_546_reg;
reg [63:0] main_544_547;
reg [63:0] main_544_547_reg;
reg [63:0] main_544_asinkiiiii;
reg [63:0] main_544_asinkiiiii_reg;
reg [31:0] main_544_extracttiiiii;
reg [31:0] main_544_extracttiiiii_reg;
reg  main_544_548;
reg  main_544_548_reg;
reg [31:0] main_544_549;
reg [31:0] main_544_549_reg;
reg [31:0] main_544_aiiiiii;
reg [31:0] main_544_aiiiiii_reg;
reg [31:0] main_544_iiiiii;
reg [31:0] main_544_iiiiii_reg;
reg  main_544_550;
reg  main_544_550_reg;
reg [31:0] main_551_552;
reg [31:0] main_551_552_reg;
reg [31:0] main_551_553;
reg [31:0] main_551_553_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_1iiiiii;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_1iiiiii_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_554;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_554_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeRoundAndPackFloat64exitiii_555;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeRoundAndPackFloat64exitiii_555_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_556;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_556_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_557;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_557_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_558;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_558_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_559;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_559_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_560;
reg [31:0] main_normalizeRoundAndPackFloat64exitiii_560_reg;
reg [63:0] main_normalizeRoundAndPackFloat64exitiii_561;
reg [63:0] main_normalizeRoundAndPackFloat64exitiii_561_reg;
reg [63:0] main_normalizeRoundAndPackFloat64exitiii_562;
reg [63:0] main_normalizeRoundAndPackFloat64exitiii_562_reg;
reg [63:0] main_normalizeRoundAndPackFloat64exitiii_563;
reg [63:0] main_normalizeRoundAndPackFloat64exitiii_563_reg;
reg [63:0] main_float64_addexiti_0i3i;
reg [63:0] main_float64_addexiti_0i3i_reg;
reg [63:0] main_float64_addexiti_564;
reg [63:0] main_float64_addexiti_564_reg;
reg  main_float64_addexiti_565;
reg  main_float64_addexiti_565_reg;
reg [63:0] main_float64_addexiti_566;
reg [63:0] main_float64_addexiti_566_reg;
reg  main_float64_addexiti_567;
reg  main_float64_addexiti_567_reg;
reg  main_float64_addexiti_orcond4iii;
reg  main_float64_addexiti_orcond4iii_reg;
reg [31:0] main_568_569;
reg [31:0] main_568_569_reg;
reg [31:0] main_568_570;
reg [31:0] main_568_570_reg;
reg [63:0] main_float64_geexiti_571;
reg [63:0] main_float64_geexiti_571_reg;
reg  main_float64_geexiti_572;
reg  main_float64_geexiti_572_reg;
reg [31:0] main_float64_geexiti_indvarnext;
reg [31:0] main_float64_geexiti_indvarnext_reg;
reg [63:0] main_dfsinexit_573;
reg [63:0] main_dfsinexit_573_reg;
reg  main_dfsinexit_574;
reg  main_dfsinexit_574_reg;
reg [31:0] main_dfsinexit_575;
reg [31:0] main_dfsinexit_575_reg;
reg [31:0] main_dfsinexit_576;
reg [31:0] main_dfsinexit_576_reg;
reg [31:0] main_dfsinexit_578;
reg [31:0] main_dfsinexit_578_reg;
reg  main_dfsinexit_exitcond5;
reg  main_dfsinexit_exitcond5_reg;
reg  main_579_581;
reg  main_579_581_reg;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [5:0] test_in_address_a;
reg  test_in_write_enable_a;
wire [63:0] test_in_in_a;
wire [63:0] test_in_out_a;
wire [5:0] test_in_address_b;
wire  test_in_write_enable_b;
wire [63:0] test_in_in_b;
wire [63:0] test_in_out_b;
reg [5:0] test_out_address_a;
reg  test_out_write_enable_a;
wire [63:0] test_out_in_a;
wire [63:0] test_out_out_a;
wire [5:0] test_out_address_b;
wire  test_out_write_enable_b;
wire [63:0] test_out_in_b;
wire [63:0] test_out_out_b;
wire [7:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [7:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
reg  float64_mul_start;
reg [63:0] float64_mul_arg_a;
reg [63:0] float64_mul_arg_b;
wire  float64_mul_memory_controller_enable_a;
wire  float64_mul_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] float64_mul_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] float64_mul_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] float64_mul_memory_controller_out_a;
wire [1:0] float64_mul_memory_controller_size_a;
wire  float64_mul_memory_controller_enable_b;
wire  float64_mul_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] float64_mul_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] float64_mul_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] float64_mul_memory_controller_out_b;
wire [1:0] float64_mul_memory_controller_size_b;
reg  float64_mul_memory_controller_waitrequest;
reg  float64_mul_finish_final;
reg  float64_mul_finish_reg;
wire  float64_mul_finish;
wire [63:0] float64_mul_return_val;
reg [63:0] float64_mul_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  roundAndPackFloat64_start;
reg [31:0] roundAndPackFloat64_arg_zSign;
reg [31:0] roundAndPackFloat64_arg_zExp;
reg [63:0] roundAndPackFloat64_arg_zSig;
wire  roundAndPackFloat64_memory_controller_enable_a;
wire  roundAndPackFloat64_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] roundAndPackFloat64_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_out_a;
wire [1:0] roundAndPackFloat64_memory_controller_size_a;
wire  roundAndPackFloat64_memory_controller_enable_b;
wire  roundAndPackFloat64_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] roundAndPackFloat64_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_out_b;
wire [1:0] roundAndPackFloat64_memory_controller_size_b;
reg  roundAndPackFloat64_memory_controller_waitrequest;
reg  roundAndPackFloat64_finish_final;
reg  roundAndPackFloat64_finish_reg;
wire  roundAndPackFloat64_finish;
wire [63:0] roundAndPackFloat64_return_val;
reg [63:0] roundAndPackFloat64_return_val_reg;
reg [63:0] main_unsigned_divide_64_0_op0;
reg [63:0] main_unsigned_divide_64_0_op1;
wire [63:0] lpm_divide_main_196_197_temp_out;
wire [63:0] main_196_197_unused;
reg  lpm_divide_main_196_197_en;
reg [63:0] lpm_divide_main_196_197_out;
reg [63:0] main_unsigned_divide_64_0;
reg  lpm_mult_main_5_10_en;
reg [31:0] main_5_10_stage0_reg;
reg  lpm_mult_main_199_203_en;
reg [63:0] main_199_203_stage0_reg;
reg  lpm_mult_main_199_204_en;
reg [63:0] main_199_204_stage0_reg;
reg  lpm_divide_main_225_226_en;
reg  lpm_mult_main_231_234_en;
reg [63:0] main_231_234_stage0_reg;
reg  lpm_mult_main_231_235_en;
reg [63:0] main_231_235_stage0_reg;
reg  lpm_mult_main_231_236_en;
reg [63:0] main_231_236_stage0_reg;
reg  lpm_mult_main_231_237_en;
reg [63:0] main_231_237_stage0_reg;

/*   %197 = udiv i64 %190, %193*/
lpm_divide lpm_divide_main_196_197 (
	.quotient (lpm_divide_main_196_197_temp_out),
	.remain (main_196_197_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_196_197_en),
	.numer (main_unsigned_divide_64_0_op0),
	.denom (main_unsigned_divide_64_0_op1)
);

defparam
	lpm_divide_main_196_197.lpm_pipeline = 64,
	lpm_divide_main_196_197.lpm_widthn = 64,
	lpm_divide_main_196_197.lpm_widthd = 64,
	lpm_divide_main_196_197.lpm_drepresentation = "UNSIGNED",
	lpm_divide_main_196_197.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_main_196_197.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


float64_mul float64_mul (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (float64_mul_memory_controller_enable_a),
	.memory_controller_address_a (float64_mul_memory_controller_address_a),
	.memory_controller_write_enable_a (float64_mul_memory_controller_write_enable_a),
	.memory_controller_in_a (float64_mul_memory_controller_in_a),
	.memory_controller_size_a (float64_mul_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (float64_mul_memory_controller_enable_b),
	.memory_controller_address_b (float64_mul_memory_controller_address_b),
	.memory_controller_write_enable_b (float64_mul_memory_controller_write_enable_b),
	.memory_controller_in_b (float64_mul_memory_controller_in_b),
	.memory_controller_size_b (float64_mul_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (float64_mul_start),
	.finish (float64_mul_finish),
	.return_val (float64_mul_return_val),
	.arg_a (float64_mul_arg_a),
	.arg_b (float64_mul_arg_b)
);

defparam
	float64_mul.tag_offset = tag_offset;


roundAndPackFloat64 roundAndPackFloat64 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (roundAndPackFloat64_memory_controller_enable_a),
	.memory_controller_address_a (roundAndPackFloat64_memory_controller_address_a),
	.memory_controller_write_enable_a (roundAndPackFloat64_memory_controller_write_enable_a),
	.memory_controller_in_a (roundAndPackFloat64_memory_controller_in_a),
	.memory_controller_size_a (roundAndPackFloat64_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (roundAndPackFloat64_memory_controller_enable_b),
	.memory_controller_address_b (roundAndPackFloat64_memory_controller_address_b),
	.memory_controller_write_enable_b (roundAndPackFloat64_memory_controller_write_enable_b),
	.memory_controller_in_b (roundAndPackFloat64_memory_controller_in_b),
	.memory_controller_size_b (roundAndPackFloat64_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (roundAndPackFloat64_start),
	.finish (roundAndPackFloat64_finish),
	.return_val (roundAndPackFloat64_return_val),
	.arg_zSign (roundAndPackFloat64_arg_zSign),
	.arg_zExp (roundAndPackFloat64_arg_zExp),
	.arg_zSig (roundAndPackFloat64_arg_zSig)
);

defparam
	roundAndPackFloat64.tag_offset = tag_offset;

// Local Rams


// @test_in = internal unnamed_addr constant [36 x i64] [i64 0, i64 4595456230317446593, i64 4599959829944817089, i64 4602891377065459793, i64 4604463429572187585, i64 4606035482078915377, i64 4607394976...
rom_dual_port test_in (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_in_address_a ),
	.address_b( test_in_address_b ),
	.q_a( test_in_out_a ),
	.q_b( test_in_out_b)
);
defparam test_in.width_a = 64;
defparam test_in.width_b = 64;
defparam test_in.widthad_a = 6;
defparam test_in.widthad_b = 6;
defparam test_in.numwords_a = 36;
defparam test_in.numwords_b = 36;
defparam test_in.latency = 1;
defparam test_in.init_file = "test_in.mif";


// @test_out = internal unnamed_addr constant [36 x i64] [i64 0, i64 4595424353983311309, i64 4599832905844899646, i64 4602678817326738065, i64 4603964934626362083, i64 4605075133481489574, i64 460597568...
rom_dual_port test_out (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_out_address_a ),
	.address_b( test_out_address_b ),
	.q_a( test_out_out_a ),
	.q_b( test_out_out_b)
);
defparam test_out.width_a = 64;
defparam test_out.width_b = 64;
defparam test_out.widthad_a = 6;
defparam test_out.widthad_b = 6;
defparam test_out.numwords_a = 36;
defparam test_out.numwords_b = 36;
defparam test_out.latency = 1;
defparam test_out.init_file = "test_out.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %dfsin.exit*/
	/*   %577 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([47 x i8]* @.str, i32 0, i32 0), i64 %2, i64 %573, i64 %.0.i3.i) #1*/
	if ((cur_state == LEGUP_F_main_BB_dfsinexit_359)) begin
		$write("input=%0x expected=%0x output=%0x\n", $signed(main_1_2_reg), $signed(main_dfsinexit_573), $signed(main_float64_addexiti_0i3i_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_2_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_dfsinexit_573) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_float64_addexiti_0i3i_reg) === 1'bX) finish <= 0;
	end
	/* main: %579*/
	/*   %580 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %576) #1*/
	if ((cur_state == LEGUP_F_main_BB__579_360)) begin
		$write("Result: %d\n", $signed(main_dfsinexit_576_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_dfsinexit_576_reg) === 1'bX) finish <= 0;
	end
	/* main: %582*/
	/*   %583 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__582_361)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %584*/
	/*   %585 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__584_362)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__101_45:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_46;
LEGUP_F_main_BB__109_47:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitiii_48;
LEGUP_F_main_BB__116_54:
		next_state = LEGUP_F_main_BB_float64_divexiti_230;
LEGUP_F_main_BB__118_55:
	if ((main_118_119 == 1'd1))
		next_state = LEGUP_F_main_BB__120_56;
	else if ((main_118_119 == 1'd0))
		next_state = LEGUP_F_main_BB__131_63;
LEGUP_F_main_BB__120_56:
		next_state = LEGUP_F_main_BB__120_57;
LEGUP_F_main_BB__120_57:
		next_state = LEGUP_F_main_BB__120_58;
LEGUP_F_main_BB__120_58:
	if ((main_120_123_reg == 1'd1))
		next_state = LEGUP_F_main_BB__125_59;
	else if ((main_120_123_reg == 1'd0))
		next_state = LEGUP_F_main_BB__127_61;
LEGUP_F_main_BB__125_59:
		next_state = LEGUP_F_main_BB__125_60;
LEGUP_F_main_BB__125_60:
		next_state = LEGUP_F_main_BB_float64_divexiti_230;
LEGUP_F_main_BB__127_61:
		next_state = LEGUP_F_main_BB__127_62;
LEGUP_F_main_BB__127_62:
		next_state = LEGUP_F_main_BB_float64_divexiti_230;
LEGUP_F_main_BB__12_8:
	if ((main_12_18 == 1'd1))
		next_state = LEGUP_F_main_BB__19_9;
	else if ((main_12_18 == 1'd0))
		next_state = LEGUP_F_main_BB_countLeadingZeros32exitii_10;
LEGUP_F_main_BB__131_63:
	if ((main_131_136 == 1'd1))
		next_state = LEGUP_F_main_BB__137_64;
	else if ((main_131_136 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_65;
LEGUP_F_main_BB__137_64:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_65;
LEGUP_F_main_BB__149_68:
	if ((main_149_152 == 1'd1))
		next_state = LEGUP_F_main_BB__153_69;
	else if ((main_149_152 == 1'd0))
		next_state = LEGUP_F_main_BB__175_76;
LEGUP_F_main_BB__153_69:
	if ((main_153_154 == 1'd1))
		next_state = LEGUP_F_main_BB__155_70;
	else if ((main_153_154 == 1'd0))
		next_state = LEGUP_F_main_BB__157_71;
LEGUP_F_main_BB__155_70:
		next_state = LEGUP_F_main_BB_float64_divexiti_230;
LEGUP_F_main_BB__157_71:
	if ((main_157_162 == 1'd1))
		next_state = LEGUP_F_main_BB__163_72;
	else if ((main_157_162 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_73;
LEGUP_F_main_BB__163_72:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_73;
LEGUP_F_main_BB__175_76:
	if ((main_175_185 == 1'd1))
		next_state = LEGUP_F_main_BB__189_78;
	else if ((main_175_185 == 1'd0))
		next_state = LEGUP_F_main_BB__186_77;
LEGUP_F_main_BB__186_77:
		next_state = LEGUP_F_main_BB__189_78;
LEGUP_F_main_BB__189_78:
	if ((main_189_191 == 1'd1))
		next_state = LEGUP_F_main_BB__192_79;
	else if ((main_189_191 == 1'd0))
		next_state = LEGUP_F_main_BB_estimateDiv128To64exitthreadii_227;
LEGUP_F_main_BB__192_79:
	if ((main_192_195 == 1'd1))
		next_state = LEGUP_F_main_BB__196_80;
	else if ((main_192_195 == 1'd0))
		next_state = LEGUP_F_main_BB__199_145;
LEGUP_F_main_BB__196_100:
		next_state = LEGUP_F_main_BB__196_101;
LEGUP_F_main_BB__196_101:
		next_state = LEGUP_F_main_BB__196_102;
LEGUP_F_main_BB__196_102:
		next_state = LEGUP_F_main_BB__196_103;
LEGUP_F_main_BB__196_103:
		next_state = LEGUP_F_main_BB__196_104;
LEGUP_F_main_BB__196_104:
		next_state = LEGUP_F_main_BB__196_105;
LEGUP_F_main_BB__196_105:
		next_state = LEGUP_F_main_BB__196_106;
LEGUP_F_main_BB__196_106:
		next_state = LEGUP_F_main_BB__196_107;
LEGUP_F_main_BB__196_107:
		next_state = LEGUP_F_main_BB__196_108;
LEGUP_F_main_BB__196_108:
		next_state = LEGUP_F_main_BB__196_109;
LEGUP_F_main_BB__196_109:
		next_state = LEGUP_F_main_BB__196_110;
LEGUP_F_main_BB__196_110:
		next_state = LEGUP_F_main_BB__196_111;
LEGUP_F_main_BB__196_111:
		next_state = LEGUP_F_main_BB__196_112;
LEGUP_F_main_BB__196_112:
		next_state = LEGUP_F_main_BB__196_113;
LEGUP_F_main_BB__196_113:
		next_state = LEGUP_F_main_BB__196_114;
LEGUP_F_main_BB__196_114:
		next_state = LEGUP_F_main_BB__196_115;
LEGUP_F_main_BB__196_115:
		next_state = LEGUP_F_main_BB__196_116;
LEGUP_F_main_BB__196_116:
		next_state = LEGUP_F_main_BB__196_117;
LEGUP_F_main_BB__196_117:
		next_state = LEGUP_F_main_BB__196_118;
LEGUP_F_main_BB__196_118:
		next_state = LEGUP_F_main_BB__196_119;
LEGUP_F_main_BB__196_119:
		next_state = LEGUP_F_main_BB__196_120;
LEGUP_F_main_BB__196_120:
		next_state = LEGUP_F_main_BB__196_121;
LEGUP_F_main_BB__196_121:
		next_state = LEGUP_F_main_BB__196_122;
LEGUP_F_main_BB__196_122:
		next_state = LEGUP_F_main_BB__196_123;
LEGUP_F_main_BB__196_123:
		next_state = LEGUP_F_main_BB__196_124;
LEGUP_F_main_BB__196_124:
		next_state = LEGUP_F_main_BB__196_125;
LEGUP_F_main_BB__196_125:
		next_state = LEGUP_F_main_BB__196_126;
LEGUP_F_main_BB__196_126:
		next_state = LEGUP_F_main_BB__196_127;
LEGUP_F_main_BB__196_127:
		next_state = LEGUP_F_main_BB__196_128;
LEGUP_F_main_BB__196_128:
		next_state = LEGUP_F_main_BB__196_129;
LEGUP_F_main_BB__196_129:
		next_state = LEGUP_F_main_BB__196_130;
LEGUP_F_main_BB__196_130:
		next_state = LEGUP_F_main_BB__196_131;
LEGUP_F_main_BB__196_131:
		next_state = LEGUP_F_main_BB__196_132;
LEGUP_F_main_BB__196_132:
		next_state = LEGUP_F_main_BB__196_133;
LEGUP_F_main_BB__196_133:
		next_state = LEGUP_F_main_BB__196_134;
LEGUP_F_main_BB__196_134:
		next_state = LEGUP_F_main_BB__196_135;
LEGUP_F_main_BB__196_135:
		next_state = LEGUP_F_main_BB__196_136;
LEGUP_F_main_BB__196_136:
		next_state = LEGUP_F_main_BB__196_137;
LEGUP_F_main_BB__196_137:
		next_state = LEGUP_F_main_BB__196_138;
LEGUP_F_main_BB__196_138:
		next_state = LEGUP_F_main_BB__196_139;
LEGUP_F_main_BB__196_139:
		next_state = LEGUP_F_main_BB__196_140;
LEGUP_F_main_BB__196_140:
		next_state = LEGUP_F_main_BB__196_141;
LEGUP_F_main_BB__196_141:
		next_state = LEGUP_F_main_BB__196_142;
LEGUP_F_main_BB__196_142:
		next_state = LEGUP_F_main_BB__196_143;
LEGUP_F_main_BB__196_143:
		next_state = LEGUP_F_main_BB__196_144;
LEGUP_F_main_BB__196_144:
		next_state = LEGUP_F_main_BB__199_145;
LEGUP_F_main_BB__196_80:
		next_state = LEGUP_F_main_BB__196_81;
LEGUP_F_main_BB__196_81:
		next_state = LEGUP_F_main_BB__196_82;
LEGUP_F_main_BB__196_82:
		next_state = LEGUP_F_main_BB__196_83;
LEGUP_F_main_BB__196_83:
		next_state = LEGUP_F_main_BB__196_84;
LEGUP_F_main_BB__196_84:
		next_state = LEGUP_F_main_BB__196_85;
LEGUP_F_main_BB__196_85:
		next_state = LEGUP_F_main_BB__196_86;
LEGUP_F_main_BB__196_86:
		next_state = LEGUP_F_main_BB__196_87;
LEGUP_F_main_BB__196_87:
		next_state = LEGUP_F_main_BB__196_88;
LEGUP_F_main_BB__196_88:
		next_state = LEGUP_F_main_BB__196_89;
LEGUP_F_main_BB__196_89:
		next_state = LEGUP_F_main_BB__196_90;
LEGUP_F_main_BB__196_90:
		next_state = LEGUP_F_main_BB__196_91;
LEGUP_F_main_BB__196_91:
		next_state = LEGUP_F_main_BB__196_92;
LEGUP_F_main_BB__196_92:
		next_state = LEGUP_F_main_BB__196_93;
LEGUP_F_main_BB__196_93:
		next_state = LEGUP_F_main_BB__196_94;
LEGUP_F_main_BB__196_94:
		next_state = LEGUP_F_main_BB__196_95;
LEGUP_F_main_BB__196_95:
		next_state = LEGUP_F_main_BB__196_96;
LEGUP_F_main_BB__196_96:
		next_state = LEGUP_F_main_BB__196_97;
LEGUP_F_main_BB__196_97:
		next_state = LEGUP_F_main_BB__196_98;
LEGUP_F_main_BB__196_98:
		next_state = LEGUP_F_main_BB__196_99;
LEGUP_F_main_BB__196_99:
		next_state = LEGUP_F_main_BB__196_100;
LEGUP_F_main_BB__199_145:
		next_state = LEGUP_F_main_BB__199_146;
LEGUP_F_main_BB__199_146:
	if ((main_199_211 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphiii_147;
	else if ((main_199_211 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgeiii_151;
LEGUP_F_main_BB__19_9:
		next_state = LEGUP_F_main_BB_countLeadingZeros32exitii_10;
LEGUP_F_main_BB__1_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_function_call_3;
LEGUP_F_main_BB__1_4:
		next_state = LEGUP_F_main_BB__5_5;
LEGUP_F_main_BB__213_148:
		next_state = LEGUP_F_main_BB__213_149;
LEGUP_F_main_BB__213_149:
	if ((main_213_220 == 1'd1))
		next_state = LEGUP_F_main_BB__213_148;
	else if ((main_213_220 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgeiiiloopexit_150;
LEGUP_F_main_BB__225_152:
		next_state = LEGUP_F_main_BB__225_153;
LEGUP_F_main_BB__225_153:
		next_state = LEGUP_F_main_BB__225_154;
LEGUP_F_main_BB__225_154:
		next_state = LEGUP_F_main_BB__225_155;
LEGUP_F_main_BB__225_155:
		next_state = LEGUP_F_main_BB__225_156;
LEGUP_F_main_BB__225_156:
		next_state = LEGUP_F_main_BB__225_157;
LEGUP_F_main_BB__225_157:
		next_state = LEGUP_F_main_BB__225_158;
LEGUP_F_main_BB__225_158:
		next_state = LEGUP_F_main_BB__225_159;
LEGUP_F_main_BB__225_159:
		next_state = LEGUP_F_main_BB__225_160;
LEGUP_F_main_BB__225_160:
		next_state = LEGUP_F_main_BB__225_161;
LEGUP_F_main_BB__225_161:
		next_state = LEGUP_F_main_BB__225_162;
LEGUP_F_main_BB__225_162:
		next_state = LEGUP_F_main_BB__225_163;
LEGUP_F_main_BB__225_163:
		next_state = LEGUP_F_main_BB__225_164;
LEGUP_F_main_BB__225_164:
		next_state = LEGUP_F_main_BB__225_165;
LEGUP_F_main_BB__225_165:
		next_state = LEGUP_F_main_BB__225_166;
LEGUP_F_main_BB__225_166:
		next_state = LEGUP_F_main_BB__225_167;
LEGUP_F_main_BB__225_167:
		next_state = LEGUP_F_main_BB__225_168;
LEGUP_F_main_BB__225_168:
		next_state = LEGUP_F_main_BB__225_169;
LEGUP_F_main_BB__225_169:
		next_state = LEGUP_F_main_BB__225_170;
LEGUP_F_main_BB__225_170:
		next_state = LEGUP_F_main_BB__225_171;
LEGUP_F_main_BB__225_171:
		next_state = LEGUP_F_main_BB__225_172;
LEGUP_F_main_BB__225_172:
		next_state = LEGUP_F_main_BB__225_173;
LEGUP_F_main_BB__225_173:
		next_state = LEGUP_F_main_BB__225_174;
LEGUP_F_main_BB__225_174:
		next_state = LEGUP_F_main_BB__225_175;
LEGUP_F_main_BB__225_175:
		next_state = LEGUP_F_main_BB__225_176;
LEGUP_F_main_BB__225_176:
		next_state = LEGUP_F_main_BB__225_177;
LEGUP_F_main_BB__225_177:
		next_state = LEGUP_F_main_BB__225_178;
LEGUP_F_main_BB__225_178:
		next_state = LEGUP_F_main_BB__225_179;
LEGUP_F_main_BB__225_179:
		next_state = LEGUP_F_main_BB__225_180;
LEGUP_F_main_BB__225_180:
		next_state = LEGUP_F_main_BB__225_181;
LEGUP_F_main_BB__225_181:
		next_state = LEGUP_F_main_BB__225_182;
LEGUP_F_main_BB__225_182:
		next_state = LEGUP_F_main_BB__225_183;
LEGUP_F_main_BB__225_183:
		next_state = LEGUP_F_main_BB__225_184;
LEGUP_F_main_BB__225_184:
		next_state = LEGUP_F_main_BB__225_185;
LEGUP_F_main_BB__225_185:
		next_state = LEGUP_F_main_BB__225_186;
LEGUP_F_main_BB__225_186:
		next_state = LEGUP_F_main_BB__225_187;
LEGUP_F_main_BB__225_187:
		next_state = LEGUP_F_main_BB__225_188;
LEGUP_F_main_BB__225_188:
		next_state = LEGUP_F_main_BB__225_189;
LEGUP_F_main_BB__225_189:
		next_state = LEGUP_F_main_BB__225_190;
LEGUP_F_main_BB__225_190:
		next_state = LEGUP_F_main_BB__225_191;
LEGUP_F_main_BB__225_191:
		next_state = LEGUP_F_main_BB__225_192;
LEGUP_F_main_BB__225_192:
		next_state = LEGUP_F_main_BB__225_193;
LEGUP_F_main_BB__225_193:
		next_state = LEGUP_F_main_BB__225_194;
LEGUP_F_main_BB__225_194:
		next_state = LEGUP_F_main_BB__225_195;
LEGUP_F_main_BB__225_195:
		next_state = LEGUP_F_main_BB__225_196;
LEGUP_F_main_BB__225_196:
		next_state = LEGUP_F_main_BB__225_197;
LEGUP_F_main_BB__225_197:
		next_state = LEGUP_F_main_BB__225_198;
LEGUP_F_main_BB__225_198:
		next_state = LEGUP_F_main_BB__225_199;
LEGUP_F_main_BB__225_199:
		next_state = LEGUP_F_main_BB__225_200;
LEGUP_F_main_BB__225_200:
		next_state = LEGUP_F_main_BB__225_201;
LEGUP_F_main_BB__225_201:
		next_state = LEGUP_F_main_BB__225_202;
LEGUP_F_main_BB__225_202:
		next_state = LEGUP_F_main_BB__225_203;
LEGUP_F_main_BB__225_203:
		next_state = LEGUP_F_main_BB__225_204;
LEGUP_F_main_BB__225_204:
		next_state = LEGUP_F_main_BB__225_205;
LEGUP_F_main_BB__225_205:
		next_state = LEGUP_F_main_BB__225_206;
LEGUP_F_main_BB__225_206:
		next_state = LEGUP_F_main_BB__225_207;
LEGUP_F_main_BB__225_207:
		next_state = LEGUP_F_main_BB__225_208;
LEGUP_F_main_BB__225_208:
		next_state = LEGUP_F_main_BB__225_209;
LEGUP_F_main_BB__225_209:
		next_state = LEGUP_F_main_BB__225_210;
LEGUP_F_main_BB__225_210:
		next_state = LEGUP_F_main_BB__225_211;
LEGUP_F_main_BB__225_211:
		next_state = LEGUP_F_main_BB__225_212;
LEGUP_F_main_BB__225_212:
		next_state = LEGUP_F_main_BB__225_213;
LEGUP_F_main_BB__225_213:
		next_state = LEGUP_F_main_BB__225_214;
LEGUP_F_main_BB__225_214:
		next_state = LEGUP_F_main_BB__225_215;
LEGUP_F_main_BB__225_215:
		next_state = LEGUP_F_main_BB__225_216;
LEGUP_F_main_BB__225_216:
		next_state = LEGUP_F_main_BB_estimateDiv128To64exitii_217;
LEGUP_F_main_BB__231_218:
		next_state = LEGUP_F_main_BB__231_219;
LEGUP_F_main_BB__231_219:
		next_state = LEGUP_F_main_BB__231_220;
LEGUP_F_main_BB__231_220:
		next_state = LEGUP_F_main_BB__231_221;
LEGUP_F_main_BB__231_221:
	if ((main_231_247 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphiipreheader_222;
	else if ((main_231_247 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgeii_226;
LEGUP_F_main_BB__268_231:
	if ((main_268_273 == 1'd1))
		next_state = LEGUP_F_main_BB__274_232;
	else if ((main_268_273 == 1'd0))
		next_state = LEGUP_F_main_BB__317_248;
LEGUP_F_main_BB__274_232:
	if ((main_274_275 == 1'd1))
		next_state = LEGUP_F_main_BB__276_233;
	else if ((main_274_275 == 1'd0))
		next_state = LEGUP_F_main_BB__296_244;
LEGUP_F_main_BB__276_233:
	if ((main_276_277 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
	else if ((main_276_277 == 1'd0))
		next_state = LEGUP_F_main_BB__278_234;
LEGUP_F_main_BB__278_234:
	if ((main_278_280 == 1'd1))
		next_state = LEGUP_F_main_BB__281_235;
	else if ((main_278_280 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i10iii_236;
LEGUP_F_main_BB__281_235:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i10iii_236;
LEGUP_F_main_BB__289_237:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti11iii_238;
LEGUP_F_main_BB__296_244:
	if ((main_296_301 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9iii_280;
	else if ((main_296_301 == 1'd0))
		next_state = LEGUP_F_main_BB__302_245;
LEGUP_F_main_BB__302_245:
	if ((main_302_303 == 1'd1))
		next_state = LEGUP_F_main_BB__304_246;
	else if ((main_302_303 == 1'd0))
		next_state = LEGUP_F_main_BB__314_247;
LEGUP_F_main_BB__304_246:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9iii_280;
LEGUP_F_main_BB__314_247:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9iii_280;
LEGUP_F_main_BB__317_248:
	if ((main_317_318 == 1'd1))
		next_state = LEGUP_F_main_BB__319_249;
	else if ((main_317_318 == 1'd0))
		next_state = LEGUP_F_main_BB__365_266;
LEGUP_F_main_BB__319_249:
	if ((main_319_320 == 1'd1))
		next_state = LEGUP_F_main_BB__321_250;
	else if ((main_319_320 == 1'd0))
		next_state = LEGUP_F_main_BB__344_262;
LEGUP_F_main_BB__321_250:
	if ((main_321_322 == 1'd1))
		next_state = LEGUP_F_main_BB__341_261;
	else if ((main_321_322 == 1'd0))
		next_state = LEGUP_F_main_BB__323_251;
LEGUP_F_main_BB__323_251:
	if ((main_323_325 == 1'd1))
		next_state = LEGUP_F_main_BB__326_252;
	else if ((main_323_325 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i1iii_253;
LEGUP_F_main_BB__326_252:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i1iii_253;
LEGUP_F_main_BB__334_254:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti2iii_255;
LEGUP_F_main_BB__341_261:
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB__344_262:
	if ((main_344_350 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9iii_280;
	else if ((main_344_350 == 1'd0))
		next_state = LEGUP_F_main_BB__351_263;
LEGUP_F_main_BB__351_263:
	if ((main_351_352 == 1'd1))
		next_state = LEGUP_F_main_BB__353_264;
	else if ((main_351_352 == 1'd0))
		next_state = LEGUP_F_main_BB__362_265;
LEGUP_F_main_BB__353_264:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9iii_280;
LEGUP_F_main_BB__362_265:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9iii_280;
LEGUP_F_main_BB__365_266:
	if ((main_float64_divexiti_264_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__366_267;
	else if ((main_float64_divexiti_264_reg == 32'd0))
		next_state = LEGUP_F_main_BB__387_278;
	else if ((main_float64_divexiti_264_reg != 32'd2047) && (main_float64_divexiti_264_reg != 32'd0))
		next_state = LEGUP_F_main_BB__392_279;
LEGUP_F_main_BB__366_267:
	if ((main_366_368 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
	else if ((main_366_368 == 1'd0))
		next_state = LEGUP_F_main_BB__369_268;
LEGUP_F_main_BB__369_268:
	if ((main_369_371 == 1'd1))
		next_state = LEGUP_F_main_BB__372_269;
	else if ((main_369_371 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4ii_270;
LEGUP_F_main_BB__372_269:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4ii_270;
LEGUP_F_main_BB__380_271:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitii5ii_272;
LEGUP_F_main_BB__387_278:
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB__392_279:
		next_state = LEGUP_F_main_BB__402_283;
LEGUP_F_main_BB__402_283:
		next_state = LEGUP_function_call_284;
LEGUP_F_main_BB__402_285:
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB__404_286:
	if ((main_404_409 == 1'd1))
		next_state = LEGUP_F_main_BB__496_326;
	else if ((main_404_409 == 1'd0))
		next_state = LEGUP_F_main_BB__410_287;
LEGUP_F_main_BB__410_287:
	if ((main_410_411 == 1'd1))
		next_state = LEGUP_F_main_BB__442_307;
	else if ((main_410_411 == 1'd0))
		next_state = LEGUP_F_main_BB__412_288;
LEGUP_F_main_BB__412_288:
	if ((main_float64_divexiti_264_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__413_289;
	else if ((main_float64_divexiti_264_reg == 32'd0))
		next_state = LEGUP_F_main_BB__437_304;
	else if ((main_float64_divexiti_264_reg != 32'd2047) && (main_float64_divexiti_264_reg != 32'd0))
		next_state = LEGUP_F_main_BB__438_305;
LEGUP_F_main_BB__413_289:
	if ((main_413_415 == 1'd1))
		next_state = LEGUP_F_main_BB__434_300;
	else if ((main_413_415 == 1'd0))
		next_state = LEGUP_F_main_BB__416_290;
LEGUP_F_main_BB__416_290:
	if ((main_416_418 == 1'd1))
		next_state = LEGUP_F_main_BB__419_291;
	else if ((main_416_418 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i11iii_292;
LEGUP_F_main_BB__419_291:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i11iii_292;
LEGUP_F_main_BB__427_293:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti12iii_294;
LEGUP_F_main_BB__434_300:
		next_state = LEGUP_F_main_BB__434_301;
LEGUP_F_main_BB__434_301:
		next_state = LEGUP_F_main_BB__434_302;
LEGUP_F_main_BB__434_302:
		next_state = LEGUP_F_main_BB__434_303;
LEGUP_F_main_BB__434_303:
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB__437_304:
		next_state = LEGUP_F_main_BB__438_305;
LEGUP_F_main_BB__438_305:
	if ((main_438_439 == 1'd1))
		next_state = LEGUP_F_main_BB__540_343;
	else if ((main_438_439 == 1'd0))
		next_state = LEGUP_F_main_BB__440_306;
LEGUP_F_main_BB__440_306:
	if ((main_440_441 == 1'd1))
		next_state = LEGUP_F_main_BB__491_325;
	else if ((main_440_441 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB__442_307:
	if ((main_442_443 == 1'd1))
		next_state = LEGUP_F_main_BB__444_308;
	else if ((main_442_443 == 1'd0))
		next_state = LEGUP_F_main_BB__469_320;
LEGUP_F_main_BB__444_308:
	if ((main_444_445 == 1'd1))
		next_state = LEGUP_F_main_BB__464_319;
	else if ((main_444_445 == 1'd0))
		next_state = LEGUP_F_main_BB__446_309;
LEGUP_F_main_BB__446_309:
	if ((main_446_448 == 1'd1))
		next_state = LEGUP_F_main_BB__449_310;
	else if ((main_446_448 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i4iii_311;
LEGUP_F_main_BB__449_310:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i4iii_311;
LEGUP_F_main_BB__457_312:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti5iii_313;
LEGUP_F_main_BB__464_319:
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB__469_320:
	if ((main_469_475 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3iii_324;
	else if ((main_469_475 == 1'd0))
		next_state = LEGUP_F_main_BB__476_321;
LEGUP_F_main_BB__476_321:
	if ((main_476_477 == 1'd1))
		next_state = LEGUP_F_main_BB__478_322;
	else if ((main_476_477 == 1'd0))
		next_state = LEGUP_F_main_BB__487_323;
LEGUP_F_main_BB__478_322:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3iii_324;
LEGUP_F_main_BB__47_14:
	if ((main_47_48 == 1'd1))
		next_state = LEGUP_F_main_BB__67_25;
	else if ((main_47_48 == 1'd0))
		next_state = LEGUP_F_main_BB__49_15;
LEGUP_F_main_BB__487_323:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3iii_324;
LEGUP_F_main_BB__491_325:
		next_state = LEGUP_F_main_BB__544_344;
LEGUP_F_main_BB__496_326:
	if ((main_496_497 == 1'd1))
		next_state = LEGUP_F_main_BB__498_327;
	else if ((main_496_497 == 1'd0))
		next_state = LEGUP_F_main_BB__518_338;
LEGUP_F_main_BB__498_327:
	if ((main_498_499 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
	else if ((main_498_499 == 1'd0))
		next_state = LEGUP_F_main_BB__500_328;
LEGUP_F_main_BB__49_15:
	if ((main_49_51 == 1'd1))
		next_state = LEGUP_F_main_BB__52_16;
	else if ((main_49_51 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i17ii_17;
LEGUP_F_main_BB__500_328:
	if ((main_500_502 == 1'd1))
		next_state = LEGUP_F_main_BB__503_329;
	else if ((main_500_502 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1iiii_330;
LEGUP_F_main_BB__503_329:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1iiii_330;
LEGUP_F_main_BB__511_331:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitiiii_332;
LEGUP_F_main_BB__518_338:
	if ((main_518_523 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexitiii_342;
	else if ((main_518_523 == 1'd0))
		next_state = LEGUP_F_main_BB__524_339;
LEGUP_F_main_BB__524_339:
	if ((main_524_525 == 1'd1))
		next_state = LEGUP_F_main_BB__526_340;
	else if ((main_524_525 == 1'd0))
		next_state = LEGUP_F_main_BB__536_341;
LEGUP_F_main_BB__526_340:
		next_state = LEGUP_F_main_BB_shift64RightJammingexitiii_342;
LEGUP_F_main_BB__52_16:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i17ii_17;
LEGUP_F_main_BB__536_341:
		next_state = LEGUP_F_main_BB_shift64RightJammingexitiii_342;
LEGUP_F_main_BB__540_343:
		next_state = LEGUP_F_main_BB__544_344;
LEGUP_F_main_BB__544_344:
	if ((main_544_550 == 1'd1))
		next_state = LEGUP_F_main_BB__551_345;
	else if ((main_544_550 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_346;
LEGUP_F_main_BB__551_345:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_346;
LEGUP_F_main_BB__568_352:
		next_state = LEGUP_F_main_BB__568_353;
LEGUP_F_main_BB__568_353:
		next_state = LEGUP_F_main_BB__568_354;
LEGUP_F_main_BB__568_354:
		next_state = LEGUP_F_main_BB__568_355;
LEGUP_F_main_BB__568_355:
		next_state = LEGUP_F_main_BB_dfsinexit_358;
LEGUP_F_main_BB__579_360:
	if ((main_579_581 == 1'd1))
		next_state = LEGUP_F_main_BB__582_361;
	else if ((main_579_581 == 1'd0))
		next_state = LEGUP_F_main_BB__584_362;
LEGUP_F_main_BB__582_361:
		next_state = LEGUP_F_main_BB__586_363;
LEGUP_F_main_BB__584_362:
		next_state = LEGUP_F_main_BB__586_363;
LEGUP_F_main_BB__586_363:
		next_state = LEGUP_0;
LEGUP_F_main_BB__5_5:
		next_state = LEGUP_function_call_6;
LEGUP_F_main_BB__5_7:
	if ((main_5_11 == 1'd1))
		next_state = LEGUP_F_main_BB_int32_to_float64exiti_13;
	else if ((main_5_11 == 1'd0))
		next_state = LEGUP_F_main_BB__12_8;
LEGUP_F_main_BB__60_18:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti18ii_19;
LEGUP_F_main_BB__67_25:
	if ((main_67_68 == 1'd1))
		next_state = LEGUP_F_main_BB__69_26;
	else if ((main_67_68 == 1'd0))
		next_state = LEGUP_F_main_BB__92_41;
LEGUP_F_main_BB__69_26:
	if ((main_69_70 == 1'd1))
		next_state = LEGUP_F_main_BB__89_37;
	else if ((main_69_70 == 1'd0))
		next_state = LEGUP_F_main_BB__71_27;
LEGUP_F_main_BB__71_27:
	if ((main_71_73 == 1'd1))
		next_state = LEGUP_F_main_BB__74_28;
	else if ((main_71_73 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_29;
LEGUP_F_main_BB__74_28:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_29;
LEGUP_F_main_BB__82_30:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_31;
LEGUP_F_main_BB__89_37:
		next_state = LEGUP_F_main_BB__89_38;
LEGUP_F_main_BB__89_38:
		next_state = LEGUP_F_main_BB__89_39;
LEGUP_F_main_BB__89_39:
		next_state = LEGUP_F_main_BB__89_40;
LEGUP_F_main_BB__89_40:
		next_state = LEGUP_F_main_BB_float64_divexiti_230;
LEGUP_F_main_BB__92_41:
		next_state = LEGUP_F_main_BB_float64_divexiti_230;
LEGUP_F_main_BB__95_42:
	if ((main_int32_to_float64exiti_42_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__96_43;
	else if ((main_int32_to_float64exiti_42_reg == 32'd0))
		next_state = LEGUP_F_main_BB__118_55;
	else if ((main_int32_to_float64exiti_42_reg != 32'd2047) && (main_int32_to_float64exiti_42_reg != 32'd0))
		next_state = LEGUP_F_main_BB__149_68;
LEGUP_F_main_BB__96_43:
	if ((main_96_97 == 1'd1))
		next_state = LEGUP_F_main_BB__116_54;
	else if ((main_96_97 == 1'd0))
		next_state = LEGUP_F_main_BB__98_44;
LEGUP_F_main_BB__98_44:
	if ((main_98_100 == 1'd1))
		next_state = LEGUP_F_main_BB__101_45;
	else if ((main_98_100 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_46;
LEGUP_F_main_BB__crit_edgeii_226:
		next_state = LEGUP_F_main_BB_estimateDiv128To64exitthreadii_227;
LEGUP_F_main_BB__crit_edgeiii_151:
	if ((main__crit_edgeiii_224 == 1'd1))
		next_state = LEGUP_F_main_BB__225_152;
	else if ((main__crit_edgeiii_224 == 1'd0))
		next_state = LEGUP_F_main_BB_estimateDiv128To64exitii_217;
LEGUP_F_main_BB__crit_edgeiiiloopexit_150:
		next_state = LEGUP_F_main_BB__crit_edgeiii_151;
LEGUP_F_main_BB__crit_edgeiiloopexit_225:
		next_state = LEGUP_F_main_BB__crit_edgeii_226;
LEGUP_F_main_BB_countLeadingZeros32exitii_10:
		next_state = LEGUP_F_main_BB_countLeadingZeros32exitii_11;
LEGUP_F_main_BB_countLeadingZeros32exitii_11:
		next_state = LEGUP_F_main_BB_countLeadingZeros32exitii_12;
LEGUP_F_main_BB_countLeadingZeros32exitii_12:
		next_state = LEGUP_F_main_BB_int32_to_float64exiti_13;
LEGUP_F_main_BB_dfsinexit_358:
		next_state = LEGUP_F_main_BB_dfsinexit_359;
LEGUP_F_main_BB_dfsinexit_359:
	if ((main_dfsinexit_exitcond5_reg == 1'd1))
		next_state = LEGUP_F_main_BB__579_360;
	else if ((main_dfsinexit_exitcond5_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB_dfsinexitloopexit_357:
		next_state = LEGUP_F_main_BB_dfsinexit_358;
LEGUP_F_main_BB_estimateDiv128To64exitii_217:
	if ((main_estimateDiv128To64exitii_230 == 1'd1))
		next_state = LEGUP_F_main_BB__231_218;
	else if ((main_estimateDiv128To64exitii_230 == 1'd0))
		next_state = LEGUP_F_main_BB_estimateDiv128To64exitthreadii_227;
LEGUP_F_main_BB_estimateDiv128To64exitthreadii_227:
		next_state = LEGUP_function_call_228;
LEGUP_F_main_BB_estimateDiv128To64exitthreadii_229:
		next_state = LEGUP_F_main_BB_float64_divexiti_230;
LEGUP_F_main_BB_float64_addexiti_351:
	if ((main_float64_addexiti_orcond4iii == 1'd1))
		next_state = LEGUP_F_main_BB_float64_geexiti_356;
	else if ((main_float64_addexiti_orcond4iii == 1'd0))
		next_state = LEGUP_F_main_BB__568_352;
LEGUP_F_main_BB_float64_divexiti_230:
	if ((main_float64_divexiti_262 == 1'd1))
		next_state = LEGUP_F_main_BB__268_231;
	else if ((main_float64_divexiti_262 == 1'd0))
		next_state = LEGUP_F_main_BB__404_286;
LEGUP_F_main_BB_float64_geexiti_356:
	if ((main_float64_geexiti_572 == 1'd1))
		next_state = LEGUP_F_main_BB__5_5;
	else if ((main_float64_geexiti_572 == 1'd0))
		next_state = LEGUP_F_main_BB_dfsinexitloopexit_357;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_29:
	if ((main_float64_is_signaling_nanexit1i10ii_81 == 1'd1))
		next_state = LEGUP_F_main_BB__82_30;
	else if ((main_float64_is_signaling_nanexit1i10ii_81 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_31;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i10iii_236:
	if ((main_float64_is_signaling_nanexit1i10iii_288 == 1'd1))
		next_state = LEGUP_F_main_BB__289_237;
	else if ((main_float64_is_signaling_nanexit1i10iii_288 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti11iii_238;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i11iii_292:
	if ((main_float64_is_signaling_nanexit1i11iii_426 == 1'd1))
		next_state = LEGUP_F_main_BB__427_293;
	else if ((main_float64_is_signaling_nanexit1i11iii_426 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti12iii_294;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i17ii_17:
	if ((main_float64_is_signaling_nanexit1i17ii_59 == 1'd1))
		next_state = LEGUP_F_main_BB__60_18;
	else if ((main_float64_is_signaling_nanexit1i17ii_59 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti18ii_19;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i1iii_253:
	if ((main_float64_is_signaling_nanexit1i1iii_333 == 1'd1))
		next_state = LEGUP_F_main_BB__334_254;
	else if ((main_float64_is_signaling_nanexit1i1iii_333 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti2iii_255;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i4iii_311:
	if ((main_float64_is_signaling_nanexit1i4iii_456 == 1'd1))
		next_state = LEGUP_F_main_BB__457_312;
	else if ((main_float64_is_signaling_nanexit1i4iii_456 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti5iii_313;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4ii_270:
	if ((main_float64_is_signaling_nanexit1ii4ii_379 == 1'd1))
		next_state = LEGUP_F_main_BB__380_271;
	else if ((main_float64_is_signaling_nanexit1ii4ii_379 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitii5ii_272;
LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_46:
	if ((main_float64_is_signaling_nanexit1iii_108 == 1'd1))
		next_state = LEGUP_F_main_BB__109_47;
	else if ((main_float64_is_signaling_nanexit1iii_108 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitiii_48;
LEGUP_F_main_BB_float64_is_signaling_nanexit1iiii_330:
	if ((main_float64_is_signaling_nanexit1iiii_510 == 1'd1))
		next_state = LEGUP_F_main_BB__511_331;
	else if ((main_float64_is_signaling_nanexit1iiii_510 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitiiii_332;
LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_31:
	if ((main_float64_is_signaling_nanexiti11ii_86 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi12ii_32;
	else if ((main_float64_is_signaling_nanexiti11ii_86 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit16ii_36;
LEGUP_F_main_BB_float64_is_signaling_nanexiti11iii_238:
	if ((main_float64_is_signaling_nanexiti11iii_293 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi12iii_239;
	else if ((main_float64_is_signaling_nanexiti11iii_293 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit16iii_243;
LEGUP_F_main_BB_float64_is_signaling_nanexiti12iii_294:
	if ((main_float64_is_signaling_nanexiti12iii_431 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi13iii_295;
	else if ((main_float64_is_signaling_nanexiti12iii_431 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit17iii_299;
LEGUP_F_main_BB_float64_is_signaling_nanexiti18ii_19:
	if ((main_float64_is_signaling_nanexiti18ii_64 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi19ii_20;
	else if ((main_float64_is_signaling_nanexiti18ii_64 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit23ii_24;
LEGUP_F_main_BB_float64_is_signaling_nanexiti2iii_255:
	if ((main_float64_is_signaling_nanexiti2iii_338 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi3iii_256;
	else if ((main_float64_is_signaling_nanexiti2iii_338 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit7iii_260;
LEGUP_F_main_BB_float64_is_signaling_nanexiti5iii_313:
	if ((main_float64_is_signaling_nanexiti5iii_461 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi6iii_314;
	else if ((main_float64_is_signaling_nanexiti5iii_461 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit10iii_318;
LEGUP_F_main_BB_float64_is_signaling_nanexitii5ii_272:
	if ((main_float64_is_signaling_nanexitii5ii_384 == 1'd1))
		next_state = LEGUP_F_main_BB_threadii6ii_273;
	else if ((main_float64_is_signaling_nanexitii5ii_384 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexiti10ii_277;
LEGUP_F_main_BB_float64_is_signaling_nanexitiii_48:
	if ((main_float64_is_signaling_nanexitiii_113 == 1'd1))
		next_state = LEGUP_F_main_BB_threadiii_49;
	else if ((main_float64_is_signaling_nanexitiii_113 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexitii_53;
LEGUP_F_main_BB_float64_is_signaling_nanexitiiii_332:
	if ((main_float64_is_signaling_nanexitiiii_515 == 1'd1))
		next_state = LEGUP_F_main_BB_threadiiii_333;
	else if ((main_float64_is_signaling_nanexitiiii_515 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexitiii_337;
LEGUP_F_main_BB_int32_to_float64exiti_13:
	if ((main_int32_to_float64exiti_46 == 1'd1))
		next_state = LEGUP_F_main_BB__47_14;
	else if ((main_int32_to_float64exiti_46 == 1'd0))
		next_state = LEGUP_F_main_BB__95_42;
LEGUP_F_main_BB_lrphii_223:
		next_state = LEGUP_F_main_BB_lrphii_224;
LEGUP_F_main_BB_lrphii_224:
	if ((main_lrphii_253 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphii_223;
	else if ((main_lrphii_253 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgeiiloopexit_225;
LEGUP_F_main_BB_lrphiii_147:
		next_state = LEGUP_F_main_BB__213_148;
LEGUP_F_main_BB_lrphiipreheader_222:
		next_state = LEGUP_F_main_BB_lrphii_223;
LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_65:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_66;
LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_66:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67;
LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67:
		next_state = LEGUP_F_main_BB__149_68;
LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_73:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_74;
LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_74:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75;
LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75:
		next_state = LEGUP_F_main_BB__175_76;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_346:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_347;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_347:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348:
		next_state = LEGUP_function_call_349;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_350:
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB_propagateFloat64NaNexit10iii_318:
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB_propagateFloat64NaNexit16ii_36:
		next_state = LEGUP_F_main_BB_float64_divexiti_230;
LEGUP_F_main_BB_propagateFloat64NaNexit16iii_243:
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB_propagateFloat64NaNexit17iii_299:
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB_propagateFloat64NaNexit23ii_24:
		next_state = LEGUP_F_main_BB_float64_divexiti_230;
LEGUP_F_main_BB_propagateFloat64NaNexit7iii_260:
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB_propagateFloat64NaNexiti10ii_277:
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB_propagateFloat64NaNexitii_53:
		next_state = LEGUP_F_main_BB_float64_divexiti_230;
LEGUP_F_main_BB_propagateFloat64NaNexitiii_337:
		next_state = LEGUP_F_main_BB_float64_addexiti_351;
LEGUP_F_main_BB_shift64RightJammingexit3iii_324:
		next_state = LEGUP_F_main_BB__491_325;
LEGUP_F_main_BB_shift64RightJammingexit9iii_280:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9iii_281;
LEGUP_F_main_BB_shift64RightJammingexit9iii_281:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9iii_282;
LEGUP_F_main_BB_shift64RightJammingexit9iii_282:
		next_state = LEGUP_F_main_BB__402_283;
LEGUP_F_main_BB_shift64RightJammingexitiii_342:
		next_state = LEGUP_F_main_BB__540_343;
LEGUP_F_main_BB_threadi12ii_32:
		next_state = LEGUP_F_main_BB_threadi12ii_33;
LEGUP_F_main_BB_threadi12ii_33:
		next_state = LEGUP_F_main_BB_threadi12ii_34;
LEGUP_F_main_BB_threadi12ii_34:
		next_state = LEGUP_F_main_BB_threadi12ii_35;
LEGUP_F_main_BB_threadi12ii_35:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit16ii_36;
LEGUP_F_main_BB_threadi12iii_239:
		next_state = LEGUP_F_main_BB_threadi12iii_240;
LEGUP_F_main_BB_threadi12iii_240:
		next_state = LEGUP_F_main_BB_threadi12iii_241;
LEGUP_F_main_BB_threadi12iii_241:
		next_state = LEGUP_F_main_BB_threadi12iii_242;
LEGUP_F_main_BB_threadi12iii_242:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit16iii_243;
LEGUP_F_main_BB_threadi13iii_295:
		next_state = LEGUP_F_main_BB_threadi13iii_296;
LEGUP_F_main_BB_threadi13iii_296:
		next_state = LEGUP_F_main_BB_threadi13iii_297;
LEGUP_F_main_BB_threadi13iii_297:
		next_state = LEGUP_F_main_BB_threadi13iii_298;
LEGUP_F_main_BB_threadi13iii_298:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit17iii_299;
LEGUP_F_main_BB_threadi19ii_20:
		next_state = LEGUP_F_main_BB_threadi19ii_21;
LEGUP_F_main_BB_threadi19ii_21:
		next_state = LEGUP_F_main_BB_threadi19ii_22;
LEGUP_F_main_BB_threadi19ii_22:
		next_state = LEGUP_F_main_BB_threadi19ii_23;
LEGUP_F_main_BB_threadi19ii_23:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit23ii_24;
LEGUP_F_main_BB_threadi3iii_256:
		next_state = LEGUP_F_main_BB_threadi3iii_257;
LEGUP_F_main_BB_threadi3iii_257:
		next_state = LEGUP_F_main_BB_threadi3iii_258;
LEGUP_F_main_BB_threadi3iii_258:
		next_state = LEGUP_F_main_BB_threadi3iii_259;
LEGUP_F_main_BB_threadi3iii_259:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit7iii_260;
LEGUP_F_main_BB_threadi6iii_314:
		next_state = LEGUP_F_main_BB_threadi6iii_315;
LEGUP_F_main_BB_threadi6iii_315:
		next_state = LEGUP_F_main_BB_threadi6iii_316;
LEGUP_F_main_BB_threadi6iii_316:
		next_state = LEGUP_F_main_BB_threadi6iii_317;
LEGUP_F_main_BB_threadi6iii_317:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit10iii_318;
LEGUP_F_main_BB_threadii6ii_273:
		next_state = LEGUP_F_main_BB_threadii6ii_274;
LEGUP_F_main_BB_threadii6ii_274:
		next_state = LEGUP_F_main_BB_threadii6ii_275;
LEGUP_F_main_BB_threadii6ii_275:
		next_state = LEGUP_F_main_BB_threadii6ii_276;
LEGUP_F_main_BB_threadii6ii_276:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexiti10ii_277;
LEGUP_F_main_BB_threadiii_49:
		next_state = LEGUP_F_main_BB_threadiii_50;
LEGUP_F_main_BB_threadiii_50:
		next_state = LEGUP_F_main_BB_threadiii_51;
LEGUP_F_main_BB_threadiii_51:
		next_state = LEGUP_F_main_BB_threadiii_52;
LEGUP_F_main_BB_threadiii_52:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexitii_53;
LEGUP_F_main_BB_threadiiii_333:
		next_state = LEGUP_F_main_BB_threadiiii_334;
LEGUP_F_main_BB_threadiiii_334:
		next_state = LEGUP_F_main_BB_threadiiii_335;
LEGUP_F_main_BB_threadiiii_335:
		next_state = LEGUP_F_main_BB_threadiiii_336;
LEGUP_F_main_BB_threadiiii_336:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexitiii_337;
LEGUP_function_call_228:
	if ((roundAndPackFloat64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_estimateDiv128To64exitthreadii_229;
LEGUP_function_call_284:
	if ((roundAndPackFloat64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__402_285;
LEGUP_function_call_3:
	if ((float64_mul_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__1_4;
LEGUP_function_call_349:
	if ((roundAndPackFloat64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_350;
LEGUP_function_call_6:
	if ((float64_mul_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__5_7;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %576, %dfsin.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02 = 32'd0;
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %576, %dfsin.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_dfsinexit_359) & (memory_controller_waitrequest == 1'd0)) & (main_dfsinexit_exitcond5_reg == 1'd0))) */ begin
		main_1_main_result02 = main_dfsinexit_576;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %576, %dfsin.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %576, %dfsin.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_dfsinexit_359) & (memory_controller_waitrequest == 1'd0)) & (main_dfsinexit_exitcond5_reg == 1'd0))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %578, %dfsin.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_i01 = 32'd0;
	end
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %578, %dfsin.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_dfsinexit_359) & (memory_controller_waitrequest == 1'd0)) & (main_dfsinexit_exitcond5_reg == 1'd0))) */ begin
		main_1_i01 = main_dfsinexit_578_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %578, %dfsin.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_i01_reg <= main_1_i01;
		if (start == 1'b0 && ^(main_1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg"); $finish; end
	end
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %578, %dfsin.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_dfsinexit_359) & (memory_controller_waitrequest == 1'd0)) & (main_dfsinexit_exitcond5_reg == 1'd0))) begin
		main_1_i01_reg <= main_1_i01;
		if (start == 1'b0 && ^(main_1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [36 x i64]* @test_out, i32 0, i32 %i.01*/
		main_1_scevgep = (1'd0 | (8 * main_1_i01_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [36 x i64]* @test_out, i32 0, i32 %i.01*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep_reg <= main_1_scevgep;
		if (start == 1'b0 && ^(main_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep6 = getelementptr [36 x i64]* @test_in, i32 0, i32 %i.01*/
		main_1_scevgep6 = (1'd0 | (8 * main_1_i01_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep6 = getelementptr [36 x i64]* @test_in, i32 0, i32 %i.01*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep6_reg <= main_1_scevgep6;
		if (start == 1'b0 && ^(main_1_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = load i64* %scevgep6, align 8, !tbaa !1*/
		main_1_2 = test_in_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = load i64* %scevgep6, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
		main_1_3 = float64_mul_return_val_reg;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = xor i64 %3, -9223372036854775808*/
		main_1_4 = (main_1_3_reg ^ -64'd9223372036854775808);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = xor i64 %3, -9223372036854775808*/
	if ((cur_state == LEGUP_F_main_BB__1_4)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %indvar = phi i32 [ %indvar.next, %float64_ge.exit.i ], [ 0, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__1_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_5_indvar = 32'd0;
	end
	/* main: %5*/
	/*   %indvar = phi i32 [ %indvar.next, %float64_ge.exit.i ], [ 0, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_geexiti_356) & (memory_controller_waitrequest == 1'd0)) & (main_float64_geexiti_572 == 1'd1))) */ begin
		main_5_indvar = main_float64_geexiti_indvarnext;
	end
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %indvar = phi i32 [ %indvar.next, %float64_ge.exit.i ], [ 0, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__1_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_5_indvar_reg <= main_5_indvar;
		if (start == 1'b0 && ^(main_5_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_indvar_reg"); $finish; end
	end
	/* main: %5*/
	/*   %indvar = phi i32 [ %indvar.next, %float64_ge.exit.i ], [ 0, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_geexiti_356) & (memory_controller_waitrequest == 1'd0)) & (main_float64_geexiti_572 == 1'd1))) begin
		main_5_indvar_reg <= main_5_indvar;
		if (start == 1'b0 && ^(main_5_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %diff.0.i = phi i64 [ %.0.i1.i, %float64_ge.exit.i ], [ %2, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__1_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_5_diff0i = main_1_2_reg;
	end
	/* main: %5*/
	/*   %diff.0.i = phi i64 [ %.0.i1.i, %float64_ge.exit.i ], [ %2, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_geexiti_356) & (memory_controller_waitrequest == 1'd0)) & (main_float64_geexiti_572 == 1'd1))) */ begin
		main_5_diff0i = main_float64_divexiti_0i1i_reg;
	end
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %diff.0.i = phi i64 [ %.0.i1.i, %float64_ge.exit.i ], [ %2, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__1_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_5_diff0i_reg <= main_5_diff0i;
		if (start == 1'b0 && ^(main_5_diff0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_diff0i_reg"); $finish; end
	end
	/* main: %5*/
	/*   %diff.0.i = phi i64 [ %.0.i1.i, %float64_ge.exit.i ], [ %2, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_geexiti_356) & (memory_controller_waitrequest == 1'd0)) & (main_float64_geexiti_572 == 1'd1))) begin
		main_5_diff0i_reg <= main_5_diff0i;
		if (start == 1'b0 && ^(main_5_diff0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_diff0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %app.0.i = phi i64 [ %.0.i3.i, %float64_ge.exit.i ], [ %2, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__1_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_5_app0i = main_1_2_reg;
	end
	/* main: %5*/
	/*   %app.0.i = phi i64 [ %.0.i3.i, %float64_ge.exit.i ], [ %2, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_geexiti_356) & (memory_controller_waitrequest == 1'd0)) & (main_float64_geexiti_572 == 1'd1))) */ begin
		main_5_app0i = main_float64_addexiti_0i3i_reg;
	end
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %app.0.i = phi i64 [ %.0.i3.i, %float64_ge.exit.i ], [ %2, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__1_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_5_app0i_reg <= main_5_app0i;
		if (start == 1'b0 && ^(main_5_app0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_app0i_reg"); $finish; end
	end
	/* main: %5*/
	/*   %app.0.i = phi i64 [ %.0.i3.i, %float64_ge.exit.i ], [ %2, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_geexiti_356) & (memory_controller_waitrequest == 1'd0)) & (main_float64_geexiti_572 == 1'd1))) begin
		main_5_app0i_reg <= main_5_app0i;
		if (start == 1'b0 && ^(main_5_app0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_app0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %6 = shl i32 %indvar, 1*/
		main_5_6 = (main_5_indvar_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %6 = shl i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__5_5)) begin
		main_5_6_reg <= main_5_6;
		if (start == 1'b0 && ^(main_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %7 = add i32 %6, 2*/
		main_5_7 = (main_5_6 + 32'd2);
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %7 = add i32 %6, 2*/
	if ((cur_state == LEGUP_F_main_BB__5_5)) begin
		main_5_7_reg <= main_5_7;
		if (start == 1'b0 && ^(main_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %8 = add i32 %6, 3*/
		main_5_8 = (main_5_6 + 32'd3);
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %8 = add i32 %6, 3*/
	if ((cur_state == LEGUP_F_main_BB__5_5)) begin
		main_5_8_reg <= main_5_8;
		if (start == 1'b0 && ^(main_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
		main_5_9 = float64_mul_return_val_reg;
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		main_5_9_reg <= main_5_9;
		if (start == 1'b0 && ^(main_5_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_9_reg"); $finish; end
	end
end
always @(*) begin
	main_5_10 = main_5_10_stage0_reg;
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %10 = mul nsw i32 %8, %7*/
	if ((cur_state == LEGUP_F_main_BB__5_7)) begin
		main_5_10_reg <= main_5_10;
		if (start == 1'b0 && ^(main_5_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_10_reg"); $finish; end
	end
	/* main: %5*/
	/*   %10 = mul nsw i32 %8, %7*/
	if ((cur_state == LEGUP_F_main_BB__5_7)) begin
		main_5_10_reg <= main_5_10;
		if (start == 1'b0 && ^(main_5_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %11 = icmp eq i32 %10, 0*/
		main_5_11 = (main_5_10 == 32'd0);
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %11 = icmp eq i32 %10, 0*/
	if ((cur_state == LEGUP_F_main_BB__5_7)) begin
		main_5_11_reg <= main_5_11;
		if (start == 1'b0 && ^(main_5_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %13 = icmp slt i32 %10, 0*/
		main_12_13 = ($signed(main_5_10_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %13 = icmp slt i32 %10, 0*/
	if ((cur_state == LEGUP_F_main_BB__12_8)) begin
		main_12_13_reg <= main_12_13;
		if (start == 1'b0 && ^(main_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %a.lobit.i.i = lshr i32 %10, 31*/
		main_12_alobitii = (main_5_10_reg >>> (32'd31 % 32));
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %a.lobit.i.i = lshr i32 %10, 31*/
	if ((cur_state == LEGUP_F_main_BB__12_8)) begin
		main_12_alobitii_reg <= main_12_alobitii;
		if (start == 1'b0 && ^(main_12_alobitii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_alobitii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %14 = sub nsw i32 0, %10*/
		main_12_14 = (32'd0 - main_5_10_reg);
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %14 = sub nsw i32 0, %10*/
	if ((cur_state == LEGUP_F_main_BB__12_8)) begin
		main_12_14_reg <= main_12_14;
		if (start == 1'b0 && ^(main_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %15 = select i1 %13, i32 %14, i32 %10*/
		main_12_15 = (main_12_13 ? main_12_14 : main_5_10_reg);
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %15 = select i1 %13, i32 %14, i32 %10*/
	if ((cur_state == LEGUP_F_main_BB__12_8)) begin
		main_12_15_reg <= main_12_15;
		if (start == 1'b0 && ^(main_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %16 = icmp ult i32 %15, 65536*/
		main_12_16 = (main_12_15 < 32'd65536);
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %16 = icmp ult i32 %15, 65536*/
	if ((cur_state == LEGUP_F_main_BB__12_8)) begin
		main_12_16_reg <= main_12_16;
		if (start == 1'b0 && ^(main_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %17 = shl i32 %15, 16*/
		main_12_17 = (main_12_15 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %17 = shl i32 %15, 16*/
	if ((cur_state == LEGUP_F_main_BB__12_8)) begin
		main_12_17_reg <= main_12_17;
		if (start == 1'b0 && ^(main_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %.a.i.i.i = select i1 %16, i32 %17, i32 %15*/
		main_12_aiii = (main_12_16 ? main_12_17 : main_12_15);
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %.a.i.i.i = select i1 %16, i32 %17, i32 %15*/
	if ((cur_state == LEGUP_F_main_BB__12_8)) begin
		main_12_aiii_reg <= main_12_aiii;
		if (start == 1'b0 && ^(main_12_aiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_aiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %..i.i.i = select i1 %16, i32 16, i32 0*/
		main_12_iii = (main_12_16 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %..i.i.i = select i1 %16, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__12_8)) begin
		main_12_iii_reg <= main_12_iii;
		if (start == 1'b0 && ^(main_12_iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %18 = icmp ult i32 %.a.i.i.i, 16777216*/
		main_12_18 = (main_12_aiii < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %18 = icmp ult i32 %.a.i.i.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__12_8)) begin
		main_12_18_reg <= main_12_18;
		if (start == 1'b0 && ^(main_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %20 = or i32 %..i.i.i, 8*/
		main_19_20 = (main_12_iii_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %20 = or i32 %..i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__19_9)) begin
		main_19_20_reg <= main_19_20;
		if (start == 1'b0 && ^(main_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %19*/
	/*   %21 = shl i32 %.a.i.i.i, 8*/
		main_19_21 = (main_12_aiii_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %19*/
	/*   %21 = shl i32 %.a.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__19_9)) begin
		main_19_21_reg <= main_19_21;
		if (start == 1'b0 && ^(main_19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %.1.i.i.i = phi i32 [ %21, %19 ], [ %.a.i.i.i, %12 ]*/
	if ((((cur_state == LEGUP_F_main_BB__12_8) & (memory_controller_waitrequest == 1'd0)) & (main_12_18 == 1'd0))) begin
		main_countLeadingZeros32exitii_1iii = main_12_aiii;
	end
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %.1.i.i.i = phi i32 [ %21, %19 ], [ %.a.i.i.i, %12 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__19_9) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_countLeadingZeros32exitii_1iii = main_19_21;
	end
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %.1.i.i.i = phi i32 [ %21, %19 ], [ %.a.i.i.i, %12 ]*/
	if ((((cur_state == LEGUP_F_main_BB__12_8) & (memory_controller_waitrequest == 1'd0)) & (main_12_18 == 1'd0))) begin
		main_countLeadingZeros32exitii_1iii_reg <= main_countLeadingZeros32exitii_1iii;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_1iii_reg"); $finish; end
	end
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %.1.i.i.i = phi i32 [ %21, %19 ], [ %.a.i.i.i, %12 ]*/
	if (((cur_state == LEGUP_F_main_BB__19_9) & (memory_controller_waitrequest == 1'd0))) begin
		main_countLeadingZeros32exitii_1iii_reg <= main_countLeadingZeros32exitii_1iii;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %shiftCount.1.i.i.i = phi i32 [ %20, %19 ], [ %..i.i.i, %12 ]*/
	if ((((cur_state == LEGUP_F_main_BB__12_8) & (memory_controller_waitrequest == 1'd0)) & (main_12_18 == 1'd0))) begin
		main_countLeadingZeros32exitii_shiftCount1iii = main_12_iii;
	end
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %shiftCount.1.i.i.i = phi i32 [ %20, %19 ], [ %..i.i.i, %12 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__19_9) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_countLeadingZeros32exitii_shiftCount1iii = main_19_20;
	end
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %shiftCount.1.i.i.i = phi i32 [ %20, %19 ], [ %..i.i.i, %12 ]*/
	if ((((cur_state == LEGUP_F_main_BB__12_8) & (memory_controller_waitrequest == 1'd0)) & (main_12_18 == 1'd0))) begin
		main_countLeadingZeros32exitii_shiftCount1iii_reg <= main_countLeadingZeros32exitii_shiftCount1iii;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_shiftCount1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_shiftCount1iii_reg"); $finish; end
	end
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %shiftCount.1.i.i.i = phi i32 [ %20, %19 ], [ %..i.i.i, %12 ]*/
	if (((cur_state == LEGUP_F_main_BB__19_9) & (memory_controller_waitrequest == 1'd0))) begin
		main_countLeadingZeros32exitii_shiftCount1iii_reg <= main_countLeadingZeros32exitii_shiftCount1iii;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_shiftCount1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_shiftCount1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %22 = lshr i32 %.1.i.i.i, 24*/
		main_countLeadingZeros32exitii_22 = (main_countLeadingZeros32exitii_1iii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %22 = lshr i32 %.1.i.i.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_10)) begin
		main_countLeadingZeros32exitii_22_reg <= main_countLeadingZeros32exitii_22;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %23 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %22*/
		main_countLeadingZeros32exitii_23 = (`TAG_g_countLeadingZeros32countLeadingZerosHigh_a | (4 * main_countLeadingZeros32exitii_22));
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %23 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %22*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_10)) begin
		main_countLeadingZeros32exitii_23_reg <= main_countLeadingZeros32exitii_23;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %24 = load i32* %23, align 4, !tbaa !5*/
		main_countLeadingZeros32exitii_24 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %24 = load i32* %23, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_12)) begin
		main_countLeadingZeros32exitii_24_reg <= main_countLeadingZeros32exitii_24;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %25 = add nsw i32 %24, %shiftCount.1.i.i.i*/
		main_countLeadingZeros32exitii_25 = (main_countLeadingZeros32exitii_24 + main_countLeadingZeros32exitii_shiftCount1iii_reg);
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %25 = add nsw i32 %24, %shiftCount.1.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_12)) begin
		main_countLeadingZeros32exitii_25_reg <= main_countLeadingZeros32exitii_25;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %26 = add nsw i32 %25, 21*/
		main_countLeadingZeros32exitii_26 = (main_countLeadingZeros32exitii_25 + 32'd21);
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %26 = add nsw i32 %25, 21*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_12)) begin
		main_countLeadingZeros32exitii_26_reg <= main_countLeadingZeros32exitii_26;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %27 = zext i32 %15 to i64*/
		main_countLeadingZeros32exitii_27 = main_12_15_reg;
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %27 = zext i32 %15 to i64*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_10)) begin
		main_countLeadingZeros32exitii_27_reg <= main_countLeadingZeros32exitii_27;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %28 = sub i32 1053, %25*/
		main_countLeadingZeros32exitii_28 = (32'd1053 - main_countLeadingZeros32exitii_25);
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %28 = sub i32 1053, %25*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_12)) begin
		main_countLeadingZeros32exitii_28_reg <= main_countLeadingZeros32exitii_28;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %29 = zext i32 %26 to i64*/
		main_countLeadingZeros32exitii_29 = main_countLeadingZeros32exitii_26;
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %29 = zext i32 %26 to i64*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_12)) begin
		main_countLeadingZeros32exitii_29_reg <= main_countLeadingZeros32exitii_29;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %30 = shl i64 %27, %29*/
		main_countLeadingZeros32exitii_30 = (main_countLeadingZeros32exitii_27_reg <<< (main_countLeadingZeros32exitii_29 % 64'd64));
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %30 = shl i64 %27, %29*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_12)) begin
		main_countLeadingZeros32exitii_30_reg <= main_countLeadingZeros32exitii_30;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %31 = zext i32 %a.lobit.i.i to i64*/
		main_countLeadingZeros32exitii_31 = main_12_alobitii_reg;
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %31 = zext i32 %a.lobit.i.i to i64*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_10)) begin
		main_countLeadingZeros32exitii_31_reg <= main_countLeadingZeros32exitii_31;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %32 = shl nuw i64 %31, 63*/
		main_countLeadingZeros32exitii_32 = (main_countLeadingZeros32exitii_31 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %32 = shl nuw i64 %31, 63*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_10)) begin
		main_countLeadingZeros32exitii_32_reg <= main_countLeadingZeros32exitii_32;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %33 = zext i32 %28 to i64*/
		main_countLeadingZeros32exitii_33 = main_countLeadingZeros32exitii_28;
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %33 = zext i32 %28 to i64*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_12)) begin
		main_countLeadingZeros32exitii_33_reg <= main_countLeadingZeros32exitii_33;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %34 = shl i64 %33, 52*/
		main_countLeadingZeros32exitii_34 = (main_countLeadingZeros32exitii_33 <<< (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %34 = shl i64 %33, 52*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_12)) begin
		main_countLeadingZeros32exitii_34_reg <= main_countLeadingZeros32exitii_34;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %35 = add i64 %30, %32*/
		main_countLeadingZeros32exitii_35 = (main_countLeadingZeros32exitii_30 + main_countLeadingZeros32exitii_32_reg);
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %35 = add i64 %30, %32*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_12)) begin
		main_countLeadingZeros32exitii_35_reg <= main_countLeadingZeros32exitii_35;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %36 = add i64 %35, %34*/
		main_countLeadingZeros32exitii_36 = (main_countLeadingZeros32exitii_35 + main_countLeadingZeros32exitii_34);
end
always @(posedge clk) begin
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %36 = add i64 %35, %34*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_12)) begin
		main_countLeadingZeros32exitii_36_reg <= main_countLeadingZeros32exitii_36;
		if (start == 1'b0 && ^(main_countLeadingZeros32exitii_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_countLeadingZeros32exitii_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %.0.i.i = phi i64 [ %36, %countLeadingZeros32.exit.i.i ], [ 0, %5 ]*/
	if ((((cur_state == LEGUP_F_main_BB__5_7) & (memory_controller_waitrequest == 1'd0)) & (main_5_11 == 1'd1))) begin
		main_int32_to_float64exiti_0ii = 64'd0;
	end
	/* main: %int32_to_float64.exit.i*/
	/*   %.0.i.i = phi i64 [ %36, %countLeadingZeros32.exit.i.i ], [ 0, %5 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_12) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_int32_to_float64exiti_0ii = main_countLeadingZeros32exitii_36;
	end
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %.0.i.i = phi i64 [ %36, %countLeadingZeros32.exit.i.i ], [ 0, %5 ]*/
	if ((((cur_state == LEGUP_F_main_BB__5_7) & (memory_controller_waitrequest == 1'd0)) & (main_5_11 == 1'd1))) begin
		main_int32_to_float64exiti_0ii_reg <= main_int32_to_float64exiti_0ii;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_0ii_reg"); $finish; end
	end
	/* main: %int32_to_float64.exit.i*/
	/*   %.0.i.i = phi i64 [ %36, %countLeadingZeros32.exit.i.i ], [ 0, %5 ]*/
	if (((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_int32_to_float64exiti_0ii_reg <= main_int32_to_float64exiti_0ii;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %37 = and i64 %9, 4503599627370495*/
		main_int32_to_float64exiti_37 = (main_5_9_reg & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %37 = and i64 %9, 4503599627370495*/
	if ((cur_state == LEGUP_F_main_BB_int32_to_float64exiti_13)) begin
		main_int32_to_float64exiti_37_reg <= main_int32_to_float64exiti_37;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %38 = lshr i64 %9, 52*/
		main_int32_to_float64exiti_38 = (main_5_9_reg >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %38 = lshr i64 %9, 52*/
	if ((cur_state == LEGUP_F_main_BB_int32_to_float64exiti_13)) begin
		main_int32_to_float64exiti_38_reg <= main_int32_to_float64exiti_38;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %.tr.i.i.i = trunc i64 %38 to i32*/
		main_int32_to_float64exiti_triii = main_int32_to_float64exiti_38[31:0];
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %.tr.i.i.i = trunc i64 %38 to i32*/
	if ((cur_state == LEGUP_F_main_BB_int32_to_float64exiti_13)) begin
		main_int32_to_float64exiti_triii_reg <= main_int32_to_float64exiti_triii;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_triii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_triii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %39 = and i32 %.tr.i.i.i, 2047*/
		main_int32_to_float64exiti_39 = (main_int32_to_float64exiti_triii & 32'd2047);
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %39 = and i32 %.tr.i.i.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB_int32_to_float64exiti_13)) begin
		main_int32_to_float64exiti_39_reg <= main_int32_to_float64exiti_39;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %40 = and i64 %.0.i.i, 4503599627370495*/
		main_int32_to_float64exiti_40 = (main_int32_to_float64exiti_0ii_reg & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %40 = and i64 %.0.i.i, 4503599627370495*/
	if ((cur_state == LEGUP_F_main_BB_int32_to_float64exiti_13)) begin
		main_int32_to_float64exiti_40_reg <= main_int32_to_float64exiti_40;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %41 = lshr i64 %.0.i.i, 52*/
		main_int32_to_float64exiti_41 = (main_int32_to_float64exiti_0ii_reg >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %41 = lshr i64 %.0.i.i, 52*/
	if ((cur_state == LEGUP_F_main_BB_int32_to_float64exiti_13)) begin
		main_int32_to_float64exiti_41_reg <= main_int32_to_float64exiti_41;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %.tr.i24.i.i = trunc i64 %41 to i32*/
		main_int32_to_float64exiti_tri24ii = main_int32_to_float64exiti_41[31:0];
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %.tr.i24.i.i = trunc i64 %41 to i32*/
	if ((cur_state == LEGUP_F_main_BB_int32_to_float64exiti_13)) begin
		main_int32_to_float64exiti_tri24ii_reg <= main_int32_to_float64exiti_tri24ii;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_tri24ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_tri24ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %42 = and i32 %.tr.i24.i.i, 2047*/
		main_int32_to_float64exiti_42 = (main_int32_to_float64exiti_tri24ii & 32'd2047);
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %42 = and i32 %.tr.i24.i.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB_int32_to_float64exiti_13)) begin
		main_int32_to_float64exiti_42_reg <= main_int32_to_float64exiti_42;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %43 = xor i64 %.0.i.i, %9*/
		main_int32_to_float64exiti_43 = (main_int32_to_float64exiti_0ii_reg ^ main_5_9_reg);
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %43 = xor i64 %.0.i.i, %9*/
	if ((cur_state == LEGUP_F_main_BB_int32_to_float64exiti_13)) begin
		main_int32_to_float64exiti_43_reg <= main_int32_to_float64exiti_43;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %44 = lshr i64 %43, 63*/
		main_int32_to_float64exiti_44 = (main_int32_to_float64exiti_43 >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %44 = lshr i64 %43, 63*/
	if ((cur_state == LEGUP_F_main_BB_int32_to_float64exiti_13)) begin
		main_int32_to_float64exiti_44_reg <= main_int32_to_float64exiti_44;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %45 = trunc i64 %44 to i32*/
		main_int32_to_float64exiti_45 = main_int32_to_float64exiti_44[31:0];
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %45 = trunc i64 %44 to i32*/
	if ((cur_state == LEGUP_F_main_BB_int32_to_float64exiti_13)) begin
		main_int32_to_float64exiti_45_reg <= main_int32_to_float64exiti_45;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %46 = icmp eq i32 %39, 2047*/
		main_int32_to_float64exiti_46 = (main_int32_to_float64exiti_39 == 32'd2047);
end
always @(posedge clk) begin
	/* main: %int32_to_float64.exit.i*/
	/*   %46 = icmp eq i32 %39, 2047*/
	if ((cur_state == LEGUP_F_main_BB_int32_to_float64exiti_13)) begin
		main_int32_to_float64exiti_46_reg <= main_int32_to_float64exiti_46;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_int32_to_float64exiti_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %48 = icmp eq i64 %37, 0*/
		main_47_48 = (main_int32_to_float64exiti_37_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %48 = icmp eq i64 %37, 0*/
	if ((cur_state == LEGUP_F_main_BB__47_14)) begin
		main_47_48_reg <= main_47_48;
		if (start == 1'b0 && ^(main_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %50 = and i64 %9, 9221120237041090560*/
		main_49_50 = (main_5_9_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %50 = and i64 %9, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__49_15)) begin
		main_49_50_reg <= main_49_50;
		if (start == 1'b0 && ^(main_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %51 = icmp eq i64 %50, 9218868437227405312*/
		main_49_51 = (main_49_50 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %51 = icmp eq i64 %50, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__49_15)) begin
		main_49_51_reg <= main_49_51;
		if (start == 1'b0 && ^(main_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %53 = and i64 %9, 2251799813685247*/
		main_52_53 = (main_5_9_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %53 = and i64 %9, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__52_16)) begin
		main_52_53_reg <= main_52_53;
		if (start == 1'b0 && ^(main_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %54 = icmp ne i64 %53, 0*/
		main_52_54 = (main_52_53 != 64'd0);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %54 = icmp ne i64 %53, 0*/
	if ((cur_state == LEGUP_F_main_BB__52_16)) begin
		main_52_54_reg <= main_52_54;
		if (start == 1'b0 && ^(main_52_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i17.i.i*/
	/*   %55 = phi i1 [ false, %49 ], [ %54, %52 ]*/
	if ((((cur_state == LEGUP_F_main_BB__49_15) & (memory_controller_waitrequest == 1'd0)) & (main_49_51 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i17ii_55 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i17.i.i*/
	/*   %55 = phi i1 [ false, %49 ], [ %54, %52 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__52_16) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i17ii_55 = main_52_54;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i17.i.i*/
	/*   %55 = phi i1 [ false, %49 ], [ %54, %52 ]*/
	if ((((cur_state == LEGUP_F_main_BB__49_15) & (memory_controller_waitrequest == 1'd0)) & (main_49_51 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i17ii_55_reg <= main_float64_is_signaling_nanexit1i17ii_55;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i17ii_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i17ii_55_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i17.i.i*/
	/*   %55 = phi i1 [ false, %49 ], [ %54, %52 ]*/
	if (((cur_state == LEGUP_F_main_BB__52_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i17ii_55_reg <= main_float64_is_signaling_nanexit1i17ii_55;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i17ii_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i17ii_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i17.i.i*/
	/*   %56 = trunc i64 %.0.i.i to i63*/
		main_float64_is_signaling_nanexit1i17ii_56 = main_int32_to_float64exiti_0ii_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i17.i.i*/
	/*   %56 = trunc i64 %.0.i.i to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i17ii_17)) begin
		main_float64_is_signaling_nanexit1i17ii_56_reg <= main_float64_is_signaling_nanexit1i17ii_56;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i17ii_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i17ii_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i17.i.i*/
	/*   %57 = icmp ugt i63 %56, -4503599627370496*/
		main_float64_is_signaling_nanexit1i17ii_57 = (main_float64_is_signaling_nanexit1i17ii_56 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i17.i.i*/
	/*   %57 = icmp ugt i63 %56, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i17ii_17)) begin
		main_float64_is_signaling_nanexit1i17ii_57_reg <= main_float64_is_signaling_nanexit1i17ii_57;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i17ii_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i17ii_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i17.i.i*/
	/*   %58 = and i64 %.0.i.i, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i17ii_58 = (main_int32_to_float64exiti_0ii_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i17.i.i*/
	/*   %58 = and i64 %.0.i.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i17ii_17)) begin
		main_float64_is_signaling_nanexit1i17ii_58_reg <= main_float64_is_signaling_nanexit1i17ii_58;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i17ii_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i17ii_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i17.i.i*/
	/*   %59 = icmp eq i64 %58, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i17ii_59 = (main_float64_is_signaling_nanexit1i17ii_58 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i17.i.i*/
	/*   %59 = icmp eq i64 %58, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i17ii_17)) begin
		main_float64_is_signaling_nanexit1i17ii_59_reg <= main_float64_is_signaling_nanexit1i17ii_59;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i17ii_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i17ii_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %60*/
	/*   %61 = and i64 %.0.i.i, 2251799813685247*/
		main_60_61 = (main_int32_to_float64exiti_0ii_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %60*/
	/*   %61 = and i64 %.0.i.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__60_18)) begin
		main_60_61_reg <= main_60_61;
		if (start == 1'b0 && ^(main_60_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_60_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %60*/
	/*   %62 = icmp ne i64 %61, 0*/
		main_60_62 = (main_60_61 != 64'd0);
end
always @(posedge clk) begin
	/* main: %60*/
	/*   %62 = icmp ne i64 %61, 0*/
	if ((cur_state == LEGUP_F_main_BB__60_18)) begin
		main_60_62_reg <= main_60_62;
		if (start == 1'b0 && ^(main_60_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_60_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i18.i.i*/
	/*   %63 = phi i1 [ false, %float64_is_signaling_nan.exit1.i17.i.i ], [ %62, %60 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i17ii_17) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i17ii_59 == 1'd0))) begin
		main_float64_is_signaling_nanexiti18ii_63 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i18.i.i*/
	/*   %63 = phi i1 [ false, %float64_is_signaling_nan.exit1.i17.i.i ], [ %62, %60 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__60_18) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti18ii_63 = main_60_62;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i18.i.i*/
	/*   %63 = phi i1 [ false, %float64_is_signaling_nan.exit1.i17.i.i ], [ %62, %60 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i17ii_17) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i17ii_59 == 1'd0))) begin
		main_float64_is_signaling_nanexiti18ii_63_reg <= main_float64_is_signaling_nanexiti18ii_63;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti18ii_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti18ii_63_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i18.i.i*/
	/*   %63 = phi i1 [ false, %float64_is_signaling_nan.exit1.i17.i.i ], [ %62, %60 ]*/
	if (((cur_state == LEGUP_F_main_BB__60_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti18ii_63_reg <= main_float64_is_signaling_nanexiti18ii_63;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti18ii_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti18ii_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i18.i.i*/
	/*   %64 = or i1 %55, %63*/
		main_float64_is_signaling_nanexiti18ii_64 = (main_float64_is_signaling_nanexit1i17ii_55_reg | main_float64_is_signaling_nanexiti18ii_63_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i18.i.i*/
	/*   %64 = or i1 %55, %63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti18ii_19)) begin
		main_float64_is_signaling_nanexiti18ii_64_reg <= main_float64_is_signaling_nanexiti18ii_64;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti18ii_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti18ii_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i19.i.i*/
	/*   %65 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadi19ii_65 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i19.i.i*/
	/*   %65 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi19ii_22)) begin
		main_threadi19ii_65_reg <= main_threadi19ii_65;
		if (start == 1'b0 && ^(main_threadi19ii_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi19ii_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i19.i.i*/
	/*   %66 = or i32 %65, 16*/
		main_threadi19ii_66 = (main_threadi19ii_65 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i19.i.i*/
	/*   %66 = or i32 %65, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadi19ii_22)) begin
		main_threadi19ii_66_reg <= main_threadi19ii_66;
		if (start == 1'b0 && ^(main_threadi19ii_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi19ii_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit23.i.i*/
	/*   %.sink.i20.i.i = phi i1 [ %63, %.thread.i19.i.i ], [ %57, %float64_is_signaling_nan.exit.i18.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti18ii_19) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti18ii_64 == 1'd0))) begin
		main_propagateFloat64NaNexit23ii_sinki20ii = main_float64_is_signaling_nanexit1i17ii_57_reg;
	end
	/* main: %propagateFloat64NaN.exit23.i.i*/
	/*   %.sink.i20.i.i = phi i1 [ %63, %.thread.i19.i.i ], [ %57, %float64_is_signaling_nan.exit.i18.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadi19ii_23) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexit23ii_sinki20ii = main_float64_is_signaling_nanexiti18ii_63_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit23.i.i*/
	/*   %.sink.i20.i.i = phi i1 [ %63, %.thread.i19.i.i ], [ %57, %float64_is_signaling_nan.exit.i18.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti18ii_19) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti18ii_64 == 1'd0))) begin
		main_propagateFloat64NaNexit23ii_sinki20ii_reg <= main_propagateFloat64NaNexit23ii_sinki20ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit23ii_sinki20ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit23ii_sinki20ii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit23.i.i*/
	/*   %.sink.i20.i.i = phi i1 [ %63, %.thread.i19.i.i ], [ %57, %float64_is_signaling_nan.exit.i18.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi19ii_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexit23ii_sinki20ii_reg <= main_propagateFloat64NaNexit23ii_sinki20ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit23ii_sinki20ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit23ii_sinki20ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit23.i.i*/
	/*   %.mux2.v.i21.i.i = select i1 %.sink.i20.i.i, i64 %.0.i.i, i64 %9*/
		main_propagateFloat64NaNexit23ii_mux2vi21ii = (main_propagateFloat64NaNexit23ii_sinki20ii_reg ? main_int32_to_float64exiti_0ii_reg : main_5_9_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit23.i.i*/
	/*   %.mux2.v.i21.i.i = select i1 %.sink.i20.i.i, i64 %.0.i.i, i64 %9*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit23ii_24)) begin
		main_propagateFloat64NaNexit23ii_mux2vi21ii_reg <= main_propagateFloat64NaNexit23ii_mux2vi21ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit23ii_mux2vi21ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit23ii_mux2vi21ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit23.i.i*/
	/*   %.mux2.i22.i.i = or i64 %.mux2.v.i21.i.i, 2251799813685248*/
		main_propagateFloat64NaNexit23ii_mux2i22ii = (main_propagateFloat64NaNexit23ii_mux2vi21ii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit23.i.i*/
	/*   %.mux2.i22.i.i = or i64 %.mux2.v.i21.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit23ii_24)) begin
		main_propagateFloat64NaNexit23ii_mux2i22ii_reg <= main_propagateFloat64NaNexit23ii_mux2i22ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit23ii_mux2i22ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit23ii_mux2i22ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %68 = icmp eq i32 %42, 2047*/
		main_67_68 = (main_int32_to_float64exiti_42_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %68 = icmp eq i32 %42, 2047*/
	if ((cur_state == LEGUP_F_main_BB__67_25)) begin
		main_67_68_reg <= main_67_68;
		if (start == 1'b0 && ^(main_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %70 = icmp eq i64 %40, 0*/
		main_69_70 = (main_int32_to_float64exiti_40_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %70 = icmp eq i64 %40, 0*/
	if ((cur_state == LEGUP_F_main_BB__69_26)) begin
		main_69_70_reg <= main_69_70;
		if (start == 1'b0 && ^(main_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %71*/
	/*   %72 = and i64 %9, 9221120237041090560*/
		main_71_72 = (main_5_9_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %71*/
	/*   %72 = and i64 %9, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__71_27)) begin
		main_71_72_reg <= main_71_72;
		if (start == 1'b0 && ^(main_71_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_71_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %71*/
	/*   %73 = icmp eq i64 %72, 9218868437227405312*/
		main_71_73 = (main_71_72 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %71*/
	/*   %73 = icmp eq i64 %72, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__71_27)) begin
		main_71_73_reg <= main_71_73;
		if (start == 1'b0 && ^(main_71_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_71_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %74*/
	/*   %75 = and i64 %9, 2251799813685247*/
		main_74_75 = (main_5_9_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %74*/
	/*   %75 = and i64 %9, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__74_28)) begin
		main_74_75_reg <= main_74_75;
		if (start == 1'b0 && ^(main_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %74*/
	/*   %76 = icmp ne i64 %75, 0*/
		main_74_76 = (main_74_75 != 64'd0);
end
always @(posedge clk) begin
	/* main: %74*/
	/*   %76 = icmp ne i64 %75, 0*/
	if ((cur_state == LEGUP_F_main_BB__74_28)) begin
		main_74_76_reg <= main_74_76;
		if (start == 1'b0 && ^(main_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %77 = phi i1 [ false, %71 ], [ %76, %74 ]*/
	if ((((cur_state == LEGUP_F_main_BB__71_27) & (memory_controller_waitrequest == 1'd0)) & (main_71_73 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i10ii_77 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %77 = phi i1 [ false, %71 ], [ %76, %74 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__74_28) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i10ii_77 = main_74_76;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %77 = phi i1 [ false, %71 ], [ %76, %74 ]*/
	if ((((cur_state == LEGUP_F_main_BB__71_27) & (memory_controller_waitrequest == 1'd0)) & (main_71_73 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i10ii_77_reg <= main_float64_is_signaling_nanexit1i10ii_77;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_77_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %77 = phi i1 [ false, %71 ], [ %76, %74 ]*/
	if (((cur_state == LEGUP_F_main_BB__74_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i10ii_77_reg <= main_float64_is_signaling_nanexit1i10ii_77;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %78 = trunc i64 %.0.i.i to i63*/
		main_float64_is_signaling_nanexit1i10ii_78 = main_int32_to_float64exiti_0ii_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %78 = trunc i64 %.0.i.i to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_29)) begin
		main_float64_is_signaling_nanexit1i10ii_78_reg <= main_float64_is_signaling_nanexit1i10ii_78;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %79 = icmp ugt i63 %78, -4503599627370496*/
		main_float64_is_signaling_nanexit1i10ii_79 = (main_float64_is_signaling_nanexit1i10ii_78 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %79 = icmp ugt i63 %78, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_29)) begin
		main_float64_is_signaling_nanexit1i10ii_79_reg <= main_float64_is_signaling_nanexit1i10ii_79;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %80 = and i64 %.0.i.i, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i10ii_80 = (main_int32_to_float64exiti_0ii_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %80 = and i64 %.0.i.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_29)) begin
		main_float64_is_signaling_nanexit1i10ii_80_reg <= main_float64_is_signaling_nanexit1i10ii_80;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %81 = icmp eq i64 %80, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i10ii_81 = (main_float64_is_signaling_nanexit1i10ii_80 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %81 = icmp eq i64 %80, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_29)) begin
		main_float64_is_signaling_nanexit1i10ii_81_reg <= main_float64_is_signaling_nanexit1i10ii_81;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %83 = and i64 %.0.i.i, 2251799813685247*/
		main_82_83 = (main_int32_to_float64exiti_0ii_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %83 = and i64 %.0.i.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__82_30)) begin
		main_82_83_reg <= main_82_83;
		if (start == 1'b0 && ^(main_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %84 = icmp ne i64 %83, 0*/
		main_82_84 = (main_82_83 != 64'd0);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %84 = icmp ne i64 %83, 0*/
	if ((cur_state == LEGUP_F_main_BB__82_30)) begin
		main_82_84_reg <= main_82_84;
		if (start == 1'b0 && ^(main_82_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i.i*/
	/*   %85 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i.i ], [ %84, %82 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_29) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i10ii_81 == 1'd0))) begin
		main_float64_is_signaling_nanexiti11ii_85 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i11.i.i*/
	/*   %85 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i.i ], [ %84, %82 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__82_30) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti11ii_85 = main_82_84;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i.i*/
	/*   %85 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i.i ], [ %84, %82 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_29) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i10ii_81 == 1'd0))) begin
		main_float64_is_signaling_nanexiti11ii_85_reg <= main_float64_is_signaling_nanexiti11ii_85;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11ii_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11ii_85_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i11.i.i*/
	/*   %85 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i.i ], [ %84, %82 ]*/
	if (((cur_state == LEGUP_F_main_BB__82_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti11ii_85_reg <= main_float64_is_signaling_nanexiti11ii_85;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11ii_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11ii_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i.i*/
	/*   %86 = or i1 %77, %85*/
		main_float64_is_signaling_nanexiti11ii_86 = (main_float64_is_signaling_nanexit1i10ii_77_reg | main_float64_is_signaling_nanexiti11ii_85_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i.i*/
	/*   %86 = or i1 %77, %85*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_31)) begin
		main_float64_is_signaling_nanexiti11ii_86_reg <= main_float64_is_signaling_nanexiti11ii_86;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11ii_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11ii_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i12.i.i*/
	/*   %87 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadi12ii_87 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i12.i.i*/
	/*   %87 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_34)) begin
		main_threadi12ii_87_reg <= main_threadi12ii_87;
		if (start == 1'b0 && ^(main_threadi12ii_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi12ii_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i12.i.i*/
	/*   %88 = or i32 %87, 16*/
		main_threadi12ii_88 = (main_threadi12ii_87 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i12.i.i*/
	/*   %88 = or i32 %87, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_34)) begin
		main_threadi12ii_88_reg <= main_threadi12ii_88;
		if (start == 1'b0 && ^(main_threadi12ii_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi12ii_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.sink.i13.i.i = phi i1 [ %85, %.thread.i12.i.i ], [ %79, %float64_is_signaling_nan.exit.i11.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_31) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti11ii_86 == 1'd0))) begin
		main_propagateFloat64NaNexit16ii_sinki13ii = main_float64_is_signaling_nanexit1i10ii_79_reg;
	end
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.sink.i13.i.i = phi i1 [ %85, %.thread.i12.i.i ], [ %79, %float64_is_signaling_nan.exit.i11.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadi12ii_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexit16ii_sinki13ii = main_float64_is_signaling_nanexiti11ii_85_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.sink.i13.i.i = phi i1 [ %85, %.thread.i12.i.i ], [ %79, %float64_is_signaling_nan.exit.i11.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_31) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti11ii_86 == 1'd0))) begin
		main_propagateFloat64NaNexit16ii_sinki13ii_reg <= main_propagateFloat64NaNexit16ii_sinki13ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit16ii_sinki13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit16ii_sinki13ii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.sink.i13.i.i = phi i1 [ %85, %.thread.i12.i.i ], [ %79, %float64_is_signaling_nan.exit.i11.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi12ii_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexit16ii_sinki13ii_reg <= main_propagateFloat64NaNexit16ii_sinki13ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit16ii_sinki13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit16ii_sinki13ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.mux2.v.i14.i.i = select i1 %.sink.i13.i.i, i64 %.0.i.i, i64 %9*/
		main_propagateFloat64NaNexit16ii_mux2vi14ii = (main_propagateFloat64NaNexit16ii_sinki13ii_reg ? main_int32_to_float64exiti_0ii_reg : main_5_9_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.mux2.v.i14.i.i = select i1 %.sink.i13.i.i, i64 %.0.i.i, i64 %9*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit16ii_36)) begin
		main_propagateFloat64NaNexit16ii_mux2vi14ii_reg <= main_propagateFloat64NaNexit16ii_mux2vi14ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit16ii_mux2vi14ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit16ii_mux2vi14ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.mux2.i15.i.i = or i64 %.mux2.v.i14.i.i, 2251799813685248*/
		main_propagateFloat64NaNexit16ii_mux2i15ii = (main_propagateFloat64NaNexit16ii_mux2vi14ii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.mux2.i15.i.i = or i64 %.mux2.v.i14.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit16ii_36)) begin
		main_propagateFloat64NaNexit16ii_mux2i15ii_reg <= main_propagateFloat64NaNexit16ii_mux2i15ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit16ii_mux2i15ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit16ii_mux2i15ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %89*/
	/*   %90 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_89_90 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %89*/
	/*   %90 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__89_39)) begin
		main_89_90_reg <= main_89_90;
		if (start == 1'b0 && ^(main_89_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %89*/
	/*   %91 = or i32 %90, 16*/
		main_89_91 = (main_89_90 | 32'd16);
end
always @(posedge clk) begin
	/* main: %89*/
	/*   %91 = or i32 %90, 16*/
	if ((cur_state == LEGUP_F_main_BB__89_39)) begin
		main_89_91_reg <= main_89_91;
		if (start == 1'b0 && ^(main_89_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %92*/
	/*   %93 = shl nuw i64 %44, 63*/
		main_92_93 = (main_int32_to_float64exiti_44_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %92*/
	/*   %93 = shl nuw i64 %44, 63*/
	if ((cur_state == LEGUP_F_main_BB__92_41)) begin
		main_92_93_reg <= main_92_93;
		if (start == 1'b0 && ^(main_92_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %92*/
	/*   %94 = or i64 %93, 9218868437227405312*/
		main_92_94 = (main_92_93 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %92*/
	/*   %94 = or i64 %93, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__92_41)) begin
		main_92_94_reg <= main_92_94;
		if (start == 1'b0 && ^(main_92_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %96*/
	/*   %97 = icmp eq i64 %40, 0*/
		main_96_97 = (main_int32_to_float64exiti_40_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %96*/
	/*   %97 = icmp eq i64 %40, 0*/
	if ((cur_state == LEGUP_F_main_BB__96_43)) begin
		main_96_97_reg <= main_96_97;
		if (start == 1'b0 && ^(main_96_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_96_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %99 = and i64 %9, 9221120237041090560*/
		main_98_99 = (main_5_9_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %99 = and i64 %9, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__98_44)) begin
		main_98_99_reg <= main_98_99;
		if (start == 1'b0 && ^(main_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %100 = icmp eq i64 %99, 9218868437227405312*/
		main_98_100 = (main_98_99 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %100 = icmp eq i64 %99, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__98_44)) begin
		main_98_100_reg <= main_98_100;
		if (start == 1'b0 && ^(main_98_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %101*/
	/*   %102 = and i64 %9, 2251799813685247*/
		main_101_102 = (main_5_9_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %102 = and i64 %9, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__101_45)) begin
		main_101_102_reg <= main_101_102;
		if (start == 1'b0 && ^(main_101_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %101*/
	/*   %103 = icmp ne i64 %102, 0*/
		main_101_103 = (main_101_102 != 64'd0);
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %103 = icmp ne i64 %102, 0*/
	if ((cur_state == LEGUP_F_main_BB__101_45)) begin
		main_101_103_reg <= main_101_103;
		if (start == 1'b0 && ^(main_101_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %104 = phi i1 [ false, %98 ], [ %103, %101 ]*/
	if ((((cur_state == LEGUP_F_main_BB__98_44) & (memory_controller_waitrequest == 1'd0)) & (main_98_100 == 1'd0))) begin
		main_float64_is_signaling_nanexit1iii_104 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %104 = phi i1 [ false, %98 ], [ %103, %101 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__101_45) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1iii_104 = main_101_103;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %104 = phi i1 [ false, %98 ], [ %103, %101 ]*/
	if ((((cur_state == LEGUP_F_main_BB__98_44) & (memory_controller_waitrequest == 1'd0)) & (main_98_100 == 1'd0))) begin
		main_float64_is_signaling_nanexit1iii_104_reg <= main_float64_is_signaling_nanexit1iii_104;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_104_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %104 = phi i1 [ false, %98 ], [ %103, %101 ]*/
	if (((cur_state == LEGUP_F_main_BB__101_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1iii_104_reg <= main_float64_is_signaling_nanexit1iii_104;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %105 = trunc i64 %.0.i.i to i63*/
		main_float64_is_signaling_nanexit1iii_105 = main_int32_to_float64exiti_0ii_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %105 = trunc i64 %.0.i.i to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_46)) begin
		main_float64_is_signaling_nanexit1iii_105_reg <= main_float64_is_signaling_nanexit1iii_105;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %106 = icmp ugt i63 %105, -4503599627370496*/
		main_float64_is_signaling_nanexit1iii_106 = (main_float64_is_signaling_nanexit1iii_105 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %106 = icmp ugt i63 %105, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_46)) begin
		main_float64_is_signaling_nanexit1iii_106_reg <= main_float64_is_signaling_nanexit1iii_106;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %107 = and i64 %.0.i.i, 9221120237041090560*/
		main_float64_is_signaling_nanexit1iii_107 = (main_int32_to_float64exiti_0ii_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %107 = and i64 %.0.i.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_46)) begin
		main_float64_is_signaling_nanexit1iii_107_reg <= main_float64_is_signaling_nanexit1iii_107;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %108 = icmp eq i64 %107, 9218868437227405312*/
		main_float64_is_signaling_nanexit1iii_108 = (main_float64_is_signaling_nanexit1iii_107 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %108 = icmp eq i64 %107, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_46)) begin
		main_float64_is_signaling_nanexit1iii_108_reg <= main_float64_is_signaling_nanexit1iii_108;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %109*/
	/*   %110 = and i64 %.0.i.i, 2251799813685247*/
		main_109_110 = (main_int32_to_float64exiti_0ii_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %109*/
	/*   %110 = and i64 %.0.i.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__109_47)) begin
		main_109_110_reg <= main_109_110;
		if (start == 1'b0 && ^(main_109_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_109_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %109*/
	/*   %111 = icmp ne i64 %110, 0*/
		main_109_111 = (main_109_110 != 64'd0);
end
always @(posedge clk) begin
	/* main: %109*/
	/*   %111 = icmp ne i64 %110, 0*/
	if ((cur_state == LEGUP_F_main_BB__109_47)) begin
		main_109_111_reg <= main_109_111;
		if (start == 1'b0 && ^(main_109_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_109_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i.i*/
	/*   %112 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i.i ], [ %111, %109 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_46) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1iii_108 == 1'd0))) begin
		main_float64_is_signaling_nanexitiii_112 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i.i.i*/
	/*   %112 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i.i ], [ %111, %109 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__109_47) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexitiii_112 = main_109_111;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i.i*/
	/*   %112 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i.i ], [ %111, %109 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_46) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1iii_108 == 1'd0))) begin
		main_float64_is_signaling_nanexitiii_112_reg <= main_float64_is_signaling_nanexitiii_112;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitiii_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitiii_112_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i.i.i*/
	/*   %112 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i.i ], [ %111, %109 ]*/
	if (((cur_state == LEGUP_F_main_BB__109_47) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexitiii_112_reg <= main_float64_is_signaling_nanexitiii_112;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitiii_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitiii_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i.i*/
	/*   %113 = or i1 %104, %112*/
		main_float64_is_signaling_nanexitiii_113 = (main_float64_is_signaling_nanexit1iii_104_reg | main_float64_is_signaling_nanexitiii_112_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i.i*/
	/*   %113 = or i1 %104, %112*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitiii_48)) begin
		main_float64_is_signaling_nanexitiii_113_reg <= main_float64_is_signaling_nanexitiii_113;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitiii_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitiii_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i.i*/
	/*   %114 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadiii_114 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i.i.i*/
	/*   %114 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_51)) begin
		main_threadiii_114_reg <= main_threadiii_114;
		if (start == 1'b0 && ^(main_threadiii_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadiii_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i.i*/
	/*   %115 = or i32 %114, 16*/
		main_threadiii_115 = (main_threadiii_114 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i.i.i*/
	/*   %115 = or i32 %114, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_51)) begin
		main_threadiii_115_reg <= main_threadiii_115;
		if (start == 1'b0 && ^(main_threadiii_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadiii_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.sink.i.i.i = phi i1 [ %112, %.thread.i.i.i ], [ %106, %float64_is_signaling_nan.exit.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitiii_48) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexitiii_113 == 1'd0))) begin
		main_propagateFloat64NaNexitii_sinkiii = main_float64_is_signaling_nanexit1iii_106_reg;
	end
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.sink.i.i.i = phi i1 [ %112, %.thread.i.i.i ], [ %106, %float64_is_signaling_nan.exit.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadiii_52) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexitii_sinkiii = main_float64_is_signaling_nanexitiii_112_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.sink.i.i.i = phi i1 [ %112, %.thread.i.i.i ], [ %106, %float64_is_signaling_nan.exit.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitiii_48) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexitiii_113 == 1'd0))) begin
		main_propagateFloat64NaNexitii_sinkiii_reg <= main_propagateFloat64NaNexitii_sinkiii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexitii_sinkiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexitii_sinkiii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.sink.i.i.i = phi i1 [ %112, %.thread.i.i.i ], [ %106, %float64_is_signaling_nan.exit.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadiii_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexitii_sinkiii_reg <= main_propagateFloat64NaNexitii_sinkiii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexitii_sinkiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexitii_sinkiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.mux2.v.i.i.i = select i1 %.sink.i.i.i, i64 %.0.i.i, i64 %9*/
		main_propagateFloat64NaNexitii_mux2viii = (main_propagateFloat64NaNexitii_sinkiii_reg ? main_int32_to_float64exiti_0ii_reg : main_5_9_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.mux2.v.i.i.i = select i1 %.sink.i.i.i, i64 %.0.i.i, i64 %9*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexitii_53)) begin
		main_propagateFloat64NaNexitii_mux2viii_reg <= main_propagateFloat64NaNexitii_mux2viii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexitii_mux2viii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexitii_mux2viii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.mux2.i.i.i = or i64 %.mux2.v.i.i.i, 2251799813685248*/
		main_propagateFloat64NaNexitii_mux2iii = (main_propagateFloat64NaNexitii_mux2viii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.mux2.i.i.i = or i64 %.mux2.v.i.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexitii_53)) begin
		main_propagateFloat64NaNexitii_mux2iii_reg <= main_propagateFloat64NaNexitii_mux2iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexitii_mux2iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexitii_mux2iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %116*/
	/*   %117 = shl nuw i64 %44, 63*/
		main_116_117 = (main_int32_to_float64exiti_44_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %116*/
	/*   %117 = shl nuw i64 %44, 63*/
	if ((cur_state == LEGUP_F_main_BB__116_54)) begin
		main_116_117_reg <= main_116_117;
		if (start == 1'b0 && ^(main_116_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %118*/
	/*   %119 = icmp eq i64 %40, 0*/
		main_118_119 = (main_int32_to_float64exiti_40_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %118*/
	/*   %119 = icmp eq i64 %40, 0*/
	if ((cur_state == LEGUP_F_main_BB__118_55)) begin
		main_118_119_reg <= main_118_119;
		if (start == 1'b0 && ^(main_118_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %121 = zext i32 %39 to i64*/
		main_120_121 = main_int32_to_float64exiti_39_reg;
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %121 = zext i32 %39 to i64*/
	if ((cur_state == LEGUP_F_main_BB__120_56)) begin
		main_120_121_reg <= main_120_121;
		if (start == 1'b0 && ^(main_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %122 = or i64 %121, %37*/
		main_120_122 = (main_120_121 | main_int32_to_float64exiti_37_reg);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %122 = or i64 %121, %37*/
	if ((cur_state == LEGUP_F_main_BB__120_56)) begin
		main_120_122_reg <= main_120_122;
		if (start == 1'b0 && ^(main_120_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %123 = icmp eq i64 %122, 0*/
		main_120_123 = (main_120_122 == 64'd0);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %123 = icmp eq i64 %122, 0*/
	if ((cur_state == LEGUP_F_main_BB__120_56)) begin
		main_120_123_reg <= main_120_123;
		if (start == 1'b0 && ^(main_120_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %124 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_120_124 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %124 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__120_58)) begin
		main_120_124_reg <= main_120_124;
		if (start == 1'b0 && ^(main_120_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %125*/
	/*   %126 = or i32 %124, 16*/
		main_125_126 = (main_120_124_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %125*/
	/*   %126 = or i32 %124, 16*/
	if ((cur_state == LEGUP_F_main_BB__125_59)) begin
		main_125_126_reg <= main_125_126;
		if (start == 1'b0 && ^(main_125_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_125_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %127*/
	/*   %128 = or i32 %124, 2*/
		main_127_128 = (main_120_124_reg | 32'd2);
end
always @(posedge clk) begin
	/* main: %127*/
	/*   %128 = or i32 %124, 2*/
	if ((cur_state == LEGUP_F_main_BB__127_61)) begin
		main_127_128_reg <= main_127_128;
		if (start == 1'b0 && ^(main_127_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %127*/
	/*   %129 = shl nuw i64 %44, 63*/
		main_127_129 = (main_int32_to_float64exiti_44_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %127*/
	/*   %129 = shl nuw i64 %44, 63*/
	if ((cur_state == LEGUP_F_main_BB__127_61)) begin
		main_127_129_reg <= main_127_129;
		if (start == 1'b0 && ^(main_127_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %127*/
	/*   %130 = or i64 %129, 9218868437227405312*/
		main_127_130 = (main_127_129 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %127*/
	/*   %130 = or i64 %129, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__127_61)) begin
		main_127_130_reg <= main_127_130;
		if (start == 1'b0 && ^(main_127_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %132 = icmp ult i64 %40, 4294967296*/
		main_131_132 = (main_int32_to_float64exiti_40_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %132 = icmp ult i64 %40, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__131_63)) begin
		main_131_132_reg <= main_131_132;
		if (start == 1'b0 && ^(main_131_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %133 = lshr i64 %40, 32*/
		main_131_133 = (main_int32_to_float64exiti_40_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %133 = lshr i64 %40, 32*/
	if ((cur_state == LEGUP_F_main_BB__131_63)) begin
		main_131_133_reg <= main_131_133;
		if (start == 1'b0 && ^(main_131_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %a.sink.i.i2.i.i = select i1 %132, i64 %.0.i.i, i64 %133*/
		main_131_asinkii2ii = (main_131_132 ? main_int32_to_float64exiti_0ii_reg : main_131_133);
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %a.sink.i.i2.i.i = select i1 %132, i64 %.0.i.i, i64 %133*/
	if ((cur_state == LEGUP_F_main_BB__131_63)) begin
		main_131_asinkii2ii_reg <= main_131_asinkii2ii;
		if (start == 1'b0 && ^(main_131_asinkii2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_asinkii2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %shiftCount.0.i.i3.i.i = select i1 %132, i32 32, i32 0*/
		main_131_shiftCount0ii3ii = (main_131_132 ? 32'd32 : 32'd0);
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %shiftCount.0.i.i3.i.i = select i1 %132, i32 32, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__131_63)) begin
		main_131_shiftCount0ii3ii_reg <= main_131_shiftCount0ii3ii;
		if (start == 1'b0 && ^(main_131_shiftCount0ii3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_shiftCount0ii3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %extract.t.i.i4.i.i = trunc i64 %a.sink.i.i2.i.i to i32*/
		main_131_extracttii4ii = main_131_asinkii2ii[31:0];
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %extract.t.i.i4.i.i = trunc i64 %a.sink.i.i2.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__131_63)) begin
		main_131_extracttii4ii_reg <= main_131_extracttii4ii;
		if (start == 1'b0 && ^(main_131_extracttii4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_extracttii4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %134 = icmp ult i32 %extract.t.i.i4.i.i, 65536*/
		main_131_134 = (main_131_extracttii4ii < 32'd65536);
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %134 = icmp ult i32 %extract.t.i.i4.i.i, 65536*/
	if ((cur_state == LEGUP_F_main_BB__131_63)) begin
		main_131_134_reg <= main_131_134;
		if (start == 1'b0 && ^(main_131_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %135 = shl i32 %extract.t.i.i4.i.i, 16*/
		main_131_135 = (main_131_extracttii4ii <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %135 = shl i32 %extract.t.i.i4.i.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__131_63)) begin
		main_131_135_reg <= main_131_135;
		if (start == 1'b0 && ^(main_131_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %.a.i.i.i5.i.i = select i1 %134, i32 %135, i32 %extract.t.i.i4.i.i*/
		main_131_aiii5ii = (main_131_134 ? main_131_135 : main_131_extracttii4ii);
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %.a.i.i.i5.i.i = select i1 %134, i32 %135, i32 %extract.t.i.i4.i.i*/
	if ((cur_state == LEGUP_F_main_BB__131_63)) begin
		main_131_aiii5ii_reg <= main_131_aiii5ii;
		if (start == 1'b0 && ^(main_131_aiii5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_aiii5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %..i.i.i6.i.i = select i1 %134, i32 16, i32 0*/
		main_131_iii6ii = (main_131_134 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %..i.i.i6.i.i = select i1 %134, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__131_63)) begin
		main_131_iii6ii_reg <= main_131_iii6ii;
		if (start == 1'b0 && ^(main_131_iii6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_iii6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %136 = icmp ult i32 %.a.i.i.i5.i.i, 16777216*/
		main_131_136 = (main_131_aiii5ii < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %136 = icmp ult i32 %.a.i.i.i5.i.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__131_63)) begin
		main_131_136_reg <= main_131_136;
		if (start == 1'b0 && ^(main_131_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %137*/
	/*   %138 = or i32 %..i.i.i6.i.i, 8*/
		main_137_138 = (main_131_iii6ii_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %137*/
	/*   %138 = or i32 %..i.i.i6.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__137_64)) begin
		main_137_138_reg <= main_137_138;
		if (start == 1'b0 && ^(main_137_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_137_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %137*/
	/*   %139 = shl i32 %.a.i.i.i5.i.i, 8*/
		main_137_139 = (main_131_aiii5ii_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %137*/
	/*   %139 = shl i32 %.a.i.i.i5.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__137_64)) begin
		main_137_139_reg <= main_137_139;
		if (start == 1'b0 && ^(main_137_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_137_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %.1.i.i.i7.i.i = phi i32 [ %139, %137 ], [ %.a.i.i.i5.i.i, %131 ]*/
	if ((((cur_state == LEGUP_F_main_BB__131_63) & (memory_controller_waitrequest == 1'd0)) & (main_131_136 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit9ii_1iii7ii = main_131_aiii5ii;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %.1.i.i.i7.i.i = phi i32 [ %139, %137 ], [ %.a.i.i.i5.i.i, %131 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__137_64) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexit9ii_1iii7ii = main_137_139;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %.1.i.i.i7.i.i = phi i32 [ %139, %137 ], [ %.a.i.i.i5.i.i, %131 ]*/
	if ((((cur_state == LEGUP_F_main_BB__131_63) & (memory_controller_waitrequest == 1'd0)) & (main_131_136 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit9ii_1iii7ii_reg <= main_normalizeFloat64Subnormalexit9ii_1iii7ii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_1iii7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_1iii7ii_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %.1.i.i.i7.i.i = phi i32 [ %139, %137 ], [ %.a.i.i.i5.i.i, %131 ]*/
	if (((cur_state == LEGUP_F_main_BB__137_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexit9ii_1iii7ii_reg <= main_normalizeFloat64Subnormalexit9ii_1iii7ii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_1iii7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_1iii7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %shiftCount.1.i.i.i8.i.i = phi i32 [ %138, %137 ], [ %..i.i.i6.i.i, %131 ]*/
	if ((((cur_state == LEGUP_F_main_BB__131_63) & (memory_controller_waitrequest == 1'd0)) & (main_131_136 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii = main_131_iii6ii;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %shiftCount.1.i.i.i8.i.i = phi i32 [ %138, %137 ], [ %..i.i.i6.i.i, %131 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__137_64) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii = main_137_138;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %shiftCount.1.i.i.i8.i.i = phi i32 [ %138, %137 ], [ %..i.i.i6.i.i, %131 ]*/
	if ((((cur_state == LEGUP_F_main_BB__131_63) & (memory_controller_waitrequest == 1'd0)) & (main_131_136 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii_reg <= main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %shiftCount.1.i.i.i8.i.i = phi i32 [ %138, %137 ], [ %..i.i.i6.i.i, %131 ]*/
	if (((cur_state == LEGUP_F_main_BB__137_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii_reg <= main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %140 = lshr i32 %.1.i.i.i7.i.i, 24*/
		main_normalizeFloat64Subnormalexit9ii_140 = (main_normalizeFloat64Subnormalexit9ii_1iii7ii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %140 = lshr i32 %.1.i.i.i7.i.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_65)) begin
		main_normalizeFloat64Subnormalexit9ii_140_reg <= main_normalizeFloat64Subnormalexit9ii_140;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %141 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %140*/
		main_normalizeFloat64Subnormalexit9ii_141 = (`TAG_g_countLeadingZeros32countLeadingZerosHigh_a | (4 * main_normalizeFloat64Subnormalexit9ii_140));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %141 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %140*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_65)) begin
		main_normalizeFloat64Subnormalexit9ii_141_reg <= main_normalizeFloat64Subnormalexit9ii_141;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %142 = load i32* %141, align 4, !tbaa !5*/
		main_normalizeFloat64Subnormalexit9ii_142 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %142 = load i32* %141, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67)) begin
		main_normalizeFloat64Subnormalexit9ii_142_reg <= main_normalizeFloat64Subnormalexit9ii_142;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %143 = add nsw i32 %shiftCount.1.i.i.i8.i.i, %shiftCount.0.i.i3.i.i*/
		main_normalizeFloat64Subnormalexit9ii_143 = (main_normalizeFloat64Subnormalexit9ii_shiftCount1iii8ii_reg + main_131_shiftCount0ii3ii_reg);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %143 = add nsw i32 %shiftCount.1.i.i.i8.i.i, %shiftCount.0.i.i3.i.i*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_65)) begin
		main_normalizeFloat64Subnormalexit9ii_143_reg <= main_normalizeFloat64Subnormalexit9ii_143;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %144 = add i32 %143, %142*/
		main_normalizeFloat64Subnormalexit9ii_144 = (main_normalizeFloat64Subnormalexit9ii_143_reg + main_normalizeFloat64Subnormalexit9ii_142);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %144 = add i32 %143, %142*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67)) begin
		main_normalizeFloat64Subnormalexit9ii_144_reg <= main_normalizeFloat64Subnormalexit9ii_144;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %145 = add nsw i32 %144, -11*/
		main_normalizeFloat64Subnormalexit9ii_145 = (main_normalizeFloat64Subnormalexit9ii_144 + -32'd11);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %145 = add nsw i32 %144, -11*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67)) begin
		main_normalizeFloat64Subnormalexit9ii_145_reg <= main_normalizeFloat64Subnormalexit9ii_145;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %146 = zext i32 %145 to i64*/
		main_normalizeFloat64Subnormalexit9ii_146 = main_normalizeFloat64Subnormalexit9ii_145;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %146 = zext i32 %145 to i64*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67)) begin
		main_normalizeFloat64Subnormalexit9ii_146_reg <= main_normalizeFloat64Subnormalexit9ii_146;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %147 = shl i64 %40, %146*/
		main_normalizeFloat64Subnormalexit9ii_147 = (main_int32_to_float64exiti_40_reg <<< (main_normalizeFloat64Subnormalexit9ii_146 % 64'd64));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %147 = shl i64 %40, %146*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67)) begin
		main_normalizeFloat64Subnormalexit9ii_147_reg <= main_normalizeFloat64Subnormalexit9ii_147;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %148 = sub i32 12, %144*/
		main_normalizeFloat64Subnormalexit9ii_148 = (32'd12 - main_normalizeFloat64Subnormalexit9ii_144);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %148 = sub i32 12, %144*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67)) begin
		main_normalizeFloat64Subnormalexit9ii_148_reg <= main_normalizeFloat64Subnormalexit9ii_148;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit9ii_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit9ii_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %149*/
	/*   %150 = phi i32 [ %42, %95 ], [ %148, %normalizeFloat64Subnormal.exit9.i.i ]*/
	if (((((cur_state == LEGUP_F_main_BB__95_42) & (memory_controller_waitrequest == 1'd0)) & (main_int32_to_float64exiti_42_reg != 32'd2047)) & (main_int32_to_float64exiti_42_reg != 32'd0))) begin
		main_149_150 = main_int32_to_float64exiti_42_reg;
	end
	/* main: %149*/
	/*   %150 = phi i32 [ %42, %95 ], [ %148, %normalizeFloat64Subnormal.exit9.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_149_150 = main_normalizeFloat64Subnormalexit9ii_148;
	end
end
always @(posedge clk) begin
	/* main: %149*/
	/*   %150 = phi i32 [ %42, %95 ], [ %148, %normalizeFloat64Subnormal.exit9.i.i ]*/
	if (((((cur_state == LEGUP_F_main_BB__95_42) & (memory_controller_waitrequest == 1'd0)) & (main_int32_to_float64exiti_42_reg != 32'd2047)) & (main_int32_to_float64exiti_42_reg != 32'd0))) begin
		main_149_150_reg <= main_149_150;
		if (start == 1'b0 && ^(main_149_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_149_150_reg"); $finish; end
	end
	/* main: %149*/
	/*   %150 = phi i32 [ %42, %95 ], [ %148, %normalizeFloat64Subnormal.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_149_150_reg <= main_149_150;
		if (start == 1'b0 && ^(main_149_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_149_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %149*/
	/*   %151 = phi i64 [ %40, %95 ], [ %147, %normalizeFloat64Subnormal.exit9.i.i ]*/
	if (((((cur_state == LEGUP_F_main_BB__95_42) & (memory_controller_waitrequest == 1'd0)) & (main_int32_to_float64exiti_42_reg != 32'd2047)) & (main_int32_to_float64exiti_42_reg != 32'd0))) begin
		main_149_151 = main_int32_to_float64exiti_40_reg;
	end
	/* main: %149*/
	/*   %151 = phi i64 [ %40, %95 ], [ %147, %normalizeFloat64Subnormal.exit9.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_149_151 = main_normalizeFloat64Subnormalexit9ii_147;
	end
end
always @(posedge clk) begin
	/* main: %149*/
	/*   %151 = phi i64 [ %40, %95 ], [ %147, %normalizeFloat64Subnormal.exit9.i.i ]*/
	if (((((cur_state == LEGUP_F_main_BB__95_42) & (memory_controller_waitrequest == 1'd0)) & (main_int32_to_float64exiti_42_reg != 32'd2047)) & (main_int32_to_float64exiti_42_reg != 32'd0))) begin
		main_149_151_reg <= main_149_151;
		if (start == 1'b0 && ^(main_149_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_149_151_reg"); $finish; end
	end
	/* main: %149*/
	/*   %151 = phi i64 [ %40, %95 ], [ %147, %normalizeFloat64Subnormal.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_149_151_reg <= main_149_151;
		if (start == 1'b0 && ^(main_149_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_149_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %149*/
	/*   %152 = icmp eq i32 %39, 0*/
		main_149_152 = (main_int32_to_float64exiti_39_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %149*/
	/*   %152 = icmp eq i32 %39, 0*/
	if ((cur_state == LEGUP_F_main_BB__149_68)) begin
		main_149_152_reg <= main_149_152;
		if (start == 1'b0 && ^(main_149_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_149_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %153*/
	/*   %154 = icmp eq i64 %37, 0*/
		main_153_154 = (main_int32_to_float64exiti_37_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %153*/
	/*   %154 = icmp eq i64 %37, 0*/
	if ((cur_state == LEGUP_F_main_BB__153_69)) begin
		main_153_154_reg <= main_153_154;
		if (start == 1'b0 && ^(main_153_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_153_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %155*/
	/*   %156 = shl nuw i64 %44, 63*/
		main_155_156 = (main_int32_to_float64exiti_44_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %155*/
	/*   %156 = shl nuw i64 %44, 63*/
	if ((cur_state == LEGUP_F_main_BB__155_70)) begin
		main_155_156_reg <= main_155_156;
		if (start == 1'b0 && ^(main_155_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_155_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %158 = icmp ult i64 %37, 4294967296*/
		main_157_158 = (main_int32_to_float64exiti_37_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %158 = icmp ult i64 %37, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__157_71)) begin
		main_157_158_reg <= main_157_158;
		if (start == 1'b0 && ^(main_157_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %159 = lshr i64 %37, 32*/
		main_157_159 = (main_int32_to_float64exiti_37_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %159 = lshr i64 %37, 32*/
	if ((cur_state == LEGUP_F_main_BB__157_71)) begin
		main_157_159_reg <= main_157_159;
		if (start == 1'b0 && ^(main_157_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %a.sink.i.i.i.i = select i1 %158, i64 %9, i64 %159*/
		main_157_asinkiiii = (main_157_158 ? main_5_9_reg : main_157_159);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %a.sink.i.i.i.i = select i1 %158, i64 %9, i64 %159*/
	if ((cur_state == LEGUP_F_main_BB__157_71)) begin
		main_157_asinkiiii_reg <= main_157_asinkiiii;
		if (start == 1'b0 && ^(main_157_asinkiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_asinkiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %shiftCount.0.i.i.i.i = select i1 %158, i32 32, i32 0*/
		main_157_shiftCount0iiii = (main_157_158 ? 32'd32 : 32'd0);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %shiftCount.0.i.i.i.i = select i1 %158, i32 32, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__157_71)) begin
		main_157_shiftCount0iiii_reg <= main_157_shiftCount0iiii;
		if (start == 1'b0 && ^(main_157_shiftCount0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_shiftCount0iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %extract.t.i.i.i.i = trunc i64 %a.sink.i.i.i.i to i32*/
		main_157_extracttiiii = main_157_asinkiiii[31:0];
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %extract.t.i.i.i.i = trunc i64 %a.sink.i.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__157_71)) begin
		main_157_extracttiiii_reg <= main_157_extracttiiii;
		if (start == 1'b0 && ^(main_157_extracttiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_extracttiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %160 = icmp ult i32 %extract.t.i.i.i.i, 65536*/
		main_157_160 = (main_157_extracttiiii < 32'd65536);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %160 = icmp ult i32 %extract.t.i.i.i.i, 65536*/
	if ((cur_state == LEGUP_F_main_BB__157_71)) begin
		main_157_160_reg <= main_157_160;
		if (start == 1'b0 && ^(main_157_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %161 = shl i32 %extract.t.i.i.i.i, 16*/
		main_157_161 = (main_157_extracttiiii <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %161 = shl i32 %extract.t.i.i.i.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__157_71)) begin
		main_157_161_reg <= main_157_161;
		if (start == 1'b0 && ^(main_157_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %.a.i.i.i.i.i = select i1 %160, i32 %161, i32 %extract.t.i.i.i.i*/
		main_157_aiiiii = (main_157_160 ? main_157_161 : main_157_extracttiiii);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %.a.i.i.i.i.i = select i1 %160, i32 %161, i32 %extract.t.i.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__157_71)) begin
		main_157_aiiiii_reg <= main_157_aiiiii;
		if (start == 1'b0 && ^(main_157_aiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_aiiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %..i.i.i.i.i = select i1 %160, i32 16, i32 0*/
		main_157_iiiii = (main_157_160 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %..i.i.i.i.i = select i1 %160, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__157_71)) begin
		main_157_iiiii_reg <= main_157_iiiii;
		if (start == 1'b0 && ^(main_157_iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %162 = icmp ult i32 %.a.i.i.i.i.i, 16777216*/
		main_157_162 = (main_157_aiiiii < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %162 = icmp ult i32 %.a.i.i.i.i.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__157_71)) begin
		main_157_162_reg <= main_157_162;
		if (start == 1'b0 && ^(main_157_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %163*/
	/*   %164 = or i32 %..i.i.i.i.i, 8*/
		main_163_164 = (main_157_iiiii_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %163*/
	/*   %164 = or i32 %..i.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__163_72)) begin
		main_163_164_reg <= main_163_164;
		if (start == 1'b0 && ^(main_163_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_163_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %163*/
	/*   %165 = shl i32 %.a.i.i.i.i.i, 8*/
		main_163_165 = (main_157_aiiiii_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %163*/
	/*   %165 = shl i32 %.a.i.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__163_72)) begin
		main_163_165_reg <= main_163_165;
		if (start == 1'b0 && ^(main_163_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_163_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %165, %163 ], [ %.a.i.i.i.i.i, %157 ]*/
	if ((((cur_state == LEGUP_F_main_BB__157_71) & (memory_controller_waitrequest == 1'd0)) & (main_157_162 == 1'd0))) begin
		main_normalizeFloat64Subnormalexitii_1iiiii = main_157_aiiiii;
	end
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %165, %163 ], [ %.a.i.i.i.i.i, %157 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__163_72) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexitii_1iiiii = main_163_165;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %165, %163 ], [ %.a.i.i.i.i.i, %157 ]*/
	if ((((cur_state == LEGUP_F_main_BB__157_71) & (memory_controller_waitrequest == 1'd0)) & (main_157_162 == 1'd0))) begin
		main_normalizeFloat64Subnormalexitii_1iiiii_reg <= main_normalizeFloat64Subnormalexitii_1iiiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_1iiiii_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %165, %163 ], [ %.a.i.i.i.i.i, %157 ]*/
	if (((cur_state == LEGUP_F_main_BB__163_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexitii_1iiiii_reg <= main_normalizeFloat64Subnormalexitii_1iiiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_1iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %164, %163 ], [ %..i.i.i.i.i, %157 ]*/
	if ((((cur_state == LEGUP_F_main_BB__157_71) & (memory_controller_waitrequest == 1'd0)) & (main_157_162 == 1'd0))) begin
		main_normalizeFloat64Subnormalexitii_shiftCount1iiiii = main_157_iiiii;
	end
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %164, %163 ], [ %..i.i.i.i.i, %157 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__163_72) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexitii_shiftCount1iiiii = main_163_164;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %164, %163 ], [ %..i.i.i.i.i, %157 ]*/
	if ((((cur_state == LEGUP_F_main_BB__157_71) & (memory_controller_waitrequest == 1'd0)) & (main_157_162 == 1'd0))) begin
		main_normalizeFloat64Subnormalexitii_shiftCount1iiiii_reg <= main_normalizeFloat64Subnormalexitii_shiftCount1iiiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_shiftCount1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_shiftCount1iiiii_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %164, %163 ], [ %..i.i.i.i.i, %157 ]*/
	if (((cur_state == LEGUP_F_main_BB__163_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexitii_shiftCount1iiiii_reg <= main_normalizeFloat64Subnormalexitii_shiftCount1iiiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_shiftCount1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_shiftCount1iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %166 = lshr i32 %.1.i.i.i.i.i, 24*/
		main_normalizeFloat64Subnormalexitii_166 = (main_normalizeFloat64Subnormalexitii_1iiiii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %166 = lshr i32 %.1.i.i.i.i.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_73)) begin
		main_normalizeFloat64Subnormalexitii_166_reg <= main_normalizeFloat64Subnormalexitii_166;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %167 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %166*/
		main_normalizeFloat64Subnormalexitii_167 = (`TAG_g_countLeadingZeros32countLeadingZerosHigh_a | (4 * main_normalizeFloat64Subnormalexitii_166));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %167 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %166*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_73)) begin
		main_normalizeFloat64Subnormalexitii_167_reg <= main_normalizeFloat64Subnormalexitii_167;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %168 = load i32* %167, align 4, !tbaa !5*/
		main_normalizeFloat64Subnormalexitii_168 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %168 = load i32* %167, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75)) begin
		main_normalizeFloat64Subnormalexitii_168_reg <= main_normalizeFloat64Subnormalexitii_168;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %169 = add nsw i32 %shiftCount.1.i.i.i.i.i, %shiftCount.0.i.i.i.i*/
		main_normalizeFloat64Subnormalexitii_169 = (main_normalizeFloat64Subnormalexitii_shiftCount1iiiii_reg + main_157_shiftCount0iiii_reg);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %169 = add nsw i32 %shiftCount.1.i.i.i.i.i, %shiftCount.0.i.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_73)) begin
		main_normalizeFloat64Subnormalexitii_169_reg <= main_normalizeFloat64Subnormalexitii_169;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %170 = add i32 %169, %168*/
		main_normalizeFloat64Subnormalexitii_170 = (main_normalizeFloat64Subnormalexitii_169_reg + main_normalizeFloat64Subnormalexitii_168);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %170 = add i32 %169, %168*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75)) begin
		main_normalizeFloat64Subnormalexitii_170_reg <= main_normalizeFloat64Subnormalexitii_170;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %171 = add nsw i32 %170, -11*/
		main_normalizeFloat64Subnormalexitii_171 = (main_normalizeFloat64Subnormalexitii_170 + -32'd11);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %171 = add nsw i32 %170, -11*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75)) begin
		main_normalizeFloat64Subnormalexitii_171_reg <= main_normalizeFloat64Subnormalexitii_171;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %172 = zext i32 %171 to i64*/
		main_normalizeFloat64Subnormalexitii_172 = main_normalizeFloat64Subnormalexitii_171;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %172 = zext i32 %171 to i64*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75)) begin
		main_normalizeFloat64Subnormalexitii_172_reg <= main_normalizeFloat64Subnormalexitii_172;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %173 = shl i64 %37, %172*/
		main_normalizeFloat64Subnormalexitii_173 = (main_int32_to_float64exiti_37_reg <<< (main_normalizeFloat64Subnormalexitii_172 % 64'd64));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %173 = shl i64 %37, %172*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75)) begin
		main_normalizeFloat64Subnormalexitii_173_reg <= main_normalizeFloat64Subnormalexitii_173;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %174 = sub i32 12, %170*/
		main_normalizeFloat64Subnormalexitii_174 = (32'd12 - main_normalizeFloat64Subnormalexitii_170);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %174 = sub i32 12, %170*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75)) begin
		main_normalizeFloat64Subnormalexitii_174_reg <= main_normalizeFloat64Subnormalexitii_174;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexitii_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexitii_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %176 = phi i32 [ %174, %normalizeFloat64Subnormal.exit.i.i ], [ %39, %149 ]*/
	if ((((cur_state == LEGUP_F_main_BB__149_68) & (memory_controller_waitrequest == 1'd0)) & (main_149_152 == 1'd0))) begin
		main_175_176 = main_int32_to_float64exiti_39_reg;
	end
	/* main: %175*/
	/*   %176 = phi i32 [ %174, %normalizeFloat64Subnormal.exit.i.i ], [ %39, %149 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_175_176 = main_normalizeFloat64Subnormalexitii_174;
	end
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %176 = phi i32 [ %174, %normalizeFloat64Subnormal.exit.i.i ], [ %39, %149 ]*/
	if ((((cur_state == LEGUP_F_main_BB__149_68) & (memory_controller_waitrequest == 1'd0)) & (main_149_152 == 1'd0))) begin
		main_175_176_reg <= main_175_176;
		if (start == 1'b0 && ^(main_175_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_176_reg"); $finish; end
	end
	/* main: %175*/
	/*   %176 = phi i32 [ %174, %normalizeFloat64Subnormal.exit.i.i ], [ %39, %149 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75) & (memory_controller_waitrequest == 1'd0))) begin
		main_175_176_reg <= main_175_176;
		if (start == 1'b0 && ^(main_175_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %177 = phi i64 [ %173, %normalizeFloat64Subnormal.exit.i.i ], [ %37, %149 ]*/
	if ((((cur_state == LEGUP_F_main_BB__149_68) & (memory_controller_waitrequest == 1'd0)) & (main_149_152 == 1'd0))) begin
		main_175_177 = main_int32_to_float64exiti_37_reg;
	end
	/* main: %175*/
	/*   %177 = phi i64 [ %173, %normalizeFloat64Subnormal.exit.i.i ], [ %37, %149 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_175_177 = main_normalizeFloat64Subnormalexitii_173;
	end
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %177 = phi i64 [ %173, %normalizeFloat64Subnormal.exit.i.i ], [ %37, %149 ]*/
	if ((((cur_state == LEGUP_F_main_BB__149_68) & (memory_controller_waitrequest == 1'd0)) & (main_149_152 == 1'd0))) begin
		main_175_177_reg <= main_175_177;
		if (start == 1'b0 && ^(main_175_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_177_reg"); $finish; end
	end
	/* main: %175*/
	/*   %177 = phi i64 [ %173, %normalizeFloat64Subnormal.exit.i.i ], [ %37, %149 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_75) & (memory_controller_waitrequest == 1'd0))) begin
		main_175_177_reg <= main_175_177;
		if (start == 1'b0 && ^(main_175_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %178 = sub nsw i32 %176, %150*/
		main_175_178 = (main_175_176_reg - main_149_150_reg);
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %178 = sub nsw i32 %176, %150*/
	if ((cur_state == LEGUP_F_main_BB__175_76)) begin
		main_175_178_reg <= main_175_178;
		if (start == 1'b0 && ^(main_175_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %179 = add nsw i32 %178, 1021*/
		main_175_179 = (main_175_178 + 32'd1021);
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %179 = add nsw i32 %178, 1021*/
	if ((cur_state == LEGUP_F_main_BB__175_76)) begin
		main_175_179_reg <= main_175_179;
		if (start == 1'b0 && ^(main_175_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %180 = shl i64 %177, 10*/
		main_175_180 = (main_175_177_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %180 = shl i64 %177, 10*/
	if ((cur_state == LEGUP_F_main_BB__175_76)) begin
		main_175_180_reg <= main_175_180;
		if (start == 1'b0 && ^(main_175_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %181 = or i64 %180, 4611686018427387904*/
		main_175_181 = (main_175_180 | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %181 = or i64 %180, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__175_76)) begin
		main_175_181_reg <= main_175_181;
		if (start == 1'b0 && ^(main_175_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %182 = shl i64 %151, 11*/
		main_175_182 = (main_149_151_reg <<< (64'd11 % 64'd64));
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %182 = shl i64 %151, 11*/
	if ((cur_state == LEGUP_F_main_BB__175_76)) begin
		main_175_182_reg <= main_175_182;
		if (start == 1'b0 && ^(main_175_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %183 = or i64 %182, -9223372036854775808*/
		main_175_183 = (main_175_182 | -64'd9223372036854775808);
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %183 = or i64 %182, -9223372036854775808*/
	if ((cur_state == LEGUP_F_main_BB__175_76)) begin
		main_175_183_reg <= main_175_183;
		if (start == 1'b0 && ^(main_175_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %184 = shl i64 %181, 1*/
		main_175_184 = (main_175_181 <<< (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %184 = shl i64 %181, 1*/
	if ((cur_state == LEGUP_F_main_BB__175_76)) begin
		main_175_184_reg <= main_175_184;
		if (start == 1'b0 && ^(main_175_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %185 = icmp ugt i64 %183, %184*/
		main_175_185 = (main_175_183 > main_175_184);
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %185 = icmp ugt i64 %183, %184*/
	if ((cur_state == LEGUP_F_main_BB__175_76)) begin
		main_175_185_reg <= main_175_185;
		if (start == 1'b0 && ^(main_175_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %187 = lshr exact i64 %181, 1*/
		main_186_187 = (main_175_181_reg >>> (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %187 = lshr exact i64 %181, 1*/
	if ((cur_state == LEGUP_F_main_BB__186_77)) begin
		main_186_187_reg <= main_186_187;
		if (start == 1'b0 && ^(main_186_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %188 = add nsw i32 %178, 1022*/
		main_186_188 = (main_175_178_reg + 32'd1022);
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %188 = add nsw i32 %178, 1022*/
	if ((cur_state == LEGUP_F_main_BB__186_77)) begin
		main_186_188_reg <= main_186_188;
		if (start == 1'b0 && ^(main_186_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %190 = phi i64 [ %187, %186 ], [ %181, %175 ]*/
	if ((((cur_state == LEGUP_F_main_BB__175_76) & (memory_controller_waitrequest == 1'd0)) & (main_175_185 == 1'd1))) begin
		main_189_190 = main_175_181;
	end
	/* main: %189*/
	/*   %190 = phi i64 [ %187, %186 ], [ %181, %175 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__186_77) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_189_190 = main_186_187;
	end
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %190 = phi i64 [ %187, %186 ], [ %181, %175 ]*/
	if ((((cur_state == LEGUP_F_main_BB__175_76) & (memory_controller_waitrequest == 1'd0)) & (main_175_185 == 1'd1))) begin
		main_189_190_reg <= main_189_190;
		if (start == 1'b0 && ^(main_189_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_190_reg"); $finish; end
	end
	/* main: %189*/
	/*   %190 = phi i64 [ %187, %186 ], [ %181, %175 ]*/
	if (((cur_state == LEGUP_F_main_BB__186_77) & (memory_controller_waitrequest == 1'd0))) begin
		main_189_190_reg <= main_189_190;
		if (start == 1'b0 && ^(main_189_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %zExp.0.i.i = phi i32 [ %188, %186 ], [ %179, %175 ]*/
	if ((((cur_state == LEGUP_F_main_BB__175_76) & (memory_controller_waitrequest == 1'd0)) & (main_175_185 == 1'd1))) begin
		main_189_zExp0ii = main_175_179;
	end
	/* main: %189*/
	/*   %zExp.0.i.i = phi i32 [ %188, %186 ], [ %179, %175 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__186_77) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_189_zExp0ii = main_186_188;
	end
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %zExp.0.i.i = phi i32 [ %188, %186 ], [ %179, %175 ]*/
	if ((((cur_state == LEGUP_F_main_BB__175_76) & (memory_controller_waitrequest == 1'd0)) & (main_175_185 == 1'd1))) begin
		main_189_zExp0ii_reg <= main_189_zExp0ii;
		if (start == 1'b0 && ^(main_189_zExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_zExp0ii_reg"); $finish; end
	end
	/* main: %189*/
	/*   %zExp.0.i.i = phi i32 [ %188, %186 ], [ %179, %175 ]*/
	if (((cur_state == LEGUP_F_main_BB__186_77) & (memory_controller_waitrequest == 1'd0))) begin
		main_189_zExp0ii_reg <= main_189_zExp0ii;
		if (start == 1'b0 && ^(main_189_zExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_zExp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %191 = icmp ugt i64 %183, %190*/
		main_189_191 = (main_175_183_reg > main_189_190_reg);
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %191 = icmp ugt i64 %183, %190*/
	if ((cur_state == LEGUP_F_main_BB__189_78)) begin
		main_189_191_reg <= main_189_191;
		if (start == 1'b0 && ^(main_189_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %192*/
	/*   %193 = lshr i64 %183, 32*/
		main_192_193 = (main_175_183_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %192*/
	/*   %193 = lshr i64 %183, 32*/
	if ((cur_state == LEGUP_F_main_BB__192_79)) begin
		main_192_193_reg <= main_192_193;
		if (start == 1'b0 && ^(main_192_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_192_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %192*/
	/*   %194 = shl nuw i64 %193, 32*/
		main_192_194 = (main_192_193 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %192*/
	/*   %194 = shl nuw i64 %193, 32*/
	if ((cur_state == LEGUP_F_main_BB__192_79)) begin
		main_192_194_reg <= main_192_194;
		if (start == 1'b0 && ^(main_192_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_192_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %192*/
	/*   %195 = icmp ugt i64 %194, %190*/
		main_192_195 = (main_192_194 > main_189_190_reg);
end
always @(posedge clk) begin
	/* main: %192*/
	/*   %195 = icmp ugt i64 %194, %190*/
	if ((cur_state == LEGUP_F_main_BB__192_79)) begin
		main_192_195_reg <= main_192_195;
		if (start == 1'b0 && ^(main_192_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_192_195_reg"); $finish; end
	end
end
always @(*) begin
	main_196_197 = main_unsigned_divide_64_0;
end
always @(posedge clk) begin
	/* main: %196*/
	/*   %197 = udiv i64 %190, %193*/
	if ((cur_state == LEGUP_F_main_BB__196_144)) begin
		main_196_197_reg <= main_196_197;
		if (start == 1'b0 && ^(main_196_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_196_197_reg"); $finish; end
	end
	/* main: %196*/
	/*   %197 = udiv i64 %190, %193*/
	if ((cur_state == LEGUP_F_main_BB__196_144)) begin
		main_196_197_reg <= main_196_197;
		if (start == 1'b0 && ^(main_196_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_196_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %196*/
	/*   %198 = shl i64 %197, 32*/
		main_196_198 = (main_196_197 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %196*/
	/*   %198 = shl i64 %197, 32*/
	if ((cur_state == LEGUP_F_main_BB__196_144)) begin
		main_196_198_reg <= main_196_198;
		if (start == 1'b0 && ^(main_196_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_196_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %200 = phi i64 [ %198, %196 ], [ -4294967296, %192 ]*/
	if ((((cur_state == LEGUP_F_main_BB__192_79) & (memory_controller_waitrequest == 1'd0)) & (main_192_195 == 1'd0))) begin
		main_199_200 = -64'd4294967296;
	end
	/* main: %199*/
	/*   %200 = phi i64 [ %198, %196 ], [ -4294967296, %192 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__196_144) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_199_200 = main_196_198;
	end
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %200 = phi i64 [ %198, %196 ], [ -4294967296, %192 ]*/
	if ((((cur_state == LEGUP_F_main_BB__192_79) & (memory_controller_waitrequest == 1'd0)) & (main_192_195 == 1'd0))) begin
		main_199_200_reg <= main_199_200;
		if (start == 1'b0 && ^(main_199_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_200_reg"); $finish; end
	end
	/* main: %199*/
	/*   %200 = phi i64 [ %198, %196 ], [ -4294967296, %192 ]*/
	if (((cur_state == LEGUP_F_main_BB__196_144) & (memory_controller_waitrequest == 1'd0))) begin
		main_199_200_reg <= main_199_200;
		if (start == 1'b0 && ^(main_199_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %201 = lshr exact i64 %200, 32*/
		main_199_201 = (main_199_200_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %201 = lshr exact i64 %200, 32*/
	if ((cur_state == LEGUP_F_main_BB__199_145)) begin
		main_199_201_reg <= main_199_201;
		if (start == 1'b0 && ^(main_199_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %202 = and i64 %182, 4294965248*/
		main_199_202 = (main_175_182_reg & 64'd4294965248);
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %202 = and i64 %182, 4294965248*/
	if ((cur_state == LEGUP_F_main_BB__199_145)) begin
		main_199_202_reg <= main_199_202;
		if (start == 1'b0 && ^(main_199_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_202_reg"); $finish; end
	end
end
always @(*) begin
	main_199_203 = main_199_203_stage0_reg;
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %203 = mul i64 %201, %202*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_203_reg <= main_199_203;
		if (start == 1'b0 && ^(main_199_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_203_reg"); $finish; end
	end
	/* main: %199*/
	/*   %203 = mul i64 %201, %202*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_203_reg <= main_199_203;
		if (start == 1'b0 && ^(main_199_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_203_reg"); $finish; end
	end
end
always @(*) begin
	main_199_204 = main_199_204_stage0_reg;
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %204 = mul i64 %201, %193*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_204_reg <= main_199_204;
		if (start == 1'b0 && ^(main_199_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_204_reg"); $finish; end
	end
	/* main: %199*/
	/*   %204 = mul i64 %201, %193*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_204_reg <= main_199_204;
		if (start == 1'b0 && ^(main_199_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %205 = lshr i64 %203, 32*/
		main_199_205 = (main_199_203 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %205 = lshr i64 %203, 32*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_205_reg <= main_199_205;
		if (start == 1'b0 && ^(main_199_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %206 = shl i64 %203, 32*/
		main_199_206 = (main_199_203 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %206 = shl i64 %203, 32*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_206_reg <= main_199_206;
		if (start == 1'b0 && ^(main_199_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %207 = sub i64 0, %206*/
		main_199_207 = (64'd0 - main_199_206);
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %207 = sub i64 0, %206*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_207_reg <= main_199_207;
		if (start == 1'b0 && ^(main_199_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %208 = icmp ne i64 %206, 0*/
		main_199_208 = (main_199_206 != 64'd0);
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %208 = icmp ne i64 %206, 0*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_208_reg <= main_199_208;
		if (start == 1'b0 && ^(main_199_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %.neg.i.i.i.i = sext i1 %208 to i64*/
		main_199_negiiii = $signed(main_199_208);
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %.neg.i.i.i.i = sext i1 %208 to i64*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_negiiii_reg <= main_199_negiiii;
		if (start == 1'b0 && ^(main_199_negiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_negiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %.neg3.i.i.i = sub i64 %190, %204*/
		main_199_neg3iii = (main_189_190_reg - main_199_204);
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %.neg3.i.i.i = sub i64 %190, %204*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_neg3iii_reg <= main_199_neg3iii;
		if (start == 1'b0 && ^(main_199_neg3iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_neg3iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %209 = sub i64 %.neg3.i.i.i, %205*/
		main_199_209 = (main_199_neg3iii - main_199_205);
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %209 = sub i64 %.neg3.i.i.i, %205*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_209_reg <= main_199_209;
		if (start == 1'b0 && ^(main_199_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %210 = add i64 %209, %.neg.i.i.i.i*/
		main_199_210 = (main_199_209 + main_199_negiiii);
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %210 = add i64 %209, %.neg.i.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_210_reg <= main_199_210;
		if (start == 1'b0 && ^(main_199_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %211 = icmp slt i64 %210, 0*/
		main_199_211 = ($signed(main_199_210) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %211 = icmp slt i64 %210, 0*/
	if ((cur_state == LEGUP_F_main_BB__199_146)) begin
		main_199_211_reg <= main_199_211;
		if (start == 1'b0 && ^(main_199_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %212 = shl i64 %151, 43*/
		main_lrphiii_212 = (main_149_151_reg <<< (64'd43 % 64'd64));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %212 = shl i64 %151, 43*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_147)) begin
		main_lrphiii_212_reg <= main_lrphiii_212;
		if (start == 1'b0 && ^(main_lrphiii_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %overflow_intrinsic1 = zext i64 %212 to i65*/
		main_lrphiii_overflow_intrinsic1 = main_lrphiii_212;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i*/
	/*   %overflow_intrinsic1 = zext i64 %212 to i65*/
	if ((cur_state == LEGUP_F_main_BB_lrphiii_147)) begin
		main_lrphiii_overflow_intrinsic1_reg <= main_lrphiii_overflow_intrinsic1;
		if (start == 1'b0 && ^(main_lrphiii_overflow_intrinsic1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiii_overflow_intrinsic1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %z.05.i.i.i = phi i64 [ %200, %.lr.ph.i.i.i ], [ %216, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiii_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_213_z05iii = main_199_200_reg;
	end
	/* main: %213*/
	/*   %z.05.i.i.i = phi i64 [ %200, %.lr.ph.i.i.i ], [ %216, %213 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__213_149) & (memory_controller_waitrequest == 1'd0)) & (main_213_220 == 1'd1))) */ begin
		main_213_z05iii = main_213_216_reg;
	end
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %z.05.i.i.i = phi i64 [ %200, %.lr.ph.i.i.i ], [ %216, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiii_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_213_z05iii_reg <= main_213_z05iii;
		if (start == 1'b0 && ^(main_213_z05iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_z05iii_reg"); $finish; end
	end
	/* main: %213*/
	/*   %z.05.i.i.i = phi i64 [ %200, %.lr.ph.i.i.i ], [ %216, %213 ]*/
	if ((((cur_state == LEGUP_F_main_BB__213_149) & (memory_controller_waitrequest == 1'd0)) & (main_213_220 == 1'd1))) begin
		main_213_z05iii_reg <= main_213_z05iii;
		if (start == 1'b0 && ^(main_213_z05iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_z05iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %214 = phi i64 [ %207, %.lr.ph.i.i.i ], [ %overflow_intrinsic_sum, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiii_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_213_214 = main_199_207_reg;
	end
	/* main: %213*/
	/*   %214 = phi i64 [ %207, %.lr.ph.i.i.i ], [ %overflow_intrinsic_sum, %213 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__213_149) & (memory_controller_waitrequest == 1'd0)) & (main_213_220 == 1'd1))) */ begin
		main_213_214 = main_213_overflow_intrinsic_sum_reg;
	end
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %214 = phi i64 [ %207, %.lr.ph.i.i.i ], [ %overflow_intrinsic_sum, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiii_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_213_214_reg <= main_213_214;
		if (start == 1'b0 && ^(main_213_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_214_reg"); $finish; end
	end
	/* main: %213*/
	/*   %214 = phi i64 [ %207, %.lr.ph.i.i.i ], [ %overflow_intrinsic_sum, %213 ]*/
	if ((((cur_state == LEGUP_F_main_BB__213_149) & (memory_controller_waitrequest == 1'd0)) & (main_213_220 == 1'd1))) begin
		main_213_214_reg <= main_213_214;
		if (start == 1'b0 && ^(main_213_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %215 = phi i64 [ %210, %.lr.ph.i.i.i ], [ %219, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiii_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_213_215 = main_199_210_reg;
	end
	/* main: %213*/
	/*   %215 = phi i64 [ %210, %.lr.ph.i.i.i ], [ %219, %213 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__213_149) & (memory_controller_waitrequest == 1'd0)) & (main_213_220 == 1'd1))) */ begin
		main_213_215 = main_213_219;
	end
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %215 = phi i64 [ %210, %.lr.ph.i.i.i ], [ %219, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiii_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_213_215_reg <= main_213_215;
		if (start == 1'b0 && ^(main_213_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_215_reg"); $finish; end
	end
	/* main: %213*/
	/*   %215 = phi i64 [ %210, %.lr.ph.i.i.i ], [ %219, %213 ]*/
	if ((((cur_state == LEGUP_F_main_BB__213_149) & (memory_controller_waitrequest == 1'd0)) & (main_213_220 == 1'd1))) begin
		main_213_215_reg <= main_213_215;
		if (start == 1'b0 && ^(main_213_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %216 = add i64 %z.05.i.i.i, -4294967296*/
		main_213_216 = (main_213_z05iii_reg + -64'd4294967296);
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %216 = add i64 %z.05.i.i.i, -4294967296*/
	if ((cur_state == LEGUP_F_main_BB__213_148)) begin
		main_213_216_reg <= main_213_216;
		if (start == 1'b0 && ^(main_213_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %overflow_intrinsic = zext i64 %214 to i65*/
		main_213_overflow_intrinsic = main_213_214_reg;
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %overflow_intrinsic = zext i64 %214 to i65*/
	if ((cur_state == LEGUP_F_main_BB__213_148)) begin
		main_213_overflow_intrinsic_reg <= main_213_overflow_intrinsic;
		if (start == 1'b0 && ^(main_213_overflow_intrinsic) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_overflow_intrinsic_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %overflow_intrinsic2 = add nuw i65 %overflow_intrinsic, %overflow_intrinsic1*/
		main_213_overflow_intrinsic2 = (main_213_overflow_intrinsic + main_lrphiii_overflow_intrinsic1_reg);
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %overflow_intrinsic2 = add nuw i65 %overflow_intrinsic, %overflow_intrinsic1*/
	if ((cur_state == LEGUP_F_main_BB__213_148)) begin
		main_213_overflow_intrinsic2_reg <= main_213_overflow_intrinsic2;
		if (start == 1'b0 && ^(main_213_overflow_intrinsic2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_overflow_intrinsic2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64*/
		main_213_overflow_intrinsic_sum = main_213_overflow_intrinsic2[63:0];
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64*/
	if ((cur_state == LEGUP_F_main_BB__213_148)) begin
		main_213_overflow_intrinsic_sum_reg <= main_213_overflow_intrinsic_sum;
		if (start == 1'b0 && ^(main_213_overflow_intrinsic_sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_overflow_intrinsic_sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %overflow_intrinsic3 = lshr i65 %overflow_intrinsic2, 64*/
		main_213_overflow_intrinsic3 = (main_213_overflow_intrinsic2 >>> (65'd64 % 65'd65));
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %overflow_intrinsic3 = lshr i65 %overflow_intrinsic2, 64*/
	if ((cur_state == LEGUP_F_main_BB__213_148)) begin
		main_213_overflow_intrinsic3_reg <= main_213_overflow_intrinsic3;
		if (start == 1'b0 && ^(main_213_overflow_intrinsic3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_overflow_intrinsic3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %217 = add i64 %215, %193*/
		main_213_217 = (main_213_215_reg + main_192_193_reg);
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %217 = add i64 %215, %193*/
	if ((cur_state == LEGUP_F_main_BB__213_148)) begin
		main_213_217_reg <= main_213_217;
		if (start == 1'b0 && ^(main_213_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %218 = trunc i65 %overflow_intrinsic3 to i64*/
		main_213_218 = main_213_overflow_intrinsic3[63:0];
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %218 = trunc i65 %overflow_intrinsic3 to i64*/
	if ((cur_state == LEGUP_F_main_BB__213_148)) begin
		main_213_218_reg <= main_213_218;
		if (start == 1'b0 && ^(main_213_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %219 = add i64 %217, %218*/
		main_213_219 = (main_213_217_reg + main_213_218_reg);
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %219 = add i64 %217, %218*/
	if ((cur_state == LEGUP_F_main_BB__213_149)) begin
		main_213_219_reg <= main_213_219;
		if (start == 1'b0 && ^(main_213_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %220 = icmp slt i64 %219, 0*/
		main_213_220 = ($signed(main_213_219) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %220 = icmp slt i64 %219, 0*/
	if ((cur_state == LEGUP_F_main_BB__213_149)) begin
		main_213_220_reg <= main_213_220;
		if (start == 1'b0 && ^(main_213_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %z.0.lcssa.i.i.i = phi i64 [ %200, %199 ], [ %216, %._crit_edge.i.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__199_146) & (memory_controller_waitrequest == 1'd0)) & (main_199_211 == 1'd0))) begin
		main__crit_edgeiii_z0lcssaiii = main_199_200_reg;
	end
	/* main: %._crit_edge.i.i.i*/
	/*   %z.0.lcssa.i.i.i = phi i64 [ %200, %199 ], [ %216, %._crit_edge.i.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgeiiiloopexit_150) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgeiii_z0lcssaiii = main_213_216_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %z.0.lcssa.i.i.i = phi i64 [ %200, %199 ], [ %216, %._crit_edge.i.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__199_146) & (memory_controller_waitrequest == 1'd0)) & (main_199_211 == 1'd0))) begin
		main__crit_edgeiii_z0lcssaiii_reg <= main__crit_edgeiii_z0lcssaiii;
		if (start == 1'b0 && ^(main__crit_edgeiii_z0lcssaiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_z0lcssaiii_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i.i*/
	/*   %z.0.lcssa.i.i.i = phi i64 [ %200, %199 ], [ %216, %._crit_edge.i.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeiiiloopexit_150) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgeiii_z0lcssaiii_reg <= main__crit_edgeiii_z0lcssaiii;
		if (start == 1'b0 && ^(main__crit_edgeiii_z0lcssaiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_z0lcssaiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %.lcssa4.i.i.i = phi i64 [ %207, %199 ], [ %overflow_intrinsic_sum, %._crit_edge.i.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__199_146) & (memory_controller_waitrequest == 1'd0)) & (main_199_211 == 1'd0))) begin
		main__crit_edgeiii_lcssa4iii = main_199_207;
	end
	/* main: %._crit_edge.i.i.i*/
	/*   %.lcssa4.i.i.i = phi i64 [ %207, %199 ], [ %overflow_intrinsic_sum, %._crit_edge.i.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgeiiiloopexit_150) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgeiii_lcssa4iii = main_213_overflow_intrinsic_sum_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %.lcssa4.i.i.i = phi i64 [ %207, %199 ], [ %overflow_intrinsic_sum, %._crit_edge.i.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__199_146) & (memory_controller_waitrequest == 1'd0)) & (main_199_211 == 1'd0))) begin
		main__crit_edgeiii_lcssa4iii_reg <= main__crit_edgeiii_lcssa4iii;
		if (start == 1'b0 && ^(main__crit_edgeiii_lcssa4iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_lcssa4iii_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i.i*/
	/*   %.lcssa4.i.i.i = phi i64 [ %207, %199 ], [ %overflow_intrinsic_sum, %._crit_edge.i.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeiiiloopexit_150) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgeiii_lcssa4iii_reg <= main__crit_edgeiii_lcssa4iii;
		if (start == 1'b0 && ^(main__crit_edgeiii_lcssa4iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_lcssa4iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %.lcssa.i.i.i = phi i64 [ %210, %199 ], [ %219, %._crit_edge.i.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__199_146) & (memory_controller_waitrequest == 1'd0)) & (main_199_211 == 1'd0))) begin
		main__crit_edgeiii_lcssaiii = main_199_210;
	end
	/* main: %._crit_edge.i.i.i*/
	/*   %.lcssa.i.i.i = phi i64 [ %210, %199 ], [ %219, %._crit_edge.i.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgeiiiloopexit_150) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgeiii_lcssaiii = main_213_219_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %.lcssa.i.i.i = phi i64 [ %210, %199 ], [ %219, %._crit_edge.i.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__199_146) & (memory_controller_waitrequest == 1'd0)) & (main_199_211 == 1'd0))) begin
		main__crit_edgeiii_lcssaiii_reg <= main__crit_edgeiii_lcssaiii;
		if (start == 1'b0 && ^(main__crit_edgeiii_lcssaiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_lcssaiii_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i.i*/
	/*   %.lcssa.i.i.i = phi i64 [ %210, %199 ], [ %219, %._crit_edge.i.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeiiiloopexit_150) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgeiii_lcssaiii_reg <= main__crit_edgeiii_lcssaiii;
		if (start == 1'b0 && ^(main__crit_edgeiii_lcssaiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_lcssaiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %221 = shl i64 %.lcssa.i.i.i, 32*/
		main__crit_edgeiii_221 = (main__crit_edgeiii_lcssaiii_reg <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %221 = shl i64 %.lcssa.i.i.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeiii_151)) begin
		main__crit_edgeiii_221_reg <= main__crit_edgeiii_221;
		if (start == 1'b0 && ^(main__crit_edgeiii_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %222 = lshr i64 %.lcssa4.i.i.i, 32*/
		main__crit_edgeiii_222 = (main__crit_edgeiii_lcssa4iii_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %222 = lshr i64 %.lcssa4.i.i.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeiii_151)) begin
		main__crit_edgeiii_222_reg <= main__crit_edgeiii_222;
		if (start == 1'b0 && ^(main__crit_edgeiii_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %223 = or i64 %221, %222*/
		main__crit_edgeiii_223 = (main__crit_edgeiii_221 | main__crit_edgeiii_222);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %223 = or i64 %221, %222*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeiii_151)) begin
		main__crit_edgeiii_223_reg <= main__crit_edgeiii_223;
		if (start == 1'b0 && ^(main__crit_edgeiii_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %224 = icmp ugt i64 %194, %223*/
		main__crit_edgeiii_224 = (main_192_194_reg > main__crit_edgeiii_223);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i.i*/
	/*   %224 = icmp ugt i64 %194, %223*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeiii_151)) begin
		main__crit_edgeiii_224_reg <= main__crit_edgeiii_224;
		if (start == 1'b0 && ^(main__crit_edgeiii_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeiii_224_reg"); $finish; end
	end
end
always @(*) begin
	main_225_226 = main_unsigned_divide_64_0;
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %226 = udiv i64 %223, %193*/
	if ((cur_state == LEGUP_F_main_BB__225_216)) begin
		main_225_226_reg <= main_225_226;
		if (start == 1'b0 && ^(main_225_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_226_reg"); $finish; end
	end
	/* main: %225*/
	/*   %226 = udiv i64 %223, %193*/
	if ((cur_state == LEGUP_F_main_BB__225_216)) begin
		main_225_226_reg <= main_225_226;
		if (start == 1'b0 && ^(main_225_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.i.i*/
	/*   %227 = phi i64 [ %226, %225 ], [ 4294967295, %._crit_edge.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgeiii_151) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeiii_224 == 1'd0))) begin
		main_estimateDiv128To64exitii_227 = 64'd4294967295;
	end
	/* main: %estimateDiv128To64.exit.i.i*/
	/*   %227 = phi i64 [ %226, %225 ], [ 4294967295, %._crit_edge.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__225_216) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_estimateDiv128To64exitii_227 = main_225_226;
	end
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.i.i*/
	/*   %227 = phi i64 [ %226, %225 ], [ 4294967295, %._crit_edge.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgeiii_151) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeiii_224 == 1'd0))) begin
		main_estimateDiv128To64exitii_227_reg <= main_estimateDiv128To64exitii_227;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitii_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitii_227_reg"); $finish; end
	end
	/* main: %estimateDiv128To64.exit.i.i*/
	/*   %227 = phi i64 [ %226, %225 ], [ 4294967295, %._crit_edge.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__225_216) & (memory_controller_waitrequest == 1'd0))) begin
		main_estimateDiv128To64exitii_227_reg <= main_estimateDiv128To64exitii_227;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitii_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitii_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.i.i*/
	/*   %228 = or i64 %227, %z.0.lcssa.i.i.i*/
		main_estimateDiv128To64exitii_228 = (main_estimateDiv128To64exitii_227_reg | main__crit_edgeiii_z0lcssaiii_reg);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.i.i*/
	/*   %228 = or i64 %227, %z.0.lcssa.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitii_217)) begin
		main_estimateDiv128To64exitii_228_reg <= main_estimateDiv128To64exitii_228;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitii_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitii_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.i.i*/
	/*   %229 = and i64 %228, 511*/
		main_estimateDiv128To64exitii_229 = (main_estimateDiv128To64exitii_228 & 64'd511);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.i.i*/
	/*   %229 = and i64 %228, 511*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitii_217)) begin
		main_estimateDiv128To64exitii_229_reg <= main_estimateDiv128To64exitii_229;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitii_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitii_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.i.i*/
	/*   %230 = icmp ult i64 %229, 3*/
		main_estimateDiv128To64exitii_230 = (main_estimateDiv128To64exitii_229 < 64'd3);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.i.i*/
	/*   %230 = icmp ult i64 %229, 3*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitii_217)) begin
		main_estimateDiv128To64exitii_230_reg <= main_estimateDiv128To64exitii_230;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitii_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitii_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %232 = lshr i64 %228, 32*/
		main_231_232 = (main_estimateDiv128To64exitii_228_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %232 = lshr i64 %228, 32*/
	if ((cur_state == LEGUP_F_main_BB__231_218)) begin
		main_231_232_reg <= main_231_232;
		if (start == 1'b0 && ^(main_231_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %233 = and i64 %228, 4294967295*/
		main_231_233 = (main_estimateDiv128To64exitii_228_reg & 64'd4294967295);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %233 = and i64 %228, 4294967295*/
	if ((cur_state == LEGUP_F_main_BB__231_218)) begin
		main_231_233_reg <= main_231_233;
		if (start == 1'b0 && ^(main_231_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_233_reg"); $finish; end
	end
end
always @(*) begin
	main_231_234 = main_231_234_stage0_reg;
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %234 = mul i64 %233, %202*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_234_reg <= main_231_234;
		if (start == 1'b0 && ^(main_231_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_234_reg"); $finish; end
	end
	/* main: %231*/
	/*   %234 = mul i64 %233, %202*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_234_reg <= main_231_234;
		if (start == 1'b0 && ^(main_231_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_234_reg"); $finish; end
	end
end
always @(*) begin
	main_231_235 = main_231_235_stage0_reg;
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %235 = mul i64 %232, %202*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_235_reg <= main_231_235;
		if (start == 1'b0 && ^(main_231_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_235_reg"); $finish; end
	end
	/* main: %231*/
	/*   %235 = mul i64 %232, %202*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_235_reg <= main_231_235;
		if (start == 1'b0 && ^(main_231_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_235_reg"); $finish; end
	end
end
always @(*) begin
	main_231_236 = main_231_236_stage0_reg;
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %236 = mul i64 %233, %193*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_236_reg <= main_231_236;
		if (start == 1'b0 && ^(main_231_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_236_reg"); $finish; end
	end
	/* main: %231*/
	/*   %236 = mul i64 %233, %193*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_236_reg <= main_231_236;
		if (start == 1'b0 && ^(main_231_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_236_reg"); $finish; end
	end
end
always @(*) begin
	main_231_237 = main_231_237_stage0_reg;
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %237 = mul i64 %232, %193*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_237_reg <= main_231_237;
		if (start == 1'b0 && ^(main_231_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_237_reg"); $finish; end
	end
	/* main: %231*/
	/*   %237 = mul i64 %232, %193*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_237_reg <= main_231_237;
		if (start == 1'b0 && ^(main_231_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %overflow_intrinsic4 = zext i64 %235 to i65*/
		main_231_overflow_intrinsic4 = main_231_235;
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %overflow_intrinsic4 = zext i64 %235 to i65*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_overflow_intrinsic4_reg <= main_231_overflow_intrinsic4;
		if (start == 1'b0 && ^(main_231_overflow_intrinsic4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_overflow_intrinsic4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %overflow_intrinsic5 = zext i64 %236 to i65*/
		main_231_overflow_intrinsic5 = main_231_236;
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %overflow_intrinsic5 = zext i64 %236 to i65*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_overflow_intrinsic5_reg <= main_231_overflow_intrinsic5;
		if (start == 1'b0 && ^(main_231_overflow_intrinsic5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_overflow_intrinsic5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %overflow_intrinsic6 = add nuw i65 %overflow_intrinsic4, %overflow_intrinsic5*/
		main_231_overflow_intrinsic6 = (main_231_overflow_intrinsic4 + main_231_overflow_intrinsic5);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %overflow_intrinsic6 = add nuw i65 %overflow_intrinsic4, %overflow_intrinsic5*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_overflow_intrinsic6_reg <= main_231_overflow_intrinsic6;
		if (start == 1'b0 && ^(main_231_overflow_intrinsic6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_overflow_intrinsic6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64*/
		main_231_overflow_intrinsic_sum7 = main_231_overflow_intrinsic6[63:0];
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_overflow_intrinsic_sum7_reg <= main_231_overflow_intrinsic_sum7;
		if (start == 1'b0 && ^(main_231_overflow_intrinsic_sum7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_overflow_intrinsic_sum7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %238 = lshr i65 %overflow_intrinsic6, 32*/
		main_231_238 = (main_231_overflow_intrinsic6 >>> (65'd32 % 65'd65));
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %238 = lshr i65 %overflow_intrinsic6, 32*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_238_reg <= main_231_238;
		if (start == 1'b0 && ^(main_231_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %.tr = trunc i65 %238 to i64*/
		main_231_tr = main_231_238[63:0];
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %.tr = trunc i65 %238 to i64*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_tr_reg <= main_231_tr;
		if (start == 1'b0 && ^(main_231_tr) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_tr_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %239 = and i64 %.tr, 4294967296*/
		main_231_239 = (main_231_tr & 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %239 = and i64 %.tr, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_239_reg <= main_231_239;
		if (start == 1'b0 && ^(main_231_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %240 = lshr i64 %overflow_intrinsic_sum7, 32*/
		main_231_240 = (main_231_overflow_intrinsic_sum7 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %240 = lshr i64 %overflow_intrinsic_sum7, 32*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_240_reg <= main_231_240;
		if (start == 1'b0 && ^(main_231_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %241 = or i64 %239, %240*/
		main_231_241 = (main_231_239_reg | main_231_240_reg);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %241 = or i64 %239, %240*/
	if ((cur_state == LEGUP_F_main_BB__231_220)) begin
		main_231_241_reg <= main_231_241;
		if (start == 1'b0 && ^(main_231_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %242 = shl i64 %overflow_intrinsic_sum7, 32*/
		main_231_242 = (main_231_overflow_intrinsic_sum7 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %242 = shl i64 %overflow_intrinsic_sum7, 32*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_242_reg <= main_231_242;
		if (start == 1'b0 && ^(main_231_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %overflow_intrinsic10 = zext i64 %234 to i65*/
		main_231_overflow_intrinsic10 = main_231_234;
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %overflow_intrinsic10 = zext i64 %234 to i65*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_overflow_intrinsic10_reg <= main_231_overflow_intrinsic10;
		if (start == 1'b0 && ^(main_231_overflow_intrinsic10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_overflow_intrinsic10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %overflow_intrinsic11 = zext i64 %242 to i65*/
		main_231_overflow_intrinsic11 = main_231_242;
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %overflow_intrinsic11 = zext i64 %242 to i65*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_overflow_intrinsic11_reg <= main_231_overflow_intrinsic11;
		if (start == 1'b0 && ^(main_231_overflow_intrinsic11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_overflow_intrinsic11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %overflow_intrinsic12 = add nuw i65 %overflow_intrinsic10, %overflow_intrinsic11*/
		main_231_overflow_intrinsic12 = (main_231_overflow_intrinsic10_reg + main_231_overflow_intrinsic11_reg);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %overflow_intrinsic12 = add nuw i65 %overflow_intrinsic10, %overflow_intrinsic11*/
	if ((cur_state == LEGUP_F_main_BB__231_220)) begin
		main_231_overflow_intrinsic12_reg <= main_231_overflow_intrinsic12;
		if (start == 1'b0 && ^(main_231_overflow_intrinsic12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_overflow_intrinsic12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %overflow_intrinsic_sum13 = trunc i65 %overflow_intrinsic12 to i64*/
		main_231_overflow_intrinsic_sum13 = main_231_overflow_intrinsic12[63:0];
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %overflow_intrinsic_sum13 = trunc i65 %overflow_intrinsic12 to i64*/
	if ((cur_state == LEGUP_F_main_BB__231_220)) begin
		main_231_overflow_intrinsic_sum13_reg <= main_231_overflow_intrinsic_sum13;
		if (start == 1'b0 && ^(main_231_overflow_intrinsic_sum13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_overflow_intrinsic_sum13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %243 = sub i64 0, %overflow_intrinsic_sum13*/
		main_231_243 = (64'd0 - main_231_overflow_intrinsic_sum13_reg);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %243 = sub i64 0, %overflow_intrinsic_sum13*/
	if ((cur_state == LEGUP_F_main_BB__231_221)) begin
		main_231_243_reg <= main_231_243;
		if (start == 1'b0 && ^(main_231_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %sext = ashr i65 %overflow_intrinsic12, 64*/
		main_231_sext = ($signed(main_231_overflow_intrinsic12) >>> 65'd64);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %sext = ashr i65 %overflow_intrinsic12, 64*/
	if ((cur_state == LEGUP_F_main_BB__231_220)) begin
		main_231_sext_reg <= main_231_sext;
		if (start == 1'b0 && ^(main_231_sext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_sext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %.neg26.i.i = trunc i65 %sext to i64*/
		main_231_neg26ii = main_231_sext[63:0];
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %.neg26.i.i = trunc i65 %sext to i64*/
	if ((cur_state == LEGUP_F_main_BB__231_220)) begin
		main_231_neg26ii_reg <= main_231_neg26ii;
		if (start == 1'b0 && ^(main_231_neg26ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_neg26ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %244 = icmp ne i64 %overflow_intrinsic_sum13, 0*/
		main_231_244 = (main_231_overflow_intrinsic_sum13_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %244 = icmp ne i64 %overflow_intrinsic_sum13, 0*/
	if ((cur_state == LEGUP_F_main_BB__231_221)) begin
		main_231_244_reg <= main_231_244;
		if (start == 1'b0 && ^(main_231_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %.neg.i.i.i = sext i1 %244 to i64*/
		main_231_negiii = $signed(main_231_244);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %.neg.i.i.i = sext i1 %244 to i64*/
	if ((cur_state == LEGUP_F_main_BB__231_221)) begin
		main_231_negiii_reg <= main_231_negiii;
		if (start == 1'b0 && ^(main_231_negiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_negiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %.neg28.i.i = sub i64 %190, %237*/
		main_231_neg28ii = (main_189_190_reg - main_231_237);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %.neg28.i.i = sub i64 %190, %237*/
	if ((cur_state == LEGUP_F_main_BB__231_219)) begin
		main_231_neg28ii_reg <= main_231_neg28ii;
		if (start == 1'b0 && ^(main_231_neg28ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_neg28ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %.neg30.i.i = add i64 %.neg28.i.i, %.neg26.i.i*/
		main_231_neg30ii = (main_231_neg28ii_reg + main_231_neg26ii_reg);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %.neg30.i.i = add i64 %.neg28.i.i, %.neg26.i.i*/
	if ((cur_state == LEGUP_F_main_BB__231_221)) begin
		main_231_neg30ii_reg <= main_231_neg30ii;
		if (start == 1'b0 && ^(main_231_neg30ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_neg30ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %245 = sub i64 %.neg30.i.i, %241*/
		main_231_245 = (main_231_neg30ii - main_231_241_reg);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %245 = sub i64 %.neg30.i.i, %241*/
	if ((cur_state == LEGUP_F_main_BB__231_221)) begin
		main_231_245_reg <= main_231_245;
		if (start == 1'b0 && ^(main_231_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %246 = add i64 %245, %.neg.i.i.i*/
		main_231_246 = (main_231_245 + main_231_negiii);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %246 = add i64 %245, %.neg.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__231_221)) begin
		main_231_246_reg <= main_231_246;
		if (start == 1'b0 && ^(main_231_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %247 = icmp slt i64 %246, 0*/
		main_231_247 = ($signed(main_231_246) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %247 = icmp slt i64 %246, 0*/
	if ((cur_state == LEGUP_F_main_BB__231_221)) begin
		main_231_247_reg <= main_231_247;
		if (start == 1'b0 && ^(main_231_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.preheader*/
	/*   %overflow_intrinsic17 = zext i64 %183 to i65*/
		main_lrphiipreheader_overflow_intrinsic17 = main_175_183_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.preheader*/
	/*   %overflow_intrinsic17 = zext i64 %183 to i65*/
	if ((cur_state == LEGUP_F_main_BB_lrphiipreheader_222)) begin
		main_lrphiipreheader_overflow_intrinsic17_reg <= main_lrphiipreheader_overflow_intrinsic17;
		if (start == 1'b0 && ^(main_lrphiipreheader_overflow_intrinsic17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiipreheader_overflow_intrinsic17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %zSig.034.i.i = phi i64 [ %250, %.lr.ph.i.i ], [ %228, %.lr.ph.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiipreheader_222) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphii_zSig034ii = main_estimateDiv128To64exitii_228_reg;
	end
	/* main: %.lr.ph.i.i*/
	/*   %zSig.034.i.i = phi i64 [ %250, %.lr.ph.i.i ], [ %228, %.lr.ph.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphii_224) & (memory_controller_waitrequest == 1'd0)) & (main_lrphii_253 == 1'd1))) */ begin
		main_lrphii_zSig034ii = main_lrphii_250_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %zSig.034.i.i = phi i64 [ %250, %.lr.ph.i.i ], [ %228, %.lr.ph.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiipreheader_222) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphii_zSig034ii_reg <= main_lrphii_zSig034ii;
		if (start == 1'b0 && ^(main_lrphii_zSig034ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_zSig034ii_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i*/
	/*   %zSig.034.i.i = phi i64 [ %250, %.lr.ph.i.i ], [ %228, %.lr.ph.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphii_224) & (memory_controller_waitrequest == 1'd0)) & (main_lrphii_253 == 1'd1))) begin
		main_lrphii_zSig034ii_reg <= main_lrphii_zSig034ii;
		if (start == 1'b0 && ^(main_lrphii_zSig034ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_zSig034ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %248 = phi i64 [ %overflow_intrinsic_sum19, %.lr.ph.i.i ], [ %243, %.lr.ph.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiipreheader_222) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphii_248 = main_231_243_reg;
	end
	/* main: %.lr.ph.i.i*/
	/*   %248 = phi i64 [ %overflow_intrinsic_sum19, %.lr.ph.i.i ], [ %243, %.lr.ph.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphii_224) & (memory_controller_waitrequest == 1'd0)) & (main_lrphii_253 == 1'd1))) */ begin
		main_lrphii_248 = main_lrphii_overflow_intrinsic_sum19_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %248 = phi i64 [ %overflow_intrinsic_sum19, %.lr.ph.i.i ], [ %243, %.lr.ph.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiipreheader_222) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphii_248_reg <= main_lrphii_248;
		if (start == 1'b0 && ^(main_lrphii_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_248_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i*/
	/*   %248 = phi i64 [ %overflow_intrinsic_sum19, %.lr.ph.i.i ], [ %243, %.lr.ph.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphii_224) & (memory_controller_waitrequest == 1'd0)) & (main_lrphii_253 == 1'd1))) begin
		main_lrphii_248_reg <= main_lrphii_248;
		if (start == 1'b0 && ^(main_lrphii_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %249 = phi i64 [ %252, %.lr.ph.i.i ], [ %246, %.lr.ph.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiipreheader_222) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphii_249 = main_231_246_reg;
	end
	/* main: %.lr.ph.i.i*/
	/*   %249 = phi i64 [ %252, %.lr.ph.i.i ], [ %246, %.lr.ph.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphii_224) & (memory_controller_waitrequest == 1'd0)) & (main_lrphii_253 == 1'd1))) */ begin
		main_lrphii_249 = main_lrphii_252;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %249 = phi i64 [ %252, %.lr.ph.i.i ], [ %246, %.lr.ph.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiipreheader_222) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphii_249_reg <= main_lrphii_249;
		if (start == 1'b0 && ^(main_lrphii_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_249_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i*/
	/*   %249 = phi i64 [ %252, %.lr.ph.i.i ], [ %246, %.lr.ph.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphii_224) & (memory_controller_waitrequest == 1'd0)) & (main_lrphii_253 == 1'd1))) begin
		main_lrphii_249_reg <= main_lrphii_249;
		if (start == 1'b0 && ^(main_lrphii_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %250 = add i64 %zSig.034.i.i, -1*/
		main_lrphii_250 = (main_lrphii_zSig034ii_reg + -64'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %250 = add i64 %zSig.034.i.i, -1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_223)) begin
		main_lrphii_250_reg <= main_lrphii_250;
		if (start == 1'b0 && ^(main_lrphii_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %overflow_intrinsic16 = zext i64 %248 to i65*/
		main_lrphii_overflow_intrinsic16 = main_lrphii_248_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %overflow_intrinsic16 = zext i64 %248 to i65*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_223)) begin
		main_lrphii_overflow_intrinsic16_reg <= main_lrphii_overflow_intrinsic16;
		if (start == 1'b0 && ^(main_lrphii_overflow_intrinsic16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_overflow_intrinsic16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %overflow_intrinsic18 = add nuw i65 %overflow_intrinsic16, %overflow_intrinsic17*/
		main_lrphii_overflow_intrinsic18 = (main_lrphii_overflow_intrinsic16 + main_lrphiipreheader_overflow_intrinsic17_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %overflow_intrinsic18 = add nuw i65 %overflow_intrinsic16, %overflow_intrinsic17*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_223)) begin
		main_lrphii_overflow_intrinsic18_reg <= main_lrphii_overflow_intrinsic18;
		if (start == 1'b0 && ^(main_lrphii_overflow_intrinsic18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_overflow_intrinsic18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %overflow_intrinsic_sum19 = trunc i65 %overflow_intrinsic18 to i64*/
		main_lrphii_overflow_intrinsic_sum19 = main_lrphii_overflow_intrinsic18[63:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %overflow_intrinsic_sum19 = trunc i65 %overflow_intrinsic18 to i64*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_223)) begin
		main_lrphii_overflow_intrinsic_sum19_reg <= main_lrphii_overflow_intrinsic_sum19;
		if (start == 1'b0 && ^(main_lrphii_overflow_intrinsic_sum19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_overflow_intrinsic_sum19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %overflow_intrinsic20 = lshr i65 %overflow_intrinsic18, 64*/
		main_lrphii_overflow_intrinsic20 = (main_lrphii_overflow_intrinsic18 >>> (65'd64 % 65'd65));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %overflow_intrinsic20 = lshr i65 %overflow_intrinsic18, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_223)) begin
		main_lrphii_overflow_intrinsic20_reg <= main_lrphii_overflow_intrinsic20;
		if (start == 1'b0 && ^(main_lrphii_overflow_intrinsic20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_overflow_intrinsic20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %251 = trunc i65 %overflow_intrinsic20 to i64*/
		main_lrphii_251 = main_lrphii_overflow_intrinsic20[63:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %251 = trunc i65 %overflow_intrinsic20 to i64*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_223)) begin
		main_lrphii_251_reg <= main_lrphii_251;
		if (start == 1'b0 && ^(main_lrphii_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %252 = add i64 %251, %249*/
		main_lrphii_252 = (main_lrphii_251_reg + main_lrphii_249_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %252 = add i64 %251, %249*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_224)) begin
		main_lrphii_252_reg <= main_lrphii_252;
		if (start == 1'b0 && ^(main_lrphii_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %253 = icmp slt i64 %252, 0*/
		main_lrphii_253 = ($signed(main_lrphii_252) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %253 = icmp slt i64 %252, 0*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_224)) begin
		main_lrphii_253_reg <= main_lrphii_253;
		if (start == 1'b0 && ^(main_lrphii_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %zSig.0.lcssa.i.i = phi i64 [ %228, %231 ], [ %250, %._crit_edge.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__231_221) & (memory_controller_waitrequest == 1'd0)) & (main_231_247 == 1'd0))) begin
		main__crit_edgeii_zSig0lcssaii = main_estimateDiv128To64exitii_228_reg;
	end
	/* main: %._crit_edge.i.i*/
	/*   %zSig.0.lcssa.i.i = phi i64 [ %228, %231 ], [ %250, %._crit_edge.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgeiiloopexit_225) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgeii_zSig0lcssaii = main_lrphii_250_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %zSig.0.lcssa.i.i = phi i64 [ %228, %231 ], [ %250, %._crit_edge.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__231_221) & (memory_controller_waitrequest == 1'd0)) & (main_231_247 == 1'd0))) begin
		main__crit_edgeii_zSig0lcssaii_reg <= main__crit_edgeii_zSig0lcssaii;
		if (start == 1'b0 && ^(main__crit_edgeii_zSig0lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_zSig0lcssaii_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i*/
	/*   %zSig.0.lcssa.i.i = phi i64 [ %228, %231 ], [ %250, %._crit_edge.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeiiloopexit_225) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgeii_zSig0lcssaii_reg <= main__crit_edgeii_zSig0lcssaii;
		if (start == 1'b0 && ^(main__crit_edgeii_zSig0lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_zSig0lcssaii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa.i.i = phi i64 [ %243, %231 ], [ %overflow_intrinsic_sum19, %._crit_edge.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__231_221) & (memory_controller_waitrequest == 1'd0)) & (main_231_247 == 1'd0))) begin
		main__crit_edgeii_lcssaii = main_231_243;
	end
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa.i.i = phi i64 [ %243, %231 ], [ %overflow_intrinsic_sum19, %._crit_edge.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgeiiloopexit_225) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgeii_lcssaii = main_lrphii_overflow_intrinsic_sum19_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa.i.i = phi i64 [ %243, %231 ], [ %overflow_intrinsic_sum19, %._crit_edge.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__231_221) & (memory_controller_waitrequest == 1'd0)) & (main_231_247 == 1'd0))) begin
		main__crit_edgeii_lcssaii_reg <= main__crit_edgeii_lcssaii;
		if (start == 1'b0 && ^(main__crit_edgeii_lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_lcssaii_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa.i.i = phi i64 [ %243, %231 ], [ %overflow_intrinsic_sum19, %._crit_edge.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeiiloopexit_225) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgeii_lcssaii_reg <= main__crit_edgeii_lcssaii;
		if (start == 1'b0 && ^(main__crit_edgeii_lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_lcssaii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %254 = icmp ne i64 %.lcssa.i.i, 0*/
		main__crit_edgeii_254 = (main__crit_edgeii_lcssaii_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %254 = icmp ne i64 %.lcssa.i.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_226)) begin
		main__crit_edgeii_254_reg <= main__crit_edgeii_254;
		if (start == 1'b0 && ^(main__crit_edgeii_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %255 = zext i1 %254 to i64*/
		main__crit_edgeii_255 = main__crit_edgeii_254;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %255 = zext i1 %254 to i64*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_226)) begin
		main__crit_edgeii_255_reg <= main__crit_edgeii_255;
		if (start == 1'b0 && ^(main__crit_edgeii_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %256 = or i64 %255, %zSig.0.lcssa.i.i*/
		main__crit_edgeii_256 = (main__crit_edgeii_255 | main__crit_edgeii_zSig0lcssaii_reg);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %256 = or i64 %255, %zSig.0.lcssa.i.i*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_226)) begin
		main__crit_edgeii_256_reg <= main__crit_edgeii_256;
		if (start == 1'b0 && ^(main__crit_edgeii_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %zSig.1.i.i = phi i64 [ %256, %._crit_edge.i.i ], [ %228, %estimateDiv128To64.exit.i.i ], [ -1, %189 ]*/
	if ((((cur_state == LEGUP_F_main_BB__189_78) & (memory_controller_waitrequest == 1'd0)) & (main_189_191 == 1'd0))) begin
		main_estimateDiv128To64exitthreadii_zSig1ii = -64'd1;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %zSig.1.i.i = phi i64 [ %256, %._crit_edge.i.i ], [ %228, %estimateDiv128To64.exit.i.i ], [ -1, %189 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitii_217) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitii_230 == 1'd0))) begin
		main_estimateDiv128To64exitthreadii_zSig1ii = main_estimateDiv128To64exitii_228;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %zSig.1.i.i = phi i64 [ %256, %._crit_edge.i.i ], [ %228, %estimateDiv128To64.exit.i.i ], [ -1, %189 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgeii_226) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_estimateDiv128To64exitthreadii_zSig1ii = main__crit_edgeii_256;
	end
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %zSig.1.i.i = phi i64 [ %256, %._crit_edge.i.i ], [ %228, %estimateDiv128To64.exit.i.i ], [ -1, %189 ]*/
	if ((((cur_state == LEGUP_F_main_BB__189_78) & (memory_controller_waitrequest == 1'd0)) & (main_189_191 == 1'd0))) begin
		main_estimateDiv128To64exitthreadii_zSig1ii_reg <= main_estimateDiv128To64exitthreadii_zSig1ii;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadii_zSig1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadii_zSig1ii_reg"); $finish; end
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %zSig.1.i.i = phi i64 [ %256, %._crit_edge.i.i ], [ %228, %estimateDiv128To64.exit.i.i ], [ -1, %189 ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitii_217) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitii_230 == 1'd0))) begin
		main_estimateDiv128To64exitthreadii_zSig1ii_reg <= main_estimateDiv128To64exitthreadii_zSig1ii;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadii_zSig1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadii_zSig1ii_reg"); $finish; end
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %zSig.1.i.i = phi i64 [ %256, %._crit_edge.i.i ], [ %228, %estimateDiv128To64.exit.i.i ], [ -1, %189 ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeii_226) & (memory_controller_waitrequest == 1'd0))) begin
		main_estimateDiv128To64exitthreadii_zSig1ii_reg <= main_estimateDiv128To64exitthreadii_zSig1ii;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadii_zSig1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadii_zSig1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
		main_estimateDiv128To64exitthreadii_257 = roundAndPackFloat64_return_val_reg;
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		main_estimateDiv128To64exitthreadii_257_reg <= main_estimateDiv128To64exitthreadii_257;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadii_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadii_257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit23ii_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i = main_propagateFloat64NaNexit23ii_mux2i22ii;
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit16ii_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i = main_propagateFloat64NaNexit16ii_mux2i15ii;
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__89_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i = 64'd9223372036854775807;
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__92_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i = main_92_94;
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexitii_53) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i = main_propagateFloat64NaNexitii_mux2iii;
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__116_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i = main_116_117;
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__125_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i = 64'd9223372036854775807;
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__127_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i = main_127_130_reg;
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__155_70) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i = main_155_156;
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadii_229) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_divexiti_0i1i = main_estimateDiv128To64exitthreadii_257_reg;
	end
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit23ii_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i_reg <= main_float64_divexiti_0i1i;
		if (start == 1'b0 && ^(main_float64_divexiti_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_0i1i_reg"); $finish; end
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit16ii_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i_reg <= main_float64_divexiti_0i1i;
		if (start == 1'b0 && ^(main_float64_divexiti_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_0i1i_reg"); $finish; end
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__89_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i_reg <= main_float64_divexiti_0i1i;
		if (start == 1'b0 && ^(main_float64_divexiti_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_0i1i_reg"); $finish; end
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__92_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i_reg <= main_float64_divexiti_0i1i;
		if (start == 1'b0 && ^(main_float64_divexiti_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_0i1i_reg"); $finish; end
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexitii_53) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i_reg <= main_float64_divexiti_0i1i;
		if (start == 1'b0 && ^(main_float64_divexiti_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_0i1i_reg"); $finish; end
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__116_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i_reg <= main_float64_divexiti_0i1i;
		if (start == 1'b0 && ^(main_float64_divexiti_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_0i1i_reg"); $finish; end
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__125_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i_reg <= main_float64_divexiti_0i1i;
		if (start == 1'b0 && ^(main_float64_divexiti_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_0i1i_reg"); $finish; end
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__127_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i_reg <= main_float64_divexiti_0i1i;
		if (start == 1'b0 && ^(main_float64_divexiti_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_0i1i_reg"); $finish; end
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__155_70) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i_reg <= main_float64_divexiti_0i1i;
		if (start == 1'b0 && ^(main_float64_divexiti_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_0i1i_reg"); $finish; end
	end
	/* main: %float64_div.exit.i*/
	/*   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadii_229) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexiti_0i1i_reg <= main_float64_divexiti_0i1i;
		if (start == 1'b0 && ^(main_float64_divexiti_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_0i1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %258 = lshr i64 %app.0.i, 63*/
		main_float64_divexiti_258 = (main_5_app0i_reg >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %258 = lshr i64 %app.0.i, 63*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexiti_230)) begin
		main_float64_divexiti_258_reg <= main_float64_divexiti_258;
		if (start == 1'b0 && ^(main_float64_divexiti_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %259 = trunc i64 %258 to i32*/
		main_float64_divexiti_259 = main_float64_divexiti_258[31:0];
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %259 = trunc i64 %258 to i32*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexiti_230)) begin
		main_float64_divexiti_259_reg <= main_float64_divexiti_259;
		if (start == 1'b0 && ^(main_float64_divexiti_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %260 = lshr i64 %.0.i1.i, 63*/
		main_float64_divexiti_260 = (main_float64_divexiti_0i1i_reg >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %260 = lshr i64 %.0.i1.i, 63*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexiti_230)) begin
		main_float64_divexiti_260_reg <= main_float64_divexiti_260;
		if (start == 1'b0 && ^(main_float64_divexiti_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %261 = trunc i64 %260 to i32*/
		main_float64_divexiti_261 = main_float64_divexiti_260[31:0];
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %261 = trunc i64 %260 to i32*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexiti_230)) begin
		main_float64_divexiti_261_reg <= main_float64_divexiti_261;
		if (start == 1'b0 && ^(main_float64_divexiti_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %262 = icmp eq i32 %259, %261*/
		main_float64_divexiti_262 = (main_float64_divexiti_259 == main_float64_divexiti_261);
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %262 = icmp eq i32 %259, %261*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexiti_230)) begin
		main_float64_divexiti_262_reg <= main_float64_divexiti_262;
		if (start == 1'b0 && ^(main_float64_divexiti_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %263 = lshr i64 %app.0.i, 52*/
		main_float64_divexiti_263 = (main_5_app0i_reg >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %263 = lshr i64 %app.0.i, 52*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexiti_230)) begin
		main_float64_divexiti_263_reg <= main_float64_divexiti_263;
		if (start == 1'b0 && ^(main_float64_divexiti_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %.tr.i.i1.i.i = trunc i64 %263 to i32*/
		main_float64_divexiti_trii1ii = main_float64_divexiti_263[31:0];
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %.tr.i.i1.i.i = trunc i64 %263 to i32*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexiti_230)) begin
		main_float64_divexiti_trii1ii_reg <= main_float64_divexiti_trii1ii;
		if (start == 1'b0 && ^(main_float64_divexiti_trii1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_trii1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %264 = and i32 %.tr.i.i1.i.i, 2047*/
		main_float64_divexiti_264 = (main_float64_divexiti_trii1ii & 32'd2047);
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %264 = and i32 %.tr.i.i1.i.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexiti_230)) begin
		main_float64_divexiti_264_reg <= main_float64_divexiti_264;
		if (start == 1'b0 && ^(main_float64_divexiti_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %265 = lshr i64 %.0.i1.i, 52*/
		main_float64_divexiti_265 = (main_float64_divexiti_0i1i_reg >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %265 = lshr i64 %.0.i1.i, 52*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexiti_230)) begin
		main_float64_divexiti_265_reg <= main_float64_divexiti_265;
		if (start == 1'b0 && ^(main_float64_divexiti_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %.tr.i17.i.i.i = trunc i64 %265 to i32*/
		main_float64_divexiti_tri17iii = main_float64_divexiti_265[31:0];
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %.tr.i17.i.i.i = trunc i64 %265 to i32*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexiti_230)) begin
		main_float64_divexiti_tri17iii_reg <= main_float64_divexiti_tri17iii;
		if (start == 1'b0 && ^(main_float64_divexiti_tri17iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_tri17iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %266 = and i32 %.tr.i17.i.i.i, 2047*/
		main_float64_divexiti_266 = (main_float64_divexiti_tri17iii & 32'd2047);
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %266 = and i32 %.tr.i17.i.i.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexiti_230)) begin
		main_float64_divexiti_266_reg <= main_float64_divexiti_266;
		if (start == 1'b0 && ^(main_float64_divexiti_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit.i*/
	/*   %267 = sub nsw i32 %264, %266*/
		main_float64_divexiti_267 = (main_float64_divexiti_264 - main_float64_divexiti_266);
end
always @(posedge clk) begin
	/* main: %float64_div.exit.i*/
	/*   %267 = sub nsw i32 %264, %266*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexiti_230)) begin
		main_float64_divexiti_267_reg <= main_float64_divexiti_267;
		if (start == 1'b0 && ^(main_float64_divexiti_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexiti_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %268*/
	/*   %269 = shl i64 %app.0.i, 9*/
		main_268_269 = (main_5_app0i_reg <<< (64'd9 % 64'd64));
end
always @(posedge clk) begin
	/* main: %268*/
	/*   %269 = shl i64 %app.0.i, 9*/
	if ((cur_state == LEGUP_F_main_BB__268_231)) begin
		main_268_269_reg <= main_268_269;
		if (start == 1'b0 && ^(main_268_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_268_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %268*/
	/*   %270 = and i64 %269, 2305843009213693440*/
		main_268_270 = (main_268_269 & 64'd2305843009213693440);
end
always @(posedge clk) begin
	/* main: %268*/
	/*   %270 = and i64 %269, 2305843009213693440*/
	if ((cur_state == LEGUP_F_main_BB__268_231)) begin
		main_268_270_reg <= main_268_270;
		if (start == 1'b0 && ^(main_268_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_268_270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %268*/
	/*   %271 = shl i64 %.0.i1.i, 9*/
		main_268_271 = (main_float64_divexiti_0i1i_reg <<< (64'd9 % 64'd64));
end
always @(posedge clk) begin
	/* main: %268*/
	/*   %271 = shl i64 %.0.i1.i, 9*/
	if ((cur_state == LEGUP_F_main_BB__268_231)) begin
		main_268_271_reg <= main_268_271;
		if (start == 1'b0 && ^(main_268_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_268_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %268*/
	/*   %272 = and i64 %271, 2305843009213693440*/
		main_268_272 = (main_268_271 & 64'd2305843009213693440);
end
always @(posedge clk) begin
	/* main: %268*/
	/*   %272 = and i64 %271, 2305843009213693440*/
	if ((cur_state == LEGUP_F_main_BB__268_231)) begin
		main_268_272_reg <= main_268_272;
		if (start == 1'b0 && ^(main_268_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_268_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %268*/
	/*   %273 = icmp sgt i32 %267, 0*/
		main_268_273 = ($signed(main_float64_divexiti_267_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %268*/
	/*   %273 = icmp sgt i32 %267, 0*/
	if ((cur_state == LEGUP_F_main_BB__268_231)) begin
		main_268_273_reg <= main_268_273;
		if (start == 1'b0 && ^(main_268_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_268_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %274*/
	/*   %275 = icmp eq i32 %264, 2047*/
		main_274_275 = (main_float64_divexiti_264_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %274*/
	/*   %275 = icmp eq i32 %264, 2047*/
	if ((cur_state == LEGUP_F_main_BB__274_232)) begin
		main_274_275_reg <= main_274_275;
		if (start == 1'b0 && ^(main_274_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_274_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %276*/
	/*   %277 = icmp eq i64 %270, 0*/
		main_276_277 = (main_268_270_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %276*/
	/*   %277 = icmp eq i64 %270, 0*/
	if ((cur_state == LEGUP_F_main_BB__276_233)) begin
		main_276_277_reg <= main_276_277;
		if (start == 1'b0 && ^(main_276_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_276_277_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %278*/
	/*   %279 = and i64 %app.0.i, 9221120237041090560*/
		main_278_279 = (main_5_app0i_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %278*/
	/*   %279 = and i64 %app.0.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__278_234)) begin
		main_278_279_reg <= main_278_279;
		if (start == 1'b0 && ^(main_278_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_278_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %278*/
	/*   %280 = icmp eq i64 %279, 9218868437227405312*/
		main_278_280 = (main_278_279 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %278*/
	/*   %280 = icmp eq i64 %279, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__278_234)) begin
		main_278_280_reg <= main_278_280;
		if (start == 1'b0 && ^(main_278_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_278_280_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %281*/
	/*   %282 = and i64 %app.0.i, 2251799813685247*/
		main_281_282 = (main_5_app0i_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %281*/
	/*   %282 = and i64 %app.0.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__281_235)) begin
		main_281_282_reg <= main_281_282;
		if (start == 1'b0 && ^(main_281_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_281_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %281*/
	/*   %283 = icmp ne i64 %282, 0*/
		main_281_283 = (main_281_282 != 64'd0);
end
always @(posedge clk) begin
	/* main: %281*/
	/*   %283 = icmp ne i64 %282, 0*/
	if ((cur_state == LEGUP_F_main_BB__281_235)) begin
		main_281_283_reg <= main_281_283;
		if (start == 1'b0 && ^(main_281_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_281_283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i.i*/
	/*   %284 = phi i1 [ false, %278 ], [ %283, %281 ]*/
	if ((((cur_state == LEGUP_F_main_BB__278_234) & (memory_controller_waitrequest == 1'd0)) & (main_278_280 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i10iii_284 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i10.i.i.i*/
	/*   %284 = phi i1 [ false, %278 ], [ %283, %281 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__281_235) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i10iii_284 = main_281_283;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i.i*/
	/*   %284 = phi i1 [ false, %278 ], [ %283, %281 ]*/
	if ((((cur_state == LEGUP_F_main_BB__278_234) & (memory_controller_waitrequest == 1'd0)) & (main_278_280 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i10iii_284_reg <= main_float64_is_signaling_nanexit1i10iii_284;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10iii_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10iii_284_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i10.i.i.i*/
	/*   %284 = phi i1 [ false, %278 ], [ %283, %281 ]*/
	if (((cur_state == LEGUP_F_main_BB__281_235) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i10iii_284_reg <= main_float64_is_signaling_nanexit1i10iii_284;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10iii_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10iii_284_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i.i*/
	/*   %285 = trunc i64 %.0.i1.i to i63*/
		main_float64_is_signaling_nanexit1i10iii_285 = main_float64_divexiti_0i1i_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i.i*/
	/*   %285 = trunc i64 %.0.i1.i to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10iii_236)) begin
		main_float64_is_signaling_nanexit1i10iii_285_reg <= main_float64_is_signaling_nanexit1i10iii_285;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10iii_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10iii_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i.i*/
	/*   %286 = icmp ugt i63 %285, -4503599627370496*/
		main_float64_is_signaling_nanexit1i10iii_286 = (main_float64_is_signaling_nanexit1i10iii_285 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i.i*/
	/*   %286 = icmp ugt i63 %285, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10iii_236)) begin
		main_float64_is_signaling_nanexit1i10iii_286_reg <= main_float64_is_signaling_nanexit1i10iii_286;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10iii_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10iii_286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i.i*/
	/*   %287 = and i64 %.0.i1.i, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i10iii_287 = (main_float64_divexiti_0i1i_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i.i*/
	/*   %287 = and i64 %.0.i1.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10iii_236)) begin
		main_float64_is_signaling_nanexit1i10iii_287_reg <= main_float64_is_signaling_nanexit1i10iii_287;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10iii_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10iii_287_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i.i*/
	/*   %288 = icmp eq i64 %287, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i10iii_288 = (main_float64_is_signaling_nanexit1i10iii_287 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i.i*/
	/*   %288 = icmp eq i64 %287, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10iii_236)) begin
		main_float64_is_signaling_nanexit1i10iii_288_reg <= main_float64_is_signaling_nanexit1i10iii_288;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10iii_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10iii_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %289*/
	/*   %290 = and i64 %.0.i1.i, 2251799813685247*/
		main_289_290 = (main_float64_divexiti_0i1i_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %289*/
	/*   %290 = and i64 %.0.i1.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__289_237)) begin
		main_289_290_reg <= main_289_290;
		if (start == 1'b0 && ^(main_289_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_289_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %289*/
	/*   %291 = icmp ne i64 %290, 0*/
		main_289_291 = (main_289_290 != 64'd0);
end
always @(posedge clk) begin
	/* main: %289*/
	/*   %291 = icmp ne i64 %290, 0*/
	if ((cur_state == LEGUP_F_main_BB__289_237)) begin
		main_289_291_reg <= main_289_291;
		if (start == 1'b0 && ^(main_289_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_289_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i.i.i*/
	/*   %292 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i.i.i ], [ %291, %289 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10iii_236) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i10iii_288 == 1'd0))) begin
		main_float64_is_signaling_nanexiti11iii_292 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i11.i.i.i*/
	/*   %292 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i.i.i ], [ %291, %289 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__289_237) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti11iii_292 = main_289_291;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i.i.i*/
	/*   %292 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i.i.i ], [ %291, %289 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10iii_236) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i10iii_288 == 1'd0))) begin
		main_float64_is_signaling_nanexiti11iii_292_reg <= main_float64_is_signaling_nanexiti11iii_292;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11iii_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11iii_292_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i11.i.i.i*/
	/*   %292 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i.i.i ], [ %291, %289 ]*/
	if (((cur_state == LEGUP_F_main_BB__289_237) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti11iii_292_reg <= main_float64_is_signaling_nanexiti11iii_292;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11iii_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11iii_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i.i.i*/
	/*   %293 = or i1 %284, %292*/
		main_float64_is_signaling_nanexiti11iii_293 = (main_float64_is_signaling_nanexit1i10iii_284_reg | main_float64_is_signaling_nanexiti11iii_292_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i.i.i*/
	/*   %293 = or i1 %284, %292*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11iii_238)) begin
		main_float64_is_signaling_nanexiti11iii_293_reg <= main_float64_is_signaling_nanexiti11iii_293;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11iii_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11iii_293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i12.i.i.i*/
	/*   %294 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadi12iii_294 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i12.i.i.i*/
	/*   %294 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12iii_241)) begin
		main_threadi12iii_294_reg <= main_threadi12iii_294;
		if (start == 1'b0 && ^(main_threadi12iii_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi12iii_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i12.i.i.i*/
	/*   %295 = or i32 %294, 16*/
		main_threadi12iii_295 = (main_threadi12iii_294 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i12.i.i.i*/
	/*   %295 = or i32 %294, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadi12iii_241)) begin
		main_threadi12iii_295_reg <= main_threadi12iii_295;
		if (start == 1'b0 && ^(main_threadi12iii_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi12iii_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit16.i.i.i*/
	/*   %.sink.i13.i.i.i = phi i1 [ %292, %.thread.i12.i.i.i ], [ %286, %float64_is_signaling_nan.exit.i11.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11iii_238) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti11iii_293 == 1'd0))) begin
		main_propagateFloat64NaNexit16iii_sinki13iii = main_float64_is_signaling_nanexit1i10iii_286_reg;
	end
	/* main: %propagateFloat64NaN.exit16.i.i.i*/
	/*   %.sink.i13.i.i.i = phi i1 [ %292, %.thread.i12.i.i.i ], [ %286, %float64_is_signaling_nan.exit.i11.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadi12iii_242) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexit16iii_sinki13iii = main_float64_is_signaling_nanexiti11iii_292_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit16.i.i.i*/
	/*   %.sink.i13.i.i.i = phi i1 [ %292, %.thread.i12.i.i.i ], [ %286, %float64_is_signaling_nan.exit.i11.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11iii_238) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti11iii_293 == 1'd0))) begin
		main_propagateFloat64NaNexit16iii_sinki13iii_reg <= main_propagateFloat64NaNexit16iii_sinki13iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit16iii_sinki13iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit16iii_sinki13iii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit16.i.i.i*/
	/*   %.sink.i13.i.i.i = phi i1 [ %292, %.thread.i12.i.i.i ], [ %286, %float64_is_signaling_nan.exit.i11.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi12iii_242) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexit16iii_sinki13iii_reg <= main_propagateFloat64NaNexit16iii_sinki13iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit16iii_sinki13iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit16iii_sinki13iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit16.i.i.i*/
	/*   %.mux2.v.i14.i.i.i = select i1 %.sink.i13.i.i.i, i64 %.0.i1.i, i64 %app.0.i*/
		main_propagateFloat64NaNexit16iii_mux2vi14iii = (main_propagateFloat64NaNexit16iii_sinki13iii_reg ? main_float64_divexiti_0i1i_reg : main_5_app0i_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit16.i.i.i*/
	/*   %.mux2.v.i14.i.i.i = select i1 %.sink.i13.i.i.i, i64 %.0.i1.i, i64 %app.0.i*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit16iii_243)) begin
		main_propagateFloat64NaNexit16iii_mux2vi14iii_reg <= main_propagateFloat64NaNexit16iii_mux2vi14iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit16iii_mux2vi14iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit16iii_mux2vi14iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit16.i.i.i*/
	/*   %.mux2.i15.i.i.i = or i64 %.mux2.v.i14.i.i.i, 2251799813685248*/
		main_propagateFloat64NaNexit16iii_mux2i15iii = (main_propagateFloat64NaNexit16iii_mux2vi14iii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit16.i.i.i*/
	/*   %.mux2.i15.i.i.i = or i64 %.mux2.v.i14.i.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit16iii_243)) begin
		main_propagateFloat64NaNexit16iii_mux2i15iii_reg <= main_propagateFloat64NaNexit16iii_mux2i15iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit16iii_mux2i15iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit16iii_mux2i15iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %296*/
	/*   %297 = icmp eq i32 %266, 0*/
		main_296_297 = (main_float64_divexiti_266_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %296*/
	/*   %297 = icmp eq i32 %266, 0*/
	if ((cur_state == LEGUP_F_main_BB__296_244)) begin
		main_296_297_reg <= main_296_297;
		if (start == 1'b0 && ^(main_296_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_296_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %296*/
	/*   %298 = or i64 %272, 2305843009213693952*/
		main_296_298 = (main_268_272_reg | 64'd2305843009213693952);
end
always @(posedge clk) begin
	/* main: %296*/
	/*   %298 = or i64 %272, 2305843009213693952*/
	if ((cur_state == LEGUP_F_main_BB__296_244)) begin
		main_296_298_reg <= main_296_298;
		if (start == 1'b0 && ^(main_296_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_296_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %296*/
	/*   %299 = select i1 %297, i64 %272, i64 %298*/
		main_296_299 = (main_296_297 ? main_268_272_reg : main_296_298);
end
always @(posedge clk) begin
	/* main: %296*/
	/*   %299 = select i1 %297, i64 %272, i64 %298*/
	if ((cur_state == LEGUP_F_main_BB__296_244)) begin
		main_296_299_reg <= main_296_299;
		if (start == 1'b0 && ^(main_296_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_296_299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %296*/
	/*   %300 = sext i1 %297 to i32*/
		main_296_300 = $signed(main_296_297);
end
always @(posedge clk) begin
	/* main: %296*/
	/*   %300 = sext i1 %297 to i32*/
	if ((cur_state == LEGUP_F_main_BB__296_244)) begin
		main_296_300_reg <= main_296_300;
		if (start == 1'b0 && ^(main_296_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_296_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %296*/
	/*   %expDiff.0.i2.i.i = add nsw i32 %300, %267*/
		main_296_expDiff0i2ii = (main_296_300 + main_float64_divexiti_267_reg);
end
always @(posedge clk) begin
	/* main: %296*/
	/*   %expDiff.0.i2.i.i = add nsw i32 %300, %267*/
	if ((cur_state == LEGUP_F_main_BB__296_244)) begin
		main_296_expDiff0i2ii_reg <= main_296_expDiff0i2ii;
		if (start == 1'b0 && ^(main_296_expDiff0i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_296_expDiff0i2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %296*/
	/*   %301 = icmp eq i32 %expDiff.0.i2.i.i, 0*/
		main_296_301 = (main_296_expDiff0i2ii == 32'd0);
end
always @(posedge clk) begin
	/* main: %296*/
	/*   %301 = icmp eq i32 %expDiff.0.i2.i.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__296_244)) begin
		main_296_301_reg <= main_296_301;
		if (start == 1'b0 && ^(main_296_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_296_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %302*/
	/*   %303 = icmp slt i32 %expDiff.0.i2.i.i, 64*/
		main_302_303 = ($signed(main_296_expDiff0i2ii_reg) < $signed(32'd64));
end
always @(posedge clk) begin
	/* main: %302*/
	/*   %303 = icmp slt i32 %expDiff.0.i2.i.i, 64*/
	if ((cur_state == LEGUP_F_main_BB__302_245)) begin
		main_302_303_reg <= main_302_303;
		if (start == 1'b0 && ^(main_302_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_302_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %304*/
	/*   %305 = zext i32 %expDiff.0.i2.i.i to i64*/
		main_304_305 = main_296_expDiff0i2ii_reg;
end
always @(posedge clk) begin
	/* main: %304*/
	/*   %305 = zext i32 %expDiff.0.i2.i.i to i64*/
	if ((cur_state == LEGUP_F_main_BB__304_246)) begin
		main_304_305_reg <= main_304_305;
		if (start == 1'b0 && ^(main_304_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_304_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %304*/
	/*   %306 = lshr i64 %299, %305*/
		main_304_306 = (main_296_299_reg >>> (main_304_305 % 64'd64));
end
always @(posedge clk) begin
	/* main: %304*/
	/*   %306 = lshr i64 %299, %305*/
	if ((cur_state == LEGUP_F_main_BB__304_246)) begin
		main_304_306_reg <= main_304_306;
		if (start == 1'b0 && ^(main_304_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_304_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %304*/
	/*   %307 = sub nsw i32 0, %expDiff.0.i2.i.i*/
		main_304_307 = (32'd0 - main_296_expDiff0i2ii_reg);
end
always @(posedge clk) begin
	/* main: %304*/
	/*   %307 = sub nsw i32 0, %expDiff.0.i2.i.i*/
	if ((cur_state == LEGUP_F_main_BB__304_246)) begin
		main_304_307_reg <= main_304_307;
		if (start == 1'b0 && ^(main_304_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_304_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %304*/
	/*   %308 = and i32 %307, 63*/
		main_304_308 = (main_304_307 & 32'd63);
end
always @(posedge clk) begin
	/* main: %304*/
	/*   %308 = and i32 %307, 63*/
	if ((cur_state == LEGUP_F_main_BB__304_246)) begin
		main_304_308_reg <= main_304_308;
		if (start == 1'b0 && ^(main_304_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_304_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %304*/
	/*   %309 = zext i32 %308 to i64*/
		main_304_309 = main_304_308;
end
always @(posedge clk) begin
	/* main: %304*/
	/*   %309 = zext i32 %308 to i64*/
	if ((cur_state == LEGUP_F_main_BB__304_246)) begin
		main_304_309_reg <= main_304_309;
		if (start == 1'b0 && ^(main_304_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_304_309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %304*/
	/*   %310 = shl i64 %299, %309*/
		main_304_310 = (main_296_299_reg <<< (main_304_309 % 64'd64));
end
always @(posedge clk) begin
	/* main: %304*/
	/*   %310 = shl i64 %299, %309*/
	if ((cur_state == LEGUP_F_main_BB__304_246)) begin
		main_304_310_reg <= main_304_310;
		if (start == 1'b0 && ^(main_304_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_304_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %304*/
	/*   %311 = icmp ne i64 %310, 0*/
		main_304_311 = (main_304_310 != 64'd0);
end
always @(posedge clk) begin
	/* main: %304*/
	/*   %311 = icmp ne i64 %310, 0*/
	if ((cur_state == LEGUP_F_main_BB__304_246)) begin
		main_304_311_reg <= main_304_311;
		if (start == 1'b0 && ^(main_304_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_304_311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %304*/
	/*   %312 = zext i1 %311 to i64*/
		main_304_312 = main_304_311;
end
always @(posedge clk) begin
	/* main: %304*/
	/*   %312 = zext i1 %311 to i64*/
	if ((cur_state == LEGUP_F_main_BB__304_246)) begin
		main_304_312_reg <= main_304_312;
		if (start == 1'b0 && ^(main_304_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_304_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %304*/
	/*   %313 = or i64 %312, %306*/
		main_304_313 = (main_304_312 | main_304_306);
end
always @(posedge clk) begin
	/* main: %304*/
	/*   %313 = or i64 %312, %306*/
	if ((cur_state == LEGUP_F_main_BB__304_246)) begin
		main_304_313_reg <= main_304_313;
		if (start == 1'b0 && ^(main_304_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_304_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %314*/
	/*   %315 = icmp ne i64 %299, 0*/
		main_314_315 = (main_296_299_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %314*/
	/*   %315 = icmp ne i64 %299, 0*/
	if ((cur_state == LEGUP_F_main_BB__314_247)) begin
		main_314_315_reg <= main_314_315;
		if (start == 1'b0 && ^(main_314_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_314_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %314*/
	/*   %316 = zext i1 %315 to i64*/
		main_314_316 = main_314_315;
end
always @(posedge clk) begin
	/* main: %314*/
	/*   %316 = zext i1 %315 to i64*/
	if ((cur_state == LEGUP_F_main_BB__314_247)) begin
		main_314_316_reg <= main_314_316;
		if (start == 1'b0 && ^(main_314_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_314_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %317*/
	/*   %318 = icmp slt i32 %267, 0*/
		main_317_318 = ($signed(main_float64_divexiti_267_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %317*/
	/*   %318 = icmp slt i32 %267, 0*/
	if ((cur_state == LEGUP_F_main_BB__317_248)) begin
		main_317_318_reg <= main_317_318;
		if (start == 1'b0 && ^(main_317_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_317_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %319*/
	/*   %320 = icmp eq i32 %266, 2047*/
		main_319_320 = (main_float64_divexiti_266_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %319*/
	/*   %320 = icmp eq i32 %266, 2047*/
	if ((cur_state == LEGUP_F_main_BB__319_249)) begin
		main_319_320_reg <= main_319_320;
		if (start == 1'b0 && ^(main_319_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_319_320_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %321*/
	/*   %322 = icmp eq i64 %272, 0*/
		main_321_322 = (main_268_272_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %321*/
	/*   %322 = icmp eq i64 %272, 0*/
	if ((cur_state == LEGUP_F_main_BB__321_250)) begin
		main_321_322_reg <= main_321_322;
		if (start == 1'b0 && ^(main_321_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_321_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %323*/
	/*   %324 = and i64 %app.0.i, 9221120237041090560*/
		main_323_324 = (main_5_app0i_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %323*/
	/*   %324 = and i64 %app.0.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__323_251)) begin
		main_323_324_reg <= main_323_324;
		if (start == 1'b0 && ^(main_323_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_323_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %323*/
	/*   %325 = icmp eq i64 %324, 9218868437227405312*/
		main_323_325 = (main_323_324 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %323*/
	/*   %325 = icmp eq i64 %324, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__323_251)) begin
		main_323_325_reg <= main_323_325;
		if (start == 1'b0 && ^(main_323_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_323_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %326*/
	/*   %327 = and i64 %app.0.i, 2251799813685247*/
		main_326_327 = (main_5_app0i_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %326*/
	/*   %327 = and i64 %app.0.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__326_252)) begin
		main_326_327_reg <= main_326_327;
		if (start == 1'b0 && ^(main_326_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_326_327_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %326*/
	/*   %328 = icmp ne i64 %327, 0*/
		main_326_328 = (main_326_327 != 64'd0);
end
always @(posedge clk) begin
	/* main: %326*/
	/*   %328 = icmp ne i64 %327, 0*/
	if ((cur_state == LEGUP_F_main_BB__326_252)) begin
		main_326_328_reg <= main_326_328;
		if (start == 1'b0 && ^(main_326_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_326_328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i.i*/
	/*   %329 = phi i1 [ false, %323 ], [ %328, %326 ]*/
	if ((((cur_state == LEGUP_F_main_BB__323_251) & (memory_controller_waitrequest == 1'd0)) & (main_323_325 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i1iii_329 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i1.i.i.i*/
	/*   %329 = phi i1 [ false, %323 ], [ %328, %326 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__326_252) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i1iii_329 = main_326_328;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i.i*/
	/*   %329 = phi i1 [ false, %323 ], [ %328, %326 ]*/
	if ((((cur_state == LEGUP_F_main_BB__323_251) & (memory_controller_waitrequest == 1'd0)) & (main_323_325 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i1iii_329_reg <= main_float64_is_signaling_nanexit1i1iii_329;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1iii_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1iii_329_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i1.i.i.i*/
	/*   %329 = phi i1 [ false, %323 ], [ %328, %326 ]*/
	if (((cur_state == LEGUP_F_main_BB__326_252) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i1iii_329_reg <= main_float64_is_signaling_nanexit1i1iii_329;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1iii_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1iii_329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i.i*/
	/*   %330 = trunc i64 %.0.i1.i to i63*/
		main_float64_is_signaling_nanexit1i1iii_330 = main_float64_divexiti_0i1i_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i.i*/
	/*   %330 = trunc i64 %.0.i1.i to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1iii_253)) begin
		main_float64_is_signaling_nanexit1i1iii_330_reg <= main_float64_is_signaling_nanexit1i1iii_330;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1iii_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1iii_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i.i*/
	/*   %331 = icmp ugt i63 %330, -4503599627370496*/
		main_float64_is_signaling_nanexit1i1iii_331 = (main_float64_is_signaling_nanexit1i1iii_330 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i.i*/
	/*   %331 = icmp ugt i63 %330, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1iii_253)) begin
		main_float64_is_signaling_nanexit1i1iii_331_reg <= main_float64_is_signaling_nanexit1i1iii_331;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1iii_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1iii_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i.i*/
	/*   %332 = and i64 %.0.i1.i, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i1iii_332 = (main_float64_divexiti_0i1i_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i.i*/
	/*   %332 = and i64 %.0.i1.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1iii_253)) begin
		main_float64_is_signaling_nanexit1i1iii_332_reg <= main_float64_is_signaling_nanexit1i1iii_332;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1iii_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1iii_332_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i.i*/
	/*   %333 = icmp eq i64 %332, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i1iii_333 = (main_float64_is_signaling_nanexit1i1iii_332 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i.i*/
	/*   %333 = icmp eq i64 %332, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1iii_253)) begin
		main_float64_is_signaling_nanexit1i1iii_333_reg <= main_float64_is_signaling_nanexit1i1iii_333;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1iii_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1iii_333_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %334*/
	/*   %335 = and i64 %.0.i1.i, 2251799813685247*/
		main_334_335 = (main_float64_divexiti_0i1i_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %334*/
	/*   %335 = and i64 %.0.i1.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__334_254)) begin
		main_334_335_reg <= main_334_335;
		if (start == 1'b0 && ^(main_334_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_334_335_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %334*/
	/*   %336 = icmp ne i64 %335, 0*/
		main_334_336 = (main_334_335 != 64'd0);
end
always @(posedge clk) begin
	/* main: %334*/
	/*   %336 = icmp ne i64 %335, 0*/
	if ((cur_state == LEGUP_F_main_BB__334_254)) begin
		main_334_336_reg <= main_334_336;
		if (start == 1'b0 && ^(main_334_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_334_336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i2.i.i.i*/
	/*   %337 = phi i1 [ false, %float64_is_signaling_nan.exit1.i1.i.i.i ], [ %336, %334 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1iii_253) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i1iii_333 == 1'd0))) begin
		main_float64_is_signaling_nanexiti2iii_337 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i2.i.i.i*/
	/*   %337 = phi i1 [ false, %float64_is_signaling_nan.exit1.i1.i.i.i ], [ %336, %334 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__334_254) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti2iii_337 = main_334_336;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i2.i.i.i*/
	/*   %337 = phi i1 [ false, %float64_is_signaling_nan.exit1.i1.i.i.i ], [ %336, %334 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1iii_253) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i1iii_333 == 1'd0))) begin
		main_float64_is_signaling_nanexiti2iii_337_reg <= main_float64_is_signaling_nanexiti2iii_337;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti2iii_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti2iii_337_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i2.i.i.i*/
	/*   %337 = phi i1 [ false, %float64_is_signaling_nan.exit1.i1.i.i.i ], [ %336, %334 ]*/
	if (((cur_state == LEGUP_F_main_BB__334_254) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti2iii_337_reg <= main_float64_is_signaling_nanexiti2iii_337;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti2iii_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti2iii_337_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i2.i.i.i*/
	/*   %338 = or i1 %329, %337*/
		main_float64_is_signaling_nanexiti2iii_338 = (main_float64_is_signaling_nanexit1i1iii_329_reg | main_float64_is_signaling_nanexiti2iii_337_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i2.i.i.i*/
	/*   %338 = or i1 %329, %337*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti2iii_255)) begin
		main_float64_is_signaling_nanexiti2iii_338_reg <= main_float64_is_signaling_nanexiti2iii_338;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti2iii_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti2iii_338_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i3.i.i.i*/
	/*   %339 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadi3iii_339 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i3.i.i.i*/
	/*   %339 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3iii_258)) begin
		main_threadi3iii_339_reg <= main_threadi3iii_339;
		if (start == 1'b0 && ^(main_threadi3iii_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi3iii_339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i3.i.i.i*/
	/*   %340 = or i32 %339, 16*/
		main_threadi3iii_340 = (main_threadi3iii_339 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i3.i.i.i*/
	/*   %340 = or i32 %339, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadi3iii_258)) begin
		main_threadi3iii_340_reg <= main_threadi3iii_340;
		if (start == 1'b0 && ^(main_threadi3iii_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi3iii_340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit7.i.i.i*/
	/*   %.sink.i4.i.i.i = phi i1 [ %337, %.thread.i3.i.i.i ], [ %331, %float64_is_signaling_nan.exit.i2.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti2iii_255) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti2iii_338 == 1'd0))) begin
		main_propagateFloat64NaNexit7iii_sinki4iii = main_float64_is_signaling_nanexit1i1iii_331_reg;
	end
	/* main: %propagateFloat64NaN.exit7.i.i.i*/
	/*   %.sink.i4.i.i.i = phi i1 [ %337, %.thread.i3.i.i.i ], [ %331, %float64_is_signaling_nan.exit.i2.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadi3iii_259) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexit7iii_sinki4iii = main_float64_is_signaling_nanexiti2iii_337_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit7.i.i.i*/
	/*   %.sink.i4.i.i.i = phi i1 [ %337, %.thread.i3.i.i.i ], [ %331, %float64_is_signaling_nan.exit.i2.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti2iii_255) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti2iii_338 == 1'd0))) begin
		main_propagateFloat64NaNexit7iii_sinki4iii_reg <= main_propagateFloat64NaNexit7iii_sinki4iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit7iii_sinki4iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit7iii_sinki4iii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit7.i.i.i*/
	/*   %.sink.i4.i.i.i = phi i1 [ %337, %.thread.i3.i.i.i ], [ %331, %float64_is_signaling_nan.exit.i2.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi3iii_259) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexit7iii_sinki4iii_reg <= main_propagateFloat64NaNexit7iii_sinki4iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit7iii_sinki4iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit7iii_sinki4iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit7.i.i.i*/
	/*   %.mux2.v.i5.i.i.i = select i1 %.sink.i4.i.i.i, i64 %.0.i1.i, i64 %app.0.i*/
		main_propagateFloat64NaNexit7iii_mux2vi5iii = (main_propagateFloat64NaNexit7iii_sinki4iii_reg ? main_float64_divexiti_0i1i_reg : main_5_app0i_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit7.i.i.i*/
	/*   %.mux2.v.i5.i.i.i = select i1 %.sink.i4.i.i.i, i64 %.0.i1.i, i64 %app.0.i*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit7iii_260)) begin
		main_propagateFloat64NaNexit7iii_mux2vi5iii_reg <= main_propagateFloat64NaNexit7iii_mux2vi5iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit7iii_mux2vi5iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit7iii_mux2vi5iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit7.i.i.i*/
	/*   %.mux2.i6.i.i.i = or i64 %.mux2.v.i5.i.i.i, 2251799813685248*/
		main_propagateFloat64NaNexit7iii_mux2i6iii = (main_propagateFloat64NaNexit7iii_mux2vi5iii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit7.i.i.i*/
	/*   %.mux2.i6.i.i.i = or i64 %.mux2.v.i5.i.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit7iii_260)) begin
		main_propagateFloat64NaNexit7iii_mux2i6iii_reg <= main_propagateFloat64NaNexit7iii_mux2i6iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit7iii_mux2i6iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit7iii_mux2i6iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %341*/
	/*   %342 = shl nuw i64 %258, 63*/
		main_341_342 = (main_float64_divexiti_258_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %341*/
	/*   %342 = shl nuw i64 %258, 63*/
	if ((cur_state == LEGUP_F_main_BB__341_261)) begin
		main_341_342_reg <= main_341_342;
		if (start == 1'b0 && ^(main_341_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_341_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %341*/
	/*   %343 = or i64 %342, 9218868437227405312*/
		main_341_343 = (main_341_342 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %341*/
	/*   %343 = or i64 %342, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__341_261)) begin
		main_341_343_reg <= main_341_343;
		if (start == 1'b0 && ^(main_341_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_341_343_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %344*/
	/*   %345 = icmp eq i32 %264, 0*/
		main_344_345 = (main_float64_divexiti_264_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %344*/
	/*   %345 = icmp eq i32 %264, 0*/
	if ((cur_state == LEGUP_F_main_BB__344_262)) begin
		main_344_345_reg <= main_344_345;
		if (start == 1'b0 && ^(main_344_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_344_345_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %344*/
	/*   %346 = or i64 %270, 2305843009213693952*/
		main_344_346 = (main_268_270_reg | 64'd2305843009213693952);
end
always @(posedge clk) begin
	/* main: %344*/
	/*   %346 = or i64 %270, 2305843009213693952*/
	if ((cur_state == LEGUP_F_main_BB__344_262)) begin
		main_344_346_reg <= main_344_346;
		if (start == 1'b0 && ^(main_344_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_344_346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %344*/
	/*   %347 = select i1 %345, i64 %270, i64 %346*/
		main_344_347 = (main_344_345 ? main_268_270_reg : main_344_346);
end
always @(posedge clk) begin
	/* main: %344*/
	/*   %347 = select i1 %345, i64 %270, i64 %346*/
	if ((cur_state == LEGUP_F_main_BB__344_262)) begin
		main_344_347_reg <= main_344_347;
		if (start == 1'b0 && ^(main_344_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_344_347_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %344*/
	/*   %348 = zext i1 %345 to i32*/
		main_344_348 = main_344_345;
end
always @(posedge clk) begin
	/* main: %344*/
	/*   %348 = zext i1 %345 to i32*/
	if ((cur_state == LEGUP_F_main_BB__344_262)) begin
		main_344_348_reg <= main_344_348;
		if (start == 1'b0 && ^(main_344_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_344_348_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %344*/
	/*   %expDiff.1.i3.i.i = add nsw i32 %267, %348*/
		main_344_expDiff1i3ii = (main_float64_divexiti_267_reg + main_344_348);
end
always @(posedge clk) begin
	/* main: %344*/
	/*   %expDiff.1.i3.i.i = add nsw i32 %267, %348*/
	if ((cur_state == LEGUP_F_main_BB__344_262)) begin
		main_344_expDiff1i3ii_reg <= main_344_expDiff1i3ii;
		if (start == 1'b0 && ^(main_344_expDiff1i3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_344_expDiff1i3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %344*/
	/*   %349 = sub nsw i32 0, %expDiff.1.i3.i.i*/
		main_344_349 = (32'd0 - main_344_expDiff1i3ii);
end
always @(posedge clk) begin
	/* main: %344*/
	/*   %349 = sub nsw i32 0, %expDiff.1.i3.i.i*/
	if ((cur_state == LEGUP_F_main_BB__344_262)) begin
		main_344_349_reg <= main_344_349;
		if (start == 1'b0 && ^(main_344_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_344_349_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %344*/
	/*   %350 = icmp eq i32 %expDiff.1.i3.i.i, 0*/
		main_344_350 = (main_344_expDiff1i3ii == 32'd0);
end
always @(posedge clk) begin
	/* main: %344*/
	/*   %350 = icmp eq i32 %expDiff.1.i3.i.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__344_262)) begin
		main_344_350_reg <= main_344_350;
		if (start == 1'b0 && ^(main_344_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_344_350_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %351*/
	/*   %352 = icmp sgt i32 %expDiff.1.i3.i.i, -64*/
		main_351_352 = ($signed(main_344_expDiff1i3ii_reg) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* main: %351*/
	/*   %352 = icmp sgt i32 %expDiff.1.i3.i.i, -64*/
	if ((cur_state == LEGUP_F_main_BB__351_263)) begin
		main_351_352_reg <= main_351_352;
		if (start == 1'b0 && ^(main_351_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_351_352_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %353*/
	/*   %354 = zext i32 %349 to i64*/
		main_353_354 = main_344_349_reg;
end
always @(posedge clk) begin
	/* main: %353*/
	/*   %354 = zext i32 %349 to i64*/
	if ((cur_state == LEGUP_F_main_BB__353_264)) begin
		main_353_354_reg <= main_353_354;
		if (start == 1'b0 && ^(main_353_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_353_354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %353*/
	/*   %355 = lshr i64 %347, %354*/
		main_353_355 = (main_344_347_reg >>> (main_353_354 % 64'd64));
end
always @(posedge clk) begin
	/* main: %353*/
	/*   %355 = lshr i64 %347, %354*/
	if ((cur_state == LEGUP_F_main_BB__353_264)) begin
		main_353_355_reg <= main_353_355;
		if (start == 1'b0 && ^(main_353_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_353_355_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %353*/
	/*   %356 = and i32 %expDiff.1.i3.i.i, 63*/
		main_353_356 = (main_344_expDiff1i3ii_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %353*/
	/*   %356 = and i32 %expDiff.1.i3.i.i, 63*/
	if ((cur_state == LEGUP_F_main_BB__353_264)) begin
		main_353_356_reg <= main_353_356;
		if (start == 1'b0 && ^(main_353_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_353_356_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %353*/
	/*   %357 = zext i32 %356 to i64*/
		main_353_357 = main_353_356;
end
always @(posedge clk) begin
	/* main: %353*/
	/*   %357 = zext i32 %356 to i64*/
	if ((cur_state == LEGUP_F_main_BB__353_264)) begin
		main_353_357_reg <= main_353_357;
		if (start == 1'b0 && ^(main_353_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_353_357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %353*/
	/*   %358 = shl i64 %347, %357*/
		main_353_358 = (main_344_347_reg <<< (main_353_357 % 64'd64));
end
always @(posedge clk) begin
	/* main: %353*/
	/*   %358 = shl i64 %347, %357*/
	if ((cur_state == LEGUP_F_main_BB__353_264)) begin
		main_353_358_reg <= main_353_358;
		if (start == 1'b0 && ^(main_353_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_353_358_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %353*/
	/*   %359 = icmp ne i64 %358, 0*/
		main_353_359 = (main_353_358 != 64'd0);
end
always @(posedge clk) begin
	/* main: %353*/
	/*   %359 = icmp ne i64 %358, 0*/
	if ((cur_state == LEGUP_F_main_BB__353_264)) begin
		main_353_359_reg <= main_353_359;
		if (start == 1'b0 && ^(main_353_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_353_359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %353*/
	/*   %360 = zext i1 %359 to i64*/
		main_353_360 = main_353_359;
end
always @(posedge clk) begin
	/* main: %353*/
	/*   %360 = zext i1 %359 to i64*/
	if ((cur_state == LEGUP_F_main_BB__353_264)) begin
		main_353_360_reg <= main_353_360;
		if (start == 1'b0 && ^(main_353_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_353_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %353*/
	/*   %361 = or i64 %360, %355*/
		main_353_361 = (main_353_360 | main_353_355);
end
always @(posedge clk) begin
	/* main: %353*/
	/*   %361 = or i64 %360, %355*/
	if ((cur_state == LEGUP_F_main_BB__353_264)) begin
		main_353_361_reg <= main_353_361;
		if (start == 1'b0 && ^(main_353_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_353_361_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %362*/
	/*   %363 = icmp ne i64 %347, 0*/
		main_362_363 = (main_344_347_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %362*/
	/*   %363 = icmp ne i64 %347, 0*/
	if ((cur_state == LEGUP_F_main_BB__362_265)) begin
		main_362_363_reg <= main_362_363;
		if (start == 1'b0 && ^(main_362_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_362_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %362*/
	/*   %364 = zext i1 %363 to i64*/
		main_362_364 = main_362_363;
end
always @(posedge clk) begin
	/* main: %362*/
	/*   %364 = zext i1 %363 to i64*/
	if ((cur_state == LEGUP_F_main_BB__362_265)) begin
		main_362_364_reg <= main_362_364;
		if (start == 1'b0 && ^(main_362_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_362_364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %367 = or i64 %272, %270*/
		main_366_367 = (main_268_272_reg | main_268_270_reg);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %367 = or i64 %272, %270*/
	if ((cur_state == LEGUP_F_main_BB__366_267)) begin
		main_366_367_reg <= main_366_367;
		if (start == 1'b0 && ^(main_366_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_367_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %366*/
	/*   %368 = icmp eq i64 %367, 0*/
		main_366_368 = (main_366_367 == 64'd0);
end
always @(posedge clk) begin
	/* main: %366*/
	/*   %368 = icmp eq i64 %367, 0*/
	if ((cur_state == LEGUP_F_main_BB__366_267)) begin
		main_366_368_reg <= main_366_368;
		if (start == 1'b0 && ^(main_366_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_366_368_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %369*/
	/*   %370 = and i64 %app.0.i, 9221120237041090560*/
		main_369_370 = (main_5_app0i_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %369*/
	/*   %370 = and i64 %app.0.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__369_268)) begin
		main_369_370_reg <= main_369_370;
		if (start == 1'b0 && ^(main_369_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_369_370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %369*/
	/*   %371 = icmp eq i64 %370, 9218868437227405312*/
		main_369_371 = (main_369_370 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %369*/
	/*   %371 = icmp eq i64 %370, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__369_268)) begin
		main_369_371_reg <= main_369_371;
		if (start == 1'b0 && ^(main_369_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_369_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %372*/
	/*   %373 = and i64 %app.0.i, 2251799813685247*/
		main_372_373 = (main_5_app0i_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %372*/
	/*   %373 = and i64 %app.0.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__372_269)) begin
		main_372_373_reg <= main_372_373;
		if (start == 1'b0 && ^(main_372_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_372_373_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %372*/
	/*   %374 = icmp ne i64 %373, 0*/
		main_372_374 = (main_372_373 != 64'd0);
end
always @(posedge clk) begin
	/* main: %372*/
	/*   %374 = icmp ne i64 %373, 0*/
	if ((cur_state == LEGUP_F_main_BB__372_269)) begin
		main_372_374_reg <= main_372_374;
		if (start == 1'b0 && ^(main_372_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_372_374_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i.i*/
	/*   %375 = phi i1 [ false, %369 ], [ %374, %372 ]*/
	if ((((cur_state == LEGUP_F_main_BB__369_268) & (memory_controller_waitrequest == 1'd0)) & (main_369_371 == 1'd0))) begin
		main_float64_is_signaling_nanexit1ii4ii_375 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i.i4.i.i*/
	/*   %375 = phi i1 [ false, %369 ], [ %374, %372 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__372_269) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1ii4ii_375 = main_372_374;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i.i*/
	/*   %375 = phi i1 [ false, %369 ], [ %374, %372 ]*/
	if ((((cur_state == LEGUP_F_main_BB__369_268) & (memory_controller_waitrequest == 1'd0)) & (main_369_371 == 1'd0))) begin
		main_float64_is_signaling_nanexit1ii4ii_375_reg <= main_float64_is_signaling_nanexit1ii4ii_375;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4ii_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4ii_375_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i.i4.i.i*/
	/*   %375 = phi i1 [ false, %369 ], [ %374, %372 ]*/
	if (((cur_state == LEGUP_F_main_BB__372_269) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1ii4ii_375_reg <= main_float64_is_signaling_nanexit1ii4ii_375;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4ii_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4ii_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i.i*/
	/*   %376 = trunc i64 %.0.i1.i to i63*/
		main_float64_is_signaling_nanexit1ii4ii_376 = main_float64_divexiti_0i1i_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i.i*/
	/*   %376 = trunc i64 %.0.i1.i to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4ii_270)) begin
		main_float64_is_signaling_nanexit1ii4ii_376_reg <= main_float64_is_signaling_nanexit1ii4ii_376;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4ii_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4ii_376_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i.i*/
	/*   %377 = icmp ugt i63 %376, -4503599627370496*/
		main_float64_is_signaling_nanexit1ii4ii_377 = (main_float64_is_signaling_nanexit1ii4ii_376 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i.i*/
	/*   %377 = icmp ugt i63 %376, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4ii_270)) begin
		main_float64_is_signaling_nanexit1ii4ii_377_reg <= main_float64_is_signaling_nanexit1ii4ii_377;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4ii_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4ii_377_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i.i*/
	/*   %378 = and i64 %.0.i1.i, 9221120237041090560*/
		main_float64_is_signaling_nanexit1ii4ii_378 = (main_float64_divexiti_0i1i_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i.i*/
	/*   %378 = and i64 %.0.i1.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4ii_270)) begin
		main_float64_is_signaling_nanexit1ii4ii_378_reg <= main_float64_is_signaling_nanexit1ii4ii_378;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4ii_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4ii_378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i.i*/
	/*   %379 = icmp eq i64 %378, 9218868437227405312*/
		main_float64_is_signaling_nanexit1ii4ii_379 = (main_float64_is_signaling_nanexit1ii4ii_378 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i.i*/
	/*   %379 = icmp eq i64 %378, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4ii_270)) begin
		main_float64_is_signaling_nanexit1ii4ii_379_reg <= main_float64_is_signaling_nanexit1ii4ii_379;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4ii_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4ii_379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %380*/
	/*   %381 = and i64 %.0.i1.i, 2251799813685247*/
		main_380_381 = (main_float64_divexiti_0i1i_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %380*/
	/*   %381 = and i64 %.0.i1.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__380_271)) begin
		main_380_381_reg <= main_380_381;
		if (start == 1'b0 && ^(main_380_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_380_381_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %380*/
	/*   %382 = icmp ne i64 %381, 0*/
		main_380_382 = (main_380_381 != 64'd0);
end
always @(posedge clk) begin
	/* main: %380*/
	/*   %382 = icmp ne i64 %381, 0*/
	if ((cur_state == LEGUP_F_main_BB__380_271)) begin
		main_380_382_reg <= main_380_382;
		if (start == 1'b0 && ^(main_380_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_380_382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i5.i.i*/
	/*   %383 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i4.i.i ], [ %382, %380 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4ii_270) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1ii4ii_379 == 1'd0))) begin
		main_float64_is_signaling_nanexitii5ii_383 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i.i5.i.i*/
	/*   %383 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i4.i.i ], [ %382, %380 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__380_271) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexitii5ii_383 = main_380_382;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i5.i.i*/
	/*   %383 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i4.i.i ], [ %382, %380 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4ii_270) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1ii4ii_379 == 1'd0))) begin
		main_float64_is_signaling_nanexitii5ii_383_reg <= main_float64_is_signaling_nanexitii5ii_383;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii5ii_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii5ii_383_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i.i5.i.i*/
	/*   %383 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i4.i.i ], [ %382, %380 ]*/
	if (((cur_state == LEGUP_F_main_BB__380_271) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexitii5ii_383_reg <= main_float64_is_signaling_nanexitii5ii_383;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii5ii_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii5ii_383_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i5.i.i*/
	/*   %384 = or i1 %375, %383*/
		main_float64_is_signaling_nanexitii5ii_384 = (main_float64_is_signaling_nanexit1ii4ii_375_reg | main_float64_is_signaling_nanexitii5ii_383_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i5.i.i*/
	/*   %384 = or i1 %375, %383*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii5ii_272)) begin
		main_float64_is_signaling_nanexitii5ii_384_reg <= main_float64_is_signaling_nanexitii5ii_384;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii5ii_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii5ii_384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i6.i.i*/
	/*   %385 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadii6ii_385 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i.i6.i.i*/
	/*   %385 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6ii_275)) begin
		main_threadii6ii_385_reg <= main_threadii6ii_385;
		if (start == 1'b0 && ^(main_threadii6ii_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii6ii_385_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i6.i.i*/
	/*   %386 = or i32 %385, 16*/
		main_threadii6ii_386 = (main_threadii6ii_385 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i.i6.i.i*/
	/*   %386 = or i32 %385, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadii6ii_275)) begin
		main_threadii6ii_386_reg <= main_threadii6ii_386;
		if (start == 1'b0 && ^(main_threadii6ii_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii6ii_386_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i10.i.i*/
	/*   %.sink.i.i7.i.i = phi i1 [ %383, %.thread.i.i6.i.i ], [ %377, %float64_is_signaling_nan.exit.i.i5.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii5ii_272) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexitii5ii_384 == 1'd0))) begin
		main_propagateFloat64NaNexiti10ii_sinkii7ii = main_float64_is_signaling_nanexit1ii4ii_377_reg;
	end
	/* main: %propagateFloat64NaN.exit.i10.i.i*/
	/*   %.sink.i.i7.i.i = phi i1 [ %383, %.thread.i.i6.i.i ], [ %377, %float64_is_signaling_nan.exit.i.i5.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadii6ii_276) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexiti10ii_sinkii7ii = main_float64_is_signaling_nanexitii5ii_383_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i10.i.i*/
	/*   %.sink.i.i7.i.i = phi i1 [ %383, %.thread.i.i6.i.i ], [ %377, %float64_is_signaling_nan.exit.i.i5.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii5ii_272) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexitii5ii_384 == 1'd0))) begin
		main_propagateFloat64NaNexiti10ii_sinkii7ii_reg <= main_propagateFloat64NaNexiti10ii_sinkii7ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexiti10ii_sinkii7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexiti10ii_sinkii7ii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit.i10.i.i*/
	/*   %.sink.i.i7.i.i = phi i1 [ %383, %.thread.i.i6.i.i ], [ %377, %float64_is_signaling_nan.exit.i.i5.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadii6ii_276) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexiti10ii_sinkii7ii_reg <= main_propagateFloat64NaNexiti10ii_sinkii7ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexiti10ii_sinkii7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexiti10ii_sinkii7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i10.i.i*/
	/*   %.mux2.v.i.i8.i.i = select i1 %.sink.i.i7.i.i, i64 %.0.i1.i, i64 %app.0.i*/
		main_propagateFloat64NaNexiti10ii_mux2vii8ii = (main_propagateFloat64NaNexiti10ii_sinkii7ii_reg ? main_float64_divexiti_0i1i_reg : main_5_app0i_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i10.i.i*/
	/*   %.mux2.v.i.i8.i.i = select i1 %.sink.i.i7.i.i, i64 %.0.i1.i, i64 %app.0.i*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexiti10ii_277)) begin
		main_propagateFloat64NaNexiti10ii_mux2vii8ii_reg <= main_propagateFloat64NaNexiti10ii_mux2vii8ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexiti10ii_mux2vii8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexiti10ii_mux2vii8ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i10.i.i*/
	/*   %.mux2.i.i9.i.i = or i64 %.mux2.v.i.i8.i.i, 2251799813685248*/
		main_propagateFloat64NaNexiti10ii_mux2ii9ii = (main_propagateFloat64NaNexiti10ii_mux2vii8ii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i10.i.i*/
	/*   %.mux2.i.i9.i.i = or i64 %.mux2.v.i.i8.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexiti10ii_277)) begin
		main_propagateFloat64NaNexiti10ii_mux2ii9ii_reg <= main_propagateFloat64NaNexiti10ii_mux2ii9ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexiti10ii_mux2ii9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexiti10ii_mux2ii9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %387*/
	/*   %388 = add nuw nsw i64 %272, %270*/
		main_387_388 = (main_268_272_reg + main_268_270_reg);
end
always @(posedge clk) begin
	/* main: %387*/
	/*   %388 = add nuw nsw i64 %272, %270*/
	if ((cur_state == LEGUP_F_main_BB__387_278)) begin
		main_387_388_reg <= main_387_388;
		if (start == 1'b0 && ^(main_387_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_387_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %387*/
	/*   %389 = lshr exact i64 %388, 9*/
		main_387_389 = (main_387_388 >>> (64'd9 % 64'd64));
end
always @(posedge clk) begin
	/* main: %387*/
	/*   %389 = lshr exact i64 %388, 9*/
	if ((cur_state == LEGUP_F_main_BB__387_278)) begin
		main_387_389_reg <= main_387_389;
		if (start == 1'b0 && ^(main_387_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_387_389_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %387*/
	/*   %390 = shl nuw i64 %258, 63*/
		main_387_390 = (main_float64_divexiti_258_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %387*/
	/*   %390 = shl nuw i64 %258, 63*/
	if ((cur_state == LEGUP_F_main_BB__387_278)) begin
		main_387_390_reg <= main_387_390;
		if (start == 1'b0 && ^(main_387_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_387_390_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %387*/
	/*   %391 = or i64 %389, %390*/
		main_387_391 = (main_387_389 | main_387_390);
end
always @(posedge clk) begin
	/* main: %387*/
	/*   %391 = or i64 %389, %390*/
	if ((cur_state == LEGUP_F_main_BB__387_278)) begin
		main_387_391_reg <= main_387_391;
		if (start == 1'b0 && ^(main_387_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_387_391_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %392*/
	/*   %393 = or i64 %270, 4611686018427387904*/
		main_392_393 = (main_268_270_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %392*/
	/*   %393 = or i64 %270, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__392_279)) begin
		main_392_393_reg <= main_392_393;
		if (start == 1'b0 && ^(main_392_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_393_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %392*/
	/*   %394 = add nuw i64 %393, %272*/
		main_392_394 = (main_392_393 + main_268_272_reg);
end
always @(posedge clk) begin
	/* main: %392*/
	/*   %394 = add nuw i64 %393, %272*/
	if ((cur_state == LEGUP_F_main_BB__392_279)) begin
		main_392_394_reg <= main_392_394;
		if (start == 1'b0 && ^(main_392_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %395 = phi i64 [ %270, %296 ], [ %270, %304 ], [ %270, %314 ], [ %361, %353 ], [ %364, %362 ], [ %347, %344 ]*/
	if ((((cur_state == LEGUP_F_main_BB__296_244) & (memory_controller_waitrequest == 1'd0)) & (main_296_301 == 1'd1))) begin
		main_shift64RightJammingexit9iii_395 = main_268_270_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %395 = phi i64 [ %270, %296 ], [ %270, %304 ], [ %270, %314 ], [ %361, %353 ], [ %364, %362 ], [ %347, %344 ]*/
	else if (((cur_state == LEGUP_F_main_BB__304_246) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_395 = main_268_270_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %395 = phi i64 [ %270, %296 ], [ %270, %304 ], [ %270, %314 ], [ %361, %353 ], [ %364, %362 ], [ %347, %344 ]*/
	else if (((cur_state == LEGUP_F_main_BB__314_247) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_395 = main_268_270_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %395 = phi i64 [ %270, %296 ], [ %270, %304 ], [ %270, %314 ], [ %361, %353 ], [ %364, %362 ], [ %347, %344 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__344_262) & (memory_controller_waitrequest == 1'd0)) & (main_344_350 == 1'd1))) begin
		main_shift64RightJammingexit9iii_395 = main_344_347;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %395 = phi i64 [ %270, %296 ], [ %270, %304 ], [ %270, %314 ], [ %361, %353 ], [ %364, %362 ], [ %347, %344 ]*/
	else if (((cur_state == LEGUP_F_main_BB__353_264) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_395 = main_353_361;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %395 = phi i64 [ %270, %296 ], [ %270, %304 ], [ %270, %314 ], [ %361, %353 ], [ %364, %362 ], [ %347, %344 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__362_265) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit9iii_395 = main_362_364;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %395 = phi i64 [ %270, %296 ], [ %270, %304 ], [ %270, %314 ], [ %361, %353 ], [ %364, %362 ], [ %347, %344 ]*/
	if ((((cur_state == LEGUP_F_main_BB__296_244) & (memory_controller_waitrequest == 1'd0)) & (main_296_301 == 1'd1))) begin
		main_shift64RightJammingexit9iii_395_reg <= main_shift64RightJammingexit9iii_395;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_395_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %395 = phi i64 [ %270, %296 ], [ %270, %304 ], [ %270, %314 ], [ %361, %353 ], [ %364, %362 ], [ %347, %344 ]*/
	if (((cur_state == LEGUP_F_main_BB__304_246) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_395_reg <= main_shift64RightJammingexit9iii_395;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_395_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %395 = phi i64 [ %270, %296 ], [ %270, %304 ], [ %270, %314 ], [ %361, %353 ], [ %364, %362 ], [ %347, %344 ]*/
	if (((cur_state == LEGUP_F_main_BB__314_247) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_395_reg <= main_shift64RightJammingexit9iii_395;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_395_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %395 = phi i64 [ %270, %296 ], [ %270, %304 ], [ %270, %314 ], [ %361, %353 ], [ %364, %362 ], [ %347, %344 ]*/
	if ((((cur_state == LEGUP_F_main_BB__344_262) & (memory_controller_waitrequest == 1'd0)) & (main_344_350 == 1'd1))) begin
		main_shift64RightJammingexit9iii_395_reg <= main_shift64RightJammingexit9iii_395;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_395_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %395 = phi i64 [ %270, %296 ], [ %270, %304 ], [ %270, %314 ], [ %361, %353 ], [ %364, %362 ], [ %347, %344 ]*/
	if (((cur_state == LEGUP_F_main_BB__353_264) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_395_reg <= main_shift64RightJammingexit9iii_395;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_395_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %395 = phi i64 [ %270, %296 ], [ %270, %304 ], [ %270, %314 ], [ %361, %353 ], [ %364, %362 ], [ %347, %344 ]*/
	if (((cur_state == LEGUP_F_main_BB__362_265) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_395_reg <= main_shift64RightJammingexit9iii_395;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %396 = phi i64 [ %299, %296 ], [ %313, %304 ], [ %316, %314 ], [ %272, %353 ], [ %272, %362 ], [ %272, %344 ]*/
	if ((((cur_state == LEGUP_F_main_BB__296_244) & (memory_controller_waitrequest == 1'd0)) & (main_296_301 == 1'd1))) begin
		main_shift64RightJammingexit9iii_396 = main_296_299;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %396 = phi i64 [ %299, %296 ], [ %313, %304 ], [ %316, %314 ], [ %272, %353 ], [ %272, %362 ], [ %272, %344 ]*/
	else if (((cur_state == LEGUP_F_main_BB__304_246) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_396 = main_304_313;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %396 = phi i64 [ %299, %296 ], [ %313, %304 ], [ %316, %314 ], [ %272, %353 ], [ %272, %362 ], [ %272, %344 ]*/
	else if (((cur_state == LEGUP_F_main_BB__314_247) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_396 = main_314_316;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %396 = phi i64 [ %299, %296 ], [ %313, %304 ], [ %316, %314 ], [ %272, %353 ], [ %272, %362 ], [ %272, %344 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__344_262) & (memory_controller_waitrequest == 1'd0)) & (main_344_350 == 1'd1))) begin
		main_shift64RightJammingexit9iii_396 = main_268_272_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %396 = phi i64 [ %299, %296 ], [ %313, %304 ], [ %316, %314 ], [ %272, %353 ], [ %272, %362 ], [ %272, %344 ]*/
	else if (((cur_state == LEGUP_F_main_BB__353_264) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_396 = main_268_272_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %396 = phi i64 [ %299, %296 ], [ %313, %304 ], [ %316, %314 ], [ %272, %353 ], [ %272, %362 ], [ %272, %344 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__362_265) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit9iii_396 = main_268_272_reg;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %396 = phi i64 [ %299, %296 ], [ %313, %304 ], [ %316, %314 ], [ %272, %353 ], [ %272, %362 ], [ %272, %344 ]*/
	if ((((cur_state == LEGUP_F_main_BB__296_244) & (memory_controller_waitrequest == 1'd0)) & (main_296_301 == 1'd1))) begin
		main_shift64RightJammingexit9iii_396_reg <= main_shift64RightJammingexit9iii_396;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_396_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %396 = phi i64 [ %299, %296 ], [ %313, %304 ], [ %316, %314 ], [ %272, %353 ], [ %272, %362 ], [ %272, %344 ]*/
	if (((cur_state == LEGUP_F_main_BB__304_246) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_396_reg <= main_shift64RightJammingexit9iii_396;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_396_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %396 = phi i64 [ %299, %296 ], [ %313, %304 ], [ %316, %314 ], [ %272, %353 ], [ %272, %362 ], [ %272, %344 ]*/
	if (((cur_state == LEGUP_F_main_BB__314_247) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_396_reg <= main_shift64RightJammingexit9iii_396;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_396_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %396 = phi i64 [ %299, %296 ], [ %313, %304 ], [ %316, %314 ], [ %272, %353 ], [ %272, %362 ], [ %272, %344 ]*/
	if ((((cur_state == LEGUP_F_main_BB__344_262) & (memory_controller_waitrequest == 1'd0)) & (main_344_350 == 1'd1))) begin
		main_shift64RightJammingexit9iii_396_reg <= main_shift64RightJammingexit9iii_396;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_396_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %396 = phi i64 [ %299, %296 ], [ %313, %304 ], [ %316, %314 ], [ %272, %353 ], [ %272, %362 ], [ %272, %344 ]*/
	if (((cur_state == LEGUP_F_main_BB__353_264) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_396_reg <= main_shift64RightJammingexit9iii_396;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_396_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %396 = phi i64 [ %299, %296 ], [ %313, %304 ], [ %316, %314 ], [ %272, %353 ], [ %272, %362 ], [ %272, %344 ]*/
	if (((cur_state == LEGUP_F_main_BB__362_265) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_396_reg <= main_shift64RightJammingexit9iii_396;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_396_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0.i11.i.i = phi i32 [ %264, %296 ], [ %264, %304 ], [ %264, %314 ], [ %266, %353 ], [ %266, %362 ], [ %266, %344 ]*/
	if ((((cur_state == LEGUP_F_main_BB__296_244) & (memory_controller_waitrequest == 1'd0)) & (main_296_301 == 1'd1))) begin
		main_shift64RightJammingexit9iii_zExp0i11ii = main_float64_divexiti_264_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0.i11.i.i = phi i32 [ %264, %296 ], [ %264, %304 ], [ %264, %314 ], [ %266, %353 ], [ %266, %362 ], [ %266, %344 ]*/
	else if (((cur_state == LEGUP_F_main_BB__304_246) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_zExp0i11ii = main_float64_divexiti_264_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0.i11.i.i = phi i32 [ %264, %296 ], [ %264, %304 ], [ %264, %314 ], [ %266, %353 ], [ %266, %362 ], [ %266, %344 ]*/
	else if (((cur_state == LEGUP_F_main_BB__314_247) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_zExp0i11ii = main_float64_divexiti_264_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0.i11.i.i = phi i32 [ %264, %296 ], [ %264, %304 ], [ %264, %314 ], [ %266, %353 ], [ %266, %362 ], [ %266, %344 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__344_262) & (memory_controller_waitrequest == 1'd0)) & (main_344_350 == 1'd1))) begin
		main_shift64RightJammingexit9iii_zExp0i11ii = main_float64_divexiti_266_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0.i11.i.i = phi i32 [ %264, %296 ], [ %264, %304 ], [ %264, %314 ], [ %266, %353 ], [ %266, %362 ], [ %266, %344 ]*/
	else if (((cur_state == LEGUP_F_main_BB__353_264) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_zExp0i11ii = main_float64_divexiti_266_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0.i11.i.i = phi i32 [ %264, %296 ], [ %264, %304 ], [ %264, %314 ], [ %266, %353 ], [ %266, %362 ], [ %266, %344 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__362_265) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit9iii_zExp0i11ii = main_float64_divexiti_266_reg;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0.i11.i.i = phi i32 [ %264, %296 ], [ %264, %304 ], [ %264, %314 ], [ %266, %353 ], [ %266, %362 ], [ %266, %344 ]*/
	if ((((cur_state == LEGUP_F_main_BB__296_244) & (memory_controller_waitrequest == 1'd0)) & (main_296_301 == 1'd1))) begin
		main_shift64RightJammingexit9iii_zExp0i11ii_reg <= main_shift64RightJammingexit9iii_zExp0i11ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_zExp0i11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_zExp0i11ii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0.i11.i.i = phi i32 [ %264, %296 ], [ %264, %304 ], [ %264, %314 ], [ %266, %353 ], [ %266, %362 ], [ %266, %344 ]*/
	if (((cur_state == LEGUP_F_main_BB__304_246) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_zExp0i11ii_reg <= main_shift64RightJammingexit9iii_zExp0i11ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_zExp0i11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_zExp0i11ii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0.i11.i.i = phi i32 [ %264, %296 ], [ %264, %304 ], [ %264, %314 ], [ %266, %353 ], [ %266, %362 ], [ %266, %344 ]*/
	if (((cur_state == LEGUP_F_main_BB__314_247) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_zExp0i11ii_reg <= main_shift64RightJammingexit9iii_zExp0i11ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_zExp0i11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_zExp0i11ii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0.i11.i.i = phi i32 [ %264, %296 ], [ %264, %304 ], [ %264, %314 ], [ %266, %353 ], [ %266, %362 ], [ %266, %344 ]*/
	if ((((cur_state == LEGUP_F_main_BB__344_262) & (memory_controller_waitrequest == 1'd0)) & (main_344_350 == 1'd1))) begin
		main_shift64RightJammingexit9iii_zExp0i11ii_reg <= main_shift64RightJammingexit9iii_zExp0i11ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_zExp0i11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_zExp0i11ii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0.i11.i.i = phi i32 [ %264, %296 ], [ %264, %304 ], [ %264, %314 ], [ %266, %353 ], [ %266, %362 ], [ %266, %344 ]*/
	if (((cur_state == LEGUP_F_main_BB__353_264) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_zExp0i11ii_reg <= main_shift64RightJammingexit9iii_zExp0i11ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_zExp0i11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_zExp0i11ii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0.i11.i.i = phi i32 [ %264, %296 ], [ %264, %304 ], [ %264, %314 ], [ %266, %353 ], [ %266, %362 ], [ %266, %344 ]*/
	if (((cur_state == LEGUP_F_main_BB__362_265) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9iii_zExp0i11ii_reg <= main_shift64RightJammingexit9iii_zExp0i11ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_zExp0i11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_zExp0i11ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %397 = or i64 %395, 2305843009213693952*/
		main_shift64RightJammingexit9iii_397 = (main_shift64RightJammingexit9iii_395_reg | 64'd2305843009213693952);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %397 = or i64 %395, 2305843009213693952*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9iii_280)) begin
		main_shift64RightJammingexit9iii_397_reg <= main_shift64RightJammingexit9iii_397;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_397_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %398 = add i64 %397, %396*/
		main_shift64RightJammingexit9iii_398 = (main_shift64RightJammingexit9iii_397 + main_shift64RightJammingexit9iii_396_reg);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %398 = add i64 %397, %396*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9iii_280)) begin
		main_shift64RightJammingexit9iii_398_reg <= main_shift64RightJammingexit9iii_398;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_398_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %399 = shl i64 %398, 1*/
		main_shift64RightJammingexit9iii_399 = (main_shift64RightJammingexit9iii_398 <<< (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %399 = shl i64 %398, 1*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9iii_280)) begin
		main_shift64RightJammingexit9iii_399_reg <= main_shift64RightJammingexit9iii_399;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %400 = icmp slt i64 %399, 0*/
		main_shift64RightJammingexit9iii_400 = ($signed(main_shift64RightJammingexit9iii_399) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %400 = icmp slt i64 %399, 0*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9iii_280)) begin
		main_shift64RightJammingexit9iii_400_reg <= main_shift64RightJammingexit9iii_400;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %not..i.i.i = xor i1 %400, true*/
		main_shift64RightJammingexit9iii_notiii = (main_shift64RightJammingexit9iii_400_reg ^ 1'd1);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %not..i.i.i = xor i1 %400, true*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9iii_281)) begin
		main_shift64RightJammingexit9iii_notiii_reg <= main_shift64RightJammingexit9iii_notiii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_notiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_notiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %401 = sext i1 %not..i.i.i to i32*/
		main_shift64RightJammingexit9iii_401 = $signed(main_shift64RightJammingexit9iii_notiii);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %401 = sext i1 %not..i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9iii_281)) begin
		main_shift64RightJammingexit9iii_401_reg <= main_shift64RightJammingexit9iii_401;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_401_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0..i.i.i = add nsw i32 %401, %zExp.0.i11.i.i*/
		main_shift64RightJammingexit9iii_zExp0iii = (main_shift64RightJammingexit9iii_401_reg + main_shift64RightJammingexit9iii_zExp0i11ii_reg);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %zExp.0..i.i.i = add nsw i32 %401, %zExp.0.i11.i.i*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9iii_282)) begin
		main_shift64RightJammingexit9iii_zExp0iii_reg <= main_shift64RightJammingexit9iii_zExp0iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_zExp0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_zExp0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %..i.i2.i = select i1 %400, i64 %398, i64 %399*/
		main_shift64RightJammingexit9iii_ii2i = (main_shift64RightJammingexit9iii_400 ? main_shift64RightJammingexit9iii_398 : main_shift64RightJammingexit9iii_399);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i.i*/
	/*   %..i.i2.i = select i1 %400, i64 %398, i64 %399*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9iii_280)) begin
		main_shift64RightJammingexit9iii_ii2i_reg <= main_shift64RightJammingexit9iii_ii2i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9iii_ii2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9iii_ii2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %402*/
	/*   %zExp.1.i.i.i = phi i32 [ %264, %392 ], [ %zExp.0..i.i.i, %shift64RightJamming.exit9.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__392_279) & (memory_controller_waitrequest == 1'd0))) begin
		main_402_zExp1iii = main_float64_divexiti_264_reg;
	end
	/* main: %402*/
	/*   %zExp.1.i.i.i = phi i32 [ %264, %392 ], [ %zExp.0..i.i.i, %shift64RightJamming.exit9.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9iii_282) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_402_zExp1iii = main_shift64RightJammingexit9iii_zExp0iii;
	end
end
always @(posedge clk) begin
	/* main: %402*/
	/*   %zExp.1.i.i.i = phi i32 [ %264, %392 ], [ %zExp.0..i.i.i, %shift64RightJamming.exit9.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__392_279) & (memory_controller_waitrequest == 1'd0))) begin
		main_402_zExp1iii_reg <= main_402_zExp1iii;
		if (start == 1'b0 && ^(main_402_zExp1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_402_zExp1iii_reg"); $finish; end
	end
	/* main: %402*/
	/*   %zExp.1.i.i.i = phi i32 [ %264, %392 ], [ %zExp.0..i.i.i, %shift64RightJamming.exit9.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9iii_282) & (memory_controller_waitrequest == 1'd0))) begin
		main_402_zExp1iii_reg <= main_402_zExp1iii;
		if (start == 1'b0 && ^(main_402_zExp1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_402_zExp1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %402*/
	/*   %zSig.0.i12.i.i = phi i64 [ %394, %392 ], [ %..i.i2.i, %shift64RightJamming.exit9.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__392_279) & (memory_controller_waitrequest == 1'd0))) begin
		main_402_zSig0i12ii = main_392_394;
	end
	/* main: %402*/
	/*   %zSig.0.i12.i.i = phi i64 [ %394, %392 ], [ %..i.i2.i, %shift64RightJamming.exit9.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9iii_282) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_402_zSig0i12ii = main_shift64RightJammingexit9iii_ii2i_reg;
	end
end
always @(posedge clk) begin
	/* main: %402*/
	/*   %zSig.0.i12.i.i = phi i64 [ %394, %392 ], [ %..i.i2.i, %shift64RightJamming.exit9.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__392_279) & (memory_controller_waitrequest == 1'd0))) begin
		main_402_zSig0i12ii_reg <= main_402_zSig0i12ii;
		if (start == 1'b0 && ^(main_402_zSig0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_402_zSig0i12ii_reg"); $finish; end
	end
	/* main: %402*/
	/*   %zSig.0.i12.i.i = phi i64 [ %394, %392 ], [ %..i.i2.i, %shift64RightJamming.exit9.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9iii_282) & (memory_controller_waitrequest == 1'd0))) begin
		main_402_zSig0i12ii_reg <= main_402_zSig0i12ii;
		if (start == 1'b0 && ^(main_402_zSig0i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_402_zSig0i12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
		main_402_403 = roundAndPackFloat64_return_val_reg;
end
always @(posedge clk) begin
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		main_402_403_reg <= main_402_403;
		if (start == 1'b0 && ^(main_402_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_402_403_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %405 = shl i64 %app.0.i, 10*/
		main_404_405 = (main_5_app0i_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %405 = shl i64 %app.0.i, 10*/
	if ((cur_state == LEGUP_F_main_BB__404_286)) begin
		main_404_405_reg <= main_404_405;
		if (start == 1'b0 && ^(main_404_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_405_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %406 = and i64 %405, 4611686018427386880*/
		main_404_406 = (main_404_405 & 64'd4611686018427386880);
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %406 = and i64 %405, 4611686018427386880*/
	if ((cur_state == LEGUP_F_main_BB__404_286)) begin
		main_404_406_reg <= main_404_406;
		if (start == 1'b0 && ^(main_404_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_406_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %407 = shl i64 %.0.i1.i, 10*/
		main_404_407 = (main_float64_divexiti_0i1i_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %407 = shl i64 %.0.i1.i, 10*/
	if ((cur_state == LEGUP_F_main_BB__404_286)) begin
		main_404_407_reg <= main_404_407;
		if (start == 1'b0 && ^(main_404_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_407_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %408 = and i64 %407, 4611686018427386880*/
		main_404_408 = (main_404_407 & 64'd4611686018427386880);
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %408 = and i64 %407, 4611686018427386880*/
	if ((cur_state == LEGUP_F_main_BB__404_286)) begin
		main_404_408_reg <= main_404_408;
		if (start == 1'b0 && ^(main_404_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_408_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %409 = icmp sgt i32 %267, 0*/
		main_404_409 = ($signed(main_float64_divexiti_267_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %409 = icmp sgt i32 %267, 0*/
	if ((cur_state == LEGUP_F_main_BB__404_286)) begin
		main_404_409_reg <= main_404_409;
		if (start == 1'b0 && ^(main_404_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_409_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %410*/
	/*   %411 = icmp slt i32 %267, 0*/
		main_410_411 = ($signed(main_float64_divexiti_267_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %410*/
	/*   %411 = icmp slt i32 %267, 0*/
	if ((cur_state == LEGUP_F_main_BB__410_287)) begin
		main_410_411_reg <= main_410_411;
		if (start == 1'b0 && ^(main_410_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_410_411_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %413*/
	/*   %414 = or i64 %408, %406*/
		main_413_414 = (main_404_408_reg | main_404_406_reg);
end
always @(posedge clk) begin
	/* main: %413*/
	/*   %414 = or i64 %408, %406*/
	if ((cur_state == LEGUP_F_main_BB__413_289)) begin
		main_413_414_reg <= main_413_414;
		if (start == 1'b0 && ^(main_413_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_413_414_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %413*/
	/*   %415 = icmp eq i64 %414, 0*/
		main_413_415 = (main_413_414 == 64'd0);
end
always @(posedge clk) begin
	/* main: %413*/
	/*   %415 = icmp eq i64 %414, 0*/
	if ((cur_state == LEGUP_F_main_BB__413_289)) begin
		main_413_415_reg <= main_413_415;
		if (start == 1'b0 && ^(main_413_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_413_415_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %416*/
	/*   %417 = and i64 %app.0.i, 9221120237041090560*/
		main_416_417 = (main_5_app0i_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %416*/
	/*   %417 = and i64 %app.0.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__416_290)) begin
		main_416_417_reg <= main_416_417;
		if (start == 1'b0 && ^(main_416_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_416_417_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %416*/
	/*   %418 = icmp eq i64 %417, 9218868437227405312*/
		main_416_418 = (main_416_417 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %416*/
	/*   %418 = icmp eq i64 %417, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__416_290)) begin
		main_416_418_reg <= main_416_418;
		if (start == 1'b0 && ^(main_416_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_416_418_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %419*/
	/*   %420 = and i64 %app.0.i, 2251799813685247*/
		main_419_420 = (main_5_app0i_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %419*/
	/*   %420 = and i64 %app.0.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__419_291)) begin
		main_419_420_reg <= main_419_420;
		if (start == 1'b0 && ^(main_419_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_419_420_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %419*/
	/*   %421 = icmp ne i64 %420, 0*/
		main_419_421 = (main_419_420 != 64'd0);
end
always @(posedge clk) begin
	/* main: %419*/
	/*   %421 = icmp ne i64 %420, 0*/
	if ((cur_state == LEGUP_F_main_BB__419_291)) begin
		main_419_421_reg <= main_419_421;
		if (start == 1'b0 && ^(main_419_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_419_421_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i.i*/
	/*   %422 = phi i1 [ false, %416 ], [ %421, %419 ]*/
	if ((((cur_state == LEGUP_F_main_BB__416_290) & (memory_controller_waitrequest == 1'd0)) & (main_416_418 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i11iii_422 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i11.i.i.i*/
	/*   %422 = phi i1 [ false, %416 ], [ %421, %419 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__419_291) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i11iii_422 = main_419_421;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i.i*/
	/*   %422 = phi i1 [ false, %416 ], [ %421, %419 ]*/
	if ((((cur_state == LEGUP_F_main_BB__416_290) & (memory_controller_waitrequest == 1'd0)) & (main_416_418 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i11iii_422_reg <= main_float64_is_signaling_nanexit1i11iii_422;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11iii_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11iii_422_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i11.i.i.i*/
	/*   %422 = phi i1 [ false, %416 ], [ %421, %419 ]*/
	if (((cur_state == LEGUP_F_main_BB__419_291) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i11iii_422_reg <= main_float64_is_signaling_nanexit1i11iii_422;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11iii_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11iii_422_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i.i*/
	/*   %423 = trunc i64 %.0.i1.i to i63*/
		main_float64_is_signaling_nanexit1i11iii_423 = main_float64_divexiti_0i1i_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i.i*/
	/*   %423 = trunc i64 %.0.i1.i to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11iii_292)) begin
		main_float64_is_signaling_nanexit1i11iii_423_reg <= main_float64_is_signaling_nanexit1i11iii_423;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11iii_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11iii_423_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i.i*/
	/*   %424 = icmp ugt i63 %423, -4503599627370496*/
		main_float64_is_signaling_nanexit1i11iii_424 = (main_float64_is_signaling_nanexit1i11iii_423 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i.i*/
	/*   %424 = icmp ugt i63 %423, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11iii_292)) begin
		main_float64_is_signaling_nanexit1i11iii_424_reg <= main_float64_is_signaling_nanexit1i11iii_424;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11iii_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11iii_424_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i.i*/
	/*   %425 = and i64 %.0.i1.i, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i11iii_425 = (main_float64_divexiti_0i1i_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i.i*/
	/*   %425 = and i64 %.0.i1.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11iii_292)) begin
		main_float64_is_signaling_nanexit1i11iii_425_reg <= main_float64_is_signaling_nanexit1i11iii_425;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11iii_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11iii_425_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i.i*/
	/*   %426 = icmp eq i64 %425, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i11iii_426 = (main_float64_is_signaling_nanexit1i11iii_425 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i.i*/
	/*   %426 = icmp eq i64 %425, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11iii_292)) begin
		main_float64_is_signaling_nanexit1i11iii_426_reg <= main_float64_is_signaling_nanexit1i11iii_426;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11iii_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11iii_426_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %427*/
	/*   %428 = and i64 %.0.i1.i, 2251799813685247*/
		main_427_428 = (main_float64_divexiti_0i1i_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %427*/
	/*   %428 = and i64 %.0.i1.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__427_293)) begin
		main_427_428_reg <= main_427_428;
		if (start == 1'b0 && ^(main_427_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_427_428_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %427*/
	/*   %429 = icmp ne i64 %428, 0*/
		main_427_429 = (main_427_428 != 64'd0);
end
always @(posedge clk) begin
	/* main: %427*/
	/*   %429 = icmp ne i64 %428, 0*/
	if ((cur_state == LEGUP_F_main_BB__427_293)) begin
		main_427_429_reg <= main_427_429;
		if (start == 1'b0 && ^(main_427_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_427_429_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i12.i.i.i*/
	/*   %430 = phi i1 [ false, %float64_is_signaling_nan.exit1.i11.i.i.i ], [ %429, %427 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11iii_292) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i11iii_426 == 1'd0))) begin
		main_float64_is_signaling_nanexiti12iii_430 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i12.i.i.i*/
	/*   %430 = phi i1 [ false, %float64_is_signaling_nan.exit1.i11.i.i.i ], [ %429, %427 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__427_293) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti12iii_430 = main_427_429;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i12.i.i.i*/
	/*   %430 = phi i1 [ false, %float64_is_signaling_nan.exit1.i11.i.i.i ], [ %429, %427 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11iii_292) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i11iii_426 == 1'd0))) begin
		main_float64_is_signaling_nanexiti12iii_430_reg <= main_float64_is_signaling_nanexiti12iii_430;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12iii_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12iii_430_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i12.i.i.i*/
	/*   %430 = phi i1 [ false, %float64_is_signaling_nan.exit1.i11.i.i.i ], [ %429, %427 ]*/
	if (((cur_state == LEGUP_F_main_BB__427_293) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti12iii_430_reg <= main_float64_is_signaling_nanexiti12iii_430;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12iii_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12iii_430_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i12.i.i.i*/
	/*   %431 = or i1 %422, %430*/
		main_float64_is_signaling_nanexiti12iii_431 = (main_float64_is_signaling_nanexit1i11iii_422_reg | main_float64_is_signaling_nanexiti12iii_430_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i12.i.i.i*/
	/*   %431 = or i1 %422, %430*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12iii_294)) begin
		main_float64_is_signaling_nanexiti12iii_431_reg <= main_float64_is_signaling_nanexiti12iii_431;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12iii_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12iii_431_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i13.i.i.i*/
	/*   %432 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadi13iii_432 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i13.i.i.i*/
	/*   %432 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13iii_297)) begin
		main_threadi13iii_432_reg <= main_threadi13iii_432;
		if (start == 1'b0 && ^(main_threadi13iii_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi13iii_432_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i13.i.i.i*/
	/*   %433 = or i32 %432, 16*/
		main_threadi13iii_433 = (main_threadi13iii_432 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i13.i.i.i*/
	/*   %433 = or i32 %432, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadi13iii_297)) begin
		main_threadi13iii_433_reg <= main_threadi13iii_433;
		if (start == 1'b0 && ^(main_threadi13iii_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi13iii_433_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit17.i.i.i*/
	/*   %.sink.i14.i.i.i = phi i1 [ %430, %.thread.i13.i.i.i ], [ %424, %float64_is_signaling_nan.exit.i12.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12iii_294) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti12iii_431 == 1'd0))) begin
		main_propagateFloat64NaNexit17iii_sinki14iii = main_float64_is_signaling_nanexit1i11iii_424_reg;
	end
	/* main: %propagateFloat64NaN.exit17.i.i.i*/
	/*   %.sink.i14.i.i.i = phi i1 [ %430, %.thread.i13.i.i.i ], [ %424, %float64_is_signaling_nan.exit.i12.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadi13iii_298) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexit17iii_sinki14iii = main_float64_is_signaling_nanexiti12iii_430_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit17.i.i.i*/
	/*   %.sink.i14.i.i.i = phi i1 [ %430, %.thread.i13.i.i.i ], [ %424, %float64_is_signaling_nan.exit.i12.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12iii_294) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti12iii_431 == 1'd0))) begin
		main_propagateFloat64NaNexit17iii_sinki14iii_reg <= main_propagateFloat64NaNexit17iii_sinki14iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit17iii_sinki14iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit17iii_sinki14iii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit17.i.i.i*/
	/*   %.sink.i14.i.i.i = phi i1 [ %430, %.thread.i13.i.i.i ], [ %424, %float64_is_signaling_nan.exit.i12.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi13iii_298) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexit17iii_sinki14iii_reg <= main_propagateFloat64NaNexit17iii_sinki14iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit17iii_sinki14iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit17iii_sinki14iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit17.i.i.i*/
	/*   %.mux2.v.i15.i.i.i = select i1 %.sink.i14.i.i.i, i64 %.0.i1.i, i64 %app.0.i*/
		main_propagateFloat64NaNexit17iii_mux2vi15iii = (main_propagateFloat64NaNexit17iii_sinki14iii_reg ? main_float64_divexiti_0i1i_reg : main_5_app0i_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit17.i.i.i*/
	/*   %.mux2.v.i15.i.i.i = select i1 %.sink.i14.i.i.i, i64 %.0.i1.i, i64 %app.0.i*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit17iii_299)) begin
		main_propagateFloat64NaNexit17iii_mux2vi15iii_reg <= main_propagateFloat64NaNexit17iii_mux2vi15iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit17iii_mux2vi15iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit17iii_mux2vi15iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit17.i.i.i*/
	/*   %.mux2.i16.i.i.i = or i64 %.mux2.v.i15.i.i.i, 2251799813685248*/
		main_propagateFloat64NaNexit17iii_mux2i16iii = (main_propagateFloat64NaNexit17iii_mux2vi15iii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit17.i.i.i*/
	/*   %.mux2.i16.i.i.i = or i64 %.mux2.v.i15.i.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit17iii_299)) begin
		main_propagateFloat64NaNexit17iii_mux2i16iii_reg <= main_propagateFloat64NaNexit17iii_mux2i16iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit17iii_mux2i16iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit17iii_mux2i16iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %434*/
	/*   %435 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_434_435 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %434*/
	/*   %435 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__434_302)) begin
		main_434_435_reg <= main_434_435;
		if (start == 1'b0 && ^(main_434_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_434_435_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %434*/
	/*   %436 = or i32 %435, 16*/
		main_434_436 = (main_434_435 | 32'd16);
end
always @(posedge clk) begin
	/* main: %434*/
	/*   %436 = or i32 %435, 16*/
	if ((cur_state == LEGUP_F_main_BB__434_302)) begin
		main_434_436_reg <= main_434_436;
		if (start == 1'b0 && ^(main_434_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_434_436_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %438*/
	/*   %aExp.0.i.i.i = phi i32 [ 1, %437 ], [ %264, %412 ]*/
	if (((((cur_state == LEGUP_F_main_BB__412_288) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexiti_264_reg != 32'd2047)) & (main_float64_divexiti_264_reg != 32'd0))) begin
		main_438_aExp0iii = main_float64_divexiti_264_reg;
	end
	/* main: %438*/
	/*   %aExp.0.i.i.i = phi i32 [ 1, %437 ], [ %264, %412 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__437_304) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_438_aExp0iii = 32'd1;
	end
end
always @(posedge clk) begin
	/* main: %438*/
	/*   %aExp.0.i.i.i = phi i32 [ 1, %437 ], [ %264, %412 ]*/
	if (((((cur_state == LEGUP_F_main_BB__412_288) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexiti_264_reg != 32'd2047)) & (main_float64_divexiti_264_reg != 32'd0))) begin
		main_438_aExp0iii_reg <= main_438_aExp0iii;
		if (start == 1'b0 && ^(main_438_aExp0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_438_aExp0iii_reg"); $finish; end
	end
	/* main: %438*/
	/*   %aExp.0.i.i.i = phi i32 [ 1, %437 ], [ %264, %412 ]*/
	if (((cur_state == LEGUP_F_main_BB__437_304) & (memory_controller_waitrequest == 1'd0))) begin
		main_438_aExp0iii_reg <= main_438_aExp0iii;
		if (start == 1'b0 && ^(main_438_aExp0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_438_aExp0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %438*/
	/*   %bExp.0.i.i.i = phi i32 [ 1, %437 ], [ %266, %412 ]*/
	if (((((cur_state == LEGUP_F_main_BB__412_288) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexiti_264_reg != 32'd2047)) & (main_float64_divexiti_264_reg != 32'd0))) begin
		main_438_bExp0iii = main_float64_divexiti_266_reg;
	end
	/* main: %438*/
	/*   %bExp.0.i.i.i = phi i32 [ 1, %437 ], [ %266, %412 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__437_304) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_438_bExp0iii = 32'd1;
	end
end
always @(posedge clk) begin
	/* main: %438*/
	/*   %bExp.0.i.i.i = phi i32 [ 1, %437 ], [ %266, %412 ]*/
	if (((((cur_state == LEGUP_F_main_BB__412_288) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexiti_264_reg != 32'd2047)) & (main_float64_divexiti_264_reg != 32'd0))) begin
		main_438_bExp0iii_reg <= main_438_bExp0iii;
		if (start == 1'b0 && ^(main_438_bExp0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_438_bExp0iii_reg"); $finish; end
	end
	/* main: %438*/
	/*   %bExp.0.i.i.i = phi i32 [ 1, %437 ], [ %266, %412 ]*/
	if (((cur_state == LEGUP_F_main_BB__437_304) & (memory_controller_waitrequest == 1'd0))) begin
		main_438_bExp0iii_reg <= main_438_bExp0iii;
		if (start == 1'b0 && ^(main_438_bExp0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_438_bExp0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %438*/
	/*   %439 = icmp ult i64 %408, %406*/
		main_438_439 = (main_404_408_reg < main_404_406_reg);
end
always @(posedge clk) begin
	/* main: %438*/
	/*   %439 = icmp ult i64 %408, %406*/
	if ((cur_state == LEGUP_F_main_BB__438_305)) begin
		main_438_439_reg <= main_438_439;
		if (start == 1'b0 && ^(main_438_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_438_439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %440*/
	/*   %441 = icmp ult i64 %406, %408*/
		main_440_441 = (main_404_406_reg < main_404_408_reg);
end
always @(posedge clk) begin
	/* main: %440*/
	/*   %441 = icmp ult i64 %406, %408*/
	if ((cur_state == LEGUP_F_main_BB__440_306)) begin
		main_440_441_reg <= main_440_441;
		if (start == 1'b0 && ^(main_440_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_441_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %442*/
	/*   %443 = icmp eq i32 %266, 2047*/
		main_442_443 = (main_float64_divexiti_266_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %442*/
	/*   %443 = icmp eq i32 %266, 2047*/
	if ((cur_state == LEGUP_F_main_BB__442_307)) begin
		main_442_443_reg <= main_442_443;
		if (start == 1'b0 && ^(main_442_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_442_443_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %444*/
	/*   %445 = icmp eq i64 %408, 0*/
		main_444_445 = (main_404_408_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %444*/
	/*   %445 = icmp eq i64 %408, 0*/
	if ((cur_state == LEGUP_F_main_BB__444_308)) begin
		main_444_445_reg <= main_444_445;
		if (start == 1'b0 && ^(main_444_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_444_445_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %446*/
	/*   %447 = and i64 %app.0.i, 9221120237041090560*/
		main_446_447 = (main_5_app0i_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %447 = and i64 %app.0.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__446_309)) begin
		main_446_447_reg <= main_446_447;
		if (start == 1'b0 && ^(main_446_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_446_447_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %446*/
	/*   %448 = icmp eq i64 %447, 9218868437227405312*/
		main_446_448 = (main_446_447 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %448 = icmp eq i64 %447, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__446_309)) begin
		main_446_448_reg <= main_446_448;
		if (start == 1'b0 && ^(main_446_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_446_448_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %449*/
	/*   %450 = and i64 %app.0.i, 2251799813685247*/
		main_449_450 = (main_5_app0i_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %449*/
	/*   %450 = and i64 %app.0.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__449_310)) begin
		main_449_450_reg <= main_449_450;
		if (start == 1'b0 && ^(main_449_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_449_450_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %449*/
	/*   %451 = icmp ne i64 %450, 0*/
		main_449_451 = (main_449_450 != 64'd0);
end
always @(posedge clk) begin
	/* main: %449*/
	/*   %451 = icmp ne i64 %450, 0*/
	if ((cur_state == LEGUP_F_main_BB__449_310)) begin
		main_449_451_reg <= main_449_451;
		if (start == 1'b0 && ^(main_449_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_449_451_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i.i*/
	/*   %452 = phi i1 [ false, %446 ], [ %451, %449 ]*/
	if ((((cur_state == LEGUP_F_main_BB__446_309) & (memory_controller_waitrequest == 1'd0)) & (main_446_448 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i4iii_452 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i4.i.i.i*/
	/*   %452 = phi i1 [ false, %446 ], [ %451, %449 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__449_310) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i4iii_452 = main_449_451;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i.i*/
	/*   %452 = phi i1 [ false, %446 ], [ %451, %449 ]*/
	if ((((cur_state == LEGUP_F_main_BB__446_309) & (memory_controller_waitrequest == 1'd0)) & (main_446_448 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i4iii_452_reg <= main_float64_is_signaling_nanexit1i4iii_452;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4iii_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4iii_452_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i4.i.i.i*/
	/*   %452 = phi i1 [ false, %446 ], [ %451, %449 ]*/
	if (((cur_state == LEGUP_F_main_BB__449_310) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i4iii_452_reg <= main_float64_is_signaling_nanexit1i4iii_452;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4iii_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4iii_452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i.i*/
	/*   %453 = trunc i64 %.0.i1.i to i63*/
		main_float64_is_signaling_nanexit1i4iii_453 = main_float64_divexiti_0i1i_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i.i*/
	/*   %453 = trunc i64 %.0.i1.i to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4iii_311)) begin
		main_float64_is_signaling_nanexit1i4iii_453_reg <= main_float64_is_signaling_nanexit1i4iii_453;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4iii_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4iii_453_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i.i*/
	/*   %454 = icmp ugt i63 %453, -4503599627370496*/
		main_float64_is_signaling_nanexit1i4iii_454 = (main_float64_is_signaling_nanexit1i4iii_453 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i.i*/
	/*   %454 = icmp ugt i63 %453, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4iii_311)) begin
		main_float64_is_signaling_nanexit1i4iii_454_reg <= main_float64_is_signaling_nanexit1i4iii_454;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4iii_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4iii_454_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i.i*/
	/*   %455 = and i64 %.0.i1.i, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i4iii_455 = (main_float64_divexiti_0i1i_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i.i*/
	/*   %455 = and i64 %.0.i1.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4iii_311)) begin
		main_float64_is_signaling_nanexit1i4iii_455_reg <= main_float64_is_signaling_nanexit1i4iii_455;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4iii_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4iii_455_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i.i*/
	/*   %456 = icmp eq i64 %455, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i4iii_456 = (main_float64_is_signaling_nanexit1i4iii_455 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i.i*/
	/*   %456 = icmp eq i64 %455, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4iii_311)) begin
		main_float64_is_signaling_nanexit1i4iii_456_reg <= main_float64_is_signaling_nanexit1i4iii_456;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4iii_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4iii_456_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %457*/
	/*   %458 = and i64 %.0.i1.i, 2251799813685247*/
		main_457_458 = (main_float64_divexiti_0i1i_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %457*/
	/*   %458 = and i64 %.0.i1.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__457_312)) begin
		main_457_458_reg <= main_457_458;
		if (start == 1'b0 && ^(main_457_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_457_458_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %457*/
	/*   %459 = icmp ne i64 %458, 0*/
		main_457_459 = (main_457_458 != 64'd0);
end
always @(posedge clk) begin
	/* main: %457*/
	/*   %459 = icmp ne i64 %458, 0*/
	if ((cur_state == LEGUP_F_main_BB__457_312)) begin
		main_457_459_reg <= main_457_459;
		if (start == 1'b0 && ^(main_457_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_457_459_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i5.i.i.i*/
	/*   %460 = phi i1 [ false, %float64_is_signaling_nan.exit1.i4.i.i.i ], [ %459, %457 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4iii_311) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i4iii_456 == 1'd0))) begin
		main_float64_is_signaling_nanexiti5iii_460 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i5.i.i.i*/
	/*   %460 = phi i1 [ false, %float64_is_signaling_nan.exit1.i4.i.i.i ], [ %459, %457 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__457_312) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti5iii_460 = main_457_459;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i5.i.i.i*/
	/*   %460 = phi i1 [ false, %float64_is_signaling_nan.exit1.i4.i.i.i ], [ %459, %457 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4iii_311) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i4iii_456 == 1'd0))) begin
		main_float64_is_signaling_nanexiti5iii_460_reg <= main_float64_is_signaling_nanexiti5iii_460;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti5iii_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti5iii_460_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i5.i.i.i*/
	/*   %460 = phi i1 [ false, %float64_is_signaling_nan.exit1.i4.i.i.i ], [ %459, %457 ]*/
	if (((cur_state == LEGUP_F_main_BB__457_312) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti5iii_460_reg <= main_float64_is_signaling_nanexiti5iii_460;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti5iii_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti5iii_460_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i5.i.i.i*/
	/*   %461 = or i1 %452, %460*/
		main_float64_is_signaling_nanexiti5iii_461 = (main_float64_is_signaling_nanexit1i4iii_452_reg | main_float64_is_signaling_nanexiti5iii_460_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i5.i.i.i*/
	/*   %461 = or i1 %452, %460*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti5iii_313)) begin
		main_float64_is_signaling_nanexiti5iii_461_reg <= main_float64_is_signaling_nanexiti5iii_461;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti5iii_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti5iii_461_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i6.i.i.i*/
	/*   %462 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadi6iii_462 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i6.i.i.i*/
	/*   %462 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6iii_316)) begin
		main_threadi6iii_462_reg <= main_threadi6iii_462;
		if (start == 1'b0 && ^(main_threadi6iii_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi6iii_462_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i6.i.i.i*/
	/*   %463 = or i32 %462, 16*/
		main_threadi6iii_463 = (main_threadi6iii_462 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i6.i.i.i*/
	/*   %463 = or i32 %462, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadi6iii_316)) begin
		main_threadi6iii_463_reg <= main_threadi6iii_463;
		if (start == 1'b0 && ^(main_threadi6iii_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi6iii_463_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit10.i.i.i*/
	/*   %.sink.i7.i.i.i = phi i1 [ %460, %.thread.i6.i.i.i ], [ %454, %float64_is_signaling_nan.exit.i5.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti5iii_313) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti5iii_461 == 1'd0))) begin
		main_propagateFloat64NaNexit10iii_sinki7iii = main_float64_is_signaling_nanexit1i4iii_454_reg;
	end
	/* main: %propagateFloat64NaN.exit10.i.i.i*/
	/*   %.sink.i7.i.i.i = phi i1 [ %460, %.thread.i6.i.i.i ], [ %454, %float64_is_signaling_nan.exit.i5.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadi6iii_317) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexit10iii_sinki7iii = main_float64_is_signaling_nanexiti5iii_460_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit10.i.i.i*/
	/*   %.sink.i7.i.i.i = phi i1 [ %460, %.thread.i6.i.i.i ], [ %454, %float64_is_signaling_nan.exit.i5.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti5iii_313) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti5iii_461 == 1'd0))) begin
		main_propagateFloat64NaNexit10iii_sinki7iii_reg <= main_propagateFloat64NaNexit10iii_sinki7iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit10iii_sinki7iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit10iii_sinki7iii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit10.i.i.i*/
	/*   %.sink.i7.i.i.i = phi i1 [ %460, %.thread.i6.i.i.i ], [ %454, %float64_is_signaling_nan.exit.i5.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi6iii_317) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexit10iii_sinki7iii_reg <= main_propagateFloat64NaNexit10iii_sinki7iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit10iii_sinki7iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit10iii_sinki7iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit10.i.i.i*/
	/*   %.mux2.v.i8.i.i.i = select i1 %.sink.i7.i.i.i, i64 %.0.i1.i, i64 %app.0.i*/
		main_propagateFloat64NaNexit10iii_mux2vi8iii = (main_propagateFloat64NaNexit10iii_sinki7iii_reg ? main_float64_divexiti_0i1i_reg : main_5_app0i_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit10.i.i.i*/
	/*   %.mux2.v.i8.i.i.i = select i1 %.sink.i7.i.i.i, i64 %.0.i1.i, i64 %app.0.i*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit10iii_318)) begin
		main_propagateFloat64NaNexit10iii_mux2vi8iii_reg <= main_propagateFloat64NaNexit10iii_mux2vi8iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit10iii_mux2vi8iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit10iii_mux2vi8iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit10.i.i.i*/
	/*   %.mux2.i9.i.i.i = or i64 %.mux2.v.i8.i.i.i, 2251799813685248*/
		main_propagateFloat64NaNexit10iii_mux2i9iii = (main_propagateFloat64NaNexit10iii_mux2vi8iii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit10.i.i.i*/
	/*   %.mux2.i9.i.i.i = or i64 %.mux2.v.i8.i.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit10iii_318)) begin
		main_propagateFloat64NaNexit10iii_mux2i9iii_reg <= main_propagateFloat64NaNexit10iii_mux2i9iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit10iii_mux2i9iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit10iii_mux2i9iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %464*/
	/*   %465 = xor i32 %259, 1*/
		main_464_465 = (main_float64_divexiti_259_reg ^ 32'd1);
end
always @(posedge clk) begin
	/* main: %464*/
	/*   %465 = xor i32 %259, 1*/
	if ((cur_state == LEGUP_F_main_BB__464_319)) begin
		main_464_465_reg <= main_464_465;
		if (start == 1'b0 && ^(main_464_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_464_465_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %464*/
	/*   %466 = zext i32 %465 to i64*/
		main_464_466 = main_464_465;
end
always @(posedge clk) begin
	/* main: %464*/
	/*   %466 = zext i32 %465 to i64*/
	if ((cur_state == LEGUP_F_main_BB__464_319)) begin
		main_464_466_reg <= main_464_466;
		if (start == 1'b0 && ^(main_464_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_464_466_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %464*/
	/*   %467 = shl nuw i64 %466, 63*/
		main_464_467 = (main_464_466 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %464*/
	/*   %467 = shl nuw i64 %466, 63*/
	if ((cur_state == LEGUP_F_main_BB__464_319)) begin
		main_464_467_reg <= main_464_467;
		if (start == 1'b0 && ^(main_464_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_464_467_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %464*/
	/*   %468 = or i64 %467, 9218868437227405312*/
		main_464_468 = (main_464_467 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %464*/
	/*   %468 = or i64 %467, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__464_319)) begin
		main_464_468_reg <= main_464_468;
		if (start == 1'b0 && ^(main_464_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_464_468_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %469*/
	/*   %470 = icmp eq i32 %264, 0*/
		main_469_470 = (main_float64_divexiti_264_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %469*/
	/*   %470 = icmp eq i32 %264, 0*/
	if ((cur_state == LEGUP_F_main_BB__469_320)) begin
		main_469_470_reg <= main_469_470;
		if (start == 1'b0 && ^(main_469_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_469_470_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %469*/
	/*   %471 = or i64 %406, 4611686018427387904*/
		main_469_471 = (main_404_406_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %469*/
	/*   %471 = or i64 %406, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__469_320)) begin
		main_469_471_reg <= main_469_471;
		if (start == 1'b0 && ^(main_469_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_469_471_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %469*/
	/*   %472 = select i1 %470, i64 %406, i64 %471*/
		main_469_472 = (main_469_470 ? main_404_406_reg : main_469_471);
end
always @(posedge clk) begin
	/* main: %469*/
	/*   %472 = select i1 %470, i64 %406, i64 %471*/
	if ((cur_state == LEGUP_F_main_BB__469_320)) begin
		main_469_472_reg <= main_469_472;
		if (start == 1'b0 && ^(main_469_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_469_472_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %469*/
	/*   %473 = zext i1 %470 to i32*/
		main_469_473 = main_469_470;
end
always @(posedge clk) begin
	/* main: %469*/
	/*   %473 = zext i1 %470 to i32*/
	if ((cur_state == LEGUP_F_main_BB__469_320)) begin
		main_469_473_reg <= main_469_473;
		if (start == 1'b0 && ^(main_469_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_469_473_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %469*/
	/*   %expDiff.0.i.i.i = add nsw i32 %267, %473*/
		main_469_expDiff0iii = (main_float64_divexiti_267_reg + main_469_473);
end
always @(posedge clk) begin
	/* main: %469*/
	/*   %expDiff.0.i.i.i = add nsw i32 %267, %473*/
	if ((cur_state == LEGUP_F_main_BB__469_320)) begin
		main_469_expDiff0iii_reg <= main_469_expDiff0iii;
		if (start == 1'b0 && ^(main_469_expDiff0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_469_expDiff0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %469*/
	/*   %474 = sub nsw i32 0, %expDiff.0.i.i.i*/
		main_469_474 = (32'd0 - main_469_expDiff0iii);
end
always @(posedge clk) begin
	/* main: %469*/
	/*   %474 = sub nsw i32 0, %expDiff.0.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__469_320)) begin
		main_469_474_reg <= main_469_474;
		if (start == 1'b0 && ^(main_469_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_469_474_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %469*/
	/*   %475 = icmp eq i32 %expDiff.0.i.i.i, 0*/
		main_469_475 = (main_469_expDiff0iii == 32'd0);
end
always @(posedge clk) begin
	/* main: %469*/
	/*   %475 = icmp eq i32 %expDiff.0.i.i.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__469_320)) begin
		main_469_475_reg <= main_469_475;
		if (start == 1'b0 && ^(main_469_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_469_475_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %476*/
	/*   %477 = icmp sgt i32 %expDiff.0.i.i.i, -64*/
		main_476_477 = ($signed(main_469_expDiff0iii_reg) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* main: %476*/
	/*   %477 = icmp sgt i32 %expDiff.0.i.i.i, -64*/
	if ((cur_state == LEGUP_F_main_BB__476_321)) begin
		main_476_477_reg <= main_476_477;
		if (start == 1'b0 && ^(main_476_477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_476_477_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %478*/
	/*   %479 = zext i32 %474 to i64*/
		main_478_479 = main_469_474_reg;
end
always @(posedge clk) begin
	/* main: %478*/
	/*   %479 = zext i32 %474 to i64*/
	if ((cur_state == LEGUP_F_main_BB__478_322)) begin
		main_478_479_reg <= main_478_479;
		if (start == 1'b0 && ^(main_478_479) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_478_479_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %478*/
	/*   %480 = lshr i64 %472, %479*/
		main_478_480 = (main_469_472_reg >>> (main_478_479 % 64'd64));
end
always @(posedge clk) begin
	/* main: %478*/
	/*   %480 = lshr i64 %472, %479*/
	if ((cur_state == LEGUP_F_main_BB__478_322)) begin
		main_478_480_reg <= main_478_480;
		if (start == 1'b0 && ^(main_478_480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_478_480_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %478*/
	/*   %481 = and i32 %expDiff.0.i.i.i, 63*/
		main_478_481 = (main_469_expDiff0iii_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %478*/
	/*   %481 = and i32 %expDiff.0.i.i.i, 63*/
	if ((cur_state == LEGUP_F_main_BB__478_322)) begin
		main_478_481_reg <= main_478_481;
		if (start == 1'b0 && ^(main_478_481) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_478_481_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %478*/
	/*   %482 = zext i32 %481 to i64*/
		main_478_482 = main_478_481;
end
always @(posedge clk) begin
	/* main: %478*/
	/*   %482 = zext i32 %481 to i64*/
	if ((cur_state == LEGUP_F_main_BB__478_322)) begin
		main_478_482_reg <= main_478_482;
		if (start == 1'b0 && ^(main_478_482) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_478_482_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %478*/
	/*   %483 = shl i64 %472, %482*/
		main_478_483 = (main_469_472_reg <<< (main_478_482 % 64'd64));
end
always @(posedge clk) begin
	/* main: %478*/
	/*   %483 = shl i64 %472, %482*/
	if ((cur_state == LEGUP_F_main_BB__478_322)) begin
		main_478_483_reg <= main_478_483;
		if (start == 1'b0 && ^(main_478_483) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_478_483_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %478*/
	/*   %484 = icmp ne i64 %483, 0*/
		main_478_484 = (main_478_483 != 64'd0);
end
always @(posedge clk) begin
	/* main: %478*/
	/*   %484 = icmp ne i64 %483, 0*/
	if ((cur_state == LEGUP_F_main_BB__478_322)) begin
		main_478_484_reg <= main_478_484;
		if (start == 1'b0 && ^(main_478_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_478_484_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %478*/
	/*   %485 = zext i1 %484 to i64*/
		main_478_485 = main_478_484;
end
always @(posedge clk) begin
	/* main: %478*/
	/*   %485 = zext i1 %484 to i64*/
	if ((cur_state == LEGUP_F_main_BB__478_322)) begin
		main_478_485_reg <= main_478_485;
		if (start == 1'b0 && ^(main_478_485) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_478_485_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %478*/
	/*   %486 = or i64 %485, %480*/
		main_478_486 = (main_478_485 | main_478_480);
end
always @(posedge clk) begin
	/* main: %478*/
	/*   %486 = or i64 %485, %480*/
	if ((cur_state == LEGUP_F_main_BB__478_322)) begin
		main_478_486_reg <= main_478_486;
		if (start == 1'b0 && ^(main_478_486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_478_486_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %487*/
	/*   %488 = icmp ne i64 %472, 0*/
		main_487_488 = (main_469_472_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %487*/
	/*   %488 = icmp ne i64 %472, 0*/
	if ((cur_state == LEGUP_F_main_BB__487_323)) begin
		main_487_488_reg <= main_487_488;
		if (start == 1'b0 && ^(main_487_488) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_487_488_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %487*/
	/*   %489 = zext i1 %488 to i64*/
		main_487_489 = main_487_488;
end
always @(posedge clk) begin
	/* main: %487*/
	/*   %489 = zext i1 %488 to i64*/
	if ((cur_state == LEGUP_F_main_BB__487_323)) begin
		main_487_489_reg <= main_487_489;
		if (start == 1'b0 && ^(main_487_489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_487_489_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit3.i.i.i*/
	/*   %z.0.i2.i.i.i = phi i64 [ %486, %478 ], [ %489, %487 ], [ %472, %469 ]*/
	if ((((cur_state == LEGUP_F_main_BB__469_320) & (memory_controller_waitrequest == 1'd0)) & (main_469_475 == 1'd1))) begin
		main_shift64RightJammingexit3iii_z0i2iii = main_469_472;
	end
	/* main: %shift64RightJamming.exit3.i.i.i*/
	/*   %z.0.i2.i.i.i = phi i64 [ %486, %478 ], [ %489, %487 ], [ %472, %469 ]*/
	else if (((cur_state == LEGUP_F_main_BB__478_322) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3iii_z0i2iii = main_478_486;
	end
	/* main: %shift64RightJamming.exit3.i.i.i*/
	/*   %z.0.i2.i.i.i = phi i64 [ %486, %478 ], [ %489, %487 ], [ %472, %469 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__487_323) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit3iii_z0i2iii = main_487_489;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit3.i.i.i*/
	/*   %z.0.i2.i.i.i = phi i64 [ %486, %478 ], [ %489, %487 ], [ %472, %469 ]*/
	if ((((cur_state == LEGUP_F_main_BB__469_320) & (memory_controller_waitrequest == 1'd0)) & (main_469_475 == 1'd1))) begin
		main_shift64RightJammingexit3iii_z0i2iii_reg <= main_shift64RightJammingexit3iii_z0i2iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3iii_z0i2iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3iii_z0i2iii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit3.i.i.i*/
	/*   %z.0.i2.i.i.i = phi i64 [ %486, %478 ], [ %489, %487 ], [ %472, %469 ]*/
	if (((cur_state == LEGUP_F_main_BB__478_322) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3iii_z0i2iii_reg <= main_shift64RightJammingexit3iii_z0i2iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3iii_z0i2iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3iii_z0i2iii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit3.i.i.i*/
	/*   %z.0.i2.i.i.i = phi i64 [ %486, %478 ], [ %489, %487 ], [ %472, %469 ]*/
	if (((cur_state == LEGUP_F_main_BB__487_323) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3iii_z0i2iii_reg <= main_shift64RightJammingexit3iii_z0i2iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3iii_z0i2iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3iii_z0i2iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit3.i.i.i*/
	/*   %490 = or i64 %408, 4611686018427387904*/
		main_shift64RightJammingexit3iii_490 = (main_404_408_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit3.i.i.i*/
	/*   %490 = or i64 %408, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3iii_324)) begin
		main_shift64RightJammingexit3iii_490_reg <= main_shift64RightJammingexit3iii_490;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3iii_490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3iii_490_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %491*/
	/*   %492 = phi i64 [ %z.0.i2.i.i.i, %shift64RightJamming.exit3.i.i.i ], [ %406, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__440_306) & (memory_controller_waitrequest == 1'd0)) & (main_440_441 == 1'd1))) begin
		main_491_492 = main_404_406_reg;
	end
	/* main: %491*/
	/*   %492 = phi i64 [ %z.0.i2.i.i.i, %shift64RightJamming.exit3.i.i.i ], [ %406, %440 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3iii_324) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_491_492 = main_shift64RightJammingexit3iii_z0i2iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %491*/
	/*   %492 = phi i64 [ %z.0.i2.i.i.i, %shift64RightJamming.exit3.i.i.i ], [ %406, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__440_306) & (memory_controller_waitrequest == 1'd0)) & (main_440_441 == 1'd1))) begin
		main_491_492_reg <= main_491_492;
		if (start == 1'b0 && ^(main_491_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_492_reg"); $finish; end
	end
	/* main: %491*/
	/*   %492 = phi i64 [ %z.0.i2.i.i.i, %shift64RightJamming.exit3.i.i.i ], [ %406, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3iii_324) & (memory_controller_waitrequest == 1'd0))) begin
		main_491_492_reg <= main_491_492;
		if (start == 1'b0 && ^(main_491_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_492_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %491*/
	/*   %493 = phi i64 [ %490, %shift64RightJamming.exit3.i.i.i ], [ %408, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__440_306) & (memory_controller_waitrequest == 1'd0)) & (main_440_441 == 1'd1))) begin
		main_491_493 = main_404_408_reg;
	end
	/* main: %491*/
	/*   %493 = phi i64 [ %490, %shift64RightJamming.exit3.i.i.i ], [ %408, %440 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3iii_324) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_491_493 = main_shift64RightJammingexit3iii_490;
	end
end
always @(posedge clk) begin
	/* main: %491*/
	/*   %493 = phi i64 [ %490, %shift64RightJamming.exit3.i.i.i ], [ %408, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__440_306) & (memory_controller_waitrequest == 1'd0)) & (main_440_441 == 1'd1))) begin
		main_491_493_reg <= main_491_493;
		if (start == 1'b0 && ^(main_491_493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_493_reg"); $finish; end
	end
	/* main: %491*/
	/*   %493 = phi i64 [ %490, %shift64RightJamming.exit3.i.i.i ], [ %408, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3iii_324) & (memory_controller_waitrequest == 1'd0))) begin
		main_491_493_reg <= main_491_493;
		if (start == 1'b0 && ^(main_491_493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_493_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %491*/
	/*   %bExp.1.i.i.i = phi i32 [ %266, %shift64RightJamming.exit3.i.i.i ], [ %bExp.0.i.i.i, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__440_306) & (memory_controller_waitrequest == 1'd0)) & (main_440_441 == 1'd1))) begin
		main_491_bExp1iii = main_438_bExp0iii_reg;
	end
	/* main: %491*/
	/*   %bExp.1.i.i.i = phi i32 [ %266, %shift64RightJamming.exit3.i.i.i ], [ %bExp.0.i.i.i, %440 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3iii_324) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_491_bExp1iii = main_float64_divexiti_266_reg;
	end
end
always @(posedge clk) begin
	/* main: %491*/
	/*   %bExp.1.i.i.i = phi i32 [ %266, %shift64RightJamming.exit3.i.i.i ], [ %bExp.0.i.i.i, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__440_306) & (memory_controller_waitrequest == 1'd0)) & (main_440_441 == 1'd1))) begin
		main_491_bExp1iii_reg <= main_491_bExp1iii;
		if (start == 1'b0 && ^(main_491_bExp1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_bExp1iii_reg"); $finish; end
	end
	/* main: %491*/
	/*   %bExp.1.i.i.i = phi i32 [ %266, %shift64RightJamming.exit3.i.i.i ], [ %bExp.0.i.i.i, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3iii_324) & (memory_controller_waitrequest == 1'd0))) begin
		main_491_bExp1iii_reg <= main_491_bExp1iii;
		if (start == 1'b0 && ^(main_491_bExp1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_bExp1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %491*/
	/*   %494 = sub i64 %493, %492*/
		main_491_494 = (main_491_493_reg - main_491_492_reg);
end
always @(posedge clk) begin
	/* main: %491*/
	/*   %494 = sub i64 %493, %492*/
	if ((cur_state == LEGUP_F_main_BB__491_325)) begin
		main_491_494_reg <= main_491_494;
		if (start == 1'b0 && ^(main_491_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_494_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %491*/
	/*   %495 = xor i32 %259, 1*/
		main_491_495 = (main_float64_divexiti_259_reg ^ 32'd1);
end
always @(posedge clk) begin
	/* main: %491*/
	/*   %495 = xor i32 %259, 1*/
	if ((cur_state == LEGUP_F_main_BB__491_325)) begin
		main_491_495_reg <= main_491_495;
		if (start == 1'b0 && ^(main_491_495) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_495_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %496*/
	/*   %497 = icmp eq i32 %264, 2047*/
		main_496_497 = (main_float64_divexiti_264_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %496*/
	/*   %497 = icmp eq i32 %264, 2047*/
	if ((cur_state == LEGUP_F_main_BB__496_326)) begin
		main_496_497_reg <= main_496_497;
		if (start == 1'b0 && ^(main_496_497) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_496_497_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %498*/
	/*   %499 = icmp eq i64 %406, 0*/
		main_498_499 = (main_404_406_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %498*/
	/*   %499 = icmp eq i64 %406, 0*/
	if ((cur_state == LEGUP_F_main_BB__498_327)) begin
		main_498_499_reg <= main_498_499;
		if (start == 1'b0 && ^(main_498_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_498_499_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %500*/
	/*   %501 = and i64 %app.0.i, 9221120237041090560*/
		main_500_501 = (main_5_app0i_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %500*/
	/*   %501 = and i64 %app.0.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__500_328)) begin
		main_500_501_reg <= main_500_501;
		if (start == 1'b0 && ^(main_500_501) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_500_501_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %500*/
	/*   %502 = icmp eq i64 %501, 9218868437227405312*/
		main_500_502 = (main_500_501 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %500*/
	/*   %502 = icmp eq i64 %501, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__500_328)) begin
		main_500_502_reg <= main_500_502;
		if (start == 1'b0 && ^(main_500_502) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_500_502_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %503*/
	/*   %504 = and i64 %app.0.i, 2251799813685247*/
		main_503_504 = (main_5_app0i_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %503*/
	/*   %504 = and i64 %app.0.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__503_329)) begin
		main_503_504_reg <= main_503_504;
		if (start == 1'b0 && ^(main_503_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_503_504_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %503*/
	/*   %505 = icmp ne i64 %504, 0*/
		main_503_505 = (main_503_504 != 64'd0);
end
always @(posedge clk) begin
	/* main: %503*/
	/*   %505 = icmp ne i64 %504, 0*/
	if ((cur_state == LEGUP_F_main_BB__503_329)) begin
		main_503_505_reg <= main_503_505;
		if (start == 1'b0 && ^(main_503_505) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_503_505_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i.i*/
	/*   %506 = phi i1 [ false, %500 ], [ %505, %503 ]*/
	if ((((cur_state == LEGUP_F_main_BB__500_328) & (memory_controller_waitrequest == 1'd0)) & (main_500_502 == 1'd0))) begin
		main_float64_is_signaling_nanexit1iiii_506 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i.i.i.i*/
	/*   %506 = phi i1 [ false, %500 ], [ %505, %503 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__503_329) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1iiii_506 = main_503_505;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i.i*/
	/*   %506 = phi i1 [ false, %500 ], [ %505, %503 ]*/
	if ((((cur_state == LEGUP_F_main_BB__500_328) & (memory_controller_waitrequest == 1'd0)) & (main_500_502 == 1'd0))) begin
		main_float64_is_signaling_nanexit1iiii_506_reg <= main_float64_is_signaling_nanexit1iiii_506;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iiii_506) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iiii_506_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i.i.i.i*/
	/*   %506 = phi i1 [ false, %500 ], [ %505, %503 ]*/
	if (((cur_state == LEGUP_F_main_BB__503_329) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1iiii_506_reg <= main_float64_is_signaling_nanexit1iiii_506;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iiii_506) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iiii_506_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i.i*/
	/*   %507 = trunc i64 %.0.i1.i to i63*/
		main_float64_is_signaling_nanexit1iiii_507 = main_float64_divexiti_0i1i_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i.i*/
	/*   %507 = trunc i64 %.0.i1.i to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iiii_330)) begin
		main_float64_is_signaling_nanexit1iiii_507_reg <= main_float64_is_signaling_nanexit1iiii_507;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iiii_507) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iiii_507_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i.i*/
	/*   %508 = icmp ugt i63 %507, -4503599627370496*/
		main_float64_is_signaling_nanexit1iiii_508 = (main_float64_is_signaling_nanexit1iiii_507 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i.i*/
	/*   %508 = icmp ugt i63 %507, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iiii_330)) begin
		main_float64_is_signaling_nanexit1iiii_508_reg <= main_float64_is_signaling_nanexit1iiii_508;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iiii_508) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iiii_508_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i.i*/
	/*   %509 = and i64 %.0.i1.i, 9221120237041090560*/
		main_float64_is_signaling_nanexit1iiii_509 = (main_float64_divexiti_0i1i_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i.i*/
	/*   %509 = and i64 %.0.i1.i, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iiii_330)) begin
		main_float64_is_signaling_nanexit1iiii_509_reg <= main_float64_is_signaling_nanexit1iiii_509;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iiii_509) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iiii_509_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i.i*/
	/*   %510 = icmp eq i64 %509, 9218868437227405312*/
		main_float64_is_signaling_nanexit1iiii_510 = (main_float64_is_signaling_nanexit1iiii_509 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i.i*/
	/*   %510 = icmp eq i64 %509, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iiii_330)) begin
		main_float64_is_signaling_nanexit1iiii_510_reg <= main_float64_is_signaling_nanexit1iiii_510;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iiii_510) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iiii_510_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %511*/
	/*   %512 = and i64 %.0.i1.i, 2251799813685247*/
		main_511_512 = (main_float64_divexiti_0i1i_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %511*/
	/*   %512 = and i64 %.0.i1.i, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__511_331)) begin
		main_511_512_reg <= main_511_512;
		if (start == 1'b0 && ^(main_511_512) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_511_512_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %511*/
	/*   %513 = icmp ne i64 %512, 0*/
		main_511_513 = (main_511_512 != 64'd0);
end
always @(posedge clk) begin
	/* main: %511*/
	/*   %513 = icmp ne i64 %512, 0*/
	if ((cur_state == LEGUP_F_main_BB__511_331)) begin
		main_511_513_reg <= main_511_513;
		if (start == 1'b0 && ^(main_511_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_511_513_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i.i.i*/
	/*   %514 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i.i.i ], [ %513, %511 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iiii_330) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1iiii_510 == 1'd0))) begin
		main_float64_is_signaling_nanexitiiii_514 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i.i.i.i*/
	/*   %514 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i.i.i ], [ %513, %511 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__511_331) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexitiiii_514 = main_511_513;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i.i.i*/
	/*   %514 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i.i.i ], [ %513, %511 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iiii_330) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1iiii_510 == 1'd0))) begin
		main_float64_is_signaling_nanexitiiii_514_reg <= main_float64_is_signaling_nanexitiiii_514;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitiiii_514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitiiii_514_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i.i.i.i*/
	/*   %514 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i.i.i ], [ %513, %511 ]*/
	if (((cur_state == LEGUP_F_main_BB__511_331) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexitiiii_514_reg <= main_float64_is_signaling_nanexitiiii_514;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitiiii_514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitiiii_514_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i.i.i*/
	/*   %515 = or i1 %506, %514*/
		main_float64_is_signaling_nanexitiiii_515 = (main_float64_is_signaling_nanexit1iiii_506_reg | main_float64_is_signaling_nanexitiiii_514_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i.i.i*/
	/*   %515 = or i1 %506, %514*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitiiii_332)) begin
		main_float64_is_signaling_nanexitiiii_515_reg <= main_float64_is_signaling_nanexitiiii_515;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitiiii_515) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitiiii_515_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i.i.i*/
	/*   %516 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadiiii_516 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i.i.i.i*/
	/*   %516 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiiii_335)) begin
		main_threadiiii_516_reg <= main_threadiiii_516;
		if (start == 1'b0 && ^(main_threadiiii_516) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadiiii_516_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i.i.i*/
	/*   %517 = or i32 %516, 16*/
		main_threadiiii_517 = (main_threadiiii_516 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i.i.i.i*/
	/*   %517 = or i32 %516, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadiiii_335)) begin
		main_threadiiii_517_reg <= main_threadiiii_517;
		if (start == 1'b0 && ^(main_threadiiii_517) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadiiii_517_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i.i.i*/
	/*   %.sink.i.i.i.i = phi i1 [ %514, %.thread.i.i.i.i ], [ %508, %float64_is_signaling_nan.exit.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitiiii_332) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexitiiii_515 == 1'd0))) begin
		main_propagateFloat64NaNexitiii_sinkiiii = main_float64_is_signaling_nanexit1iiii_508_reg;
	end
	/* main: %propagateFloat64NaN.exit.i.i.i*/
	/*   %.sink.i.i.i.i = phi i1 [ %514, %.thread.i.i.i.i ], [ %508, %float64_is_signaling_nan.exit.i.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadiiii_336) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexitiii_sinkiiii = main_float64_is_signaling_nanexitiiii_514_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i.i.i*/
	/*   %.sink.i.i.i.i = phi i1 [ %514, %.thread.i.i.i.i ], [ %508, %float64_is_signaling_nan.exit.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitiiii_332) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexitiiii_515 == 1'd0))) begin
		main_propagateFloat64NaNexitiii_sinkiiii_reg <= main_propagateFloat64NaNexitiii_sinkiiii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexitiii_sinkiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexitiii_sinkiiii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit.i.i.i*/
	/*   %.sink.i.i.i.i = phi i1 [ %514, %.thread.i.i.i.i ], [ %508, %float64_is_signaling_nan.exit.i.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadiiii_336) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexitiii_sinkiiii_reg <= main_propagateFloat64NaNexitiii_sinkiiii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexitiii_sinkiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexitiii_sinkiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i.i.i*/
	/*   %.mux2.v.i.i.i.i = select i1 %.sink.i.i.i.i, i64 %.0.i1.i, i64 %app.0.i*/
		main_propagateFloat64NaNexitiii_mux2viiii = (main_propagateFloat64NaNexitiii_sinkiiii_reg ? main_float64_divexiti_0i1i_reg : main_5_app0i_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i.i.i*/
	/*   %.mux2.v.i.i.i.i = select i1 %.sink.i.i.i.i, i64 %.0.i1.i, i64 %app.0.i*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexitiii_337)) begin
		main_propagateFloat64NaNexitiii_mux2viiii_reg <= main_propagateFloat64NaNexitiii_mux2viiii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexitiii_mux2viiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexitiii_mux2viiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i.i.i*/
	/*   %.mux2.i.i.i.i = or i64 %.mux2.v.i.i.i.i, 2251799813685248*/
		main_propagateFloat64NaNexitiii_mux2iiii = (main_propagateFloat64NaNexitiii_mux2viiii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i.i.i*/
	/*   %.mux2.i.i.i.i = or i64 %.mux2.v.i.i.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexitiii_337)) begin
		main_propagateFloat64NaNexitiii_mux2iiii_reg <= main_propagateFloat64NaNexitiii_mux2iiii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexitiii_mux2iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexitiii_mux2iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %518*/
	/*   %519 = icmp eq i32 %266, 0*/
		main_518_519 = (main_float64_divexiti_266_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %518*/
	/*   %519 = icmp eq i32 %266, 0*/
	if ((cur_state == LEGUP_F_main_BB__518_338)) begin
		main_518_519_reg <= main_518_519;
		if (start == 1'b0 && ^(main_518_519) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_518_519_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %518*/
	/*   %520 = or i64 %408, 4611686018427387904*/
		main_518_520 = (main_404_408_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %518*/
	/*   %520 = or i64 %408, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__518_338)) begin
		main_518_520_reg <= main_518_520;
		if (start == 1'b0 && ^(main_518_520) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_518_520_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %518*/
	/*   %521 = select i1 %519, i64 %408, i64 %520*/
		main_518_521 = (main_518_519 ? main_404_408_reg : main_518_520);
end
always @(posedge clk) begin
	/* main: %518*/
	/*   %521 = select i1 %519, i64 %408, i64 %520*/
	if ((cur_state == LEGUP_F_main_BB__518_338)) begin
		main_518_521_reg <= main_518_521;
		if (start == 1'b0 && ^(main_518_521) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_518_521_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %518*/
	/*   %522 = sext i1 %519 to i32*/
		main_518_522 = $signed(main_518_519);
end
always @(posedge clk) begin
	/* main: %518*/
	/*   %522 = sext i1 %519 to i32*/
	if ((cur_state == LEGUP_F_main_BB__518_338)) begin
		main_518_522_reg <= main_518_522;
		if (start == 1'b0 && ^(main_518_522) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_518_522_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %518*/
	/*   %expDiff.1.i.i.i = add nsw i32 %522, %267*/
		main_518_expDiff1iii = (main_518_522 + main_float64_divexiti_267_reg);
end
always @(posedge clk) begin
	/* main: %518*/
	/*   %expDiff.1.i.i.i = add nsw i32 %522, %267*/
	if ((cur_state == LEGUP_F_main_BB__518_338)) begin
		main_518_expDiff1iii_reg <= main_518_expDiff1iii;
		if (start == 1'b0 && ^(main_518_expDiff1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_518_expDiff1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %518*/
	/*   %523 = icmp eq i32 %expDiff.1.i.i.i, 0*/
		main_518_523 = (main_518_expDiff1iii == 32'd0);
end
always @(posedge clk) begin
	/* main: %518*/
	/*   %523 = icmp eq i32 %expDiff.1.i.i.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__518_338)) begin
		main_518_523_reg <= main_518_523;
		if (start == 1'b0 && ^(main_518_523) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_518_523_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %524*/
	/*   %525 = icmp slt i32 %expDiff.1.i.i.i, 64*/
		main_524_525 = ($signed(main_518_expDiff1iii_reg) < $signed(32'd64));
end
always @(posedge clk) begin
	/* main: %524*/
	/*   %525 = icmp slt i32 %expDiff.1.i.i.i, 64*/
	if ((cur_state == LEGUP_F_main_BB__524_339)) begin
		main_524_525_reg <= main_524_525;
		if (start == 1'b0 && ^(main_524_525) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_524_525_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %526*/
	/*   %527 = zext i32 %expDiff.1.i.i.i to i64*/
		main_526_527 = main_518_expDiff1iii_reg;
end
always @(posedge clk) begin
	/* main: %526*/
	/*   %527 = zext i32 %expDiff.1.i.i.i to i64*/
	if ((cur_state == LEGUP_F_main_BB__526_340)) begin
		main_526_527_reg <= main_526_527;
		if (start == 1'b0 && ^(main_526_527) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_526_527_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %526*/
	/*   %528 = lshr i64 %521, %527*/
		main_526_528 = (main_518_521_reg >>> (main_526_527 % 64'd64));
end
always @(posedge clk) begin
	/* main: %526*/
	/*   %528 = lshr i64 %521, %527*/
	if ((cur_state == LEGUP_F_main_BB__526_340)) begin
		main_526_528_reg <= main_526_528;
		if (start == 1'b0 && ^(main_526_528) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_526_528_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %526*/
	/*   %529 = sub nsw i32 0, %expDiff.1.i.i.i*/
		main_526_529 = (32'd0 - main_518_expDiff1iii_reg);
end
always @(posedge clk) begin
	/* main: %526*/
	/*   %529 = sub nsw i32 0, %expDiff.1.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__526_340)) begin
		main_526_529_reg <= main_526_529;
		if (start == 1'b0 && ^(main_526_529) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_526_529_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %526*/
	/*   %530 = and i32 %529, 63*/
		main_526_530 = (main_526_529 & 32'd63);
end
always @(posedge clk) begin
	/* main: %526*/
	/*   %530 = and i32 %529, 63*/
	if ((cur_state == LEGUP_F_main_BB__526_340)) begin
		main_526_530_reg <= main_526_530;
		if (start == 1'b0 && ^(main_526_530) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_526_530_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %526*/
	/*   %531 = zext i32 %530 to i64*/
		main_526_531 = main_526_530;
end
always @(posedge clk) begin
	/* main: %526*/
	/*   %531 = zext i32 %530 to i64*/
	if ((cur_state == LEGUP_F_main_BB__526_340)) begin
		main_526_531_reg <= main_526_531;
		if (start == 1'b0 && ^(main_526_531) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_526_531_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %526*/
	/*   %532 = shl i64 %521, %531*/
		main_526_532 = (main_518_521_reg <<< (main_526_531 % 64'd64));
end
always @(posedge clk) begin
	/* main: %526*/
	/*   %532 = shl i64 %521, %531*/
	if ((cur_state == LEGUP_F_main_BB__526_340)) begin
		main_526_532_reg <= main_526_532;
		if (start == 1'b0 && ^(main_526_532) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_526_532_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %526*/
	/*   %533 = icmp ne i64 %532, 0*/
		main_526_533 = (main_526_532 != 64'd0);
end
always @(posedge clk) begin
	/* main: %526*/
	/*   %533 = icmp ne i64 %532, 0*/
	if ((cur_state == LEGUP_F_main_BB__526_340)) begin
		main_526_533_reg <= main_526_533;
		if (start == 1'b0 && ^(main_526_533) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_526_533_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %526*/
	/*   %534 = zext i1 %533 to i64*/
		main_526_534 = main_526_533;
end
always @(posedge clk) begin
	/* main: %526*/
	/*   %534 = zext i1 %533 to i64*/
	if ((cur_state == LEGUP_F_main_BB__526_340)) begin
		main_526_534_reg <= main_526_534;
		if (start == 1'b0 && ^(main_526_534) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_526_534_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %526*/
	/*   %535 = or i64 %534, %528*/
		main_526_535 = (main_526_534 | main_526_528);
end
always @(posedge clk) begin
	/* main: %526*/
	/*   %535 = or i64 %534, %528*/
	if ((cur_state == LEGUP_F_main_BB__526_340)) begin
		main_526_535_reg <= main_526_535;
		if (start == 1'b0 && ^(main_526_535) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_526_535_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %536*/
	/*   %537 = icmp ne i64 %521, 0*/
		main_536_537 = (main_518_521_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %536*/
	/*   %537 = icmp ne i64 %521, 0*/
	if ((cur_state == LEGUP_F_main_BB__536_341)) begin
		main_536_537_reg <= main_536_537;
		if (start == 1'b0 && ^(main_536_537) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_536_537_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %536*/
	/*   %538 = zext i1 %537 to i64*/
		main_536_538 = main_536_537;
end
always @(posedge clk) begin
	/* main: %536*/
	/*   %538 = zext i1 %537 to i64*/
	if ((cur_state == LEGUP_F_main_BB__536_341)) begin
		main_536_538_reg <= main_536_538;
		if (start == 1'b0 && ^(main_536_538) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_536_538_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i.i*/
	/*   %z.0.i.i.i.i = phi i64 [ %535, %526 ], [ %538, %536 ], [ %521, %518 ]*/
	if ((((cur_state == LEGUP_F_main_BB__518_338) & (memory_controller_waitrequest == 1'd0)) & (main_518_523 == 1'd1))) begin
		main_shift64RightJammingexitiii_z0iiii = main_518_521;
	end
	/* main: %shift64RightJamming.exit.i.i.i*/
	/*   %z.0.i.i.i.i = phi i64 [ %535, %526 ], [ %538, %536 ], [ %521, %518 ]*/
	else if (((cur_state == LEGUP_F_main_BB__526_340) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitiii_z0iiii = main_526_535;
	end
	/* main: %shift64RightJamming.exit.i.i.i*/
	/*   %z.0.i.i.i.i = phi i64 [ %535, %526 ], [ %538, %536 ], [ %521, %518 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__536_341) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexitiii_z0iiii = main_536_538;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i.i*/
	/*   %z.0.i.i.i.i = phi i64 [ %535, %526 ], [ %538, %536 ], [ %521, %518 ]*/
	if ((((cur_state == LEGUP_F_main_BB__518_338) & (memory_controller_waitrequest == 1'd0)) & (main_518_523 == 1'd1))) begin
		main_shift64RightJammingexitiii_z0iiii_reg <= main_shift64RightJammingexitiii_z0iiii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitiii_z0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitiii_z0iiii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit.i.i.i*/
	/*   %z.0.i.i.i.i = phi i64 [ %535, %526 ], [ %538, %536 ], [ %521, %518 ]*/
	if (((cur_state == LEGUP_F_main_BB__526_340) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitiii_z0iiii_reg <= main_shift64RightJammingexitiii_z0iiii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitiii_z0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitiii_z0iiii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit.i.i.i*/
	/*   %z.0.i.i.i.i = phi i64 [ %535, %526 ], [ %538, %536 ], [ %521, %518 ]*/
	if (((cur_state == LEGUP_F_main_BB__536_341) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitiii_z0iiii_reg <= main_shift64RightJammingexitiii_z0iiii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitiii_z0iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitiii_z0iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i.i*/
	/*   %539 = or i64 %406, 4611686018427387904*/
		main_shift64RightJammingexitiii_539 = (main_404_406_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i.i*/
	/*   %539 = or i64 %406, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexitiii_342)) begin
		main_shift64RightJammingexitiii_539_reg <= main_shift64RightJammingexitiii_539;
		if (start == 1'b0 && ^(main_shift64RightJammingexitiii_539) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitiii_539_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %540*/
	/*   %541 = phi i64 [ %539, %shift64RightJamming.exit.i.i.i ], [ %406, %438 ]*/
	if ((((cur_state == LEGUP_F_main_BB__438_305) & (memory_controller_waitrequest == 1'd0)) & (main_438_439 == 1'd1))) begin
		main_540_541 = main_404_406_reg;
	end
	/* main: %540*/
	/*   %541 = phi i64 [ %539, %shift64RightJamming.exit.i.i.i ], [ %406, %438 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitiii_342) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_540_541 = main_shift64RightJammingexitiii_539;
	end
end
always @(posedge clk) begin
	/* main: %540*/
	/*   %541 = phi i64 [ %539, %shift64RightJamming.exit.i.i.i ], [ %406, %438 ]*/
	if ((((cur_state == LEGUP_F_main_BB__438_305) & (memory_controller_waitrequest == 1'd0)) & (main_438_439 == 1'd1))) begin
		main_540_541_reg <= main_540_541;
		if (start == 1'b0 && ^(main_540_541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_540_541_reg"); $finish; end
	end
	/* main: %540*/
	/*   %541 = phi i64 [ %539, %shift64RightJamming.exit.i.i.i ], [ %406, %438 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitiii_342) & (memory_controller_waitrequest == 1'd0))) begin
		main_540_541_reg <= main_540_541;
		if (start == 1'b0 && ^(main_540_541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_540_541_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %540*/
	/*   %542 = phi i64 [ %z.0.i.i.i.i, %shift64RightJamming.exit.i.i.i ], [ %408, %438 ]*/
	if ((((cur_state == LEGUP_F_main_BB__438_305) & (memory_controller_waitrequest == 1'd0)) & (main_438_439 == 1'd1))) begin
		main_540_542 = main_404_408_reg;
	end
	/* main: %540*/
	/*   %542 = phi i64 [ %z.0.i.i.i.i, %shift64RightJamming.exit.i.i.i ], [ %408, %438 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitiii_342) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_540_542 = main_shift64RightJammingexitiii_z0iiii_reg;
	end
end
always @(posedge clk) begin
	/* main: %540*/
	/*   %542 = phi i64 [ %z.0.i.i.i.i, %shift64RightJamming.exit.i.i.i ], [ %408, %438 ]*/
	if ((((cur_state == LEGUP_F_main_BB__438_305) & (memory_controller_waitrequest == 1'd0)) & (main_438_439 == 1'd1))) begin
		main_540_542_reg <= main_540_542;
		if (start == 1'b0 && ^(main_540_542) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_540_542_reg"); $finish; end
	end
	/* main: %540*/
	/*   %542 = phi i64 [ %z.0.i.i.i.i, %shift64RightJamming.exit.i.i.i ], [ %408, %438 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitiii_342) & (memory_controller_waitrequest == 1'd0))) begin
		main_540_542_reg <= main_540_542;
		if (start == 1'b0 && ^(main_540_542) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_540_542_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %540*/
	/*   %aExp.1.i.i.i = phi i32 [ %264, %shift64RightJamming.exit.i.i.i ], [ %aExp.0.i.i.i, %438 ]*/
	if ((((cur_state == LEGUP_F_main_BB__438_305) & (memory_controller_waitrequest == 1'd0)) & (main_438_439 == 1'd1))) begin
		main_540_aExp1iii = main_438_aExp0iii_reg;
	end
	/* main: %540*/
	/*   %aExp.1.i.i.i = phi i32 [ %264, %shift64RightJamming.exit.i.i.i ], [ %aExp.0.i.i.i, %438 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitiii_342) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_540_aExp1iii = main_float64_divexiti_264_reg;
	end
end
always @(posedge clk) begin
	/* main: %540*/
	/*   %aExp.1.i.i.i = phi i32 [ %264, %shift64RightJamming.exit.i.i.i ], [ %aExp.0.i.i.i, %438 ]*/
	if ((((cur_state == LEGUP_F_main_BB__438_305) & (memory_controller_waitrequest == 1'd0)) & (main_438_439 == 1'd1))) begin
		main_540_aExp1iii_reg <= main_540_aExp1iii;
		if (start == 1'b0 && ^(main_540_aExp1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_540_aExp1iii_reg"); $finish; end
	end
	/* main: %540*/
	/*   %aExp.1.i.i.i = phi i32 [ %264, %shift64RightJamming.exit.i.i.i ], [ %aExp.0.i.i.i, %438 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitiii_342) & (memory_controller_waitrequest == 1'd0))) begin
		main_540_aExp1iii_reg <= main_540_aExp1iii;
		if (start == 1'b0 && ^(main_540_aExp1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_540_aExp1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %540*/
	/*   %543 = sub i64 %541, %542*/
		main_540_543 = (main_540_541_reg - main_540_542_reg);
end
always @(posedge clk) begin
	/* main: %540*/
	/*   %543 = sub i64 %541, %542*/
	if ((cur_state == LEGUP_F_main_BB__540_343)) begin
		main_540_543_reg <= main_540_543;
		if (start == 1'b0 && ^(main_540_543) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_540_543_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %.0.i.i.i = phi i32 [ %259, %540 ], [ %495, %491 ]*/
	if (((cur_state == LEGUP_F_main_BB__491_325) & (memory_controller_waitrequest == 1'd0))) begin
		main_544_0iii = main_491_495;
	end
	/* main: %544*/
	/*   %.0.i.i.i = phi i32 [ %259, %540 ], [ %495, %491 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__540_343) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_544_0iii = main_float64_divexiti_259_reg;
	end
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %.0.i.i.i = phi i32 [ %259, %540 ], [ %495, %491 ]*/
	if (((cur_state == LEGUP_F_main_BB__491_325) & (memory_controller_waitrequest == 1'd0))) begin
		main_544_0iii_reg <= main_544_0iii;
		if (start == 1'b0 && ^(main_544_0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_0iii_reg"); $finish; end
	end
	/* main: %544*/
	/*   %.0.i.i.i = phi i32 [ %259, %540 ], [ %495, %491 ]*/
	if (((cur_state == LEGUP_F_main_BB__540_343) & (memory_controller_waitrequest == 1'd0))) begin
		main_544_0iii_reg <= main_544_0iii;
		if (start == 1'b0 && ^(main_544_0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %zExp.0.i.i.i = phi i32 [ %aExp.1.i.i.i, %540 ], [ %bExp.1.i.i.i, %491 ]*/
	if (((cur_state == LEGUP_F_main_BB__491_325) & (memory_controller_waitrequest == 1'd0))) begin
		main_544_zExp0iii = main_491_bExp1iii_reg;
	end
	/* main: %544*/
	/*   %zExp.0.i.i.i = phi i32 [ %aExp.1.i.i.i, %540 ], [ %bExp.1.i.i.i, %491 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__540_343) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_544_zExp0iii = main_540_aExp1iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %zExp.0.i.i.i = phi i32 [ %aExp.1.i.i.i, %540 ], [ %bExp.1.i.i.i, %491 ]*/
	if (((cur_state == LEGUP_F_main_BB__491_325) & (memory_controller_waitrequest == 1'd0))) begin
		main_544_zExp0iii_reg <= main_544_zExp0iii;
		if (start == 1'b0 && ^(main_544_zExp0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_zExp0iii_reg"); $finish; end
	end
	/* main: %544*/
	/*   %zExp.0.i.i.i = phi i32 [ %aExp.1.i.i.i, %540 ], [ %bExp.1.i.i.i, %491 ]*/
	if (((cur_state == LEGUP_F_main_BB__540_343) & (memory_controller_waitrequest == 1'd0))) begin
		main_544_zExp0iii_reg <= main_544_zExp0iii;
		if (start == 1'b0 && ^(main_544_zExp0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_zExp0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %zSig.0.i.i.i = phi i64 [ %543, %540 ], [ %494, %491 ]*/
	if (((cur_state == LEGUP_F_main_BB__491_325) & (memory_controller_waitrequest == 1'd0))) begin
		main_544_zSig0iii = main_491_494;
	end
	/* main: %544*/
	/*   %zSig.0.i.i.i = phi i64 [ %543, %540 ], [ %494, %491 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__540_343) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_544_zSig0iii = main_540_543;
	end
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %zSig.0.i.i.i = phi i64 [ %543, %540 ], [ %494, %491 ]*/
	if (((cur_state == LEGUP_F_main_BB__491_325) & (memory_controller_waitrequest == 1'd0))) begin
		main_544_zSig0iii_reg <= main_544_zSig0iii;
		if (start == 1'b0 && ^(main_544_zSig0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_zSig0iii_reg"); $finish; end
	end
	/* main: %544*/
	/*   %zSig.0.i.i.i = phi i64 [ %543, %540 ], [ %494, %491 ]*/
	if (((cur_state == LEGUP_F_main_BB__540_343) & (memory_controller_waitrequest == 1'd0))) begin
		main_544_zSig0iii_reg <= main_544_zSig0iii;
		if (start == 1'b0 && ^(main_544_zSig0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_zSig0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %545 = add nsw i32 %zExp.0.i.i.i, -1*/
		main_544_545 = (main_544_zExp0iii_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %545 = add nsw i32 %zExp.0.i.i.i, -1*/
	if ((cur_state == LEGUP_F_main_BB__544_344)) begin
		main_544_545_reg <= main_544_545;
		if (start == 1'b0 && ^(main_544_545) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_545_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %546 = icmp ult i64 %zSig.0.i.i.i, 4294967296*/
		main_544_546 = (main_544_zSig0iii_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %546 = icmp ult i64 %zSig.0.i.i.i, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__544_344)) begin
		main_544_546_reg <= main_544_546;
		if (start == 1'b0 && ^(main_544_546) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_546_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %547 = lshr i64 %zSig.0.i.i.i, 32*/
		main_544_547 = (main_544_zSig0iii_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %547 = lshr i64 %zSig.0.i.i.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__544_344)) begin
		main_544_547_reg <= main_544_547;
		if (start == 1'b0 && ^(main_544_547) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_547_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %a.sink.i.i.i.i.i = select i1 %546, i64 %zSig.0.i.i.i, i64 %547*/
		main_544_asinkiiiii = (main_544_546 ? main_544_zSig0iii_reg : main_544_547);
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %a.sink.i.i.i.i.i = select i1 %546, i64 %zSig.0.i.i.i, i64 %547*/
	if ((cur_state == LEGUP_F_main_BB__544_344)) begin
		main_544_asinkiiiii_reg <= main_544_asinkiiiii;
		if (start == 1'b0 && ^(main_544_asinkiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_asinkiiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %extract.t.i.i.i.i.i = trunc i64 %a.sink.i.i.i.i.i to i32*/
		main_544_extracttiiiii = main_544_asinkiiiii[31:0];
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %extract.t.i.i.i.i.i = trunc i64 %a.sink.i.i.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__544_344)) begin
		main_544_extracttiiiii_reg <= main_544_extracttiiiii;
		if (start == 1'b0 && ^(main_544_extracttiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_extracttiiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %548 = icmp ult i32 %extract.t.i.i.i.i.i, 65536*/
		main_544_548 = (main_544_extracttiiiii < 32'd65536);
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %548 = icmp ult i32 %extract.t.i.i.i.i.i, 65536*/
	if ((cur_state == LEGUP_F_main_BB__544_344)) begin
		main_544_548_reg <= main_544_548;
		if (start == 1'b0 && ^(main_544_548) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_548_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %549 = shl i32 %extract.t.i.i.i.i.i, 16*/
		main_544_549 = (main_544_extracttiiiii <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %549 = shl i32 %extract.t.i.i.i.i.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__544_344)) begin
		main_544_549_reg <= main_544_549;
		if (start == 1'b0 && ^(main_544_549) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_549_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %.a.i.i.i.i.i.i = select i1 %548, i32 %549, i32 %extract.t.i.i.i.i.i*/
		main_544_aiiiiii = (main_544_548 ? main_544_549 : main_544_extracttiiiii);
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %.a.i.i.i.i.i.i = select i1 %548, i32 %549, i32 %extract.t.i.i.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__544_344)) begin
		main_544_aiiiiii_reg <= main_544_aiiiiii;
		if (start == 1'b0 && ^(main_544_aiiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_aiiiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %..i.i.i.i.i.i = select i1 %548, i32 16, i32 0*/
		main_544_iiiiii = (main_544_548 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %..i.i.i.i.i.i = select i1 %548, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__544_344)) begin
		main_544_iiiiii_reg <= main_544_iiiiii;
		if (start == 1'b0 && ^(main_544_iiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_iiiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %544*/
	/*   %550 = icmp ult i32 %.a.i.i.i.i.i.i, 16777216*/
		main_544_550 = (main_544_aiiiiii < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %544*/
	/*   %550 = icmp ult i32 %.a.i.i.i.i.i.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__544_344)) begin
		main_544_550_reg <= main_544_550;
		if (start == 1'b0 && ^(main_544_550) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_544_550_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %551*/
	/*   %552 = or i32 %..i.i.i.i.i.i, 8*/
		main_551_552 = (main_544_iiiiii_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %551*/
	/*   %552 = or i32 %..i.i.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__551_345)) begin
		main_551_552_reg <= main_551_552;
		if (start == 1'b0 && ^(main_551_552) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_551_552_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %551*/
	/*   %553 = shl i32 %.a.i.i.i.i.i.i, 8*/
		main_551_553 = (main_544_aiiiiii_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %551*/
	/*   %553 = shl i32 %.a.i.i.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__551_345)) begin
		main_551_553_reg <= main_551_553;
		if (start == 1'b0 && ^(main_551_553) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_551_553_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %.1.i.i.i.i.i.i = phi i32 [ %553, %551 ], [ %.a.i.i.i.i.i.i, %544 ]*/
	if ((((cur_state == LEGUP_F_main_BB__544_344) & (memory_controller_waitrequest == 1'd0)) & (main_544_550 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitiii_1iiiiii = main_544_aiiiiii;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %.1.i.i.i.i.i.i = phi i32 [ %553, %551 ], [ %.a.i.i.i.i.i.i, %544 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__551_345) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeRoundAndPackFloat64exitiii_1iiiiii = main_551_553;
	end
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %.1.i.i.i.i.i.i = phi i32 [ %553, %551 ], [ %.a.i.i.i.i.i.i, %544 ]*/
	if ((((cur_state == LEGUP_F_main_BB__544_344) & (memory_controller_waitrequest == 1'd0)) & (main_544_550 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitiii_1iiiiii_reg <= main_normalizeRoundAndPackFloat64exitiii_1iiiiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_1iiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_1iiiiii_reg"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %.1.i.i.i.i.i.i = phi i32 [ %553, %551 ], [ %.a.i.i.i.i.i.i, %544 ]*/
	if (((cur_state == LEGUP_F_main_BB__551_345) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitiii_1iiiiii_reg <= main_normalizeRoundAndPackFloat64exitiii_1iiiiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_1iiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_1iiiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %shiftCount.1.i.i.i.i.i.i = phi i32 [ %552, %551 ], [ %..i.i.i.i.i.i, %544 ]*/
	if ((((cur_state == LEGUP_F_main_BB__544_344) & (memory_controller_waitrequest == 1'd0)) & (main_544_550 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii = main_544_iiiiii;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %shiftCount.1.i.i.i.i.i.i = phi i32 [ %552, %551 ], [ %..i.i.i.i.i.i, %544 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__551_345) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii = main_551_552;
	end
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %shiftCount.1.i.i.i.i.i.i = phi i32 [ %552, %551 ], [ %..i.i.i.i.i.i, %544 ]*/
	if ((((cur_state == LEGUP_F_main_BB__544_344) & (memory_controller_waitrequest == 1'd0)) & (main_544_550 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii_reg <= main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii_reg"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %shiftCount.1.i.i.i.i.i.i = phi i32 [ %552, %551 ], [ %..i.i.i.i.i.i, %544 ]*/
	if (((cur_state == LEGUP_F_main_BB__551_345) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii_reg <= main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %554 = lshr i32 %.1.i.i.i.i.i.i, 24*/
		main_normalizeRoundAndPackFloat64exitiii_554 = (main_normalizeRoundAndPackFloat64exitiii_1iiiiii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %554 = lshr i32 %.1.i.i.i.i.i.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_346)) begin
		main_normalizeRoundAndPackFloat64exitiii_554_reg <= main_normalizeRoundAndPackFloat64exitiii_554;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_554) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_554_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %555 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %554*/
		main_normalizeRoundAndPackFloat64exitiii_555 = (`TAG_g_countLeadingZeros32countLeadingZerosHigh_a | (4 * main_normalizeRoundAndPackFloat64exitiii_554));
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %555 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %554*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_346)) begin
		main_normalizeRoundAndPackFloat64exitiii_555_reg <= main_normalizeRoundAndPackFloat64exitiii_555;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_555) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_555_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %556 = load i32* %555, align 4, !tbaa !5*/
		main_normalizeRoundAndPackFloat64exitiii_556 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %556 = load i32* %555, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348)) begin
		main_normalizeRoundAndPackFloat64exitiii_556_reg <= main_normalizeRoundAndPackFloat64exitiii_556;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_556) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_556_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %557 = select i1 %546, i32 31, i32 -1*/
		main_normalizeRoundAndPackFloat64exitiii_557 = (main_544_546_reg ? 32'd31 : -32'd1);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %557 = select i1 %546, i32 31, i32 -1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_346)) begin
		main_normalizeRoundAndPackFloat64exitiii_557_reg <= main_normalizeRoundAndPackFloat64exitiii_557;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_557_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %558 = add nsw i32 %shiftCount.1.i.i.i.i.i.i, %557*/
		main_normalizeRoundAndPackFloat64exitiii_558 = (main_normalizeRoundAndPackFloat64exitiii_shiftCount1iiiiii_reg + main_normalizeRoundAndPackFloat64exitiii_557);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %558 = add nsw i32 %shiftCount.1.i.i.i.i.i.i, %557*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_346)) begin
		main_normalizeRoundAndPackFloat64exitiii_558_reg <= main_normalizeRoundAndPackFloat64exitiii_558;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_558) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_558_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %559 = add i32 %558, %556*/
		main_normalizeRoundAndPackFloat64exitiii_559 = (main_normalizeRoundAndPackFloat64exitiii_558_reg + main_normalizeRoundAndPackFloat64exitiii_556);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %559 = add i32 %558, %556*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348)) begin
		main_normalizeRoundAndPackFloat64exitiii_559_reg <= main_normalizeRoundAndPackFloat64exitiii_559;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_559) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_559_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %560 = sub i32 %545, %559*/
		main_normalizeRoundAndPackFloat64exitiii_560 = (main_544_545_reg - main_normalizeRoundAndPackFloat64exitiii_559);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %560 = sub i32 %545, %559*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348)) begin
		main_normalizeRoundAndPackFloat64exitiii_560_reg <= main_normalizeRoundAndPackFloat64exitiii_560;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_560) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_560_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %561 = zext i32 %559 to i64*/
		main_normalizeRoundAndPackFloat64exitiii_561 = main_normalizeRoundAndPackFloat64exitiii_559;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %561 = zext i32 %559 to i64*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348)) begin
		main_normalizeRoundAndPackFloat64exitiii_561_reg <= main_normalizeRoundAndPackFloat64exitiii_561;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_561) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_561_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %562 = shl i64 %zSig.0.i.i.i, %561*/
		main_normalizeRoundAndPackFloat64exitiii_562 = (main_544_zSig0iii_reg <<< (main_normalizeRoundAndPackFloat64exitiii_561 % 64'd64));
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %562 = shl i64 %zSig.0.i.i.i, %561*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348)) begin
		main_normalizeRoundAndPackFloat64exitiii_562_reg <= main_normalizeRoundAndPackFloat64exitiii_562;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_562) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_562_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
		main_normalizeRoundAndPackFloat64exitiii_563 = roundAndPackFloat64_return_val_reg;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		main_normalizeRoundAndPackFloat64exitiii_563_reg <= main_normalizeRoundAndPackFloat64exitiii_563;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_563) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitiii_563_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__276_233) & (memory_controller_waitrequest == 1'd0)) & (main_276_277 == 1'd1))) begin
		main_float64_addexiti_0i3i = main_5_app0i_reg;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit16iii_243) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i = main_propagateFloat64NaNexit16iii_mux2i15iii;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit7iii_260) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i = main_propagateFloat64NaNexit7iii_mux2i6iii;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if (((cur_state == LEGUP_F_main_BB__341_261) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i = main_341_343;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__366_267) & (memory_controller_waitrequest == 1'd0)) & (main_366_368 == 1'd1))) begin
		main_float64_addexiti_0i3i = main_5_app0i_reg;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexiti10ii_277) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i = main_propagateFloat64NaNexiti10ii_mux2ii9ii;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if (((cur_state == LEGUP_F_main_BB__387_278) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i = main_387_391;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if (((cur_state == LEGUP_F_main_BB__402_285) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i = main_402_403_reg;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit17iii_299) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i = main_propagateFloat64NaNexit17iii_mux2i16iii;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if (((cur_state == LEGUP_F_main_BB__434_303) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i = 64'd9223372036854775807;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__440_306) & (memory_controller_waitrequest == 1'd0)) & (main_440_441 == 1'd0))) begin
		main_float64_addexiti_0i3i = 64'd0;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit10iii_318) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i = main_propagateFloat64NaNexit10iii_mux2i9iii;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if (((cur_state == LEGUP_F_main_BB__464_319) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i = main_464_468;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__498_327) & (memory_controller_waitrequest == 1'd0)) & (main_498_499 == 1'd1))) begin
		main_float64_addexiti_0i3i = main_5_app0i_reg;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexitiii_337) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i = main_propagateFloat64NaNexitiii_mux2iiii;
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_350) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_addexiti_0i3i = main_normalizeRoundAndPackFloat64exitiii_563_reg;
	end
end
always @(posedge clk) begin
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__276_233) & (memory_controller_waitrequest == 1'd0)) & (main_276_277 == 1'd1))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit16iii_243) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit7iii_260) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB__341_261) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__366_267) & (memory_controller_waitrequest == 1'd0)) & (main_366_368 == 1'd1))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexiti10ii_277) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB__387_278) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB__402_285) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit17iii_299) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB__434_303) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__440_306) & (memory_controller_waitrequest == 1'd0)) & (main_440_441 == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit10iii_318) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB__464_319) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if ((((cur_state == LEGUP_F_main_BB__498_327) & (memory_controller_waitrequest == 1'd0)) & (main_498_499 == 1'd1))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexitiii_337) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
	/* main: %float64_add.exit.i*/
	/*   %.0.i3.i = phi i64 [ %.mux2.i15.i.i.i, %propagateFloat64NaN.exit16.i.i.i ], [ %403, %402 ], [ %.mux2.i6.i.i.i, %propagateFloat64NaN.exit7.i.i.i ], [ %343, %341 ], [ %.mux2.i.i9.i.i, %propagateFloat64NaN.exit.i10.i.i ], [ %391, %387 ], [ %app.0.i, %276 ], [ %app.0.i, %366 ], [ %.mux2.i.i.i.i, %propagateFloat64NaN.exit.i.i.i ], [ %563, %normalizeRoundAndPackFloat64.exit.i.i.i ], [ %.mux2.i9.i.i.i, %propagateFloat64NaN.exit10.i.i.i ], [ %468, %464 ], [ %.mux2.i16.i.i.i, %propagateFloat64NaN.exit17.i.i.i ], [ 9223372036854775807, %434 ], [ %app.0.i, %498 ], [ 0, %440 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_350) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexiti_0i3i_reg <= main_float64_addexiti_0i3i;
		if (start == 1'b0 && ^(main_float64_addexiti_0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_0i3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit.i*/
	/*   %564 = and i64 %.0.i1.i, 9218868437227405312*/
		main_float64_addexiti_564 = (main_float64_divexiti_0i1i_reg & 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_add.exit.i*/
	/*   %564 = and i64 %.0.i1.i, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexiti_351)) begin
		main_float64_addexiti_564_reg <= main_float64_addexiti_564;
		if (start == 1'b0 && ^(main_float64_addexiti_564) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_564_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit.i*/
	/*   %565 = icmp ne i64 %564, 9218868437227405312*/
		main_float64_addexiti_565 = (main_float64_addexiti_564 != 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_add.exit.i*/
	/*   %565 = icmp ne i64 %564, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexiti_351)) begin
		main_float64_addexiti_565_reg <= main_float64_addexiti_565;
		if (start == 1'b0 && ^(main_float64_addexiti_565) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_565_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit.i*/
	/*   %566 = and i64 %.0.i1.i, 4503599627370495*/
		main_float64_addexiti_566 = (main_float64_divexiti_0i1i_reg & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* main: %float64_add.exit.i*/
	/*   %566 = and i64 %.0.i1.i, 4503599627370495*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexiti_351)) begin
		main_float64_addexiti_566_reg <= main_float64_addexiti_566;
		if (start == 1'b0 && ^(main_float64_addexiti_566) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_566_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit.i*/
	/*   %567 = icmp eq i64 %566, 0*/
		main_float64_addexiti_567 = (main_float64_addexiti_566 == 64'd0);
end
always @(posedge clk) begin
	/* main: %float64_add.exit.i*/
	/*   %567 = icmp eq i64 %566, 0*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexiti_351)) begin
		main_float64_addexiti_567_reg <= main_float64_addexiti_567;
		if (start == 1'b0 && ^(main_float64_addexiti_567) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_567_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit.i*/
	/*   %or.cond4.i.i.i = or i1 %565, %567*/
		main_float64_addexiti_orcond4iii = (main_float64_addexiti_565 | main_float64_addexiti_567);
end
always @(posedge clk) begin
	/* main: %float64_add.exit.i*/
	/*   %or.cond4.i.i.i = or i1 %565, %567*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexiti_351)) begin
		main_float64_addexiti_orcond4iii_reg <= main_float64_addexiti_orcond4iii;
		if (start == 1'b0 && ^(main_float64_addexiti_orcond4iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexiti_orcond4iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %568*/
	/*   %569 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_568_569 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %568*/
	/*   %569 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__568_354)) begin
		main_568_569_reg <= main_568_569;
		if (start == 1'b0 && ^(main_568_569) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_568_569_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %568*/
	/*   %570 = or i32 %569, 16*/
		main_568_570 = (main_568_569 | 32'd16);
end
always @(posedge clk) begin
	/* main: %568*/
	/*   %570 = or i32 %569, 16*/
	if ((cur_state == LEGUP_F_main_BB__568_354)) begin
		main_568_570_reg <= main_568_570;
		if (start == 1'b0 && ^(main_568_570) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_568_570_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_ge.exit.i*/
	/*   %571 = and i64 %.0.i1.i, 9223372036854775807*/
		main_float64_geexiti_571 = (main_float64_divexiti_0i1i_reg & 64'd9223372036854775807);
end
always @(posedge clk) begin
	/* main: %float64_ge.exit.i*/
	/*   %571 = and i64 %.0.i1.i, 9223372036854775807*/
	if ((cur_state == LEGUP_F_main_BB_float64_geexiti_356)) begin
		main_float64_geexiti_571_reg <= main_float64_geexiti_571;
		if (start == 1'b0 && ^(main_float64_geexiti_571) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_geexiti_571_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_ge.exit.i*/
	/*   %572 = icmp ugt i64 %571, 4532020583610935536*/
		main_float64_geexiti_572 = (main_float64_geexiti_571 > 64'd4532020583610935536);
end
always @(posedge clk) begin
	/* main: %float64_ge.exit.i*/
	/*   %572 = icmp ugt i64 %571, 4532020583610935536*/
	if ((cur_state == LEGUP_F_main_BB_float64_geexiti_356)) begin
		main_float64_geexiti_572_reg <= main_float64_geexiti_572;
		if (start == 1'b0 && ^(main_float64_geexiti_572) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_geexiti_572_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_ge.exit.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_float64_geexiti_indvarnext = (main_5_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %float64_ge.exit.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_float64_geexiti_356)) begin
		main_float64_geexiti_indvarnext_reg <= main_float64_geexiti_indvarnext;
		if (start == 1'b0 && ^(main_float64_geexiti_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_geexiti_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %dfsin.exit*/
	/*   %573 = load i64* %scevgep, align 8, !tbaa !1*/
		main_dfsinexit_573 = test_out_out_a;
end
always @(posedge clk) begin
	/* main: %dfsin.exit*/
	/*   %573 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_dfsinexit_359)) begin
		main_dfsinexit_573_reg <= main_dfsinexit_573;
		if (start == 1'b0 && ^(main_dfsinexit_573) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_dfsinexit_573_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %dfsin.exit*/
	/*   %574 = icmp eq i64 %.0.i3.i, %573*/
		main_dfsinexit_574 = (main_float64_addexiti_0i3i_reg == main_dfsinexit_573);
end
always @(posedge clk) begin
	/* main: %dfsin.exit*/
	/*   %574 = icmp eq i64 %.0.i3.i, %573*/
	if ((cur_state == LEGUP_F_main_BB_dfsinexit_359)) begin
		main_dfsinexit_574_reg <= main_dfsinexit_574;
		if (start == 1'b0 && ^(main_dfsinexit_574) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_dfsinexit_574_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %dfsin.exit*/
	/*   %575 = zext i1 %574 to i32*/
		main_dfsinexit_575 = main_dfsinexit_574;
end
always @(posedge clk) begin
	/* main: %dfsin.exit*/
	/*   %575 = zext i1 %574 to i32*/
	if ((cur_state == LEGUP_F_main_BB_dfsinexit_359)) begin
		main_dfsinexit_575_reg <= main_dfsinexit_575;
		if (start == 1'b0 && ^(main_dfsinexit_575) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_dfsinexit_575_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %dfsin.exit*/
	/*   %576 = add nsw i32 %575, %main_result.02*/
		main_dfsinexit_576 = (main_dfsinexit_575 + main_1_main_result02_reg);
end
always @(posedge clk) begin
	/* main: %dfsin.exit*/
	/*   %576 = add nsw i32 %575, %main_result.02*/
	if ((cur_state == LEGUP_F_main_BB_dfsinexit_359)) begin
		main_dfsinexit_576_reg <= main_dfsinexit_576;
		if (start == 1'b0 && ^(main_dfsinexit_576) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_dfsinexit_576_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %dfsin.exit*/
	/*   %578 = add nsw i32 %i.01, 1*/
		main_dfsinexit_578 = (main_1_i01_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %dfsin.exit*/
	/*   %578 = add nsw i32 %i.01, 1*/
	if ((cur_state == LEGUP_F_main_BB_dfsinexit_358)) begin
		main_dfsinexit_578_reg <= main_dfsinexit_578;
		if (start == 1'b0 && ^(main_dfsinexit_578) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_dfsinexit_578_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %dfsin.exit*/
	/*   %exitcond5 = icmp eq i32 %578, 36*/
		main_dfsinexit_exitcond5 = (main_dfsinexit_578 == 32'd36);
end
always @(posedge clk) begin
	/* main: %dfsin.exit*/
	/*   %exitcond5 = icmp eq i32 %578, 36*/
	if ((cur_state == LEGUP_F_main_BB_dfsinexit_358)) begin
		main_dfsinexit_exitcond5_reg <= main_dfsinexit_exitcond5;
		if (start == 1'b0 && ^(main_dfsinexit_exitcond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_dfsinexit_exitcond5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %579*/
	/*   %581 = icmp eq i32 %576, 36*/
		main_579_581 = (main_dfsinexit_576_reg == 32'd36);
end
always @(posedge clk) begin
	/* main: %579*/
	/*   %581 = icmp eq i32 %576, 36*/
	if ((cur_state == LEGUP_F_main_BB__579_360)) begin
		main_579_581_reg <= main_579_581;
		if (start == 1'b0 && ^(main_579_581) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_579_581_reg"); $finish; end
	end
end
always @(*) begin
	test_in_address_a = 1'd0;
	/* main: %1*/
	/*   %2 = load i64* %scevgep6, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		test_in_address_a = (main_1_scevgep6 >>> 3'd3);
	end
end
always @(*) begin
	test_in_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %2 = load i64* %scevgep6, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		test_in_write_enable_a = 1'd0;
	end
end
always @(*) begin
	test_out_address_a = 1'd0;
	/* main: %dfsin.exit*/
	/*   %573 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_dfsinexit_358)) begin
		test_out_address_a = (main_1_scevgep_reg >>> 3'd3);
	end
end
always @(*) begin
	test_out_write_enable_a = 1'd0;
	/* main: %dfsin.exit*/
	/*   %573 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_dfsinexit_358)) begin
		test_out_write_enable_a = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		float64_mul_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_3)) begin
		float64_mul_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_start"); $finish; end
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_F_main_BB__5_5)) begin
		float64_mul_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		float64_mul_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		float64_mul_arg_a <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_arg_a"); $finish; end
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_F_main_BB__5_5)) begin
		float64_mul_arg_a <= main_5_diff0i_reg;
		if (start == 1'b0 && ^(main_5_diff0i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_arg_a"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		float64_mul_arg_b <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_arg_b"); $finish; end
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_F_main_BB__5_5)) begin
		float64_mul_arg_b <= main_1_4_reg;
		if (start == 1'b0 && ^(main_1_4_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_arg_b"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		float64_mul_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	else /* if ((cur_state == LEGUP_function_call_6)) */ begin
		float64_mul_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		float64_mul_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	else /* if ((cur_state == LEGUP_function_call_6)) */ begin
		float64_mul_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	float64_mul_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	float64_mul_finish_final = float64_mul_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__1_2))) begin
		float64_mul_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_finish_reg"); $finish; end
	end
	if (float64_mul_finish) begin
		float64_mul_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__5_5))) begin
		float64_mul_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_finish_reg"); $finish; end
	end
	if (float64_mul_finish) begin
		float64_mul_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__1_2))) begin
		float64_mul_return_val_reg <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_return_val_reg"); $finish; end
	end
	if (float64_mul_finish) begin
		float64_mul_return_val_reg <= float64_mul_return_val;
		if (start == 1'b0 && ^(float64_mul_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__5_5))) begin
		float64_mul_return_val_reg <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_return_val_reg"); $finish; end
	end
	if (float64_mul_finish) begin
		float64_mul_return_val_reg <= float64_mul_return_val;
		if (start == 1'b0 && ^(float64_mul_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to float64_mul_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		legup_function_call = 1'd1;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		legup_function_call = 1'd1;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		legup_function_call = 1'd1;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		legup_function_call = 1'd1;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadii_227)) begin
		roundAndPackFloat64_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_228)) begin
		roundAndPackFloat64_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__402_283)) begin
		roundAndPackFloat64_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_284)) begin
		roundAndPackFloat64_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348)) begin
		roundAndPackFloat64_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_349)) begin
		roundAndPackFloat64_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadii_227)) begin
		roundAndPackFloat64_arg_zSign <= main_int32_to_float64exiti_45_reg;
		if (start == 1'b0 && ^(main_int32_to_float64exiti_45_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSign"); $finish; end
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__402_283)) begin
		roundAndPackFloat64_arg_zSign <= main_float64_divexiti_259_reg;
		if (start == 1'b0 && ^(main_float64_divexiti_259_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSign"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348)) begin
		roundAndPackFloat64_arg_zSign <= main_544_0iii_reg;
		if (start == 1'b0 && ^(main_544_0iii_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSign"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadii_227)) begin
		roundAndPackFloat64_arg_zExp <= main_189_zExp0ii_reg;
		if (start == 1'b0 && ^(main_189_zExp0ii_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zExp"); $finish; end
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__402_283)) begin
		roundAndPackFloat64_arg_zExp <= main_402_zExp1iii_reg;
		if (start == 1'b0 && ^(main_402_zExp1iii_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zExp"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348)) begin
		roundAndPackFloat64_arg_zExp <= main_normalizeRoundAndPackFloat64exitiii_560;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_560) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zExp"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadii_227)) begin
		roundAndPackFloat64_arg_zSig <= main_estimateDiv128To64exitthreadii_zSig1ii_reg;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadii_zSig1ii_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSig"); $finish; end
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__402_283)) begin
		roundAndPackFloat64_arg_zSig <= main_402_zSig0i12ii_reg;
		if (start == 1'b0 && ^(main_402_zSig0i12ii_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSig"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348)) begin
		roundAndPackFloat64_arg_zSig <= main_normalizeRoundAndPackFloat64exitiii_562;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitiii_562) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSig"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		roundAndPackFloat64_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	else if ((cur_state == LEGUP_function_call_284)) begin
		roundAndPackFloat64_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	else /* if ((cur_state == LEGUP_function_call_349)) */ begin
		roundAndPackFloat64_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		roundAndPackFloat64_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	else if ((cur_state == LEGUP_function_call_284)) begin
		roundAndPackFloat64_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	else /* if ((cur_state == LEGUP_function_call_349)) */ begin
		roundAndPackFloat64_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	roundAndPackFloat64_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	roundAndPackFloat64_finish_final = roundAndPackFloat64_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadii_227))) begin
		roundAndPackFloat64_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__402_283))) begin
		roundAndPackFloat64_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348))) begin
		roundAndPackFloat64_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadii_227))) begin
		roundAndPackFloat64_return_val_reg <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_return_val_reg <= roundAndPackFloat64_return_val;
		if (start == 1'b0 && ^(roundAndPackFloat64_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__402_283))) begin
		roundAndPackFloat64_return_val_reg <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_return_val_reg <= roundAndPackFloat64_return_val;
		if (start == 1'b0 && ^(roundAndPackFloat64_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_348))) begin
		roundAndPackFloat64_return_val_reg <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_return_val_reg <= roundAndPackFloat64_return_val;
		if (start == 1'b0 && ^(roundAndPackFloat64_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %196*/
	/*   %197 = udiv i64 %190, %193*/
	if ((cur_state == LEGUP_F_main_BB__196_80)) begin
		main_unsigned_divide_64_0_op0 = main_189_190_reg;
	end
	/* main: %225*/
	/*   %226 = udiv i64 %223, %193*/
	else /* if ((cur_state == LEGUP_F_main_BB__225_152)) */ begin
		main_unsigned_divide_64_0_op0 = main__crit_edgeiii_223_reg;
	end
end
always @(*) begin
	/* main: %196*/
	/*   %197 = udiv i64 %190, %193*/
	if ((cur_state == LEGUP_F_main_BB__196_80)) begin
		main_unsigned_divide_64_0_op1 = main_192_193_reg;
	end
	/* main: %225*/
	/*   %226 = udiv i64 %223, %193*/
	else /* if ((cur_state == LEGUP_F_main_BB__225_152)) */ begin
		main_unsigned_divide_64_0_op1 = main_192_193_reg;
	end
end
always @(*) begin
	lpm_divide_main_196_197_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_196_197_out = lpm_divide_main_196_197_temp_out;
end
always @(*) begin
	main_unsigned_divide_64_0 = lpm_divide_main_196_197_out;
end
always @(*) begin
	lpm_mult_main_5_10_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %10 = mul nsw i32 %8, %7*/
	if ((lpm_mult_main_5_10_en == 1'd1)) begin
		main_5_10_stage0_reg <= (main_5_8 * main_5_7);
	end
end
always @(*) begin
	lpm_mult_main_199_203_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %203 = mul i64 %201, %202*/
	if ((lpm_mult_main_199_203_en == 1'd1)) begin
		main_199_203_stage0_reg <= (main_199_201 * main_199_202);
	end
end
always @(*) begin
	lpm_mult_main_199_204_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %204 = mul i64 %201, %193*/
	if ((lpm_mult_main_199_204_en == 1'd1)) begin
		main_199_204_stage0_reg <= (main_199_201 * main_192_193_reg);
	end
end
always @(*) begin
	lpm_divide_main_225_226_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_231_234_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %234 = mul i64 %233, %202*/
	if ((lpm_mult_main_231_234_en == 1'd1)) begin
		main_231_234_stage0_reg <= (main_231_233 * main_199_202_reg);
	end
end
always @(*) begin
	lpm_mult_main_231_235_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %235 = mul i64 %232, %202*/
	if ((lpm_mult_main_231_235_en == 1'd1)) begin
		main_231_235_stage0_reg <= (main_231_232 * main_199_202_reg);
	end
end
always @(*) begin
	lpm_mult_main_231_236_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %236 = mul i64 %233, %193*/
	if ((lpm_mult_main_231_236_en == 1'd1)) begin
		main_231_236_stage0_reg <= (main_231_233 * main_192_193_reg);
	end
end
always @(*) begin
	lpm_mult_main_231_237_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %237 = mul i64 %232, %193*/
	if ((lpm_mult_main_231_237_en == 1'd1)) begin
		main_231_237_stage0_reg <= (main_231_232 * main_192_193_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %586*/
	/*   ret i32 %576*/
	if ((cur_state == LEGUP_F_main_BB__586_363)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_enable_a = float64_mul_memory_controller_enable_a;
	end
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_enable_a = float64_mul_memory_controller_enable_a;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = float64_mul_memory_controller_enable_a;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = float64_mul_memory_controller_enable_a;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %24 = load i32* %23, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i19.i.i*/
	/*   %65 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi19ii_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i19.i.i*/
	/*   store i32 %66, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi19ii_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i12.i.i*/
	/*   %87 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i12.i.i*/
	/*   store i32 %88, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %89*/
	/*   %90 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__89_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %89*/
	/*   store i32 %91, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__89_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i.i.i*/
	/*   %114 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_49)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i.i.i*/
	/*   store i32 %115, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %120*/
	/*   %124 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__120_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %125*/
	/*   store i32 %126, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__125_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %127*/
	/*   store i32 %128, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__127_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %142 = load i32* %141, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %168 = load i32* %167, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_73)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i12.i.i.i*/
	/*   %294 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12iii_239)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i12.i.i.i*/
	/*   store i32 %295, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12iii_241)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i3.i.i.i*/
	/*   %339 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3iii_256)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i3.i.i.i*/
	/*   store i32 %340, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3iii_258)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i.i6.i.i*/
	/*   %385 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6ii_273)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i.i6.i.i*/
	/*   store i32 %386, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6ii_275)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i13.i.i.i*/
	/*   %432 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13iii_295)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i13.i.i.i*/
	/*   store i32 %433, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13iii_297)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %434*/
	/*   %435 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__434_300)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %434*/
	/*   store i32 %436, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__434_302)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i6.i.i.i*/
	/*   %462 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6iii_314)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i6.i.i.i*/
	/*   store i32 %463, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6iii_316)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i.i.i.i*/
	/*   %516 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiiii_333)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i.i.i.i*/
	/*   store i32 %517, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiiii_335)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %556 = load i32* %555, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_346)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %568*/
	/*   %569 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__568_352)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %568*/
	/*   store i32 %570, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__568_354)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = float64_mul_memory_controller_address_a;
	end
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = float64_mul_memory_controller_address_a;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = float64_mul_memory_controller_address_a;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = float64_mul_memory_controller_address_a;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %24 = load i32* %23, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_10)) begin
		memory_controller_address_a = main_countLeadingZeros32exitii_23;
	end
	/* main: %.thread.i19.i.i*/
	/*   %65 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi19ii_20)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i19.i.i*/
	/*   store i32 %66, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi19ii_22)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i12.i.i*/
	/*   %87 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_32)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i12.i.i*/
	/*   store i32 %88, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_34)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %89*/
	/*   %90 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__89_37)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %89*/
	/*   store i32 %91, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__89_39)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i.i.i*/
	/*   %114 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_49)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i.i.i*/
	/*   store i32 %115, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_51)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %120*/
	/*   %124 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__120_56)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %125*/
	/*   store i32 %126, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__125_59)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %127*/
	/*   store i32 %128, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__127_61)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %142 = load i32* %141, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_65)) begin
		memory_controller_address_a = main_normalizeFloat64Subnormalexit9ii_141;
	end
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %168 = load i32* %167, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_73)) begin
		memory_controller_address_a = main_normalizeFloat64Subnormalexitii_167;
	end
	/* main: %.thread.i12.i.i.i*/
	/*   %294 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12iii_239)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i12.i.i.i*/
	/*   store i32 %295, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12iii_241)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i3.i.i.i*/
	/*   %339 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3iii_256)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i3.i.i.i*/
	/*   store i32 %340, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3iii_258)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i.i6.i.i*/
	/*   %385 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6ii_273)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i.i6.i.i*/
	/*   store i32 %386, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6ii_275)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i13.i.i.i*/
	/*   %432 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13iii_295)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i13.i.i.i*/
	/*   store i32 %433, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13iii_297)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %434*/
	/*   %435 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__434_300)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %434*/
	/*   store i32 %436, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__434_302)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i6.i.i.i*/
	/*   %462 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6iii_314)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i6.i.i.i*/
	/*   store i32 %463, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6iii_316)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i.i.i.i*/
	/*   %516 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiiii_333)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i.i.i.i*/
	/*   store i32 %517, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiiii_335)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %556 = load i32* %555, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_346)) begin
		memory_controller_address_a = main_normalizeRoundAndPackFloat64exitiii_555;
	end
	/* main: %568*/
	/*   %569 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__568_352)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %568*/
	/*   store i32 %570, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__568_354)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_write_enable_a = float64_mul_memory_controller_write_enable_a;
	end
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_write_enable_a = float64_mul_memory_controller_write_enable_a;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = float64_mul_memory_controller_write_enable_a;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = float64_mul_memory_controller_write_enable_a;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %24 = load i32* %23, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i19.i.i*/
	/*   %65 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi19ii_20)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i19.i.i*/
	/*   store i32 %66, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi19ii_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i12.i.i*/
	/*   %87 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i12.i.i*/
	/*   store i32 %88, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_34)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %89*/
	/*   %90 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__89_37)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %89*/
	/*   store i32 %91, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__89_39)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i.i.i*/
	/*   %114 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_49)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i.i.i*/
	/*   store i32 %115, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_51)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %120*/
	/*   %124 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__120_56)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %125*/
	/*   store i32 %126, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__125_59)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %127*/
	/*   store i32 %128, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__127_61)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %142 = load i32* %141, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_65)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %168 = load i32* %167, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_73)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i12.i.i.i*/
	/*   %294 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12iii_239)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i12.i.i.i*/
	/*   store i32 %295, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12iii_241)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i3.i.i.i*/
	/*   %339 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3iii_256)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i3.i.i.i*/
	/*   store i32 %340, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3iii_258)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i.i6.i.i*/
	/*   %385 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6ii_273)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i.i6.i.i*/
	/*   store i32 %386, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6ii_275)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i13.i.i.i*/
	/*   %432 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13iii_295)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i13.i.i.i*/
	/*   store i32 %433, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13iii_297)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %434*/
	/*   %435 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__434_300)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %434*/
	/*   store i32 %436, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__434_302)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i6.i.i.i*/
	/*   %462 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6iii_314)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i6.i.i.i*/
	/*   store i32 %463, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6iii_316)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i.i.i.i*/
	/*   %516 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiiii_333)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i.i.i.i*/
	/*   store i32 %517, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiiii_335)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %556 = load i32* %555, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_346)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %568*/
	/*   %569 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__568_352)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %568*/
	/*   store i32 %570, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__568_354)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = float64_mul_memory_controller_in_a;
	end
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = float64_mul_memory_controller_in_a;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = float64_mul_memory_controller_in_a;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = float64_mul_memory_controller_in_a;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %.thread.i19.i.i*/
	/*   store i32 %66, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi19ii_22)) begin
		memory_controller_in_a = main_threadi19ii_66;
	end
	/* main: %.thread.i12.i.i*/
	/*   store i32 %88, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_34)) begin
		memory_controller_in_a = main_threadi12ii_88;
	end
	/* main: %89*/
	/*   store i32 %91, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__89_39)) begin
		memory_controller_in_a = main_89_91;
	end
	/* main: %.thread.i.i.i*/
	/*   store i32 %115, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_51)) begin
		memory_controller_in_a = main_threadiii_115;
	end
	/* main: %125*/
	/*   store i32 %126, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__125_59)) begin
		memory_controller_in_a = main_125_126;
	end
	/* main: %127*/
	/*   store i32 %128, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__127_61)) begin
		memory_controller_in_a = main_127_128;
	end
	/* main: %.thread.i12.i.i.i*/
	/*   store i32 %295, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12iii_241)) begin
		memory_controller_in_a = main_threadi12iii_295;
	end
	/* main: %.thread.i3.i.i.i*/
	/*   store i32 %340, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3iii_258)) begin
		memory_controller_in_a = main_threadi3iii_340;
	end
	/* main: %.thread.i.i6.i.i*/
	/*   store i32 %386, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6ii_275)) begin
		memory_controller_in_a = main_threadii6ii_386;
	end
	/* main: %.thread.i13.i.i.i*/
	/*   store i32 %433, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13iii_297)) begin
		memory_controller_in_a = main_threadi13iii_433;
	end
	/* main: %434*/
	/*   store i32 %436, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__434_302)) begin
		memory_controller_in_a = main_434_436;
	end
	/* main: %.thread.i6.i.i.i*/
	/*   store i32 %463, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6iii_316)) begin
		memory_controller_in_a = main_threadi6iii_463;
	end
	/* main: %.thread.i.i.i.i*/
	/*   store i32 %517, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiiii_335)) begin
		memory_controller_in_a = main_threadiiii_517;
	end
	/* main: %568*/
	/*   store i32 %570, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__568_354)) begin
		memory_controller_in_a = main_568_570;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_size_a[1:0] = float64_mul_memory_controller_size_a;
	end
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_size_a[1:0] = float64_mul_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = float64_mul_memory_controller_size_a;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = float64_mul_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %countLeadingZeros32.exit.i.i*/
	/*   %24 = load i32* %23, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_countLeadingZeros32exitii_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i19.i.i*/
	/*   %65 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi19ii_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i19.i.i*/
	/*   store i32 %66, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi19ii_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i12.i.i*/
	/*   %87 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i12.i.i*/
	/*   store i32 %88, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %89*/
	/*   %90 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__89_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %89*/
	/*   store i32 %91, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__89_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i.i.i*/
	/*   %114 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_49)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i.i.i*/
	/*   store i32 %115, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %120*/
	/*   %124 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__120_56)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %125*/
	/*   store i32 %126, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__125_59)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %127*/
	/*   store i32 %128, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__127_61)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %normalizeFloat64Subnormal.exit9.i.i*/
	/*   %142 = load i32* %141, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit9ii_65)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %normalizeFloat64Subnormal.exit.i.i*/
	/*   %168 = load i32* %167, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexitii_73)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i12.i.i.i*/
	/*   %294 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12iii_239)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i12.i.i.i*/
	/*   store i32 %295, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12iii_241)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i3.i.i.i*/
	/*   %339 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3iii_256)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i3.i.i.i*/
	/*   store i32 %340, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3iii_258)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i.i6.i.i*/
	/*   %385 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6ii_273)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i.i6.i.i*/
	/*   store i32 %386, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6ii_275)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i13.i.i.i*/
	/*   %432 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13iii_295)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i13.i.i.i*/
	/*   store i32 %433, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13iii_297)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %434*/
	/*   %435 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__434_300)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %434*/
	/*   store i32 %436, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__434_302)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i6.i.i.i*/
	/*   %462 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6iii_314)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i6.i.i.i*/
	/*   store i32 %463, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6iii_316)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i.i.i.i*/
	/*   %516 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiiii_333)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i.i.i.i*/
	/*   store i32 %517, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiiii_335)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %556 = load i32* %555, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitiii_346)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %568*/
	/*   %569 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__568_352)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %568*/
	/*   store i32 %570, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__568_354)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_enable_b = float64_mul_memory_controller_enable_b;
	end
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_enable_b = float64_mul_memory_controller_enable_b;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = float64_mul_memory_controller_enable_b;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = float64_mul_memory_controller_enable_b;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = float64_mul_memory_controller_address_b;
	end
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = float64_mul_memory_controller_address_b;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = float64_mul_memory_controller_address_b;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = float64_mul_memory_controller_address_b;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_write_enable_b = float64_mul_memory_controller_write_enable_b;
	end
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_write_enable_b = float64_mul_memory_controller_write_enable_b;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = float64_mul_memory_controller_write_enable_b;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = float64_mul_memory_controller_write_enable_b;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = float64_mul_memory_controller_in_b;
	end
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = float64_mul_memory_controller_in_b;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = float64_mul_memory_controller_in_b;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = float64_mul_memory_controller_in_b;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_size_b[1:0] = float64_mul_memory_controller_size_b;
	end
	/* main: %1*/
	/*   %3 = tail call fastcc i64 @float64_mul(i64 %2, i64 %2) #1*/
	if ((cur_state == LEGUP_function_call_3)) begin
		memory_controller_size_b[1:0] = float64_mul_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = float64_mul_memory_controller_size_b;
	end
	/* main: %5*/
	/*   %9 = tail call fastcc i64 @float64_mul(i64 %diff.0.i, i64 %4) #1*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = float64_mul_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* main: %estimateDiv128To64.exit.thread.i.i*/
	/*   %257 = tail call fastcc i64 @roundAndPackFloat64(i32 %45, i32 %zExp.0.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_228)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* main: %402*/
	/*   %403 = tail call fastcc i64 @roundAndPackFloat64(i32 %259, i32 %zExp.1.i.i.i, i64 %zSig.0.i12.i.i) #1*/
	if ((cur_state == LEGUP_function_call_284)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i.i*/
	/*   %563 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i.i, i32 %560, i64 %562) #1*/
	if ((cur_state == LEGUP_function_call_349)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %586*/
	/*   ret i32 %576*/
	if ((cur_state == LEGUP_F_main_BB__586_363)) begin
		return_val <= main_dfsinexit_576_reg;
		if (start == 1'b0 && ^(main_dfsinexit_576_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
