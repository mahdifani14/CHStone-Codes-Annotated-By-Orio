//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 16:23:11 2017
//----------------------------------------------------------------------------//

allocateRAM: @float_exception_flags
Constant: 0
allocateRAM: @test_in
Constant: 1
allocateRAM: @test_out
Constant: 1
allocateRAM: @countLeadingZeros32.countLeadingZerosHigh
Constant: 1
allocating global ram: @float_exception_flags
allocating global ram: @test_in
allocating global ram: @test_out
allocating global ram: @countLeadingZeros32.countLeadingZerosHigh
# of Vertices: 224
Representatives: 
1 -> 1
2 -> 2
3 -> 3
4 -> 4
5 -> 5
6 -> 6
7 -> 7
8 -> 8
9 -> 9
10 -> 10
11 -> 11
12 -> 12
13 -> 13
14 -> 14
15 -> 15
16 -> 16
17 -> 17
18 -> 18
19 -> 19
20 -> 20
21 -> 21
22 -> 22
23 -> 23
24 -> 24
25 -> 25
26 -> 26
27 -> 27
28 -> 28
29 -> 29
30 -> 30
31 -> 31
32 -> 32
33 -> 33
34 -> 34
35 -> 35
36 -> 36
37 -> 37
38 -> 38
39 -> 39
40 -> 40
41 -> 41
42 -> 42
43 -> 43
44 -> 44
45 -> 45
46 -> 46
47 -> 47
48 -> 48
49 -> 49
50 -> 50
51 -> 51
52 -> 52
53 -> 53
54 -> 54
55 -> 55
56 -> 56
57 -> 57
58 -> 58
59 -> 59
60 -> 60
61 -> 61
62 -> 62
63 -> 63
64 -> 64
65 -> 65
66 -> 66
67 -> 67
68 -> 68
69 -> 69
70 -> 70
71 -> 71
72 -> 72
73 -> 73
74 -> 74
75 -> 75
76 -> 76
77 -> 77
78 -> 78
79 -> 79
80 -> 80
81 -> 81
82 -> 82
83 -> 83
84 -> 84
85 -> 85
86 -> 86
87 -> 87
88 -> 88
89 -> 89
90 -> 90
91 -> 91
92 -> 92
93 -> 93
94 -> 94
95 -> 95
96 -> 96
97 -> 97
98 -> 98
99 -> 99
100 -> 100
101 -> 101
102 -> 102
103 -> 103
104 -> 104
105 -> 105
106 -> 106
107 -> 107
108 -> 108
109 -> 109
110 -> 110
111 -> 111
112 -> 112
113 -> 113
114 -> 114
115 -> 115
116 -> 116
117 -> 117
118 -> 118
119 -> 119
120 -> 120
121 -> 121
122 -> 122
123 -> 123
124 -> 124
125 -> 125
126 -> 126
127 -> 127
128 -> 128
129 -> 129
130 -> 130
131 -> 131
132 -> 132
133 -> 133
134 -> 134
135 -> 135
136 -> 136
137 -> 137
138 -> 138
139 -> 139
140 -> 140
141 -> 141
142 -> 142
143 -> 143
144 -> 144
145 -> 145
146 -> 146
147 -> 147
148 -> 148
149 -> 149
150 -> 150
151 -> 151
152 -> 152
153 -> 153
154 -> 154
155 -> 155
156 -> 156
157 -> 157
158 -> 158
159 -> 159
160 -> 160
161 -> 161
162 -> 162
163 -> 163
164 -> 164
165 -> 165
166 -> 166
167 -> 167
168 -> 168
169 -> 169
170 -> 170
171 -> 171
172 -> 172
173 -> 173
174 -> 174
175 -> 175
176 -> 176
177 -> 177
178 -> 178
179 -> 179
180 -> 180
181 -> 181
182 -> 182
183 -> 183
184 -> 184
185 -> 185
186 -> 186
187 -> 187
188 -> 188
189 -> 189
190 -> 190
191 -> 191
192 -> 192
193 -> 193
194 -> 194
195 -> 195
196 -> 196
197 -> 197
198 -> 198
199 -> 199
200 -> 200
201 -> 201
202 -> 202
203 -> 203
204 -> 204
205 -> 205
206 -> 206
207 -> 207
208 -> 208
209 -> 209
210 -> 210
211 -> 211
212 -> 212
213 -> 213
214 -> 214
215 -> 215
216 -> 216
217 -> 217
218 -> 218
219 -> 219
220 -> 220
221 -> 221
222 -> 222
223 -> 223
224 -> 224

Connections (Graph): 
1 -> 25 26 28 29 70 73 74 112 114 115 117 118 181 185 189 199 200 202 205 217 
2 -> 
3 -> 64 
4 -> 94 
5 -> 220 
6 -> 93 
7 -> 
8 -> 
9 -> 
10 -> 
11 -> 
12 -> 
13 -> 
14 -> 
15 -> 33 41 99 122 130 213 
16 -> 32 40 98 121 129 212 
17 -> 
18 -> 17 
19 -> 
20 -> 19 
21 -> 79 
22 -> 21 
23 -> 
24 -> 23 27 
25 -> 
26 -> 
27 -> 
28 -> 
29 -> 
30 -> 
31 -> 30 
32 -> 
33 -> 36 
34 -> 36 
35 -> 34 
36 -> 37 
37 -> 
38 -> 
39 -> 38 
40 -> 
41 -> 44 
42 -> 44 
43 -> 42 
44 -> 45 
45 -> 
46 -> 60 
47 -> 46 
48 -> 50 
49 -> 48 
50 -> 
51 -> 
52 -> 51 
53 -> 55 
54 -> 53 
55 -> 
56 -> 58 
57 -> 56 
58 -> 59 
59 -> 
60 -> 81 
61 -> 
62 -> 61 
63 -> 24 
64 -> 24 61 
65 -> 
66 -> 65 
67 -> 
68 -> 67 69 
69 -> 
70 -> 
71 -> 
72 -> 71 
73 -> 
74 -> 
75 -> 
76 -> 75 
77 -> 
78 -> 77 
79 -> 
80 -> 79 
81 -> 
82 -> 81 
83 -> 68 
84 -> 79 
85 -> 81 
86 -> 68 
87 -> 79 
88 -> 81 
89 -> 68 
90 -> 68 
91 -> 
92 -> 91 
93 -> 
94 -> 
95 -> 
96 -> 95 97 
97 -> 
98 -> 
99 -> 100 
100 -> 101 
101 -> 
102 -> 104 
103 -> 102 
104 -> 
105 -> 
106 -> 105 
107 -> 
108 -> 107 
109 -> 87 
110 -> 
111 -> 110 113 116 
112 -> 
113 -> 
114 -> 
115 -> 
116 -> 
117 -> 
118 -> 
119 -> 
120 -> 119 
121 -> 
122 -> 125 
123 -> 125 
124 -> 123 
125 -> 126 
126 -> 
127 -> 
128 -> 127 
129 -> 
130 -> 133 
131 -> 133 
132 -> 131 
133 -> 134 
134 -> 
135 -> 
136 -> 135 137 
137 -> 
138 -> 
139 -> 138 
140 -> 
141 -> 140 
142 -> 144 
143 -> 142 
144 -> 
145 -> 149 
146 -> 145 
147 -> 149 
148 -> 147 
149 -> 
150 -> 152 
151 -> 150 
152 -> 
153 -> 
154 -> 153 
155 -> 157 
156 -> 155 
157 -> 
158 -> 160 
159 -> 158 
160 -> 
161 -> 160 
162 -> 
163 -> 162 
164 -> 
165 -> 164 
166 -> 168 
167 -> 166 
168 -> 
169 -> 171 
170 -> 169 
171 -> 
172 -> 84 
173 -> 
174 -> 173 
175 -> 
176 -> 175 
177 -> 
178 -> 177 
179 -> 
180 -> 179 184 188 198 201 204 
181 -> 
182 -> 
183 -> 182 
184 -> 
185 -> 
186 -> 
187 -> 186 203 206 
188 -> 
189 -> 
190 -> 
191 -> 190 192 
192 -> 
193 -> 192 
194 -> 
195 -> 194 
196 -> 
197 -> 196 
198 -> 
199 -> 
200 -> 
201 -> 
202 -> 
203 -> 
204 -> 
205 -> 
206 -> 
207 -> 206 
208 -> 
209 -> 208 
210 -> 
211 -> 210 
212 -> 
213 -> 216 
214 -> 216 
215 -> 214 
216 -> 
217 -> 
218 -> 
219 -> 218 
220 -> 
221 -> 
222 -> 221 
223 -> 
224 -> 223 

Points-to-set: 
1 -> {}
2 -> {1, }
3 -> {}
4 -> {3, }
5 -> {}
6 -> {5, }
7 -> {}
8 -> {7, }
9 -> {}
10 -> {9, }
11 -> {}
12 -> {11, }
13 -> {}
14 -> {13, }
15 -> {}
16 -> {15, }
17 -> {}
18 -> {}
19 -> {}
20 -> {}
21 -> {}
22 -> {}
23 -> {}
24 -> {}
25 -> {}
26 -> {}
27 -> {}
28 -> {}
29 -> {}
30 -> {}
31 -> {}
32 -> {15, }
33 -> {}
34 -> {}
35 -> {}
36 -> {}
37 -> {}
38 -> {}
39 -> {}
40 -> {15, }
41 -> {}
42 -> {}
43 -> {}
44 -> {}
45 -> {}
46 -> {}
47 -> {}
48 -> {}
49 -> {}
50 -> {}
51 -> {}
52 -> {}
53 -> {}
54 -> {}
55 -> {}
56 -> {}
57 -> {}
58 -> {}
59 -> {}
60 -> {}
61 -> {}
62 -> {}
63 -> {}
64 -> {}
65 -> {}
66 -> {}
67 -> {}
68 -> {}
69 -> {}
70 -> {}
71 -> {}
72 -> {}
73 -> {}
74 -> {}
75 -> {}
76 -> {}
77 -> {}
78 -> {}
79 -> {}
80 -> {}
81 -> {}
82 -> {}
83 -> {}
84 -> {}
85 -> {}
86 -> {}
87 -> {}
88 -> {}
89 -> {}
90 -> {}
91 -> {}
92 -> {}
93 -> {5, }
94 -> {3, }
95 -> {}
96 -> {}
97 -> {}
98 -> {15, }
99 -> {}
100 -> {}
101 -> {}
102 -> {}
103 -> {}
104 -> {}
105 -> {}
106 -> {}
107 -> {}
108 -> {}
109 -> {}
110 -> {}
111 -> {}
112 -> {}
113 -> {}
114 -> {}
115 -> {}
116 -> {}
117 -> {}
118 -> {}
119 -> {}
120 -> {}
121 -> {15, }
122 -> {}
123 -> {}
124 -> {}
125 -> {}
126 -> {}
127 -> {}
128 -> {}
129 -> {15, }
130 -> {}
131 -> {}
132 -> {}
133 -> {}
134 -> {}
135 -> {}
136 -> {}
137 -> {}
138 -> {}
139 -> {}
140 -> {}
141 -> {}
142 -> {}
143 -> {}
144 -> {}
145 -> {}
146 -> {}
147 -> {}
148 -> {}
149 -> {}
150 -> {}
151 -> {}
152 -> {}
153 -> {}
154 -> {}
155 -> {}
156 -> {}
157 -> {}
158 -> {}
159 -> {}
160 -> {}
161 -> {}
162 -> {}
163 -> {}
164 -> {}
165 -> {}
166 -> {}
167 -> {}
168 -> {}
169 -> {}
170 -> {}
171 -> {}
172 -> {}
173 -> {}
174 -> {}
175 -> {}
176 -> {}
177 -> {}
178 -> {}
179 -> {}
180 -> {}
181 -> {}
182 -> {}
183 -> {}
184 -> {}
185 -> {}
186 -> {}
187 -> {}
188 -> {}
189 -> {}
190 -> {}
191 -> {}
192 -> {}
193 -> {}
194 -> {}
195 -> {}
196 -> {}
197 -> {}
198 -> {}
199 -> {}
200 -> {}
201 -> {}
202 -> {}
203 -> {}
204 -> {}
205 -> {}
206 -> {}
207 -> {}
208 -> {}
209 -> {}
210 -> {}
211 -> {}
212 -> {15, }
213 -> {}
214 -> {}
215 -> {}
216 -> {}
217 -> {}
218 -> {}
219 -> {}
220 -> {}
221 -> {}
222 -> {}
223 -> {}
224 -> {}

Variable: Int -> Value* mapping
12: @.str2 = private unnamed_addr constant [14 x i8] c"RESULT: PASS\0A\00", align 1
14: @.str3 = private unnamed_addr constant [14 x i8] c"RESULT: FAIL\0A\00", align 1
16: @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
65: 
; Function Attrs: nounwind
define internal fastcc i64 @float64_mul(i64 %a, i64 %b) #0 {
  %1 = and i64 %a, 4503599627370495
  %2 = lshr i64 %a, 52
  %.tr.i = trunc i64 %2 to i32
  %3 = and i32 %.tr.i, 2047
  %4 = and i64 %b, 4503599627370495
  %5 = lshr i64 %b, 52
  %.tr.i17 = trunc i64 %5 to i32
  %6 = and i32 %.tr.i17, 2047
  %7 = xor i64 %b, %a
  %8 = lshr i64 %7, 63
  %9 = trunc i64 %8 to i32
  %10 = icmp eq i32 %3, 2047
  br i1 %10, label %11, label %44

; <label>:11                                      ; preds = %0
  %12 = icmp eq i64 %1, 0
  br i1 %12, label %13, label %16

; <label>:13                                      ; preds = %11
  %14 = icmp eq i32 %6, 2047
  %15 = icmp ne i64 %4, 0
  %or.cond = and i1 %14, %15
  br i1 %or.cond, label %16, label %34

; <label>:16                                      ; preds = %13, %11
  %17 = and i64 %a, 9221120237041090560
  %18 = icmp eq i64 %17, 9218868437227405312
  br i1 %18, label %19, label %float64_is_signaling_nan.exit1.i10

; <label>:19                                      ; preds = %16
  %20 = and i64 %a, 2251799813685247
  %21 = icmp ne i64 %20, 0
  br label %float64_is_signaling_nan.exit1.i10

float64_is_signaling_nan.exit1.i10:               ; preds = %19, %16
  %22 = phi i1 [ false, %16 ], [ %21, %19 ]
  %23 = trunc i64 %b to i63
  %24 = icmp ugt i63 %23, -4503599627370496
  %25 = and i64 %b, 9221120237041090560
  %26 = icmp eq i64 %25, 9218868437227405312
  br i1 %26, label %27, label %float64_is_signaling_nan.exit.i11

; <label>:27                                      ; preds = %float64_is_signaling_nan.exit1.i10
  %28 = and i64 %b, 2251799813685247
  %29 = icmp ne i64 %28, 0
  br label %float64_is_signaling_nan.exit.i11

float64_is_signaling_nan.exit.i11:                ; preds = %27, %float64_is_signaling_nan.exit1.i10
  %30 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10 ], [ %29, %27 ]
  %31 = or i1 %22, %30
  br i1 %31, label %.thread.i12, label %propagateFloat64NaN.exit16

.thread.i12:                                      ; preds = %float64_is_signaling_nan.exit.i11
  %32 = load i32* @float_exception_flags, align 4, !tbaa !1
  %33 = or i32 %32, 16
  store i32 %33, i32* @float_exception_flags, align 4, !tbaa !1
  br label %propagateFloat64NaN.exit16

propagateFloat64NaN.exit16:                       ; preds = %.thread.i12, %float64_is_signaling_nan.exit.i11
  %.sink.i13 = phi i1 [ %30, %.thread.i12 ], [ %24, %float64_is_signaling_nan.exit.i11 ]
  %.mux2.v.i14 = select i1 %.sink.i13, i64 %b, i64 %a
  %.mux2.i15 = or i64 %.mux2.v.i14, 2251799813685248
  br label %158

; <label>:34                                      ; preds = %13
  %35 = zext i32 %6 to i64
  %36 = or i64 %35, %4
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %41

; <label>:38                                      ; preds = %34
  %39 = load i32* @float_exception_flags, align 4, !tbaa !1
  %40 = or i32 %39, 16
  store i32 %40, i32* @float_exception_flags, align 4, !tbaa !1
  br label %158

; <label>:41                                      ; preds = %34
  %42 = shl nuw i64 %8, 63
  %43 = or i64 %42, 9218868437227405312
  br label %158

; <label>:44                                      ; preds = %0
  %45 = icmp eq i32 %6, 2047
  br i1 %45, label %46, label %76

; <label>:46                                      ; preds = %44
  %47 = icmp eq i64 %4, 0
  br i1 %47, label %66, label %48

; <label>:48                                      ; preds = %46
  %49 = and i64 %a, 9221120237041090560
  %50 = icmp eq i64 %49, 9218868437227405312
  br i1 %50, label %51, label %float64_is_signaling_nan.exit1.i

; <label>:51                                      ; preds = %48
  %52 = and i64 %a, 2251799813685247
  %53 = icmp ne i64 %52, 0
  br label %float64_is_signaling_nan.exit1.i

float64_is_signaling_nan.exit1.i:                 ; preds = %51, %48
  %54 = phi i1 [ false, %48 ], [ %53, %51 ]
  %55 = trunc i64 %b to i63
  %56 = icmp ugt i63 %55, -4503599627370496
  %57 = and i64 %b, 9221120237041090560
  %58 = icmp eq i64 %57, 9218868437227405312
  br i1 %58, label %59, label %float64_is_signaling_nan.exit.i

; <label>:59                                      ; preds = %float64_is_signaling_nan.exit1.i
  %60 = and i64 %b, 2251799813685247
  %61 = icmp ne i64 %60, 0
  br label %float64_is_signaling_nan.exit.i

float64_is_signaling_nan.exit.i:                  ; preds = %59, %float64_is_signaling_nan.exit1.i
  %62 = phi i1 [ false, %float64_is_signaling_nan.exit1.i ], [ %61, %59 ]
  %63 = or i1 %54, %62
  br i1 %63, label %.thread.i, label %propagateFloat64NaN.exit

.thread.i:                                        ; preds = %float64_is_signaling_nan.exit.i
  %64 = load i32* @float_exception_flags, align 4, !tbaa !1
  %65 = or i32 %64, 16
  store i32 %65, i32* @float_exception_flags, align 4, !tbaa !1
  br label %propagateFloat64NaN.exit

propagateFloat64NaN.exit:                         ; preds = %.thread.i, %float64_is_signaling_nan.exit.i
  %.sink.i = phi i1 [ %62, %.thread.i ], [ %56, %float64_is_signaling_nan.exit.i ]
  %.mux2.v.i = select i1 %.sink.i, i64 %b, i64 %a
  %.mux2.i = or i64 %.mux2.v.i, 2251799813685248
  br label %158

; <label>:66                                      ; preds = %46
  %67 = zext i32 %3 to i64
  %68 = or i64 %67, %1
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %73

; <label>:70                                      ; preds = %66
  %71 = load i32* @float_exception_flags, align 4, !tbaa !1
  %72 = or i32 %71, 16
  store i32 %72, i32* @float_exception_flags, align 4, !tbaa !1
  br label %158

; <label>:73                                      ; preds = %66
  %74 = shl nuw i64 %8, 63
  %75 = or i64 %74, 9218868437227405312
  br label %158

; <label>:76                                      ; preds = %44
  %77 = icmp eq i32 %3, 0
  br i1 %77, label %78, label %100

; <label>:78                                      ; preds = %76
  %79 = icmp eq i64 %1, 0
  br i1 %79, label %80, label %82

; <label>:80                                      ; preds = %78
  %81 = shl nuw i64 %8, 63
  br label %158

; <label>:82                                      ; preds = %78
  %83 = icmp ult i64 %1, 4294967296
  %84 = lshr i64 %1, 32
  %a.sink.i.i2 = select i1 %83, i64 %a, i64 %84
  %shiftCount.0.i.i3 = select i1 %83, i32 32, i32 0
  %extract.t.i.i4 = trunc i64 %a.sink.i.i2 to i32
  %85 = icmp ult i32 %extract.t.i.i4, 65536
  %86 = shl i32 %extract.t.i.i4, 16
  %.a.i.i.i5 = select i1 %85, i32 %86, i32 %extract.t.i.i4
  %..i.i.i6 = select i1 %85, i32 16, i32 0
  %87 = icmp ult i32 %.a.i.i.i5, 16777216
  br i1 %87, label %88, label %normalizeFloat64Subnormal.exit9

; <label>:88                                      ; preds = %82
  %89 = or i32 %..i.i.i6, 8
  %90 = shl i32 %.a.i.i.i5, 8
  br label %normalizeFloat64Subnormal.exit9

normalizeFloat64Subnormal.exit9:                  ; preds = %88, %82
  %.1.i.i.i7 = phi i32 [ %90, %88 ], [ %.a.i.i.i5, %82 ]
  %shiftCount.1.i.i.i8 = phi i32 [ %89, %88 ], [ %..i.i.i6, %82 ]
  %91 = lshr i32 %.1.i.i.i7, 24
  %92 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %91
  %93 = load i32* %92, align 4, !tbaa !1
  %94 = add nsw i32 %shiftCount.1.i.i.i8, %shiftCount.0.i.i3
  %95 = add i32 %94, %93
  %96 = add nsw i32 %95, -11
  %97 = zext i32 %96 to i64
  %98 = shl i64 %1, %97
  %99 = sub i32 12, %95
  br label %100

; <label>:100                                     ; preds = %normalizeFloat64Subnormal.exit9, %76
  %101 = phi i32 [ %99, %normalizeFloat64Subnormal.exit9 ], [ %3, %76 ]
  %102 = phi i64 [ %98, %normalizeFloat64Subnormal.exit9 ], [ %1, %76 ]
  %103 = icmp eq i32 %6, 0
  br i1 %103, label %104, label %126

; <label>:104                                     ; preds = %100
  %105 = icmp eq i64 %4, 0
  br i1 %105, label %106, label %108

; <label>:106                                     ; preds = %104
  %107 = shl nuw i64 %8, 63
  br label %158

; <label>:108                                     ; preds = %104
  %109 = icmp ult i64 %4, 4294967296
  %110 = lshr i64 %4, 32
  %a.sink.i.i = select i1 %109, i64 %b, i64 %110
  %shiftCount.0.i.i = select i1 %109, i32 32, i32 0
  %extract.t.i.i = trunc i64 %a.sink.i.i to i32
  %111 = icmp ult i32 %extract.t.i.i, 65536
  %112 = shl i32 %extract.t.i.i, 16
  %.a.i.i.i = select i1 %111, i32 %112, i32 %extract.t.i.i
  %..i.i.i = select i1 %111, i32 16, i32 0
  %113 = icmp ult i32 %.a.i.i.i, 16777216
  br i1 %113, label %114, label %normalizeFloat64Subnormal.exit

; <label>:114                                     ; preds = %108
  %115 = or i32 %..i.i.i, 8
  %116 = shl i32 %.a.i.i.i, 8
  br label %normalizeFloat64Subnormal.exit

normalizeFloat64Subnormal.exit:                   ; preds = %114, %108
  %.1.i.i.i = phi i32 [ %116, %114 ], [ %.a.i.i.i, %108 ]
  %shiftCount.1.i.i.i = phi i32 [ %115, %114 ], [ %..i.i.i, %108 ]
  %117 = lshr i32 %.1.i.i.i, 24
  %118 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %117
  %119 = load i32* %118, align 4, !tbaa !1
  %120 = add nsw i32 %shiftCount.1.i.i.i, %shiftCount.0.i.i
  %121 = add i32 %120, %119
  %122 = add nsw i32 %121, -11
  %123 = zext i32 %122 to i64
  %124 = shl i64 %4, %123
  %125 = sub i32 12, %121
  br label %126

; <label>:126                                     ; preds = %normalizeFloat64Subnormal.exit, %100
  %127 = phi i32 [ %125, %normalizeFloat64Subnormal.exit ], [ %6, %100 ]
  %128 = phi i64 [ %124, %normalizeFloat64Subnormal.exit ], [ %4, %100 ]
  %129 = add nsw i32 %127, %101
  %130 = shl i64 %102, 10
  %131 = shl i64 %128, 11
  %132 = lshr i64 %102, 22
  %133 = and i64 %132, 3221225471
  %134 = or i64 %133, 1073741824
  %135 = lshr i64 %128, 21
  %136 = and i64 %135, 2147483647
  %137 = or i64 %136, 2147483648
  %138 = and i64 %130, 4294966272
  %139 = and i64 %131, 4294965248
  %140 = mul i64 %139, %138
  %141 = mul i64 %137, %138
  %142 = mul i64 %139, %134
  %143 = mul i64 %137, %134
  %overflow_intrinsic = zext i64 %141 to i65
  %overflow_intrinsic1 = zext i64 %142 to i65
  %overflow_intrinsic2 = add nuw i65 %overflow_intrinsic, %overflow_intrinsic1
  %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64
  %144 = lshr i65 %overflow_intrinsic2, 32
  %.tr = trunc i65 %144 to i64
  %145 = and i64 %.tr, 4294967296
  %146 = lshr i64 %overflow_intrinsic_sum, 32
  %147 = or i64 %145, %146
  %148 = shl i64 %overflow_intrinsic_sum, 32
  %overflow_intrinsic4 = zext i64 %140 to i65
  %overflow_intrinsic5 = zext i64 %148 to i65
  %overflow_intrinsic6 = add nuw i65 %overflow_intrinsic4, %overflow_intrinsic5
  %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64
  %overflow_intrinsic8 = lshr i65 %overflow_intrinsic6, 64
  %149 = trunc i65 %overflow_intrinsic8 to i64
  %150 = add i64 %149, %143
  %151 = add i64 %150, %147
  %152 = icmp ne i64 %overflow_intrinsic_sum7, 0
  %153 = zext i1 %152 to i64
  %154 = or i64 %151, %153
  %155 = shl i64 %154, 1
  %156 = icmp sgt i64 %155, -1
  %. = select i1 %156, i64 %155, i64 %154
  %.18.v = select i1 %156, i32 -1024, i32 -1023
  %.18 = add i32 %129, %.18.v
  %157 = tail call fastcc i64 @roundAndPackFloat64(i32 %9, i32 %.18, i64 %.) #1
  br label %158

; <label>:158                                     ; preds = %126, %106, %80, %73, %70, %propagateFloat64NaN.exit, %41, %38, %propagateFloat64NaN.exit16
  %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]
  ret i64 %.0
}

4: @test_in = internal unnamed_addr constant [36 x i64] [i64 0, i64 4595456230317446593, i64 4599959829944817089, i64 4602891377065459793, i64 4604463429572187585, i64 4606035482078915377, i64 4607394976692830289, i64 4608181002946194185, i64 4608967029199558081, i64 4609753055452921977, i64 4610539081706285873, i64 4611325107959649769, i64 4611898576320200785, i64 4612291589446882733, i64 4612684602573564681, i64 4613077615700246629, i64 4613470628826928577, i64 4613863641953610525, i64 4614256655080292473, i64 4614649668206974421, i64 4615042681333656369, i64 4615435694460338317, i64 4615828707587020265, i64 4616205669384230307, i64 4616402175947571281, i64 4616598682510912255, i64 4616795189074253229, i64 4616991695637594203, i64 4617188202200935177, i64 4617384708764276151, i64 4617581215327617125, i64 4617777721890958099, i64 4617974228454299073, i64 4618170735017640047, i64 4618367241580981021, i64 4618563748144321995], align 8
6: @test_out = internal unnamed_addr constant [36 x i64] [i64 0, i64 4595424353983311309, i64 4599832905844899646, i64 4602678817326738065, i64 4603964934626362083, i64 4605075133481489574, i64 4605975682307795949, i64 4606639217416480941, i64 4607045578640063168, i64 4607182418293282730, i64 4607045579801131401, i64 4606639219569943220, i64 4605975685322773549, i64 4605075138685085801, i64 4603964939033565416, i64 4602678823104758728, i64 4599832915021762757, i64 4595424366569280812, i64 4514487953518840721, i64 -4627947708347468932, i64 -4623539145043636418, i64 -4620693229337249429, i64 -4619407106423282733, i64 -4618296906397976555, i64 -4617396355889189326, i64 -4616732821607866025, i64 -4616326459558573316, i64 -4616189619079881585, i64 -4616326458420041750, i64 -4616732815165379033, i64 -4617396348504650934, i64 -4618296894661077119, i64 -4619407090579186346, i64 -4620693208604826867, i64 -4623539110082393353, i64 -4627947641781066787], align 8
8: @.str = private unnamed_addr constant [47 x i8] c"input=%016llx expected=%016llx output=%016llx\0A\00", align 1
10: @.str1 = private unnamed_addr constant [12 x i8] c"Result: %d\0A\00", align 1
91: 
; Function Attrs: nounwind
define internal fastcc i64 @roundAndPackFloat64(i32 %zSign, i32 %zExp, i64 %zSig) #0 {
  %.tr = trunc i64 %zSig to i32
  %1 = and i32 %.tr, 1023
  %2 = and i32 %zExp, 65535
  %3 = icmp ugt i32 %2, 2044
  br i1 %3, label %4, label %.thread

; <label>:4                                       ; preds = %0
  %5 = icmp sgt i32 %zExp, 2045
  br i1 %5, label %11, label %6

; <label>:6                                       ; preds = %4
  %7 = icmp eq i32 %zExp, 2045
  br i1 %7, label %8, label %17

; <label>:8                                       ; preds = %6
  %9 = add i64 %zSig, 512
  %10 = icmp slt i64 %9, 0
  br i1 %10, label %11, label %.thread

; <label>:11                                      ; preds = %8, %4
  %12 = load i32* @float_exception_flags, align 4, !tbaa !1
  %13 = or i32 %12, 9
  store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1
  %14 = zext i32 %zSign to i64
  %15 = shl i64 %14, 63
  %16 = or i64 %15, 9218868437227405312
  br label %57

; <label>:17                                      ; preds = %6
  %18 = icmp slt i32 %zExp, 0
  br i1 %18, label %19, label %.thread

; <label>:19                                      ; preds = %17
  %20 = icmp sgt i32 %zExp, -64
  br i1 %20, label %21, label %31

; <label>:21                                      ; preds = %19
  %22 = sub nsw i32 0, %zExp
  %23 = zext i32 %22 to i64
  %24 = lshr i64 %zSig, %23
  %25 = and i32 %zExp, 63
  %26 = zext i32 %25 to i64
  %27 = shl i64 %zSig, %26
  %28 = icmp ne i64 %27, 0
  %29 = zext i1 %28 to i64
  %30 = or i64 %29, %24
  br label %shift64RightJamming.exit

; <label>:31                                      ; preds = %19
  %32 = icmp ne i64 %zSig, 0
  %33 = zext i1 %32 to i64
  br label %shift64RightJamming.exit

shift64RightJamming.exit:                         ; preds = %31, %21
  %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]
  %.tr3 = trunc i64 %z.0.i to i32
  %34 = and i32 %.tr3, 1023
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %.thread6, label %36

; <label>:36                                      ; preds = %shift64RightJamming.exit
  %37 = load i32* @float_exception_flags, align 4, !tbaa !1
  %38 = or i32 %37, 4
  store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1
  br label %.thread

.thread:                                          ; preds = %36, %17, %8, %0
  %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]
  %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]
  %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]
  %39 = icmp eq i32 %roundBits.0, 0
  br i1 %39, label %.thread6, label %40

; <label>:40                                      ; preds = %.thread
  %41 = load i32* @float_exception_flags, align 4, !tbaa !1
  %42 = or i32 %41, 1
  store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1
  br label %.thread6

.thread6:                                         ; preds = %40, %.thread, %shift64RightJamming.exit
  %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]
  %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]
  %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]
  %43 = add i64 %zSig57, 512
  %44 = lshr i64 %43, 10
  %45 = icmp eq i32 %roundBits.09, 512
  %46 = zext i1 %45 to i32
  %47 = xor i32 %46, -1
  %48 = sext i32 %47 to i64
  %49 = and i64 %44, %48
  %50 = icmp eq i64 %49, 0
  %51 = zext i32 %zSign to i64
  %52 = shl i64 %51, 63
  %53 = zext i32 %.028 to i64
  %.op = shl i64 %53, 52
  %54 = select i1 %50, i64 0, i64 %.op
  %55 = or i64 %49, %52
  %56 = add i64 %54, %55
  br label %57

; <label>:57                                      ; preds = %.thread6, %11
  %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]
  ret i64 %.0
}

79: i32 %zSign
81: i32 %zExp
68: i64 %zSig
2: @float_exception_flags = internal unnamed_addr global i32 0, align 4
67:   %.tr = trunc i64 %zSig to i32
69:   %9 = add i64 %zSig, 512
70:   %12 = load i32* @float_exception_flags, align 4, !tbaa !1
61: i64 %a
24: i64 %b
20:   %5 = lshr i64 %b, 52
19:   %.tr.i17 = trunc i64 %5 to i32
22:   %8 = lshr i64 %7, 63
21:   %9 = trunc i64 %8 to i32
25:   %32 = load i32* @float_exception_flags, align 4, !tbaa !1
18:   %2 = lshr i64 %a, 52
17:   %.tr.i = trunc i64 %2 to i32
31:   %a.sink.i.i2 = select i1 %83, i64 %a, i64 %84
30:   %extract.t.i.i4 = trunc i64 %a.sink.i.i2 to i32
35:   %shiftCount.1.i.i.i8 = phi i32 [ %89, %88 ], [ %..i.i.i6, %82 ]
23:   %23 = trunc i64 %b to i63
47:   %127 = phi i32 [ %125, %normalizeFloat64Subnormal.exit ], [ %6, %100 ]
46:   %129 = add nsw i32 %127, %101
49:   %overflow_intrinsic = zext i64 %141 to i65
48:   %overflow_intrinsic2 = add nuw i65 %overflow_intrinsic, %overflow_intrinsic1
50:   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64
52:   %144 = lshr i65 %overflow_intrinsic2, 32
51:   %.tr = trunc i65 %144 to i64
26:   %39 = load i32* @float_exception_flags, align 4, !tbaa !1
27:   %55 = trunc i64 %b to i63
28:   %64 = load i32* @float_exception_flags, align 4, !tbaa !1
29:   %71 = load i32* @float_exception_flags, align 4, !tbaa !1
224:   %i.01 = phi i32 [ 0, %0 ], [ %578, %dfsin.exit ]
93:   %scevgep = getelementptr [36 x i64]* @test_out, i32 0, i32 %i.01
94:   %scevgep6 = getelementptr [36 x i64]* @test_in, i32 0, i32 %i.01
64:   %2 = load i64* %scevgep6, align 8, !tbaa !1
63:   %4 = xor i64 %3, -9223372036854775808
219:   %indvar = phi i32 [ %indvar.next, %float64_ge.exit.i ], [ 0, %1 ]
62:   %diff.0.i = phi i64 [ %.0.i1.i, %float64_ge.exit.i ], [ %2, %1 ]
96:   %6 = shl i32 %indvar, 1
95:   %7 = add i32 %6, 2
97:   %8 = add i32 %6, 3
98:   %23 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %22
99:   %24 = load i32* %23, align 4, !tbaa !5
100:   %25 = add nsw i32 %24, %shiftCount.1.i.i.i
101:   %26 = add nsw i32 %25, 21
32:   %92 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %91
33:   %93 = load i32* %92, align 4, !tbaa !1
34:   %94 = add nsw i32 %shiftCount.1.i.i.i8, %shiftCount.0.i.i3
36:   %95 = add i32 %94, %93
37:   %96 = add nsw i32 %95, -11
139:   %209 = sub i64 %.neg3.i.i.i, %205
138:   %210 = add i64 %209, %.neg.i.i.i.i
39:   %a.sink.i.i = select i1 %109, i64 %b, i64 %110
38:   %extract.t.i.i = trunc i64 %a.sink.i.i to i32
43:   %shiftCount.1.i.i.i = phi i32 [ %115, %114 ], [ %..i.i.i, %108 ]
40:   %118 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %117
41:   %119 = load i32* %118, align 4, !tbaa !1
42:   %120 = add nsw i32 %shiftCount.1.i.i.i, %shiftCount.0.i.i
44:   %121 = add i32 %120, %119
45:   %122 = add nsw i32 %121, -11
89:   %zSig.1.i.i = phi i64 [ %256, %._crit_edge.i.i ], [ %228, %estimateDiv128To64.exit.i.i ], [ -1, %189 ]
180:   %.0.i1.i = phi i64 [ %.mux2.i22.i.i, %propagateFloat64NaN.exit23.i.i ], [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ 9223372036854775807, %89 ], [ %94, %92 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %117, %116 ], [ 9223372036854775807, %125 ], [ %130, %127 ], [ %156, %155 ], [ %257, %estimateDiv128To64.exit.thread.i.i ]
172:   %258 = lshr i64 %app.0.i, 63
84:   %259 = trunc i64 %258 to i32
174:   %260 = lshr i64 %.0.i1.i, 63
173:   %261 = trunc i64 %260 to i32
176:   %263 = lshr i64 %app.0.i, 52
175:   %.tr.i.i1.i.i = trunc i64 %263 to i32
178:   %265 = lshr i64 %.0.i1.i, 52
177:   %.tr.i17.i.i.i = trunc i64 %265 to i32
187:   %267 = sub nsw i32 %264, %266
191:   %272 = and i64 %271, 2305843009213693440
179:   %285 = trunc i64 %.0.i1.i to i63
181:   %294 = load i32* @float_exception_flags, align 4, !tbaa !5
54:   %overflow_intrinsic4 = zext i64 %140 to i65
53:   %overflow_intrinsic6 = add nuw i65 %overflow_intrinsic4, %overflow_intrinsic5
55:   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64
57:   %overflow_intrinsic8 = lshr i65 %overflow_intrinsic6, 64
56:   %149 = trunc i65 %overflow_intrinsic8 to i64
58:   %150 = add i64 %149, %143
59:   %151 = add i64 %150, %147
90:   %. = select i1 %156, i64 %155, i64 %154
60:   %.18 = add i32 %129, %.18.v
66:   %.0 = phi i64 [ %.mux2.i15, %propagateFloat64NaN.exit16 ], [ 9223372036854775807, %38 ], [ %43, %41 ], [ %.mux2.i, %propagateFloat64NaN.exit ], [ 9223372036854775807, %70 ], [ %75, %73 ], [ %81, %80 ], [ %107, %106 ], [ %157, %126 ]
72:   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]
71:   %.tr3 = trunc i64 %z.0.i to i32
73:   %37 = load i32* @float_exception_flags, align 4, !tbaa !1
74:   %41 = load i32* @float_exception_flags, align 4, !tbaa !1
76:   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]
75:   %43 = add i64 %zSig57, 512
78:   %54 = select i1 %50, i64 0, i64 %.op
77:   %56 = add i64 %54, %55
92:   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]
103:   %30 = shl i64 %27, %29
102:   %35 = add i64 %30, %32
104:   %36 = add i64 %35, %34
111:   %.0.i.i = phi i64 [ %36, %countLeadingZeros32.exit.i.i ], [ 0, %5 ]
106:   %38 = lshr i64 %9, 52
105:   %.tr.i.i.i = trunc i64 %38 to i32
108:   %41 = lshr i64 %.0.i.i, 52
107:   %.tr.i24.i.i = trunc i64 %41 to i32
109:   %44 = lshr i64 %43, 63
87:   %45 = trunc i64 %44 to i32
110:   %56 = trunc i64 %.0.i.i to i63
112:   %65 = load i32* @float_exception_flags, align 4, !tbaa !5
113:   %78 = trunc i64 %.0.i.i to i63
114:   %87 = load i32* @float_exception_flags, align 4, !tbaa !5
115:   %90 = load i32* @float_exception_flags, align 4, !tbaa !5
116:   %105 = trunc i64 %.0.i.i to i63
117:   %114 = load i32* @float_exception_flags, align 4, !tbaa !5
118:   %124 = load i32* @float_exception_flags, align 4, !tbaa !5
120:   %a.sink.i.i2.i.i = select i1 %132, i64 %.0.i.i, i64 %133
119:   %extract.t.i.i4.i.i = trunc i64 %a.sink.i.i2.i.i to i32
124:   %shiftCount.1.i.i.i8.i.i = phi i32 [ %138, %137 ], [ %..i.i.i6.i.i, %131 ]
121:   %141 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %140
122:   %142 = load i32* %141, align 4, !tbaa !5
123:   %143 = add nsw i32 %shiftCount.1.i.i.i8.i.i, %shiftCount.0.i.i3.i.i
125:   %144 = add i32 %143, %142
126:   %145 = add nsw i32 %144, -11
128:   %a.sink.i.i.i.i = select i1 %158, i64 %9, i64 %159
127:   %extract.t.i.i.i.i = trunc i64 %a.sink.i.i.i.i to i32
132:   %shiftCount.1.i.i.i.i.i = phi i32 [ %164, %163 ], [ %..i.i.i.i.i, %157 ]
129:   %167 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %166
130:   %168 = load i32* %167, align 4, !tbaa !5
131:   %169 = add nsw i32 %shiftCount.1.i.i.i.i.i, %shiftCount.0.i.i.i.i
133:   %170 = add i32 %169, %168
134:   %171 = add nsw i32 %170, -11
136:   %178 = sub nsw i32 %176, %150
135:   %179 = add nsw i32 %178, 1021
137:   %188 = add nsw i32 %178, 1022
88:   %zExp.0.i.i = phi i32 [ %188, %186 ], [ %179, %175 ]
190:   %388 = add nuw nsw i64 %272, %270
193:   %393 = or i64 %270, 4611686018427387904
192:   %394 = add nuw i64 %393, %272
195:   %397 = or i64 %395, 2305843009213693952
194:   %398 = add i64 %397, %396
197:   %401 = sext i1 %not..i.i.i to i32
196:   %zExp.0..i.i.i = add nsw i32 %401, %zExp.0.i11.i.i
85:   %zExp.1.i.i.i = phi i32 [ %264, %392 ], [ %zExp.0..i.i.i, %shift64RightJamming.exit9.i.i.i ]
86:   %zSig.0.i12.i.i = phi i64 [ %394, %392 ], [ %..i.i2.i, %shift64RightJamming.exit9.i.i.i ]
141:   %z.05.i.i.i = phi i64 [ %200, %.lr.ph.i.i.i ], [ %216, %213 ]
146:   %215 = phi i64 [ %210, %.lr.ph.i.i.i ], [ %219, %213 ]
140:   %216 = add i64 %z.05.i.i.i, -4294967296
143:   %overflow_intrinsic = zext i64 %214 to i65
142:   %overflow_intrinsic2 = add nuw i65 %overflow_intrinsic, %overflow_intrinsic1
144:   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64
148:   %overflow_intrinsic3 = lshr i65 %overflow_intrinsic2, 64
145:   %217 = add i64 %215, %193
147:   %218 = trunc i65 %overflow_intrinsic3 to i64
149:   %219 = add i64 %217, %218
151:   %overflow_intrinsic4 = zext i64 %235 to i65
150:   %overflow_intrinsic6 = add nuw i65 %overflow_intrinsic4, %overflow_intrinsic5
152:   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64
154:   %238 = lshr i65 %overflow_intrinsic6, 32
153:   %.tr = trunc i65 %238 to i64
156:   %overflow_intrinsic10 = zext i64 %234 to i65
155:   %overflow_intrinsic12 = add nuw i65 %overflow_intrinsic10, %overflow_intrinsic11
157:   %overflow_intrinsic_sum13 = trunc i65 %overflow_intrinsic12 to i64
159:   %sext = ashr i65 %overflow_intrinsic12, 64
158:   %.neg26.i.i = trunc i65 %sext to i64
161:   %.neg28.i.i = sub i64 %190, %237
160:   %.neg30.i.i = add i64 %.neg28.i.i, %.neg26.i.i
163:   %245 = sub i64 %.neg30.i.i, %241
162:   %246 = add i64 %245, %.neg.i.i.i
165:   %zSig.034.i.i = phi i64 [ %250, %.lr.ph.i.i ], [ %228, %.lr.ph.i.i.preheader ]
164:   %250 = add i64 %zSig.034.i.i, -1
167:   %overflow_intrinsic16 = zext i64 %248 to i65
166:   %overflow_intrinsic18 = add nuw i65 %overflow_intrinsic16, %overflow_intrinsic17
168:   %overflow_intrinsic_sum19 = trunc i65 %overflow_intrinsic18 to i64
170:   %overflow_intrinsic20 = lshr i65 %overflow_intrinsic18, 64
169:   %251 = trunc i65 %overflow_intrinsic20 to i64
171:   %252 = add i64 %251, %249
183:   %300 = sext i1 %297 to i32
182:   %expDiff.0.i2.i.i = add nsw i32 %300, %267
184:   %330 = trunc i64 %.0.i1.i to i63
185:   %339 = load i32* @float_exception_flags, align 4, !tbaa !5
186:   %expDiff.1.i3.i.i = add nsw i32 %267, %348
188:   %376 = trunc i64 %.0.i1.i to i63
189:   %385 = load i32* @float_exception_flags, align 4, !tbaa !5
198:   %423 = trunc i64 %.0.i1.i to i63
199:   %432 = load i32* @float_exception_flags, align 4, !tbaa !5
200:   %435 = load i32* @float_exception_flags, align 4, !tbaa !5
201:   %453 = trunc i64 %.0.i1.i to i63
202:   %462 = load i32* @float_exception_flags, align 4, !tbaa !5
203:   %expDiff.0.i.i.i = add nsw i32 %267, %473
204:   %507 = trunc i64 %.0.i1.i to i63
205:   %516 = load i32* @float_exception_flags, align 4, !tbaa !5
207:   %522 = sext i1 %519 to i32
206:   %expDiff.1.i.i.i = add nsw i32 %522, %267
80:   %.0.i.i.i = phi i32 [ %259, %540 ], [ %495, %491 ]
209:   %zExp.0.i.i.i = phi i32 [ %aExp.1.i.i.i, %540 ], [ %bExp.1.i.i.i, %491 ]
208:   %545 = add nsw i32 %zExp.0.i.i.i, -1
211:   %a.sink.i.i.i.i.i = select i1 %546, i64 %zSig.0.i.i.i, i64 %547
210:   %extract.t.i.i.i.i.i = trunc i64 %a.sink.i.i.i.i.i to i32
215:   %shiftCount.1.i.i.i.i.i.i = phi i32 [ %552, %551 ], [ %..i.i.i.i.i.i, %544 ]
212:   %555 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %554
213:   %556 = load i32* %555, align 4, !tbaa !5
214:   %558 = add nsw i32 %shiftCount.1.i.i.i.i.i.i, %557
216:   %559 = add i32 %558, %556
82:   %560 = sub i32 %545, %559
83:   %562 = shl i64 %zSig.0.i.i.i, %561
217:   %569 = load i32* @float_exception_flags, align 4, !tbaa !5
218:   %indvar.next = add i32 %indvar, 1
220:   %573 = load i64* %scevgep, align 8, !tbaa !1
222:   %575 = zext i1 %574 to i32
221:   %576 = add nsw i32 %575, %main_result.02
223:   %578 = add nsw i32 %i.01, 1
Memory: Int -> Value* mapping
11: @.str2 = private unnamed_addr constant [14 x i8] c"RESULT: PASS\0A\00", align 1
13: @.str3 = private unnamed_addr constant [14 x i8] c"RESULT: FAIL\0A\00", align 1
15: @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
3: @test_in = internal unnamed_addr constant [36 x i64] [i64 0, i64 4595456230317446593, i64 4599959829944817089, i64 4602891377065459793, i64 4604463429572187585, i64 4606035482078915377, i64 4607394976692830289, i64 4608181002946194185, i64 4608967029199558081, i64 4609753055452921977, i64 4610539081706285873, i64 4611325107959649769, i64 4611898576320200785, i64 4612291589446882733, i64 4612684602573564681, i64 4613077615700246629, i64 4613470628826928577, i64 4613863641953610525, i64 4614256655080292473, i64 4614649668206974421, i64 4615042681333656369, i64 4615435694460338317, i64 4615828707587020265, i64 4616205669384230307, i64 4616402175947571281, i64 4616598682510912255, i64 4616795189074253229, i64 4616991695637594203, i64 4617188202200935177, i64 4617384708764276151, i64 4617581215327617125, i64 4617777721890958099, i64 4617974228454299073, i64 4618170735017640047, i64 4618367241580981021, i64 4618563748144321995], align 8
5: @test_out = internal unnamed_addr constant [36 x i64] [i64 0, i64 4595424353983311309, i64 4599832905844899646, i64 4602678817326738065, i64 4603964934626362083, i64 4605075133481489574, i64 4605975682307795949, i64 4606639217416480941, i64 4607045578640063168, i64 4607182418293282730, i64 4607045579801131401, i64 4606639219569943220, i64 4605975685322773549, i64 4605075138685085801, i64 4603964939033565416, i64 4602678823104758728, i64 4599832915021762757, i64 4595424366569280812, i64 4514487953518840721, i64 -4627947708347468932, i64 -4623539145043636418, i64 -4620693229337249429, i64 -4619407106423282733, i64 -4618296906397976555, i64 -4617396355889189326, i64 -4616732821607866025, i64 -4616326459558573316, i64 -4616189619079881585, i64 -4616326458420041750, i64 -4616732815165379033, i64 -4617396348504650934, i64 -4618296894661077119, i64 -4619407090579186346, i64 -4620693208604826867, i64 -4623539110082393353, i64 -4627947641781066787], align 8
7: @.str = private unnamed_addr constant [47 x i8] c"input=%016llx expected=%016llx output=%016llx\0A\00", align 1
9: @.str1 = private unnamed_addr constant [12 x i8] c"Result: %d\0A\00", align 1
1: @float_exception_flags = internal unnamed_addr global i32 0, align 4
digraph "dfsin.bc" {
    1 [label="#1",color=blue,style=solid];
    2 [label="float_exception_flags",color=blue,style=solid];
    3 [label="#3",color=blue,style=solid];
    4 [label="test_in",color=blue,style=solid];
    5 [label="#5",color=blue,style=solid];
    6 [label="test_out",color=blue,style=solid];
    7 [label="#7",color=blue,style=solid];
    8 [label=".str",color=blue,style=solid];
    9 [label="#9",color=blue,style=solid];
    10 [label=".str1",color=blue,style=solid];
    11 [label="#11",color=blue,style=solid];
    12 [label=".str2",color=blue,style=solid];
    13 [label="#13",color=blue,style=solid];
    14 [label=".str3",color=blue,style=solid];
    15 [label="#15",color=blue,style=solid];
    16 [label="countLeadingZeros32.countLeadingZerosHigh",color=blue,style=solid];
    17 [label=".tr.i",color=blue,style=solid];
    18 [label="unknown",color=blue,style=solid];
    19 [label=".tr.i17",color=blue,style=solid];
    20 [label="unknown",color=blue,style=solid];
    21 [label="unknown",color=blue,style=solid];
    22 [label="unknown",color=blue,style=solid];
    23 [label="unknown",color=blue,style=solid];
    24 [label="b",color=blue,style=solid];
    25 [label="unknown",color=blue,style=solid];
    26 [label="unknown",color=blue,style=solid];
    27 [label="unknown",color=blue,style=solid];
    28 [label="unknown",color=blue,style=solid];
    29 [label="unknown",color=blue,style=solid];
    30 [label="extract.t.i.i4",color=blue,style=solid];
    31 [label="a.sink.i.i2",color=blue,style=solid];
    32 [label="unknown",color=blue,style=solid];
    33 [label="unknown",color=blue,style=solid];
    34 [label="unknown",color=blue,style=solid];
    35 [label="shiftCount.1.i.i.i8",color=blue,style=solid];
    36 [label="unknown",color=blue,style=solid];
    37 [label="unknown",color=blue,style=solid];
    38 [label="extract.t.i.i",color=blue,style=solid];
    39 [label="a.sink.i.i",color=blue,style=solid];
    40 [label="unknown",color=blue,style=solid];
    41 [label="unknown",color=blue,style=solid];
    42 [label="unknown",color=blue,style=solid];
    43 [label="shiftCount.1.i.i.i",color=blue,style=solid];
    44 [label="unknown",color=blue,style=solid];
    45 [label="unknown",color=blue,style=solid];
    46 [label="unknown",color=blue,style=solid];
    47 [label="unknown",color=blue,style=solid];
    48 [label="overflow_intrinsic2",color=blue,style=solid];
    49 [label="overflow_intrinsic",color=blue,style=solid];
    50 [label="overflow_intrinsic_sum",color=blue,style=solid];
    51 [label=".tr",color=blue,style=solid];
    52 [label="unknown",color=blue,style=solid];
    53 [label="overflow_intrinsic6",color=blue,style=solid];
    54 [label="overflow_intrinsic4",color=blue,style=solid];
    55 [label="overflow_intrinsic_sum7",color=blue,style=solid];
    56 [label="unknown",color=blue,style=solid];
    57 [label="overflow_intrinsic8",color=blue,style=solid];
    58 [label="unknown",color=blue,style=solid];
    59 [label="unknown",color=blue,style=solid];
    60 [label=".18",color=blue,style=solid];
    61 [label="a",color=blue,style=solid];
    62 [label="diff.0.i",color=blue,style=solid];
    63 [label="unknown",color=blue,style=solid];
    64 [label="unknown",color=blue,style=solid];
    65 [label="float64_mul",color=blue,style=solid];
    66 [label=".0",color=blue,style=solid];
    67 [label=".tr",color=blue,style=solid];
    68 [label="zSig",color=blue,style=solid];
    69 [label="unknown",color=blue,style=solid];
    70 [label="unknown",color=blue,style=solid];
    71 [label=".tr3",color=blue,style=solid];
    72 [label="z.0.i",color=blue,style=solid];
    73 [label="unknown",color=blue,style=solid];
    74 [label="unknown",color=blue,style=solid];
    75 [label="unknown",color=blue,style=solid];
    76 [label="zSig57",color=blue,style=solid];
    77 [label="unknown",color=blue,style=solid];
    78 [label="unknown",color=blue,style=solid];
    79 [label="zSign",color=blue,style=solid];
    80 [label=".0.i.i.i",color=blue,style=solid];
    81 [label="zExp",color=blue,style=solid];
    82 [label="unknown",color=blue,style=solid];
    83 [label="unknown",color=blue,style=solid];
    84 [label="unknown",color=blue,style=solid];
    85 [label="zExp.1.i.i.i",color=blue,style=solid];
    86 [label="zSig.0.i12.i.i",color=blue,style=solid];
    87 [label="unknown",color=blue,style=solid];
    88 [label="zExp.0.i.i",color=blue,style=solid];
    89 [label="zSig.1.i.i",color=blue,style=solid];
    90 [label=".",color=blue,style=solid];
    91 [label="roundAndPackFloat64",color=blue,style=solid];
    92 [label=".0",color=blue,style=solid];
    93 [label="scevgep",color=blue,style=solid];
    94 [label="scevgep6",color=blue,style=solid];
    95 [label="unknown",color=blue,style=solid];
    96 [label="unknown",color=blue,style=solid];
    97 [label="unknown",color=blue,style=solid];
    98 [label="unknown",color=blue,style=solid];
    99 [label="unknown",color=blue,style=solid];
    100 [label="unknown",color=blue,style=solid];
    101 [label="unknown",color=blue,style=solid];
    102 [label="unknown",color=blue,style=solid];
    103 [label="unknown",color=blue,style=solid];
    104 [label="unknown",color=blue,style=solid];
    105 [label=".tr.i.i.i",color=blue,style=solid];
    106 [label="unknown",color=blue,style=solid];
    107 [label=".tr.i24.i.i",color=blue,style=solid];
    108 [label="unknown",color=blue,style=solid];
    109 [label="unknown",color=blue,style=solid];
    110 [label="unknown",color=blue,style=solid];
    111 [label=".0.i.i",color=blue,style=solid];
    112 [label="unknown",color=blue,style=solid];
    113 [label="unknown",color=blue,style=solid];
    114 [label="unknown",color=blue,style=solid];
    115 [label="unknown",color=blue,style=solid];
    116 [label="unknown",color=blue,style=solid];
    117 [label="unknown",color=blue,style=solid];
    118 [label="unknown",color=blue,style=solid];
    119 [label="extract.t.i.i4.i.i",color=blue,style=solid];
    120 [label="a.sink.i.i2.i.i",color=blue,style=solid];
    121 [label="unknown",color=blue,style=solid];
    122 [label="unknown",color=blue,style=solid];
    123 [label="unknown",color=blue,style=solid];
    124 [label="shiftCount.1.i.i.i8.i.i",color=blue,style=solid];
    125 [label="unknown",color=blue,style=solid];
    126 [label="unknown",color=blue,style=solid];
    127 [label="extract.t.i.i.i.i",color=blue,style=solid];
    128 [label="a.sink.i.i.i.i",color=blue,style=solid];
    129 [label="unknown",color=blue,style=solid];
    130 [label="unknown",color=blue,style=solid];
    131 [label="unknown",color=blue,style=solid];
    132 [label="shiftCount.1.i.i.i.i.i",color=blue,style=solid];
    133 [label="unknown",color=blue,style=solid];
    134 [label="unknown",color=blue,style=solid];
    135 [label="unknown",color=blue,style=solid];
    136 [label="unknown",color=blue,style=solid];
    137 [label="unknown",color=blue,style=solid];
    138 [label="unknown",color=blue,style=solid];
    139 [label="unknown",color=blue,style=solid];
    140 [label="unknown",color=blue,style=solid];
    141 [label="z.05.i.i.i",color=blue,style=solid];
    142 [label="overflow_intrinsic2",color=blue,style=solid];
    143 [label="overflow_intrinsic",color=blue,style=solid];
    144 [label="overflow_intrinsic_sum",color=blue,style=solid];
    145 [label="unknown",color=blue,style=solid];
    146 [label="unknown",color=blue,style=solid];
    147 [label="unknown",color=blue,style=solid];
    148 [label="overflow_intrinsic3",color=blue,style=solid];
    149 [label="unknown",color=blue,style=solid];
    150 [label="overflow_intrinsic6",color=blue,style=solid];
    151 [label="overflow_intrinsic4",color=blue,style=solid];
    152 [label="overflow_intrinsic_sum7",color=blue,style=solid];
    153 [label=".tr",color=blue,style=solid];
    154 [label="unknown",color=blue,style=solid];
    155 [label="overflow_intrinsic12",color=blue,style=solid];
    156 [label="overflow_intrinsic10",color=blue,style=solid];
    157 [label="overflow_intrinsic_sum13",color=blue,style=solid];
    158 [label=".neg26.i.i",color=blue,style=solid];
    159 [label="sext",color=blue,style=solid];
    160 [label=".neg30.i.i",color=blue,style=solid];
    161 [label=".neg28.i.i",color=blue,style=solid];
    162 [label="unknown",color=blue,style=solid];
    163 [label="unknown",color=blue,style=solid];
    164 [label="unknown",color=blue,style=solid];
    165 [label="zSig.034.i.i",color=blue,style=solid];
    166 [label="overflow_intrinsic18",color=blue,style=solid];
    167 [label="overflow_intrinsic16",color=blue,style=solid];
    168 [label="overflow_intrinsic_sum19",color=blue,style=solid];
    169 [label="unknown",color=blue,style=solid];
    170 [label="overflow_intrinsic20",color=blue,style=solid];
    171 [label="unknown",color=blue,style=solid];
    172 [label="unknown",color=blue,style=solid];
    173 [label="unknown",color=blue,style=solid];
    174 [label="unknown",color=blue,style=solid];
    175 [label=".tr.i.i1.i.i",color=blue,style=solid];
    176 [label="unknown",color=blue,style=solid];
    177 [label=".tr.i17.i.i.i",color=blue,style=solid];
    178 [label="unknown",color=blue,style=solid];
    179 [label="unknown",color=blue,style=solid];
    180 [label=".0.i1.i",color=blue,style=solid];
    181 [label="unknown",color=blue,style=solid];
    182 [label="expDiff.0.i2.i.i",color=blue,style=solid];
    183 [label="unknown",color=blue,style=solid];
    184 [label="unknown",color=blue,style=solid];
    185 [label="unknown",color=blue,style=solid];
    186 [label="expDiff.1.i3.i.i",color=blue,style=solid];
    187 [label="unknown",color=blue,style=solid];
    188 [label="unknown",color=blue,style=solid];
    189 [label="unknown",color=blue,style=solid];
    190 [label="unknown",color=blue,style=solid];
    191 [label="unknown",color=blue,style=solid];
    192 [label="unknown",color=blue,style=solid];
    193 [label="unknown",color=blue,style=solid];
    194 [label="unknown",color=blue,style=solid];
    195 [label="unknown",color=blue,style=solid];
    196 [label="zExp.0..i.i.i",color=blue,style=solid];
    197 [label="unknown",color=blue,style=solid];
    198 [label="unknown",color=blue,style=solid];
    199 [label="unknown",color=blue,style=solid];
    200 [label="unknown",color=blue,style=solid];
    201 [label="unknown",color=blue,style=solid];
    202 [label="unknown",color=blue,style=solid];
    203 [label="expDiff.0.i.i.i",color=blue,style=solid];
    204 [label="unknown",color=blue,style=solid];
    205 [label="unknown",color=blue,style=solid];
    206 [label="expDiff.1.i.i.i",color=blue,style=solid];
    207 [label="unknown",color=blue,style=solid];
    208 [label="unknown",color=blue,style=solid];
    209 [label="zExp.0.i.i.i",color=blue,style=solid];
    210 [label="extract.t.i.i.i.i.i",color=blue,style=solid];
    211 [label="a.sink.i.i.i.i.i",color=blue,style=solid];
    212 [label="unknown",color=blue,style=solid];
    213 [label="unknown",color=blue,style=solid];
    214 [label="unknown",color=blue,style=solid];
    215 [label="shiftCount.1.i.i.i.i.i.i",color=blue,style=solid];
    216 [label="unknown",color=blue,style=solid];
    217 [label="unknown",color=blue,style=solid];
    218 [label="indvar.next",color=blue,style=solid];
    219 [label="indvar",color=blue,style=solid];
    220 [label="unknown",color=blue,style=solid];
    221 [label="unknown",color=blue,style=solid];
    222 [label="unknown",color=blue,style=solid];
    223 [label="unknown",color=blue,style=solid];
    224 [label="i.01",color=blue,style=solid];
    1 -> 25;
    1 -> 26;
    1 -> 28;
    1 -> 29;
    1 -> 70;
    1 -> 73;
    1 -> 74;
    1 -> 112;
    1 -> 114;
    1 -> 115;
    1 -> 117;
    1 -> 118;
    1 -> 181;
    1 -> 185;
    1 -> 189;
    1 -> 199;
    1 -> 200;
    1 -> 202;
    1 -> 205;
    1 -> 217;
    3 -> 64;
    4 -> 94;
    5 -> 220;
    6 -> 93;
    15 -> 33;
    15 -> 41;
    15 -> 99;
    15 -> 122;
    15 -> 130;
    15 -> 213;
    16 -> 32;
    16 -> 40;
    16 -> 98;
    16 -> 121;
    16 -> 129;
    16 -> 212;
    18 -> 17;
    20 -> 19;
    21 -> 79;
    22 -> 21;
    24 -> 23;
    24 -> 27;
    31 -> 30;
    33 -> 36;
    34 -> 36;
    35 -> 34;
    36 -> 37;
    39 -> 38;
    41 -> 44;
    42 -> 44;
    43 -> 42;
    44 -> 45;
    46 -> 60;
    47 -> 46;
    48 -> 50;
    49 -> 48;
    52 -> 51;
    53 -> 55;
    54 -> 53;
    56 -> 58;
    57 -> 56;
    58 -> 59;
    60 -> 81;
    62 -> 61;
    63 -> 24;
    64 -> 24;
    64 -> 61;
    66 -> 65;
    68 -> 67;
    68 -> 69;
    72 -> 71;
    76 -> 75;
    78 -> 77;
    80 -> 79;
    82 -> 81;
    83 -> 68;
    84 -> 79;
    85 -> 81;
    86 -> 68;
    87 -> 79;
    88 -> 81;
    89 -> 68;
    90 -> 68;
    92 -> 91;
    96 -> 95;
    96 -> 97;
    99 -> 100;
    100 -> 101;
    102 -> 104;
    103 -> 102;
    106 -> 105;
    108 -> 107;
    109 -> 87;
    111 -> 110;
    111 -> 113;
    111 -> 116;
    120 -> 119;
    122 -> 125;
    123 -> 125;
    124 -> 123;
    125 -> 126;
    128 -> 127;
    130 -> 133;
    131 -> 133;
    132 -> 131;
    133 -> 134;
    136 -> 135;
    136 -> 137;
    139 -> 138;
    141 -> 140;
    142 -> 144;
    143 -> 142;
    145 -> 149;
    146 -> 145;
    147 -> 149;
    148 -> 147;
    150 -> 152;
    151 -> 150;
    154 -> 153;
    155 -> 157;
    156 -> 155;
    158 -> 160;
    159 -> 158;
    161 -> 160;
    163 -> 162;
    165 -> 164;
    166 -> 168;
    167 -> 166;
    169 -> 171;
    170 -> 169;
    172 -> 84;
    174 -> 173;
    176 -> 175;
    178 -> 177;
    180 -> 179;
    180 -> 184;
    180 -> 188;
    180 -> 198;
    180 -> 201;
    180 -> 204;
    183 -> 182;
    187 -> 186;
    187 -> 203;
    187 -> 206;
    191 -> 190;
    191 -> 192;
    193 -> 192;
    195 -> 194;
    197 -> 196;
    207 -> 206;
    209 -> 208;
    211 -> 210;
    213 -> 216;
    214 -> 216;
    215 -> 214;
    219 -> 218;
    222 -> 221;
    224 -> 223;
    pts2 [label="#1",color=red,style=dashed,shape=box];
    2 -> pts2 [color=red,style=dashed];
    pts4 [label="#3",color=red,style=dashed,shape=box];
    4 -> pts4 [color=red,style=dashed];
    pts6 [label="#5",color=red,style=dashed,shape=box];
    6 -> pts6 [color=red,style=dashed];
    pts8 [label="#7",color=red,style=dashed,shape=box];
    8 -> pts8 [color=red,style=dashed];
    pts10 [label="#9",color=red,style=dashed,shape=box];
    10 -> pts10 [color=red,style=dashed];
    pts12 [label="#11",color=red,style=dashed,shape=box];
    12 -> pts12 [color=red,style=dashed];
    pts14 [label="#13",color=red,style=dashed,shape=box];
    14 -> pts14 [color=red,style=dashed];
    pts16 [label="#15",color=red,style=dashed,shape=box];
    16 -> pts16 [color=red,style=dashed];
    pts32 [label="#15",color=red,style=dashed,shape=box];
    32 -> pts32 [color=red,style=dashed];
    pts40 [label="#15",color=red,style=dashed,shape=box];
    40 -> pts40 [color=red,style=dashed];
    pts93 [label="#5",color=red,style=dashed,shape=box];
    93 -> pts93 [color=red,style=dashed];
    pts94 [label="#3",color=red,style=dashed,shape=box];
    94 -> pts94 [color=red,style=dashed];
    pts98 [label="#15",color=red,style=dashed,shape=box];
    98 -> pts98 [color=red,style=dashed];
    pts121 [label="#15",color=red,style=dashed,shape=box];
    121 -> pts121 [color=red,style=dashed];
    pts129 [label="#15",color=red,style=dashed,shape=box];
    129 -> pts129 [color=red,style=dashed];
    pts212 [label="#15",color=red,style=dashed,shape=box];
    212 -> pts212 [color=red,style=dashed];
}
%32 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @float64_mul
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @float64_mul
}
%39 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @float64_mul
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @float64_mul
}
%64 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @float64_mul
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @float64_mul
}
%71 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @float64_mul
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @float64_mul
}
%93 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @float64_mul
}
%119 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @float64_mul
}
%12 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @roundAndPackFloat64
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @roundAndPackFloat64
}
%37 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @roundAndPackFloat64
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @roundAndPackFloat64
}
%41 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @roundAndPackFloat64
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @roundAndPackFloat64
}
%2 -> { 
	Addr: @test_in
		RAM: test_in
			Adding Local RAM: test_in to Fct: @main
}
%24 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%65 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%87 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%90 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%114 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%124 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%142 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%168 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%294 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%339 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%385 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%432 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%435 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%462 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%516 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%556 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%569 -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
<badref> -> { 
	Addr: @float_exception_flags
		RAM: float_exception_flags
			Adding Local RAM: float_exception_flags to Fct: @main
}
%573 -> { 
	Addr: @test_out
		RAM: test_out
			Adding Local RAM: test_out to Fct: @main
}
Final memory allocation:
Global Memories:
	RAM: float_exception_flags
	ROM: countLeadingZeros32countLeadingZerosHigh
Local Memories:
	ROM: test_in Function: main
	ROM: test_out Function: main
Creating new physical ram: ram_32
Creating new physical ram: rom_32
Running static memory allocation for grouped physical ram: ram_32
Placing RAM: float_exception_flags at: 0
Holes after allocating ram: float_exception_flags size: 4 alignment: 4 offset: 0
Hole: 4 - 8388607 size = 8388604
Final memory allocation for physical ram: ram_32
ram: float_exception_flags                   	size (bytes): 4     (hex:0x4    )	alignment (bytes): 4     (hex:0x4    ) offset (bytes): 0     (hex:0x0    ) unused (bytes): 0    
Total Unused (B): 0
Total Memory (B): 4
Fragmentation Ratio (Total Unused / Total Memory): 0.000000e+00 (0%)
Running static memory allocation for grouped physical ram: rom_32
Placing RAM: countLeadingZeros32countLeadingZerosHigh at: 0
Holes after allocating ram: countLeadingZeros32countLeadingZerosHigh size: 1024 alignment: 1024 offset: 0
Hole: 1024 - 8388607 size = 8387584
Final memory allocation for physical ram: rom_32
ram: countLeadingZeros32countLeadingZerosHigh	size (bytes): 1024  (hex:0x400  )	alignment (bytes): 1024  (hex:0x400  ) offset (bytes): 0     (hex:0x0    ) unused (bytes): 0    
Total Unused (B): 0
Total Memory (B): 1024
Fragmentation Ratio (Total Unused / Total Memory): 0.000000e+00 (0%)
