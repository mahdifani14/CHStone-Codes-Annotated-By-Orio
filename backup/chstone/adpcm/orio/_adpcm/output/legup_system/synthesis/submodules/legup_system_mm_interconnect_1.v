// legup_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module legup_system_mm_interconnect_1 (
		input  wire        clk_clk_clk,                                               //                                             clk_clk.clk
		input  wire        DCache_reset_reset_bridge_in_reset_reset,                  //                  DCache_reset_reset_bridge_in_reset.reset
		input  wire        JTAG_to_FPGA_Bridge_clk_reset_reset_bridge_in_reset_reset, // JTAG_to_FPGA_Bridge_clk_reset_reset_bridge_in_reset.reset
		input  wire        Tiger_MIPS_reset_reset_bridge_in_reset_reset,              //              Tiger_MIPS_reset_reset_bridge_in_reset.reset
		input  wire [31:0] DCache_cache_master_address,                               //                                 DCache_cache_master.address
		output wire        DCache_cache_master_waitrequest,                           //                                                    .waitrequest
		input  wire [2:0]  DCache_cache_master_burstcount,                            //                                                    .burstcount
		input  wire [3:0]  DCache_cache_master_byteenable,                            //                                                    .byteenable
		input  wire        DCache_cache_master_read,                                  //                                                    .read
		output wire [31:0] DCache_cache_master_readdata,                              //                                                    .readdata
		output wire        DCache_cache_master_readdatavalid,                         //                                                    .readdatavalid
		input  wire        DCache_cache_master_write,                                 //                                                    .write
		input  wire [31:0] DCache_cache_master_writedata,                             //                                                    .writedata
		input  wire [31:0] JTAG_to_FPGA_Bridge_master_address,                        //                          JTAG_to_FPGA_Bridge_master.address
		output wire        JTAG_to_FPGA_Bridge_master_waitrequest,                    //                                                    .waitrequest
		input  wire [3:0]  JTAG_to_FPGA_Bridge_master_byteenable,                     //                                                    .byteenable
		input  wire        JTAG_to_FPGA_Bridge_master_read,                           //                                                    .read
		output wire [31:0] JTAG_to_FPGA_Bridge_master_readdata,                       //                                                    .readdata
		output wire        JTAG_to_FPGA_Bridge_master_readdatavalid,                  //                                                    .readdatavalid
		input  wire        JTAG_to_FPGA_Bridge_master_write,                          //                                                    .write
		input  wire [31:0] JTAG_to_FPGA_Bridge_master_writedata,                      //                                                    .writedata
		input  wire [31:0] Tiger_ICache_icache_master_address,                        //                          Tiger_ICache_icache_master.address
		output wire        Tiger_ICache_icache_master_waitrequest,                    //                                                    .waitrequest
		input  wire [5:0]  Tiger_ICache_icache_master_burstcount,                     //                                                    .burstcount
		input  wire        Tiger_ICache_icache_master_beginbursttransfer,             //                                                    .beginbursttransfer
		input  wire        Tiger_ICache_icache_master_read,                           //                                                    .read
		output wire [31:0] Tiger_ICache_icache_master_readdata,                       //                                                    .readdata
		output wire        Tiger_ICache_icache_master_readdatavalid,                  //                                                    .readdatavalid
		input  wire [31:0] Tiger_MIPS_data_master_address,                            //                              Tiger_MIPS_data_master.address
		output wire        Tiger_MIPS_data_master_waitrequest,                        //                                                    .waitrequest
		input  wire [3:0]  Tiger_MIPS_data_master_byteenable,                         //                                                    .byteenable
		input  wire        Tiger_MIPS_data_master_read,                               //                                                    .read
		output wire [31:0] Tiger_MIPS_data_master_readdata,                           //                                                    .readdata
		output wire        Tiger_MIPS_data_master_readdatavalid,                      //                                                    .readdatavalid
		input  wire        Tiger_MIPS_data_master_write,                              //                                                    .write
		input  wire [31:0] Tiger_MIPS_data_master_writedata,                          //                                                    .writedata
		output wire [30:0] DCache_cache_slave_address,                                //                                  DCache_cache_slave.address
		output wire        DCache_cache_slave_write,                                  //                                                    .write
		output wire        DCache_cache_slave_read,                                   //                                                    .read
		input  wire [31:0] DCache_cache_slave_readdata,                               //                                                    .readdata
		output wire [31:0] DCache_cache_slave_writedata,                              //                                                    .writedata
		output wire [3:0]  DCache_cache_slave_byteenable,                             //                                                    .byteenable
		input  wire        DCache_cache_slave_readdatavalid,                          //                                                    .readdatavalid
		input  wire        DCache_cache_slave_waitrequest,                            //                                                    .waitrequest
		output wire [0:0]  JTAG_UART_avalon_jtag_slave_address,                       //                         JTAG_UART_avalon_jtag_slave.address
		output wire        JTAG_UART_avalon_jtag_slave_write,                         //                                                    .write
		output wire        JTAG_UART_avalon_jtag_slave_read,                          //                                                    .read
		input  wire [31:0] JTAG_UART_avalon_jtag_slave_readdata,                      //                                                    .readdata
		output wire [31:0] JTAG_UART_avalon_jtag_slave_writedata,                     //                                                    .writedata
		input  wire        JTAG_UART_avalon_jtag_slave_waitrequest,                   //                                                    .waitrequest
		output wire        JTAG_UART_avalon_jtag_slave_chipselect,                    //                                                    .chipselect
		output wire [7:0]  Leap_Sim_Control_bridge_slave_address,                     //                       Leap_Sim_Control_bridge_slave.address
		output wire        Leap_Sim_Control_bridge_slave_write,                       //                                                    .write
		output wire        Leap_Sim_Control_bridge_slave_read,                        //                                                    .read
		input  wire [31:0] Leap_Sim_Control_bridge_slave_readdata,                    //                                                    .readdata
		output wire [31:0] Leap_Sim_Control_bridge_slave_writedata,                   //                                                    .writedata
		output wire [24:0] SDRAM_s1_address,                                          //                                            SDRAM_s1.address
		output wire        SDRAM_s1_write,                                            //                                                    .write
		output wire        SDRAM_s1_read,                                             //                                                    .read
		input  wire [15:0] SDRAM_s1_readdata,                                         //                                                    .readdata
		output wire [15:0] SDRAM_s1_writedata,                                        //                                                    .writedata
		output wire [1:0]  SDRAM_s1_byteenable,                                       //                                                    .byteenable
		input  wire        SDRAM_s1_readdatavalid,                                    //                                                    .readdatavalid
		input  wire        SDRAM_s1_waitrequest,                                      //                                                    .waitrequest
		output wire        SDRAM_s1_chipselect                                        //                                                    .chipselect
	);

	wire          dcache_cache_master_translator_avalon_universal_master_0_waitrequest;          // DCache_cache_master_agent:av_waitrequest -> DCache_cache_master_translator:uav_waitrequest
	wire   [31:0] dcache_cache_master_translator_avalon_universal_master_0_readdata;             // DCache_cache_master_agent:av_readdata -> DCache_cache_master_translator:uav_readdata
	wire          dcache_cache_master_translator_avalon_universal_master_0_debugaccess;          // DCache_cache_master_translator:uav_debugaccess -> DCache_cache_master_agent:av_debugaccess
	wire   [31:0] dcache_cache_master_translator_avalon_universal_master_0_address;              // DCache_cache_master_translator:uav_address -> DCache_cache_master_agent:av_address
	wire          dcache_cache_master_translator_avalon_universal_master_0_read;                 // DCache_cache_master_translator:uav_read -> DCache_cache_master_agent:av_read
	wire    [3:0] dcache_cache_master_translator_avalon_universal_master_0_byteenable;           // DCache_cache_master_translator:uav_byteenable -> DCache_cache_master_agent:av_byteenable
	wire          dcache_cache_master_translator_avalon_universal_master_0_readdatavalid;        // DCache_cache_master_agent:av_readdatavalid -> DCache_cache_master_translator:uav_readdatavalid
	wire          dcache_cache_master_translator_avalon_universal_master_0_lock;                 // DCache_cache_master_translator:uav_lock -> DCache_cache_master_agent:av_lock
	wire          dcache_cache_master_translator_avalon_universal_master_0_write;                // DCache_cache_master_translator:uav_write -> DCache_cache_master_agent:av_write
	wire   [31:0] dcache_cache_master_translator_avalon_universal_master_0_writedata;            // DCache_cache_master_translator:uav_writedata -> DCache_cache_master_agent:av_writedata
	wire    [4:0] dcache_cache_master_translator_avalon_universal_master_0_burstcount;           // DCache_cache_master_translator:uav_burstcount -> DCache_cache_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                             // rsp_mux:src_valid -> DCache_cache_master_agent:rp_valid
	wire  [108:0] rsp_mux_src_data;                                                              // rsp_mux:src_data -> DCache_cache_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                             // DCache_cache_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                           // rsp_mux:src_channel -> DCache_cache_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                     // rsp_mux:src_startofpacket -> DCache_cache_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                       // rsp_mux:src_endofpacket -> DCache_cache_master_agent:rp_endofpacket
	wire          tiger_icache_icache_master_translator_avalon_universal_master_0_waitrequest;   // Tiger_ICache_icache_master_agent:av_waitrequest -> Tiger_ICache_icache_master_translator:uav_waitrequest
	wire   [31:0] tiger_icache_icache_master_translator_avalon_universal_master_0_readdata;      // Tiger_ICache_icache_master_agent:av_readdata -> Tiger_ICache_icache_master_translator:uav_readdata
	wire          tiger_icache_icache_master_translator_avalon_universal_master_0_debugaccess;   // Tiger_ICache_icache_master_translator:uav_debugaccess -> Tiger_ICache_icache_master_agent:av_debugaccess
	wire   [31:0] tiger_icache_icache_master_translator_avalon_universal_master_0_address;       // Tiger_ICache_icache_master_translator:uav_address -> Tiger_ICache_icache_master_agent:av_address
	wire          tiger_icache_icache_master_translator_avalon_universal_master_0_read;          // Tiger_ICache_icache_master_translator:uav_read -> Tiger_ICache_icache_master_agent:av_read
	wire    [3:0] tiger_icache_icache_master_translator_avalon_universal_master_0_byteenable;    // Tiger_ICache_icache_master_translator:uav_byteenable -> Tiger_ICache_icache_master_agent:av_byteenable
	wire          tiger_icache_icache_master_translator_avalon_universal_master_0_readdatavalid; // Tiger_ICache_icache_master_agent:av_readdatavalid -> Tiger_ICache_icache_master_translator:uav_readdatavalid
	wire          tiger_icache_icache_master_translator_avalon_universal_master_0_lock;          // Tiger_ICache_icache_master_translator:uav_lock -> Tiger_ICache_icache_master_agent:av_lock
	wire          tiger_icache_icache_master_translator_avalon_universal_master_0_write;         // Tiger_ICache_icache_master_translator:uav_write -> Tiger_ICache_icache_master_agent:av_write
	wire   [31:0] tiger_icache_icache_master_translator_avalon_universal_master_0_writedata;     // Tiger_ICache_icache_master_translator:uav_writedata -> Tiger_ICache_icache_master_agent:av_writedata
	wire    [7:0] tiger_icache_icache_master_translator_avalon_universal_master_0_burstcount;    // Tiger_ICache_icache_master_translator:uav_burstcount -> Tiger_ICache_icache_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                         // rsp_mux_001:src_valid -> Tiger_ICache_icache_master_agent:rp_valid
	wire  [108:0] rsp_mux_001_src_data;                                                          // rsp_mux_001:src_data -> Tiger_ICache_icache_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                         // Tiger_ICache_icache_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                                                       // rsp_mux_001:src_channel -> Tiger_ICache_icache_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                 // rsp_mux_001:src_startofpacket -> Tiger_ICache_icache_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                   // rsp_mux_001:src_endofpacket -> Tiger_ICache_icache_master_agent:rp_endofpacket
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest;   // JTAG_to_FPGA_Bridge_master_agent:av_waitrequest -> JTAG_to_FPGA_Bridge_master_translator:uav_waitrequest
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata;      // JTAG_to_FPGA_Bridge_master_agent:av_readdata -> JTAG_to_FPGA_Bridge_master_translator:uav_readdata
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess;   // JTAG_to_FPGA_Bridge_master_translator:uav_debugaccess -> JTAG_to_FPGA_Bridge_master_agent:av_debugaccess
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address;       // JTAG_to_FPGA_Bridge_master_translator:uav_address -> JTAG_to_FPGA_Bridge_master_agent:av_address
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read;          // JTAG_to_FPGA_Bridge_master_translator:uav_read -> JTAG_to_FPGA_Bridge_master_agent:av_read
	wire    [3:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable;    // JTAG_to_FPGA_Bridge_master_translator:uav_byteenable -> JTAG_to_FPGA_Bridge_master_agent:av_byteenable
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid; // JTAG_to_FPGA_Bridge_master_agent:av_readdatavalid -> JTAG_to_FPGA_Bridge_master_translator:uav_readdatavalid
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock;          // JTAG_to_FPGA_Bridge_master_translator:uav_lock -> JTAG_to_FPGA_Bridge_master_agent:av_lock
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write;         // JTAG_to_FPGA_Bridge_master_translator:uav_write -> JTAG_to_FPGA_Bridge_master_agent:av_write
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata;     // JTAG_to_FPGA_Bridge_master_translator:uav_writedata -> JTAG_to_FPGA_Bridge_master_agent:av_writedata
	wire    [2:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount;    // JTAG_to_FPGA_Bridge_master_translator:uav_burstcount -> JTAG_to_FPGA_Bridge_master_agent:av_burstcount
	wire          tiger_mips_data_master_translator_avalon_universal_master_0_waitrequest;       // Tiger_MIPS_data_master_agent:av_waitrequest -> Tiger_MIPS_data_master_translator:uav_waitrequest
	wire   [31:0] tiger_mips_data_master_translator_avalon_universal_master_0_readdata;          // Tiger_MIPS_data_master_agent:av_readdata -> Tiger_MIPS_data_master_translator:uav_readdata
	wire          tiger_mips_data_master_translator_avalon_universal_master_0_debugaccess;       // Tiger_MIPS_data_master_translator:uav_debugaccess -> Tiger_MIPS_data_master_agent:av_debugaccess
	wire   [31:0] tiger_mips_data_master_translator_avalon_universal_master_0_address;           // Tiger_MIPS_data_master_translator:uav_address -> Tiger_MIPS_data_master_agent:av_address
	wire          tiger_mips_data_master_translator_avalon_universal_master_0_read;              // Tiger_MIPS_data_master_translator:uav_read -> Tiger_MIPS_data_master_agent:av_read
	wire    [3:0] tiger_mips_data_master_translator_avalon_universal_master_0_byteenable;        // Tiger_MIPS_data_master_translator:uav_byteenable -> Tiger_MIPS_data_master_agent:av_byteenable
	wire          tiger_mips_data_master_translator_avalon_universal_master_0_readdatavalid;     // Tiger_MIPS_data_master_agent:av_readdatavalid -> Tiger_MIPS_data_master_translator:uav_readdatavalid
	wire          tiger_mips_data_master_translator_avalon_universal_master_0_lock;              // Tiger_MIPS_data_master_translator:uav_lock -> Tiger_MIPS_data_master_agent:av_lock
	wire          tiger_mips_data_master_translator_avalon_universal_master_0_write;             // Tiger_MIPS_data_master_translator:uav_write -> Tiger_MIPS_data_master_agent:av_write
	wire   [31:0] tiger_mips_data_master_translator_avalon_universal_master_0_writedata;         // Tiger_MIPS_data_master_translator:uav_writedata -> Tiger_MIPS_data_master_agent:av_writedata
	wire    [2:0] tiger_mips_data_master_translator_avalon_universal_master_0_burstcount;        // Tiger_MIPS_data_master_translator:uav_burstcount -> Tiger_MIPS_data_master_agent:av_burstcount
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                    // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                 // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                 // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                     // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                  // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                        // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                               // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                        // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                   // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                       // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                  // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire   [91:0] sdram_s1_agent_rf_source_data;                                                 // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                        // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                          // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                             // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire   [91:0] sdram_s1_agent_rsp_fifo_out_data;                                              // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                             // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                     // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                       // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                           // SDRAM_s1_agent:rdata_fifo_src_valid -> SDRAM_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                            // SDRAM_s1_agent:rdata_fifo_src_data -> SDRAM_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                           // SDRAM_s1_agent_rdata_fifo:in_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                 // JTAG_UART_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                              // JTAG_UART_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                              // JTAG_UART_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                  // JTAG_UART_avalon_jtag_slave_agent:m0_address -> JTAG_UART_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                               // JTAG_UART_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                     // JTAG_UART_avalon_jtag_slave_agent:m0_read -> JTAG_UART_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                            // JTAG_UART_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                     // JTAG_UART_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                // JTAG_UART_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                    // JTAG_UART_avalon_jtag_slave_agent:m0_write -> JTAG_UART_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                               // JTAG_UART_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                             // JTAG_UART_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [109:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                              // JTAG_UART_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                             // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                     // JTAG_UART_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                       // JTAG_UART_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                          // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_valid
	wire  [109:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                           // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                          // JTAG_UART_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                  // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                    // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                         // cmd_mux_001:src_valid -> JTAG_UART_avalon_jtag_slave_agent:cp_valid
	wire  [108:0] cmd_mux_001_src_data;                                                          // cmd_mux_001:src_data -> JTAG_UART_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                         // JTAG_UART_avalon_jtag_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                                       // cmd_mux_001:src_channel -> JTAG_UART_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                 // cmd_mux_001:src_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                   // cmd_mux_001:src_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] leap_sim_control_bridge_slave_agent_m0_readdata;                               // Leap_Sim_Control_bridge_slave_translator:uav_readdata -> Leap_Sim_Control_bridge_slave_agent:m0_readdata
	wire          leap_sim_control_bridge_slave_agent_m0_waitrequest;                            // Leap_Sim_Control_bridge_slave_translator:uav_waitrequest -> Leap_Sim_Control_bridge_slave_agent:m0_waitrequest
	wire          leap_sim_control_bridge_slave_agent_m0_debugaccess;                            // Leap_Sim_Control_bridge_slave_agent:m0_debugaccess -> Leap_Sim_Control_bridge_slave_translator:uav_debugaccess
	wire   [31:0] leap_sim_control_bridge_slave_agent_m0_address;                                // Leap_Sim_Control_bridge_slave_agent:m0_address -> Leap_Sim_Control_bridge_slave_translator:uav_address
	wire    [3:0] leap_sim_control_bridge_slave_agent_m0_byteenable;                             // Leap_Sim_Control_bridge_slave_agent:m0_byteenable -> Leap_Sim_Control_bridge_slave_translator:uav_byteenable
	wire          leap_sim_control_bridge_slave_agent_m0_read;                                   // Leap_Sim_Control_bridge_slave_agent:m0_read -> Leap_Sim_Control_bridge_slave_translator:uav_read
	wire          leap_sim_control_bridge_slave_agent_m0_readdatavalid;                          // Leap_Sim_Control_bridge_slave_translator:uav_readdatavalid -> Leap_Sim_Control_bridge_slave_agent:m0_readdatavalid
	wire          leap_sim_control_bridge_slave_agent_m0_lock;                                   // Leap_Sim_Control_bridge_slave_agent:m0_lock -> Leap_Sim_Control_bridge_slave_translator:uav_lock
	wire   [31:0] leap_sim_control_bridge_slave_agent_m0_writedata;                              // Leap_Sim_Control_bridge_slave_agent:m0_writedata -> Leap_Sim_Control_bridge_slave_translator:uav_writedata
	wire          leap_sim_control_bridge_slave_agent_m0_write;                                  // Leap_Sim_Control_bridge_slave_agent:m0_write -> Leap_Sim_Control_bridge_slave_translator:uav_write
	wire    [2:0] leap_sim_control_bridge_slave_agent_m0_burstcount;                             // Leap_Sim_Control_bridge_slave_agent:m0_burstcount -> Leap_Sim_Control_bridge_slave_translator:uav_burstcount
	wire          leap_sim_control_bridge_slave_agent_rf_source_valid;                           // Leap_Sim_Control_bridge_slave_agent:rf_source_valid -> Leap_Sim_Control_bridge_slave_agent_rsp_fifo:in_valid
	wire  [109:0] leap_sim_control_bridge_slave_agent_rf_source_data;                            // Leap_Sim_Control_bridge_slave_agent:rf_source_data -> Leap_Sim_Control_bridge_slave_agent_rsp_fifo:in_data
	wire          leap_sim_control_bridge_slave_agent_rf_source_ready;                           // Leap_Sim_Control_bridge_slave_agent_rsp_fifo:in_ready -> Leap_Sim_Control_bridge_slave_agent:rf_source_ready
	wire          leap_sim_control_bridge_slave_agent_rf_source_startofpacket;                   // Leap_Sim_Control_bridge_slave_agent:rf_source_startofpacket -> Leap_Sim_Control_bridge_slave_agent_rsp_fifo:in_startofpacket
	wire          leap_sim_control_bridge_slave_agent_rf_source_endofpacket;                     // Leap_Sim_Control_bridge_slave_agent:rf_source_endofpacket -> Leap_Sim_Control_bridge_slave_agent_rsp_fifo:in_endofpacket
	wire          leap_sim_control_bridge_slave_agent_rsp_fifo_out_valid;                        // Leap_Sim_Control_bridge_slave_agent_rsp_fifo:out_valid -> Leap_Sim_Control_bridge_slave_agent:rf_sink_valid
	wire  [109:0] leap_sim_control_bridge_slave_agent_rsp_fifo_out_data;                         // Leap_Sim_Control_bridge_slave_agent_rsp_fifo:out_data -> Leap_Sim_Control_bridge_slave_agent:rf_sink_data
	wire          leap_sim_control_bridge_slave_agent_rsp_fifo_out_ready;                        // Leap_Sim_Control_bridge_slave_agent:rf_sink_ready -> Leap_Sim_Control_bridge_slave_agent_rsp_fifo:out_ready
	wire          leap_sim_control_bridge_slave_agent_rsp_fifo_out_startofpacket;                // Leap_Sim_Control_bridge_slave_agent_rsp_fifo:out_startofpacket -> Leap_Sim_Control_bridge_slave_agent:rf_sink_startofpacket
	wire          leap_sim_control_bridge_slave_agent_rsp_fifo_out_endofpacket;                  // Leap_Sim_Control_bridge_slave_agent_rsp_fifo:out_endofpacket -> Leap_Sim_Control_bridge_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                         // cmd_mux_002:src_valid -> Leap_Sim_Control_bridge_slave_agent:cp_valid
	wire  [108:0] cmd_mux_002_src_data;                                                          // cmd_mux_002:src_data -> Leap_Sim_Control_bridge_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                         // Leap_Sim_Control_bridge_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                                       // cmd_mux_002:src_channel -> Leap_Sim_Control_bridge_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                 // cmd_mux_002:src_startofpacket -> Leap_Sim_Control_bridge_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                   // cmd_mux_002:src_endofpacket -> Leap_Sim_Control_bridge_slave_agent:cp_endofpacket
	wire   [31:0] dcache_cache_slave_agent_m0_readdata;                                          // DCache_cache_slave_translator:uav_readdata -> DCache_cache_slave_agent:m0_readdata
	wire          dcache_cache_slave_agent_m0_waitrequest;                                       // DCache_cache_slave_translator:uav_waitrequest -> DCache_cache_slave_agent:m0_waitrequest
	wire          dcache_cache_slave_agent_m0_debugaccess;                                       // DCache_cache_slave_agent:m0_debugaccess -> DCache_cache_slave_translator:uav_debugaccess
	wire   [31:0] dcache_cache_slave_agent_m0_address;                                           // DCache_cache_slave_agent:m0_address -> DCache_cache_slave_translator:uav_address
	wire    [3:0] dcache_cache_slave_agent_m0_byteenable;                                        // DCache_cache_slave_agent:m0_byteenable -> DCache_cache_slave_translator:uav_byteenable
	wire          dcache_cache_slave_agent_m0_read;                                              // DCache_cache_slave_agent:m0_read -> DCache_cache_slave_translator:uav_read
	wire          dcache_cache_slave_agent_m0_readdatavalid;                                     // DCache_cache_slave_translator:uav_readdatavalid -> DCache_cache_slave_agent:m0_readdatavalid
	wire          dcache_cache_slave_agent_m0_lock;                                              // DCache_cache_slave_agent:m0_lock -> DCache_cache_slave_translator:uav_lock
	wire   [31:0] dcache_cache_slave_agent_m0_writedata;                                         // DCache_cache_slave_agent:m0_writedata -> DCache_cache_slave_translator:uav_writedata
	wire          dcache_cache_slave_agent_m0_write;                                             // DCache_cache_slave_agent:m0_write -> DCache_cache_slave_translator:uav_write
	wire    [2:0] dcache_cache_slave_agent_m0_burstcount;                                        // DCache_cache_slave_agent:m0_burstcount -> DCache_cache_slave_translator:uav_burstcount
	wire          dcache_cache_slave_agent_rf_source_valid;                                      // DCache_cache_slave_agent:rf_source_valid -> DCache_cache_slave_agent_rsp_fifo:in_valid
	wire  [109:0] dcache_cache_slave_agent_rf_source_data;                                       // DCache_cache_slave_agent:rf_source_data -> DCache_cache_slave_agent_rsp_fifo:in_data
	wire          dcache_cache_slave_agent_rf_source_ready;                                      // DCache_cache_slave_agent_rsp_fifo:in_ready -> DCache_cache_slave_agent:rf_source_ready
	wire          dcache_cache_slave_agent_rf_source_startofpacket;                              // DCache_cache_slave_agent:rf_source_startofpacket -> DCache_cache_slave_agent_rsp_fifo:in_startofpacket
	wire          dcache_cache_slave_agent_rf_source_endofpacket;                                // DCache_cache_slave_agent:rf_source_endofpacket -> DCache_cache_slave_agent_rsp_fifo:in_endofpacket
	wire          dcache_cache_slave_agent_rsp_fifo_out_valid;                                   // DCache_cache_slave_agent_rsp_fifo:out_valid -> DCache_cache_slave_agent:rf_sink_valid
	wire  [109:0] dcache_cache_slave_agent_rsp_fifo_out_data;                                    // DCache_cache_slave_agent_rsp_fifo:out_data -> DCache_cache_slave_agent:rf_sink_data
	wire          dcache_cache_slave_agent_rsp_fifo_out_ready;                                   // DCache_cache_slave_agent:rf_sink_ready -> DCache_cache_slave_agent_rsp_fifo:out_ready
	wire          dcache_cache_slave_agent_rsp_fifo_out_startofpacket;                           // DCache_cache_slave_agent_rsp_fifo:out_startofpacket -> DCache_cache_slave_agent:rf_sink_startofpacket
	wire          dcache_cache_slave_agent_rsp_fifo_out_endofpacket;                             // DCache_cache_slave_agent_rsp_fifo:out_endofpacket -> DCache_cache_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                         // cmd_mux_003:src_valid -> DCache_cache_slave_agent:cp_valid
	wire  [108:0] cmd_mux_003_src_data;                                                          // cmd_mux_003:src_data -> DCache_cache_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                         // DCache_cache_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                                       // cmd_mux_003:src_channel -> DCache_cache_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                 // cmd_mux_003:src_startofpacket -> DCache_cache_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                   // cmd_mux_003:src_endofpacket -> DCache_cache_slave_agent:cp_endofpacket
	wire          dcache_cache_master_agent_cp_valid;                                            // DCache_cache_master_agent:cp_valid -> router:sink_valid
	wire  [108:0] dcache_cache_master_agent_cp_data;                                             // DCache_cache_master_agent:cp_data -> router:sink_data
	wire          dcache_cache_master_agent_cp_ready;                                            // router:sink_ready -> DCache_cache_master_agent:cp_ready
	wire          dcache_cache_master_agent_cp_startofpacket;                                    // DCache_cache_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          dcache_cache_master_agent_cp_endofpacket;                                      // DCache_cache_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                              // router:src_valid -> cmd_demux:sink_valid
	wire  [108:0] router_src_data;                                                               // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                              // cmd_demux:sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                            // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                      // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                        // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          tiger_icache_icache_master_agent_cp_valid;                                     // Tiger_ICache_icache_master_agent:cp_valid -> router_001:sink_valid
	wire  [108:0] tiger_icache_icache_master_agent_cp_data;                                      // Tiger_ICache_icache_master_agent:cp_data -> router_001:sink_data
	wire          tiger_icache_icache_master_agent_cp_ready;                                     // router_001:sink_ready -> Tiger_ICache_icache_master_agent:cp_ready
	wire          tiger_icache_icache_master_agent_cp_startofpacket;                             // Tiger_ICache_icache_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          tiger_icache_icache_master_agent_cp_endofpacket;                               // Tiger_ICache_icache_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                          // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [108:0] router_001_src_data;                                                           // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                          // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                                        // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                  // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                    // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_valid;                                     // JTAG_to_FPGA_Bridge_master_agent:cp_valid -> router_002:sink_valid
	wire  [108:0] jtag_to_fpga_bridge_master_agent_cp_data;                                      // JTAG_to_FPGA_Bridge_master_agent:cp_data -> router_002:sink_data
	wire          jtag_to_fpga_bridge_master_agent_cp_ready;                                     // router_002:sink_ready -> JTAG_to_FPGA_Bridge_master_agent:cp_ready
	wire          jtag_to_fpga_bridge_master_agent_cp_startofpacket;                             // JTAG_to_FPGA_Bridge_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_endofpacket;                               // JTAG_to_FPGA_Bridge_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          tiger_mips_data_master_agent_cp_valid;                                         // Tiger_MIPS_data_master_agent:cp_valid -> router_003:sink_valid
	wire  [108:0] tiger_mips_data_master_agent_cp_data;                                          // Tiger_MIPS_data_master_agent:cp_data -> router_003:sink_data
	wire          tiger_mips_data_master_agent_cp_ready;                                         // router_003:sink_ready -> Tiger_MIPS_data_master_agent:cp_ready
	wire          tiger_mips_data_master_agent_cp_startofpacket;                                 // Tiger_MIPS_data_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          tiger_mips_data_master_agent_cp_endofpacket;                                   // Tiger_MIPS_data_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                       // SDRAM_s1_agent:rp_valid -> router_004:sink_valid
	wire   [90:0] sdram_s1_agent_rp_data;                                                        // SDRAM_s1_agent:rp_data -> router_004:sink_data
	wire          sdram_s1_agent_rp_ready;                                                       // router_004:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                               // SDRAM_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                 // SDRAM_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                    // JTAG_UART_avalon_jtag_slave_agent:rp_valid -> router_005:sink_valid
	wire  [108:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                     // JTAG_UART_avalon_jtag_slave_agent:rp_data -> router_005:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                    // router_005:sink_ready -> JTAG_UART_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                            // JTAG_UART_avalon_jtag_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                              // JTAG_UART_avalon_jtag_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                          // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [108:0] router_005_src_data;                                                           // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                          // rsp_demux_001:sink_ready -> router_005:src_ready
	wire    [3:0] router_005_src_channel;                                                        // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                                  // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                                    // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          leap_sim_control_bridge_slave_agent_rp_valid;                                  // Leap_Sim_Control_bridge_slave_agent:rp_valid -> router_006:sink_valid
	wire  [108:0] leap_sim_control_bridge_slave_agent_rp_data;                                   // Leap_Sim_Control_bridge_slave_agent:rp_data -> router_006:sink_data
	wire          leap_sim_control_bridge_slave_agent_rp_ready;                                  // router_006:sink_ready -> Leap_Sim_Control_bridge_slave_agent:rp_ready
	wire          leap_sim_control_bridge_slave_agent_rp_startofpacket;                          // Leap_Sim_Control_bridge_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          leap_sim_control_bridge_slave_agent_rp_endofpacket;                            // Leap_Sim_Control_bridge_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                          // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [108:0] router_006_src_data;                                                           // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                                          // rsp_demux_002:sink_ready -> router_006:src_ready
	wire    [3:0] router_006_src_channel;                                                        // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                                  // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                                    // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          dcache_cache_slave_agent_rp_valid;                                             // DCache_cache_slave_agent:rp_valid -> router_007:sink_valid
	wire  [108:0] dcache_cache_slave_agent_rp_data;                                              // DCache_cache_slave_agent:rp_data -> router_007:sink_data
	wire          dcache_cache_slave_agent_rp_ready;                                             // router_007:sink_ready -> DCache_cache_slave_agent:rp_ready
	wire          dcache_cache_slave_agent_rp_startofpacket;                                     // DCache_cache_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          dcache_cache_slave_agent_rp_endofpacket;                                       // DCache_cache_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                          // router_007:src_valid -> rsp_demux_003:sink_valid
	wire  [108:0] router_007_src_data;                                                           // router_007:src_data -> rsp_demux_003:sink_data
	wire          router_007_src_ready;                                                          // rsp_demux_003:sink_ready -> router_007:src_ready
	wire    [3:0] router_007_src_channel;                                                        // router_007:src_channel -> rsp_demux_003:sink_channel
	wire          router_007_src_startofpacket;                                                  // router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_007_src_endofpacket;                                                    // router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_002_src_valid;                                                          // router_002:src_valid -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_valid
	wire  [108:0] router_002_src_data;                                                           // router_002:src_data -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                          // JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                                        // router_002:src_channel -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                  // router_002:src_startofpacket -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                    // router_002:src_endofpacket -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_endofpacket
	wire  [108:0] jtag_to_fpga_bridge_master_limiter_cmd_src_data;                               // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_ready;                              // cmd_demux_002:sink_ready -> JTAG_to_FPGA_Bridge_master_limiter:cmd_src_ready
	wire    [3:0] jtag_to_fpga_bridge_master_limiter_cmd_src_channel;                            // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket;                      // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket;                        // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                         // rsp_mux_002:src_valid -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_valid
	wire  [108:0] rsp_mux_002_src_data;                                                          // rsp_mux_002:src_data -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                         // JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [3:0] rsp_mux_002_src_channel;                                                       // rsp_mux_002:src_channel -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                 // rsp_mux_002:src_startofpacket -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                   // rsp_mux_002:src_endofpacket -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_endofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_valid;                              // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_valid -> JTAG_to_FPGA_Bridge_master_agent:rp_valid
	wire  [108:0] jtag_to_fpga_bridge_master_limiter_rsp_src_data;                               // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_data -> JTAG_to_FPGA_Bridge_master_agent:rp_data
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_ready;                              // JTAG_to_FPGA_Bridge_master_agent:rp_ready -> JTAG_to_FPGA_Bridge_master_limiter:rsp_src_ready
	wire    [3:0] jtag_to_fpga_bridge_master_limiter_rsp_src_channel;                            // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_channel -> JTAG_to_FPGA_Bridge_master_agent:rp_channel
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket;                      // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_startofpacket -> JTAG_to_FPGA_Bridge_master_agent:rp_startofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket;                        // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_endofpacket -> JTAG_to_FPGA_Bridge_master_agent:rp_endofpacket
	wire          router_003_src_valid;                                                          // router_003:src_valid -> Tiger_MIPS_data_master_limiter:cmd_sink_valid
	wire  [108:0] router_003_src_data;                                                           // router_003:src_data -> Tiger_MIPS_data_master_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                          // Tiger_MIPS_data_master_limiter:cmd_sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                                        // router_003:src_channel -> Tiger_MIPS_data_master_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                  // router_003:src_startofpacket -> Tiger_MIPS_data_master_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                    // router_003:src_endofpacket -> Tiger_MIPS_data_master_limiter:cmd_sink_endofpacket
	wire  [108:0] tiger_mips_data_master_limiter_cmd_src_data;                                   // Tiger_MIPS_data_master_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          tiger_mips_data_master_limiter_cmd_src_ready;                                  // cmd_demux_003:sink_ready -> Tiger_MIPS_data_master_limiter:cmd_src_ready
	wire    [3:0] tiger_mips_data_master_limiter_cmd_src_channel;                                // Tiger_MIPS_data_master_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          tiger_mips_data_master_limiter_cmd_src_startofpacket;                          // Tiger_MIPS_data_master_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          tiger_mips_data_master_limiter_cmd_src_endofpacket;                            // Tiger_MIPS_data_master_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                         // rsp_mux_003:src_valid -> Tiger_MIPS_data_master_limiter:rsp_sink_valid
	wire  [108:0] rsp_mux_003_src_data;                                                          // rsp_mux_003:src_data -> Tiger_MIPS_data_master_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                         // Tiger_MIPS_data_master_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire    [3:0] rsp_mux_003_src_channel;                                                       // rsp_mux_003:src_channel -> Tiger_MIPS_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                 // rsp_mux_003:src_startofpacket -> Tiger_MIPS_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                   // rsp_mux_003:src_endofpacket -> Tiger_MIPS_data_master_limiter:rsp_sink_endofpacket
	wire          tiger_mips_data_master_limiter_rsp_src_valid;                                  // Tiger_MIPS_data_master_limiter:rsp_src_valid -> Tiger_MIPS_data_master_agent:rp_valid
	wire  [108:0] tiger_mips_data_master_limiter_rsp_src_data;                                   // Tiger_MIPS_data_master_limiter:rsp_src_data -> Tiger_MIPS_data_master_agent:rp_data
	wire          tiger_mips_data_master_limiter_rsp_src_ready;                                  // Tiger_MIPS_data_master_agent:rp_ready -> Tiger_MIPS_data_master_limiter:rsp_src_ready
	wire    [3:0] tiger_mips_data_master_limiter_rsp_src_channel;                                // Tiger_MIPS_data_master_limiter:rsp_src_channel -> Tiger_MIPS_data_master_agent:rp_channel
	wire          tiger_mips_data_master_limiter_rsp_src_startofpacket;                          // Tiger_MIPS_data_master_limiter:rsp_src_startofpacket -> Tiger_MIPS_data_master_agent:rp_startofpacket
	wire          tiger_mips_data_master_limiter_rsp_src_endofpacket;                            // Tiger_MIPS_data_master_limiter:rsp_src_endofpacket -> Tiger_MIPS_data_master_agent:rp_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                          // SDRAM_s1_burst_adapter:source0_valid -> SDRAM_s1_agent:cp_valid
	wire   [90:0] sdram_s1_burst_adapter_source0_data;                                           // SDRAM_s1_burst_adapter:source0_data -> SDRAM_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                          // SDRAM_s1_agent:cp_ready -> SDRAM_s1_burst_adapter:source0_ready
	wire    [3:0] sdram_s1_burst_adapter_source0_channel;                                        // SDRAM_s1_burst_adapter:source0_channel -> SDRAM_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                  // SDRAM_s1_burst_adapter:source0_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                    // SDRAM_s1_burst_adapter:source0_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                          // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [108:0] cmd_demux_src0_data;                                                           // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                          // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                                        // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                  // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                    // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                      // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [108:0] cmd_demux_001_src0_data;                                                       // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                      // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                                                    // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                              // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                      // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [108:0] cmd_demux_002_src0_data;                                                       // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                      // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire    [3:0] cmd_demux_002_src0_channel;                                                    // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                              // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                      // cmd_demux_002:src1_valid -> cmd_mux_001:sink0_valid
	wire  [108:0] cmd_demux_002_src1_data;                                                       // cmd_demux_002:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_002_src1_ready;                                                      // cmd_mux_001:sink0_ready -> cmd_demux_002:src1_ready
	wire    [3:0] cmd_demux_002_src1_channel;                                                    // cmd_demux_002:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_002_src1_startofpacket;                                              // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_002_src2_valid;                                                      // cmd_demux_002:src2_valid -> cmd_mux_002:sink0_valid
	wire  [108:0] cmd_demux_002_src2_data;                                                       // cmd_demux_002:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_002_src2_ready;                                                      // cmd_mux_002:sink0_ready -> cmd_demux_002:src2_ready
	wire    [3:0] cmd_demux_002_src2_channel;                                                    // cmd_demux_002:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_002_src2_startofpacket;                                              // cmd_demux_002:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                // cmd_demux_002:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                      // cmd_demux_003:src0_valid -> cmd_mux_001:sink1_valid
	wire  [108:0] cmd_demux_003_src0_data;                                                       // cmd_demux_003:src0_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_003_src0_ready;                                                      // cmd_mux_001:sink1_ready -> cmd_demux_003:src0_ready
	wire    [3:0] cmd_demux_003_src0_channel;                                                    // cmd_demux_003:src0_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_003_src0_startofpacket;                                              // cmd_demux_003:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                // cmd_demux_003:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                      // cmd_demux_003:src1_valid -> cmd_mux_003:sink0_valid
	wire  [108:0] cmd_demux_003_src1_data;                                                       // cmd_demux_003:src1_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_003_src1_ready;                                                      // cmd_mux_003:sink0_ready -> cmd_demux_003:src1_ready
	wire    [3:0] cmd_demux_003_src1_channel;                                                    // cmd_demux_003:src1_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_003_src1_startofpacket;                                              // cmd_demux_003:src1_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                // cmd_demux_003:src1_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                          // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [108:0] rsp_demux_src0_data;                                                           // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                          // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                                        // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                  // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                    // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                          // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [108:0] rsp_demux_src1_data;                                                           // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                          // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                                                        // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                  // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                    // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                          // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [108:0] rsp_demux_src2_data;                                                           // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                          // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire    [3:0] rsp_demux_src2_channel;                                                        // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                  // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                    // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                      // rsp_demux_001:src0_valid -> rsp_mux_002:sink1_valid
	wire  [108:0] rsp_demux_001_src0_data;                                                       // rsp_demux_001:src0_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_001_src0_ready;                                                      // rsp_mux_002:sink1_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                                    // rsp_demux_001:src0_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                              // rsp_demux_001:src0_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                // rsp_demux_001:src0_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                      // rsp_demux_001:src1_valid -> rsp_mux_003:sink0_valid
	wire  [108:0] rsp_demux_001_src1_data;                                                       // rsp_demux_001:src1_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_001_src1_ready;                                                      // rsp_mux_003:sink0_ready -> rsp_demux_001:src1_ready
	wire    [3:0] rsp_demux_001_src1_channel;                                                    // rsp_demux_001:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_001_src1_startofpacket;                                              // rsp_demux_001:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                // rsp_demux_001:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                      // rsp_demux_002:src0_valid -> rsp_mux_002:sink2_valid
	wire  [108:0] rsp_demux_002_src0_data;                                                       // rsp_demux_002:src0_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_002_src0_ready;                                                      // rsp_mux_002:sink2_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                                    // rsp_demux_002:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                              // rsp_demux_002:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                // rsp_demux_002:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                      // rsp_demux_003:src0_valid -> rsp_mux_003:sink1_valid
	wire  [108:0] rsp_demux_003_src0_data;                                                       // rsp_demux_003:src0_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_003_src0_ready;                                                      // rsp_mux_003:sink1_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                                    // rsp_demux_003:src0_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_003_src0_startofpacket;                                              // rsp_demux_003:src0_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                // rsp_demux_003:src0_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          router_004_src_valid;                                                          // router_004:src_valid -> SDRAM_s1_rsp_width_adapter:in_valid
	wire   [90:0] router_004_src_data;                                                           // router_004:src_data -> SDRAM_s1_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                                          // SDRAM_s1_rsp_width_adapter:in_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                                        // router_004:src_channel -> SDRAM_s1_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                                  // router_004:src_startofpacket -> SDRAM_s1_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                                    // router_004:src_endofpacket -> SDRAM_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_rsp_width_adapter_src_valid;                                          // SDRAM_s1_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [108:0] sdram_s1_rsp_width_adapter_src_data;                                           // SDRAM_s1_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          sdram_s1_rsp_width_adapter_src_ready;                                          // rsp_demux:sink_ready -> SDRAM_s1_rsp_width_adapter:out_ready
	wire    [3:0] sdram_s1_rsp_width_adapter_src_channel;                                        // SDRAM_s1_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          sdram_s1_rsp_width_adapter_src_startofpacket;                                  // SDRAM_s1_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          sdram_s1_rsp_width_adapter_src_endofpacket;                                    // SDRAM_s1_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                             // cmd_mux:src_valid -> SDRAM_s1_cmd_width_adapter:in_valid
	wire  [108:0] cmd_mux_src_data;                                                              // cmd_mux:src_data -> SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                             // SDRAM_s1_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                           // cmd_mux:src_channel -> SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                     // cmd_mux:src_startofpacket -> SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                       // cmd_mux:src_endofpacket -> SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_s1_cmd_width_adapter_src_valid;                                          // SDRAM_s1_cmd_width_adapter:out_valid -> SDRAM_s1_burst_adapter:sink0_valid
	wire   [90:0] sdram_s1_cmd_width_adapter_src_data;                                           // SDRAM_s1_cmd_width_adapter:out_data -> SDRAM_s1_burst_adapter:sink0_data
	wire          sdram_s1_cmd_width_adapter_src_ready;                                          // SDRAM_s1_burst_adapter:sink0_ready -> SDRAM_s1_cmd_width_adapter:out_ready
	wire    [3:0] sdram_s1_cmd_width_adapter_src_channel;                                        // SDRAM_s1_cmd_width_adapter:out_channel -> SDRAM_s1_burst_adapter:sink0_channel
	wire          sdram_s1_cmd_width_adapter_src_startofpacket;                                  // SDRAM_s1_cmd_width_adapter:out_startofpacket -> SDRAM_s1_burst_adapter:sink0_startofpacket
	wire          sdram_s1_cmd_width_adapter_src_endofpacket;                                    // SDRAM_s1_cmd_width_adapter:out_endofpacket -> SDRAM_s1_burst_adapter:sink0_endofpacket
	wire    [3:0] jtag_to_fpga_bridge_master_limiter_cmd_valid_data;                             // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire    [3:0] tiger_mips_data_master_limiter_cmd_valid_data;                                 // Tiger_MIPS_data_master_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                           // SDRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                            // SDRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter:in_0_ready -> SDRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                 // avalon_st_adapter:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                  // avalon_st_adapter:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                 // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                 // avalon_st_adapter:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                        // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                         // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_001:in_0_ready -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                             // avalon_st_adapter_001:out_0_valid -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                              // avalon_st_adapter_001:out_0_data -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                             // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                             // avalon_st_adapter_001:out_0_error -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          leap_sim_control_bridge_slave_agent_rdata_fifo_src_valid;                      // Leap_Sim_Control_bridge_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] leap_sim_control_bridge_slave_agent_rdata_fifo_src_data;                       // Leap_Sim_Control_bridge_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          leap_sim_control_bridge_slave_agent_rdata_fifo_src_ready;                      // avalon_st_adapter_002:in_0_ready -> Leap_Sim_Control_bridge_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                             // avalon_st_adapter_002:out_0_valid -> Leap_Sim_Control_bridge_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                              // avalon_st_adapter_002:out_0_data -> Leap_Sim_Control_bridge_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                             // Leap_Sim_Control_bridge_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                             // avalon_st_adapter_002:out_0_error -> Leap_Sim_Control_bridge_slave_agent:rdata_fifo_sink_error
	wire          dcache_cache_slave_agent_rdata_fifo_src_valid;                                 // DCache_cache_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] dcache_cache_slave_agent_rdata_fifo_src_data;                                  // DCache_cache_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          dcache_cache_slave_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_003:in_0_ready -> DCache_cache_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                             // avalon_st_adapter_003:out_0_valid -> DCache_cache_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                              // avalon_st_adapter_003:out_0_data -> DCache_cache_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                             // DCache_cache_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                             // avalon_st_adapter_003:out_0_error -> DCache_cache_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dcache_cache_master_translator (
		.clk                    (clk_clk_clk),                                                            //                       clk.clk
		.reset                  (DCache_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address            (dcache_cache_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dcache_cache_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dcache_cache_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dcache_cache_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dcache_cache_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dcache_cache_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dcache_cache_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dcache_cache_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dcache_cache_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dcache_cache_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dcache_cache_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (DCache_cache_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (DCache_cache_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (DCache_cache_master_burstcount),                                         //                          .burstcount
		.av_byteenable          (DCache_cache_master_byteenable),                                         //                          .byteenable
		.av_read                (DCache_cache_master_read),                                               //                          .read
		.av_readdata            (DCache_cache_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (DCache_cache_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (DCache_cache_master_write),                                              //                          .write
		.av_writedata           (DCache_cache_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                   //               (terminated)
		.av_chipselect          (1'b0),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                                   //               (terminated)
		.av_debugaccess         (1'b0),                                                                   //               (terminated)
		.uav_clken              (),                                                                       //               (terminated)
		.av_clken               (1'b1),                                                                   //               (terminated)
		.uav_response           (2'b00),                                                                  //               (terminated)
		.av_response            (),                                                                       //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid  ()                                                                        //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (1),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) tiger_icache_icache_master_translator (
		.clk                    (clk_clk_clk),                                                                   //                       clk.clk
		.reset                  (DCache_reset_reset_bridge_in_reset_reset),                                      //                     reset.reset
		.uav_address            (tiger_icache_icache_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (tiger_icache_icache_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (tiger_icache_icache_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (tiger_icache_icache_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (tiger_icache_icache_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (tiger_icache_icache_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (tiger_icache_icache_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (tiger_icache_icache_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (tiger_icache_icache_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (tiger_icache_icache_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (tiger_icache_icache_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Tiger_ICache_icache_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Tiger_ICache_icache_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (Tiger_ICache_icache_master_burstcount),                                         //                          .burstcount
		.av_beginbursttransfer  (Tiger_ICache_icache_master_beginbursttransfer),                                 //                          .beginbursttransfer
		.av_read                (Tiger_ICache_icache_master_read),                                               //                          .read
		.av_readdata            (Tiger_ICache_icache_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (Tiger_ICache_icache_master_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_write               (1'b0),                                                                          //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) jtag_to_fpga_bridge_master_translator (
		.clk                    (clk_clk_clk),                                                                   //                       clk.clk
		.reset                  (DCache_reset_reset_bridge_in_reset_reset),                                      //                     reset.reset
		.uav_address            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (JTAG_to_FPGA_Bridge_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (JTAG_to_FPGA_Bridge_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (JTAG_to_FPGA_Bridge_master_byteenable),                                         //                          .byteenable
		.av_read                (JTAG_to_FPGA_Bridge_master_read),                                               //                          .read
		.av_readdata            (JTAG_to_FPGA_Bridge_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (JTAG_to_FPGA_Bridge_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (JTAG_to_FPGA_Bridge_master_write),                                              //                          .write
		.av_writedata           (JTAG_to_FPGA_Bridge_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) tiger_mips_data_master_translator (
		.clk                    (clk_clk_clk),                                                               //                       clk.clk
		.reset                  (Tiger_MIPS_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (tiger_mips_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (tiger_mips_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (tiger_mips_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (tiger_mips_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (tiger_mips_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (tiger_mips_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (tiger_mips_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (tiger_mips_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (tiger_mips_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (tiger_mips_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (tiger_mips_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Tiger_MIPS_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Tiger_MIPS_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Tiger_MIPS_data_master_byteenable),                                         //                          .byteenable
		.av_read                (Tiger_MIPS_data_master_read),                                               //                          .read
		.av_readdata            (Tiger_MIPS_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (Tiger_MIPS_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (Tiger_MIPS_data_master_write),                                              //                          .write
		.av_writedata           (Tiger_MIPS_data_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (clk_clk_clk),                              //                      clk.clk
		.reset                  (DCache_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                   //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (SDRAM_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                           //                         .write
		.av_read                (SDRAM_s1_read),                            //                         .read
		.av_readdata            (SDRAM_s1_readdata),                        //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                       //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                      //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                   //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                     //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                      //                         .chipselect
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_clk_clk),                                        //                      clk.clk
		.reset                  (DCache_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leap_sim_control_bridge_slave_translator (
		.clk                    (clk_clk_clk),                                          //                      clk.clk
		.reset                  (DCache_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (leap_sim_control_bridge_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (leap_sim_control_bridge_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (leap_sim_control_bridge_slave_agent_m0_read),          //                         .read
		.uav_write              (leap_sim_control_bridge_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (leap_sim_control_bridge_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (leap_sim_control_bridge_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (leap_sim_control_bridge_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (leap_sim_control_bridge_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (leap_sim_control_bridge_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (leap_sim_control_bridge_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (leap_sim_control_bridge_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Leap_Sim_Control_bridge_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Leap_Sim_Control_bridge_slave_write),                  //                         .write
		.av_read                (Leap_Sim_Control_bridge_slave_read),                   //                         .read
		.av_readdata            (Leap_Sim_Control_bridge_slave_readdata),               //                         .readdata
		.av_writedata           (Leap_Sim_Control_bridge_slave_writedata),              //                         .writedata
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dcache_cache_slave_translator (
		.clk                    (clk_clk_clk),                               //                      clk.clk
		.reset                  (DCache_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (dcache_cache_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dcache_cache_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dcache_cache_slave_agent_m0_read),          //                         .read
		.uav_write              (dcache_cache_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (dcache_cache_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dcache_cache_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dcache_cache_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dcache_cache_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dcache_cache_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dcache_cache_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dcache_cache_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (DCache_cache_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (DCache_cache_slave_write),                  //                         .write
		.av_read                (DCache_cache_slave_read),                   //                         .read
		.av_readdata            (DCache_cache_slave_readdata),               //                         .readdata
		.av_writedata           (DCache_cache_slave_writedata),              //                         .writedata
		.av_byteenable          (DCache_cache_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (DCache_cache_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (DCache_cache_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_chipselect          (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (103),
		.PKT_CACHE_L               (100),
		.PKT_THREAD_ID_H           (96),
		.PKT_THREAD_ID_L           (96),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dcache_cache_master_agent (
		.clk                   (clk_clk_clk),                                                            //       clk.clk
		.reset                 (DCache_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address            (dcache_cache_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dcache_cache_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dcache_cache_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dcache_cache_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dcache_cache_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dcache_cache_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dcache_cache_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dcache_cache_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dcache_cache_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dcache_cache_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dcache_cache_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dcache_cache_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dcache_cache_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dcache_cache_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dcache_cache_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dcache_cache_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                      //          .ready
		.av_response           (),                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (103),
		.PKT_CACHE_L               (100),
		.PKT_THREAD_ID_H           (96),
		.PKT_THREAD_ID_L           (96),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) tiger_icache_icache_master_agent (
		.clk                   (clk_clk_clk),                                                                   //       clk.clk
		.reset                 (DCache_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.av_address            (tiger_icache_icache_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (tiger_icache_icache_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (tiger_icache_icache_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (tiger_icache_icache_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (tiger_icache_icache_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (tiger_icache_icache_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (tiger_icache_icache_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (tiger_icache_icache_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (tiger_icache_icache_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (tiger_icache_icache_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (tiger_icache_icache_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (tiger_icache_icache_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (tiger_icache_icache_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (tiger_icache_icache_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (tiger_icache_icache_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (tiger_icache_icache_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                         //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                          //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                       //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                   //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                         //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (103),
		.PKT_CACHE_L               (100),
		.PKT_THREAD_ID_H           (96),
		.PKT_THREAD_ID_L           (96),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_to_fpga_bridge_master_agent (
		.clk                   (clk_clk_clk),                                                                   //       clk.clk
		.reset                 (DCache_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.av_address            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (jtag_to_fpga_bridge_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (jtag_to_fpga_bridge_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (jtag_to_fpga_bridge_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (jtag_to_fpga_bridge_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (jtag_to_fpga_bridge_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (jtag_to_fpga_bridge_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (103),
		.PKT_CACHE_L               (100),
		.PKT_THREAD_ID_H           (96),
		.PKT_THREAD_ID_L           (96),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) tiger_mips_data_master_agent (
		.clk                   (clk_clk_clk),                                                               //       clk.clk
		.reset                 (Tiger_MIPS_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (tiger_mips_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (tiger_mips_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (tiger_mips_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (tiger_mips_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (tiger_mips_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (tiger_mips_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (tiger_mips_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (tiger_mips_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (tiger_mips_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (tiger_mips_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (tiger_mips_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (tiger_mips_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (tiger_mips_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (tiger_mips_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (tiger_mips_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (tiger_mips_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (tiger_mips_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (tiger_mips_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (tiger_mips_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (tiger_mips_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (tiger_mips_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (tiger_mips_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (90),
		.PKT_ORI_BURST_SIZE_L      (88),
		.PKT_RESPONSE_STATUS_H     (87),
		.PKT_RESPONSE_STATUS_L     (86),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (81),
		.PKT_PROTECTION_L          (79),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (77),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (91),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (DCache_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (92),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                               //       clk.clk
		.reset             (DCache_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (clk_clk_clk),                              //       clk.clk
		.reset             (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_startofpacket  (1'b0),                                     // (terminated)
		.in_endofpacket    (1'b0),                                     // (terminated)
		.out_startofpacket (),                                         // (terminated)
		.out_endofpacket   (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_clk_clk),                                                  //             clk.clk
		.reset                   (DCache_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                  //       clk.clk
		.reset             (DCache_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leap_sim_control_bridge_slave_agent (
		.clk                     (clk_clk_clk),                                                    //             clk.clk
		.reset                   (DCache_reset_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (leap_sim_control_bridge_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (leap_sim_control_bridge_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (leap_sim_control_bridge_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (leap_sim_control_bridge_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (leap_sim_control_bridge_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (leap_sim_control_bridge_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (leap_sim_control_bridge_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (leap_sim_control_bridge_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (leap_sim_control_bridge_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (leap_sim_control_bridge_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (leap_sim_control_bridge_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (leap_sim_control_bridge_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (leap_sim_control_bridge_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (leap_sim_control_bridge_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (leap_sim_control_bridge_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (leap_sim_control_bridge_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                        //                .channel
		.rf_sink_ready           (leap_sim_control_bridge_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (leap_sim_control_bridge_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (leap_sim_control_bridge_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (leap_sim_control_bridge_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (leap_sim_control_bridge_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (leap_sim_control_bridge_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (leap_sim_control_bridge_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (leap_sim_control_bridge_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (leap_sim_control_bridge_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (leap_sim_control_bridge_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (leap_sim_control_bridge_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leap_sim_control_bridge_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (leap_sim_control_bridge_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leap_sim_control_bridge_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                    //       clk.clk
		.reset             (DCache_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (leap_sim_control_bridge_slave_agent_rf_source_data),             //        in.data
		.in_valid          (leap_sim_control_bridge_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (leap_sim_control_bridge_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (leap_sim_control_bridge_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (leap_sim_control_bridge_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (leap_sim_control_bridge_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (leap_sim_control_bridge_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (leap_sim_control_bridge_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (leap_sim_control_bridge_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (leap_sim_control_bridge_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dcache_cache_slave_agent (
		.clk                     (clk_clk_clk),                                         //             clk.clk
		.reset                   (DCache_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (dcache_cache_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dcache_cache_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dcache_cache_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dcache_cache_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dcache_cache_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (dcache_cache_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dcache_cache_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dcache_cache_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (dcache_cache_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dcache_cache_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (dcache_cache_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (dcache_cache_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dcache_cache_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (dcache_cache_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (dcache_cache_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (dcache_cache_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                             //                .channel
		.rf_sink_ready           (dcache_cache_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dcache_cache_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dcache_cache_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dcache_cache_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dcache_cache_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dcache_cache_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dcache_cache_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dcache_cache_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dcache_cache_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dcache_cache_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (dcache_cache_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dcache_cache_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dcache_cache_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dcache_cache_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                         //       clk.clk
		.reset             (DCache_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (dcache_cache_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dcache_cache_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dcache_cache_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dcache_cache_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dcache_cache_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dcache_cache_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dcache_cache_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dcache_cache_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dcache_cache_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dcache_cache_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	legup_system_mm_interconnect_1_router router (
		.sink_ready         (dcache_cache_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dcache_cache_master_agent_cp_valid),         //          .valid
		.sink_data          (dcache_cache_master_agent_cp_data),          //          .data
		.sink_startofpacket (dcache_cache_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dcache_cache_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_src_ready),                           //       src.ready
		.src_valid          (router_src_valid),                           //          .valid
		.src_data           (router_src_data),                            //          .data
		.src_channel        (router_src_channel),                         //          .channel
		.src_startofpacket  (router_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                      //          .endofpacket
	);

	legup_system_mm_interconnect_1_router router_001 (
		.sink_ready         (tiger_icache_icache_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (tiger_icache_icache_master_agent_cp_valid),         //          .valid
		.sink_data          (tiger_icache_icache_master_agent_cp_data),          //          .data
		.sink_startofpacket (tiger_icache_icache_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tiger_icache_icache_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                       //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_001_src_ready),                              //       src.ready
		.src_valid          (router_001_src_valid),                              //          .valid
		.src_data           (router_001_src_data),                               //          .data
		.src_channel        (router_001_src_channel),                            //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                         //          .endofpacket
	);

	legup_system_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (jtag_to_fpga_bridge_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (jtag_to_fpga_bridge_master_agent_cp_valid),         //          .valid
		.sink_data          (jtag_to_fpga_bridge_master_agent_cp_data),          //          .data
		.sink_startofpacket (jtag_to_fpga_bridge_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_to_fpga_bridge_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                       //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_002_src_ready),                              //       src.ready
		.src_valid          (router_002_src_valid),                              //          .valid
		.src_data           (router_002_src_data),                               //          .data
		.src_channel        (router_002_src_channel),                            //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                         //          .endofpacket
	);

	legup_system_mm_interconnect_1_router_003 router_003 (
		.sink_ready         (tiger_mips_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (tiger_mips_data_master_agent_cp_valid),         //          .valid
		.sink_data          (tiger_mips_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (tiger_mips_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tiger_mips_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                   //       clk.clk
		.reset              (Tiger_MIPS_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_003_src_ready),                          //       src.ready
		.src_valid          (router_003_src_valid),                          //          .valid
		.src_data           (router_003_src_data),                           //          .data
		.src_channel        (router_003_src_channel),                        //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                     //          .endofpacket
	);

	legup_system_mm_interconnect_1_router_004 router_004 (
		.sink_ready         (sdram_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                  //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_clk_clk),                              //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                     //       src.ready
		.src_valid          (router_004_src_valid),                     //          .valid
		.src_data           (router_004_src_data),                      //          .data
		.src_channel        (router_004_src_channel),                   //          .channel
		.src_startofpacket  (router_004_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                //          .endofpacket
	);

	legup_system_mm_interconnect_1_router_005 router_005 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_005_src_ready),                               //       src.ready
		.src_valid          (router_005_src_valid),                               //          .valid
		.src_data           (router_005_src_data),                                //          .data
		.src_channel        (router_005_src_channel),                             //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                          //          .endofpacket
	);

	legup_system_mm_interconnect_1_router_006 router_006 (
		.sink_ready         (leap_sim_control_bridge_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (leap_sim_control_bridge_slave_agent_rp_valid),         //          .valid
		.sink_data          (leap_sim_control_bridge_slave_agent_rp_data),          //          .data
		.sink_startofpacket (leap_sim_control_bridge_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (leap_sim_control_bridge_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                          //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_006_src_ready),                                 //       src.ready
		.src_valid          (router_006_src_valid),                                 //          .valid
		.src_data           (router_006_src_data),                                  //          .data
		.src_channel        (router_006_src_channel),                               //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                            //          .endofpacket
	);

	legup_system_mm_interconnect_1_router_007 router_007 (
		.sink_ready         (dcache_cache_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dcache_cache_slave_agent_rp_valid),         //          .valid
		.sink_data          (dcache_cache_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dcache_cache_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dcache_cache_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                               //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_007_src_ready),                      //       src.ready
		.src_valid          (router_007_src_valid),                      //          .valid
		.src_data           (router_007_src_data),                       //          .data
		.src_channel        (router_007_src_channel),                    //          .channel
		.src_startofpacket  (router_007_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (94),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (92),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) jtag_to_fpga_bridge_master_limiter (
		.clk                    (clk_clk_clk),                                              //       clk.clk
		.reset                  (DCache_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                     //          .valid
		.cmd_sink_data          (router_002_src_data),                                      //          .data
		.cmd_sink_channel       (router_002_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (jtag_to_fpga_bridge_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (jtag_to_fpga_bridge_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (jtag_to_fpga_bridge_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (94),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (92),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) tiger_mips_data_master_limiter (
		.clk                    (clk_clk_clk),                                          //       clk.clk
		.reset                  (Tiger_MIPS_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                 //          .valid
		.cmd_sink_data          (router_003_src_data),                                  //          .data
		.cmd_sink_channel       (router_003_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (tiger_mips_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (tiger_mips_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (tiger_mips_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (tiger_mips_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (tiger_mips_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                              //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                          //          .endofpacket
		.rsp_src_ready          (tiger_mips_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (tiger_mips_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (tiger_mips_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (tiger_mips_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (tiger_mips_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (tiger_mips_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (tiger_mips_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (72),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (91),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (64),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (clk_clk_clk),                                  //       cr0.clk
		.reset                 (DCache_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (sdram_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	legup_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_clk_clk),                              //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                         //      sink.ready
		.sink_channel       (router_src_channel),                       //          .channel
		.sink_data          (router_src_data),                          //          .data
		.sink_startofpacket (router_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_src_valid),                         //          .valid
		.src0_ready         (cmd_demux_src0_ready),                     //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                     //          .valid
		.src0_data          (cmd_demux_src0_data),                      //          .data
		.src0_channel       (cmd_demux_src0_channel),                   //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                //          .endofpacket
	);

	legup_system_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                (clk_clk_clk),                              //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                     //      sink.ready
		.sink_channel       (router_001_src_channel),                   //          .channel
		.sink_data          (router_001_src_data),                      //          .data
		.sink_startofpacket (router_001_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_001_src_valid),                     //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                 //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                 //          .valid
		.src0_data          (cmd_demux_001_src0_data),                  //          .data
		.src0_channel       (cmd_demux_001_src0_channel),               //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)            //          .endofpacket
	);

	legup_system_mm_interconnect_1_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_clk_clk),                                              //        clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset),                 //  clk_reset.reset
		.sink_ready         (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (jtag_to_fpga_bridge_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (jtag_to_fpga_bridge_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                 //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                 //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                  //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                               //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                           //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                 //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                 //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                  //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                               //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                           //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                                 //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                                 //           .valid
		.src2_data          (cmd_demux_002_src2_data),                                  //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                               //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                         //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket)                            //           .endofpacket
	);

	legup_system_mm_interconnect_1_cmd_demux_003 cmd_demux_003 (
		.clk                (clk_clk_clk),                                          //        clk.clk
		.reset              (Tiger_MIPS_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (tiger_mips_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (tiger_mips_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (tiger_mips_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (tiger_mips_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (tiger_mips_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (tiger_mips_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                             //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                             //           .valid
		.src0_data          (cmd_demux_003_src0_data),                              //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                           //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                       //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                             //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                             //           .valid
		.src1_data          (cmd_demux_003_src1_data),                              //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                           //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                        //           .endofpacket
	);

	legup_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_clk_clk),                              //       clk.clk
		.reset               (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_src_valid),                        //          .valid
		.src_data            (cmd_mux_src_data),                         //          .data
		.src_channel         (cmd_mux_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                   //          .channel
		.sink0_data          (cmd_demux_src0_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                 //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),               //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                  //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),           //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                 //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                 //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),               //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                  //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)            //          .endofpacket
	);

	legup_system_mm_interconnect_1_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_clk_clk),                              //       clk.clk
		.reset               (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                    //          .valid
		.src_data            (cmd_mux_001_src_data),                     //          .data
		.src_channel         (cmd_mux_001_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_002_src1_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_002_src1_valid),                 //          .valid
		.sink0_channel       (cmd_demux_002_src1_channel),               //          .channel
		.sink0_data          (cmd_demux_002_src1_data),                  //          .data
		.sink0_startofpacket (cmd_demux_002_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src1_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                 //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),               //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                  //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket)            //          .endofpacket
	);

	legup_system_mm_interconnect_1_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_clk_clk),                              //       clk.clk
		.reset               (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                    //          .valid
		.src_data            (cmd_mux_002_src_data),                     //          .data
		.src_channel         (cmd_mux_002_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                 //          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),               //          .channel
		.sink0_data          (cmd_demux_002_src2_data),                  //          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket)            //          .endofpacket
	);

	legup_system_mm_interconnect_1_cmd_mux_002 cmd_mux_003 (
		.clk                 (clk_clk_clk),                              //       clk.clk
		.reset               (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                    //          .valid
		.src_data            (cmd_mux_003_src_data),                     //          .data
		.src_channel         (cmd_mux_003_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_003_src1_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_003_src1_valid),                 //          .valid
		.sink0_channel       (cmd_demux_003_src1_channel),               //          .channel
		.sink0_data          (cmd_demux_003_src1_data),                  //          .data
		.sink0_startofpacket (cmd_demux_003_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src1_endofpacket)            //          .endofpacket
	);

	legup_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (sdram_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_src1_data),                          //          .data
		.src1_channel       (rsp_demux_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_src2_data),                          //          .data
		.src2_channel       (rsp_demux_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                    //          .endofpacket
	);

	legup_system_mm_interconnect_1_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_clk_clk),                              //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                     //      sink.ready
		.sink_channel       (router_005_src_channel),                   //          .channel
		.sink_data          (router_005_src_data),                      //          .data
		.sink_startofpacket (router_005_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_005_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_001_src0_data),                  //          .data
		.src0_channel       (rsp_demux_001_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_001_src1_data),                  //          .data
		.src1_channel       (rsp_demux_001_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)            //          .endofpacket
	);

	legup_system_mm_interconnect_1_cmd_demux rsp_demux_002 (
		.clk                (clk_clk_clk),                              //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                     //      sink.ready
		.sink_channel       (router_006_src_channel),                   //          .channel
		.sink_data          (router_006_src_data),                      //          .data
		.sink_startofpacket (router_006_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_006_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_002_src0_data),                  //          .data
		.src0_channel       (rsp_demux_002_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)            //          .endofpacket
	);

	legup_system_mm_interconnect_1_cmd_demux rsp_demux_003 (
		.clk                (clk_clk_clk),                              //       clk.clk
		.reset              (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                     //      sink.ready
		.sink_channel       (router_007_src_channel),                   //          .channel
		.sink_data          (router_007_src_data),                      //          .data
		.sink_startofpacket (router_007_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_007_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_003_src0_data),                  //          .data
		.src0_channel       (rsp_demux_003_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)            //          .endofpacket
	);

	legup_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_clk_clk),                              //       clk.clk
		.reset               (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_src_valid),                        //          .valid
		.src_data            (rsp_mux_src_data),                         //          .data
		.src_channel         (rsp_mux_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                     //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                   //          .channel
		.sink0_data          (rsp_demux_src0_data),                      //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                //          .endofpacket
	);

	legup_system_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                 (clk_clk_clk),                              //       clk.clk
		.reset               (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                    //          .valid
		.src_data            (rsp_mux_001_src_data),                     //          .data
		.src_channel         (rsp_mux_001_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                     //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                   //          .channel
		.sink0_data          (rsp_demux_src1_data),                      //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                //          .endofpacket
	);

	legup_system_mm_interconnect_1_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_clk_clk),                              //       clk.clk
		.reset               (DCache_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                    //          .valid
		.src_data            (rsp_mux_002_src_data),                     //          .data
		.src_channel         (rsp_mux_002_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                     //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                   //          .channel
		.sink0_data          (rsp_demux_src2_data),                      //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket),               //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                 //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),               //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                  //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),           //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                 //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                 //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),               //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                  //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)            //          .endofpacket
	);

	legup_system_mm_interconnect_1_rsp_mux_003 rsp_mux_003 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (Tiger_MIPS_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                        //          .valid
		.src_data            (rsp_mux_003_src_data),                         //          .data
		.src_channel         (rsp_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_001_src1_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_001_src1_valid),                     //          .valid
		.sink0_channel       (rsp_demux_001_src1_channel),                   //          .channel
		.sink0_data          (rsp_demux_001_src1_data),                      //          .data
		.sink0_startofpacket (rsp_demux_001_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src1_endofpacket),               //          .endofpacket
		.sink1_ready         (rsp_demux_003_src0_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_003_src0_valid),                     //          .valid
		.sink1_channel       (rsp_demux_003_src0_channel),                   //          .channel
		.sink1_data          (rsp_demux_003_src0_data),                      //          .data
		.sink1_startofpacket (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_003_src0_endofpacket)                //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (87),
		.IN_PKT_RESPONSE_STATUS_L      (86),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (88),
		.IN_PKT_ORI_BURST_SIZE_H       (90),
		.IN_ST_DATA_W                  (91),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (85),
		.OUT_PKT_BURST_SIZE_L          (83),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (87),
		.OUT_PKT_BURST_TYPE_L          (86),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_rsp_width_adapter (
		.clk                  (clk_clk_clk),                                  //       clk.clk
		.reset                (DCache_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_004_src_valid),                         //      sink.valid
		.in_channel           (router_004_src_channel),                       //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_004_src_ready),                         //          .ready
		.in_data              (router_004_src_data),                          //          .data
		.out_endofpacket      (sdram_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (82),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (85),
		.IN_PKT_BURST_SIZE_L           (83),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (87),
		.IN_PKT_BURST_TYPE_L           (86),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (87),
		.OUT_PKT_RESPONSE_STATUS_L     (86),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (88),
		.OUT_PKT_ORI_BURST_SIZE_H      (90),
		.OUT_ST_DATA_W                 (91),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_cmd_width_adapter (
		.clk                  (clk_clk_clk),                                  //       clk.clk
		.reset                (DCache_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                            //      sink.valid
		.in_channel           (cmd_mux_src_channel),                          //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                    //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                      //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                            //          .ready
		.in_data              (cmd_mux_src_data),                             //          .data
		.out_endofpacket      (sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	legup_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (DCache_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)             //         .error
	);

	legup_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (DCache_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                       //         .error
	);

	legup_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (DCache_reset_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (leap_sim_control_bridge_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (leap_sim_control_bridge_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (leap_sim_control_bridge_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                         //         .error
	);

	legup_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (DCache_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (dcache_cache_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dcache_cache_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dcache_cache_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)              //         .error
	);

endmodule
