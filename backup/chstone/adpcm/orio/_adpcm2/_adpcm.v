//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Apr 14 18:02:51 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 43
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @ah1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_ah1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ah1_a {`TAG_g_ah1, 23'd216}
// @ah2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_ah2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ah2_a {`TAG_g_ah2, 23'd184}
// @al1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_al1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_al1_a {`TAG_g_al1, 23'd252}
// @al2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_al2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_al2_a {`TAG_g_al2, 23'd244}
// @delay_bph = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bph `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_bph_a {`TAG_g_delay_bph, 23'd192}
// @delay_bpl = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bpl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_bpl_a {`TAG_g_delay_bpl, 23'd96}
// @delay_dhx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dhx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_dhx_a {`TAG_g_delay_dhx, 23'd160}
// @delay_dltx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dltx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_dltx_a {`TAG_g_delay_dltx, 23'd128}
// @deth = internal unnamed_addr global i32 0, align 4
`define TAG_g_deth `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_deth_a {`TAG_g_deth, 23'd156}
// @detl = internal unnamed_addr global i32 0, align 4
`define TAG_g_detl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_detl_a {`TAG_g_detl, 23'd240}
// @h = internal unnamed_addr constant [24 x i32] [i32 12, i32 -44, i32 -44, i32 212, i32 48, i32 -624, i32 128, i32 1448, i32 -840, i32 -3220, i32 3804, i32 15504, i32 15504, i32 3804, i32 -3220, i32 -8...
`define TAG_g_h `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_h_a {`TAG_g_h, 23'd384}
// @il = internal unnamed_addr global i32 0, align 4
`define TAG_g_il `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_il_a {`TAG_g_il, 23'd236}
// @ilb_table = internal unnamed_addr constant [32 x i32] [i32 2048, i32 2093, i32 2139, i32 2186, i32 2233, i32 2282, i32 2332, i32 2383, i32 2435, i32 2489, i32 2543, i32 2599, i32 2656, i32 2714, i32 ...
`define TAG_g_ilb_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_ilb_table_a {`TAG_g_ilb_table, 23'd0}
// @nbh = internal unnamed_addr global i32 0, align 4
`define TAG_g_nbh `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_nbh_a {`TAG_g_nbh, 23'd152}
// @nbl = internal unnamed_addr global i32 0, align 4
`define TAG_g_nbl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_nbl_a {`TAG_g_nbl, 23'd232}
// @ph1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_ph1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ph1_a {`TAG_g_ph1, 23'd124}
// @ph2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_ph2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ph2_a {`TAG_g_ph2, 23'd120}
// @plt1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_plt1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_plt1_a {`TAG_g_plt1, 23'd228}
// @plt2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_plt2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_plt2_a {`TAG_g_plt2, 23'd224}
// @qq2_code2_table = internal unnamed_addr constant [4 x i32] [i32 -7408, i32 -1616, i32 7408, i32 1616], align 4
`define TAG_g_qq2_code2_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_qq2_code2_table_a {`TAG_g_qq2_code2_table, 23'd480}
// @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, ...
`define TAG_g_qq4_code4_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_qq4_code4_table_a {`TAG_g_qq4_code4_table, 23'd512}
// @quant26bt_neg = internal unnamed_addr constant [31 x i32] [i32 63, i32 62, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 ...
`define TAG_g_quant26bt_neg `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_quant26bt_neg_a {`TAG_g_quant26bt_neg, 23'd256}
// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
`define TAG_g_quant26bt_pos `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_quant26bt_pos_a {`TAG_g_quant26bt_pos, 23'd128}
// @rh1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_rh1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rh1_a {`TAG_g_rh1, 23'd220}
// @rh2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_rh2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rh2_a {`TAG_g_rh2, 23'd188}
// @rlt1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_rlt1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rlt1_a {`TAG_g_rlt1, 23'd256}
// @rlt2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_rlt2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rlt2_a {`TAG_g_rlt2, 23'd248}
// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
`define TAG_g_tqmf `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_tqmf_a {`TAG_g_tqmf, 23'd0}
// @wh_code_table = internal unnamed_addr constant [4 x i32] [i32 798, i32 -214, i32 798, i32 -214], align 4
`define TAG_g_wh_code_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_wh_code_table_a {`TAG_g_wh_code_table, 23'd496}
// @wl_code_table = internal unnamed_addr constant [16 x i32] [i32 -60, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32...
`define TAG_g_wl_code_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_wl_code_table_a {`TAG_g_wl_code_table, 23'd576}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [7:0] rom_32_address_a;
reg [7:0] rom_32_address_b;
reg rom_32_write_enable_a;
reg rom_32_write_enable_b;
reg [31:0] rom_32_in_a;
reg [31:0] rom_32_in_b;
wire [31:0] rom_32_out_a;
wire [31:0] rom_32_out_b;

// @h = internal unnamed_addr constant [24 x i32] [i32 12, i32 -44, i32 -44, i32 212, i32 48, i32 -624, i32 128, i32 1448, i32 -840, i32 -3220, i32 3804, i32 15504, i32 15504, i32 3804, i32 -3220, i32 -8...
rom_dual_port rom_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_32_address_a ),
	.address_b( rom_32_address_b ),
	.q_a( rom_32_out_a ),
	.q_b( rom_32_out_b)
);
defparam rom_32.width_a = 32;
defparam rom_32.width_b = 32;
defparam rom_32.widthad_a = 8;
defparam rom_32.widthad_b = 8;
defparam rom_32.numwords_a = 160;
defparam rom_32.numwords_b = 160;
defparam rom_32.latency = ram_latency;
defparam rom_32.init_file = "rom_32.mif";

reg [6:0] ram_32_address_a;
reg [6:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 7;
defparam ram_32.widthad_b = 7;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 65;
defparam ram_32.numwords_b = 65;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_32_a;
assign select_rom_32_a = (tag_a == 2);
reg [ram_latency:0] select_rom_32_reg_a;
wire [31:0] memory_controller_rom_32_out_a;
assign memory_controller_rom_32_out_a = {32{ select_rom_32_reg_a[ram_latency]}} & rom_32_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 3);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	rom_32_address_a = memory_controller_address_a [8-1+2:2] & {8{select_rom_32_a}};
	rom_32_write_enable_a = memory_controller_write_enable_a & select_rom_32_a;
	rom_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ram_32_address_a = memory_controller_address_a [7-1+2:2] & {7{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_rom_32_reg_a[ram_latency]}} | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_32_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_32_b;
assign select_rom_32_b = (tag_b == 2);
reg [ram_latency:0] select_rom_32_reg_b;
wire [31:0] memory_controller_rom_32_out_b;
assign memory_controller_rom_32_out_b = {32{ select_rom_32_reg_b[ram_latency]}} & rom_32_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 3);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	rom_32_address_b = memory_controller_address_b [8-1+2:2] & {8{select_rom_32_b}};
	rom_32_write_enable_b = memory_controller_write_enable_b & select_rom_32_b;
	rom_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ram_32_address_b = memory_controller_address_b [7-1+2:2] & {7{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_rom_32_reg_b[ram_latency]}} | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_32_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module encode
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_xin1,
	arg_xin2
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_encode_BB__0_1 = 7'd1;
parameter [6:0] LEGUP_F_encode_BB__0_2 = 7'd2;
parameter [6:0] LEGUP_F_encode_BB__0_3 = 7'd3;
parameter [6:0] LEGUP_F_encode_BB__0_4 = 7'd4;
parameter [6:0] LEGUP_F_encode_BB__0_5 = 7'd5;
parameter [6:0] LEGUP_F_encode_BB__8_6 = 7'd6;
parameter [6:0] LEGUP_F_encode_BB__8_7 = 7'd7;
parameter [6:0] LEGUP_F_encode_BB__8_8 = 7'd8;
parameter [6:0] LEGUP_F_encode_BB__8_9 = 7'd9;
parameter [6:0] LEGUP_F_encode_BB__8_10 = 7'd10;
parameter [6:0] LEGUP_F_encode_BB__8_11 = 7'd11;
parameter [6:0] LEGUP_F_encode_BB__22_12 = 7'd12;
parameter [6:0] LEGUP_F_encode_BB__22_13 = 7'd13;
parameter [6:0] LEGUP_F_encode_BB__22_14 = 7'd14;
parameter [6:0] LEGUP_F_encode_BB__24_15 = 7'd15;
parameter [6:0] LEGUP_F_encode_BB__24_16 = 7'd16;
parameter [6:0] LEGUP_F_encode_BB__24_17 = 7'd17;
parameter [6:0] LEGUP_F_encode_BB__24_18 = 7'd18;
parameter [6:0] LEGUP_F_encode_BB__24_19 = 7'd19;
parameter [6:0] LEGUP_F_encode_BB__29_20 = 7'd20;
parameter [6:0] LEGUP_F_encode_BB__29_21 = 7'd21;
parameter [6:0] LEGUP_F_encode_BB__29_22 = 7'd22;
parameter [6:0] LEGUP_F_encode_BB__29_23 = 7'd23;
parameter [6:0] LEGUP_F_encode_BB__29_24 = 7'd24;
parameter [6:0] LEGUP_F_encode_BB__33_25 = 7'd25;
parameter [6:0] LEGUP_F_encode_BB__33_26 = 7'd26;
parameter [6:0] LEGUP_F_encode_BB__33_27 = 7'd27;
parameter [6:0] LEGUP_F_encode_BB__33_28 = 7'd28;
parameter [6:0] LEGUP_F_encode_BB__33_29 = 7'd29;
parameter [6:0] LEGUP_F_encode_BB_filtezexit_30 = 7'd30;
parameter [6:0] LEGUP_F_encode_BB_filtezexit_31 = 7'd31;
parameter [6:0] LEGUP_F_encode_BB_filtezexit_32 = 7'd32;
parameter [6:0] LEGUP_F_encode_BB_filtezexit_33 = 7'd33;
parameter [6:0] LEGUP_F_encode_BB_filtezexit_34 = 7'd34;
parameter [6:0] LEGUP_F_encode_BB__58_35 = 7'd35;
parameter [6:0] LEGUP_F_encode_BB__61_36 = 7'd36;
parameter [6:0] LEGUP_F_encode_BB__61_37 = 7'd37;
parameter [6:0] LEGUP_F_encode_BB__61_38 = 7'd38;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_39 = 7'd39;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_40 = 7'd40;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_41 = 7'd41;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_42 = 7'd42;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_43 = 7'd43;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_44 = 7'd44;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_45 = 7'd45;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_46 = 7'd46;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_47 = 7'd47;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_48 = 7'd48;
parameter [6:0] LEGUP_F_encode_BB_preheader1i24preheader_49 = 7'd49;
parameter [6:0] LEGUP_F_encode_BB_preheaderi21preheader_50 = 7'd50;
parameter [6:0] LEGUP_F_encode_BB_preheaderi21_51 = 7'd51;
parameter [6:0] LEGUP_F_encode_BB_preheaderi21_52 = 7'd52;
parameter [6:0] LEGUP_F_encode_BB_preheaderi21_53 = 7'd53;
parameter [6:0] LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_54 = 7'd54;
parameter [6:0] LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_55 = 7'd55;
parameter [6:0] LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_56 = 7'd56;
parameter [6:0] LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_57 = 7'd57;
parameter [6:0] LEGUP_F_encode_BB_preheader1i24_58 = 7'd58;
parameter [6:0] LEGUP_F_encode_BB_preheader1i24_59 = 7'd59;
parameter [6:0] LEGUP_F_encode_BB_preheader1i24_60 = 7'd60;
parameter [6:0] LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61 = 7'd61;
parameter [6:0] LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_62 = 7'd62;
parameter [6:0] LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_63 = 7'd63;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit25loopexit_64 = 7'd64;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit25loopexit2_65 = 7'd65;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit25_66 = 7'd66;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit25_67 = 7'd67;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit25_68 = 7'd68;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit25_69 = 7'd69;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit25_70 = 7'd70;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit25_71 = 7'd71;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit25_72 = 7'd72;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit25_73 = 7'd73;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit25_74 = 7'd74;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit25_75 = 7'd75;
parameter [6:0] LEGUP_F_encode_BB__139_76 = 7'd76;
parameter [6:0] LEGUP_F_encode_BB__139_77 = 7'd77;
parameter [6:0] LEGUP_F_encode_BB__139_78 = 7'd78;
parameter [6:0] LEGUP_F_encode_BB__139_79 = 7'd79;
parameter [6:0] LEGUP_F_encode_BB__139_80 = 7'd80;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_81 = 7'd81;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_82 = 7'd82;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_83 = 7'd83;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_84 = 7'd84;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_85 = 7'd85;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_86 = 7'd86;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_87 = 7'd87;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_88 = 7'd88;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_89 = 7'd89;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_90 = 7'd90;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_91 = 7'd91;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_92 = 7'd92;
parameter [6:0] LEGUP_F_encode_BB_filtezexit11_93 = 7'd93;
parameter [6:0] LEGUP_F_encode_BB_preheader1ipreheader_94 = 7'd94;
parameter [6:0] LEGUP_F_encode_BB_preheaderipreheader_95 = 7'd95;
parameter [6:0] LEGUP_F_encode_BB_preheaderi_96 = 7'd96;
parameter [6:0] LEGUP_F_encode_BB_preheaderi_97 = 7'd97;
parameter [6:0] LEGUP_F_encode_BB_preheaderi_98 = 7'd98;
parameter [6:0] LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_99 = 7'd99;
parameter [6:0] LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_100 = 7'd100;
parameter [6:0] LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_101 = 7'd101;
parameter [6:0] LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_102 = 7'd102;
parameter [6:0] LEGUP_F_encode_BB_preheader1i_103 = 7'd103;
parameter [6:0] LEGUP_F_encode_BB_preheader1i_104 = 7'd104;
parameter [6:0] LEGUP_F_encode_BB_preheader1i_105 = 7'd105;
parameter [6:0] LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106 = 7'd106;
parameter [6:0] LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_107 = 7'd107;
parameter [6:0] LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_108 = 7'd108;
parameter [6:0] LEGUP_F_encode_BB_upzeroexitloopexit_109 = 7'd109;
parameter [6:0] LEGUP_F_encode_BB_upzeroexitloopexit1_110 = 7'd110;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit_111 = 7'd111;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit_112 = 7'd112;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit_113 = 7'd113;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit_114 = 7'd114;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit_115 = 7'd115;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit_116 = 7'd116;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit_117 = 7'd117;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit_118 = 7'd118;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit_119 = 7'd119;
parameter [6:0] LEGUP_F_encode_BB_upzeroexit_120 = 7'd120;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_xin1;
input [31:0] arg_xin2;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] encode_0_1;
reg [31:0] encode_0_1_reg;
reg [31:0] encode_0_2;
reg [31:0] encode_0_2_reg;
reg [31:0] encode_0_3;
reg [31:0] encode_0_3_reg;
reg [31:0] encode_0_4;
reg [31:0] encode_0_4_reg;
reg [31:0] encode_0_5;
reg [31:0] encode_0_5_reg;
reg [31:0] encode_0_6;
reg [31:0] encode_0_6_reg;
reg [31:0] encode_0_7;
reg [31:0] encode_0_7_reg;
reg [31:0] encode_8_9;
reg [31:0] encode_8_9_reg;
reg [31:0] encode_8_i043;
reg [31:0] encode_8_i043_reg;
reg [31:0] encode_8_xb042;
reg [31:0] encode_8_xb042_reg;
reg [31:0] encode_8_10;
reg [31:0] encode_8_10_reg;
reg [31:0] encode_8_11;
reg [31:0] encode_8_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_8_scevgep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_8_scevgep27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_8_scevgep28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_8_scevgep28_reg;
reg [31:0] encode_8_12;
reg [31:0] encode_8_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_8_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_8_scevgep29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_8_scevgep30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_8_scevgep30_reg;
reg [31:0] encode_8_13;
reg [31:0] encode_8_13_reg;
reg [31:0] encode_8_14;
reg [31:0] encode_8_14_reg;
reg [31:0] encode_8_15;
reg [31:0] encode_8_15_reg;
reg [31:0] encode_8_16;
reg [31:0] encode_8_16_reg;
reg [31:0] encode_8_17;
reg [31:0] encode_8_17_reg;
reg [31:0] encode_8_18;
reg [31:0] encode_8_18_reg;
reg [31:0] encode_8_19;
reg [31:0] encode_8_19_reg;
reg [31:0] encode_8_20;
reg [31:0] encode_8_20_reg;
reg [31:0] encode_8_21;
reg [31:0] encode_8_21_reg;
reg  encode_8_exitcond;
reg  encode_8_exitcond_reg;
reg [31:0] encode_22_23;
reg [31:0] encode_22_23_reg;
reg [31:0] encode_24_i138;
reg [31:0] encode_24_i138_reg;
reg [31:0] encode_24_25;
reg [31:0] encode_24_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_24_tqmf_ptr1039;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_24_tqmf_ptr1039_reg;
reg [31:0] encode_24_26;
reg [31:0] encode_24_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_24_tqmf_ptr137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_24_tqmf_ptr137_reg;
reg [31:0] encode_24_27;
reg [31:0] encode_24_27_reg;
reg [31:0] encode_24_28;
reg [31:0] encode_24_28_reg;
reg  encode_24_exitcond24;
reg  encode_24_exitcond24_reg;
reg [31:0] encode_29_30;
reg [31:0] encode_29_30_reg;
reg [31:0] encode_29_31;
reg [31:0] encode_29_31_reg;
reg [31:0] encode_29_32;
reg [31:0] encode_29_32_reg;
reg [31:0] encode_33_indvar19;
reg [31:0] encode_33_indvar19_reg;
reg [31:0] encode_33_zl05i;
reg [31:0] encode_33_zl05i_reg;
reg [31:0] encode_33_34;
reg [31:0] encode_33_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_33_017i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_33_017i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_33_06i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_33_06i_reg;
reg [31:0] encode_33_35;
reg [31:0] encode_33_35_reg;
reg [31:0] encode_33_36;
reg [31:0] encode_33_36_reg;
reg [31:0] encode_33_37;
reg [31:0] encode_33_37_reg;
reg [31:0] encode_33_38;
reg [31:0] encode_33_38_reg;
reg [31:0] encode_33_indvarnext20;
reg [31:0] encode_33_indvarnext20_reg;
reg  encode_33_exitcond21;
reg  encode_33_exitcond21_reg;
reg [31:0] encode_filtezexit_39;
reg [31:0] encode_filtezexit_39_reg;
reg [31:0] encode_filtezexit_40;
reg [31:0] encode_filtezexit_40_reg;
reg [31:0] encode_filtezexit_41;
reg [31:0] encode_filtezexit_41_reg;
reg [31:0] encode_filtezexit_42;
reg [31:0] encode_filtezexit_42_reg;
reg [31:0] encode_filtezexit_43;
reg [31:0] encode_filtezexit_43_reg;
reg [31:0] encode_filtezexit_44;
reg [31:0] encode_filtezexit_44_reg;
reg [31:0] encode_filtezexit_45;
reg [31:0] encode_filtezexit_45_reg;
reg [31:0] encode_filtezexit_46;
reg [31:0] encode_filtezexit_46_reg;
reg [31:0] encode_filtezexit_47;
reg [31:0] encode_filtezexit_47_reg;
reg [31:0] encode_filtezexit_48;
reg [31:0] encode_filtezexit_48_reg;
reg [31:0] encode_filtezexit_49;
reg [31:0] encode_filtezexit_49_reg;
reg [31:0] encode_filtezexit_50;
reg [31:0] encode_filtezexit_50_reg;
reg [31:0] encode_filtezexit_51;
reg [31:0] encode_filtezexit_51_reg;
reg [31:0] encode_filtezexit_tmpi28;
reg [31:0] encode_filtezexit_tmpi28_reg;
reg [31:0] encode_filtezexit_tmp1i29;
reg [31:0] encode_filtezexit_tmp1i29_reg;
reg [31:0] encode_filtezexit_52;
reg [31:0] encode_filtezexit_52_reg;
reg [31:0] encode_filtezexit_53;
reg [31:0] encode_filtezexit_53_reg;
reg [31:0] encode_filtezexit_54;
reg [31:0] encode_filtezexit_54_reg;
reg [31:0] encode_filtezexit_55;
reg [31:0] encode_filtezexit_55_reg;
reg  encode_filtezexit_56;
reg  encode_filtezexit_56_reg;
reg [31:0] encode_filtezexit_57;
reg [31:0] encode_filtezexit_57_reg;
reg [31:0] encode_filtezexit_m0ii;
reg [31:0] encode_filtezexit_m0ii_reg;
reg [31:0] encode_58_59;
reg [31:0] encode_58_59_reg;
reg  encode_58_60;
reg  encode_58_60_reg;
reg [31:0] encode_61_62;
reg [31:0] encode_61_62_reg;
reg [31:0] encode_61_63;
reg [31:0] encode_61_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_61_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_61_scevgep18_reg;
reg [31:0] encode_61_64;
reg [31:0] encode_61_64_reg;
reg [31:0] encode_61_65;
reg [31:0] encode_61_65_reg;
reg [31:0] encode_61_66;
reg [31:0] encode_61_66_reg;
reg  encode_61_67;
reg  encode_61_67_reg;
reg [31:0] encode_quantlexit_mil0lcssai;
reg [31:0] encode_quantlexit_mil0lcssai_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_quant26bt_posquant26bt_negi;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_quant26bt_posquant26bt_negi_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_ril0ini;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_ril0ini_reg;
reg [31:0] encode_quantlexit_ril0i;
reg [31:0] encode_quantlexit_ril0i_reg;
reg [31:0] encode_quantlexit_68;
reg [31:0] encode_quantlexit_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_69_reg;
reg [31:0] encode_quantlexit_70;
reg [31:0] encode_quantlexit_70_reg;
reg [31:0] encode_quantlexit_71;
reg [31:0] encode_quantlexit_71_reg;
reg [31:0] encode_quantlexit_72;
reg [31:0] encode_quantlexit_72_reg;
reg [31:0] encode_quantlexit_73;
reg [31:0] encode_quantlexit_73_reg;
reg [31:0] encode_quantlexit_74;
reg [31:0] encode_quantlexit_74_reg;
reg [31:0] encode_quantlexit_75;
reg [31:0] encode_quantlexit_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_76_reg;
reg [31:0] encode_quantlexit_77;
reg [31:0] encode_quantlexit_77_reg;
reg [31:0] encode_quantlexit_78;
reg [31:0] encode_quantlexit_78_reg;
reg  encode_quantlexit_79;
reg  encode_quantlexit_79_reg;
reg [31:0] encode_quantlexit_i26;
reg [31:0] encode_quantlexit_i26_reg;
reg  encode_quantlexit_80;
reg  encode_quantlexit_80_reg;
reg [31:0] encode_quantlexit_i27;
reg [31:0] encode_quantlexit_i27_reg;
reg [31:0] encode_quantlexit_81;
reg [31:0] encode_quantlexit_81_reg;
reg [31:0] encode_quantlexit_82;
reg [31:0] encode_quantlexit_82_reg;
reg [31:0] encode_quantlexit_83;
reg [31:0] encode_quantlexit_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_84_reg;
reg [31:0] encode_quantlexit_85;
reg [31:0] encode_quantlexit_85_reg;
reg [31:0] encode_quantlexit_86;
reg [31:0] encode_quantlexit_86_reg;
reg [31:0] encode_quantlexit_87;
reg [31:0] encode_quantlexit_87_reg;
reg [31:0] encode_quantlexit_88;
reg [31:0] encode_quantlexit_88_reg;
reg [31:0] encode_quantlexit_89;
reg [31:0] encode_quantlexit_89_reg;
reg  encode_quantlexit_90;
reg  encode_quantlexit_90_reg;
reg [31:0] encode_preheaderi21_91;
reg [31:0] encode_preheaderi21_91_reg;
reg [31:0] encode_preheaderi21_i03i19;
reg [31:0] encode_preheaderi21_i03i19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheaderi21_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheaderi21_scevgep13_reg;
reg [31:0] encode_preheaderi21_92;
reg [31:0] encode_preheaderi21_92_reg;
reg [31:0] encode_preheaderi21_93;
reg [31:0] encode_preheaderi21_93_reg;
reg  encode_preheaderi21_exitcond11;
reg  encode_preheaderi21_exitcond11_reg;
reg [31:0] encode_preheaderi21preheaderi21_crit_edge_94;
reg [31:0] encode_preheaderi21preheaderi21_crit_edge_94_reg;
reg [31:0] encode_preheaderi21preheaderi21_crit_edge_95;
reg [31:0] encode_preheaderi21preheaderi21_crit_edge_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheaderi21preheaderi21_crit_edge_phitransinsert;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheaderi21preheaderi21_crit_edge_phitransinsert_reg;
reg [31:0] encode_preheaderi21preheaderi21_crit_edge_pre;
reg [31:0] encode_preheaderi21preheaderi21_crit_edge_pre_reg;
reg [31:0] encode_preheader1i24_96;
reg [31:0] encode_preheader1i24_96_reg;
reg [31:0] encode_preheader1i24_97;
reg [31:0] encode_preheader1i24_97_reg;
reg [31:0] encode_preheader1i24_i14i22;
reg [31:0] encode_preheader1i24_i14i22_reg;
reg [31:0] encode_preheader1i24_98;
reg [31:0] encode_preheader1i24_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader1i24_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader1i24_scevgep17_reg;
reg [31:0] encode_preheader1i24_99;
reg [31:0] encode_preheader1i24_99_reg;
reg [31:0] encode_preheader1i24_100;
reg [31:0] encode_preheader1i24_100_reg;
reg [31:0] encode_preheader1i24_101;
reg [31:0] encode_preheader1i24_101_reg;
reg [31:0] encode_preheader1i24_102;
reg [31:0] encode_preheader1i24_102_reg;
reg [31:0] encode_preheader1i24_103;
reg [31:0] encode_preheader1i24_103_reg;
reg [31:0] encode_preheader1i24_104;
reg [31:0] encode_preheader1i24_104_reg;
reg [31:0] encode_preheader1i24_105;
reg [31:0] encode_preheader1i24_105_reg;
reg  encode_preheader1i24_exitcond14;
reg  encode_preheader1i24_exitcond14_reg;
reg [31:0] encode_preheader1i24preheader1i24_crit_edge_106;
reg [31:0] encode_preheader1i24preheader1i24_crit_edge_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader1i24preheader1i24_crit_edge_phitransinsert58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader1i24preheader1i24_crit_edge_phitransinsert58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader1i24preheader1i24_crit_edge_phitransinsert60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader1i24preheader1i24_crit_edge_phitransinsert60_reg;
reg [31:0] encode_preheader1i24preheader1i24_crit_edge_pre59;
reg [31:0] encode_preheader1i24preheader1i24_crit_edge_pre59_reg;
reg [31:0] encode_preheader1i24preheader1i24_crit_edge_pre61;
reg [31:0] encode_preheader1i24preheader1i24_crit_edge_pre61_reg;
reg [31:0] encode_upzeroexit25_107;
reg [31:0] encode_upzeroexit25_107_reg;
reg [31:0] encode_upzeroexit25_108;
reg [31:0] encode_upzeroexit25_108_reg;
reg [31:0] encode_upzeroexit25_109;
reg [31:0] encode_upzeroexit25_109_reg;
reg [31:0] encode_upzeroexit25_110;
reg [31:0] encode_upzeroexit25_110_reg;
reg [31:0] encode_upzeroexit25_111;
reg [31:0] encode_upzeroexit25_111_reg;
reg [31:0] encode_upzeroexit25_112;
reg [31:0] encode_upzeroexit25_112_reg;
reg [31:0] encode_upzeroexit25_113;
reg [31:0] encode_upzeroexit25_113_reg;
reg  encode_upzeroexit25_114;
reg  encode_upzeroexit25_114_reg;
reg [31:0] encode_upzeroexit25_115;
reg [31:0] encode_upzeroexit25_115_reg;
reg [31:0] encode_upzeroexit25_1i15;
reg [31:0] encode_upzeroexit25_1i15_reg;
reg [31:0] encode_upzeroexit25_116;
reg [31:0] encode_upzeroexit25_116_reg;
reg [31:0] encode_upzeroexit25_117;
reg [31:0] encode_upzeroexit25_117_reg;
reg [31:0] encode_upzeroexit25_118;
reg [31:0] encode_upzeroexit25_118_reg;
reg [31:0] encode_upzeroexit25_119;
reg [31:0] encode_upzeroexit25_119_reg;
reg [31:0] encode_upzeroexit25_120;
reg [31:0] encode_upzeroexit25_120_reg;
reg [31:0] encode_upzeroexit25_121;
reg [31:0] encode_upzeroexit25_121_reg;
reg [31:0] encode_upzeroexit25_122;
reg [31:0] encode_upzeroexit25_122_reg;
reg [31:0] encode_upzeroexit25_wd40i16;
reg [31:0] encode_upzeroexit25_wd40i16_reg;
reg [31:0] encode_upzeroexit25_123;
reg [31:0] encode_upzeroexit25_123_reg;
reg  encode_upzeroexit25_124;
reg  encode_upzeroexit25_124_reg;
reg [31:0] encode_upzeroexit25_i17;
reg [31:0] encode_upzeroexit25_i17_reg;
reg  encode_upzeroexit25_125;
reg  encode_upzeroexit25_125_reg;
reg [31:0] encode_upzeroexit25_i18;
reg [31:0] encode_upzeroexit25_i18_reg;
reg [31:0] encode_upzeroexit25_126;
reg [31:0] encode_upzeroexit25_126_reg;
reg [31:0] encode_upzeroexit25_127;
reg [31:0] encode_upzeroexit25_127_reg;
reg [31:0] encode_upzeroexit25_128;
reg [31:0] encode_upzeroexit25_128_reg;
reg [31:0] encode_upzeroexit25_129;
reg [31:0] encode_upzeroexit25_129_reg;
reg [31:0] encode_upzeroexit25_130;
reg [31:0] encode_upzeroexit25_130_reg;
reg [31:0] encode_upzeroexit25_apl10i12;
reg [31:0] encode_upzeroexit25_apl10i12_reg;
reg [31:0] encode_upzeroexit25_131;
reg [31:0] encode_upzeroexit25_131_reg;
reg  encode_upzeroexit25_132;
reg  encode_upzeroexit25_132_reg;
reg [31:0] encode_upzeroexit25_apl10i13;
reg [31:0] encode_upzeroexit25_apl10i13_reg;
reg [31:0] encode_upzeroexit25_133;
reg [31:0] encode_upzeroexit25_133_reg;
reg  encode_upzeroexit25_134;
reg  encode_upzeroexit25_134_reg;
reg [31:0] encode_upzeroexit25_apl12i14;
reg [31:0] encode_upzeroexit25_apl12i14_reg;
reg [31:0] encode_upzeroexit25_135;
reg [31:0] encode_upzeroexit25_135_reg;
reg [31:0] encode_upzeroexit25_136;
reg [31:0] encode_upzeroexit25_136_reg;
reg [31:0] encode_upzeroexit25_137;
reg [31:0] encode_upzeroexit25_137_reg;
reg [31:0] encode_upzeroexit25_138;
reg [31:0] encode_upzeroexit25_138_reg;
reg [31:0] encode_139_indvar;
reg [31:0] encode_139_indvar_reg;
reg [31:0] encode_139_zl05i6;
reg [31:0] encode_139_zl05i6_reg;
reg [31:0] encode_139_140;
reg [31:0] encode_139_140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_139_017i9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_139_017i9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_139_06i8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_139_06i8_reg;
reg [31:0] encode_139_141;
reg [31:0] encode_139_141_reg;
reg [31:0] encode_139_142;
reg [31:0] encode_139_142_reg;
reg [31:0] encode_139_143;
reg [31:0] encode_139_143_reg;
reg [31:0] encode_139_144;
reg [31:0] encode_139_144_reg;
reg [31:0] encode_139_indvarnext;
reg [31:0] encode_139_indvarnext_reg;
reg  encode_139_exitcond8;
reg  encode_139_exitcond8_reg;
reg [31:0] encode_filtezexit11_145;
reg [31:0] encode_filtezexit11_145_reg;
reg [31:0] encode_filtezexit11_146;
reg [31:0] encode_filtezexit11_146_reg;
reg [31:0] encode_filtezexit11_147;
reg [31:0] encode_filtezexit11_147_reg;
reg [31:0] encode_filtezexit11_148;
reg [31:0] encode_filtezexit11_148_reg;
reg [31:0] encode_filtezexit11_149;
reg [31:0] encode_filtezexit11_149_reg;
reg [31:0] encode_filtezexit11_150;
reg [31:0] encode_filtezexit11_150_reg;
reg [31:0] encode_filtezexit11_151;
reg [31:0] encode_filtezexit11_151_reg;
reg [31:0] encode_filtezexit11_tmpi;
reg [31:0] encode_filtezexit11_tmpi_reg;
reg [31:0] encode_filtezexit11_tmp1i;
reg [31:0] encode_filtezexit11_tmp1i_reg;
reg [31:0] encode_filtezexit11_152;
reg [31:0] encode_filtezexit11_152_reg;
reg [31:0] encode_filtezexit11_153;
reg [31:0] encode_filtezexit11_153_reg;
reg [31:0] encode_filtezexit11_154;
reg [31:0] encode_filtezexit11_154_reg;
reg [31:0] encode_filtezexit11_155;
reg [31:0] encode_filtezexit11_155_reg;
reg [31:0] encode_filtezexit11_156;
reg [31:0] encode_filtezexit11_156_reg;
reg [31:0] encode_filtezexit11_157;
reg [31:0] encode_filtezexit11_157_reg;
reg [31:0] encode_filtezexit11_158;
reg [31:0] encode_filtezexit11_158_reg;
reg [31:0] encode_filtezexit11_159;
reg [31:0] encode_filtezexit11_159_reg;
reg  encode_filtezexit11_160;
reg  encode_filtezexit11_160_reg;
reg [31:0] encode_filtezexit11_161;
reg [31:0] encode_filtezexit11_161_reg;
reg [31:0] encode_filtezexit11_m0i;
reg [31:0] encode_filtezexit11_m0i_reg;
reg  encode_filtezexit11_162;
reg  encode_filtezexit11_162_reg;
reg [31:0] encode_filtezexit11_v;
reg [31:0] encode_filtezexit11_v_reg;
reg [31:0] encode_filtezexit11_;
reg [31:0] encode_filtezexit11__reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_filtezexit11_163;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_filtezexit11_163_reg;
reg [31:0] encode_filtezexit11_164;
reg [31:0] encode_filtezexit11_164_reg;
reg [31:0] encode_filtezexit11_165;
reg [31:0] encode_filtezexit11_165_reg;
reg [31:0] encode_filtezexit11_166;
reg [31:0] encode_filtezexit11_166_reg;
reg [31:0] encode_filtezexit11_167;
reg [31:0] encode_filtezexit11_167_reg;
reg [31:0] encode_filtezexit11_168;
reg [31:0] encode_filtezexit11_168_reg;
reg [31:0] encode_filtezexit11_169;
reg [31:0] encode_filtezexit11_169_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_filtezexit11_170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_filtezexit11_170_reg;
reg [31:0] encode_filtezexit11_171;
reg [31:0] encode_filtezexit11_171_reg;
reg [31:0] encode_filtezexit11_172;
reg [31:0] encode_filtezexit11_172_reg;
reg  encode_filtezexit11_173;
reg  encode_filtezexit11_173_reg;
reg [31:0] encode_filtezexit11_i2;
reg [31:0] encode_filtezexit11_i2_reg;
reg  encode_filtezexit11_174;
reg  encode_filtezexit11_174_reg;
reg [31:0] encode_filtezexit11_i3;
reg [31:0] encode_filtezexit11_i3_reg;
reg [31:0] encode_filtezexit11_175;
reg [31:0] encode_filtezexit11_175_reg;
reg [31:0] encode_filtezexit11_176;
reg [31:0] encode_filtezexit11_176_reg;
reg [31:0] encode_filtezexit11_177;
reg [31:0] encode_filtezexit11_177_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_filtezexit11_178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_filtezexit11_178_reg;
reg [31:0] encode_filtezexit11_179;
reg [31:0] encode_filtezexit11_179_reg;
reg [31:0] encode_filtezexit11_180;
reg [31:0] encode_filtezexit11_180_reg;
reg [31:0] encode_filtezexit11_181;
reg [31:0] encode_filtezexit11_181_reg;
reg [31:0] encode_filtezexit11_182;
reg [31:0] encode_filtezexit11_182_reg;
reg [31:0] encode_filtezexit11_183;
reg [31:0] encode_filtezexit11_183_reg;
reg  encode_filtezexit11_184;
reg  encode_filtezexit11_184_reg;
reg [31:0] encode_preheaderi_185;
reg [31:0] encode_preheaderi_185_reg;
reg [31:0] encode_preheaderi_i03i;
reg [31:0] encode_preheaderi_i03i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheaderi_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheaderi_scevgep_reg;
reg [31:0] encode_preheaderi_186;
reg [31:0] encode_preheaderi_186_reg;
reg [31:0] encode_preheaderi_187;
reg [31:0] encode_preheaderi_187_reg;
reg  encode_preheaderi_exitcond3;
reg  encode_preheaderi_exitcond3_reg;
reg [31:0] encode_preheaderipreheaderi_crit_edge_188;
reg [31:0] encode_preheaderipreheaderi_crit_edge_188_reg;
reg [31:0] encode_preheaderipreheaderi_crit_edge_189;
reg [31:0] encode_preheaderipreheaderi_crit_edge_189_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheaderipreheaderi_crit_edge_phitransinsert52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheaderipreheaderi_crit_edge_phitransinsert52_reg;
reg [31:0] encode_preheaderipreheaderi_crit_edge_pre53;
reg [31:0] encode_preheaderipreheaderi_crit_edge_pre53_reg;
reg [31:0] encode_preheader1i_190;
reg [31:0] encode_preheader1i_190_reg;
reg [31:0] encode_preheader1i_191;
reg [31:0] encode_preheader1i_191_reg;
reg [31:0] encode_preheader1i_i14i;
reg [31:0] encode_preheader1i_i14i_reg;
reg [31:0] encode_preheader1i_192;
reg [31:0] encode_preheader1i_192_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader1i_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader1i_scevgep7_reg;
reg [31:0] encode_preheader1i_193;
reg [31:0] encode_preheader1i_193_reg;
reg [31:0] encode_preheader1i_194;
reg [31:0] encode_preheader1i_194_reg;
reg [31:0] encode_preheader1i_195;
reg [31:0] encode_preheader1i_195_reg;
reg [31:0] encode_preheader1i_196;
reg [31:0] encode_preheader1i_196_reg;
reg [31:0] encode_preheader1i_197;
reg [31:0] encode_preheader1i_197_reg;
reg [31:0] encode_preheader1i_198;
reg [31:0] encode_preheader1i_198_reg;
reg [31:0] encode_preheader1i_199;
reg [31:0] encode_preheader1i_199_reg;
reg  encode_preheader1i_exitcond4;
reg  encode_preheader1i_exitcond4_reg;
reg [31:0] encode_preheader1ipreheader1i_crit_edge_200;
reg [31:0] encode_preheader1ipreheader1i_crit_edge_200_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader1ipreheader1i_crit_edge_phitransinsert54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader1ipreheader1i_crit_edge_phitransinsert54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader1ipreheader1i_crit_edge_phitransinsert56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_preheader1ipreheader1i_crit_edge_phitransinsert56_reg;
reg [31:0] encode_preheader1ipreheader1i_crit_edge_pre55;
reg [31:0] encode_preheader1ipreheader1i_crit_edge_pre55_reg;
reg [31:0] encode_preheader1ipreheader1i_crit_edge_pre57;
reg [31:0] encode_preheader1ipreheader1i_crit_edge_pre57_reg;
reg [31:0] encode_upzeroexit_201;
reg [31:0] encode_upzeroexit_201_reg;
reg [31:0] encode_upzeroexit_202;
reg [31:0] encode_upzeroexit_202_reg;
reg [31:0] encode_upzeroexit_203;
reg [31:0] encode_upzeroexit_203_reg;
reg [31:0] encode_upzeroexit_204;
reg [31:0] encode_upzeroexit_204_reg;
reg [31:0] encode_upzeroexit_205;
reg [31:0] encode_upzeroexit_205_reg;
reg [31:0] encode_upzeroexit_206;
reg [31:0] encode_upzeroexit_206_reg;
reg [31:0] encode_upzeroexit_207;
reg [31:0] encode_upzeroexit_207_reg;
reg  encode_upzeroexit_208;
reg  encode_upzeroexit_208_reg;
reg [31:0] encode_upzeroexit_209;
reg [31:0] encode_upzeroexit_209_reg;
reg [31:0] encode_upzeroexit_1i;
reg [31:0] encode_upzeroexit_1i_reg;
reg [31:0] encode_upzeroexit_210;
reg [31:0] encode_upzeroexit_210_reg;
reg [31:0] encode_upzeroexit_211;
reg [31:0] encode_upzeroexit_211_reg;
reg [31:0] encode_upzeroexit_212;
reg [31:0] encode_upzeroexit_212_reg;
reg [31:0] encode_upzeroexit_213;
reg [31:0] encode_upzeroexit_213_reg;
reg [31:0] encode_upzeroexit_214;
reg [31:0] encode_upzeroexit_214_reg;
reg [31:0] encode_upzeroexit_215;
reg [31:0] encode_upzeroexit_215_reg;
reg [31:0] encode_upzeroexit_216;
reg [31:0] encode_upzeroexit_216_reg;
reg [31:0] encode_upzeroexit_wd40i;
reg [31:0] encode_upzeroexit_wd40i_reg;
reg [31:0] encode_upzeroexit_217;
reg [31:0] encode_upzeroexit_217_reg;
reg  encode_upzeroexit_218;
reg  encode_upzeroexit_218_reg;
reg [31:0] encode_upzeroexit_i;
reg [31:0] encode_upzeroexit_i_reg;
reg  encode_upzeroexit_219;
reg  encode_upzeroexit_219_reg;
reg [31:0] encode_upzeroexit_i_var0;
reg [31:0] encode_upzeroexit_i_var0_reg;
reg [31:0] encode_upzeroexit_220;
reg [31:0] encode_upzeroexit_220_reg;
reg [31:0] encode_upzeroexit_221;
reg [31:0] encode_upzeroexit_221_reg;
reg [31:0] encode_upzeroexit_222;
reg [31:0] encode_upzeroexit_222_reg;
reg [31:0] encode_upzeroexit_223;
reg [31:0] encode_upzeroexit_223_reg;
reg [31:0] encode_upzeroexit_224;
reg [31:0] encode_upzeroexit_224_reg;
reg [31:0] encode_upzeroexit_apl10i;
reg [31:0] encode_upzeroexit_apl10i_reg;
reg [31:0] encode_upzeroexit_225;
reg [31:0] encode_upzeroexit_225_reg;
reg  encode_upzeroexit_226;
reg  encode_upzeroexit_226_reg;
reg [31:0] encode_upzeroexit_apl10i_var1;
reg [31:0] encode_upzeroexit_apl10i_var1_reg;
reg [31:0] encode_upzeroexit_227;
reg [31:0] encode_upzeroexit_227_reg;
reg  encode_upzeroexit_228;
reg  encode_upzeroexit_228_reg;
reg [31:0] encode_upzeroexit_apl12i;
reg [31:0] encode_upzeroexit_apl12i_reg;
reg [31:0] encode_upzeroexit_229;
reg [31:0] encode_upzeroexit_229_reg;
reg [31:0] encode_upzeroexit_230;
reg [31:0] encode_upzeroexit_230_reg;
reg [31:0] encode_upzeroexit_231;
reg [31:0] encode_upzeroexit_231_reg;
wire [1:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [1:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
wire [5:0] qq6_code6_table_address_a;
wire  qq6_code6_table_write_enable_a;
wire [31:0] qq6_code6_table_in_a;
wire [31:0] qq6_code6_table_out_a;
wire [5:0] qq6_code6_table_address_b;
wire  qq6_code6_table_write_enable_b;
wire [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_b;
reg [4:0] decis_levl_address_a;
reg  decis_levl_write_enable_a;
wire [31:0] decis_levl_in_a;
wire [31:0] decis_levl_out_a;
wire [4:0] decis_levl_address_b;
wire  decis_levl_write_enable_b;
wire [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_b;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [2:0] dec_del_bpl_address_a;
wire  dec_del_bpl_write_enable_a;
wire [31:0] dec_del_bpl_in_a;
wire [31:0] dec_del_bpl_out_a;
wire [2:0] dec_del_bpl_address_b;
wire  dec_del_bpl_write_enable_b;
wire [31:0] dec_del_bpl_in_b;
wire [31:0] dec_del_bpl_out_b;
wire [2:0] dec_del_dltx_address_a;
wire  dec_del_dltx_write_enable_a;
wire [31:0] dec_del_dltx_in_a;
wire [31:0] dec_del_dltx_out_a;
wire [2:0] dec_del_dltx_address_b;
wire  dec_del_dltx_write_enable_b;
wire [31:0] dec_del_dltx_in_b;
wire [31:0] dec_del_dltx_out_b;
wire [2:0] dec_del_bph_address_a;
wire  dec_del_bph_write_enable_a;
wire [31:0] dec_del_bph_in_a;
wire [31:0] dec_del_bph_out_a;
wire [2:0] dec_del_bph_address_b;
wire  dec_del_bph_write_enable_b;
wire [31:0] dec_del_bph_in_b;
wire [31:0] dec_del_bph_out_b;
wire [2:0] dec_del_dhx_address_a;
wire  dec_del_dhx_write_enable_a;
wire [31:0] dec_del_dhx_in_a;
wire [31:0] dec_del_dhx_out_a;
wire [2:0] dec_del_dhx_address_b;
wire  dec_del_dhx_write_enable_b;
wire [31:0] dec_del_dhx_in_b;
wire [31:0] dec_del_dhx_out_b;
wire [3:0] accumc_address_a;
wire  accumc_write_enable_a;
wire [31:0] accumc_in_a;
wire [31:0] accumc_out_a;
wire [3:0] accumc_address_b;
wire  accumc_write_enable_b;
wire [31:0] accumc_in_b;
wire [31:0] accumc_out_b;
wire [3:0] accumd_address_a;
wire  accumd_write_enable_a;
wire [31:0] accumd_in_a;
wire [31:0] accumd_out_a;
wire [3:0] accumd_address_b;
wire  accumd_write_enable_b;
wire [31:0] accumd_in_b;
wire [31:0] accumd_out_b;
wire [6:0] test_data_address_a;
wire  test_data_write_enable_a;
wire [31:0] test_data_in_a;
wire [31:0] test_data_out_a;
wire [6:0] test_data_address_b;
wire  test_data_write_enable_b;
wire [31:0] test_data_in_b;
wire [31:0] test_data_out_b;
wire [6:0] test_compressed_address_a;
wire  test_compressed_write_enable_a;
wire [31:0] test_compressed_in_a;
wire [31:0] test_compressed_out_a;
wire [6:0] test_compressed_address_b;
wire  test_compressed_write_enable_b;
wire [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_b;
wire [6:0] test_result_address_a;
wire  test_result_write_enable_a;
wire [31:0] test_result_in_a;
wire [31:0] test_result_out_a;
wire [6:0] test_result_address_b;
wire  test_result_write_enable_b;
wire [31:0] test_result_in_b;
wire [31:0] test_result_out_b;
wire [6:0] compressed_address_a;
wire  compressed_write_enable_a;
wire [31:0] compressed_in_a;
wire [31:0] compressed_out_a;
wire [6:0] compressed_address_b;
wire  compressed_write_enable_b;
wire [31:0] compressed_in_b;
wire [31:0] compressed_out_b;
wire [6:0] result_address_a;
wire  result_write_enable_a;
wire [31:0] result_in_a;
wire [31:0] result_out_a;
wire [6:0] result_address_b;
wire  result_write_enable_b;
wire [31:0] result_in_b;
wire [31:0] result_out_b;
reg  lpm_mult_encode_0_2_en;
reg [31:0] encode_0_2_stage0_reg;
reg  lpm_mult_encode_0_4_en;
reg [31:0] encode_0_4_stage0_reg;
reg  lpm_mult_encode_0_6_en;
reg [31:0] encode_0_6_stage0_reg;
reg  lpm_mult_encode_8_15_en;
reg [31:0] encode_8_15_stage0_reg;
reg  lpm_mult_encode_8_20_en;
reg [31:0] encode_8_20_stage0_reg;
reg  lpm_mult_encode_29_32_en;
reg [31:0] encode_29_32_stage0_reg;
reg  lpm_mult_encode_33_37_en;
reg [31:0] encode_33_37_stage0_reg;
reg  lpm_mult_encode_filtezexit_39_en;
reg [31:0] encode_filtezexit_39_stage0_reg;
reg  lpm_mult_encode_filtezexit_50_en;
reg [31:0] encode_filtezexit_50_stage0_reg;
reg  lpm_mult_encode_filtezexit_51_en;
reg [31:0] encode_filtezexit_51_stage0_reg;
reg  lpm_mult_encode_61_65_en;
reg [31:0] encode_61_65_stage0_reg;
reg  lpm_mult_encode_quantlexit_74_en;
reg [31:0] encode_quantlexit_74_stage0_reg;
reg  lpm_mult_encode_quantlexit_71_en;
reg [31:0] encode_quantlexit_71_stage0_reg;
reg  lpm_mult_encode_preheaderi21_92_en;
reg [31:0] encode_preheaderi21_92_stage0_reg;
reg  lpm_mult_encode_preheader1i24_99_en;
reg [31:0] encode_preheader1i24_99_stage0_reg;
reg  lpm_mult_encode_preheader1i24_103_en;
reg [31:0] encode_preheader1i24_103_stage0_reg;
reg  lpm_mult_encode_upzeroexit25_121_en;
reg [31:0] encode_upzeroexit25_121_stage0_reg;
reg  lpm_mult_encode_upzeroexit25_126_en;
reg [31:0] encode_upzeroexit25_126_stage0_reg;
reg  lpm_mult_encode_upzeroexit25_113_en;
reg [31:0] encode_upzeroexit25_113_stage0_reg;
reg  lpm_mult_encode_upzeroexit25_117_en;
reg [31:0] encode_upzeroexit25_117_stage0_reg;
reg  lpm_mult_encode_upzeroexit25_138_en;
reg [31:0] encode_upzeroexit25_138_stage0_reg;
reg  lpm_mult_encode_139_143_en;
reg [31:0] encode_139_143_stage0_reg;
reg  lpm_mult_encode_filtezexit11_150_en;
reg [31:0] encode_filtezexit11_150_stage0_reg;
reg  lpm_mult_encode_filtezexit11_151_en;
reg [31:0] encode_filtezexit11_151_stage0_reg;
reg  lpm_mult_encode_filtezexit11_158_en;
reg [31:0] encode_filtezexit11_158_stage0_reg;
reg  lpm_mult_encode_filtezexit11_168_en;
reg [31:0] encode_filtezexit11_168_stage0_reg;
reg  lpm_mult_encode_filtezexit11_165_en;
reg [31:0] encode_filtezexit11_165_stage0_reg;
reg  lpm_mult_encode_preheaderi_186_en;
reg [31:0] encode_preheaderi_186_stage0_reg;
reg  lpm_mult_encode_preheader1i_193_en;
reg [31:0] encode_preheader1i_193_stage0_reg;
reg  lpm_mult_encode_preheader1i_197_en;
reg [31:0] encode_preheader1i_197_stage0_reg;
reg  lpm_mult_encode_upzeroexit_215_en;
reg [31:0] encode_upzeroexit_215_stage0_reg;
reg  lpm_mult_encode_upzeroexit_220_en;
reg [31:0] encode_upzeroexit_220_stage0_reg;
reg  lpm_mult_encode_upzeroexit_207_en;
reg [31:0] encode_upzeroexit_207_stage0_reg;
reg  lpm_mult_encode_upzeroexit_211_en;
reg [31:0] encode_upzeroexit_211_stage0_reg;

// Local Rams


// @decis_levl = internal unnamed_addr constant [30 x i32] [i32 280, i32 576, i32 880, i32 1200, i32 1520, i32 1864, i32 2208, i32 2584, i32 2960, i32 3376, i32 3784, i32 4240, i32 4696, i32 5200, i32 57...
rom_dual_port decis_levl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( decis_levl_address_a ),
	.address_b( decis_levl_address_b ),
	.q_a( decis_levl_out_a ),
	.q_b( decis_levl_out_b)
);
defparam decis_levl.width_a = 32;
defparam decis_levl.width_b = 32;
defparam decis_levl.widthad_a = 5;
defparam decis_levl.widthad_b = 5;
defparam decis_levl.numwords_a = 30;
defparam decis_levl.numwords_b = 30;
defparam decis_levl.latency = 1;
defparam decis_levl.init_file = "decis_levl.mif";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_encode_BB__0_1;
LEGUP_F_encode_BB__0_1:
		next_state = LEGUP_F_encode_BB__0_2;
LEGUP_F_encode_BB__0_2:
		next_state = LEGUP_F_encode_BB__0_3;
LEGUP_F_encode_BB__0_3:
		next_state = LEGUP_F_encode_BB__0_4;
LEGUP_F_encode_BB__0_4:
		next_state = LEGUP_F_encode_BB__0_5;
LEGUP_F_encode_BB__0_5:
		next_state = LEGUP_F_encode_BB__8_6;
LEGUP_F_encode_BB__139_76:
		next_state = LEGUP_F_encode_BB__139_77;
LEGUP_F_encode_BB__139_77:
		next_state = LEGUP_F_encode_BB__139_78;
LEGUP_F_encode_BB__139_78:
		next_state = LEGUP_F_encode_BB__139_79;
LEGUP_F_encode_BB__139_79:
		next_state = LEGUP_F_encode_BB__139_80;
LEGUP_F_encode_BB__139_80:
	if ((encode_139_exitcond8_reg == 1'd1))
		next_state = LEGUP_F_encode_BB_filtezexit11_81;
	else if ((encode_139_exitcond8_reg == 1'd0))
		next_state = LEGUP_F_encode_BB__139_76;
LEGUP_F_encode_BB__22_12:
		next_state = LEGUP_F_encode_BB__22_13;
LEGUP_F_encode_BB__22_13:
		next_state = LEGUP_F_encode_BB__22_14;
LEGUP_F_encode_BB__22_14:
		next_state = LEGUP_F_encode_BB__24_15;
LEGUP_F_encode_BB__24_15:
		next_state = LEGUP_F_encode_BB__24_16;
LEGUP_F_encode_BB__24_16:
		next_state = LEGUP_F_encode_BB__24_17;
LEGUP_F_encode_BB__24_17:
		next_state = LEGUP_F_encode_BB__24_18;
LEGUP_F_encode_BB__24_18:
		next_state = LEGUP_F_encode_BB__24_19;
LEGUP_F_encode_BB__24_19:
	if ((encode_24_exitcond24_reg == 1'd1))
		next_state = LEGUP_F_encode_BB__29_20;
	else if ((encode_24_exitcond24_reg == 1'd0))
		next_state = LEGUP_F_encode_BB__24_15;
LEGUP_F_encode_BB__29_20:
		next_state = LEGUP_F_encode_BB__29_21;
LEGUP_F_encode_BB__29_21:
		next_state = LEGUP_F_encode_BB__29_22;
LEGUP_F_encode_BB__29_22:
		next_state = LEGUP_F_encode_BB__29_23;
LEGUP_F_encode_BB__29_23:
		next_state = LEGUP_F_encode_BB__29_24;
LEGUP_F_encode_BB__29_24:
		next_state = LEGUP_F_encode_BB__33_25;
LEGUP_F_encode_BB__33_25:
		next_state = LEGUP_F_encode_BB__33_26;
LEGUP_F_encode_BB__33_26:
		next_state = LEGUP_F_encode_BB__33_27;
LEGUP_F_encode_BB__33_27:
		next_state = LEGUP_F_encode_BB__33_28;
LEGUP_F_encode_BB__33_28:
		next_state = LEGUP_F_encode_BB__33_29;
LEGUP_F_encode_BB__33_29:
	if ((encode_33_exitcond21_reg == 1'd1))
		next_state = LEGUP_F_encode_BB_filtezexit_30;
	else if ((encode_33_exitcond21_reg == 1'd0))
		next_state = LEGUP_F_encode_BB__33_25;
LEGUP_F_encode_BB__58_35:
	if ((encode_58_60 == 1'd1))
		next_state = LEGUP_F_encode_BB__61_36;
	else if ((encode_58_60 == 1'd0))
		next_state = LEGUP_F_encode_BB_quantlexit_39;
LEGUP_F_encode_BB__61_36:
		next_state = LEGUP_F_encode_BB__61_37;
LEGUP_F_encode_BB__61_37:
		next_state = LEGUP_F_encode_BB__61_38;
LEGUP_F_encode_BB__61_38:
	if ((encode_61_67 == 1'd1))
		next_state = LEGUP_F_encode_BB__58_35;
	else if ((encode_61_67 == 1'd0))
		next_state = LEGUP_F_encode_BB_quantlexit_39;
LEGUP_F_encode_BB__8_10:
		next_state = LEGUP_F_encode_BB__8_11;
LEGUP_F_encode_BB__8_11:
	if ((encode_8_exitcond_reg == 1'd1))
		next_state = LEGUP_F_encode_BB__22_12;
	else if ((encode_8_exitcond_reg == 1'd0))
		next_state = LEGUP_F_encode_BB__8_6;
LEGUP_F_encode_BB__8_6:
		next_state = LEGUP_F_encode_BB__8_7;
LEGUP_F_encode_BB__8_7:
		next_state = LEGUP_F_encode_BB__8_8;
LEGUP_F_encode_BB__8_8:
		next_state = LEGUP_F_encode_BB__8_9;
LEGUP_F_encode_BB__8_9:
		next_state = LEGUP_F_encode_BB__8_10;
LEGUP_F_encode_BB_filtezexit11_81:
		next_state = LEGUP_F_encode_BB_filtezexit11_82;
LEGUP_F_encode_BB_filtezexit11_82:
		next_state = LEGUP_F_encode_BB_filtezexit11_83;
LEGUP_F_encode_BB_filtezexit11_83:
		next_state = LEGUP_F_encode_BB_filtezexit11_84;
LEGUP_F_encode_BB_filtezexit11_84:
		next_state = LEGUP_F_encode_BB_filtezexit11_85;
LEGUP_F_encode_BB_filtezexit11_85:
		next_state = LEGUP_F_encode_BB_filtezexit11_86;
LEGUP_F_encode_BB_filtezexit11_86:
		next_state = LEGUP_F_encode_BB_filtezexit11_87;
LEGUP_F_encode_BB_filtezexit11_87:
		next_state = LEGUP_F_encode_BB_filtezexit11_88;
LEGUP_F_encode_BB_filtezexit11_88:
		next_state = LEGUP_F_encode_BB_filtezexit11_89;
LEGUP_F_encode_BB_filtezexit11_89:
		next_state = LEGUP_F_encode_BB_filtezexit11_90;
LEGUP_F_encode_BB_filtezexit11_90:
		next_state = LEGUP_F_encode_BB_filtezexit11_91;
LEGUP_F_encode_BB_filtezexit11_91:
		next_state = LEGUP_F_encode_BB_filtezexit11_92;
LEGUP_F_encode_BB_filtezexit11_92:
		next_state = LEGUP_F_encode_BB_filtezexit11_93;
LEGUP_F_encode_BB_filtezexit11_93:
	if ((encode_filtezexit11_184_reg == 1'd1))
		next_state = LEGUP_F_encode_BB_preheaderipreheader_95;
	else if ((encode_filtezexit11_184_reg == 1'd0))
		next_state = LEGUP_F_encode_BB_preheader1ipreheader_94;
LEGUP_F_encode_BB_filtezexit_30:
		next_state = LEGUP_F_encode_BB_filtezexit_31;
LEGUP_F_encode_BB_filtezexit_31:
		next_state = LEGUP_F_encode_BB_filtezexit_32;
LEGUP_F_encode_BB_filtezexit_32:
		next_state = LEGUP_F_encode_BB_filtezexit_33;
LEGUP_F_encode_BB_filtezexit_33:
		next_state = LEGUP_F_encode_BB_filtezexit_34;
LEGUP_F_encode_BB_filtezexit_34:
		next_state = LEGUP_F_encode_BB__61_36;
LEGUP_F_encode_BB_preheader1i24_58:
		next_state = LEGUP_F_encode_BB_preheader1i24_59;
LEGUP_F_encode_BB_preheader1i24_59:
		next_state = LEGUP_F_encode_BB_preheader1i24_60;
LEGUP_F_encode_BB_preheader1i24_60:
	if ((encode_preheader1i24_exitcond14_reg == 1'd1))
		next_state = LEGUP_F_encode_BB_upzeroexit25loopexit2_65;
	else if ((encode_preheader1i24_exitcond14_reg == 1'd0))
		next_state = LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61;
LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61:
		next_state = LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_62;
LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_62:
		next_state = LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_63;
LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_63:
		next_state = LEGUP_F_encode_BB_preheader1i24_58;
LEGUP_F_encode_BB_preheader1i24preheader_49:
		next_state = LEGUP_F_encode_BB_preheader1i24_58;
LEGUP_F_encode_BB_preheader1i_103:
		next_state = LEGUP_F_encode_BB_preheader1i_104;
LEGUP_F_encode_BB_preheader1i_104:
		next_state = LEGUP_F_encode_BB_preheader1i_105;
LEGUP_F_encode_BB_preheader1i_105:
	if ((encode_preheader1i_exitcond4_reg == 1'd1))
		next_state = LEGUP_F_encode_BB_upzeroexitloopexit1_110;
	else if ((encode_preheader1i_exitcond4_reg == 1'd0))
		next_state = LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106;
LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106:
		next_state = LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_107;
LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_107:
		next_state = LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_108;
LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_108:
		next_state = LEGUP_F_encode_BB_preheader1i_103;
LEGUP_F_encode_BB_preheader1ipreheader_94:
		next_state = LEGUP_F_encode_BB_preheader1i_103;
LEGUP_F_encode_BB_preheaderi21_51:
		next_state = LEGUP_F_encode_BB_preheaderi21_52;
LEGUP_F_encode_BB_preheaderi21_52:
		next_state = LEGUP_F_encode_BB_preheaderi21_53;
LEGUP_F_encode_BB_preheaderi21_53:
	if ((encode_preheaderi21_exitcond11_reg == 1'd1))
		next_state = LEGUP_F_encode_BB_upzeroexit25loopexit_64;
	else if ((encode_preheaderi21_exitcond11_reg == 1'd0))
		next_state = LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_54;
LEGUP_F_encode_BB_preheaderi21preheader_50:
		next_state = LEGUP_F_encode_BB_preheaderi21_51;
LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_54:
		next_state = LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_55;
LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_55:
		next_state = LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_56;
LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_56:
		next_state = LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_57;
LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_57:
		next_state = LEGUP_F_encode_BB_preheaderi21_51;
LEGUP_F_encode_BB_preheaderi_96:
		next_state = LEGUP_F_encode_BB_preheaderi_97;
LEGUP_F_encode_BB_preheaderi_97:
		next_state = LEGUP_F_encode_BB_preheaderi_98;
LEGUP_F_encode_BB_preheaderi_98:
	if ((encode_preheaderi_exitcond3_reg == 1'd1))
		next_state = LEGUP_F_encode_BB_upzeroexitloopexit_109;
	else if ((encode_preheaderi_exitcond3_reg == 1'd0))
		next_state = LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_99;
LEGUP_F_encode_BB_preheaderipreheader_95:
		next_state = LEGUP_F_encode_BB_preheaderi_96;
LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_100:
		next_state = LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_101;
LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_101:
		next_state = LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_102;
LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_102:
		next_state = LEGUP_F_encode_BB_preheaderi_96;
LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_99:
		next_state = LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_100;
LEGUP_F_encode_BB_quantlexit_39:
		next_state = LEGUP_F_encode_BB_quantlexit_40;
LEGUP_F_encode_BB_quantlexit_40:
		next_state = LEGUP_F_encode_BB_quantlexit_41;
LEGUP_F_encode_BB_quantlexit_41:
		next_state = LEGUP_F_encode_BB_quantlexit_42;
LEGUP_F_encode_BB_quantlexit_42:
		next_state = LEGUP_F_encode_BB_quantlexit_43;
LEGUP_F_encode_BB_quantlexit_43:
		next_state = LEGUP_F_encode_BB_quantlexit_44;
LEGUP_F_encode_BB_quantlexit_44:
		next_state = LEGUP_F_encode_BB_quantlexit_45;
LEGUP_F_encode_BB_quantlexit_45:
		next_state = LEGUP_F_encode_BB_quantlexit_46;
LEGUP_F_encode_BB_quantlexit_46:
		next_state = LEGUP_F_encode_BB_quantlexit_47;
LEGUP_F_encode_BB_quantlexit_47:
		next_state = LEGUP_F_encode_BB_quantlexit_48;
LEGUP_F_encode_BB_quantlexit_48:
	if ((encode_quantlexit_90_reg == 1'd1))
		next_state = LEGUP_F_encode_BB_preheaderi21preheader_50;
	else if ((encode_quantlexit_90_reg == 1'd0))
		next_state = LEGUP_F_encode_BB_preheader1i24preheader_49;
LEGUP_F_encode_BB_upzeroexit25_66:
		next_state = LEGUP_F_encode_BB_upzeroexit25_67;
LEGUP_F_encode_BB_upzeroexit25_67:
		next_state = LEGUP_F_encode_BB_upzeroexit25_68;
LEGUP_F_encode_BB_upzeroexit25_68:
		next_state = LEGUP_F_encode_BB_upzeroexit25_69;
LEGUP_F_encode_BB_upzeroexit25_69:
		next_state = LEGUP_F_encode_BB_upzeroexit25_70;
LEGUP_F_encode_BB_upzeroexit25_70:
		next_state = LEGUP_F_encode_BB_upzeroexit25_71;
LEGUP_F_encode_BB_upzeroexit25_71:
		next_state = LEGUP_F_encode_BB_upzeroexit25_72;
LEGUP_F_encode_BB_upzeroexit25_72:
		next_state = LEGUP_F_encode_BB_upzeroexit25_73;
LEGUP_F_encode_BB_upzeroexit25_73:
		next_state = LEGUP_F_encode_BB_upzeroexit25_74;
LEGUP_F_encode_BB_upzeroexit25_74:
		next_state = LEGUP_F_encode_BB_upzeroexit25_75;
LEGUP_F_encode_BB_upzeroexit25_75:
		next_state = LEGUP_F_encode_BB__139_76;
LEGUP_F_encode_BB_upzeroexit25loopexit2_65:
		next_state = LEGUP_F_encode_BB_upzeroexit25_66;
LEGUP_F_encode_BB_upzeroexit25loopexit_64:
		next_state = LEGUP_F_encode_BB_upzeroexit25_66;
LEGUP_F_encode_BB_upzeroexit_111:
		next_state = LEGUP_F_encode_BB_upzeroexit_112;
LEGUP_F_encode_BB_upzeroexit_112:
		next_state = LEGUP_F_encode_BB_upzeroexit_113;
LEGUP_F_encode_BB_upzeroexit_113:
		next_state = LEGUP_F_encode_BB_upzeroexit_114;
LEGUP_F_encode_BB_upzeroexit_114:
		next_state = LEGUP_F_encode_BB_upzeroexit_115;
LEGUP_F_encode_BB_upzeroexit_115:
		next_state = LEGUP_F_encode_BB_upzeroexit_116;
LEGUP_F_encode_BB_upzeroexit_116:
		next_state = LEGUP_F_encode_BB_upzeroexit_117;
LEGUP_F_encode_BB_upzeroexit_117:
		next_state = LEGUP_F_encode_BB_upzeroexit_118;
LEGUP_F_encode_BB_upzeroexit_118:
		next_state = LEGUP_F_encode_BB_upzeroexit_119;
LEGUP_F_encode_BB_upzeroexit_119:
		next_state = LEGUP_F_encode_BB_upzeroexit_120;
LEGUP_F_encode_BB_upzeroexit_120:
		next_state = LEGUP_0;
LEGUP_F_encode_BB_upzeroexitloopexit1_110:
		next_state = LEGUP_F_encode_BB_upzeroexit_111;
LEGUP_F_encode_BB_upzeroexitloopexit_109:
		next_state = LEGUP_F_encode_BB_upzeroexit_111;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
		encode_0_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		encode_0_1_reg <= encode_0_1;
		if (start == 1'b0 && ^(encode_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_1_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_2 = encode_0_2_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %2 = mul nsw i32 %1, 12*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_2_reg <= encode_0_2;
		if (start == 1'b0 && ^(encode_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_2_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %2 = mul nsw i32 %1, 12*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_2_reg <= encode_0_2;
		if (start == 1'b0 && ^(encode_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
		encode_0_3 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		encode_0_3_reg <= encode_0_3;
		if (start == 1'b0 && ^(encode_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_3_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_4 = encode_0_4_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %4 = mul nsw i32 %3, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_4_reg <= encode_0_4;
		if (start == 1'b0 && ^(encode_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_4_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %4 = mul nsw i32 %3, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_4_reg <= encode_0_4;
		if (start == 1'b0 && ^(encode_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %5 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
		encode_0_5 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %5 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_5_reg <= encode_0_5;
		if (start == 1'b0 && ^(encode_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_5_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_6 = encode_0_6_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %6 = mul nsw i32 %5, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		encode_0_6_reg <= encode_0_6;
		if (start == 1'b0 && ^(encode_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_6_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %6 = mul nsw i32 %5, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		encode_0_6_reg <= encode_0_6;
		if (start == 1'b0 && ^(encode_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %7 = add nsw i32 %6, %2*/
		encode_0_7 = (encode_0_6 + encode_0_2_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %7 = add nsw i32 %6, %2*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		encode_0_7_reg <= encode_0_7;
		if (start == 1'b0 && ^(encode_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %9 = phi i32 [ %7, %0 ], [ %21, %8 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		encode_8_9 = encode_0_7;
	end
	/* encode: %8*/
	/*   %9 = phi i32 [ %7, %0 ], [ %21, %8 ]*/
	else /* if ((((cur_state == LEGUP_F_encode_BB__8_11) & (memory_controller_waitrequest == 1'd0)) & (encode_8_exitcond_reg == 1'd0))) */ begin
		encode_8_9 = encode_8_21;
	end
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %9 = phi i32 [ %7, %0 ], [ %21, %8 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		encode_8_9_reg <= encode_8_9;
		if (start == 1'b0 && ^(encode_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_9_reg"); $finish; end
	end
	/* encode: %8*/
	/*   %9 = phi i32 [ %7, %0 ], [ %21, %8 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__8_11) & (memory_controller_waitrequest == 1'd0)) & (encode_8_exitcond_reg == 1'd0))) begin
		encode_8_9_reg <= encode_8_9;
		if (start == 1'b0 && ^(encode_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_9_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %i.043 = phi i32 [ 0, %0 ], [ %17, %8 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		encode_8_i043 = 32'd0;
	end
	/* encode: %8*/
	/*   %i.043 = phi i32 [ 0, %0 ], [ %17, %8 ]*/
	else /* if ((((cur_state == LEGUP_F_encode_BB__8_11) & (memory_controller_waitrequest == 1'd0)) & (encode_8_exitcond_reg == 1'd0))) */ begin
		encode_8_i043 = encode_8_17_reg;
	end
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %i.043 = phi i32 [ 0, %0 ], [ %17, %8 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		encode_8_i043_reg <= encode_8_i043;
		if (start == 1'b0 && ^(encode_8_i043) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_i043_reg"); $finish; end
	end
	/* encode: %8*/
	/*   %i.043 = phi i32 [ 0, %0 ], [ %17, %8 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__8_11) & (memory_controller_waitrequest == 1'd0)) & (encode_8_exitcond_reg == 1'd0))) begin
		encode_8_i043_reg <= encode_8_i043;
		if (start == 1'b0 && ^(encode_8_i043) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_i043_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %xb.042 = phi i32 [ %4, %0 ], [ %16, %8 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		encode_8_xb042 = encode_0_4_reg;
	end
	/* encode: %8*/
	/*   %xb.042 = phi i32 [ %4, %0 ], [ %16, %8 ]*/
	else /* if ((((cur_state == LEGUP_F_encode_BB__8_11) & (memory_controller_waitrequest == 1'd0)) & (encode_8_exitcond_reg == 1'd0))) */ begin
		encode_8_xb042 = encode_8_16_reg;
	end
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %xb.042 = phi i32 [ %4, %0 ], [ %16, %8 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		encode_8_xb042_reg <= encode_8_xb042;
		if (start == 1'b0 && ^(encode_8_xb042) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_xb042_reg"); $finish; end
	end
	/* encode: %8*/
	/*   %xb.042 = phi i32 [ %4, %0 ], [ %16, %8 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__8_11) & (memory_controller_waitrequest == 1'd0)) & (encode_8_exitcond_reg == 1'd0))) begin
		encode_8_xb042_reg <= encode_8_xb042;
		if (start == 1'b0 && ^(encode_8_xb042) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_xb042_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %10 = shl i32 %i.043, 1*/
		encode_8_10 = (encode_8_i043_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %10 = shl i32 %i.043, 1*/
	if ((cur_state == LEGUP_F_encode_BB__8_6)) begin
		encode_8_10_reg <= encode_8_10;
		if (start == 1'b0 && ^(encode_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_10_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %11 = add i32 %10, 3*/
		encode_8_11 = (encode_8_10 + 32'd3);
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %11 = add i32 %10, 3*/
	if ((cur_state == LEGUP_F_encode_BB__8_6)) begin
		encode_8_11_reg <= encode_8_11;
		if (start == 1'b0 && ^(encode_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_11_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %scevgep27 = getelementptr [24 x i32]* @h, i32 0, i32 %11*/
		encode_8_scevgep27 = (`TAG_g_h_a | (4 * encode_8_11_reg));
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %scevgep27 = getelementptr [24 x i32]* @h, i32 0, i32 %11*/
	if ((cur_state == LEGUP_F_encode_BB__8_7)) begin
		encode_8_scevgep27_reg <= encode_8_scevgep27;
		if (start == 1'b0 && ^(encode_8_scevgep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_scevgep27_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %scevgep28 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %11*/
		encode_8_scevgep28 = (`TAG_g_tqmf_a | (4 * encode_8_11_reg));
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %scevgep28 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %11*/
	if ((cur_state == LEGUP_F_encode_BB__8_7)) begin
		encode_8_scevgep28_reg <= encode_8_scevgep28;
		if (start == 1'b0 && ^(encode_8_scevgep28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_scevgep28_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %12 = add i32 %10, 4*/
		encode_8_12 = (encode_8_10 + 32'd4);
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %12 = add i32 %10, 4*/
	if ((cur_state == LEGUP_F_encode_BB__8_6)) begin
		encode_8_12_reg <= encode_8_12;
		if (start == 1'b0 && ^(encode_8_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_12_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %scevgep29 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %12*/
		encode_8_scevgep29 = (`TAG_g_tqmf_a | (4 * encode_8_12_reg));
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %scevgep29 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %12*/
	if ((cur_state == LEGUP_F_encode_BB__8_7)) begin
		encode_8_scevgep29_reg <= encode_8_scevgep29;
		if (start == 1'b0 && ^(encode_8_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_scevgep29_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %scevgep30 = getelementptr [24 x i32]* @h, i32 0, i32 %12*/
		encode_8_scevgep30 = (`TAG_g_h_a | (4 * encode_8_12_reg));
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %scevgep30 = getelementptr [24 x i32]* @h, i32 0, i32 %12*/
	if ((cur_state == LEGUP_F_encode_BB__8_7)) begin
		encode_8_scevgep30_reg <= encode_8_scevgep30;
		if (start == 1'b0 && ^(encode_8_scevgep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_scevgep30_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %13 = load i32* %scevgep28, align 4, !tbaa !1*/
		encode_8_13 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %13 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_9)) begin
		encode_8_13_reg <= encode_8_13;
		if (start == 1'b0 && ^(encode_8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_13_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %14 = load i32* %scevgep27, align 4, !tbaa !1*/
		encode_8_14 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %14 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_9)) begin
		encode_8_14_reg <= encode_8_14;
		if (start == 1'b0 && ^(encode_8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_14_reg"); $finish; end
	end
end
always @(*) begin
	encode_8_15 = encode_8_15_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %15 = mul nsw i32 %14, %13*/
	if ((cur_state == LEGUP_F_encode_BB__8_10)) begin
		encode_8_15_reg <= encode_8_15;
		if (start == 1'b0 && ^(encode_8_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_15_reg"); $finish; end
	end
	/* encode: %8*/
	/*   %15 = mul nsw i32 %14, %13*/
	if ((cur_state == LEGUP_F_encode_BB__8_10)) begin
		encode_8_15_reg <= encode_8_15;
		if (start == 1'b0 && ^(encode_8_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_15_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %16 = add nsw i32 %15, %xb.042*/
		encode_8_16 = (encode_8_15 + encode_8_xb042_reg);
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %16 = add nsw i32 %15, %xb.042*/
	if ((cur_state == LEGUP_F_encode_BB__8_10)) begin
		encode_8_16_reg <= encode_8_16;
		if (start == 1'b0 && ^(encode_8_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_16_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %17 = add nsw i32 %i.043, 1*/
		encode_8_17 = (encode_8_i043_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %17 = add nsw i32 %i.043, 1*/
	if ((cur_state == LEGUP_F_encode_BB__8_6)) begin
		encode_8_17_reg <= encode_8_17;
		if (start == 1'b0 && ^(encode_8_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_17_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %18 = load i32* %scevgep29, align 4, !tbaa !1*/
		encode_8_18 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %18 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_10)) begin
		encode_8_18_reg <= encode_8_18;
		if (start == 1'b0 && ^(encode_8_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_18_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %19 = load i32* %scevgep30, align 4, !tbaa !1*/
		encode_8_19 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %19 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_10)) begin
		encode_8_19_reg <= encode_8_19;
		if (start == 1'b0 && ^(encode_8_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_19_reg"); $finish; end
	end
end
always @(*) begin
	encode_8_20 = encode_8_20_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %20 = mul nsw i32 %19, %18*/
	if ((cur_state == LEGUP_F_encode_BB__8_11)) begin
		encode_8_20_reg <= encode_8_20;
		if (start == 1'b0 && ^(encode_8_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_20_reg"); $finish; end
	end
	/* encode: %8*/
	/*   %20 = mul nsw i32 %19, %18*/
	if ((cur_state == LEGUP_F_encode_BB__8_11)) begin
		encode_8_20_reg <= encode_8_20;
		if (start == 1'b0 && ^(encode_8_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_20_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %21 = add nsw i32 %20, %9*/
		encode_8_21 = (encode_8_20 + encode_8_9_reg);
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %21 = add nsw i32 %20, %9*/
	if ((cur_state == LEGUP_F_encode_BB__8_11)) begin
		encode_8_21_reg <= encode_8_21;
		if (start == 1'b0 && ^(encode_8_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_21_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %8*/
	/*   %exitcond = icmp eq i32 %17, 10*/
		encode_8_exitcond = (encode_8_17 == 32'd10);
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %exitcond = icmp eq i32 %17, 10*/
	if ((cur_state == LEGUP_F_encode_BB__8_6)) begin
		encode_8_exitcond_reg <= encode_8_exitcond;
		if (start == 1'b0 && ^(encode_8_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_8_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %22*/
	/*   %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
		encode_22_23 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %22*/
	/*   %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__22_14)) begin
		encode_22_23_reg <= encode_22_23;
		if (start == 1'b0 && ^(encode_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_22_23_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %24*/
	/*   %i.138 = phi i32 [ 0, %22 ], [ %28, %24 ]*/
	if (((cur_state == LEGUP_F_encode_BB__22_14) & (memory_controller_waitrequest == 1'd0))) begin
		encode_24_i138 = 32'd0;
	end
	/* encode: %24*/
	/*   %i.138 = phi i32 [ 0, %22 ], [ %28, %24 ]*/
	else /* if ((((cur_state == LEGUP_F_encode_BB__24_19) & (memory_controller_waitrequest == 1'd0)) & (encode_24_exitcond24_reg == 1'd0))) */ begin
		encode_24_i138 = encode_24_28_reg;
	end
end
always @(posedge clk) begin
	/* encode: %24*/
	/*   %i.138 = phi i32 [ 0, %22 ], [ %28, %24 ]*/
	if (((cur_state == LEGUP_F_encode_BB__22_14) & (memory_controller_waitrequest == 1'd0))) begin
		encode_24_i138_reg <= encode_24_i138;
		if (start == 1'b0 && ^(encode_24_i138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_24_i138_reg"); $finish; end
	end
	/* encode: %24*/
	/*   %i.138 = phi i32 [ 0, %22 ], [ %28, %24 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__24_19) & (memory_controller_waitrequest == 1'd0)) & (encode_24_exitcond24_reg == 1'd0))) begin
		encode_24_i138_reg <= encode_24_i138;
		if (start == 1'b0 && ^(encode_24_i138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_24_i138_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %24*/
	/*   %25 = sub i32 21, %i.138*/
		encode_24_25 = (32'd21 - encode_24_i138_reg);
end
always @(posedge clk) begin
	/* encode: %24*/
	/*   %25 = sub i32 21, %i.138*/
	if ((cur_state == LEGUP_F_encode_BB__24_15)) begin
		encode_24_25_reg <= encode_24_25;
		if (start == 1'b0 && ^(encode_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_24_25_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %24*/
	/*   %tqmf_ptr1.039 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %25*/
		encode_24_tqmf_ptr1039 = (`TAG_g_tqmf_a | (4 * encode_24_25_reg));
end
always @(posedge clk) begin
	/* encode: %24*/
	/*   %tqmf_ptr1.039 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %25*/
	if ((cur_state == LEGUP_F_encode_BB__24_16)) begin
		encode_24_tqmf_ptr1039_reg <= encode_24_tqmf_ptr1039;
		if (start == 1'b0 && ^(encode_24_tqmf_ptr1039) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_24_tqmf_ptr1039_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %24*/
	/*   %26 = sub i32 23, %i.138*/
		encode_24_26 = (32'd23 - encode_24_i138_reg);
end
always @(posedge clk) begin
	/* encode: %24*/
	/*   %26 = sub i32 23, %i.138*/
	if ((cur_state == LEGUP_F_encode_BB__24_15)) begin
		encode_24_26_reg <= encode_24_26;
		if (start == 1'b0 && ^(encode_24_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_24_26_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %24*/
	/*   %tqmf_ptr.137 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %26*/
		encode_24_tqmf_ptr137 = (`TAG_g_tqmf_a | (4 * encode_24_26_reg));
end
always @(posedge clk) begin
	/* encode: %24*/
	/*   %tqmf_ptr.137 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %26*/
	if ((cur_state == LEGUP_F_encode_BB__24_16)) begin
		encode_24_tqmf_ptr137_reg <= encode_24_tqmf_ptr137;
		if (start == 1'b0 && ^(encode_24_tqmf_ptr137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_24_tqmf_ptr137_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %24*/
	/*   %27 = load i32* %tqmf_ptr1.039, align 4, !tbaa !1*/
		encode_24_27 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %24*/
	/*   %27 = load i32* %tqmf_ptr1.039, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__24_18)) begin
		encode_24_27_reg <= encode_24_27;
		if (start == 1'b0 && ^(encode_24_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_24_27_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %24*/
	/*   %28 = add nsw i32 %i.138, 1*/
		encode_24_28 = (encode_24_i138_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %24*/
	/*   %28 = add nsw i32 %i.138, 1*/
	if ((cur_state == LEGUP_F_encode_BB__24_15)) begin
		encode_24_28_reg <= encode_24_28;
		if (start == 1'b0 && ^(encode_24_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_24_28_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %24*/
	/*   %exitcond24 = icmp eq i32 %28, 22*/
		encode_24_exitcond24 = (encode_24_28 == 32'd22);
end
always @(posedge clk) begin
	/* encode: %24*/
	/*   %exitcond24 = icmp eq i32 %28, 22*/
	if ((cur_state == LEGUP_F_encode_BB__24_15)) begin
		encode_24_exitcond24_reg <= encode_24_exitcond24;
		if (start == 1'b0 && ^(encode_24_exitcond24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_24_exitcond24_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %29*/
	/*   %30 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		encode_29_30 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %29*/
	/*   %30 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_23)) begin
		encode_29_30_reg <= encode_29_30;
		if (start == 1'b0 && ^(encode_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_29_30_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %29*/
	/*   %31 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		encode_29_31 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %29*/
	/*   %31 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_23)) begin
		encode_29_31_reg <= encode_29_31;
		if (start == 1'b0 && ^(encode_29_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_29_31_reg"); $finish; end
	end
end
always @(*) begin
	encode_29_32 = encode_29_32_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %29*/
	/*   %32 = mul nsw i32 %31, %30*/
	if ((cur_state == LEGUP_F_encode_BB__29_24)) begin
		encode_29_32_reg <= encode_29_32;
		if (start == 1'b0 && ^(encode_29_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_29_32_reg"); $finish; end
	end
	/* encode: %29*/
	/*   %32 = mul nsw i32 %31, %30*/
	if ((cur_state == LEGUP_F_encode_BB__29_24)) begin
		encode_29_32_reg <= encode_29_32;
		if (start == 1'b0 && ^(encode_29_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_29_32_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %33*/
	/*   %indvar19 = phi i32 [ %indvar.next20, %33 ], [ 0, %29 ]*/
	if (((cur_state == LEGUP_F_encode_BB__29_24) & (memory_controller_waitrequest == 1'd0))) begin
		encode_33_indvar19 = 32'd0;
	end
	/* encode: %33*/
	/*   %indvar19 = phi i32 [ %indvar.next20, %33 ], [ 0, %29 ]*/
	else /* if ((((cur_state == LEGUP_F_encode_BB__33_29) & (memory_controller_waitrequest == 1'd0)) & (encode_33_exitcond21_reg == 1'd0))) */ begin
		encode_33_indvar19 = encode_33_indvarnext20_reg;
	end
end
always @(posedge clk) begin
	/* encode: %33*/
	/*   %indvar19 = phi i32 [ %indvar.next20, %33 ], [ 0, %29 ]*/
	if (((cur_state == LEGUP_F_encode_BB__29_24) & (memory_controller_waitrequest == 1'd0))) begin
		encode_33_indvar19_reg <= encode_33_indvar19;
		if (start == 1'b0 && ^(encode_33_indvar19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_indvar19_reg"); $finish; end
	end
	/* encode: %33*/
	/*   %indvar19 = phi i32 [ %indvar.next20, %33 ], [ 0, %29 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__33_29) & (memory_controller_waitrequest == 1'd0)) & (encode_33_exitcond21_reg == 1'd0))) begin
		encode_33_indvar19_reg <= encode_33_indvar19;
		if (start == 1'b0 && ^(encode_33_indvar19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_indvar19_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %33*/
	/*   %zl.05.i = phi i32 [ %38, %33 ], [ %32, %29 ]*/
	if (((cur_state == LEGUP_F_encode_BB__29_24) & (memory_controller_waitrequest == 1'd0))) begin
		encode_33_zl05i = encode_29_32;
	end
	/* encode: %33*/
	/*   %zl.05.i = phi i32 [ %38, %33 ], [ %32, %29 ]*/
	else /* if ((((cur_state == LEGUP_F_encode_BB__33_29) & (memory_controller_waitrequest == 1'd0)) & (encode_33_exitcond21_reg == 1'd0))) */ begin
		encode_33_zl05i = encode_33_38;
	end
end
always @(posedge clk) begin
	/* encode: %33*/
	/*   %zl.05.i = phi i32 [ %38, %33 ], [ %32, %29 ]*/
	if (((cur_state == LEGUP_F_encode_BB__29_24) & (memory_controller_waitrequest == 1'd0))) begin
		encode_33_zl05i_reg <= encode_33_zl05i;
		if (start == 1'b0 && ^(encode_33_zl05i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_zl05i_reg"); $finish; end
	end
	/* encode: %33*/
	/*   %zl.05.i = phi i32 [ %38, %33 ], [ %32, %29 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__33_29) & (memory_controller_waitrequest == 1'd0)) & (encode_33_exitcond21_reg == 1'd0))) begin
		encode_33_zl05i_reg <= encode_33_zl05i;
		if (start == 1'b0 && ^(encode_33_zl05i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_zl05i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %33*/
	/*   %34 = add i32 %indvar19, 1*/
		encode_33_34 = (encode_33_indvar19_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %33*/
	/*   %34 = add i32 %indvar19, 1*/
	if ((cur_state == LEGUP_F_encode_BB__33_25)) begin
		encode_33_34_reg <= encode_33_34;
		if (start == 1'b0 && ^(encode_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_34_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %33*/
	/*   %.017.i = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %34*/
		encode_33_017i = (`TAG_g_delay_bpl_a | (4 * encode_33_34_reg));
end
always @(posedge clk) begin
	/* encode: %33*/
	/*   %.017.i = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %34*/
	if ((cur_state == LEGUP_F_encode_BB__33_26)) begin
		encode_33_017i_reg <= encode_33_017i;
		if (start == 1'b0 && ^(encode_33_017i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_017i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %33*/
	/*   %.06.i = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %34*/
		encode_33_06i = (`TAG_g_delay_dltx_a | (4 * encode_33_34_reg));
end
always @(posedge clk) begin
	/* encode: %33*/
	/*   %.06.i = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %34*/
	if ((cur_state == LEGUP_F_encode_BB__33_26)) begin
		encode_33_06i_reg <= encode_33_06i;
		if (start == 1'b0 && ^(encode_33_06i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_06i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %33*/
	/*   %35 = load i32* %.017.i, align 4, !tbaa !1*/
		encode_33_35 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %33*/
	/*   %35 = load i32* %.017.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__33_28)) begin
		encode_33_35_reg <= encode_33_35;
		if (start == 1'b0 && ^(encode_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_35_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %33*/
	/*   %36 = load i32* %.06.i, align 4, !tbaa !1*/
		encode_33_36 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %33*/
	/*   %36 = load i32* %.06.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__33_28)) begin
		encode_33_36_reg <= encode_33_36;
		if (start == 1'b0 && ^(encode_33_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_36_reg"); $finish; end
	end
end
always @(*) begin
	encode_33_37 = encode_33_37_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %33*/
	/*   %37 = mul nsw i32 %36, %35*/
	if ((cur_state == LEGUP_F_encode_BB__33_29)) begin
		encode_33_37_reg <= encode_33_37;
		if (start == 1'b0 && ^(encode_33_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_37_reg"); $finish; end
	end
	/* encode: %33*/
	/*   %37 = mul nsw i32 %36, %35*/
	if ((cur_state == LEGUP_F_encode_BB__33_29)) begin
		encode_33_37_reg <= encode_33_37;
		if (start == 1'b0 && ^(encode_33_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_37_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %33*/
	/*   %38 = add nsw i32 %37, %zl.05.i*/
		encode_33_38 = (encode_33_37 + encode_33_zl05i_reg);
end
always @(posedge clk) begin
	/* encode: %33*/
	/*   %38 = add nsw i32 %37, %zl.05.i*/
	if ((cur_state == LEGUP_F_encode_BB__33_29)) begin
		encode_33_38_reg <= encode_33_38;
		if (start == 1'b0 && ^(encode_33_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_38_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %33*/
	/*   %indvar.next20 = add i32 %indvar19, 1*/
		encode_33_indvarnext20 = (encode_33_indvar19_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %33*/
	/*   %indvar.next20 = add i32 %indvar19, 1*/
	if ((cur_state == LEGUP_F_encode_BB__33_25)) begin
		encode_33_indvarnext20_reg <= encode_33_indvarnext20;
		if (start == 1'b0 && ^(encode_33_indvarnext20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_indvarnext20_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %33*/
	/*   %exitcond21 = icmp eq i32 %indvar.next20, 5*/
		encode_33_exitcond21 = (encode_33_indvarnext20 == 32'd5);
end
always @(posedge clk) begin
	/* encode: %33*/
	/*   %exitcond21 = icmp eq i32 %indvar.next20, 5*/
	if ((cur_state == LEGUP_F_encode_BB__33_25)) begin
		encode_33_exitcond21_reg <= encode_33_exitcond21;
		if (start == 1'b0 && ^(encode_33_exitcond21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_33_exitcond21_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit_39 = encode_filtezexit_39_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %39 = mul nsw i32 %23, 12*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_39_reg <= encode_filtezexit_39;
		if (start == 1'b0 && ^(encode_filtezexit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_39_reg"); $finish; end
	end
	/* encode: %filtez.exit*/
	/*   %39 = mul nsw i32 %23, 12*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_39_reg <= encode_filtezexit_39;
		if (start == 1'b0 && ^(encode_filtezexit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_39_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %40 = add nsw i32 %39, %16*/
		encode_filtezexit_40 = (encode_filtezexit_39 + encode_8_16_reg);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %40 = add nsw i32 %39, %16*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_40_reg <= encode_filtezexit_40;
		if (start == 1'b0 && ^(encode_filtezexit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_40_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %41 = add nsw i32 %40, %21*/
		encode_filtezexit_41 = (encode_filtezexit_40 + encode_8_21_reg);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %41 = add nsw i32 %40, %21*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_41_reg <= encode_filtezexit_41;
		if (start == 1'b0 && ^(encode_filtezexit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_41_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %42 = sub nsw i32 %21, %40*/
		encode_filtezexit_42 = (encode_8_21_reg - encode_filtezexit_40);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %42 = sub nsw i32 %21, %40*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_42_reg <= encode_filtezexit_42;
		if (start == 1'b0 && ^(encode_filtezexit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_42_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %43 = ashr i32 %41, 15*/
		encode_filtezexit_43 = ($signed(encode_filtezexit_41) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %43 = ashr i32 %41, 15*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_43_reg <= encode_filtezexit_43;
		if (start == 1'b0 && ^(encode_filtezexit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_43_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %44 = ashr i32 %42, 15*/
		encode_filtezexit_44 = ($signed(encode_filtezexit_42) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %44 = ashr i32 %42, 15*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		encode_filtezexit_44_reg <= encode_filtezexit_44;
		if (start == 1'b0 && ^(encode_filtezexit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_44_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %45 = ashr i32 %38, 14*/
		encode_filtezexit_45 = ($signed(encode_33_38_reg) >>> 32'd14);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %45 = ashr i32 %38, 14*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		encode_filtezexit_45_reg <= encode_filtezexit_45;
		if (start == 1'b0 && ^(encode_filtezexit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_45_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %46 = load i32* @rlt1, align 4, !tbaa !1*/
		encode_filtezexit_46 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %46 = load i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		encode_filtezexit_46_reg <= encode_filtezexit_46;
		if (start == 1'b0 && ^(encode_filtezexit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_46_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %47 = load i32* @al1, align 4, !tbaa !1*/
		encode_filtezexit_47 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %47 = load i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		encode_filtezexit_47_reg <= encode_filtezexit_47;
		if (start == 1'b0 && ^(encode_filtezexit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_47_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %48 = load i32* @rlt2, align 4, !tbaa !1*/
		encode_filtezexit_48 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %48 = load i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_33)) begin
		encode_filtezexit_48_reg <= encode_filtezexit_48;
		if (start == 1'b0 && ^(encode_filtezexit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_48_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %49 = load i32* @al2, align 4, !tbaa !1*/
		encode_filtezexit_49 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %49 = load i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_33)) begin
		encode_filtezexit_49_reg <= encode_filtezexit_49;
		if (start == 1'b0 && ^(encode_filtezexit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_49_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit_50 = encode_filtezexit_50_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %50 = mul i32 %47, %46*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_33)) begin
		encode_filtezexit_50_reg <= encode_filtezexit_50;
		if (start == 1'b0 && ^(encode_filtezexit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_50_reg"); $finish; end
	end
	/* encode: %filtez.exit*/
	/*   %50 = mul i32 %47, %46*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_33)) begin
		encode_filtezexit_50_reg <= encode_filtezexit_50;
		if (start == 1'b0 && ^(encode_filtezexit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_50_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit_51 = encode_filtezexit_51_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %51 = mul i32 %49, %48*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_51_reg <= encode_filtezexit_51;
		if (start == 1'b0 && ^(encode_filtezexit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_51_reg"); $finish; end
	end
	/* encode: %filtez.exit*/
	/*   %51 = mul i32 %49, %48*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_51_reg <= encode_filtezexit_51;
		if (start == 1'b0 && ^(encode_filtezexit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_51_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %tmp.i28 = add i32 %51, %50*/
		encode_filtezexit_tmpi28 = (encode_filtezexit_51 + encode_filtezexit_50_reg);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %tmp.i28 = add i32 %51, %50*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_tmpi28_reg <= encode_filtezexit_tmpi28;
		if (start == 1'b0 && ^(encode_filtezexit_tmpi28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_tmpi28_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %tmp1.i29 = shl i32 %tmp.i28, 1*/
		encode_filtezexit_tmp1i29 = (encode_filtezexit_tmpi28 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %tmp1.i29 = shl i32 %tmp.i28, 1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_tmp1i29_reg <= encode_filtezexit_tmp1i29;
		if (start == 1'b0 && ^(encode_filtezexit_tmp1i29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_tmp1i29_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %52 = ashr i32 %tmp1.i29, 15*/
		encode_filtezexit_52 = ($signed(encode_filtezexit_tmp1i29) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %52 = ashr i32 %tmp1.i29, 15*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_52_reg <= encode_filtezexit_52;
		if (start == 1'b0 && ^(encode_filtezexit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_52_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %53 = add nsw i32 %52, %45*/
		encode_filtezexit_53 = (encode_filtezexit_52 + encode_filtezexit_45_reg);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %53 = add nsw i32 %52, %45*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_53_reg <= encode_filtezexit_53;
		if (start == 1'b0 && ^(encode_filtezexit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_53_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %54 = sub nsw i32 %43, %53*/
		encode_filtezexit_54 = (encode_filtezexit_43_reg - encode_filtezexit_53);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %54 = sub nsw i32 %43, %53*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_54_reg <= encode_filtezexit_54;
		if (start == 1'b0 && ^(encode_filtezexit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_54_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %55 = load i32* @detl, align 4, !tbaa !1*/
		encode_filtezexit_55 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %55 = load i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_55_reg <= encode_filtezexit_55;
		if (start == 1'b0 && ^(encode_filtezexit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_55_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %56 = icmp sgt i32 %54, -1*/
		encode_filtezexit_56 = ($signed(encode_filtezexit_54) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %56 = icmp sgt i32 %54, -1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_56_reg <= encode_filtezexit_56;
		if (start == 1'b0 && ^(encode_filtezexit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_56_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %57 = sub nsw i32 0, %54*/
		encode_filtezexit_57 = (32'd0 - encode_filtezexit_54);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %57 = sub nsw i32 0, %54*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_57_reg <= encode_filtezexit_57;
		if (start == 1'b0 && ^(encode_filtezexit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_57_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit*/
	/*   %m.0.i.i = select i1 %56, i32 %54, i32 %57*/
		encode_filtezexit_m0ii = (encode_filtezexit_56 ? encode_filtezexit_54 : encode_filtezexit_57);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %m.0.i.i = select i1 %56, i32 %54, i32 %57*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_34)) begin
		encode_filtezexit_m0ii_reg <= encode_filtezexit_m0ii;
		if (start == 1'b0 && ^(encode_filtezexit_m0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit_m0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %58*/
	/*   %59 = add nsw i32 %62, 1*/
		encode_58_59 = (encode_61_62_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %58*/
	/*   %59 = add nsw i32 %62, 1*/
	if ((cur_state == LEGUP_F_encode_BB__58_35)) begin
		encode_58_59_reg <= encode_58_59;
		if (start == 1'b0 && ^(encode_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_58_59_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %58*/
	/*   %60 = icmp slt i32 %63, 30*/
		encode_58_60 = ($signed(encode_61_63_reg) < $signed(32'd30));
end
always @(posedge clk) begin
	/* encode: %58*/
	/*   %60 = icmp slt i32 %63, 30*/
	if ((cur_state == LEGUP_F_encode_BB__58_35)) begin
		encode_58_60_reg <= encode_58_60;
		if (start == 1'b0 && ^(encode_58_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_58_60_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %61*/
	/*   %62 = phi i32 [ 0, %filtez.exit ], [ %59, %58 ]*/
	if (((cur_state == LEGUP_F_encode_BB_filtezexit_34) & (memory_controller_waitrequest == 1'd0))) begin
		encode_61_62 = 32'd0;
	end
	/* encode: %61*/
	/*   %62 = phi i32 [ 0, %filtez.exit ], [ %59, %58 ]*/
	else /* if ((((cur_state == LEGUP_F_encode_BB__58_35) & (memory_controller_waitrequest == 1'd0)) & (encode_58_60 == 1'd1))) */ begin
		encode_61_62 = encode_58_59;
	end
end
always @(posedge clk) begin
	/* encode: %61*/
	/*   %62 = phi i32 [ 0, %filtez.exit ], [ %59, %58 ]*/
	if (((cur_state == LEGUP_F_encode_BB_filtezexit_34) & (memory_controller_waitrequest == 1'd0))) begin
		encode_61_62_reg <= encode_61_62;
		if (start == 1'b0 && ^(encode_61_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_61_62_reg"); $finish; end
	end
	/* encode: %61*/
	/*   %62 = phi i32 [ 0, %filtez.exit ], [ %59, %58 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__58_35) & (memory_controller_waitrequest == 1'd0)) & (encode_58_60 == 1'd1))) begin
		encode_61_62_reg <= encode_61_62;
		if (start == 1'b0 && ^(encode_61_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_61_62_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %61*/
	/*   %63 = add i32 %62, 1*/
		encode_61_63 = (encode_61_62_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %61*/
	/*   %63 = add i32 %62, 1*/
	if ((cur_state == LEGUP_F_encode_BB__61_36)) begin
		encode_61_63_reg <= encode_61_63;
		if (start == 1'b0 && ^(encode_61_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_61_63_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %61*/
	/*   %scevgep18 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %62*/
		encode_61_scevgep18 = (1'd0 | (4 * encode_61_62_reg));
end
always @(posedge clk) begin
	/* encode: %61*/
	/*   %scevgep18 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %62*/
	if ((cur_state == LEGUP_F_encode_BB__61_36)) begin
		encode_61_scevgep18_reg <= encode_61_scevgep18;
		if (start == 1'b0 && ^(encode_61_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_61_scevgep18_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %61*/
	/*   %64 = load i32* %scevgep18, align 4, !tbaa !1*/
		encode_61_64 = decis_levl_out_a;
end
always @(posedge clk) begin
	/* encode: %61*/
	/*   %64 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__61_37)) begin
		encode_61_64_reg <= encode_61_64;
		if (start == 1'b0 && ^(encode_61_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_61_64_reg"); $finish; end
	end
end
always @(*) begin
	encode_61_65 = encode_61_65_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %61*/
	/*   %65 = mul nsw i32 %64, %55*/
	if ((cur_state == LEGUP_F_encode_BB__61_38)) begin
		encode_61_65_reg <= encode_61_65;
		if (start == 1'b0 && ^(encode_61_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_61_65_reg"); $finish; end
	end
	/* encode: %61*/
	/*   %65 = mul nsw i32 %64, %55*/
	if ((cur_state == LEGUP_F_encode_BB__61_38)) begin
		encode_61_65_reg <= encode_61_65;
		if (start == 1'b0 && ^(encode_61_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_61_65_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %61*/
	/*   %66 = ashr i32 %65, 15*/
		encode_61_66 = ($signed(encode_61_65) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %61*/
	/*   %66 = ashr i32 %65, 15*/
	if ((cur_state == LEGUP_F_encode_BB__61_38)) begin
		encode_61_66_reg <= encode_61_66;
		if (start == 1'b0 && ^(encode_61_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_61_66_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %61*/
	/*   %67 = icmp sgt i32 %m.0.i.i, %66*/
		encode_61_67 = ($signed(encode_filtezexit_m0ii_reg) > $signed(encode_61_66));
end
always @(posedge clk) begin
	/* encode: %61*/
	/*   %67 = icmp sgt i32 %m.0.i.i, %66*/
	if ((cur_state == LEGUP_F_encode_BB__61_38)) begin
		encode_61_67_reg <= encode_61_67;
		if (start == 1'b0 && ^(encode_61_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_61_67_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %mil.0.lcssa.i = phi i32 [ %62, %61 ], [ %63, %58 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__58_35) & (memory_controller_waitrequest == 1'd0)) & (encode_58_60 == 1'd0))) begin
		encode_quantlexit_mil0lcssai = encode_61_63_reg;
	end
	/* encode: %quantl.exit*/
	/*   %mil.0.lcssa.i = phi i32 [ %62, %61 ], [ %63, %58 ]*/
	else /* if ((((cur_state == LEGUP_F_encode_BB__61_38) & (memory_controller_waitrequest == 1'd0)) & (encode_61_67 == 1'd0))) */ begin
		encode_quantlexit_mil0lcssai = encode_61_62_reg;
	end
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %mil.0.lcssa.i = phi i32 [ %62, %61 ], [ %63, %58 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__58_35) & (memory_controller_waitrequest == 1'd0)) & (encode_58_60 == 1'd0))) begin
		encode_quantlexit_mil0lcssai_reg <= encode_quantlexit_mil0lcssai;
		if (start == 1'b0 && ^(encode_quantlexit_mil0lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_mil0lcssai_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %mil.0.lcssa.i = phi i32 [ %62, %61 ], [ %63, %58 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__61_38) & (memory_controller_waitrequest == 1'd0)) & (encode_61_67 == 1'd0))) begin
		encode_quantlexit_mil0lcssai_reg <= encode_quantlexit_mil0lcssai;
		if (start == 1'b0 && ^(encode_quantlexit_mil0lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_mil0lcssai_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %quant26bt_pos.quant26bt_neg.i = select i1 %56, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
		encode_quantlexit_quant26bt_posquant26bt_negi = (encode_filtezexit_56_reg ? `TAG_g_quant26bt_pos_a : `TAG_g_quant26bt_neg_a);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %quant26bt_pos.quant26bt_neg.i = select i1 %56, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_39)) begin
		encode_quantlexit_quant26bt_posquant26bt_negi_reg <= encode_quantlexit_quant26bt_posquant26bt_negi;
		if (start == 1'b0 && ^(encode_quantlexit_quant26bt_posquant26bt_negi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_quant26bt_posquant26bt_negi_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %ril.0.in.i = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg.i, i32 0, i32 %mil.0.lcssa.i*/
		encode_quantlexit_ril0ini = (encode_quantlexit_quant26bt_posquant26bt_negi_reg + (4 * encode_quantlexit_mil0lcssai_reg));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %ril.0.in.i = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg.i, i32 0, i32 %mil.0.lcssa.i*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		encode_quantlexit_ril0ini_reg <= encode_quantlexit_ril0ini;
		if (start == 1'b0 && ^(encode_quantlexit_ril0ini) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_ril0ini_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %ril.0.i = load i32* %ril.0.in.i, align 4*/
		encode_quantlexit_ril0i = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %ril.0.i = load i32* %ril.0.in.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_ril0i_reg <= encode_quantlexit_ril0i;
		if (start == 1'b0 && ^(encode_quantlexit_ril0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_ril0i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %68 = ashr i32 %ril.0.i, 2*/
		encode_quantlexit_68 = ($signed(encode_quantlexit_ril0i) >>> 32'd2);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %68 = ashr i32 %ril.0.i, 2*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_68_reg <= encode_quantlexit_68;
		if (start == 1'b0 && ^(encode_quantlexit_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_68_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %69 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %68*/
		encode_quantlexit_69 = (`TAG_g_qq4_code4_table_a | (4 * encode_quantlexit_68));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %69 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %68*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_69_reg <= encode_quantlexit_69;
		if (start == 1'b0 && ^(encode_quantlexit_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_69_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
		encode_quantlexit_70 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_70_reg <= encode_quantlexit_70;
		if (start == 1'b0 && ^(encode_quantlexit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_70_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_71 = encode_quantlexit_71_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %71 = mul nsw i32 %70, %55*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		encode_quantlexit_71_reg <= encode_quantlexit_71;
		if (start == 1'b0 && ^(encode_quantlexit_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_71_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %71 = mul nsw i32 %70, %55*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		encode_quantlexit_71_reg <= encode_quantlexit_71;
		if (start == 1'b0 && ^(encode_quantlexit_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_71_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %72 = ashr i32 %71, 15*/
		encode_quantlexit_72 = ($signed(encode_quantlexit_71) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %72 = ashr i32 %71, 15*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		encode_quantlexit_72_reg <= encode_quantlexit_72;
		if (start == 1'b0 && ^(encode_quantlexit_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_72_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %73 = load i32* @nbl, align 4, !tbaa !1*/
		encode_quantlexit_73 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %73 = load i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_41)) begin
		encode_quantlexit_73_reg <= encode_quantlexit_73;
		if (start == 1'b0 && ^(encode_quantlexit_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_73_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_74 = encode_quantlexit_74_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %74 = mul nsw i32 %73, 127*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_74_reg <= encode_quantlexit_74;
		if (start == 1'b0 && ^(encode_quantlexit_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_74_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %74 = mul nsw i32 %73, 127*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_74_reg <= encode_quantlexit_74;
		if (start == 1'b0 && ^(encode_quantlexit_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_74_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %75 = ashr i32 %74, 7*/
		encode_quantlexit_75 = ($signed(encode_quantlexit_74) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %75 = ashr i32 %74, 7*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_75_reg <= encode_quantlexit_75;
		if (start == 1'b0 && ^(encode_quantlexit_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_75_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %76 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %68*/
		encode_quantlexit_76 = (`TAG_g_wl_code_table_a | (4 * encode_quantlexit_68));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %76 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %68*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_76_reg <= encode_quantlexit_76;
		if (start == 1'b0 && ^(encode_quantlexit_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_76_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
		encode_quantlexit_77 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_77_reg <= encode_quantlexit_77;
		if (start == 1'b0 && ^(encode_quantlexit_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_77_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %78 = add nsw i32 %75, %77*/
		encode_quantlexit_78 = (encode_quantlexit_75_reg + encode_quantlexit_77);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %78 = add nsw i32 %75, %77*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_78_reg <= encode_quantlexit_78;
		if (start == 1'b0 && ^(encode_quantlexit_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_78_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %79 = icmp slt i32 %78, 0*/
		encode_quantlexit_79 = ($signed(encode_quantlexit_78) < $signed(32'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %79 = icmp slt i32 %78, 0*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_79_reg <= encode_quantlexit_79;
		if (start == 1'b0 && ^(encode_quantlexit_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_79_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %..i26 = select i1 %79, i32 0, i32 %78*/
		encode_quantlexit_i26 = (encode_quantlexit_79 ? 32'd0 : encode_quantlexit_78);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %..i26 = select i1 %79, i32 0, i32 %78*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_i26_reg <= encode_quantlexit_i26;
		if (start == 1'b0 && ^(encode_quantlexit_i26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_i26_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %80 = icmp sgt i32 %..i26, 18432*/
		encode_quantlexit_80 = ($signed(encode_quantlexit_i26) > $signed(32'd18432));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %80 = icmp sgt i32 %..i26, 18432*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_80_reg <= encode_quantlexit_80;
		if (start == 1'b0 && ^(encode_quantlexit_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_80_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %...i27 = select i1 %80, i32 18432, i32 %..i26*/
		encode_quantlexit_i27 = (encode_quantlexit_80 ? 32'd18432 : encode_quantlexit_i26);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %...i27 = select i1 %80, i32 18432, i32 %..i26*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_i27_reg <= encode_quantlexit_i27;
		if (start == 1'b0 && ^(encode_quantlexit_i27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_i27_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %81 = lshr i32 %...i27, 6*/
		encode_quantlexit_81 = (encode_quantlexit_i27 >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %81 = lshr i32 %...i27, 6*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_81_reg <= encode_quantlexit_81;
		if (start == 1'b0 && ^(encode_quantlexit_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_81_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %82 = and i32 %81, 31*/
		encode_quantlexit_82 = (encode_quantlexit_81 & 32'd31);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %82 = and i32 %81, 31*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_82_reg <= encode_quantlexit_82;
		if (start == 1'b0 && ^(encode_quantlexit_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_82_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %83 = ashr i32 %...i27, 11*/
		encode_quantlexit_83 = ($signed(encode_quantlexit_i27) >>> 32'd11);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %83 = ashr i32 %...i27, 11*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_83_reg <= encode_quantlexit_83;
		if (start == 1'b0 && ^(encode_quantlexit_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_83_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %84 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %82*/
		encode_quantlexit_84 = (`TAG_g_ilb_table_a | (4 * encode_quantlexit_82_reg));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %84 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %82*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		encode_quantlexit_84_reg <= encode_quantlexit_84;
		if (start == 1'b0 && ^(encode_quantlexit_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_84_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
		encode_quantlexit_85 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		encode_quantlexit_85_reg <= encode_quantlexit_85;
		if (start == 1'b0 && ^(encode_quantlexit_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_85_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %86 = sub i32 9, %83*/
		encode_quantlexit_86 = (32'd9 - encode_quantlexit_83);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %86 = sub i32 9, %83*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_86_reg <= encode_quantlexit_86;
		if (start == 1'b0 && ^(encode_quantlexit_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_86_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %87 = ashr i32 %85, %86*/
		encode_quantlexit_87 = ($signed(encode_quantlexit_85) >>> encode_quantlexit_86_reg);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %87 = ashr i32 %85, %86*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		encode_quantlexit_87_reg <= encode_quantlexit_87;
		if (start == 1'b0 && ^(encode_quantlexit_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_87_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %88 = shl i32 %87, 3*/
		encode_quantlexit_88 = (encode_quantlexit_87 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %88 = shl i32 %87, 3*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		encode_quantlexit_88_reg <= encode_quantlexit_88;
		if (start == 1'b0 && ^(encode_quantlexit_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_88_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %89 = add nsw i32 %45, %72*/
		encode_quantlexit_89 = (encode_filtezexit_45_reg + encode_quantlexit_72);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %89 = add nsw i32 %45, %72*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		encode_quantlexit_89_reg <= encode_quantlexit_89;
		if (start == 1'b0 && ^(encode_quantlexit_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_89_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %90 = icmp eq i32 %72, 0*/
		encode_quantlexit_90 = (encode_quantlexit_72 == 32'd0);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %90 = icmp eq i32 %72, 0*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		encode_quantlexit_90_reg <= encode_quantlexit_90;
		if (start == 1'b0 && ^(encode_quantlexit_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_90_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i21*/
	/*   %91 = phi i32 [ %.pre, %.preheader.i21..preheader.i21_crit_edge ], [ %30, %.preheader.i21.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderi21preheader_50) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheaderi21_91 = encode_29_30_reg;
	end
	/* encode: %.preheader.i21*/
	/*   %91 = phi i32 [ %.pre, %.preheader.i21..preheader.i21_crit_edge ], [ %30, %.preheader.i21.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_57) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheaderi21_91 = encode_preheaderi21preheaderi21_crit_edge_pre;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader.i21*/
	/*   %91 = phi i32 [ %.pre, %.preheader.i21..preheader.i21_crit_edge ], [ %30, %.preheader.i21.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderi21preheader_50) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheaderi21_91_reg <= encode_preheaderi21_91;
		if (start == 1'b0 && ^(encode_preheaderi21_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21_91_reg"); $finish; end
	end
	/* encode: %.preheader.i21*/
	/*   %91 = phi i32 [ %.pre, %.preheader.i21..preheader.i21_crit_edge ], [ %30, %.preheader.i21.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_57) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheaderi21_91_reg <= encode_preheaderi21_91;
		if (start == 1'b0 && ^(encode_preheaderi21_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21_91_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i21*/
	/*   %i.03.i19 = phi i32 [ %94, %.preheader.i21..preheader.i21_crit_edge ], [ 0, %.preheader.i21.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderi21preheader_50) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheaderi21_i03i19 = 32'd0;
	end
	/* encode: %.preheader.i21*/
	/*   %i.03.i19 = phi i32 [ %94, %.preheader.i21..preheader.i21_crit_edge ], [ 0, %.preheader.i21.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_57) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheaderi21_i03i19 = encode_preheaderi21preheaderi21_crit_edge_94_reg;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader.i21*/
	/*   %i.03.i19 = phi i32 [ %94, %.preheader.i21..preheader.i21_crit_edge ], [ 0, %.preheader.i21.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderi21preheader_50) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheaderi21_i03i19_reg <= encode_preheaderi21_i03i19;
		if (start == 1'b0 && ^(encode_preheaderi21_i03i19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21_i03i19_reg"); $finish; end
	end
	/* encode: %.preheader.i21*/
	/*   %i.03.i19 = phi i32 [ %94, %.preheader.i21..preheader.i21_crit_edge ], [ 0, %.preheader.i21.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_57) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheaderi21_i03i19_reg <= encode_preheaderi21_i03i19;
		if (start == 1'b0 && ^(encode_preheaderi21_i03i19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21_i03i19_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i21*/
	/*   %scevgep13 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %i.03.i19*/
		encode_preheaderi21_scevgep13 = (`TAG_g_delay_bpl_a | (4 * encode_preheaderi21_i03i19_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader.i21*/
	/*   %scevgep13 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %i.03.i19*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21_51)) begin
		encode_preheaderi21_scevgep13_reg <= encode_preheaderi21_scevgep13;
		if (start == 1'b0 && ^(encode_preheaderi21_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	encode_preheaderi21_92 = encode_preheaderi21_92_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %.preheader.i21*/
	/*   %92 = mul nsw i32 %91, 255*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21_52)) begin
		encode_preheaderi21_92_reg <= encode_preheaderi21_92;
		if (start == 1'b0 && ^(encode_preheaderi21_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21_92_reg"); $finish; end
	end
	/* encode: %.preheader.i21*/
	/*   %92 = mul nsw i32 %91, 255*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21_52)) begin
		encode_preheaderi21_92_reg <= encode_preheaderi21_92;
		if (start == 1'b0 && ^(encode_preheaderi21_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21_92_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i21*/
	/*   %93 = ashr i32 %92, 8*/
		encode_preheaderi21_93 = ($signed(encode_preheaderi21_92) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %.preheader.i21*/
	/*   %93 = ashr i32 %92, 8*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21_52)) begin
		encode_preheaderi21_93_reg <= encode_preheaderi21_93;
		if (start == 1'b0 && ^(encode_preheaderi21_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21_93_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i21*/
	/*   %exitcond11 = icmp eq i32 %i.03.i19, 5*/
		encode_preheaderi21_exitcond11 = (encode_preheaderi21_i03i19_reg == 32'd5);
end
always @(posedge clk) begin
	/* encode: %.preheader.i21*/
	/*   %exitcond11 = icmp eq i32 %i.03.i19, 5*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21_51)) begin
		encode_preheaderi21_exitcond11_reg <= encode_preheaderi21_exitcond11;
		if (start == 1'b0 && ^(encode_preheaderi21_exitcond11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21_exitcond11_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i21..preheader.i21_crit_edge*/
	/*   %94 = add nsw i32 %i.03.i19, 1*/
		encode_preheaderi21preheaderi21_crit_edge_94 = (encode_preheaderi21_i03i19_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %.preheader.i21..preheader.i21_crit_edge*/
	/*   %94 = add nsw i32 %i.03.i19, 1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_54)) begin
		encode_preheaderi21preheaderi21_crit_edge_94_reg <= encode_preheaderi21preheaderi21_crit_edge_94;
		if (start == 1'b0 && ^(encode_preheaderi21preheaderi21_crit_edge_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21preheaderi21_crit_edge_94_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i21..preheader.i21_crit_edge*/
	/*   %95 = add i32 %i.03.i19, 1*/
		encode_preheaderi21preheaderi21_crit_edge_95 = (encode_preheaderi21_i03i19_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %.preheader.i21..preheader.i21_crit_edge*/
	/*   %95 = add i32 %i.03.i19, 1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_54)) begin
		encode_preheaderi21preheaderi21_crit_edge_95_reg <= encode_preheaderi21preheaderi21_crit_edge_95;
		if (start == 1'b0 && ^(encode_preheaderi21preheaderi21_crit_edge_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21preheaderi21_crit_edge_95_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i21..preheader.i21_crit_edge*/
	/*   %.phi.trans.insert = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %95*/
		encode_preheaderi21preheaderi21_crit_edge_phitransinsert = (`TAG_g_delay_bpl_a | (4 * encode_preheaderi21preheaderi21_crit_edge_95_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader.i21..preheader.i21_crit_edge*/
	/*   %.phi.trans.insert = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %95*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_55)) begin
		encode_preheaderi21preheaderi21_crit_edge_phitransinsert_reg <= encode_preheaderi21preheaderi21_crit_edge_phitransinsert;
		if (start == 1'b0 && ^(encode_preheaderi21preheaderi21_crit_edge_phitransinsert) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21preheaderi21_crit_edge_phitransinsert_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i21..preheader.i21_crit_edge*/
	/*   %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !1*/
		encode_preheaderi21preheaderi21_crit_edge_pre = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %.preheader.i21..preheader.i21_crit_edge*/
	/*   %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_57)) begin
		encode_preheaderi21preheaderi21_crit_edge_pre_reg <= encode_preheaderi21preheaderi21_crit_edge_pre;
		if (start == 1'b0 && ^(encode_preheaderi21preheaderi21_crit_edge_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi21preheaderi21_crit_edge_pre_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24*/
	/*   %96 = phi i32 [ %.pre61, %.preheader1.i24..preheader1.i24_crit_edge ], [ %30, %.preheader1.i24.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1i24preheader_49) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i24_96 = encode_29_30_reg;
	end
	/* encode: %.preheader1.i24*/
	/*   %96 = phi i32 [ %.pre61, %.preheader1.i24..preheader1.i24_crit_edge ], [ %30, %.preheader1.i24.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_63) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheader1i24_96 = encode_preheader1i24preheader1i24_crit_edge_pre61;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %96 = phi i32 [ %.pre61, %.preheader1.i24..preheader1.i24_crit_edge ], [ %30, %.preheader1.i24.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1i24preheader_49) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i24_96_reg <= encode_preheader1i24_96;
		if (start == 1'b0 && ^(encode_preheader1i24_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_96_reg"); $finish; end
	end
	/* encode: %.preheader1.i24*/
	/*   %96 = phi i32 [ %.pre61, %.preheader1.i24..preheader1.i24_crit_edge ], [ %30, %.preheader1.i24.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_63) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i24_96_reg <= encode_preheader1i24_96;
		if (start == 1'b0 && ^(encode_preheader1i24_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_96_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24*/
	/*   %97 = phi i32 [ %.pre59, %.preheader1.i24..preheader1.i24_crit_edge ], [ %31, %.preheader1.i24.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1i24preheader_49) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i24_97 = encode_29_31_reg;
	end
	/* encode: %.preheader1.i24*/
	/*   %97 = phi i32 [ %.pre59, %.preheader1.i24..preheader1.i24_crit_edge ], [ %31, %.preheader1.i24.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_63) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheader1i24_97 = encode_preheader1i24preheader1i24_crit_edge_pre59;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %97 = phi i32 [ %.pre59, %.preheader1.i24..preheader1.i24_crit_edge ], [ %31, %.preheader1.i24.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1i24preheader_49) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i24_97_reg <= encode_preheader1i24_97;
		if (start == 1'b0 && ^(encode_preheader1i24_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_97_reg"); $finish; end
	end
	/* encode: %.preheader1.i24*/
	/*   %97 = phi i32 [ %.pre59, %.preheader1.i24..preheader1.i24_crit_edge ], [ %31, %.preheader1.i24.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_63) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i24_97_reg <= encode_preheader1i24_97;
		if (start == 1'b0 && ^(encode_preheader1i24_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_97_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24*/
	/*   %i.14.i22 = phi i32 [ %106, %.preheader1.i24..preheader1.i24_crit_edge ], [ 0, %.preheader1.i24.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1i24preheader_49) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i24_i14i22 = 32'd0;
	end
	/* encode: %.preheader1.i24*/
	/*   %i.14.i22 = phi i32 [ %106, %.preheader1.i24..preheader1.i24_crit_edge ], [ 0, %.preheader1.i24.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_63) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheader1i24_i14i22 = encode_preheader1i24preheader1i24_crit_edge_106_reg;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %i.14.i22 = phi i32 [ %106, %.preheader1.i24..preheader1.i24_crit_edge ], [ 0, %.preheader1.i24.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1i24preheader_49) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i24_i14i22_reg <= encode_preheader1i24_i14i22;
		if (start == 1'b0 && ^(encode_preheader1i24_i14i22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_i14i22_reg"); $finish; end
	end
	/* encode: %.preheader1.i24*/
	/*   %i.14.i22 = phi i32 [ %106, %.preheader1.i24..preheader1.i24_crit_edge ], [ 0, %.preheader1.i24.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_63) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i24_i14i22_reg <= encode_preheader1i24_i14i22;
		if (start == 1'b0 && ^(encode_preheader1i24_i14i22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_i14i22_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24*/
	/*   %98 = add i32 %i.14.i22, 1*/
		encode_preheader1i24_98 = (encode_preheader1i24_i14i22_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %98 = add i32 %i.14.i22, 1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_58)) begin
		encode_preheader1i24_98_reg <= encode_preheader1i24_98;
		if (start == 1'b0 && ^(encode_preheader1i24_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_98_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24*/
	/*   %scevgep17 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %i.14.i22*/
		encode_preheader1i24_scevgep17 = (`TAG_g_delay_bpl_a | (4 * encode_preheader1i24_i14i22_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %scevgep17 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %i.14.i22*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_58)) begin
		encode_preheader1i24_scevgep17_reg <= encode_preheader1i24_scevgep17;
		if (start == 1'b0 && ^(encode_preheader1i24_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_scevgep17_reg"); $finish; end
	end
end
always @(*) begin
	encode_preheader1i24_99 = encode_preheader1i24_99_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %99 = mul nsw i32 %97, %72*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		encode_preheader1i24_99_reg <= encode_preheader1i24_99;
		if (start == 1'b0 && ^(encode_preheader1i24_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_99_reg"); $finish; end
	end
	/* encode: %.preheader1.i24*/
	/*   %99 = mul nsw i32 %97, %72*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		encode_preheader1i24_99_reg <= encode_preheader1i24_99;
		if (start == 1'b0 && ^(encode_preheader1i24_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_99_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24*/
	/*   %100 = ashr i32 %99, 31*/
		encode_preheader1i24_100 = ($signed(encode_preheader1i24_99) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %100 = ashr i32 %99, 31*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		encode_preheader1i24_100_reg <= encode_preheader1i24_100;
		if (start == 1'b0 && ^(encode_preheader1i24_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_100_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24*/
	/*   %101 = and i32 %100, -256*/
		encode_preheader1i24_101 = (encode_preheader1i24_100 & -32'd256);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %101 = and i32 %100, -256*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		encode_preheader1i24_101_reg <= encode_preheader1i24_101;
		if (start == 1'b0 && ^(encode_preheader1i24_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_101_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24*/
	/*   %102 = or i32 %101, 128*/
		encode_preheader1i24_102 = (encode_preheader1i24_101 | 32'd128);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %102 = or i32 %101, 128*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		encode_preheader1i24_102_reg <= encode_preheader1i24_102;
		if (start == 1'b0 && ^(encode_preheader1i24_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_102_reg"); $finish; end
	end
end
always @(*) begin
	encode_preheader1i24_103 = encode_preheader1i24_103_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %103 = mul nsw i32 %96, 255*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		encode_preheader1i24_103_reg <= encode_preheader1i24_103;
		if (start == 1'b0 && ^(encode_preheader1i24_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_103_reg"); $finish; end
	end
	/* encode: %.preheader1.i24*/
	/*   %103 = mul nsw i32 %96, 255*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		encode_preheader1i24_103_reg <= encode_preheader1i24_103;
		if (start == 1'b0 && ^(encode_preheader1i24_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_103_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24*/
	/*   %104 = ashr i32 %103, 8*/
		encode_preheader1i24_104 = ($signed(encode_preheader1i24_103) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %104 = ashr i32 %103, 8*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		encode_preheader1i24_104_reg <= encode_preheader1i24_104;
		if (start == 1'b0 && ^(encode_preheader1i24_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_104_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24*/
	/*   %105 = add nsw i32 %102, %104*/
		encode_preheader1i24_105 = (encode_preheader1i24_102 + encode_preheader1i24_104);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %105 = add nsw i32 %102, %104*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		encode_preheader1i24_105_reg <= encode_preheader1i24_105;
		if (start == 1'b0 && ^(encode_preheader1i24_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_105_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24*/
	/*   %exitcond14 = icmp eq i32 %i.14.i22, 5*/
		encode_preheader1i24_exitcond14 = (encode_preheader1i24_i14i22_reg == 32'd5);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %exitcond14 = icmp eq i32 %i.14.i22, 5*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_58)) begin
		encode_preheader1i24_exitcond14_reg <= encode_preheader1i24_exitcond14;
		if (start == 1'b0 && ^(encode_preheader1i24_exitcond14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24_exitcond14_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %106 = add nsw i32 %i.14.i22, 1*/
		encode_preheader1i24preheader1i24_crit_edge_106 = (encode_preheader1i24_i14i22_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %106 = add nsw i32 %i.14.i22, 1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61)) begin
		encode_preheader1i24preheader1i24_crit_edge_106_reg <= encode_preheader1i24preheader1i24_crit_edge_106;
		if (start == 1'b0 && ^(encode_preheader1i24preheader1i24_crit_edge_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24preheader1i24_crit_edge_106_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.phi.trans.insert58 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %98*/
		encode_preheader1i24preheader1i24_crit_edge_phitransinsert58 = (`TAG_g_delay_dltx_a | (4 * encode_preheader1i24_98_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.phi.trans.insert58 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %98*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61)) begin
		encode_preheader1i24preheader1i24_crit_edge_phitransinsert58_reg <= encode_preheader1i24preheader1i24_crit_edge_phitransinsert58;
		if (start == 1'b0 && ^(encode_preheader1i24preheader1i24_crit_edge_phitransinsert58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24preheader1i24_crit_edge_phitransinsert58_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.phi.trans.insert60 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %98*/
		encode_preheader1i24preheader1i24_crit_edge_phitransinsert60 = (`TAG_g_delay_bpl_a | (4 * encode_preheader1i24_98_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.phi.trans.insert60 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %98*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61)) begin
		encode_preheader1i24preheader1i24_crit_edge_phitransinsert60_reg <= encode_preheader1i24preheader1i24_crit_edge_phitransinsert60;
		if (start == 1'b0 && ^(encode_preheader1i24preheader1i24_crit_edge_phitransinsert60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24preheader1i24_crit_edge_phitransinsert60_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.pre59 = load i32* %.phi.trans.insert58, align 4, !tbaa !1*/
		encode_preheader1i24preheader1i24_crit_edge_pre59 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.pre59 = load i32* %.phi.trans.insert58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_63)) begin
		encode_preheader1i24preheader1i24_crit_edge_pre59_reg <= encode_preheader1i24preheader1i24_crit_edge_pre59;
		if (start == 1'b0 && ^(encode_preheader1i24preheader1i24_crit_edge_pre59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24preheader1i24_crit_edge_pre59_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.pre61 = load i32* %.phi.trans.insert60, align 4, !tbaa !1*/
		encode_preheader1i24preheader1i24_crit_edge_pre61 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.pre61 = load i32* %.phi.trans.insert60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_63)) begin
		encode_preheader1i24preheader1i24_crit_edge_pre61_reg <= encode_preheader1i24preheader1i24_crit_edge_pre61;
		if (start == 1'b0 && ^(encode_preheader1i24preheader1i24_crit_edge_pre61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i24preheader1i24_crit_edge_pre61_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %107 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		encode_upzeroexit25_107 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %107 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_68)) begin
		encode_upzeroexit25_107_reg <= encode_upzeroexit25_107;
		if (start == 1'b0 && ^(encode_upzeroexit25_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_107_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %108 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		encode_upzeroexit25_108 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %108 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_68)) begin
		encode_upzeroexit25_108_reg <= encode_upzeroexit25_108;
		if (start == 1'b0 && ^(encode_upzeroexit25_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_108_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %109 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		encode_upzeroexit25_109 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %109 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_69)) begin
		encode_upzeroexit25_109_reg <= encode_upzeroexit25_109;
		if (start == 1'b0 && ^(encode_upzeroexit25_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_109_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %110 = load i32* @plt1, align 4, !tbaa !1*/
		encode_upzeroexit25_110 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %110 = load i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_70)) begin
		encode_upzeroexit25_110_reg <= encode_upzeroexit25_110;
		if (start == 1'b0 && ^(encode_upzeroexit25_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_110_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %111 = load i32* @plt2, align 4, !tbaa !1*/
		encode_upzeroexit25_111 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %111 = load i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		encode_upzeroexit25_111_reg <= encode_upzeroexit25_111;
		if (start == 1'b0 && ^(encode_upzeroexit25_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_111_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %112 = shl nsw i32 %47, 2*/
		encode_upzeroexit25_112 = (encode_filtezexit_47_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %112 = shl nsw i32 %47, 2*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_66)) begin
		encode_upzeroexit25_112_reg <= encode_upzeroexit25_112;
		if (start == 1'b0 && ^(encode_upzeroexit25_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_112_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit25_113 = encode_upzeroexit25_113_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %113 = mul nsw i32 %110, %89*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		encode_upzeroexit25_113_reg <= encode_upzeroexit25_113;
		if (start == 1'b0 && ^(encode_upzeroexit25_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_113_reg"); $finish; end
	end
	/* encode: %upzero.exit25*/
	/*   %113 = mul nsw i32 %110, %89*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		encode_upzeroexit25_113_reg <= encode_upzeroexit25_113;
		if (start == 1'b0 && ^(encode_upzeroexit25_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_113_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %114 = icmp sgt i32 %113, -1*/
		encode_upzeroexit25_114 = ($signed(encode_upzeroexit25_113) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %114 = icmp sgt i32 %113, -1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		encode_upzeroexit25_114_reg <= encode_upzeroexit25_114;
		if (start == 1'b0 && ^(encode_upzeroexit25_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_114_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %115 = sub nsw i32 0, %112*/
		encode_upzeroexit25_115 = (32'd0 - encode_upzeroexit25_112);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %115 = sub nsw i32 0, %112*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_66)) begin
		encode_upzeroexit25_115_reg <= encode_upzeroexit25_115;
		if (start == 1'b0 && ^(encode_upzeroexit25_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_115_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %.1.i15 = select i1 %114, i32 %115, i32 %112*/
		encode_upzeroexit25_1i15 = (encode_upzeroexit25_114 ? encode_upzeroexit25_115_reg : encode_upzeroexit25_112_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %.1.i15 = select i1 %114, i32 %115, i32 %112*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		encode_upzeroexit25_1i15_reg <= encode_upzeroexit25_1i15;
		if (start == 1'b0 && ^(encode_upzeroexit25_1i15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_1i15_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %116 = ashr i32 %.1.i15, 7*/
		encode_upzeroexit25_116 = ($signed(encode_upzeroexit25_1i15) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %116 = ashr i32 %.1.i15, 7*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		encode_upzeroexit25_116_reg <= encode_upzeroexit25_116;
		if (start == 1'b0 && ^(encode_upzeroexit25_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_116_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit25_117 = encode_upzeroexit25_117_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %117 = mul nsw i32 %111, %89*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_117_reg <= encode_upzeroexit25_117;
		if (start == 1'b0 && ^(encode_upzeroexit25_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_117_reg"); $finish; end
	end
	/* encode: %upzero.exit25*/
	/*   %117 = mul nsw i32 %111, %89*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_117_reg <= encode_upzeroexit25_117;
		if (start == 1'b0 && ^(encode_upzeroexit25_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_117_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %118 = ashr i32 %117, 31*/
		encode_upzeroexit25_118 = ($signed(encode_upzeroexit25_117) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %118 = ashr i32 %117, 31*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_118_reg <= encode_upzeroexit25_118;
		if (start == 1'b0 && ^(encode_upzeroexit25_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_118_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %119 = and i32 %118, -256*/
		encode_upzeroexit25_119 = (encode_upzeroexit25_118 & -32'd256);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %119 = and i32 %118, -256*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_119_reg <= encode_upzeroexit25_119;
		if (start == 1'b0 && ^(encode_upzeroexit25_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_119_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %120 = or i32 %119, 128*/
		encode_upzeroexit25_120 = (encode_upzeroexit25_119 | 32'd128);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %120 = or i32 %119, 128*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_120_reg <= encode_upzeroexit25_120;
		if (start == 1'b0 && ^(encode_upzeroexit25_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_120_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit25_121 = encode_upzeroexit25_121_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %121 = mul nsw i32 %49, 127*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		encode_upzeroexit25_121_reg <= encode_upzeroexit25_121;
		if (start == 1'b0 && ^(encode_upzeroexit25_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_121_reg"); $finish; end
	end
	/* encode: %upzero.exit25*/
	/*   %121 = mul nsw i32 %49, 127*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		encode_upzeroexit25_121_reg <= encode_upzeroexit25_121;
		if (start == 1'b0 && ^(encode_upzeroexit25_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_121_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %122 = ashr i32 %121, 7*/
		encode_upzeroexit25_122 = ($signed(encode_upzeroexit25_121) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %122 = ashr i32 %121, 7*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		encode_upzeroexit25_122_reg <= encode_upzeroexit25_122;
		if (start == 1'b0 && ^(encode_upzeroexit25_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_122_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %wd4.0.i16 = add nsw i32 %116, %122*/
		encode_upzeroexit25_wd40i16 = (encode_upzeroexit25_116 + encode_upzeroexit25_122_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %wd4.0.i16 = add nsw i32 %116, %122*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		encode_upzeroexit25_wd40i16_reg <= encode_upzeroexit25_wd40i16;
		if (start == 1'b0 && ^(encode_upzeroexit25_wd40i16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_wd40i16_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %123 = add nsw i32 %wd4.0.i16, %120*/
		encode_upzeroexit25_123 = (encode_upzeroexit25_wd40i16_reg + encode_upzeroexit25_120);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %123 = add nsw i32 %wd4.0.i16, %120*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_123_reg <= encode_upzeroexit25_123;
		if (start == 1'b0 && ^(encode_upzeroexit25_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_123_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %124 = icmp sgt i32 %123, 12288*/
		encode_upzeroexit25_124 = ($signed(encode_upzeroexit25_123) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %124 = icmp sgt i32 %123, 12288*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_124_reg <= encode_upzeroexit25_124;
		if (start == 1'b0 && ^(encode_upzeroexit25_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_124_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %..i17 = select i1 %124, i32 12288, i32 %123*/
		encode_upzeroexit25_i17 = (encode_upzeroexit25_124 ? 32'd12288 : encode_upzeroexit25_123);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %..i17 = select i1 %124, i32 12288, i32 %123*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_i17_reg <= encode_upzeroexit25_i17;
		if (start == 1'b0 && ^(encode_upzeroexit25_i17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_i17_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %125 = icmp slt i32 %..i17, -12288*/
		encode_upzeroexit25_125 = ($signed(encode_upzeroexit25_i17) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %125 = icmp slt i32 %..i17, -12288*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_125_reg <= encode_upzeroexit25_125;
		if (start == 1'b0 && ^(encode_upzeroexit25_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_125_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %...i18 = select i1 %125, i32 -12288, i32 %..i17*/
		encode_upzeroexit25_i18 = (encode_upzeroexit25_125 ? -32'd12288 : encode_upzeroexit25_i17);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %...i18 = select i1 %125, i32 -12288, i32 %..i17*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_i18_reg <= encode_upzeroexit25_i18;
		if (start == 1'b0 && ^(encode_upzeroexit25_i18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_i18_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit25_126 = encode_upzeroexit25_126_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %126 = mul nsw i32 %47, 255*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		encode_upzeroexit25_126_reg <= encode_upzeroexit25_126;
		if (start == 1'b0 && ^(encode_upzeroexit25_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_126_reg"); $finish; end
	end
	/* encode: %upzero.exit25*/
	/*   %126 = mul nsw i32 %47, 255*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		encode_upzeroexit25_126_reg <= encode_upzeroexit25_126;
		if (start == 1'b0 && ^(encode_upzeroexit25_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_126_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %127 = ashr i32 %126, 8*/
		encode_upzeroexit25_127 = ($signed(encode_upzeroexit25_126) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %127 = ashr i32 %126, 8*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		encode_upzeroexit25_127_reg <= encode_upzeroexit25_127;
		if (start == 1'b0 && ^(encode_upzeroexit25_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_127_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %128 = ashr i32 %113, 31*/
		encode_upzeroexit25_128 = ($signed(encode_upzeroexit25_113) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %128 = ashr i32 %113, 31*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		encode_upzeroexit25_128_reg <= encode_upzeroexit25_128;
		if (start == 1'b0 && ^(encode_upzeroexit25_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_128_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %129 = and i32 %128, -384*/
		encode_upzeroexit25_129 = (encode_upzeroexit25_128 & -32'd384);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %129 = and i32 %128, -384*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		encode_upzeroexit25_129_reg <= encode_upzeroexit25_129;
		if (start == 1'b0 && ^(encode_upzeroexit25_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_129_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %130 = add nsw i32 %127, 192*/
		encode_upzeroexit25_130 = (encode_upzeroexit25_127 + 32'd192);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %130 = add nsw i32 %127, 192*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		encode_upzeroexit25_130_reg <= encode_upzeroexit25_130;
		if (start == 1'b0 && ^(encode_upzeroexit25_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_130_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %apl1.0.i12 = add nsw i32 %130, %129*/
		encode_upzeroexit25_apl10i12 = (encode_upzeroexit25_130_reg + encode_upzeroexit25_129);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %apl1.0.i12 = add nsw i32 %130, %129*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		encode_upzeroexit25_apl10i12_reg <= encode_upzeroexit25_apl10i12;
		if (start == 1'b0 && ^(encode_upzeroexit25_apl10i12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_apl10i12_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %131 = sub nsw i32 15360, %...i18*/
		encode_upzeroexit25_131 = (32'd15360 - encode_upzeroexit25_i18);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %131 = sub nsw i32 15360, %...i18*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_131_reg <= encode_upzeroexit25_131;
		if (start == 1'b0 && ^(encode_upzeroexit25_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_131_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %132 = icmp sgt i32 %apl1.0.i12, %131*/
		encode_upzeroexit25_132 = ($signed(encode_upzeroexit25_apl10i12_reg) > $signed(encode_upzeroexit25_131_reg));
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %132 = icmp sgt i32 %apl1.0.i12, %131*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		encode_upzeroexit25_132_reg <= encode_upzeroexit25_132;
		if (start == 1'b0 && ^(encode_upzeroexit25_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_132_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %.apl1.0.i13 = select i1 %132, i32 %131, i32 %apl1.0.i12*/
		encode_upzeroexit25_apl10i13 = (encode_upzeroexit25_132 ? encode_upzeroexit25_131_reg : encode_upzeroexit25_apl10i12_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %.apl1.0.i13 = select i1 %132, i32 %131, i32 %apl1.0.i12*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		encode_upzeroexit25_apl10i13_reg <= encode_upzeroexit25_apl10i13;
		if (start == 1'b0 && ^(encode_upzeroexit25_apl10i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_apl10i13_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %133 = sub nsw i32 0, %131*/
		encode_upzeroexit25_133 = (32'd0 - encode_upzeroexit25_131_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %133 = sub nsw i32 0, %131*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		encode_upzeroexit25_133_reg <= encode_upzeroexit25_133;
		if (start == 1'b0 && ^(encode_upzeroexit25_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_133_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %134 = icmp slt i32 %.apl1.0.i13, %133*/
		encode_upzeroexit25_134 = ($signed(encode_upzeroexit25_apl10i13) < $signed(encode_upzeroexit25_133));
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %134 = icmp slt i32 %.apl1.0.i13, %133*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		encode_upzeroexit25_134_reg <= encode_upzeroexit25_134;
		if (start == 1'b0 && ^(encode_upzeroexit25_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_134_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %apl1.2.i14 = select i1 %134, i32 %133, i32 %.apl1.0.i13*/
		encode_upzeroexit25_apl12i14 = (encode_upzeroexit25_134 ? encode_upzeroexit25_133 : encode_upzeroexit25_apl10i13);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %apl1.2.i14 = select i1 %134, i32 %133, i32 %.apl1.0.i13*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		encode_upzeroexit25_apl12i14_reg <= encode_upzeroexit25_apl12i14;
		if (start == 1'b0 && ^(encode_upzeroexit25_apl12i14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_apl12i14_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %135 = add nsw i32 %72, %53*/
		encode_upzeroexit25_135 = (encode_quantlexit_72_reg + encode_filtezexit_53_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %135 = add nsw i32 %72, %53*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_66)) begin
		encode_upzeroexit25_135_reg <= encode_upzeroexit25_135;
		if (start == 1'b0 && ^(encode_upzeroexit25_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_135_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %136 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
		encode_upzeroexit25_136 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %136 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_136_reg <= encode_upzeroexit25_136;
		if (start == 1'b0 && ^(encode_upzeroexit25_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_136_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit25*/
	/*   %137 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		encode_upzeroexit25_137 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %137 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		encode_upzeroexit25_137_reg <= encode_upzeroexit25_137;
		if (start == 1'b0 && ^(encode_upzeroexit25_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_137_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit25_138 = encode_upzeroexit25_138_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %138 = mul nsw i32 %137, %136*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		encode_upzeroexit25_138_reg <= encode_upzeroexit25_138;
		if (start == 1'b0 && ^(encode_upzeroexit25_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_138_reg"); $finish; end
	end
	/* encode: %upzero.exit25*/
	/*   %138 = mul nsw i32 %137, %136*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		encode_upzeroexit25_138_reg <= encode_upzeroexit25_138;
		if (start == 1'b0 && ^(encode_upzeroexit25_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit25_138_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %139*/
	/*   %indvar = phi i32 [ %indvar.next, %139 ], [ 0, %upzero.exit25 ]*/
	if (((cur_state == LEGUP_F_encode_BB_upzeroexit25_75) & (memory_controller_waitrequest == 1'd0))) begin
		encode_139_indvar = 32'd0;
	end
	/* encode: %139*/
	/*   %indvar = phi i32 [ %indvar.next, %139 ], [ 0, %upzero.exit25 ]*/
	else /* if ((((cur_state == LEGUP_F_encode_BB__139_80) & (memory_controller_waitrequest == 1'd0)) & (encode_139_exitcond8_reg == 1'd0))) */ begin
		encode_139_indvar = encode_139_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* encode: %139*/
	/*   %indvar = phi i32 [ %indvar.next, %139 ], [ 0, %upzero.exit25 ]*/
	if (((cur_state == LEGUP_F_encode_BB_upzeroexit25_75) & (memory_controller_waitrequest == 1'd0))) begin
		encode_139_indvar_reg <= encode_139_indvar;
		if (start == 1'b0 && ^(encode_139_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_indvar_reg"); $finish; end
	end
	/* encode: %139*/
	/*   %indvar = phi i32 [ %indvar.next, %139 ], [ 0, %upzero.exit25 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__139_80) & (memory_controller_waitrequest == 1'd0)) & (encode_139_exitcond8_reg == 1'd0))) begin
		encode_139_indvar_reg <= encode_139_indvar;
		if (start == 1'b0 && ^(encode_139_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %139*/
	/*   %zl.05.i6 = phi i32 [ %144, %139 ], [ %138, %upzero.exit25 ]*/
	if (((cur_state == LEGUP_F_encode_BB_upzeroexit25_75) & (memory_controller_waitrequest == 1'd0))) begin
		encode_139_zl05i6 = encode_upzeroexit25_138_reg;
	end
	/* encode: %139*/
	/*   %zl.05.i6 = phi i32 [ %144, %139 ], [ %138, %upzero.exit25 ]*/
	else /* if ((((cur_state == LEGUP_F_encode_BB__139_80) & (memory_controller_waitrequest == 1'd0)) & (encode_139_exitcond8_reg == 1'd0))) */ begin
		encode_139_zl05i6 = encode_139_144;
	end
end
always @(posedge clk) begin
	/* encode: %139*/
	/*   %zl.05.i6 = phi i32 [ %144, %139 ], [ %138, %upzero.exit25 ]*/
	if (((cur_state == LEGUP_F_encode_BB_upzeroexit25_75) & (memory_controller_waitrequest == 1'd0))) begin
		encode_139_zl05i6_reg <= encode_139_zl05i6;
		if (start == 1'b0 && ^(encode_139_zl05i6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_zl05i6_reg"); $finish; end
	end
	/* encode: %139*/
	/*   %zl.05.i6 = phi i32 [ %144, %139 ], [ %138, %upzero.exit25 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__139_80) & (memory_controller_waitrequest == 1'd0)) & (encode_139_exitcond8_reg == 1'd0))) begin
		encode_139_zl05i6_reg <= encode_139_zl05i6;
		if (start == 1'b0 && ^(encode_139_zl05i6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_zl05i6_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %139*/
	/*   %140 = add i32 %indvar, 1*/
		encode_139_140 = (encode_139_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %139*/
	/*   %140 = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_encode_BB__139_76)) begin
		encode_139_140_reg <= encode_139_140;
		if (start == 1'b0 && ^(encode_139_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_140_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %139*/
	/*   %.017.i9 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %140*/
		encode_139_017i9 = (`TAG_g_delay_bph_a | (4 * encode_139_140_reg));
end
always @(posedge clk) begin
	/* encode: %139*/
	/*   %.017.i9 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %140*/
	if ((cur_state == LEGUP_F_encode_BB__139_77)) begin
		encode_139_017i9_reg <= encode_139_017i9;
		if (start == 1'b0 && ^(encode_139_017i9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_017i9_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %139*/
	/*   %.06.i8 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %140*/
		encode_139_06i8 = (`TAG_g_delay_dhx_a | (4 * encode_139_140_reg));
end
always @(posedge clk) begin
	/* encode: %139*/
	/*   %.06.i8 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %140*/
	if ((cur_state == LEGUP_F_encode_BB__139_77)) begin
		encode_139_06i8_reg <= encode_139_06i8;
		if (start == 1'b0 && ^(encode_139_06i8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_06i8_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %139*/
	/*   %141 = load i32* %.017.i9, align 4, !tbaa !1*/
		encode_139_141 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %139*/
	/*   %141 = load i32* %.017.i9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__139_79)) begin
		encode_139_141_reg <= encode_139_141;
		if (start == 1'b0 && ^(encode_139_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_141_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %139*/
	/*   %142 = load i32* %.06.i8, align 4, !tbaa !1*/
		encode_139_142 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %139*/
	/*   %142 = load i32* %.06.i8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__139_79)) begin
		encode_139_142_reg <= encode_139_142;
		if (start == 1'b0 && ^(encode_139_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_142_reg"); $finish; end
	end
end
always @(*) begin
	encode_139_143 = encode_139_143_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %139*/
	/*   %143 = mul nsw i32 %142, %141*/
	if ((cur_state == LEGUP_F_encode_BB__139_80)) begin
		encode_139_143_reg <= encode_139_143;
		if (start == 1'b0 && ^(encode_139_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_143_reg"); $finish; end
	end
	/* encode: %139*/
	/*   %143 = mul nsw i32 %142, %141*/
	if ((cur_state == LEGUP_F_encode_BB__139_80)) begin
		encode_139_143_reg <= encode_139_143;
		if (start == 1'b0 && ^(encode_139_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_143_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %139*/
	/*   %144 = add nsw i32 %143, %zl.05.i6*/
		encode_139_144 = (encode_139_143 + encode_139_zl05i6_reg);
end
always @(posedge clk) begin
	/* encode: %139*/
	/*   %144 = add nsw i32 %143, %zl.05.i6*/
	if ((cur_state == LEGUP_F_encode_BB__139_80)) begin
		encode_139_144_reg <= encode_139_144;
		if (start == 1'b0 && ^(encode_139_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_144_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %139*/
	/*   %indvar.next = add i32 %indvar, 1*/
		encode_139_indvarnext = (encode_139_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %139*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_encode_BB__139_76)) begin
		encode_139_indvarnext_reg <= encode_139_indvarnext;
		if (start == 1'b0 && ^(encode_139_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %139*/
	/*   %exitcond8 = icmp eq i32 %indvar.next, 5*/
		encode_139_exitcond8 = (encode_139_indvarnext == 32'd5);
end
always @(posedge clk) begin
	/* encode: %139*/
	/*   %exitcond8 = icmp eq i32 %indvar.next, 5*/
	if ((cur_state == LEGUP_F_encode_BB__139_76)) begin
		encode_139_exitcond8_reg <= encode_139_exitcond8;
		if (start == 1'b0 && ^(encode_139_exitcond8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_139_exitcond8_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %145 = ashr i32 %144, 14*/
		encode_filtezexit11_145 = ($signed(encode_139_144_reg) >>> 32'd14);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %145 = ashr i32 %144, 14*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_81)) begin
		encode_filtezexit11_145_reg <= encode_filtezexit11_145;
		if (start == 1'b0 && ^(encode_filtezexit11_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_145_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %146 = load i32* @rh1, align 4, !tbaa !1*/
		encode_filtezexit11_146 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %146 = load i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_83)) begin
		encode_filtezexit11_146_reg <= encode_filtezexit11_146;
		if (start == 1'b0 && ^(encode_filtezexit11_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_146_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %147 = load i32* @ah1, align 4, !tbaa !1*/
		encode_filtezexit11_147 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %147 = load i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_83)) begin
		encode_filtezexit11_147_reg <= encode_filtezexit11_147;
		if (start == 1'b0 && ^(encode_filtezexit11_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_147_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %148 = load i32* @rh2, align 4, !tbaa !1*/
		encode_filtezexit11_148 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %148 = load i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_84)) begin
		encode_filtezexit11_148_reg <= encode_filtezexit11_148;
		if (start == 1'b0 && ^(encode_filtezexit11_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_148_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %149 = load i32* @ah2, align 4, !tbaa !1*/
		encode_filtezexit11_149 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %149 = load i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_84)) begin
		encode_filtezexit11_149_reg <= encode_filtezexit11_149;
		if (start == 1'b0 && ^(encode_filtezexit11_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_149_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit11_150 = encode_filtezexit11_150_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %150 = mul i32 %147, %146*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_84)) begin
		encode_filtezexit11_150_reg <= encode_filtezexit11_150;
		if (start == 1'b0 && ^(encode_filtezexit11_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_150_reg"); $finish; end
	end
	/* encode: %filtez.exit11*/
	/*   %150 = mul i32 %147, %146*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_84)) begin
		encode_filtezexit11_150_reg <= encode_filtezexit11_150;
		if (start == 1'b0 && ^(encode_filtezexit11_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_150_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit11_151 = encode_filtezexit11_151_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %151 = mul i32 %149, %148*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_151_reg <= encode_filtezexit11_151;
		if (start == 1'b0 && ^(encode_filtezexit11_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_151_reg"); $finish; end
	end
	/* encode: %filtez.exit11*/
	/*   %151 = mul i32 %149, %148*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_151_reg <= encode_filtezexit11_151;
		if (start == 1'b0 && ^(encode_filtezexit11_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_151_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %tmp.i = add i32 %151, %150*/
		encode_filtezexit11_tmpi = (encode_filtezexit11_151 + encode_filtezexit11_150_reg);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %tmp.i = add i32 %151, %150*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_tmpi_reg <= encode_filtezexit11_tmpi;
		if (start == 1'b0 && ^(encode_filtezexit11_tmpi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_tmpi_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %tmp1.i = shl i32 %tmp.i, 1*/
		encode_filtezexit11_tmp1i = (encode_filtezexit11_tmpi <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %tmp1.i = shl i32 %tmp.i, 1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_tmp1i_reg <= encode_filtezexit11_tmp1i;
		if (start == 1'b0 && ^(encode_filtezexit11_tmp1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_tmp1i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %152 = ashr i32 %tmp1.i, 15*/
		encode_filtezexit11_152 = ($signed(encode_filtezexit11_tmp1i) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %152 = ashr i32 %tmp1.i, 15*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_152_reg <= encode_filtezexit11_152;
		if (start == 1'b0 && ^(encode_filtezexit11_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_152_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %153 = add nsw i32 %152, %145*/
		encode_filtezexit11_153 = (encode_filtezexit11_152 + encode_filtezexit11_145_reg);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %153 = add nsw i32 %152, %145*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_153_reg <= encode_filtezexit11_153;
		if (start == 1'b0 && ^(encode_filtezexit11_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_153_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %154 = sub nsw i32 %44, %153*/
		encode_filtezexit11_154 = (encode_filtezexit_44_reg - encode_filtezexit11_153);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %154 = sub nsw i32 %44, %153*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_154_reg <= encode_filtezexit11_154;
		if (start == 1'b0 && ^(encode_filtezexit11_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_154_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %155 = ashr i32 %154, 31*/
		encode_filtezexit11_155 = ($signed(encode_filtezexit11_154) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %155 = ashr i32 %154, 31*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_155_reg <= encode_filtezexit11_155;
		if (start == 1'b0 && ^(encode_filtezexit11_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_155_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %156 = and i32 %155, -2*/
		encode_filtezexit11_156 = (encode_filtezexit11_155 & -32'd2);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %156 = and i32 %155, -2*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_156_reg <= encode_filtezexit11_156;
		if (start == 1'b0 && ^(encode_filtezexit11_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_156_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %157 = load i32* @deth, align 4, !tbaa !1*/
		encode_filtezexit11_157 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %157 = load i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_157_reg <= encode_filtezexit11_157;
		if (start == 1'b0 && ^(encode_filtezexit11_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_157_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit11_158 = encode_filtezexit11_158_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %158 = mul nsw i32 %157, 564*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_86)) begin
		encode_filtezexit11_158_reg <= encode_filtezexit11_158;
		if (start == 1'b0 && ^(encode_filtezexit11_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_158_reg"); $finish; end
	end
	/* encode: %filtez.exit11*/
	/*   %158 = mul nsw i32 %157, 564*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_86)) begin
		encode_filtezexit11_158_reg <= encode_filtezexit11_158;
		if (start == 1'b0 && ^(encode_filtezexit11_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_158_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %159 = ashr i32 %158, 12*/
		encode_filtezexit11_159 = ($signed(encode_filtezexit11_158) >>> 32'd12);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %159 = ashr i32 %158, 12*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_86)) begin
		encode_filtezexit11_159_reg <= encode_filtezexit11_159;
		if (start == 1'b0 && ^(encode_filtezexit11_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_159_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %160 = icmp sgt i32 %154, -1*/
		encode_filtezexit11_160 = ($signed(encode_filtezexit11_154) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %160 = icmp sgt i32 %154, -1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_160_reg <= encode_filtezexit11_160;
		if (start == 1'b0 && ^(encode_filtezexit11_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_160_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %161 = sub nsw i32 0, %154*/
		encode_filtezexit11_161 = (32'd0 - encode_filtezexit11_154);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %161 = sub nsw i32 0, %154*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_161_reg <= encode_filtezexit11_161;
		if (start == 1'b0 && ^(encode_filtezexit11_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_161_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %m.0.i = select i1 %160, i32 %154, i32 %161*/
		encode_filtezexit11_m0i = (encode_filtezexit11_160 ? encode_filtezexit11_154 : encode_filtezexit11_161);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %m.0.i = select i1 %160, i32 %154, i32 %161*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_m0i_reg <= encode_filtezexit11_m0i;
		if (start == 1'b0 && ^(encode_filtezexit11_m0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_m0i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %162 = icmp sgt i32 %m.0.i, %159*/
		encode_filtezexit11_162 = ($signed(encode_filtezexit11_m0i_reg) > $signed(encode_filtezexit11_159));
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %162 = icmp sgt i32 %m.0.i, %159*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_86)) begin
		encode_filtezexit11_162_reg <= encode_filtezexit11_162;
		if (start == 1'b0 && ^(encode_filtezexit11_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_162_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %..v = select i1 %162, i32 2, i32 3*/
		encode_filtezexit11_v = (encode_filtezexit11_162 ? 32'd2 : 32'd3);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %..v = select i1 %162, i32 2, i32 3*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_86)) begin
		encode_filtezexit11_v_reg <= encode_filtezexit11_v;
		if (start == 1'b0 && ^(encode_filtezexit11_v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_v_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %. = add nsw i32 %156, %..v*/
		encode_filtezexit11_ = (encode_filtezexit11_156_reg + encode_filtezexit11_v);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %. = add nsw i32 %156, %..v*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_86)) begin
		encode_filtezexit11__reg <= encode_filtezexit11_;
		if (start == 1'b0 && ^(encode_filtezexit11_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11__reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %163 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %.*/
		encode_filtezexit11_163 = (`TAG_g_qq2_code2_table_a | (4 * encode_filtezexit11__reg));
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %163 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %.*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_87)) begin
		encode_filtezexit11_163_reg <= encode_filtezexit11_163;
		if (start == 1'b0 && ^(encode_filtezexit11_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_163_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
		encode_filtezexit11_164 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		encode_filtezexit11_164_reg <= encode_filtezexit11_164;
		if (start == 1'b0 && ^(encode_filtezexit11_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_164_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit11_165 = encode_filtezexit11_165_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %165 = mul nsw i32 %164, %157*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_90)) begin
		encode_filtezexit11_165_reg <= encode_filtezexit11_165;
		if (start == 1'b0 && ^(encode_filtezexit11_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_165_reg"); $finish; end
	end
	/* encode: %filtez.exit11*/
	/*   %165 = mul nsw i32 %164, %157*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_90)) begin
		encode_filtezexit11_165_reg <= encode_filtezexit11_165;
		if (start == 1'b0 && ^(encode_filtezexit11_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_165_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %166 = ashr i32 %165, 15*/
		encode_filtezexit11_166 = ($signed(encode_filtezexit11_165) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %166 = ashr i32 %165, 15*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_90)) begin
		encode_filtezexit11_166_reg <= encode_filtezexit11_166;
		if (start == 1'b0 && ^(encode_filtezexit11_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_166_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %167 = load i32* @nbh, align 4, !tbaa !1*/
		encode_filtezexit11_167 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %167 = load i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_85)) begin
		encode_filtezexit11_167_reg <= encode_filtezexit11_167;
		if (start == 1'b0 && ^(encode_filtezexit11_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_167_reg"); $finish; end
	end
end
always @(*) begin
	encode_filtezexit11_168 = encode_filtezexit11_168_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %168 = mul nsw i32 %167, 127*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_86)) begin
		encode_filtezexit11_168_reg <= encode_filtezexit11_168;
		if (start == 1'b0 && ^(encode_filtezexit11_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_168_reg"); $finish; end
	end
	/* encode: %filtez.exit11*/
	/*   %168 = mul nsw i32 %167, 127*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_86)) begin
		encode_filtezexit11_168_reg <= encode_filtezexit11_168;
		if (start == 1'b0 && ^(encode_filtezexit11_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_168_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %169 = ashr i32 %168, 7*/
		encode_filtezexit11_169 = ($signed(encode_filtezexit11_168) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %169 = ashr i32 %168, 7*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_86)) begin
		encode_filtezexit11_169_reg <= encode_filtezexit11_169;
		if (start == 1'b0 && ^(encode_filtezexit11_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_169_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %170 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %.*/
		encode_filtezexit11_170 = (`TAG_g_wh_code_table_a | (4 * encode_filtezexit11__reg));
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %170 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %.*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_87)) begin
		encode_filtezexit11_170_reg <= encode_filtezexit11_170;
		if (start == 1'b0 && ^(encode_filtezexit11_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_170_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %171 = load i32* %170, align 4, !tbaa !1*/
		encode_filtezexit11_171 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %171 = load i32* %170, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		encode_filtezexit11_171_reg <= encode_filtezexit11_171;
		if (start == 1'b0 && ^(encode_filtezexit11_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_171_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %172 = add nsw i32 %169, %171*/
		encode_filtezexit11_172 = (encode_filtezexit11_169_reg + encode_filtezexit11_171);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %172 = add nsw i32 %169, %171*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		encode_filtezexit11_172_reg <= encode_filtezexit11_172;
		if (start == 1'b0 && ^(encode_filtezexit11_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_172_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %173 = icmp slt i32 %172, 0*/
		encode_filtezexit11_173 = ($signed(encode_filtezexit11_172) < $signed(32'd0));
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %173 = icmp slt i32 %172, 0*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		encode_filtezexit11_173_reg <= encode_filtezexit11_173;
		if (start == 1'b0 && ^(encode_filtezexit11_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_173_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %..i2 = select i1 %173, i32 0, i32 %172*/
		encode_filtezexit11_i2 = (encode_filtezexit11_173 ? 32'd0 : encode_filtezexit11_172);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %..i2 = select i1 %173, i32 0, i32 %172*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		encode_filtezexit11_i2_reg <= encode_filtezexit11_i2;
		if (start == 1'b0 && ^(encode_filtezexit11_i2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_i2_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %174 = icmp sgt i32 %..i2, 22528*/
		encode_filtezexit11_174 = ($signed(encode_filtezexit11_i2) > $signed(32'd22528));
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %174 = icmp sgt i32 %..i2, 22528*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		encode_filtezexit11_174_reg <= encode_filtezexit11_174;
		if (start == 1'b0 && ^(encode_filtezexit11_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_174_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %...i3 = select i1 %174, i32 22528, i32 %..i2*/
		encode_filtezexit11_i3 = (encode_filtezexit11_174 ? 32'd22528 : encode_filtezexit11_i2);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %...i3 = select i1 %174, i32 22528, i32 %..i2*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		encode_filtezexit11_i3_reg <= encode_filtezexit11_i3;
		if (start == 1'b0 && ^(encode_filtezexit11_i3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_i3_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %175 = lshr i32 %...i3, 6*/
		encode_filtezexit11_175 = (encode_filtezexit11_i3 >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %175 = lshr i32 %...i3, 6*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		encode_filtezexit11_175_reg <= encode_filtezexit11_175;
		if (start == 1'b0 && ^(encode_filtezexit11_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_175_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %176 = and i32 %175, 31*/
		encode_filtezexit11_176 = (encode_filtezexit11_175 & 32'd31);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %176 = and i32 %175, 31*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		encode_filtezexit11_176_reg <= encode_filtezexit11_176;
		if (start == 1'b0 && ^(encode_filtezexit11_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_176_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %177 = ashr i32 %...i3, 11*/
		encode_filtezexit11_177 = ($signed(encode_filtezexit11_i3) >>> 32'd11);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %177 = ashr i32 %...i3, 11*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		encode_filtezexit11_177_reg <= encode_filtezexit11_177;
		if (start == 1'b0 && ^(encode_filtezexit11_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_177_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %178 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %176*/
		encode_filtezexit11_178 = (`TAG_g_ilb_table_a | (4 * encode_filtezexit11_176_reg));
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %178 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %176*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_90)) begin
		encode_filtezexit11_178_reg <= encode_filtezexit11_178;
		if (start == 1'b0 && ^(encode_filtezexit11_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_178_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
		encode_filtezexit11_179 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_92)) begin
		encode_filtezexit11_179_reg <= encode_filtezexit11_179;
		if (start == 1'b0 && ^(encode_filtezexit11_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_179_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %180 = sub i32 11, %177*/
		encode_filtezexit11_180 = (32'd11 - encode_filtezexit11_177);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %180 = sub i32 11, %177*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		encode_filtezexit11_180_reg <= encode_filtezexit11_180;
		if (start == 1'b0 && ^(encode_filtezexit11_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_180_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %181 = ashr i32 %179, %180*/
		encode_filtezexit11_181 = ($signed(encode_filtezexit11_179) >>> encode_filtezexit11_180_reg);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %181 = ashr i32 %179, %180*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_92)) begin
		encode_filtezexit11_181_reg <= encode_filtezexit11_181;
		if (start == 1'b0 && ^(encode_filtezexit11_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_181_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %182 = shl i32 %181, 3*/
		encode_filtezexit11_182 = (encode_filtezexit11_181 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %182 = shl i32 %181, 3*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_92)) begin
		encode_filtezexit11_182_reg <= encode_filtezexit11_182;
		if (start == 1'b0 && ^(encode_filtezexit11_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_182_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %183 = add nsw i32 %145, %166*/
		encode_filtezexit11_183 = (encode_filtezexit11_145_reg + encode_filtezexit11_166);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %183 = add nsw i32 %145, %166*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_90)) begin
		encode_filtezexit11_183_reg <= encode_filtezexit11_183;
		if (start == 1'b0 && ^(encode_filtezexit11_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_183_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %filtez.exit11*/
	/*   %184 = icmp eq i32 %166, 0*/
		encode_filtezexit11_184 = (encode_filtezexit11_166 == 32'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %184 = icmp eq i32 %166, 0*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_90)) begin
		encode_filtezexit11_184_reg <= encode_filtezexit11_184;
		if (start == 1'b0 && ^(encode_filtezexit11_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_filtezexit11_184_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i*/
	/*   %185 = phi i32 [ %.pre53, %.preheader.i..preheader.i_crit_edge ], [ %136, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderipreheader_95) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheaderi_185 = encode_upzeroexit25_136_reg;
	end
	/* encode: %.preheader.i*/
	/*   %185 = phi i32 [ %.pre53, %.preheader.i..preheader.i_crit_edge ], [ %136, %.preheader.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_102) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheaderi_185 = encode_preheaderipreheaderi_crit_edge_pre53;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader.i*/
	/*   %185 = phi i32 [ %.pre53, %.preheader.i..preheader.i_crit_edge ], [ %136, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderipreheader_95) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheaderi_185_reg <= encode_preheaderi_185;
		if (start == 1'b0 && ^(encode_preheaderi_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi_185_reg"); $finish; end
	end
	/* encode: %.preheader.i*/
	/*   %185 = phi i32 [ %.pre53, %.preheader.i..preheader.i_crit_edge ], [ %136, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_102) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheaderi_185_reg <= encode_preheaderi_185;
		if (start == 1'b0 && ^(encode_preheaderi_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi_185_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i*/
	/*   %i.03.i = phi i32 [ %188, %.preheader.i..preheader.i_crit_edge ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderipreheader_95) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheaderi_i03i = 32'd0;
	end
	/* encode: %.preheader.i*/
	/*   %i.03.i = phi i32 [ %188, %.preheader.i..preheader.i_crit_edge ], [ 0, %.preheader.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_102) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheaderi_i03i = encode_preheaderipreheaderi_crit_edge_188_reg;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader.i*/
	/*   %i.03.i = phi i32 [ %188, %.preheader.i..preheader.i_crit_edge ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderipreheader_95) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheaderi_i03i_reg <= encode_preheaderi_i03i;
		if (start == 1'b0 && ^(encode_preheaderi_i03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi_i03i_reg"); $finish; end
	end
	/* encode: %.preheader.i*/
	/*   %i.03.i = phi i32 [ %188, %.preheader.i..preheader.i_crit_edge ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_102) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheaderi_i03i_reg <= encode_preheaderi_i03i;
		if (start == 1'b0 && ^(encode_preheaderi_i03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi_i03i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i*/
	/*   %scevgep = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %i.03.i*/
		encode_preheaderi_scevgep = (`TAG_g_delay_bph_a | (4 * encode_preheaderi_i03i_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader.i*/
	/*   %scevgep = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %i.03.i*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi_96)) begin
		encode_preheaderi_scevgep_reg <= encode_preheaderi_scevgep;
		if (start == 1'b0 && ^(encode_preheaderi_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	encode_preheaderi_186 = encode_preheaderi_186_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %.preheader.i*/
	/*   %186 = mul nsw i32 %185, 255*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi_97)) begin
		encode_preheaderi_186_reg <= encode_preheaderi_186;
		if (start == 1'b0 && ^(encode_preheaderi_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi_186_reg"); $finish; end
	end
	/* encode: %.preheader.i*/
	/*   %186 = mul nsw i32 %185, 255*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi_97)) begin
		encode_preheaderi_186_reg <= encode_preheaderi_186;
		if (start == 1'b0 && ^(encode_preheaderi_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi_186_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i*/
	/*   %187 = ashr i32 %186, 8*/
		encode_preheaderi_187 = ($signed(encode_preheaderi_186) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %.preheader.i*/
	/*   %187 = ashr i32 %186, 8*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi_97)) begin
		encode_preheaderi_187_reg <= encode_preheaderi_187;
		if (start == 1'b0 && ^(encode_preheaderi_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi_187_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i*/
	/*   %exitcond3 = icmp eq i32 %i.03.i, 5*/
		encode_preheaderi_exitcond3 = (encode_preheaderi_i03i_reg == 32'd5);
end
always @(posedge clk) begin
	/* encode: %.preheader.i*/
	/*   %exitcond3 = icmp eq i32 %i.03.i, 5*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi_96)) begin
		encode_preheaderi_exitcond3_reg <= encode_preheaderi_exitcond3;
		if (start == 1'b0 && ^(encode_preheaderi_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderi_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i..preheader.i_crit_edge*/
	/*   %188 = add nsw i32 %i.03.i, 1*/
		encode_preheaderipreheaderi_crit_edge_188 = (encode_preheaderi_i03i_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %.preheader.i..preheader.i_crit_edge*/
	/*   %188 = add nsw i32 %i.03.i, 1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_99)) begin
		encode_preheaderipreheaderi_crit_edge_188_reg <= encode_preheaderipreheaderi_crit_edge_188;
		if (start == 1'b0 && ^(encode_preheaderipreheaderi_crit_edge_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderipreheaderi_crit_edge_188_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i..preheader.i_crit_edge*/
	/*   %189 = add i32 %i.03.i, 1*/
		encode_preheaderipreheaderi_crit_edge_189 = (encode_preheaderi_i03i_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %.preheader.i..preheader.i_crit_edge*/
	/*   %189 = add i32 %i.03.i, 1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_99)) begin
		encode_preheaderipreheaderi_crit_edge_189_reg <= encode_preheaderipreheaderi_crit_edge_189;
		if (start == 1'b0 && ^(encode_preheaderipreheaderi_crit_edge_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderipreheaderi_crit_edge_189_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i..preheader.i_crit_edge*/
	/*   %.phi.trans.insert52 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %189*/
		encode_preheaderipreheaderi_crit_edge_phitransinsert52 = (`TAG_g_delay_bph_a | (4 * encode_preheaderipreheaderi_crit_edge_189_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader.i..preheader.i_crit_edge*/
	/*   %.phi.trans.insert52 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %189*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_100)) begin
		encode_preheaderipreheaderi_crit_edge_phitransinsert52_reg <= encode_preheaderipreheaderi_crit_edge_phitransinsert52;
		if (start == 1'b0 && ^(encode_preheaderipreheaderi_crit_edge_phitransinsert52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderipreheaderi_crit_edge_phitransinsert52_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader.i..preheader.i_crit_edge*/
	/*   %.pre53 = load i32* %.phi.trans.insert52, align 4, !tbaa !1*/
		encode_preheaderipreheaderi_crit_edge_pre53 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %.preheader.i..preheader.i_crit_edge*/
	/*   %.pre53 = load i32* %.phi.trans.insert52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_102)) begin
		encode_preheaderipreheaderi_crit_edge_pre53_reg <= encode_preheaderipreheaderi_crit_edge_pre53;
		if (start == 1'b0 && ^(encode_preheaderipreheaderi_crit_edge_pre53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheaderipreheaderi_crit_edge_pre53_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i*/
	/*   %190 = phi i32 [ %.pre57, %.preheader1.i..preheader1.i_crit_edge ], [ %136, %.preheader1.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1ipreheader_94) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i_190 = encode_upzeroexit25_136_reg;
	end
	/* encode: %.preheader1.i*/
	/*   %190 = phi i32 [ %.pre57, %.preheader1.i..preheader1.i_crit_edge ], [ %136, %.preheader1.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_108) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheader1i_190 = encode_preheader1ipreheader1i_crit_edge_pre57;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %190 = phi i32 [ %.pre57, %.preheader1.i..preheader1.i_crit_edge ], [ %136, %.preheader1.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1ipreheader_94) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i_190_reg <= encode_preheader1i_190;
		if (start == 1'b0 && ^(encode_preheader1i_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_190_reg"); $finish; end
	end
	/* encode: %.preheader1.i*/
	/*   %190 = phi i32 [ %.pre57, %.preheader1.i..preheader1.i_crit_edge ], [ %136, %.preheader1.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_108) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i_190_reg <= encode_preheader1i_190;
		if (start == 1'b0 && ^(encode_preheader1i_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_190_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i*/
	/*   %191 = phi i32 [ %.pre55, %.preheader1.i..preheader1.i_crit_edge ], [ %137, %.preheader1.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1ipreheader_94) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i_191 = encode_upzeroexit25_137_reg;
	end
	/* encode: %.preheader1.i*/
	/*   %191 = phi i32 [ %.pre55, %.preheader1.i..preheader1.i_crit_edge ], [ %137, %.preheader1.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_108) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheader1i_191 = encode_preheader1ipreheader1i_crit_edge_pre55;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %191 = phi i32 [ %.pre55, %.preheader1.i..preheader1.i_crit_edge ], [ %137, %.preheader1.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1ipreheader_94) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i_191_reg <= encode_preheader1i_191;
		if (start == 1'b0 && ^(encode_preheader1i_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_191_reg"); $finish; end
	end
	/* encode: %.preheader1.i*/
	/*   %191 = phi i32 [ %.pre55, %.preheader1.i..preheader1.i_crit_edge ], [ %137, %.preheader1.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_108) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i_191_reg <= encode_preheader1i_191;
		if (start == 1'b0 && ^(encode_preheader1i_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_191_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i*/
	/*   %i.14.i = phi i32 [ %200, %.preheader1.i..preheader1.i_crit_edge ], [ 0, %.preheader1.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1ipreheader_94) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i_i14i = 32'd0;
	end
	/* encode: %.preheader1.i*/
	/*   %i.14.i = phi i32 [ %200, %.preheader1.i..preheader1.i_crit_edge ], [ 0, %.preheader1.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_108) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_preheader1i_i14i = encode_preheader1ipreheader1i_crit_edge_200_reg;
	end
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %i.14.i = phi i32 [ %200, %.preheader1.i..preheader1.i_crit_edge ], [ 0, %.preheader1.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1ipreheader_94) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i_i14i_reg <= encode_preheader1i_i14i;
		if (start == 1'b0 && ^(encode_preheader1i_i14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_i14i_reg"); $finish; end
	end
	/* encode: %.preheader1.i*/
	/*   %i.14.i = phi i32 [ %200, %.preheader1.i..preheader1.i_crit_edge ], [ 0, %.preheader1.i.preheader ]*/
	if (((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_108) & (memory_controller_waitrequest == 1'd0))) begin
		encode_preheader1i_i14i_reg <= encode_preheader1i_i14i;
		if (start == 1'b0 && ^(encode_preheader1i_i14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_i14i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i*/
	/*   %192 = add i32 %i.14.i, 1*/
		encode_preheader1i_192 = (encode_preheader1i_i14i_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %192 = add i32 %i.14.i, 1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_103)) begin
		encode_preheader1i_192_reg <= encode_preheader1i_192;
		if (start == 1'b0 && ^(encode_preheader1i_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_192_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i*/
	/*   %scevgep7 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %i.14.i*/
		encode_preheader1i_scevgep7 = (`TAG_g_delay_bph_a | (4 * encode_preheader1i_i14i_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %scevgep7 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %i.14.i*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_103)) begin
		encode_preheader1i_scevgep7_reg <= encode_preheader1i_scevgep7;
		if (start == 1'b0 && ^(encode_preheader1i_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	encode_preheader1i_193 = encode_preheader1i_193_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %193 = mul nsw i32 %191, %166*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		encode_preheader1i_193_reg <= encode_preheader1i_193;
		if (start == 1'b0 && ^(encode_preheader1i_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_193_reg"); $finish; end
	end
	/* encode: %.preheader1.i*/
	/*   %193 = mul nsw i32 %191, %166*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		encode_preheader1i_193_reg <= encode_preheader1i_193;
		if (start == 1'b0 && ^(encode_preheader1i_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_193_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i*/
	/*   %194 = ashr i32 %193, 31*/
		encode_preheader1i_194 = ($signed(encode_preheader1i_193) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %194 = ashr i32 %193, 31*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		encode_preheader1i_194_reg <= encode_preheader1i_194;
		if (start == 1'b0 && ^(encode_preheader1i_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_194_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i*/
	/*   %195 = and i32 %194, -256*/
		encode_preheader1i_195 = (encode_preheader1i_194 & -32'd256);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %195 = and i32 %194, -256*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		encode_preheader1i_195_reg <= encode_preheader1i_195;
		if (start == 1'b0 && ^(encode_preheader1i_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_195_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i*/
	/*   %196 = or i32 %195, 128*/
		encode_preheader1i_196 = (encode_preheader1i_195 | 32'd128);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %196 = or i32 %195, 128*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		encode_preheader1i_196_reg <= encode_preheader1i_196;
		if (start == 1'b0 && ^(encode_preheader1i_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_196_reg"); $finish; end
	end
end
always @(*) begin
	encode_preheader1i_197 = encode_preheader1i_197_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %197 = mul nsw i32 %190, 255*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		encode_preheader1i_197_reg <= encode_preheader1i_197;
		if (start == 1'b0 && ^(encode_preheader1i_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_197_reg"); $finish; end
	end
	/* encode: %.preheader1.i*/
	/*   %197 = mul nsw i32 %190, 255*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		encode_preheader1i_197_reg <= encode_preheader1i_197;
		if (start == 1'b0 && ^(encode_preheader1i_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_197_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i*/
	/*   %198 = ashr i32 %197, 8*/
		encode_preheader1i_198 = ($signed(encode_preheader1i_197) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %198 = ashr i32 %197, 8*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		encode_preheader1i_198_reg <= encode_preheader1i_198;
		if (start == 1'b0 && ^(encode_preheader1i_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_198_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i*/
	/*   %199 = add nsw i32 %196, %198*/
		encode_preheader1i_199 = (encode_preheader1i_196 + encode_preheader1i_198);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %199 = add nsw i32 %196, %198*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		encode_preheader1i_199_reg <= encode_preheader1i_199;
		if (start == 1'b0 && ^(encode_preheader1i_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_199_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i*/
	/*   %exitcond4 = icmp eq i32 %i.14.i, 5*/
		encode_preheader1i_exitcond4 = (encode_preheader1i_i14i_reg == 32'd5);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %exitcond4 = icmp eq i32 %i.14.i, 5*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_103)) begin
		encode_preheader1i_exitcond4_reg <= encode_preheader1i_exitcond4;
		if (start == 1'b0 && ^(encode_preheader1i_exitcond4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1i_exitcond4_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %200 = add nsw i32 %i.14.i, 1*/
		encode_preheader1ipreheader1i_crit_edge_200 = (encode_preheader1i_i14i_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %200 = add nsw i32 %i.14.i, 1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106)) begin
		encode_preheader1ipreheader1i_crit_edge_200_reg <= encode_preheader1ipreheader1i_crit_edge_200;
		if (start == 1'b0 && ^(encode_preheader1ipreheader1i_crit_edge_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1ipreheader1i_crit_edge_200_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.phi.trans.insert54 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %192*/
		encode_preheader1ipreheader1i_crit_edge_phitransinsert54 = (`TAG_g_delay_dhx_a | (4 * encode_preheader1i_192_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.phi.trans.insert54 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %192*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106)) begin
		encode_preheader1ipreheader1i_crit_edge_phitransinsert54_reg <= encode_preheader1ipreheader1i_crit_edge_phitransinsert54;
		if (start == 1'b0 && ^(encode_preheader1ipreheader1i_crit_edge_phitransinsert54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1ipreheader1i_crit_edge_phitransinsert54_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.phi.trans.insert56 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %192*/
		encode_preheader1ipreheader1i_crit_edge_phitransinsert56 = (`TAG_g_delay_bph_a | (4 * encode_preheader1i_192_reg));
end
always @(posedge clk) begin
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.phi.trans.insert56 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %192*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106)) begin
		encode_preheader1ipreheader1i_crit_edge_phitransinsert56_reg <= encode_preheader1ipreheader1i_crit_edge_phitransinsert56;
		if (start == 1'b0 && ^(encode_preheader1ipreheader1i_crit_edge_phitransinsert56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1ipreheader1i_crit_edge_phitransinsert56_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.pre55 = load i32* %.phi.trans.insert54, align 4, !tbaa !1*/
		encode_preheader1ipreheader1i_crit_edge_pre55 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.pre55 = load i32* %.phi.trans.insert54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_108)) begin
		encode_preheader1ipreheader1i_crit_edge_pre55_reg <= encode_preheader1ipreheader1i_crit_edge_pre55;
		if (start == 1'b0 && ^(encode_preheader1ipreheader1i_crit_edge_pre55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1ipreheader1i_crit_edge_pre55_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.pre57 = load i32* %.phi.trans.insert56, align 4, !tbaa !1*/
		encode_preheader1ipreheader1i_crit_edge_pre57 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.pre57 = load i32* %.phi.trans.insert56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_108)) begin
		encode_preheader1ipreheader1i_crit_edge_pre57_reg <= encode_preheader1ipreheader1i_crit_edge_pre57;
		if (start == 1'b0 && ^(encode_preheader1ipreheader1i_crit_edge_pre57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_preheader1ipreheader1i_crit_edge_pre57_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %201 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		encode_upzeroexit_201 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %201 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_113)) begin
		encode_upzeroexit_201_reg <= encode_upzeroexit_201;
		if (start == 1'b0 && ^(encode_upzeroexit_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_201_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %202 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		encode_upzeroexit_202 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %202 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_113)) begin
		encode_upzeroexit_202_reg <= encode_upzeroexit_202;
		if (start == 1'b0 && ^(encode_upzeroexit_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_202_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %203 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		encode_upzeroexit_203 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %203 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_114)) begin
		encode_upzeroexit_203_reg <= encode_upzeroexit_203;
		if (start == 1'b0 && ^(encode_upzeroexit_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_203_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %204 = load i32* @ph1, align 4, !tbaa !1*/
		encode_upzeroexit_204 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %204 = load i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_115)) begin
		encode_upzeroexit_204_reg <= encode_upzeroexit_204;
		if (start == 1'b0 && ^(encode_upzeroexit_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_204_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %205 = load i32* @ph2, align 4, !tbaa !1*/
		encode_upzeroexit_205 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %205 = load i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		encode_upzeroexit_205_reg <= encode_upzeroexit_205;
		if (start == 1'b0 && ^(encode_upzeroexit_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_205_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %206 = shl nsw i32 %147, 2*/
		encode_upzeroexit_206 = (encode_filtezexit11_147_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %206 = shl nsw i32 %147, 2*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		encode_upzeroexit_206_reg <= encode_upzeroexit_206;
		if (start == 1'b0 && ^(encode_upzeroexit_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_206_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit_207 = encode_upzeroexit_207_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %207 = mul nsw i32 %204, %183*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		encode_upzeroexit_207_reg <= encode_upzeroexit_207;
		if (start == 1'b0 && ^(encode_upzeroexit_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_207_reg"); $finish; end
	end
	/* encode: %upzero.exit*/
	/*   %207 = mul nsw i32 %204, %183*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		encode_upzeroexit_207_reg <= encode_upzeroexit_207;
		if (start == 1'b0 && ^(encode_upzeroexit_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_207_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %208 = icmp sgt i32 %207, -1*/
		encode_upzeroexit_208 = ($signed(encode_upzeroexit_207) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %208 = icmp sgt i32 %207, -1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		encode_upzeroexit_208_reg <= encode_upzeroexit_208;
		if (start == 1'b0 && ^(encode_upzeroexit_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_208_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %209 = sub nsw i32 0, %206*/
		encode_upzeroexit_209 = (32'd0 - encode_upzeroexit_206);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %209 = sub nsw i32 0, %206*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		encode_upzeroexit_209_reg <= encode_upzeroexit_209;
		if (start == 1'b0 && ^(encode_upzeroexit_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_209_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %.1.i = select i1 %208, i32 %209, i32 %206*/
		encode_upzeroexit_1i = (encode_upzeroexit_208 ? encode_upzeroexit_209_reg : encode_upzeroexit_206_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %.1.i = select i1 %208, i32 %209, i32 %206*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		encode_upzeroexit_1i_reg <= encode_upzeroexit_1i;
		if (start == 1'b0 && ^(encode_upzeroexit_1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_1i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %210 = ashr i32 %.1.i, 7*/
		encode_upzeroexit_210 = ($signed(encode_upzeroexit_1i) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %210 = ashr i32 %.1.i, 7*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		encode_upzeroexit_210_reg <= encode_upzeroexit_210;
		if (start == 1'b0 && ^(encode_upzeroexit_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_210_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit_211 = encode_upzeroexit_211_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %211 = mul nsw i32 %205, %183*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		encode_upzeroexit_211_reg <= encode_upzeroexit_211;
		if (start == 1'b0 && ^(encode_upzeroexit_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_211_reg"); $finish; end
	end
	/* encode: %upzero.exit*/
	/*   %211 = mul nsw i32 %205, %183*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		encode_upzeroexit_211_reg <= encode_upzeroexit_211;
		if (start == 1'b0 && ^(encode_upzeroexit_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_211_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %212 = ashr i32 %211, 31*/
		encode_upzeroexit_212 = ($signed(encode_upzeroexit_211) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %212 = ashr i32 %211, 31*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		encode_upzeroexit_212_reg <= encode_upzeroexit_212;
		if (start == 1'b0 && ^(encode_upzeroexit_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_212_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %213 = and i32 %212, -256*/
		encode_upzeroexit_213 = (encode_upzeroexit_212 & -32'd256);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %213 = and i32 %212, -256*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		encode_upzeroexit_213_reg <= encode_upzeroexit_213;
		if (start == 1'b0 && ^(encode_upzeroexit_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_213_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %214 = or i32 %213, 128*/
		encode_upzeroexit_214 = (encode_upzeroexit_213 | 32'd128);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %214 = or i32 %213, 128*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		encode_upzeroexit_214_reg <= encode_upzeroexit_214;
		if (start == 1'b0 && ^(encode_upzeroexit_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_214_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit_215 = encode_upzeroexit_215_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %215 = mul nsw i32 %149, 127*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		encode_upzeroexit_215_reg <= encode_upzeroexit_215;
		if (start == 1'b0 && ^(encode_upzeroexit_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_215_reg"); $finish; end
	end
	/* encode: %upzero.exit*/
	/*   %215 = mul nsw i32 %149, 127*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		encode_upzeroexit_215_reg <= encode_upzeroexit_215;
		if (start == 1'b0 && ^(encode_upzeroexit_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_215_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %216 = ashr i32 %215, 7*/
		encode_upzeroexit_216 = ($signed(encode_upzeroexit_215) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %216 = ashr i32 %215, 7*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		encode_upzeroexit_216_reg <= encode_upzeroexit_216;
		if (start == 1'b0 && ^(encode_upzeroexit_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_216_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %wd4.0.i = add nsw i32 %210, %216*/
		encode_upzeroexit_wd40i = (encode_upzeroexit_210 + encode_upzeroexit_216_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %wd4.0.i = add nsw i32 %210, %216*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		encode_upzeroexit_wd40i_reg <= encode_upzeroexit_wd40i;
		if (start == 1'b0 && ^(encode_upzeroexit_wd40i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_wd40i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %217 = add nsw i32 %wd4.0.i, %214*/
		encode_upzeroexit_217 = (encode_upzeroexit_wd40i_reg + encode_upzeroexit_214);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %217 = add nsw i32 %wd4.0.i, %214*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		encode_upzeroexit_217_reg <= encode_upzeroexit_217;
		if (start == 1'b0 && ^(encode_upzeroexit_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_217_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %218 = icmp sgt i32 %217, 12288*/
		encode_upzeroexit_218 = ($signed(encode_upzeroexit_217) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %218 = icmp sgt i32 %217, 12288*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		encode_upzeroexit_218_reg <= encode_upzeroexit_218;
		if (start == 1'b0 && ^(encode_upzeroexit_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_218_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %..i = select i1 %218, i32 12288, i32 %217*/
		encode_upzeroexit_i = (encode_upzeroexit_218 ? 32'd12288 : encode_upzeroexit_217);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %..i = select i1 %218, i32 12288, i32 %217*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		encode_upzeroexit_i_reg <= encode_upzeroexit_i;
		if (start == 1'b0 && ^(encode_upzeroexit_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %219 = icmp slt i32 %..i, -12288*/
		encode_upzeroexit_219 = ($signed(encode_upzeroexit_i) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %219 = icmp slt i32 %..i, -12288*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		encode_upzeroexit_219_reg <= encode_upzeroexit_219;
		if (start == 1'b0 && ^(encode_upzeroexit_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_219_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %...i = select i1 %219, i32 -12288, i32 %..i*/
		encode_upzeroexit_i_var0 = (encode_upzeroexit_219 ? -32'd12288 : encode_upzeroexit_i);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %...i = select i1 %219, i32 -12288, i32 %..i*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		encode_upzeroexit_i_var0_reg <= encode_upzeroexit_i_var0;
		if (start == 1'b0 && ^(encode_upzeroexit_i_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_i_var0_reg"); $finish; end
	end
end
always @(*) begin
	encode_upzeroexit_220 = encode_upzeroexit_220_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %220 = mul nsw i32 %147, 255*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		encode_upzeroexit_220_reg <= encode_upzeroexit_220;
		if (start == 1'b0 && ^(encode_upzeroexit_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_220_reg"); $finish; end
	end
	/* encode: %upzero.exit*/
	/*   %220 = mul nsw i32 %147, 255*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		encode_upzeroexit_220_reg <= encode_upzeroexit_220;
		if (start == 1'b0 && ^(encode_upzeroexit_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_220_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %221 = ashr i32 %220, 8*/
		encode_upzeroexit_221 = ($signed(encode_upzeroexit_220) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %221 = ashr i32 %220, 8*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		encode_upzeroexit_221_reg <= encode_upzeroexit_221;
		if (start == 1'b0 && ^(encode_upzeroexit_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_221_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %222 = ashr i32 %207, 31*/
		encode_upzeroexit_222 = ($signed(encode_upzeroexit_207) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %222 = ashr i32 %207, 31*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		encode_upzeroexit_222_reg <= encode_upzeroexit_222;
		if (start == 1'b0 && ^(encode_upzeroexit_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_222_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %223 = and i32 %222, -384*/
		encode_upzeroexit_223 = (encode_upzeroexit_222 & -32'd384);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %223 = and i32 %222, -384*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		encode_upzeroexit_223_reg <= encode_upzeroexit_223;
		if (start == 1'b0 && ^(encode_upzeroexit_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_223_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %224 = add nsw i32 %221, 192*/
		encode_upzeroexit_224 = (encode_upzeroexit_221 + 32'd192);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %224 = add nsw i32 %221, 192*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		encode_upzeroexit_224_reg <= encode_upzeroexit_224;
		if (start == 1'b0 && ^(encode_upzeroexit_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_224_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %apl1.0.i = add nsw i32 %224, %223*/
		encode_upzeroexit_apl10i = (encode_upzeroexit_224_reg + encode_upzeroexit_223);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %apl1.0.i = add nsw i32 %224, %223*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		encode_upzeroexit_apl10i_reg <= encode_upzeroexit_apl10i;
		if (start == 1'b0 && ^(encode_upzeroexit_apl10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_apl10i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %225 = sub nsw i32 15360, %...i*/
		encode_upzeroexit_225 = (32'd15360 - encode_upzeroexit_i_var0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %225 = sub nsw i32 15360, %...i*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		encode_upzeroexit_225_reg <= encode_upzeroexit_225;
		if (start == 1'b0 && ^(encode_upzeroexit_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_225_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %226 = icmp sgt i32 %apl1.0.i, %225*/
		encode_upzeroexit_226 = ($signed(encode_upzeroexit_apl10i_reg) > $signed(encode_upzeroexit_225_reg));
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %226 = icmp sgt i32 %apl1.0.i, %225*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		encode_upzeroexit_226_reg <= encode_upzeroexit_226;
		if (start == 1'b0 && ^(encode_upzeroexit_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_226_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %.apl1.0.i = select i1 %226, i32 %225, i32 %apl1.0.i*/
		encode_upzeroexit_apl10i_var1 = (encode_upzeroexit_226 ? encode_upzeroexit_225_reg : encode_upzeroexit_apl10i_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %.apl1.0.i = select i1 %226, i32 %225, i32 %apl1.0.i*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		encode_upzeroexit_apl10i_var1_reg <= encode_upzeroexit_apl10i_var1;
		if (start == 1'b0 && ^(encode_upzeroexit_apl10i_var1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_apl10i_var1_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %227 = sub nsw i32 0, %225*/
		encode_upzeroexit_227 = (32'd0 - encode_upzeroexit_225_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %227 = sub nsw i32 0, %225*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		encode_upzeroexit_227_reg <= encode_upzeroexit_227;
		if (start == 1'b0 && ^(encode_upzeroexit_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_227_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %228 = icmp slt i32 %.apl1.0.i, %227*/
		encode_upzeroexit_228 = ($signed(encode_upzeroexit_apl10i_var1) < $signed(encode_upzeroexit_227));
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %228 = icmp slt i32 %.apl1.0.i, %227*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		encode_upzeroexit_228_reg <= encode_upzeroexit_228;
		if (start == 1'b0 && ^(encode_upzeroexit_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_228_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %apl1.2.i = select i1 %228, i32 %227, i32 %.apl1.0.i*/
		encode_upzeroexit_apl12i = (encode_upzeroexit_228 ? encode_upzeroexit_227 : encode_upzeroexit_apl10i_var1);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %apl1.2.i = select i1 %228, i32 %227, i32 %.apl1.0.i*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		encode_upzeroexit_apl12i_reg <= encode_upzeroexit_apl12i;
		if (start == 1'b0 && ^(encode_upzeroexit_apl12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_apl12i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %229 = add nsw i32 %166, %153*/
		encode_upzeroexit_229 = (encode_filtezexit11_166_reg + encode_filtezexit11_153_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %229 = add nsw i32 %166, %153*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		encode_upzeroexit_229_reg <= encode_upzeroexit_229;
		if (start == 1'b0 && ^(encode_upzeroexit_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_229_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %230 = shl nsw i32 %., 6*/
		encode_upzeroexit_230 = (encode_filtezexit11__reg <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %230 = shl nsw i32 %., 6*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		encode_upzeroexit_230_reg <= encode_upzeroexit_230;
		if (start == 1'b0 && ^(encode_upzeroexit_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_230_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %upzero.exit*/
	/*   %231 = or i32 %230, %ril.0.i*/
		encode_upzeroexit_231 = (encode_upzeroexit_230 | encode_quantlexit_ril0i_reg);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %231 = or i32 %230, %ril.0.i*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		encode_upzeroexit_231_reg <= encode_upzeroexit_231;
		if (start == 1'b0 && ^(encode_upzeroexit_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_upzeroexit_231_reg"); $finish; end
	end
end
always @(*) begin
	decis_levl_address_a = 1'd0;
	/* encode: %61*/
	/*   %64 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__61_36)) begin
		decis_levl_address_a = (encode_61_scevgep18 >>> 3'd2);
	end
end
always @(*) begin
	decis_levl_write_enable_a = 1'd0;
	/* encode: %61*/
	/*   %64 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__61_36)) begin
		decis_levl_write_enable_a = 1'd0;
	end
end
always @(*) begin
	lpm_mult_encode_0_2_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %2 = mul nsw i32 %1, 12*/
	if ((lpm_mult_encode_0_2_en == 1'd1)) begin
		encode_0_2_stage0_reg <= (encode_0_1 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_encode_0_4_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %4 = mul nsw i32 %3, -44*/
	if ((lpm_mult_encode_0_4_en == 1'd1)) begin
		encode_0_4_stage0_reg <= (encode_0_3 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_encode_0_6_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %6 = mul nsw i32 %5, -44*/
	if ((lpm_mult_encode_0_6_en == 1'd1)) begin
		encode_0_6_stage0_reg <= (encode_0_5 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_encode_8_15_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %15 = mul nsw i32 %14, %13*/
	if ((lpm_mult_encode_8_15_en == 1'd1)) begin
		encode_8_15_stage0_reg <= (encode_8_14 * encode_8_13);
	end
end
always @(*) begin
	lpm_mult_encode_8_20_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %8*/
	/*   %20 = mul nsw i32 %19, %18*/
	if ((lpm_mult_encode_8_20_en == 1'd1)) begin
		encode_8_20_stage0_reg <= (encode_8_19 * encode_8_18);
	end
end
always @(*) begin
	lpm_mult_encode_29_32_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %29*/
	/*   %32 = mul nsw i32 %31, %30*/
	if ((lpm_mult_encode_29_32_en == 1'd1)) begin
		encode_29_32_stage0_reg <= (encode_29_31 * encode_29_30);
	end
end
always @(*) begin
	lpm_mult_encode_33_37_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %33*/
	/*   %37 = mul nsw i32 %36, %35*/
	if ((lpm_mult_encode_33_37_en == 1'd1)) begin
		encode_33_37_stage0_reg <= (encode_33_36 * encode_33_35);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit_39_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %39 = mul nsw i32 %23, 12*/
	if ((lpm_mult_encode_filtezexit_39_en == 1'd1)) begin
		encode_filtezexit_39_stage0_reg <= (encode_22_23_reg * 32'd12);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit_50_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %50 = mul i32 %47, %46*/
	if ((lpm_mult_encode_filtezexit_50_en == 1'd1)) begin
		encode_filtezexit_50_stage0_reg <= (encode_filtezexit_47 * encode_filtezexit_46);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit_51_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit*/
	/*   %51 = mul i32 %49, %48*/
	if ((lpm_mult_encode_filtezexit_51_en == 1'd1)) begin
		encode_filtezexit_51_stage0_reg <= (encode_filtezexit_49 * encode_filtezexit_48);
	end
end
always @(*) begin
	lpm_mult_encode_61_65_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %61*/
	/*   %65 = mul nsw i32 %64, %55*/
	if ((lpm_mult_encode_61_65_en == 1'd1)) begin
		encode_61_65_stage0_reg <= (encode_61_64 * encode_filtezexit_55_reg);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_74_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %74 = mul nsw i32 %73, 127*/
	if ((lpm_mult_encode_quantlexit_74_en == 1'd1)) begin
		encode_quantlexit_74_stage0_reg <= (encode_quantlexit_73 * 32'd127);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_71_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %71 = mul nsw i32 %70, %55*/
	if ((lpm_mult_encode_quantlexit_71_en == 1'd1)) begin
		encode_quantlexit_71_stage0_reg <= (encode_quantlexit_70 * encode_filtezexit_55_reg);
	end
end
always @(*) begin
	lpm_mult_encode_preheaderi21_92_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %.preheader.i21*/
	/*   %92 = mul nsw i32 %91, 255*/
	if ((lpm_mult_encode_preheaderi21_92_en == 1'd1)) begin
		encode_preheaderi21_92_stage0_reg <= (encode_preheaderi21_91_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_preheader1i24_99_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %99 = mul nsw i32 %97, %72*/
	if ((lpm_mult_encode_preheader1i24_99_en == 1'd1)) begin
		encode_preheader1i24_99_stage0_reg <= (encode_preheader1i24_97_reg * encode_quantlexit_72_reg);
	end
end
always @(*) begin
	lpm_mult_encode_preheader1i24_103_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i24*/
	/*   %103 = mul nsw i32 %96, 255*/
	if ((lpm_mult_encode_preheader1i24_103_en == 1'd1)) begin
		encode_preheader1i24_103_stage0_reg <= (encode_preheader1i24_96_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit25_121_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %121 = mul nsw i32 %49, 127*/
	if ((lpm_mult_encode_upzeroexit25_121_en == 1'd1)) begin
		encode_upzeroexit25_121_stage0_reg <= (encode_filtezexit_49_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit25_126_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %126 = mul nsw i32 %47, 255*/
	if ((lpm_mult_encode_upzeroexit25_126_en == 1'd1)) begin
		encode_upzeroexit25_126_stage0_reg <= (encode_filtezexit_47_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit25_113_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %113 = mul nsw i32 %110, %89*/
	if ((lpm_mult_encode_upzeroexit25_113_en == 1'd1)) begin
		encode_upzeroexit25_113_stage0_reg <= (encode_upzeroexit25_110 * encode_quantlexit_89_reg);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit25_117_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %117 = mul nsw i32 %111, %89*/
	if ((lpm_mult_encode_upzeroexit25_117_en == 1'd1)) begin
		encode_upzeroexit25_117_stage0_reg <= (encode_upzeroexit25_111 * encode_quantlexit_89_reg);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit25_138_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit25*/
	/*   %138 = mul nsw i32 %137, %136*/
	if ((lpm_mult_encode_upzeroexit25_138_en == 1'd1)) begin
		encode_upzeroexit25_138_stage0_reg <= (encode_upzeroexit25_137 * encode_upzeroexit25_136);
	end
end
always @(*) begin
	lpm_mult_encode_139_143_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %139*/
	/*   %143 = mul nsw i32 %142, %141*/
	if ((lpm_mult_encode_139_143_en == 1'd1)) begin
		encode_139_143_stage0_reg <= (encode_139_142 * encode_139_141);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit11_150_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %150 = mul i32 %147, %146*/
	if ((lpm_mult_encode_filtezexit11_150_en == 1'd1)) begin
		encode_filtezexit11_150_stage0_reg <= (encode_filtezexit11_147 * encode_filtezexit11_146);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit11_151_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %151 = mul i32 %149, %148*/
	if ((lpm_mult_encode_filtezexit11_151_en == 1'd1)) begin
		encode_filtezexit11_151_stage0_reg <= (encode_filtezexit11_149 * encode_filtezexit11_148);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit11_158_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %158 = mul nsw i32 %157, 564*/
	if ((lpm_mult_encode_filtezexit11_158_en == 1'd1)) begin
		encode_filtezexit11_158_stage0_reg <= (encode_filtezexit11_157 * 32'd564);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit11_168_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %168 = mul nsw i32 %167, 127*/
	if ((lpm_mult_encode_filtezexit11_168_en == 1'd1)) begin
		encode_filtezexit11_168_stage0_reg <= (encode_filtezexit11_167 * 32'd127);
	end
end
always @(*) begin
	lpm_mult_encode_filtezexit11_165_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %filtez.exit11*/
	/*   %165 = mul nsw i32 %164, %157*/
	if ((lpm_mult_encode_filtezexit11_165_en == 1'd1)) begin
		encode_filtezexit11_165_stage0_reg <= (encode_filtezexit11_164 * encode_filtezexit11_157_reg);
	end
end
always @(*) begin
	lpm_mult_encode_preheaderi_186_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %.preheader.i*/
	/*   %186 = mul nsw i32 %185, 255*/
	if ((lpm_mult_encode_preheaderi_186_en == 1'd1)) begin
		encode_preheaderi_186_stage0_reg <= (encode_preheaderi_185_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_preheader1i_193_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %193 = mul nsw i32 %191, %166*/
	if ((lpm_mult_encode_preheader1i_193_en == 1'd1)) begin
		encode_preheader1i_193_stage0_reg <= (encode_preheader1i_191_reg * encode_filtezexit11_166_reg);
	end
end
always @(*) begin
	lpm_mult_encode_preheader1i_197_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %.preheader1.i*/
	/*   %197 = mul nsw i32 %190, 255*/
	if ((lpm_mult_encode_preheader1i_197_en == 1'd1)) begin
		encode_preheader1i_197_stage0_reg <= (encode_preheader1i_190_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit_215_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %215 = mul nsw i32 %149, 127*/
	if ((lpm_mult_encode_upzeroexit_215_en == 1'd1)) begin
		encode_upzeroexit_215_stage0_reg <= (encode_filtezexit11_149_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit_220_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %220 = mul nsw i32 %147, 255*/
	if ((lpm_mult_encode_upzeroexit_220_en == 1'd1)) begin
		encode_upzeroexit_220_stage0_reg <= (encode_filtezexit11_147_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit_207_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %207 = mul nsw i32 %204, %183*/
	if ((lpm_mult_encode_upzeroexit_207_en == 1'd1)) begin
		encode_upzeroexit_207_stage0_reg <= (encode_upzeroexit_204 * encode_filtezexit11_183_reg);
	end
end
always @(*) begin
	lpm_mult_encode_upzeroexit_211_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* encode: %upzero.exit*/
	/*   %211 = mul nsw i32 %205, %183*/
	if ((lpm_mult_encode_upzeroexit_211_en == 1'd1)) begin
		encode_upzeroexit_211_stage0_reg <= (encode_upzeroexit_205 * encode_filtezexit11_183_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* encode: %upzero.exit*/
	/*   ret i32 %231*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %5 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %8*/
	/*   %13 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %8*/
	/*   %18 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %22*/
	/*   %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__22_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %24*/
	/*   %27 = load i32* %tqmf_ptr1.039, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__24_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %29*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %29*/
	/*   %30 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %33*/
	/*   %35 = load i32* %.017.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__33_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit*/
	/*   %46 = load i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit*/
	/*   %48 = load i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit*/
	/*   %55 = load i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %73 = load i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %ril.0.i = load i32* %ril.0.in.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %ril.0.i, i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i27, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_46)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %.preheader.i21*/
	/*   store i32 %93, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21_52)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.pre59 = load i32* %.phi.trans.insert58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   %107 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_66)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   %109 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %72, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   %111 = load i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_69)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   %136 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_70)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %107, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %109, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %apl1.2.i14, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %110, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_74)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %139*/
	/*   %141 = load i32* %.017.i9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__139_77)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit11*/
	/*   %146 = load i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_81)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit11*/
	/*   %148 = load i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_82)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit11*/
	/*   %157 = load i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_83)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit11*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_87)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit11*/
	/*   store i32 %...i3, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit11*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_90)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %filtez.exit11*/
	/*   store i32 %182, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_92)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %.preheader.i..preheader.i_crit_edge*/
	/*   %.pre53 = load i32* %.phi.trans.insert52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_100)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %.preheader1.i*/
	/*   store i32 %199, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.pre55 = load i32* %.phi.trans.insert54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %201 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %203 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %166, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_113)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %205 = load i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_114)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %201, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_115)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %...i, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %204, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_tqmf_a;
	end
	/* encode: %0*/
	/*   %5 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_2)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd2));
	end
	/* encode: %8*/
	/*   %13 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_7)) begin
		memory_controller_address_a = encode_8_scevgep28;
	end
	/* encode: %8*/
	/*   %18 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_8)) begin
		memory_controller_address_a = encode_8_scevgep29_reg;
	end
	/* encode: %22*/
	/*   %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__22_12)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd23));
	end
	/* encode: %24*/
	/*   %27 = load i32* %tqmf_ptr1.039, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__24_16)) begin
		memory_controller_address_a = encode_24_tqmf_ptr1039;
	end
	/* encode: %29*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_20)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd1));
	end
	/* encode: %29*/
	/*   %30 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_21)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* encode: %33*/
	/*   %35 = load i32* %.017.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__33_26)) begin
		memory_controller_address_a = encode_33_017i;
	end
	/* encode: %filtez.exit*/
	/*   %46 = load i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_address_a = `TAG_g_rlt1_a;
	end
	/* encode: %filtez.exit*/
	/*   %48 = load i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_address_a = `TAG_g_rlt2_a;
	end
	/* encode: %filtez.exit*/
	/*   %55 = load i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		memory_controller_address_a = `TAG_g_detl_a;
	end
	/* encode: %quantl.exit*/
	/*   %73 = load i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_39)) begin
		memory_controller_address_a = `TAG_g_nbl_a;
	end
	/* encode: %quantl.exit*/
	/*   %ril.0.i = load i32* %ril.0.in.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		memory_controller_address_a = encode_quantlexit_ril0ini;
	end
	/* encode: %quantl.exit*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_address_a = encode_quantlexit_69;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %ril.0.i, i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_43)) begin
		memory_controller_address_a = `TAG_g_il_a;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i27, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_46)) begin
		memory_controller_address_a = `TAG_g_nbl_a;
	end
	/* encode: %.preheader.i21*/
	/*   store i32 %93, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21_52)) begin
		memory_controller_address_a = encode_preheaderi21_scevgep13_reg;
	end
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.pre59 = load i32* %.phi.trans.insert58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61)) begin
		memory_controller_address_a = encode_preheader1i24preheader1i24_crit_edge_phitransinsert58;
	end
	/* encode: %upzero.exit25*/
	/*   %107 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_66)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd4));
	end
	/* encode: %upzero.exit25*/
	/*   %109 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd2));
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %72, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_68)) begin
		memory_controller_address_a = `TAG_g_delay_dltx_a;
	end
	/* encode: %upzero.exit25*/
	/*   %111 = load i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_69)) begin
		memory_controller_address_a = `TAG_g_plt2_a;
	end
	/* encode: %upzero.exit25*/
	/*   %136 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_70)) begin
		memory_controller_address_a = `TAG_g_delay_bph_a;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %107, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd5));
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %109, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd3));
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %apl1.2.i14, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		memory_controller_address_a = `TAG_g_al1_a;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %110, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_74)) begin
		memory_controller_address_a = `TAG_g_plt2_a;
	end
	/* encode: %139*/
	/*   %141 = load i32* %.017.i9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__139_77)) begin
		memory_controller_address_a = encode_139_017i9;
	end
	/* encode: %filtez.exit11*/
	/*   %146 = load i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_81)) begin
		memory_controller_address_a = `TAG_g_rh1_a;
	end
	/* encode: %filtez.exit11*/
	/*   %148 = load i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_82)) begin
		memory_controller_address_a = `TAG_g_rh2_a;
	end
	/* encode: %filtez.exit11*/
	/*   %157 = load i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_83)) begin
		memory_controller_address_a = `TAG_g_deth_a;
	end
	/* encode: %filtez.exit11*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_87)) begin
		memory_controller_address_a = encode_filtezexit11_163;
	end
	/* encode: %filtez.exit11*/
	/*   store i32 %...i3, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		memory_controller_address_a = `TAG_g_nbh_a;
	end
	/* encode: %filtez.exit11*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_90)) begin
		memory_controller_address_a = encode_filtezexit11_178;
	end
	/* encode: %filtez.exit11*/
	/*   store i32 %182, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_92)) begin
		memory_controller_address_a = `TAG_g_deth_a;
	end
	/* encode: %.preheader.i..preheader.i_crit_edge*/
	/*   %.pre53 = load i32* %.phi.trans.insert52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_100)) begin
		memory_controller_address_a = encode_preheaderipreheaderi_crit_edge_phitransinsert52;
	end
	/* encode: %.preheader1.i*/
	/*   store i32 %199, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		memory_controller_address_a = encode_preheader1i_scevgep7_reg;
	end
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.pre55 = load i32* %.phi.trans.insert54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106)) begin
		memory_controller_address_a = encode_preheader1ipreheader1i_crit_edge_phitransinsert54;
	end
	/* encode: %upzero.exit*/
	/*   %201 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		memory_controller_address_a = (`TAG_g_delay_dhx_a | (4 * 32'd4));
	end
	/* encode: %upzero.exit*/
	/*   %203 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		memory_controller_address_a = (`TAG_g_delay_dhx_a | (4 * 32'd2));
	end
	/* encode: %upzero.exit*/
	/*   store i32 %166, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_113)) begin
		memory_controller_address_a = `TAG_g_delay_dhx_a;
	end
	/* encode: %upzero.exit*/
	/*   %205 = load i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_114)) begin
		memory_controller_address_a = `TAG_g_ph2_a;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %201, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_115)) begin
		memory_controller_address_a = (`TAG_g_delay_dhx_a | (4 * 32'd5));
	end
	/* encode: %upzero.exit*/
	/*   store i32 %...i, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		memory_controller_address_a = `TAG_g_ah2_a;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_address_a = `TAG_g_ah1_a;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %204, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_address_a = `TAG_g_ph2_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %5 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %8*/
	/*   %13 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %8*/
	/*   %18 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %22*/
	/*   %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__22_12)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %24*/
	/*   %27 = load i32* %tqmf_ptr1.039, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__24_16)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %29*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %29*/
	/*   %30 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %33*/
	/*   %35 = load i32* %.017.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__33_26)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit*/
	/*   %46 = load i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit*/
	/*   %48 = load i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit*/
	/*   %55 = load i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %73 = load i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_39)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %ril.0.i = load i32* %ril.0.in.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %ril.0.i, i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_43)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i27, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_46)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %.preheader.i21*/
	/*   store i32 %93, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21_52)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.pre59 = load i32* %.phi.trans.insert58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit25*/
	/*   %107 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_66)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit25*/
	/*   %109 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %72, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_68)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   %111 = load i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_69)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit25*/
	/*   %136 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_70)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %107, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %109, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %apl1.2.i14, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %110, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_74)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %139*/
	/*   %141 = load i32* %.017.i9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__139_77)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit11*/
	/*   %146 = load i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_81)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit11*/
	/*   %148 = load i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_82)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit11*/
	/*   %157 = load i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_83)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit11*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_87)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit11*/
	/*   store i32 %...i3, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %filtez.exit11*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_90)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %filtez.exit11*/
	/*   store i32 %182, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_92)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %.preheader.i..preheader.i_crit_edge*/
	/*   %.pre53 = load i32* %.phi.trans.insert52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_100)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %.preheader1.i*/
	/*   store i32 %199, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.pre55 = load i32* %.phi.trans.insert54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   %201 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   %203 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %166, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_113)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %205 = load i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_114)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %201, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_115)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %...i, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %204, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* encode: %29*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_20)) begin
		memory_controller_in_a = arg_xin1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %ril.0.i, i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_43)) begin
		memory_controller_in_a = encode_quantlexit_ril0i_reg;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i27, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_46)) begin
		memory_controller_in_a = encode_quantlexit_i27_reg;
	end
	/* encode: %.preheader.i21*/
	/*   store i32 %93, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21_52)) begin
		memory_controller_in_a = encode_preheaderi21_93;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %72, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_68)) begin
		memory_controller_in_a = encode_quantlexit_72_reg;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %107, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		memory_controller_in_a = encode_upzeroexit25_107_reg;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %109, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		memory_controller_in_a = encode_upzeroexit25_109_reg;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %apl1.2.i14, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		memory_controller_in_a = encode_upzeroexit25_apl12i14;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %110, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_74)) begin
		memory_controller_in_a = encode_upzeroexit25_110_reg;
	end
	/* encode: %filtez.exit11*/
	/*   store i32 %...i3, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		memory_controller_in_a = encode_filtezexit11_i3;
	end
	/* encode: %filtez.exit11*/
	/*   store i32 %182, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_92)) begin
		memory_controller_in_a = encode_filtezexit11_182;
	end
	/* encode: %.preheader1.i*/
	/*   store i32 %199, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		memory_controller_in_a = encode_preheader1i_199;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %166, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_113)) begin
		memory_controller_in_a = encode_filtezexit11_166_reg;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %201, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_115)) begin
		memory_controller_in_a = encode_upzeroexit_201_reg;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %...i, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		memory_controller_in_a = encode_upzeroexit_i_var0;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_in_a = encode_upzeroexit_apl12i;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %204, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_in_a = encode_upzeroexit_204_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %5 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %8*/
	/*   %13 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %8*/
	/*   %18 = load i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %22*/
	/*   %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__22_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %24*/
	/*   %27 = load i32* %tqmf_ptr1.039, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__24_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %29*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %29*/
	/*   %30 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %33*/
	/*   %35 = load i32* %.017.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__33_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit*/
	/*   %46 = load i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit*/
	/*   %48 = load i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit*/
	/*   %55 = load i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %73 = load i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %ril.0.i = load i32* %ril.0.in.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %ril.0.i, i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i27, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_46)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %.preheader.i21*/
	/*   store i32 %93, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21_52)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.pre59 = load i32* %.phi.trans.insert58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   %107 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_66)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   %109 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %72, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_68)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   %111 = load i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_69)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   %136 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_70)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %107, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %109, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %apl1.2.i14, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %110, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_74)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %139*/
	/*   %141 = load i32* %.017.i9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__139_77)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit11*/
	/*   %146 = load i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_81)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit11*/
	/*   %148 = load i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_82)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit11*/
	/*   %157 = load i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_83)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit11*/
	/*   %164 = load i32* %163, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_87)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit11*/
	/*   store i32 %...i3, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_89)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit11*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_90)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %filtez.exit11*/
	/*   store i32 %182, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_92)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %.preheader.i..preheader.i_crit_edge*/
	/*   %.pre53 = load i32* %.phi.trans.insert52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderipreheaderi_crit_edge_100)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %.preheader1.i*/
	/*   store i32 %199, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i_104)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.pre55 = load i32* %.phi.trans.insert54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   %201 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   %203 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %166, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_113)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   %205 = load i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_114)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %201, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_115)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %...i, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_117)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %204, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %8*/
	/*   %14 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %8*/
	/*   %19 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %24*/
	/*   store i32 %27, i32* %tqmf_ptr.137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__24_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %29*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %29*/
	/*   %31 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %33*/
	/*   %36 = load i32* %.06.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__33_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %filtez.exit*/
	/*   %47 = load i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %filtez.exit*/
	/*   %49 = load i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %88, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %.preheader.i21..preheader.i21_crit_edge*/
	/*   %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_55)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %.preheader1.i24*/
	/*   store i32 %105, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.pre61 = load i32* %.phi.trans.insert60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   %108 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_66)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %31, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   %110 = load i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_68)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %46, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_69)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   %137 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_70)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %108, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %...i18, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %135, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %89, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_74)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %139*/
	/*   %142 = load i32* %.06.i8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__139_77)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %filtez.exit11*/
	/*   %147 = load i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_81)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %filtez.exit11*/
	/*   %149 = load i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_82)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %filtez.exit11*/
	/*   %167 = load i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_83)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %filtez.exit11*/
	/*   %171 = load i32* %170, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_87)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %.preheader.i*/
	/*   store i32 %187, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi_97)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.pre57 = load i32* %.phi.trans.insert56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %202 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %137, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %204 = load i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_113)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %146, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_114)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %202, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_115)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %203, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %229, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %183, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd1));
	end
	/* encode: %8*/
	/*   %14 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_7)) begin
		memory_controller_address_b = encode_8_scevgep27;
	end
	/* encode: %8*/
	/*   %19 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_8)) begin
		memory_controller_address_b = encode_8_scevgep30_reg;
	end
	/* encode: %24*/
	/*   store i32 %27, i32* %tqmf_ptr.137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__24_18)) begin
		memory_controller_address_b = encode_24_tqmf_ptr137_reg;
	end
	/* encode: %29*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_20)) begin
		memory_controller_address_b = `TAG_g_tqmf_a;
	end
	/* encode: %29*/
	/*   %31 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_21)) begin
		memory_controller_address_b = `TAG_g_delay_dltx_a;
	end
	/* encode: %33*/
	/*   %36 = load i32* %.06.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__33_26)) begin
		memory_controller_address_b = encode_33_06i;
	end
	/* encode: %filtez.exit*/
	/*   %47 = load i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_address_b = `TAG_g_al1_a;
	end
	/* encode: %filtez.exit*/
	/*   %49 = load i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_address_b = `TAG_g_al2_a;
	end
	/* encode: %quantl.exit*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_address_b = encode_quantlexit_76;
	end
	/* encode: %quantl.exit*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		memory_controller_address_b = encode_quantlexit_84;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %88, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		memory_controller_address_b = `TAG_g_detl_a;
	end
	/* encode: %.preheader.i21..preheader.i21_crit_edge*/
	/*   %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_55)) begin
		memory_controller_address_b = encode_preheaderi21preheaderi21_crit_edge_phitransinsert;
	end
	/* encode: %.preheader1.i24*/
	/*   store i32 %105, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		memory_controller_address_b = encode_preheader1i24_scevgep17_reg;
	end
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.pre61 = load i32* %.phi.trans.insert60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61)) begin
		memory_controller_address_b = encode_preheader1i24preheader1i24_crit_edge_phitransinsert60;
	end
	/* encode: %upzero.exit25*/
	/*   %108 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_66)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd3));
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %31, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd1));
	end
	/* encode: %upzero.exit25*/
	/*   %110 = load i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_68)) begin
		memory_controller_address_b = `TAG_g_plt1_a;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %46, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_69)) begin
		memory_controller_address_b = `TAG_g_rlt2_a;
	end
	/* encode: %upzero.exit25*/
	/*   %137 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_70)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %108, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd4));
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %...i18, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		memory_controller_address_b = `TAG_g_al2_a;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %135, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		memory_controller_address_b = `TAG_g_rlt1_a;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %89, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_74)) begin
		memory_controller_address_b = `TAG_g_plt1_a;
	end
	/* encode: %139*/
	/*   %142 = load i32* %.06.i8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__139_77)) begin
		memory_controller_address_b = encode_139_06i8;
	end
	/* encode: %filtez.exit11*/
	/*   %147 = load i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_81)) begin
		memory_controller_address_b = `TAG_g_ah1_a;
	end
	/* encode: %filtez.exit11*/
	/*   %149 = load i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_82)) begin
		memory_controller_address_b = `TAG_g_ah2_a;
	end
	/* encode: %filtez.exit11*/
	/*   %167 = load i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_83)) begin
		memory_controller_address_b = `TAG_g_nbh_a;
	end
	/* encode: %filtez.exit11*/
	/*   %171 = load i32* %170, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_87)) begin
		memory_controller_address_b = encode_filtezexit11_170;
	end
	/* encode: %.preheader.i*/
	/*   store i32 %187, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi_97)) begin
		memory_controller_address_b = encode_preheaderi_scevgep_reg;
	end
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.pre57 = load i32* %.phi.trans.insert56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106)) begin
		memory_controller_address_b = encode_preheader1ipreheader1i_crit_edge_phitransinsert56;
	end
	/* encode: %upzero.exit*/
	/*   %202 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd3));
	end
	/* encode: %upzero.exit*/
	/*   store i32 %137, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd1));
	end
	/* encode: %upzero.exit*/
	/*   %204 = load i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_113)) begin
		memory_controller_address_b = `TAG_g_ph1_a;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %146, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_114)) begin
		memory_controller_address_b = `TAG_g_rh2_a;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %202, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_115)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd4));
	end
	/* encode: %upzero.exit*/
	/*   store i32 %203, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd3));
	end
	/* encode: %upzero.exit*/
	/*   store i32 %229, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_address_b = `TAG_g_rh1_a;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %183, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_address_b = `TAG_g_ph1_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %8*/
	/*   %14 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %8*/
	/*   %19 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %24*/
	/*   store i32 %27, i32* %tqmf_ptr.137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__24_18)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %29*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_20)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %29*/
	/*   %31 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %33*/
	/*   %36 = load i32* %.06.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__33_26)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %filtez.exit*/
	/*   %47 = load i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %filtez.exit*/
	/*   %49 = load i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %88, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %.preheader.i21..preheader.i21_crit_edge*/
	/*   %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_55)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %.preheader1.i24*/
	/*   store i32 %105, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.pre61 = load i32* %.phi.trans.insert60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit25*/
	/*   %108 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_66)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %31, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   %110 = load i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_68)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %46, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_69)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   %137 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_70)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %108, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %...i18, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %135, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %89, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_74)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %139*/
	/*   %142 = load i32* %.06.i8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__139_77)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %filtez.exit11*/
	/*   %147 = load i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_81)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %filtez.exit11*/
	/*   %149 = load i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_82)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %filtez.exit11*/
	/*   %167 = load i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_83)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %filtez.exit11*/
	/*   %171 = load i32* %170, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_87)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %.preheader.i*/
	/*   store i32 %187, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi_97)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.pre57 = load i32* %.phi.trans.insert56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   %202 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %137, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   %204 = load i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_113)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %146, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_114)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %202, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_115)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %203, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %229, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %183, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* encode: %24*/
	/*   store i32 %27, i32* %tqmf_ptr.137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__24_18)) begin
		memory_controller_in_b = encode_24_27;
	end
	/* encode: %29*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_20)) begin
		memory_controller_in_b = arg_xin2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %88, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		memory_controller_in_b = encode_quantlexit_88;
	end
	/* encode: %.preheader1.i24*/
	/*   store i32 %105, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		memory_controller_in_b = encode_preheader1i24_105;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %31, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		memory_controller_in_b = encode_29_31_reg;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %46, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_69)) begin
		memory_controller_in_b = encode_filtezexit_46_reg;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %108, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		memory_controller_in_b = encode_upzeroexit25_108_reg;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %...i18, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		memory_controller_in_b = encode_upzeroexit25_i18;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %135, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		memory_controller_in_b = encode_upzeroexit25_135_reg;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %89, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_74)) begin
		memory_controller_in_b = encode_quantlexit_89_reg;
	end
	/* encode: %.preheader.i*/
	/*   store i32 %187, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi_97)) begin
		memory_controller_in_b = encode_preheaderi_187;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %137, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		memory_controller_in_b = encode_upzeroexit25_137_reg;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %146, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_114)) begin
		memory_controller_in_b = encode_filtezexit11_146_reg;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %202, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_115)) begin
		memory_controller_in_b = encode_upzeroexit_202_reg;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %203, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		memory_controller_in_b = encode_upzeroexit_203_reg;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %229, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_in_b = encode_upzeroexit_229_reg;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %183, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_in_b = encode_filtezexit11_183_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %8*/
	/*   %14 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %8*/
	/*   %19 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__8_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %24*/
	/*   store i32 %27, i32* %tqmf_ptr.137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__24_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %29*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %29*/
	/*   %31 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__29_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %33*/
	/*   %36 = load i32* %.06.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__33_26)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %filtez.exit*/
	/*   %47 = load i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %filtez.exit*/
	/*   %49 = load i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %85 = load i32* %84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %88, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %.preheader.i21..preheader.i21_crit_edge*/
	/*   %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi21preheaderi21_crit_edge_55)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %.preheader1.i24*/
	/*   store i32 %105, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24_59)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %.preheader1.i24..preheader1.i24_crit_edge*/
	/*   %.pre61 = load i32* %.phi.trans.insert60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1i24preheader1i24_crit_edge_61)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   %108 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_66)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %31, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_67)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   %110 = load i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_68)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %46, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_69)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   %137 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_70)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %108, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_71)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %...i18, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_72)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %135, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_73)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit25*/
	/*   store i32 %89, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit25_74)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %139*/
	/*   %142 = load i32* %.06.i8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__139_77)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %filtez.exit11*/
	/*   %147 = load i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_81)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %filtez.exit11*/
	/*   %149 = load i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_82)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %filtez.exit11*/
	/*   %167 = load i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_83)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %filtez.exit11*/
	/*   %171 = load i32* %170, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_filtezexit11_87)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %.preheader.i*/
	/*   store i32 %187, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheaderi_97)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %.preheader1.i..preheader1.i_crit_edge*/
	/*   %.pre57 = load i32* %.phi.trans.insert56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_preheader1ipreheader1i_crit_edge_106)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   %202 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_111)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %137, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_112)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   %204 = load i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_113)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %146, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_114)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %202, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_115)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %203, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_116)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %229, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_118)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %upzero.exit*/
	/*   store i32 %183, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_119)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* encode: %upzero.exit*/
	/*   ret i32 %231*/
	if ((cur_state == LEGUP_F_encode_BB_upzeroexit_120)) begin
		return_val <= encode_upzeroexit_231_reg;
		if (start == 1'b0 && ^(encode_upzeroexit_231_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__0_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__0_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__0_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__0_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__0_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__0_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__0_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__1_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__1_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB_preheader2iipreheader_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB_preheader2ii_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB_preheader2ii_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB_preheader1iipreheader_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB_preheader1ii_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB_preheader1ii_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB_preheaderiipreheader_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB_preheaderii_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB_preheaderii_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB_resetexitipreheader_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB_resetexiti_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB_resetexiti_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB_resetexiti_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB_resetexiti_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB_resetexiti_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB_resetexiti_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB_resetexiti_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB_resetexiti_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB_resetexiti_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB_resetexiti_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB_resetexiti_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB_resetexiti_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB_resetexiti_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB_resetexiti_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB_resetexiti_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB_resetexiti_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB_resetexiti_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB_resetexiti_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB_resetexiti_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB_resetexiti_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB_resetexiti_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB_resetexiti_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB_resetexiti_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB_resetexiti_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB_resetexiti_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB_resetexiti_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB_resetexiti_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB_resetexiti_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB_resetexiti_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB_resetexiti_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB_resetexiti_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB_resetexiti_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB_resetexiti_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB_resetexiti_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB_resetexiti_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB_resetexiti_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB_resetexiti_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB_resetexiti_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB_resetexiti_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB_preheaderi_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB_preheaderi_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB_preheaderi_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB_preheaderi_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB_preheaderi_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB__30_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB__30_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB__30_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB__30_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB__30_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB__30_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB__30_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__30_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB__30_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB__30_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB__30_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB__30_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB__30_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB__30_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB__30_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB__30_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB__30_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB__30_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB__30_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB__30_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB__30_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB__30_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB__30_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB__30_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB__30_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB__30_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB__30_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB__30_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB__30_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB__30_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB__30_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB__30_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB__30_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB__30_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB__38_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB__38_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB__38_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB__38_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB_filtezexitii_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB_filtezexitii_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB_filtezexitii_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB_filtezexitii_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB_filtezexitii_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB_filtezexitii_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB_preheader1i24iipreheader_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB_preheaderi21iipreheader_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB_preheaderi21ii_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB_preheaderi21ii_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB_preheaderi21ii_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB_preheader1i24ii_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB_preheader1i24ii_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB_preheader1i24ii_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB_upzeroexit25iiloopexit_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB_upzeroexit25iiloopexit2_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB_upzeroexit25ii_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB_upzeroexit25ii_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB_upzeroexit25ii_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB_upzeroexit25ii_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB_upzeroexit25ii_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB__119_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB__119_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB__119_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB__119_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB_filtezexit11ii_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB_filtezexit11ii_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB_filtezexit11ii_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB_filtezexit11ii_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB_filtezexit11ii_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB_filtezexit11ii_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB_preheader1iiipreheader_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB_preheaderiiipreheader_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB_preheaderiii_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB_preheaderiii_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB_preheaderiii_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB_preheader1iii_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB_preheader1iii_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB_preheader1iii_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB_upzeroexitiiloopexit_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB_upzeroexitiiloopexit1_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB_upzeroexitii_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB_upzeroexitii_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB_upzeroexitii_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB_upzeroexitii_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB_upzeroexitii_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB__197_164 = 8'd164;
parameter [7:0] LEGUP_F_main_BB__197_165 = 8'd165;
parameter [7:0] LEGUP_F_main_BB__197_166 = 8'd166;
parameter [7:0] LEGUP_F_main_BB__197_167 = 8'd167;
parameter [7:0] LEGUP_F_main_BB__197_168 = 8'd168;
parameter [7:0] LEGUP_F_main_BB__210_169 = 8'd169;
parameter [7:0] LEGUP_F_main_BB__210_170 = 8'd170;
parameter [7:0] LEGUP_F_main_BB__215_171 = 8'd171;
parameter [7:0] LEGUP_F_main_BB__215_172 = 8'd172;
parameter [7:0] LEGUP_F_main_BB__215_173 = 8'd173;
parameter [7:0] LEGUP_F_main_BB__215_174 = 8'd174;
parameter [7:0] LEGUP_F_main_BB_decodeexiti_175 = 8'd175;
parameter [7:0] LEGUP_F_main_BB_decodeexiti_176 = 8'd176;
parameter [7:0] LEGUP_F_main_BB_decodeexiti_177 = 8'd177;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexitpreheader_178 = 8'd178;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_179 = 8'd179;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_180 = 8'd180;
parameter [7:0] LEGUP_F_main_BB_preheaderpreheader_181 = 8'd181;
parameter [7:0] LEGUP_F_main_BB_preheader_182 = 8'd182;
parameter [7:0] LEGUP_F_main_BB_preheader_183 = 8'd183;
parameter [7:0] LEGUP_F_main_BB__239_184 = 8'd184;
parameter [7:0] LEGUP_F_main_BB__242_185 = 8'd185;
parameter [7:0] LEGUP_F_main_BB__244_186 = 8'd186;
parameter [7:0] LEGUP_F_main_BB__246_187 = 8'd187;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_25 = 8'd25;
parameter [7:0] LEGUP_function_call_58 = 8'd58;
parameter [7:0] LEGUP_function_call_61 = 8'd61;
parameter [7:0] LEGUP_function_call_65 = 8'd65;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_1_i06ii;
reg [31:0] main_1_i06ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep67_reg;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg  main_1_exitcond63;
reg  main_1_exitcond63_reg;
reg [31:0] main_preheader2ii_i15ii;
reg [31:0] main_preheader2ii_i15ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2ii_scevgep59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2ii_scevgep59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2ii_scevgep60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2ii_scevgep60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2ii_scevgep61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2ii_scevgep61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2ii_scevgep62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2ii_scevgep62_reg;
reg [31:0] main_preheader2ii_3;
reg [31:0] main_preheader2ii_3_reg;
reg  main_preheader2ii_exitcond58;
reg  main_preheader2ii_exitcond58_reg;
reg [31:0] main_preheader1ii_i24ii;
reg [31:0] main_preheader1ii_i24ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1ii_scevgep57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1ii_scevgep57_reg;
reg [31:0] main_preheader1ii_4;
reg [31:0] main_preheader1ii_4_reg;
reg  main_preheader1ii_exitcond56;
reg  main_preheader1ii_exitcond56_reg;
reg [31:0] main_preheaderii_i33ii;
reg [31:0] main_preheaderii_i33ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderii_scevgep55_reg;
reg [31:0] main_preheaderii_5;
reg [31:0] main_preheaderii_5_reg;
reg  main_preheaderii_exitcond53;
reg  main_preheaderii_exitcond53_reg;
reg [31:0] main_resetexiti_indvar44;
reg [31:0] main_resetexiti_indvar44_reg;
reg [31:0] main_resetexiti_i105i;
reg [31:0] main_resetexiti_i105i_reg;
reg [31:0] main_resetexiti_6;
reg [31:0] main_resetexiti_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_scevgep47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_scevgep47_reg;
reg [31:0] main_resetexiti_7;
reg [31:0] main_resetexiti_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_scevgep48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_scevgep48_reg;
reg [31:0] main_resetexiti_8;
reg [31:0] main_resetexiti_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_scevgep49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_scevgep49_reg;
reg [31:0] main_resetexiti_9;
reg [31:0] main_resetexiti_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_scevgep50_reg;
reg [31:0] main_resetexiti_10;
reg [31:0] main_resetexiti_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_scevgep51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_scevgep51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_scevgep52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_scevgep52_reg;
reg [31:0] main_resetexiti_11;
reg [31:0] main_resetexiti_11_reg;
reg [31:0] main_resetexiti_12;
reg [31:0] main_resetexiti_12_reg;
reg [31:0] main_resetexiti_13;
reg [31:0] main_resetexiti_13_reg;
reg [31:0] main_resetexiti_14;
reg [31:0] main_resetexiti_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_15_reg;
reg [31:0] main_resetexiti_16;
reg [31:0] main_resetexiti_16_reg;
reg [31:0] main_resetexiti_17;
reg [31:0] main_resetexiti_17_reg;
reg [31:0] main_resetexiti_18;
reg [31:0] main_resetexiti_18_reg;
reg [31:0] main_resetexiti_19;
reg [31:0] main_resetexiti_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_20_reg;
reg [31:0] main_resetexiti_21;
reg [31:0] main_resetexiti_21_reg;
reg [31:0] main_resetexiti_22;
reg [31:0] main_resetexiti_22_reg;
reg [31:0] main_resetexiti_23;
reg [31:0] main_resetexiti_23_reg;
reg [31:0] main_resetexiti_24;
reg [31:0] main_resetexiti_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_resetexiti_25_reg;
reg [31:0] main_resetexiti_indvarnext45;
reg [31:0] main_resetexiti_indvarnext45_reg;
reg  main_resetexiti_exitcond46;
reg  main_resetexiti_exitcond46_reg;
reg [31:0] main_preheaderi_26;
reg [31:0] main_preheaderi_26_reg;
reg [31:0] main_preheaderi_27;
reg [31:0] main_preheaderi_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_28_reg;
reg [31:0] main_preheaderi_29;
reg [31:0] main_preheaderi_29_reg;
reg [31:0] main_30_indvar39;
reg [31:0] main_30_indvar39_reg;
reg [31:0] main_30_dec_ph20;
reg [31:0] main_30_dec_ph20_reg;
reg [31:0] main_30_dec_ph10;
reg [31:0] main_30_dec_ph10_reg;
reg [31:0] main_30_dec_nbh0;
reg [31:0] main_30_dec_nbh0_reg;
reg [31:0] main_30_dec_deth0;
reg [31:0] main_30_dec_deth0_reg;
reg [31:0] main_30_dec_ah20;
reg [31:0] main_30_dec_ah20_reg;
reg [31:0] main_30_dec_rh20;
reg [31:0] main_30_dec_rh20_reg;
reg [31:0] main_30_dec_ah10;
reg [31:0] main_30_dec_ah10_reg;
reg [31:0] main_30_dec_rh10;
reg [31:0] main_30_dec_rh10_reg;
reg [31:0] main_30_dec_plt20;
reg [31:0] main_30_dec_plt20_reg;
reg [31:0] main_30_dec_plt10;
reg [31:0] main_30_dec_plt10_reg;
reg [31:0] main_30_dec_nbl0;
reg [31:0] main_30_dec_nbl0_reg;
reg [31:0] main_30_dec_detl0;
reg [31:0] main_30_dec_detl0_reg;
reg [31:0] main_30_dec_al20;
reg [31:0] main_30_dec_al20_reg;
reg [31:0] main_30_dec_rlt20;
reg [31:0] main_30_dec_rlt20_reg;
reg [31:0] main_30_dec_al10;
reg [31:0] main_30_dec_al10_reg;
reg [31:0] main_30_dec_rlt10;
reg [31:0] main_30_dec_rlt10_reg;
reg [31:0] main_30_i03i;
reg [31:0] main_30_i03i_reg;
reg [31:0] main_30_31;
reg [31:0] main_30_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_30_scevgep42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_30_scevgep42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_30_scevgep43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_30_scevgep43_reg;
reg [31:0] main_30_32;
reg [31:0] main_30_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_30_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_30_33_reg;
reg [31:0] main_30_34;
reg [31:0] main_30_34_reg;
reg [31:0] main_30_35;
reg [31:0] main_30_35_reg;
reg [31:0] main_30_36;
reg [31:0] main_30_36_reg;
reg [31:0] main_30_37;
reg [31:0] main_30_37_reg;
reg [31:0] main_38_indvar;
reg [31:0] main_38_indvar_reg;
reg [31:0] main_38_zl05iii;
reg [31:0] main_38_zl05iii_reg;
reg [31:0] main_38_39;
reg [31:0] main_38_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_38_017iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_38_017iii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_38_06iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_38_06iii_reg;
reg [31:0] main_38_40;
reg [31:0] main_38_40_reg;
reg [31:0] main_38_41;
reg [31:0] main_38_41_reg;
reg [31:0] main_38_42;
reg [31:0] main_38_42_reg;
reg [31:0] main_38_43;
reg [31:0] main_38_43_reg;
reg [31:0] main_38_indvarnext;
reg [31:0] main_38_indvarnext_reg;
reg  main_38_exitcond7;
reg  main_38_exitcond7_reg;
reg [31:0] main_filtezexitii_44;
reg [31:0] main_filtezexitii_44_reg;
reg [31:0] main_filtezexitii_45;
reg [31:0] main_filtezexitii_45_reg;
reg [31:0] main_filtezexitii_46;
reg [31:0] main_filtezexitii_46_reg;
reg [31:0] main_filtezexitii_47;
reg [31:0] main_filtezexitii_47_reg;
reg [31:0] main_filtezexitii_tmpi28ii;
reg [31:0] main_filtezexitii_tmpi28ii_reg;
reg [31:0] main_filtezexitii_tmp1i29ii;
reg [31:0] main_filtezexitii_tmp1i29ii_reg;
reg [31:0] main_filtezexitii_48;
reg [31:0] main_filtezexitii_48_reg;
reg [31:0] main_filtezexitii_49;
reg [31:0] main_filtezexitii_49_reg;
reg [31:0] main_filtezexitii_50;
reg [31:0] main_filtezexitii_50_reg;
reg [31:0] main_filtezexitii_51;
reg [31:0] main_filtezexitii_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_52_reg;
reg [31:0] main_filtezexitii_53;
reg [31:0] main_filtezexitii_53_reg;
reg [31:0] main_filtezexitii_54;
reg [31:0] main_filtezexitii_54_reg;
reg [31:0] main_filtezexitii_55;
reg [31:0] main_filtezexitii_55_reg;
reg [31:0] main_filtezexitii_56;
reg [31:0] main_filtezexitii_56_reg;
reg [31:0] main_filtezexitii_57;
reg [31:0] main_filtezexitii_57_reg;
reg [31:0] main_filtezexitii_58;
reg [31:0] main_filtezexitii_58_reg;
reg [31:0] main_filtezexitii_59;
reg [31:0] main_filtezexitii_59_reg;
reg [31:0] main_filtezexitii_60;
reg [31:0] main_filtezexitii_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_61_reg;
reg [31:0] main_filtezexitii_62;
reg [31:0] main_filtezexitii_62_reg;
reg [31:0] main_filtezexitii_63;
reg [31:0] main_filtezexitii_63_reg;
reg  main_filtezexitii_64;
reg  main_filtezexitii_64_reg;
reg [31:0] main_filtezexitii_i26ii;
reg [31:0] main_filtezexitii_i26ii_reg;
reg  main_filtezexitii_65;
reg  main_filtezexitii_65_reg;
reg [31:0] main_filtezexitii_i27ii;
reg [31:0] main_filtezexitii_i27ii_reg;
reg [31:0] main_filtezexitii_66;
reg [31:0] main_filtezexitii_66_reg;
reg [31:0] main_filtezexitii_67;
reg [31:0] main_filtezexitii_67_reg;
reg [31:0] main_filtezexitii_68;
reg [31:0] main_filtezexitii_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_69_reg;
reg [31:0] main_filtezexitii_70;
reg [31:0] main_filtezexitii_70_reg;
reg [31:0] main_filtezexitii_71;
reg [31:0] main_filtezexitii_71_reg;
reg [31:0] main_filtezexitii_72;
reg [31:0] main_filtezexitii_72_reg;
reg [31:0] main_filtezexitii_73;
reg [31:0] main_filtezexitii_73_reg;
reg [31:0] main_filtezexitii_74;
reg [31:0] main_filtezexitii_74_reg;
reg  main_filtezexitii_75;
reg  main_filtezexitii_75_reg;
reg [31:0] main_preheaderi21ii_76;
reg [31:0] main_preheaderi21ii_76_reg;
reg [31:0] main_preheaderi21ii_i03i19ii;
reg [31:0] main_preheaderi21ii_i03i19ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi21ii_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi21ii_scevgep16_reg;
reg [31:0] main_preheaderi21ii_77;
reg [31:0] main_preheaderi21ii_77_reg;
reg [31:0] main_preheaderi21ii_78;
reg [31:0] main_preheaderi21ii_78_reg;
reg  main_preheaderi21ii_exitcond14;
reg  main_preheaderi21ii_exitcond14_reg;
reg [31:0] main_preheaderi21preheaderi21_crit_edgeii_79;
reg [31:0] main_preheaderi21preheaderi21_crit_edgeii_79_reg;
reg [31:0] main_preheaderi21preheaderi21_crit_edgeii_80;
reg [31:0] main_preheaderi21preheaderi21_crit_edgeii_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi21preheaderi21_crit_edgeii_phitransinsertii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi21preheaderi21_crit_edgeii_phitransinsertii_reg;
reg [31:0] main_preheaderi21preheaderi21_crit_edgeii_preii;
reg [31:0] main_preheaderi21preheaderi21_crit_edgeii_preii_reg;
reg [31:0] main_preheader1i24ii_81;
reg [31:0] main_preheader1i24ii_81_reg;
reg [31:0] main_preheader1i24ii_82;
reg [31:0] main_preheader1i24ii_82_reg;
reg [31:0] main_preheader1i24ii_i14i22ii;
reg [31:0] main_preheader1i24ii_i14i22ii_reg;
reg [31:0] main_preheader1i24ii_83;
reg [31:0] main_preheader1i24ii_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1i24ii_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1i24ii_scevgep13_reg;
reg [31:0] main_preheader1i24ii_84;
reg [31:0] main_preheader1i24ii_84_reg;
reg [31:0] main_preheader1i24ii_85;
reg [31:0] main_preheader1i24ii_85_reg;
reg [31:0] main_preheader1i24ii_86;
reg [31:0] main_preheader1i24ii_86_reg;
reg [31:0] main_preheader1i24ii_87;
reg [31:0] main_preheader1i24ii_87_reg;
reg [31:0] main_preheader1i24ii_88;
reg [31:0] main_preheader1i24ii_88_reg;
reg [31:0] main_preheader1i24ii_89;
reg [31:0] main_preheader1i24ii_89_reg;
reg [31:0] main_preheader1i24ii_90;
reg [31:0] main_preheader1i24ii_90_reg;
reg  main_preheader1i24ii_exitcond10;
reg  main_preheader1i24ii_exitcond10_reg;
reg [31:0] main_preheader1i24preheader1i24_crit_edgeii_91;
reg [31:0] main_preheader1i24preheader1i24_crit_edgeii_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1i24preheader1i24_crit_edgeii_phitransinsert62ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1i24preheader1i24_crit_edgeii_phitransinsert62ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1i24preheader1i24_crit_edgeii_phitransinsert64ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1i24preheader1i24_crit_edgeii_phitransinsert64ii_reg;
reg [31:0] main_preheader1i24preheader1i24_crit_edgeii_pre63ii;
reg [31:0] main_preheader1i24preheader1i24_crit_edgeii_pre63ii_reg;
reg [31:0] main_preheader1i24preheader1i24_crit_edgeii_pre65ii;
reg [31:0] main_preheader1i24preheader1i24_crit_edgeii_pre65ii_reg;
reg [31:0] main_upzeroexit25ii_92;
reg [31:0] main_upzeroexit25ii_92_reg;
reg [31:0] main_upzeroexit25ii_93;
reg [31:0] main_upzeroexit25ii_93_reg;
reg [31:0] main_upzeroexit25ii_94;
reg [31:0] main_upzeroexit25ii_94_reg;
reg [31:0] main_upzeroexit25ii_95;
reg [31:0] main_upzeroexit25ii_95_reg;
reg [31:0] main_upzeroexit25ii_96;
reg [31:0] main_upzeroexit25ii_96_reg;
reg  main_upzeroexit25ii_97;
reg  main_upzeroexit25ii_97_reg;
reg [31:0] main_upzeroexit25ii_98;
reg [31:0] main_upzeroexit25ii_98_reg;
reg [31:0] main_upzeroexit25ii_1i15ii;
reg [31:0] main_upzeroexit25ii_1i15ii_reg;
reg [31:0] main_upzeroexit25ii_99;
reg [31:0] main_upzeroexit25ii_99_reg;
reg [31:0] main_upzeroexit25ii_100;
reg [31:0] main_upzeroexit25ii_100_reg;
reg [31:0] main_upzeroexit25ii_101;
reg [31:0] main_upzeroexit25ii_101_reg;
reg [31:0] main_upzeroexit25ii_102;
reg [31:0] main_upzeroexit25ii_102_reg;
reg [31:0] main_upzeroexit25ii_103;
reg [31:0] main_upzeroexit25ii_103_reg;
reg [31:0] main_upzeroexit25ii_104;
reg [31:0] main_upzeroexit25ii_104_reg;
reg [31:0] main_upzeroexit25ii_105;
reg [31:0] main_upzeroexit25ii_105_reg;
reg [31:0] main_upzeroexit25ii_wd40i16ii;
reg [31:0] main_upzeroexit25ii_wd40i16ii_reg;
reg [31:0] main_upzeroexit25ii_106;
reg [31:0] main_upzeroexit25ii_106_reg;
reg  main_upzeroexit25ii_107;
reg  main_upzeroexit25ii_107_reg;
reg [31:0] main_upzeroexit25ii_i17ii;
reg [31:0] main_upzeroexit25ii_i17ii_reg;
reg  main_upzeroexit25ii_108;
reg  main_upzeroexit25ii_108_reg;
reg [31:0] main_upzeroexit25ii_i18ii;
reg [31:0] main_upzeroexit25ii_i18ii_reg;
reg [31:0] main_upzeroexit25ii_109;
reg [31:0] main_upzeroexit25ii_109_reg;
reg [31:0] main_upzeroexit25ii_110;
reg [31:0] main_upzeroexit25ii_110_reg;
reg [31:0] main_upzeroexit25ii_111;
reg [31:0] main_upzeroexit25ii_111_reg;
reg [31:0] main_upzeroexit25ii_112;
reg [31:0] main_upzeroexit25ii_112_reg;
reg [31:0] main_upzeroexit25ii_113;
reg [31:0] main_upzeroexit25ii_113_reg;
reg [31:0] main_upzeroexit25ii_apl10i12ii;
reg [31:0] main_upzeroexit25ii_apl10i12ii_reg;
reg [31:0] main_upzeroexit25ii_114;
reg [31:0] main_upzeroexit25ii_114_reg;
reg  main_upzeroexit25ii_115;
reg  main_upzeroexit25ii_115_reg;
reg [31:0] main_upzeroexit25ii_116;
reg [31:0] main_upzeroexit25ii_116_reg;
reg [31:0] main_upzeroexit25ii_117;
reg [31:0] main_upzeroexit25ii_117_reg;
reg [31:0] main_upzeroexit25ii_118;
reg [31:0] main_upzeroexit25ii_118_reg;
reg [31:0] main_119_indvar17;
reg [31:0] main_119_indvar17_reg;
reg [31:0] main_119_zl05i6ii;
reg [31:0] main_119_zl05i6ii_reg;
reg [31:0] main_119_120;
reg [31:0] main_119_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_017i9ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_017i9ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_06i8ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_06i8ii_reg;
reg [31:0] main_119_121;
reg [31:0] main_119_121_reg;
reg [31:0] main_119_122;
reg [31:0] main_119_122_reg;
reg [31:0] main_119_123;
reg [31:0] main_119_123_reg;
reg [31:0] main_119_124;
reg [31:0] main_119_124_reg;
reg [31:0] main_119_indvarnext18;
reg [31:0] main_119_indvarnext18_reg;
reg  main_119_exitcond19;
reg  main_119_exitcond19_reg;
reg [31:0] main_filtezexit11ii_125;
reg [31:0] main_filtezexit11ii_125_reg;
reg [31:0] main_filtezexit11ii_apl10i13ii;
reg [31:0] main_filtezexit11ii_apl10i13ii_reg;
reg  main_filtezexit11ii_126;
reg  main_filtezexit11ii_126_reg;
reg [31:0] main_filtezexit11ii_apl12i14ii;
reg [31:0] main_filtezexit11ii_apl12i14ii_reg;
reg [31:0] main_filtezexit11ii_127;
reg [31:0] main_filtezexit11ii_127_reg;
reg [31:0] main_filtezexit11ii_128;
reg [31:0] main_filtezexit11ii_128_reg;
reg [31:0] main_filtezexit11ii_129;
reg [31:0] main_filtezexit11ii_129_reg;
reg [31:0] main_filtezexit11ii_130;
reg [31:0] main_filtezexit11ii_130_reg;
reg [31:0] main_filtezexit11ii_tmpiii;
reg [31:0] main_filtezexit11ii_tmpiii_reg;
reg [31:0] main_filtezexit11ii_tmp1iii;
reg [31:0] main_filtezexit11ii_tmp1iii_reg;
reg [31:0] main_filtezexit11ii_131;
reg [31:0] main_filtezexit11ii_131_reg;
reg [31:0] main_filtezexit11ii_132;
reg [31:0] main_filtezexit11ii_132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit11ii_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit11ii_133_reg;
reg [31:0] main_filtezexit11ii_134;
reg [31:0] main_filtezexit11ii_134_reg;
reg [31:0] main_filtezexit11ii_135;
reg [31:0] main_filtezexit11ii_135_reg;
reg [31:0] main_filtezexit11ii_136;
reg [31:0] main_filtezexit11ii_136_reg;
reg [31:0] main_filtezexit11ii_137;
reg [31:0] main_filtezexit11ii_137_reg;
reg [31:0] main_filtezexit11ii_138;
reg [31:0] main_filtezexit11ii_138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit11ii_139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit11ii_139_reg;
reg [31:0] main_filtezexit11ii_140;
reg [31:0] main_filtezexit11ii_140_reg;
reg [31:0] main_filtezexit11ii_141;
reg [31:0] main_filtezexit11ii_141_reg;
reg  main_filtezexit11ii_142;
reg  main_filtezexit11ii_142_reg;
reg [31:0] main_filtezexit11ii_i2ii;
reg [31:0] main_filtezexit11ii_i2ii_reg;
reg  main_filtezexit11ii_143;
reg  main_filtezexit11ii_143_reg;
reg [31:0] main_filtezexit11ii_i3ii;
reg [31:0] main_filtezexit11ii_i3ii_reg;
reg [31:0] main_filtezexit11ii_144;
reg [31:0] main_filtezexit11ii_144_reg;
reg [31:0] main_filtezexit11ii_145;
reg [31:0] main_filtezexit11ii_145_reg;
reg [31:0] main_filtezexit11ii_146;
reg [31:0] main_filtezexit11ii_146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit11ii_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit11ii_147_reg;
reg [31:0] main_filtezexit11ii_148;
reg [31:0] main_filtezexit11ii_148_reg;
reg [31:0] main_filtezexit11ii_149;
reg [31:0] main_filtezexit11ii_149_reg;
reg [31:0] main_filtezexit11ii_150;
reg [31:0] main_filtezexit11ii_150_reg;
reg [31:0] main_filtezexit11ii_151;
reg [31:0] main_filtezexit11ii_151_reg;
reg [31:0] main_filtezexit11ii_152;
reg [31:0] main_filtezexit11ii_152_reg;
reg  main_filtezexit11ii_153;
reg  main_filtezexit11ii_153_reg;
reg [31:0] main_preheaderiii_154;
reg [31:0] main_preheaderiii_154_reg;
reg [31:0] main_preheaderiii_i03iii;
reg [31:0] main_preheaderiii_i03iii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderiii_scevgep28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderiii_scevgep28_reg;
reg [31:0] main_preheaderiii_155;
reg [31:0] main_preheaderiii_155_reg;
reg [31:0] main_preheaderiii_156;
reg [31:0] main_preheaderiii_156_reg;
reg  main_preheaderiii_exitcond26;
reg  main_preheaderiii_exitcond26_reg;
reg [31:0] main_preheaderipreheaderi_crit_edgeii_157;
reg [31:0] main_preheaderipreheaderi_crit_edgeii_157_reg;
reg [31:0] main_preheaderipreheaderi_crit_edgeii_158;
reg [31:0] main_preheaderipreheaderi_crit_edgeii_158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderipreheaderi_crit_edgeii_phitransinsert56ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderipreheaderi_crit_edgeii_phitransinsert56ii_reg;
reg [31:0] main_preheaderipreheaderi_crit_edgeii_pre57ii;
reg [31:0] main_preheaderipreheaderi_crit_edgeii_pre57ii_reg;
reg [31:0] main_preheader1iii_159;
reg [31:0] main_preheader1iii_159_reg;
reg [31:0] main_preheader1iii_160;
reg [31:0] main_preheader1iii_160_reg;
reg [31:0] main_preheader1iii_i14iii;
reg [31:0] main_preheader1iii_i14iii_reg;
reg [31:0] main_preheader1iii_161;
reg [31:0] main_preheader1iii_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1iii_scevgep25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1iii_scevgep25_reg;
reg [31:0] main_preheader1iii_162;
reg [31:0] main_preheader1iii_162_reg;
reg [31:0] main_preheader1iii_163;
reg [31:0] main_preheader1iii_163_reg;
reg [31:0] main_preheader1iii_164;
reg [31:0] main_preheader1iii_164_reg;
reg [31:0] main_preheader1iii_165;
reg [31:0] main_preheader1iii_165_reg;
reg [31:0] main_preheader1iii_166;
reg [31:0] main_preheader1iii_166_reg;
reg [31:0] main_preheader1iii_167;
reg [31:0] main_preheader1iii_167_reg;
reg [31:0] main_preheader1iii_168;
reg [31:0] main_preheader1iii_168_reg;
reg  main_preheader1iii_exitcond22;
reg  main_preheader1iii_exitcond22_reg;
reg [31:0] main_preheader1ipreheader1i_crit_edgeii_169;
reg [31:0] main_preheader1ipreheader1i_crit_edgeii_169_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1ipreheader1i_crit_edgeii_phitransinsert58ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1ipreheader1i_crit_edgeii_phitransinsert58ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1ipreheader1i_crit_edgeii_phitransinsert60ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1ipreheader1i_crit_edgeii_phitransinsert60ii_reg;
reg [31:0] main_preheader1ipreheader1i_crit_edgeii_pre59ii;
reg [31:0] main_preheader1ipreheader1i_crit_edgeii_pre59ii_reg;
reg [31:0] main_preheader1ipreheader1i_crit_edgeii_pre61ii;
reg [31:0] main_preheader1ipreheader1i_crit_edgeii_pre61ii_reg;
reg [31:0] main_upzeroexitii_170;
reg [31:0] main_upzeroexitii_170_reg;
reg [31:0] main_upzeroexitii_171;
reg [31:0] main_upzeroexitii_171_reg;
reg [31:0] main_upzeroexitii_172;
reg [31:0] main_upzeroexitii_172_reg;
reg [31:0] main_upzeroexitii_173;
reg [31:0] main_upzeroexitii_173_reg;
reg [31:0] main_upzeroexitii_174;
reg [31:0] main_upzeroexitii_174_reg;
reg  main_upzeroexitii_175;
reg  main_upzeroexitii_175_reg;
reg [31:0] main_upzeroexitii_176;
reg [31:0] main_upzeroexitii_176_reg;
reg [31:0] main_upzeroexitii_1iii;
reg [31:0] main_upzeroexitii_1iii_reg;
reg [31:0] main_upzeroexitii_177;
reg [31:0] main_upzeroexitii_177_reg;
reg [31:0] main_upzeroexitii_178;
reg [31:0] main_upzeroexitii_178_reg;
reg [31:0] main_upzeroexitii_179;
reg [31:0] main_upzeroexitii_179_reg;
reg [31:0] main_upzeroexitii_180;
reg [31:0] main_upzeroexitii_180_reg;
reg [31:0] main_upzeroexitii_181;
reg [31:0] main_upzeroexitii_181_reg;
reg [31:0] main_upzeroexitii_182;
reg [31:0] main_upzeroexitii_182_reg;
reg [31:0] main_upzeroexitii_183;
reg [31:0] main_upzeroexitii_183_reg;
reg [31:0] main_upzeroexitii_wd40iii;
reg [31:0] main_upzeroexitii_wd40iii_reg;
reg [31:0] main_upzeroexitii_184;
reg [31:0] main_upzeroexitii_184_reg;
reg  main_upzeroexitii_185;
reg  main_upzeroexitii_185_reg;
reg [31:0] main_upzeroexitii_iii;
reg [31:0] main_upzeroexitii_iii_reg;
reg  main_upzeroexitii_186;
reg  main_upzeroexitii_186_reg;
reg [31:0] main_upzeroexitii_iii_var0;
reg [31:0] main_upzeroexitii_iii_var0_reg;
reg [31:0] main_upzeroexitii_187;
reg [31:0] main_upzeroexitii_187_reg;
reg [31:0] main_upzeroexitii_188;
reg [31:0] main_upzeroexitii_188_reg;
reg [31:0] main_upzeroexitii_189;
reg [31:0] main_upzeroexitii_189_reg;
reg [31:0] main_upzeroexitii_190;
reg [31:0] main_upzeroexitii_190_reg;
reg [31:0] main_upzeroexitii_191;
reg [31:0] main_upzeroexitii_191_reg;
reg [31:0] main_upzeroexitii_192;
reg [31:0] main_upzeroexitii_192_reg;
reg [31:0] main_upzeroexitii_193;
reg [31:0] main_upzeroexitii_193_reg;
reg [31:0] main_upzeroexitii_194;
reg [31:0] main_upzeroexitii_194_reg;
reg [31:0] main_upzeroexitii_195;
reg [31:0] main_upzeroexitii_195_reg;
reg [31:0] main_upzeroexitii_196;
reg [31:0] main_upzeroexitii_196_reg;
reg [31:0] main_197_xa2042ii;
reg [31:0] main_197_xa2042ii_reg;
reg [31:0] main_197_xa1041ii;
reg [31:0] main_197_xa1041ii_reg;
reg [31:0] main_197_i040ii;
reg [31:0] main_197_i040ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_197_ad_ptr045ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_197_ad_ptr045ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_197_ac_ptr044ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_197_ac_ptr044ii_reg;
reg [31:0] main_197_198;
reg [31:0] main_197_198_reg;
reg [31:0] main_197_199;
reg [31:0] main_197_199_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_197_h_ptr043ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_197_h_ptr043ii_reg;
reg [31:0] main_197_200;
reg [31:0] main_197_200_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_197_scevgep33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_197_scevgep33_reg;
reg [31:0] main_197_201;
reg [31:0] main_197_201_reg;
reg [31:0] main_197_202;
reg [31:0] main_197_202_reg;
reg [31:0] main_197_203;
reg [31:0] main_197_203_reg;
reg [31:0] main_197_204;
reg [31:0] main_197_204_reg;
reg [31:0] main_197_205;
reg [31:0] main_197_205_reg;
reg [31:0] main_197_206;
reg [31:0] main_197_206_reg;
reg [31:0] main_197_207;
reg [31:0] main_197_207_reg;
reg [31:0] main_197_208;
reg [31:0] main_197_208_reg;
reg [31:0] main_197_209;
reg [31:0] main_197_209_reg;
reg  main_197_exitcond29;
reg  main_197_exitcond29_reg;
reg [31:0] main_210_211;
reg [31:0] main_210_211_reg;
reg [31:0] main_210_apl10iii;
reg [31:0] main_210_apl10iii_reg;
reg  main_210_212;
reg  main_210_212_reg;
reg [31:0] main_210_213;
reg [31:0] main_210_213_reg;
reg [31:0] main_210_214;
reg [31:0] main_210_214_reg;
reg [31:0] main_215_i135ii;
reg [31:0] main_215_i135ii_reg;
reg [31:0] main_215_216;
reg [31:0] main_215_216_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_ac_ptr1039ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_ac_ptr1039ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_ad_ptr1038ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_ad_ptr1038ii_reg;
reg [31:0] main_215_217;
reg [31:0] main_215_217_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_ad_ptr137ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_ad_ptr137ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_ac_ptr136ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_215_ac_ptr136ii_reg;
reg [31:0] main_215_218;
reg [31:0] main_215_218_reg;
reg [31:0] main_215_219;
reg [31:0] main_215_219_reg;
reg [31:0] main_215_220;
reg [31:0] main_215_220_reg;
reg  main_215_exitcond34;
reg  main_215_exitcond34_reg;
reg [31:0] main_decodeexiti_221;
reg [31:0] main_decodeexiti_221_reg;
reg [31:0] main_decodeexiti_apl10iii;
reg [31:0] main_decodeexiti_apl10iii_reg;
reg [31:0] main_decodeexiti_222;
reg [31:0] main_decodeexiti_222_reg;
reg [31:0] main_decodeexiti_223;
reg [31:0] main_decodeexiti_223_reg;
reg  main_decodeexiti_224;
reg  main_decodeexiti_224_reg;
reg [31:0] main_decodeexiti_225;
reg [31:0] main_decodeexiti_225_reg;
reg [31:0] main_decodeexiti_226;
reg [31:0] main_decodeexiti_226_reg;
reg [31:0] main_decodeexiti_apl12iii;
reg [31:0] main_decodeexiti_apl12iii_reg;
reg [31:0] main_decodeexiti_227;
reg [31:0] main_decodeexiti_227_reg;
reg [31:0] main_decodeexiti_228;
reg [31:0] main_decodeexiti_228_reg;
reg [31:0] main_decodeexiti_indvarnext40;
reg [31:0] main_decodeexiti_indvarnext40_reg;
reg  main_decodeexiti_exitcond41;
reg  main_decodeexiti_exitcond41_reg;
reg [31:0] main_adpcm_mainexit_main_result04;
reg [31:0] main_adpcm_mainexit_main_result04_reg;
reg [31:0] main_adpcm_mainexit_i03;
reg [31:0] main_adpcm_mainexit_i03_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep6_reg;
reg [31:0] main_adpcm_mainexit_229;
reg [31:0] main_adpcm_mainexit_229_reg;
reg [31:0] main_adpcm_mainexit_230;
reg [31:0] main_adpcm_mainexit_230_reg;
reg  main_adpcm_mainexit_231;
reg  main_adpcm_mainexit_231_reg;
reg [31:0] main_adpcm_mainexit_232;
reg [31:0] main_adpcm_mainexit_232_reg;
reg [31:0] main_adpcm_mainexit_main_result0;
reg [31:0] main_adpcm_mainexit_main_result0_reg;
reg [31:0] main_adpcm_mainexit_233;
reg [31:0] main_adpcm_mainexit_233_reg;
reg  main_adpcm_mainexit_exitcond;
reg  main_adpcm_mainexit_exitcond_reg;
reg [31:0] main_preheader_main_result22;
reg [31:0] main_preheader_main_result22_reg;
reg [31:0] main_preheader_i11;
reg [31:0] main_preheader_i11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep4_reg;
reg [31:0] main_preheader_234;
reg [31:0] main_preheader_234_reg;
reg [31:0] main_preheader_235;
reg [31:0] main_preheader_235_reg;
reg  main_preheader_236;
reg  main_preheader_236_reg;
reg [31:0] main_preheader_237;
reg [31:0] main_preheader_237_reg;
reg [31:0] main_preheader_main_result2;
reg [31:0] main_preheader_main_result2_reg;
reg [31:0] main_preheader_238;
reg [31:0] main_preheader_238_reg;
reg  main_preheader_exitcond3;
reg  main_preheader_exitcond3_reg;
reg  main_239_241;
reg  main_239_241_reg;
wire [1:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [1:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
reg [5:0] qq6_code6_table_address_a;
reg  qq6_code6_table_write_enable_a;
wire [31:0] qq6_code6_table_in_a;
wire [31:0] qq6_code6_table_out_a;
wire [5:0] qq6_code6_table_address_b;
wire  qq6_code6_table_write_enable_b;
wire [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_b;
wire [4:0] decis_levl_address_a;
wire  decis_levl_write_enable_a;
wire [31:0] decis_levl_in_a;
wire [31:0] decis_levl_out_a;
wire [4:0] decis_levl_address_b;
wire  decis_levl_write_enable_b;
wire [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_b;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [2:0] dec_del_bpl_address_a;
reg  dec_del_bpl_write_enable_a;
reg [31:0] dec_del_bpl_in_a;
wire [31:0] dec_del_bpl_out_a;
wire [2:0] dec_del_bpl_address_b;
wire  dec_del_bpl_write_enable_b;
wire [31:0] dec_del_bpl_in_b;
wire [31:0] dec_del_bpl_out_b;
reg [2:0] dec_del_dltx_address_a;
reg  dec_del_dltx_write_enable_a;
reg [31:0] dec_del_dltx_in_a;
wire [31:0] dec_del_dltx_out_a;
reg [2:0] dec_del_dltx_address_b;
reg  dec_del_dltx_write_enable_b;
reg [31:0] dec_del_dltx_in_b;
wire [31:0] dec_del_dltx_out_b;
reg [2:0] dec_del_bph_address_a;
reg  dec_del_bph_write_enable_a;
reg [31:0] dec_del_bph_in_a;
wire [31:0] dec_del_bph_out_a;
wire [2:0] dec_del_bph_address_b;
wire  dec_del_bph_write_enable_b;
wire [31:0] dec_del_bph_in_b;
wire [31:0] dec_del_bph_out_b;
reg [2:0] dec_del_dhx_address_a;
reg  dec_del_dhx_write_enable_a;
reg [31:0] dec_del_dhx_in_a;
wire [31:0] dec_del_dhx_out_a;
reg [2:0] dec_del_dhx_address_b;
reg  dec_del_dhx_write_enable_b;
reg [31:0] dec_del_dhx_in_b;
wire [31:0] dec_del_dhx_out_b;
reg [3:0] accumc_address_a;
reg  accumc_write_enable_a;
reg [31:0] accumc_in_a;
wire [31:0] accumc_out_a;
wire [3:0] accumc_address_b;
wire  accumc_write_enable_b;
wire [31:0] accumc_in_b;
wire [31:0] accumc_out_b;
reg [3:0] accumd_address_a;
reg  accumd_write_enable_a;
reg [31:0] accumd_in_a;
wire [31:0] accumd_out_a;
wire [3:0] accumd_address_b;
wire  accumd_write_enable_b;
wire [31:0] accumd_in_b;
wire [31:0] accumd_out_b;
reg [6:0] test_data_address_a;
reg  test_data_write_enable_a;
wire [31:0] test_data_in_a;
wire [31:0] test_data_out_a;
reg [6:0] test_data_address_b;
reg  test_data_write_enable_b;
wire [31:0] test_data_in_b;
wire [31:0] test_data_out_b;
reg [6:0] test_compressed_address_a;
reg  test_compressed_write_enable_a;
wire [31:0] test_compressed_in_a;
wire [31:0] test_compressed_out_a;
wire [6:0] test_compressed_address_b;
wire  test_compressed_write_enable_b;
wire [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_b;
reg [6:0] test_result_address_a;
reg  test_result_write_enable_a;
wire [31:0] test_result_in_a;
wire [31:0] test_result_out_a;
wire [6:0] test_result_address_b;
wire  test_result_write_enable_b;
wire [31:0] test_result_in_b;
wire [31:0] test_result_out_b;
reg [6:0] compressed_address_a;
reg  compressed_write_enable_a;
reg [31:0] compressed_in_a;
wire [31:0] compressed_out_a;
wire [6:0] compressed_address_b;
wire  compressed_write_enable_b;
wire [31:0] compressed_in_b;
wire [31:0] compressed_out_b;
reg [6:0] result_address_a;
reg  result_write_enable_a;
reg [31:0] result_in_a;
wire [31:0] result_out_a;
reg [6:0] result_address_b;
reg  result_write_enable_b;
reg [31:0] result_in_b;
wire [31:0] result_out_b;
reg  encode_start;
reg [31:0] encode_arg_xin1;
reg [31:0] encode_arg_xin2;
wire  encode_memory_controller_enable_a;
wire  encode_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_memory_controller_out_a;
wire [1:0] encode_memory_controller_size_a;
wire  encode_memory_controller_enable_b;
wire  encode_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_memory_controller_out_b;
wire [1:0] encode_memory_controller_size_b;
reg  encode_memory_controller_waitrequest;
reg  encode_finish_final;
reg  encode_finish_reg;
wire  encode_finish;
wire [31:0] encode_return_val;
reg [31:0] encode_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_resetexiti_11_temp_out;
wire [31:0] main_resetexiti_11_unused;
reg  lpm_divide_main_resetexiti_11_en;
reg [31:0] lpm_divide_main_resetexiti_11_out;
reg [31:0] main_signed_divide_32_0;
reg  lpm_mult_main_resetexiti_i105i_en;
reg [31:0] main_resetexiti_i105i_stage0_reg;
reg  lpm_divide_main_resetexiti_16_en;
reg  lpm_divide_main_resetexiti_21_en;
reg  lpm_divide_main_30_32_en;
reg  lpm_mult_main_30_37_en;
reg [31:0] main_30_37_stage0_reg;
reg  lpm_mult_main_38_42_en;
reg [31:0] main_38_42_stage0_reg;
reg  lpm_mult_main_filtezexitii_46_en;
reg [31:0] main_filtezexitii_46_stage0_reg;
reg  lpm_mult_main_filtezexitii_47_en;
reg [31:0] main_filtezexitii_47_stage0_reg;
reg  lpm_mult_main_filtezexitii_56_en;
reg [31:0] main_filtezexitii_56_stage0_reg;
reg  lpm_mult_main_filtezexitii_59_en;
reg [31:0] main_filtezexitii_59_stage0_reg;
reg  lpm_mult_main_filtezexitii_54_en;
reg [31:0] main_filtezexitii_54_stage0_reg;
reg  lpm_mult_main_preheaderi21ii_77_en;
reg [31:0] main_preheaderi21ii_77_stage0_reg;
reg  lpm_mult_main_preheader1i24ii_84_en;
reg [31:0] main_preheader1i24ii_84_stage0_reg;
reg  lpm_mult_main_preheader1i24ii_88_en;
reg [31:0] main_preheader1i24ii_88_stage0_reg;
reg  lpm_mult_main_upzeroexit25ii_96_en;
reg [31:0] main_upzeroexit25ii_96_stage0_reg;
reg  lpm_mult_main_upzeroexit25ii_100_en;
reg [31:0] main_upzeroexit25ii_100_stage0_reg;
reg  lpm_mult_main_upzeroexit25ii_104_en;
reg [31:0] main_upzeroexit25ii_104_stage0_reg;
reg  lpm_mult_main_upzeroexit25ii_109_en;
reg [31:0] main_upzeroexit25ii_109_stage0_reg;
reg  lpm_mult_main_upzeroexit25ii_118_en;
reg [31:0] main_upzeroexit25ii_118_stage0_reg;
reg  lpm_mult_main_119_123_en;
reg [31:0] main_119_123_stage0_reg;
reg  lpm_mult_main_filtezexit11ii_129_en;
reg [31:0] main_filtezexit11ii_129_stage0_reg;
reg  lpm_mult_main_filtezexit11ii_130_en;
reg [31:0] main_filtezexit11ii_130_stage0_reg;
reg  lpm_mult_main_filtezexit11ii_137_en;
reg [31:0] main_filtezexit11ii_137_stage0_reg;
reg  lpm_mult_main_filtezexit11ii_135_en;
reg [31:0] main_filtezexit11ii_135_stage0_reg;
reg  lpm_mult_main_preheaderiii_155_en;
reg [31:0] main_preheaderiii_155_stage0_reg;
reg  lpm_mult_main_preheader1iii_162_en;
reg [31:0] main_preheader1iii_162_stage0_reg;
reg  lpm_mult_main_preheader1iii_166_en;
reg [31:0] main_preheader1iii_166_stage0_reg;
reg  lpm_mult_main_upzeroexitii_174_en;
reg [31:0] main_upzeroexitii_174_stage0_reg;
reg  lpm_mult_main_upzeroexitii_178_en;
reg [31:0] main_upzeroexitii_178_stage0_reg;
reg  lpm_mult_main_upzeroexitii_182_en;
reg [31:0] main_upzeroexitii_182_stage0_reg;
reg  lpm_mult_main_upzeroexitii_187_en;
reg [31:0] main_upzeroexitii_187_stage0_reg;
reg  lpm_mult_main_upzeroexitii_195_en;
reg [31:0] main_upzeroexitii_195_stage0_reg;
reg  lpm_mult_main_upzeroexitii_196_en;
reg [31:0] main_upzeroexitii_196_stage0_reg;
reg  lpm_mult_main_197_203_en;
reg [31:0] main_197_203_stage0_reg;
reg  lpm_mult_main_197_207_en;
reg [31:0] main_197_207_stage0_reg;
reg  lpm_mult_main_decodeexiti_222_en;
reg [31:0] main_decodeexiti_222_stage0_reg;
reg  lpm_mult_main_decodeexiti_223_en;
reg [31:0] main_decodeexiti_223_stage0_reg;

/*   %11 = sdiv i32 %i1.05.i, 2*/
lpm_divide lpm_divide_main_resetexiti_11 (
	.quotient (lpm_divide_main_resetexiti_11_temp_out),
	.remain (main_resetexiti_11_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_resetexiti_11_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_resetexiti_11.lpm_pipeline = 32,
	lpm_divide_main_resetexiti_11.lpm_widthn = 32,
	lpm_divide_main_resetexiti_11.lpm_widthd = 32,
	lpm_divide_main_resetexiti_11.lpm_drepresentation = "SIGNED",
	lpm_divide_main_resetexiti_11.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_resetexiti_11.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


encode encode (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (encode_memory_controller_enable_a),
	.memory_controller_address_a (encode_memory_controller_address_a),
	.memory_controller_write_enable_a (encode_memory_controller_write_enable_a),
	.memory_controller_in_a (encode_memory_controller_in_a),
	.memory_controller_size_a (encode_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (encode_memory_controller_enable_b),
	.memory_controller_address_b (encode_memory_controller_address_b),
	.memory_controller_write_enable_b (encode_memory_controller_write_enable_b),
	.memory_controller_in_b (encode_memory_controller_in_b),
	.memory_controller_size_b (encode_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (encode_start),
	.finish (encode_finish),
	.return_val (encode_return_val),
	.arg_xin1 (encode_arg_xin1),
	.arg_xin2 (encode_arg_xin2)
);

defparam
	encode.tag_offset = tag_offset;

// Local Rams


// @qq6_code6_table = internal unnamed_addr constant [64 x i32] [i32 -136, i32 -136, i32 -136, i32 -136, i32 -24808, i32 -21904, i32 -19008, i32 -16704, i32 -14984, i32 -13512, i32 -12280, i32 -11192, i3...
rom_dual_port qq6_code6_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq6_code6_table_address_a ),
	.address_b( qq6_code6_table_address_b ),
	.q_a( qq6_code6_table_out_a ),
	.q_b( qq6_code6_table_out_b)
);
defparam qq6_code6_table.width_a = 32;
defparam qq6_code6_table.width_b = 32;
defparam qq6_code6_table.widthad_a = 6;
defparam qq6_code6_table.widthad_b = 6;
defparam qq6_code6_table.numwords_a = 64;
defparam qq6_code6_table.numwords_b = 64;
defparam qq6_code6_table.latency = 1;
defparam qq6_code6_table.init_file = "qq6_code6_table.mif";


// @dec_del_bpl = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_bpl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_bpl_address_a ),
	.address_b( dec_del_bpl_address_b ),
	.wren_a( dec_del_bpl_write_enable_a ),
	.wren_b( dec_del_bpl_write_enable_b ),
	.data_a( dec_del_bpl_in_a ),
	.data_b( dec_del_bpl_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_bpl_out_a ),
	.q_b( dec_del_bpl_out_b)
);
defparam dec_del_bpl.width_a = 32;
defparam dec_del_bpl.width_b = 32;
defparam dec_del_bpl.widthad_a = 3;
defparam dec_del_bpl.widthad_b = 3;
defparam dec_del_bpl.width_be_a = 1;
defparam dec_del_bpl.width_be_b = 1;
defparam dec_del_bpl.numwords_a = 6;
defparam dec_del_bpl.numwords_b = 6;
defparam dec_del_bpl.latency = 1;
defparam dec_del_bpl.init_file = "dec_del_bpl.mif";


// @dec_del_dltx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_dltx (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_dltx_address_a ),
	.address_b( dec_del_dltx_address_b ),
	.wren_a( dec_del_dltx_write_enable_a ),
	.wren_b( dec_del_dltx_write_enable_b ),
	.data_a( dec_del_dltx_in_a ),
	.data_b( dec_del_dltx_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_dltx_out_a ),
	.q_b( dec_del_dltx_out_b)
);
defparam dec_del_dltx.width_a = 32;
defparam dec_del_dltx.width_b = 32;
defparam dec_del_dltx.widthad_a = 3;
defparam dec_del_dltx.widthad_b = 3;
defparam dec_del_dltx.width_be_a = 1;
defparam dec_del_dltx.width_be_b = 1;
defparam dec_del_dltx.numwords_a = 6;
defparam dec_del_dltx.numwords_b = 6;
defparam dec_del_dltx.latency = 1;
defparam dec_del_dltx.init_file = "dec_del_dltx.mif";


// @dec_del_bph = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_bph (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_bph_address_a ),
	.address_b( dec_del_bph_address_b ),
	.wren_a( dec_del_bph_write_enable_a ),
	.wren_b( dec_del_bph_write_enable_b ),
	.data_a( dec_del_bph_in_a ),
	.data_b( dec_del_bph_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_bph_out_a ),
	.q_b( dec_del_bph_out_b)
);
defparam dec_del_bph.width_a = 32;
defparam dec_del_bph.width_b = 32;
defparam dec_del_bph.widthad_a = 3;
defparam dec_del_bph.widthad_b = 3;
defparam dec_del_bph.width_be_a = 1;
defparam dec_del_bph.width_be_b = 1;
defparam dec_del_bph.numwords_a = 6;
defparam dec_del_bph.numwords_b = 6;
defparam dec_del_bph.latency = 1;
defparam dec_del_bph.init_file = "dec_del_bph.mif";


// @dec_del_dhx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_dhx (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_dhx_address_a ),
	.address_b( dec_del_dhx_address_b ),
	.wren_a( dec_del_dhx_write_enable_a ),
	.wren_b( dec_del_dhx_write_enable_b ),
	.data_a( dec_del_dhx_in_a ),
	.data_b( dec_del_dhx_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_dhx_out_a ),
	.q_b( dec_del_dhx_out_b)
);
defparam dec_del_dhx.width_a = 32;
defparam dec_del_dhx.width_b = 32;
defparam dec_del_dhx.widthad_a = 3;
defparam dec_del_dhx.widthad_b = 3;
defparam dec_del_dhx.width_be_a = 1;
defparam dec_del_dhx.width_be_b = 1;
defparam dec_del_dhx.numwords_a = 6;
defparam dec_del_dhx.numwords_b = 6;
defparam dec_del_dhx.latency = 1;
defparam dec_del_dhx.init_file = "dec_del_dhx.mif";


// @accumc = internal unnamed_addr global [11 x i32] zeroinitializer, align 4
ram_dual_port accumc (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( accumc_address_a ),
	.address_b( accumc_address_b ),
	.wren_a( accumc_write_enable_a ),
	.wren_b( accumc_write_enable_b ),
	.data_a( accumc_in_a ),
	.data_b( accumc_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( accumc_out_a ),
	.q_b( accumc_out_b)
);
defparam accumc.width_a = 32;
defparam accumc.width_b = 32;
defparam accumc.widthad_a = 4;
defparam accumc.widthad_b = 4;
defparam accumc.width_be_a = 1;
defparam accumc.width_be_b = 1;
defparam accumc.numwords_a = 11;
defparam accumc.numwords_b = 11;
defparam accumc.latency = 1;
defparam accumc.init_file = "accumc.mif";


// @accumd = internal unnamed_addr global [11 x i32] zeroinitializer, align 4
ram_dual_port accumd (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( accumd_address_a ),
	.address_b( accumd_address_b ),
	.wren_a( accumd_write_enable_a ),
	.wren_b( accumd_write_enable_b ),
	.data_a( accumd_in_a ),
	.data_b( accumd_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( accumd_out_a ),
	.q_b( accumd_out_b)
);
defparam accumd.width_a = 32;
defparam accumd.width_b = 32;
defparam accumd.widthad_a = 4;
defparam accumd.widthad_b = 4;
defparam accumd.width_be_a = 1;
defparam accumd.width_be_b = 1;
defparam accumd.numwords_a = 11;
defparam accumd.numwords_b = 11;
defparam accumd.latency = 1;
defparam accumd.init_file = "accumd.mif";


// @test_data = internal unnamed_addr constant [100 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 67,...
rom_dual_port test_data (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_data_address_a ),
	.address_b( test_data_address_b ),
	.q_a( test_data_out_a ),
	.q_b( test_data_out_b)
);
defparam test_data.width_a = 32;
defparam test_data.width_b = 32;
defparam test_data.widthad_a = 7;
defparam test_data.widthad_b = 7;
defparam test_data.numwords_a = 100;
defparam test_data.numwords_b = 100;
defparam test_data.latency = 1;
defparam test_data.init_file = "test_data.mif";


// @test_compressed = internal unnamed_addr constant [100 x i32] [i32 253, i32 222, i32 119, i32 186, i32 244, i32 146, i32 32, i32 160, i32 236, i32 237, i32 238, i32 240, i32 241, i32 241, i32 242, i32...
rom_dual_port test_compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_compressed_address_a ),
	.address_b( test_compressed_address_b ),
	.q_a( test_compressed_out_a ),
	.q_b( test_compressed_out_b)
);
defparam test_compressed.width_a = 32;
defparam test_compressed.width_b = 32;
defparam test_compressed.widthad_a = 7;
defparam test_compressed.widthad_b = 7;
defparam test_compressed.numwords_a = 100;
defparam test_compressed.numwords_b = 100;
defparam test_compressed.latency = 1;
defparam test_compressed.init_file = "test_compressed.mif";


// @test_result = internal unnamed_addr constant [100 x i32] [i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 -2, i32 -1, i32 -2, i32 0, ...
rom_dual_port test_result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_result_address_a ),
	.address_b( test_result_address_b ),
	.q_a( test_result_out_a ),
	.q_b( test_result_out_b)
);
defparam test_result.width_a = 32;
defparam test_result.width_b = 32;
defparam test_result.widthad_a = 7;
defparam test_result.widthad_b = 7;
defparam test_result.numwords_a = 100;
defparam test_result.numwords_b = 100;
defparam test_result.latency = 1;
defparam test_result.init_file = "test_result.mif";


// @compressed = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( compressed_address_a ),
	.address_b( compressed_address_b ),
	.wren_a( compressed_write_enable_a ),
	.wren_b( compressed_write_enable_b ),
	.data_a( compressed_in_a ),
	.data_b( compressed_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( compressed_out_a ),
	.q_b( compressed_out_b)
);
defparam compressed.width_a = 32;
defparam compressed.width_b = 32;
defparam compressed.widthad_a = 7;
defparam compressed.widthad_b = 7;
defparam compressed.width_be_a = 1;
defparam compressed.width_be_b = 1;
defparam compressed.numwords_a = 100;
defparam compressed.numwords_b = 100;
defparam compressed.latency = 1;
defparam compressed.init_file = "compressed.mif";


// @result = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( result_address_a ),
	.address_b( result_address_b ),
	.wren_a( result_write_enable_a ),
	.wren_b( result_write_enable_b ),
	.data_a( result_in_a ),
	.data_b( result_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( result_out_a ),
	.q_b( result_out_b)
);
defparam result.width_a = 32;
defparam result.width_b = 32;
defparam result.widthad_a = 7;
defparam result.widthad_b = 7;
defparam result.width_be_a = 1;
defparam result.width_be_b = 1;
defparam result.numwords_a = 100;
defparam result.numwords_b = 100;
defparam result.latency = 1;
defparam result.init_file = "result.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %239*/
	/*   %240 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %.main_result.2) #1*/
	if ((cur_state == LEGUP_F_main_BB__239_184)) begin
		$write("Result: %d ", $signed(main_preheader_main_result2_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) finish <= 0;
	end
	/* main: %242*/
	/*   %243 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__242_185)) begin
		$write("RESULT: PASS ");
	end
	/* main: %244*/
	/*   %245 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__244_186)) begin
		$write("RESULT: FAIL");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_F_main_BB__1_10;
LEGUP_F_main_BB__119_134:
		next_state = LEGUP_F_main_BB__119_135;
LEGUP_F_main_BB__119_135:
		next_state = LEGUP_F_main_BB__119_136;
LEGUP_F_main_BB__119_136:
		next_state = LEGUP_F_main_BB__119_137;
LEGUP_F_main_BB__119_137:
	if ((main_119_exitcond19_reg == 1'd1))
		next_state = LEGUP_F_main_BB_filtezexit11ii_138;
	else if ((main_119_exitcond19_reg == 1'd0))
		next_state = LEGUP_F_main_BB__119_134;
LEGUP_F_main_BB__197_164:
		next_state = LEGUP_F_main_BB__197_165;
LEGUP_F_main_BB__197_165:
		next_state = LEGUP_F_main_BB__197_166;
LEGUP_F_main_BB__197_166:
		next_state = LEGUP_F_main_BB__197_167;
LEGUP_F_main_BB__197_167:
		next_state = LEGUP_F_main_BB__197_168;
LEGUP_F_main_BB__197_168:
	if ((main_197_exitcond29_reg == 1'd1))
		next_state = LEGUP_F_main_BB__210_169;
	else if ((main_197_exitcond29_reg == 1'd0))
		next_state = LEGUP_F_main_BB__197_164;
LEGUP_F_main_BB__1_10:
		next_state = LEGUP_F_main_BB__1_11;
LEGUP_F_main_BB__1_11:
	if ((main_1_exitcond63_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2iipreheader_12;
	else if ((main_1_exitcond63_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_10;
LEGUP_F_main_BB__210_169:
		next_state = LEGUP_F_main_BB__210_170;
LEGUP_F_main_BB__210_170:
		next_state = LEGUP_F_main_BB__215_171;
LEGUP_F_main_BB__215_171:
		next_state = LEGUP_F_main_BB__215_172;
LEGUP_F_main_BB__215_172:
		next_state = LEGUP_F_main_BB__215_173;
LEGUP_F_main_BB__215_173:
		next_state = LEGUP_F_main_BB__215_174;
LEGUP_F_main_BB__215_174:
	if ((main_215_exitcond34_reg == 1'd1))
		next_state = LEGUP_F_main_BB_decodeexiti_175;
	else if ((main_215_exitcond34_reg == 1'd0))
		next_state = LEGUP_F_main_BB__215_171;
LEGUP_F_main_BB__239_184:
	if ((main_239_241 == 1'd1))
		next_state = LEGUP_F_main_BB__242_185;
	else if ((main_239_241 == 1'd0))
		next_state = LEGUP_F_main_BB__244_186;
LEGUP_F_main_BB__242_185:
		next_state = LEGUP_F_main_BB__246_187;
LEGUP_F_main_BB__244_186:
		next_state = LEGUP_F_main_BB__246_187;
LEGUP_F_main_BB__246_187:
		next_state = LEGUP_0;
LEGUP_F_main_BB__30_100:
		next_state = LEGUP_F_main_BB__30_101;
LEGUP_F_main_BB__30_101:
		next_state = LEGUP_F_main_BB__30_102;
LEGUP_F_main_BB__30_102:
		next_state = LEGUP_F_main_BB__30_103;
LEGUP_F_main_BB__30_103:
		next_state = LEGUP_F_main_BB__38_104;
LEGUP_F_main_BB__30_70:
		next_state = LEGUP_F_main_BB__30_71;
LEGUP_F_main_BB__30_71:
		next_state = LEGUP_F_main_BB__30_72;
LEGUP_F_main_BB__30_72:
		next_state = LEGUP_F_main_BB__30_73;
LEGUP_F_main_BB__30_73:
		next_state = LEGUP_F_main_BB__30_74;
LEGUP_F_main_BB__30_74:
		next_state = LEGUP_F_main_BB__30_75;
LEGUP_F_main_BB__30_75:
		next_state = LEGUP_F_main_BB__30_76;
LEGUP_F_main_BB__30_76:
		next_state = LEGUP_F_main_BB__30_77;
LEGUP_F_main_BB__30_77:
		next_state = LEGUP_F_main_BB__30_78;
LEGUP_F_main_BB__30_78:
		next_state = LEGUP_F_main_BB__30_79;
LEGUP_F_main_BB__30_79:
		next_state = LEGUP_F_main_BB__30_80;
LEGUP_F_main_BB__30_80:
		next_state = LEGUP_F_main_BB__30_81;
LEGUP_F_main_BB__30_81:
		next_state = LEGUP_F_main_BB__30_82;
LEGUP_F_main_BB__30_82:
		next_state = LEGUP_F_main_BB__30_83;
LEGUP_F_main_BB__30_83:
		next_state = LEGUP_F_main_BB__30_84;
LEGUP_F_main_BB__30_84:
		next_state = LEGUP_F_main_BB__30_85;
LEGUP_F_main_BB__30_85:
		next_state = LEGUP_F_main_BB__30_86;
LEGUP_F_main_BB__30_86:
		next_state = LEGUP_F_main_BB__30_87;
LEGUP_F_main_BB__30_87:
		next_state = LEGUP_F_main_BB__30_88;
LEGUP_F_main_BB__30_88:
		next_state = LEGUP_F_main_BB__30_89;
LEGUP_F_main_BB__30_89:
		next_state = LEGUP_F_main_BB__30_90;
LEGUP_F_main_BB__30_90:
		next_state = LEGUP_F_main_BB__30_91;
LEGUP_F_main_BB__30_91:
		next_state = LEGUP_F_main_BB__30_92;
LEGUP_F_main_BB__30_92:
		next_state = LEGUP_F_main_BB__30_93;
LEGUP_F_main_BB__30_93:
		next_state = LEGUP_F_main_BB__30_94;
LEGUP_F_main_BB__30_94:
		next_state = LEGUP_F_main_BB__30_95;
LEGUP_F_main_BB__30_95:
		next_state = LEGUP_F_main_BB__30_96;
LEGUP_F_main_BB__30_96:
		next_state = LEGUP_F_main_BB__30_97;
LEGUP_F_main_BB__30_97:
		next_state = LEGUP_F_main_BB__30_98;
LEGUP_F_main_BB__30_98:
		next_state = LEGUP_F_main_BB__30_99;
LEGUP_F_main_BB__30_99:
		next_state = LEGUP_F_main_BB__30_100;
LEGUP_F_main_BB__38_104:
		next_state = LEGUP_F_main_BB__38_105;
LEGUP_F_main_BB__38_105:
		next_state = LEGUP_F_main_BB__38_106;
LEGUP_F_main_BB__38_106:
		next_state = LEGUP_F_main_BB__38_107;
LEGUP_F_main_BB__38_107:
	if ((main_38_exitcond7_reg == 1'd1))
		next_state = LEGUP_F_main_BB_filtezexitii_108;
	else if ((main_38_exitcond7_reg == 1'd0))
		next_state = LEGUP_F_main_BB__38_104;
LEGUP_F_main_BB_adpcm_mainexit_179:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_180;
LEGUP_F_main_BB_adpcm_mainexit_180:
	if ((main_adpcm_mainexit_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderpreheader_181;
	else if ((main_adpcm_mainexit_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_adpcm_mainexit_179;
LEGUP_F_main_BB_adpcm_mainexitpreheader_178:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_179;
LEGUP_F_main_BB_decodeexiti_175:
		next_state = LEGUP_F_main_BB_decodeexiti_176;
LEGUP_F_main_BB_decodeexiti_176:
		next_state = LEGUP_F_main_BB_decodeexiti_177;
LEGUP_F_main_BB_decodeexiti_177:
	if ((main_decodeexiti_exitcond41_reg == 1'd1))
		next_state = LEGUP_F_main_BB_adpcm_mainexitpreheader_178;
	else if ((main_decodeexiti_exitcond41_reg == 1'd0))
		next_state = LEGUP_F_main_BB__30_70;
LEGUP_F_main_BB_filtezexit11ii_138:
		next_state = LEGUP_F_main_BB_filtezexit11ii_139;
LEGUP_F_main_BB_filtezexit11ii_139:
		next_state = LEGUP_F_main_BB_filtezexit11ii_140;
LEGUP_F_main_BB_filtezexit11ii_140:
		next_state = LEGUP_F_main_BB_filtezexit11ii_141;
LEGUP_F_main_BB_filtezexit11ii_141:
		next_state = LEGUP_F_main_BB_filtezexit11ii_142;
LEGUP_F_main_BB_filtezexit11ii_142:
		next_state = LEGUP_F_main_BB_filtezexit11ii_143;
LEGUP_F_main_BB_filtezexit11ii_143:
	if ((main_filtezexit11ii_153_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderiiipreheader_145;
	else if ((main_filtezexit11ii_153_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1iiipreheader_144;
LEGUP_F_main_BB_filtezexitii_108:
		next_state = LEGUP_F_main_BB_filtezexitii_109;
LEGUP_F_main_BB_filtezexitii_109:
		next_state = LEGUP_F_main_BB_filtezexitii_110;
LEGUP_F_main_BB_filtezexitii_110:
		next_state = LEGUP_F_main_BB_filtezexitii_111;
LEGUP_F_main_BB_filtezexitii_111:
		next_state = LEGUP_F_main_BB_filtezexitii_112;
LEGUP_F_main_BB_filtezexitii_112:
		next_state = LEGUP_F_main_BB_filtezexitii_113;
LEGUP_F_main_BB_filtezexitii_113:
	if ((main_filtezexitii_75_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi21iipreheader_115;
	else if ((main_filtezexitii_75_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1i24iipreheader_114;
LEGUP_F_main_BB_preheader1i24ii_122:
		next_state = LEGUP_F_main_BB_preheader1i24ii_123;
LEGUP_F_main_BB_preheader1i24ii_123:
		next_state = LEGUP_F_main_BB_preheader1i24ii_124;
LEGUP_F_main_BB_preheader1i24ii_124:
	if ((main_preheader1i24ii_exitcond10_reg == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexit25iiloopexit2_128;
	else if ((main_preheader1i24ii_exitcond10_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_125;
LEGUP_F_main_BB_preheader1i24iipreheader_114:
		next_state = LEGUP_F_main_BB_preheader1i24ii_122;
LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_125:
		next_state = LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_126;
LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_126:
		next_state = LEGUP_F_main_BB_preheader1i24ii_122;
LEGUP_F_main_BB_preheader1ii_16:
		next_state = LEGUP_F_main_BB_preheader1ii_17;
LEGUP_F_main_BB_preheader1ii_17:
	if ((main_preheader1ii_exitcond56_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderiipreheader_18;
	else if ((main_preheader1ii_exitcond56_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1ii_16;
LEGUP_F_main_BB_preheader1iii_152:
		next_state = LEGUP_F_main_BB_preheader1iii_153;
LEGUP_F_main_BB_preheader1iii_153:
		next_state = LEGUP_F_main_BB_preheader1iii_154;
LEGUP_F_main_BB_preheader1iii_154:
	if ((main_preheader1iii_exitcond22_reg == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexitiiloopexit1_158;
	else if ((main_preheader1iii_exitcond22_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_155;
LEGUP_F_main_BB_preheader1iiipreheader_144:
		next_state = LEGUP_F_main_BB_preheader1iii_152;
LEGUP_F_main_BB_preheader1iipreheader_15:
		next_state = LEGUP_F_main_BB_preheader1ii_16;
LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_155:
		next_state = LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_156;
LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_156:
		next_state = LEGUP_F_main_BB_preheader1iii_152;
LEGUP_F_main_BB_preheader2ii_13:
		next_state = LEGUP_F_main_BB_preheader2ii_14;
LEGUP_F_main_BB_preheader2ii_14:
	if ((main_preheader2ii_exitcond58_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader1iipreheader_15;
	else if ((main_preheader2ii_exitcond58_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader2ii_13;
LEGUP_F_main_BB_preheader2iipreheader_12:
		next_state = LEGUP_F_main_BB_preheader2ii_13;
LEGUP_F_main_BB_preheader_182:
		next_state = LEGUP_F_main_BB_preheader_183;
LEGUP_F_main_BB_preheader_183:
	if ((main_preheader_exitcond3_reg == 1'd1))
		next_state = LEGUP_F_main_BB__239_184;
	else if ((main_preheader_exitcond3_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader_182;
LEGUP_F_main_BB_preheaderi21ii_116:
		next_state = LEGUP_F_main_BB_preheaderi21ii_117;
LEGUP_F_main_BB_preheaderi21ii_117:
		next_state = LEGUP_F_main_BB_preheaderi21ii_118;
LEGUP_F_main_BB_preheaderi21ii_118:
	if ((main_preheaderi21ii_exitcond14_reg == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexit25iiloopexit_127;
	else if ((main_preheaderi21ii_exitcond14_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_119;
LEGUP_F_main_BB_preheaderi21iipreheader_115:
		next_state = LEGUP_F_main_BB_preheaderi21ii_116;
LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_119:
		next_state = LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_120;
LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_120:
		next_state = LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_121;
LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_121:
		next_state = LEGUP_F_main_BB_preheaderi21ii_116;
LEGUP_F_main_BB_preheaderi_64:
		next_state = LEGUP_function_call_65;
LEGUP_F_main_BB_preheaderi_66:
		next_state = LEGUP_F_main_BB_preheaderi_67;
LEGUP_F_main_BB_preheaderi_67:
		next_state = LEGUP_F_main_BB_preheaderi_68;
LEGUP_F_main_BB_preheaderi_68:
		next_state = LEGUP_F_main_BB_preheaderi_69;
LEGUP_F_main_BB_preheaderi_69:
		next_state = LEGUP_F_main_BB__30_70;
LEGUP_F_main_BB_preheaderii_19:
		next_state = LEGUP_F_main_BB_preheaderii_20;
LEGUP_F_main_BB_preheaderii_20:
	if ((main_preheaderii_exitcond53_reg == 1'd1))
		next_state = LEGUP_F_main_BB_resetexitipreheader_21;
	else if ((main_preheaderii_exitcond53_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderii_19;
LEGUP_F_main_BB_preheaderiii_146:
		next_state = LEGUP_F_main_BB_preheaderiii_147;
LEGUP_F_main_BB_preheaderiii_147:
		next_state = LEGUP_F_main_BB_preheaderiii_148;
LEGUP_F_main_BB_preheaderiii_148:
	if ((main_preheaderiii_exitcond26_reg == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexitiiloopexit_157;
	else if ((main_preheaderiii_exitcond26_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_149;
LEGUP_F_main_BB_preheaderiiipreheader_145:
		next_state = LEGUP_F_main_BB_preheaderiii_146;
LEGUP_F_main_BB_preheaderiipreheader_18:
		next_state = LEGUP_F_main_BB_preheaderii_19;
LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_149:
		next_state = LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_150;
LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_150:
		next_state = LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_151;
LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_151:
		next_state = LEGUP_F_main_BB_preheaderiii_146;
LEGUP_F_main_BB_preheaderpreheader_181:
		next_state = LEGUP_F_main_BB_preheader_182;
LEGUP_F_main_BB_resetexiti_22:
		next_state = LEGUP_F_main_BB_resetexiti_23;
LEGUP_F_main_BB_resetexiti_23:
		next_state = LEGUP_F_main_BB_resetexiti_24;
LEGUP_F_main_BB_resetexiti_24:
		next_state = LEGUP_function_call_25;
LEGUP_F_main_BB_resetexiti_26:
		next_state = LEGUP_F_main_BB_resetexiti_27;
LEGUP_F_main_BB_resetexiti_27:
		next_state = LEGUP_F_main_BB_resetexiti_28;
LEGUP_F_main_BB_resetexiti_28:
		next_state = LEGUP_F_main_BB_resetexiti_29;
LEGUP_F_main_BB_resetexiti_29:
		next_state = LEGUP_F_main_BB_resetexiti_30;
LEGUP_F_main_BB_resetexiti_30:
		next_state = LEGUP_F_main_BB_resetexiti_31;
LEGUP_F_main_BB_resetexiti_31:
		next_state = LEGUP_F_main_BB_resetexiti_32;
LEGUP_F_main_BB_resetexiti_32:
		next_state = LEGUP_F_main_BB_resetexiti_33;
LEGUP_F_main_BB_resetexiti_33:
		next_state = LEGUP_F_main_BB_resetexiti_34;
LEGUP_F_main_BB_resetexiti_34:
		next_state = LEGUP_F_main_BB_resetexiti_35;
LEGUP_F_main_BB_resetexiti_35:
		next_state = LEGUP_F_main_BB_resetexiti_36;
LEGUP_F_main_BB_resetexiti_36:
		next_state = LEGUP_F_main_BB_resetexiti_37;
LEGUP_F_main_BB_resetexiti_37:
		next_state = LEGUP_F_main_BB_resetexiti_38;
LEGUP_F_main_BB_resetexiti_38:
		next_state = LEGUP_F_main_BB_resetexiti_39;
LEGUP_F_main_BB_resetexiti_39:
		next_state = LEGUP_F_main_BB_resetexiti_40;
LEGUP_F_main_BB_resetexiti_40:
		next_state = LEGUP_F_main_BB_resetexiti_41;
LEGUP_F_main_BB_resetexiti_41:
		next_state = LEGUP_F_main_BB_resetexiti_42;
LEGUP_F_main_BB_resetexiti_42:
		next_state = LEGUP_F_main_BB_resetexiti_43;
LEGUP_F_main_BB_resetexiti_43:
		next_state = LEGUP_F_main_BB_resetexiti_44;
LEGUP_F_main_BB_resetexiti_44:
		next_state = LEGUP_F_main_BB_resetexiti_45;
LEGUP_F_main_BB_resetexiti_45:
		next_state = LEGUP_F_main_BB_resetexiti_46;
LEGUP_F_main_BB_resetexiti_46:
		next_state = LEGUP_F_main_BB_resetexiti_47;
LEGUP_F_main_BB_resetexiti_47:
		next_state = LEGUP_F_main_BB_resetexiti_48;
LEGUP_F_main_BB_resetexiti_48:
		next_state = LEGUP_F_main_BB_resetexiti_49;
LEGUP_F_main_BB_resetexiti_49:
		next_state = LEGUP_F_main_BB_resetexiti_50;
LEGUP_F_main_BB_resetexiti_50:
		next_state = LEGUP_F_main_BB_resetexiti_51;
LEGUP_F_main_BB_resetexiti_51:
		next_state = LEGUP_F_main_BB_resetexiti_52;
LEGUP_F_main_BB_resetexiti_52:
		next_state = LEGUP_F_main_BB_resetexiti_53;
LEGUP_F_main_BB_resetexiti_53:
		next_state = LEGUP_F_main_BB_resetexiti_54;
LEGUP_F_main_BB_resetexiti_54:
		next_state = LEGUP_F_main_BB_resetexiti_55;
LEGUP_F_main_BB_resetexiti_55:
		next_state = LEGUP_F_main_BB_resetexiti_56;
LEGUP_F_main_BB_resetexiti_56:
		next_state = LEGUP_F_main_BB_resetexiti_57;
LEGUP_F_main_BB_resetexiti_57:
		next_state = LEGUP_function_call_58;
LEGUP_F_main_BB_resetexiti_59:
		next_state = LEGUP_F_main_BB_resetexiti_60;
LEGUP_F_main_BB_resetexiti_60:
		next_state = LEGUP_function_call_61;
LEGUP_F_main_BB_resetexiti_62:
		next_state = LEGUP_F_main_BB_resetexiti_63;
LEGUP_F_main_BB_resetexiti_63:
	if ((main_resetexiti_exitcond46_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi_64;
	else if ((main_resetexiti_exitcond46_reg == 1'd0))
		next_state = LEGUP_F_main_BB_resetexiti_22;
LEGUP_F_main_BB_resetexitipreheader_21:
		next_state = LEGUP_F_main_BB_resetexiti_22;
LEGUP_F_main_BB_upzeroexit25ii_129:
		next_state = LEGUP_F_main_BB_upzeroexit25ii_130;
LEGUP_F_main_BB_upzeroexit25ii_130:
		next_state = LEGUP_F_main_BB_upzeroexit25ii_131;
LEGUP_F_main_BB_upzeroexit25ii_131:
		next_state = LEGUP_F_main_BB_upzeroexit25ii_132;
LEGUP_F_main_BB_upzeroexit25ii_132:
		next_state = LEGUP_F_main_BB_upzeroexit25ii_133;
LEGUP_F_main_BB_upzeroexit25ii_133:
		next_state = LEGUP_F_main_BB__119_134;
LEGUP_F_main_BB_upzeroexit25iiloopexit2_128:
		next_state = LEGUP_F_main_BB_upzeroexit25ii_129;
LEGUP_F_main_BB_upzeroexit25iiloopexit_127:
		next_state = LEGUP_F_main_BB_upzeroexit25ii_129;
LEGUP_F_main_BB_upzeroexitii_159:
		next_state = LEGUP_F_main_BB_upzeroexitii_160;
LEGUP_F_main_BB_upzeroexitii_160:
		next_state = LEGUP_F_main_BB_upzeroexitii_161;
LEGUP_F_main_BB_upzeroexitii_161:
		next_state = LEGUP_F_main_BB_upzeroexitii_162;
LEGUP_F_main_BB_upzeroexitii_162:
		next_state = LEGUP_F_main_BB_upzeroexitii_163;
LEGUP_F_main_BB_upzeroexitii_163:
		next_state = LEGUP_F_main_BB__197_164;
LEGUP_F_main_BB_upzeroexitiiloopexit1_158:
		next_state = LEGUP_F_main_BB_upzeroexitii_159;
LEGUP_F_main_BB_upzeroexitiiloopexit_157:
		next_state = LEGUP_F_main_BB_upzeroexitii_159;
LEGUP_function_call_25:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_resetexiti_26;
LEGUP_function_call_58:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_resetexiti_59;
LEGUP_function_call_61:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_resetexiti_62;
LEGUP_function_call_65:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi_66;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %i.06.i.i = phi i32 [ 0, %0 ], [ %2, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_9) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_i06ii = 32'd0;
	end
	/* main: %1*/
	/*   %i.06.i.i = phi i32 [ 0, %0 ], [ %2, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__1_11) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond63_reg == 1'd0))) */ begin
		main_1_i06ii = main_1_2_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %i.06.i.i = phi i32 [ 0, %0 ], [ %2, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_9) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_i06ii_reg <= main_1_i06ii;
		if (start == 1'b0 && ^(main_1_i06ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i06ii_reg"); $finish; end
	end
	/* main: %1*/
	/*   %i.06.i.i = phi i32 [ 0, %0 ], [ %2, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_11) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond63_reg == 1'd0))) begin
		main_1_i06ii_reg <= main_1_i06ii;
		if (start == 1'b0 && ^(main_1_i06ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i06ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep64 = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %i.06.i.i*/
		main_1_scevgep64 = (1'd0 | (4 * main_1_i06ii_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep64 = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %i.06.i.i*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		main_1_scevgep64_reg <= main_1_scevgep64;
		if (start == 1'b0 && ^(main_1_scevgep64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep65 = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %i.06.i.i*/
		main_1_scevgep65 = (1'd0 | (4 * main_1_i06ii_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep65 = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %i.06.i.i*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		main_1_scevgep65_reg <= main_1_scevgep65;
		if (start == 1'b0 && ^(main_1_scevgep65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep66 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %i.06.i.i*/
		main_1_scevgep66 = (`TAG_g_delay_dhx_a | (4 * main_1_i06ii_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep66 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %i.06.i.i*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		main_1_scevgep66_reg <= main_1_scevgep66;
		if (start == 1'b0 && ^(main_1_scevgep66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep67 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %i.06.i.i*/
		main_1_scevgep67 = (`TAG_g_delay_dltx_a | (4 * main_1_i06ii_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep67 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %i.06.i.i*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		main_1_scevgep67_reg <= main_1_scevgep67;
		if (start == 1'b0 && ^(main_1_scevgep67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = add nsw i32 %i.06.i.i, 1*/
		main_1_2 = (main_1_i06ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = add nsw i32 %i.06.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond63 = icmp eq i32 %2, 6*/
		main_1_exitcond63 = (main_1_2 == 32'd6);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond63 = icmp eq i32 %2, 6*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		main_1_exitcond63_reg <= main_1_exitcond63;
		if (start == 1'b0 && ^(main_1_exitcond63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i.i*/
	/*   %i.15.i.i = phi i32 [ %3, %.preheader2.i.i ], [ 0, %.preheader2.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2iipreheader_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2ii_i15ii = 32'd0;
	end
	/* main: %.preheader2.i.i*/
	/*   %i.15.i.i = phi i32 [ %3, %.preheader2.i.i ], [ 0, %.preheader2.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader2ii_14) & (memory_controller_waitrequest == 1'd0)) & (main_preheader2ii_exitcond58_reg == 1'd0))) */ begin
		main_preheader2ii_i15ii = main_preheader2ii_3_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader2.i.i*/
	/*   %i.15.i.i = phi i32 [ %3, %.preheader2.i.i ], [ 0, %.preheader2.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2iipreheader_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2ii_i15ii_reg <= main_preheader2ii_i15ii;
		if (start == 1'b0 && ^(main_preheader2ii_i15ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2ii_i15ii_reg"); $finish; end
	end
	/* main: %.preheader2.i.i*/
	/*   %i.15.i.i = phi i32 [ %3, %.preheader2.i.i ], [ 0, %.preheader2.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader2ii_14) & (memory_controller_waitrequest == 1'd0)) & (main_preheader2ii_exitcond58_reg == 1'd0))) begin
		main_preheader2ii_i15ii_reg <= main_preheader2ii_i15ii;
		if (start == 1'b0 && ^(main_preheader2ii_i15ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2ii_i15ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i.i*/
	/*   %scevgep59 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %i.15.i.i*/
		main_preheader2ii_scevgep59 = (1'd0 | (4 * main_preheader2ii_i15ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader2.i.i*/
	/*   %scevgep59 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %i.15.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		main_preheader2ii_scevgep59_reg <= main_preheader2ii_scevgep59;
		if (start == 1'b0 && ^(main_preheader2ii_scevgep59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2ii_scevgep59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i.i*/
	/*   %scevgep60 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %i.15.i.i*/
		main_preheader2ii_scevgep60 = (1'd0 | (4 * main_preheader2ii_i15ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader2.i.i*/
	/*   %scevgep60 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %i.15.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		main_preheader2ii_scevgep60_reg <= main_preheader2ii_scevgep60;
		if (start == 1'b0 && ^(main_preheader2ii_scevgep60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2ii_scevgep60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i.i*/
	/*   %scevgep61 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %i.15.i.i*/
		main_preheader2ii_scevgep61 = (`TAG_g_delay_bph_a | (4 * main_preheader2ii_i15ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader2.i.i*/
	/*   %scevgep61 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %i.15.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		main_preheader2ii_scevgep61_reg <= main_preheader2ii_scevgep61;
		if (start == 1'b0 && ^(main_preheader2ii_scevgep61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2ii_scevgep61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i.i*/
	/*   %scevgep62 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %i.15.i.i*/
		main_preheader2ii_scevgep62 = (`TAG_g_delay_bpl_a | (4 * main_preheader2ii_i15ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader2.i.i*/
	/*   %scevgep62 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %i.15.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		main_preheader2ii_scevgep62_reg <= main_preheader2ii_scevgep62;
		if (start == 1'b0 && ^(main_preheader2ii_scevgep62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2ii_scevgep62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i.i*/
	/*   %3 = add nsw i32 %i.15.i.i, 1*/
		main_preheader2ii_3 = (main_preheader2ii_i15ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader2.i.i*/
	/*   %3 = add nsw i32 %i.15.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		main_preheader2ii_3_reg <= main_preheader2ii_3;
		if (start == 1'b0 && ^(main_preheader2ii_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2ii_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i.i*/
	/*   %exitcond58 = icmp eq i32 %3, 6*/
		main_preheader2ii_exitcond58 = (main_preheader2ii_3 == 32'd6);
end
always @(posedge clk) begin
	/* main: %.preheader2.i.i*/
	/*   %exitcond58 = icmp eq i32 %3, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		main_preheader2ii_exitcond58_reg <= main_preheader2ii_exitcond58;
		if (start == 1'b0 && ^(main_preheader2ii_exitcond58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2ii_exitcond58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i*/
	/*   %i.24.i.i = phi i32 [ %4, %.preheader1.i.i ], [ 0, %.preheader1.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1iipreheader_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1ii_i24ii = 32'd0;
	end
	/* main: %.preheader1.i.i*/
	/*   %i.24.i.i = phi i32 [ %4, %.preheader1.i.i ], [ 0, %.preheader1.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader1ii_17) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1ii_exitcond56_reg == 1'd0))) */ begin
		main_preheader1ii_i24ii = main_preheader1ii_4_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i*/
	/*   %i.24.i.i = phi i32 [ %4, %.preheader1.i.i ], [ 0, %.preheader1.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1iipreheader_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1ii_i24ii_reg <= main_preheader1ii_i24ii;
		if (start == 1'b0 && ^(main_preheader1ii_i24ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii_i24ii_reg"); $finish; end
	end
	/* main: %.preheader1.i.i*/
	/*   %i.24.i.i = phi i32 [ %4, %.preheader1.i.i ], [ 0, %.preheader1.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1ii_17) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1ii_exitcond56_reg == 1'd0))) begin
		main_preheader1ii_i24ii_reg <= main_preheader1ii_i24ii;
		if (start == 1'b0 && ^(main_preheader1ii_i24ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii_i24ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i*/
	/*   %scevgep57 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %i.24.i.i*/
		main_preheader1ii_scevgep57 = (`TAG_g_tqmf_a | (4 * main_preheader1ii_i24ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i*/
	/*   %scevgep57 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %i.24.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii_16)) begin
		main_preheader1ii_scevgep57_reg <= main_preheader1ii_scevgep57;
		if (start == 1'b0 && ^(main_preheader1ii_scevgep57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii_scevgep57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i*/
	/*   %4 = add nsw i32 %i.24.i.i, 1*/
		main_preheader1ii_4 = (main_preheader1ii_i24ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i*/
	/*   %4 = add nsw i32 %i.24.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii_16)) begin
		main_preheader1ii_4_reg <= main_preheader1ii_4;
		if (start == 1'b0 && ^(main_preheader1ii_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i*/
	/*   %exitcond56 = icmp eq i32 %4, 24*/
		main_preheader1ii_exitcond56 = (main_preheader1ii_4 == 32'd24);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i*/
	/*   %exitcond56 = icmp eq i32 %4, 24*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii_16)) begin
		main_preheader1ii_exitcond56_reg <= main_preheader1ii_exitcond56;
		if (start == 1'b0 && ^(main_preheader1ii_exitcond56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii_exitcond56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %i.33.i.i = phi i32 [ %5, %.preheader.i.i ], [ 0, %.preheader.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderiipreheader_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderii_i33ii = 32'd0;
	end
	/* main: %.preheader.i.i*/
	/*   %i.33.i.i = phi i32 [ %5, %.preheader.i.i ], [ 0, %.preheader.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderii_20) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_exitcond53_reg == 1'd0))) */ begin
		main_preheaderii_i33ii = main_preheaderii_5_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %i.33.i.i = phi i32 [ %5, %.preheader.i.i ], [ 0, %.preheader.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderiipreheader_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderii_i33ii_reg <= main_preheaderii_i33ii;
		if (start == 1'b0 && ^(main_preheaderii_i33ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_i33ii_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %i.33.i.i = phi i32 [ %5, %.preheader.i.i ], [ 0, %.preheader.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii_20) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_exitcond53_reg == 1'd0))) begin
		main_preheaderii_i33ii_reg <= main_preheaderii_i33ii;
		if (start == 1'b0 && ^(main_preheaderii_i33ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_i33ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep54 = getelementptr [11 x i32]* @accumd, i32 0, i32 %i.33.i.i*/
		main_preheaderii_scevgep54 = (1'd0 | (4 * main_preheaderii_i33ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep54 = getelementptr [11 x i32]* @accumd, i32 0, i32 %i.33.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_19)) begin
		main_preheaderii_scevgep54_reg <= main_preheaderii_scevgep54;
		if (start == 1'b0 && ^(main_preheaderii_scevgep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_scevgep54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep55 = getelementptr [11 x i32]* @accumc, i32 0, i32 %i.33.i.i*/
		main_preheaderii_scevgep55 = (1'd0 | (4 * main_preheaderii_i33ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %scevgep55 = getelementptr [11 x i32]* @accumc, i32 0, i32 %i.33.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_19)) begin
		main_preheaderii_scevgep55_reg <= main_preheaderii_scevgep55;
		if (start == 1'b0 && ^(main_preheaderii_scevgep55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_scevgep55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %5 = add nsw i32 %i.33.i.i, 1*/
		main_preheaderii_5 = (main_preheaderii_i33ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %5 = add nsw i32 %i.33.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_19)) begin
		main_preheaderii_5_reg <= main_preheaderii_5;
		if (start == 1'b0 && ^(main_preheaderii_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %exitcond53 = icmp eq i32 %5, 11*/
		main_preheaderii_exitcond53 = (main_preheaderii_5 == 32'd11);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %exitcond53 = icmp eq i32 %5, 11*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_19)) begin
		main_preheaderii_exitcond53_reg <= main_preheaderii_exitcond53;
		if (start == 1'b0 && ^(main_preheaderii_exitcond53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_exitcond53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %indvar44 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next45, %reset.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_indvar44 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %indvar44 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next45, %reset.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_resetexiti_63) & (memory_controller_waitrequest == 1'd0)) & (main_resetexiti_exitcond46_reg == 1'd0))) */ begin
		main_resetexiti_indvar44 = main_resetexiti_indvarnext45_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %indvar44 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next45, %reset.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_indvar44_reg <= main_resetexiti_indvar44;
		if (start == 1'b0 && ^(main_resetexiti_indvar44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_indvar44_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %indvar44 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next45, %reset.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_resetexiti_63) & (memory_controller_waitrequest == 1'd0)) & (main_resetexiti_exitcond46_reg == 1'd0))) begin
		main_resetexiti_indvar44_reg <= main_resetexiti_indvar44;
		if (start == 1'b0 && ^(main_resetexiti_indvar44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_indvar44_reg"); $finish; end
	end
end
always @(*) begin
	main_resetexiti_i105i = main_resetexiti_i105i_stage0_reg;
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %i1.05.i = mul i32 %indvar44, 6*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		main_resetexiti_i105i_reg <= main_resetexiti_i105i;
		if (start == 1'b0 && ^(main_resetexiti_i105i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_i105i_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %i1.05.i = mul i32 %indvar44, 6*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		main_resetexiti_i105i_reg <= main_resetexiti_i105i;
		if (start == 1'b0 && ^(main_resetexiti_i105i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_i105i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %6 = add i32 %i1.05.i, 5*/
		main_resetexiti_6 = (main_resetexiti_i105i + 32'd5);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %6 = add i32 %i1.05.i, 5*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		main_resetexiti_6_reg <= main_resetexiti_6;
		if (start == 1'b0 && ^(main_resetexiti_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %scevgep47 = getelementptr [100 x i32]* @test_data, i32 0, i32 %6*/
		main_resetexiti_scevgep47 = (1'd0 | (4 * main_resetexiti_6_reg));
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %scevgep47 = getelementptr [100 x i32]* @test_data, i32 0, i32 %6*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_24)) begin
		main_resetexiti_scevgep47_reg <= main_resetexiti_scevgep47;
		if (start == 1'b0 && ^(main_resetexiti_scevgep47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_scevgep47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %7 = add i32 %i1.05.i, 4*/
		main_resetexiti_7 = (main_resetexiti_i105i + 32'd4);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %7 = add i32 %i1.05.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		main_resetexiti_7_reg <= main_resetexiti_7;
		if (start == 1'b0 && ^(main_resetexiti_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %scevgep48 = getelementptr [100 x i32]* @test_data, i32 0, i32 %7*/
		main_resetexiti_scevgep48 = (1'd0 | (4 * main_resetexiti_7_reg));
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %scevgep48 = getelementptr [100 x i32]* @test_data, i32 0, i32 %7*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_24)) begin
		main_resetexiti_scevgep48_reg <= main_resetexiti_scevgep48;
		if (start == 1'b0 && ^(main_resetexiti_scevgep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_scevgep48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %8 = add i32 %i1.05.i, 3*/
		main_resetexiti_8 = (main_resetexiti_i105i + 32'd3);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %8 = add i32 %i1.05.i, 3*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		main_resetexiti_8_reg <= main_resetexiti_8;
		if (start == 1'b0 && ^(main_resetexiti_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %scevgep49 = getelementptr [100 x i32]* @test_data, i32 0, i32 %8*/
		main_resetexiti_scevgep49 = (1'd0 | (4 * main_resetexiti_8_reg));
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %scevgep49 = getelementptr [100 x i32]* @test_data, i32 0, i32 %8*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_24)) begin
		main_resetexiti_scevgep49_reg <= main_resetexiti_scevgep49;
		if (start == 1'b0 && ^(main_resetexiti_scevgep49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_scevgep49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %9 = add i32 %i1.05.i, 2*/
		main_resetexiti_9 = (main_resetexiti_i105i + 32'd2);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %9 = add i32 %i1.05.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		main_resetexiti_9_reg <= main_resetexiti_9;
		if (start == 1'b0 && ^(main_resetexiti_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %scevgep50 = getelementptr [100 x i32]* @test_data, i32 0, i32 %9*/
		main_resetexiti_scevgep50 = (1'd0 | (4 * main_resetexiti_9_reg));
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %scevgep50 = getelementptr [100 x i32]* @test_data, i32 0, i32 %9*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_24)) begin
		main_resetexiti_scevgep50_reg <= main_resetexiti_scevgep50;
		if (start == 1'b0 && ^(main_resetexiti_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_scevgep50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %10 = or i32 %i1.05.i, 1*/
		main_resetexiti_10 = (main_resetexiti_i105i | 32'd1);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %10 = or i32 %i1.05.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		main_resetexiti_10_reg <= main_resetexiti_10;
		if (start == 1'b0 && ^(main_resetexiti_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %scevgep51 = getelementptr [100 x i32]* @test_data, i32 0, i32 %10*/
		main_resetexiti_scevgep51 = (1'd0 | (4 * main_resetexiti_10));
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %scevgep51 = getelementptr [100 x i32]* @test_data, i32 0, i32 %10*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		main_resetexiti_scevgep51_reg <= main_resetexiti_scevgep51;
		if (start == 1'b0 && ^(main_resetexiti_scevgep51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_scevgep51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %scevgep52 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i1.05.i*/
		main_resetexiti_scevgep52 = (1'd0 | (4 * main_resetexiti_i105i));
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %scevgep52 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i1.05.i*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		main_resetexiti_scevgep52_reg <= main_resetexiti_scevgep52;
		if (start == 1'b0 && ^(main_resetexiti_scevgep52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_scevgep52_reg"); $finish; end
	end
end
always @(*) begin
	main_resetexiti_11 = main_signed_divide_32_0;
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %11 = sdiv i32 %i1.05.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_56)) begin
		main_resetexiti_11_reg <= main_resetexiti_11;
		if (start == 1'b0 && ^(main_resetexiti_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_11_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %11 = sdiv i32 %i1.05.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_56)) begin
		main_resetexiti_11_reg <= main_resetexiti_11;
		if (start == 1'b0 && ^(main_resetexiti_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_11_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %16 = sdiv i32 %9, 2*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_57)) begin
		main_resetexiti_11_reg <= main_resetexiti_16;
		if (start == 1'b0 && ^(main_resetexiti_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_11_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %21 = sdiv i32 %7, 2*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_59)) begin
		main_resetexiti_11_reg <= main_resetexiti_21;
		if (start == 1'b0 && ^(main_resetexiti_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_11_reg"); $finish; end
	end
	/* main: %30*/
	/*   %32 = sdiv i32 %i.03.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__30_102)) begin
		main_resetexiti_11_reg <= main_30_32;
		if (start == 1'b0 && ^(main_30_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %12 = load i32* %scevgep52, align 4, !tbaa !1*/
		main_resetexiti_12 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %12 = load i32* %scevgep52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_24)) begin
		main_resetexiti_12_reg <= main_resetexiti_12;
		if (start == 1'b0 && ^(main_resetexiti_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %13 = load i32* %scevgep51, align 4, !tbaa !1*/
		main_resetexiti_13 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %13 = load i32* %scevgep51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_24)) begin
		main_resetexiti_13_reg <= main_resetexiti_13;
		if (start == 1'b0 && ^(main_resetexiti_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
		main_resetexiti_14 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		main_resetexiti_14_reg <= main_resetexiti_14;
		if (start == 1'b0 && ^(main_resetexiti_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %15 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %11*/
		main_resetexiti_15 = (1'd0 | (4 * main_resetexiti_11));
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %15 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %11*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_56)) begin
		main_resetexiti_15_reg <= main_resetexiti_15;
		if (start == 1'b0 && ^(main_resetexiti_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_15_reg"); $finish; end
	end
end
always @(*) begin
	main_resetexiti_16 = main_signed_divide_32_0;
end
always @(*) begin
/* main: %reset.exit.i*/
/*   %16 = sdiv i32 %9, 2*/
	main_resetexiti_16_reg = main_resetexiti_11_reg;
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %17 = load i32* %scevgep50, align 4, !tbaa !1*/
		main_resetexiti_17 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %17 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_27)) begin
		main_resetexiti_17_reg <= main_resetexiti_17;
		if (start == 1'b0 && ^(main_resetexiti_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %18 = load i32* %scevgep49, align 4, !tbaa !1*/
		main_resetexiti_18 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %18 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_27)) begin
		main_resetexiti_18_reg <= main_resetexiti_18;
		if (start == 1'b0 && ^(main_resetexiti_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
		main_resetexiti_19 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		main_resetexiti_19_reg <= main_resetexiti_19;
		if (start == 1'b0 && ^(main_resetexiti_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %20 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %16*/
		main_resetexiti_20 = (1'd0 | (4 * main_resetexiti_16));
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %20 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %16*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_57)) begin
		main_resetexiti_20_reg <= main_resetexiti_20;
		if (start == 1'b0 && ^(main_resetexiti_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_20_reg"); $finish; end
	end
end
always @(*) begin
	main_resetexiti_21 = main_signed_divide_32_0;
end
always @(*) begin
/* main: %reset.exit.i*/
/*   %21 = sdiv i32 %7, 2*/
	main_resetexiti_21_reg = main_resetexiti_11_reg;
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %22 = load i32* %scevgep48, align 4, !tbaa !1*/
		main_resetexiti_22 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %22 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_60)) begin
		main_resetexiti_22_reg <= main_resetexiti_22;
		if (start == 1'b0 && ^(main_resetexiti_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %23 = load i32* %scevgep47, align 4, !tbaa !1*/
		main_resetexiti_23 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %23 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_60)) begin
		main_resetexiti_23_reg <= main_resetexiti_23;
		if (start == 1'b0 && ^(main_resetexiti_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
		main_resetexiti_24 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		main_resetexiti_24_reg <= main_resetexiti_24;
		if (start == 1'b0 && ^(main_resetexiti_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %25 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %21*/
		main_resetexiti_25 = (1'd0 | (4 * main_resetexiti_21));
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %25 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %21*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_59)) begin
		main_resetexiti_25_reg <= main_resetexiti_25;
		if (start == 1'b0 && ^(main_resetexiti_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %indvar.next45 = add i32 %indvar44, 1*/
		main_resetexiti_indvarnext45 = (main_resetexiti_indvar44_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %indvar.next45 = add i32 %indvar44, 1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_22)) begin
		main_resetexiti_indvarnext45_reg <= main_resetexiti_indvarnext45;
		if (start == 1'b0 && ^(main_resetexiti_indvarnext45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_indvarnext45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %exitcond46 = icmp eq i32 %indvar.next45, 16*/
		main_resetexiti_exitcond46 = (main_resetexiti_indvarnext45 == 32'd16);
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %exitcond46 = icmp eq i32 %indvar.next45, 16*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_22)) begin
		main_resetexiti_exitcond46_reg <= main_resetexiti_exitcond46;
		if (start == 1'b0 && ^(main_resetexiti_exitcond46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_exitcond46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
		main_preheaderi_26 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		main_preheaderi_26_reg <= main_preheaderi_26;
		if (start == 1'b0 && ^(main_preheaderi_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %27 = load i32* @il, align 4, !tbaa !1*/
		main_preheaderi_27 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %27 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_68)) begin
		main_preheaderi_27_reg <= main_preheaderi_27;
		if (start == 1'b0 && ^(main_preheaderi_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %28 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %27*/
		main_preheaderi_28 = (1'd0 | (4 * main_preheaderi_27));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %28 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %27*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_68)) begin
		main_preheaderi_28_reg <= main_preheaderi_28;
		if (start == 1'b0 && ^(main_preheaderi_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
		main_preheaderi_29 = qq6_code6_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_69)) begin
		main_preheaderi_29_reg <= main_preheaderi_29;
		if (start == 1'b0 && ^(main_preheaderi_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %indvar39 = phi i32 [ %indvar.next40, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_indvar39 = 32'd0;
	end
	/* main: %30*/
	/*   %indvar39 = phi i32 [ %indvar.next40, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_indvar39 = main_decodeexiti_indvarnext40_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %indvar39 = phi i32 [ %indvar.next40, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_indvar39_reg <= main_30_indvar39;
		if (start == 1'b0 && ^(main_30_indvar39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_indvar39_reg"); $finish; end
	end
	/* main: %30*/
	/*   %indvar39 = phi i32 [ %indvar.next40, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_indvar39_reg <= main_30_indvar39;
		if (start == 1'b0 && ^(main_30_indvar39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_indvar39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_ph20 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_ph20 = main_30_dec_ph10_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_ph20_reg <= main_30_dec_ph20;
		if (start == 1'b0 && ^(main_30_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_ph20_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_ph20_reg <= main_30_dec_ph20;
		if (start == 1'b0 && ^(main_30_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_ph20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_ph1.0 = phi i32 [ %152, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_ph10 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_ph1.0 = phi i32 [ %152, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_ph10 = main_filtezexit11ii_152_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_ph1.0 = phi i32 [ %152, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_ph10_reg <= main_30_dec_ph10;
		if (start == 1'b0 && ^(main_30_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_ph10_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_ph1.0 = phi i32 [ %152, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_ph10_reg <= main_30_dec_ph10;
		if (start == 1'b0 && ^(main_30_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_ph10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_nbh.0 = phi i32 [ %...i3.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_nbh0 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_nbh.0 = phi i32 [ %...i3.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_nbh0 = main_filtezexit11ii_i3ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_nbh.0 = phi i32 [ %...i3.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_nbh0_reg <= main_30_dec_nbh0;
		if (start == 1'b0 && ^(main_30_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_nbh0_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_nbh.0 = phi i32 [ %...i3.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_nbh0_reg <= main_30_dec_nbh0;
		if (start == 1'b0 && ^(main_30_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_nbh0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_deth.0 = phi i32 [ %151, %decode.exit.i ], [ 8, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_deth0 = 32'd8;
	end
	/* main: %30*/
	/*   %dec_deth.0 = phi i32 [ %151, %decode.exit.i ], [ 8, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_deth0 = main_filtezexit11ii_151_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_deth.0 = phi i32 [ %151, %decode.exit.i ], [ 8, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_deth0_reg <= main_30_dec_deth0;
		if (start == 1'b0 && ^(main_30_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_deth0_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_deth.0 = phi i32 [ %151, %decode.exit.i ], [ 8, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_deth0_reg <= main_30_dec_deth0;
		if (start == 1'b0 && ^(main_30_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_deth0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_ah20 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_ah20 = main_upzeroexitii_iii_var0_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_ah20_reg <= main_30_dec_ah20;
		if (start == 1'b0 && ^(main_30_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_ah20_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_ah20_reg <= main_30_dec_ah20;
		if (start == 1'b0 && ^(main_30_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_ah20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_rh20 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_rh20 = main_30_dec_rh10_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_rh20_reg <= main_30_dec_rh20;
		if (start == 1'b0 && ^(main_30_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_rh20_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_rh20_reg <= main_30_dec_rh20;
		if (start == 1'b0 && ^(main_30_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_rh20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_ah10 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_ah10 = main_decodeexiti_apl12iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_ah10_reg <= main_30_dec_ah10;
		if (start == 1'b0 && ^(main_30_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_ah10_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_ah10_reg <= main_30_dec_ah10;
		if (start == 1'b0 && ^(main_30_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_ah10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_rh1.0 = phi i32 [ %192, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_rh10 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_rh1.0 = phi i32 [ %192, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_rh10 = main_upzeroexitii_192_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_rh1.0 = phi i32 [ %192, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_rh10_reg <= main_30_dec_rh10;
		if (start == 1'b0 && ^(main_30_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_rh10_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_rh1.0 = phi i32 [ %192, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_rh10_reg <= main_30_dec_rh10;
		if (start == 1'b0 && ^(main_30_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_rh10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_plt20 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_plt20 = main_30_dec_plt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_plt20_reg <= main_30_dec_plt20;
		if (start == 1'b0 && ^(main_30_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_plt20_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_plt20_reg <= main_30_dec_plt20;
		if (start == 1'b0 && ^(main_30_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_plt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_plt1.0 = phi i32 [ %74, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_plt10 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_plt1.0 = phi i32 [ %74, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_plt10 = main_filtezexitii_74_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_plt1.0 = phi i32 [ %74, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_plt10_reg <= main_30_dec_plt10;
		if (start == 1'b0 && ^(main_30_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_plt10_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_plt1.0 = phi i32 [ %74, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_plt10_reg <= main_30_dec_plt10;
		if (start == 1'b0 && ^(main_30_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_plt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_nbl.0 = phi i32 [ %...i27.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_nbl0 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_nbl.0 = phi i32 [ %...i27.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_nbl0 = main_filtezexitii_i27ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_nbl.0 = phi i32 [ %...i27.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_nbl0_reg <= main_30_dec_nbl0;
		if (start == 1'b0 && ^(main_30_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_nbl0_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_nbl.0 = phi i32 [ %...i27.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_nbl0_reg <= main_30_dec_nbl0;
		if (start == 1'b0 && ^(main_30_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_nbl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_detl.0 = phi i32 [ %73, %decode.exit.i ], [ 32, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_detl0 = 32'd32;
	end
	/* main: %30*/
	/*   %dec_detl.0 = phi i32 [ %73, %decode.exit.i ], [ 32, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_detl0 = main_filtezexitii_73_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_detl.0 = phi i32 [ %73, %decode.exit.i ], [ 32, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_detl0_reg <= main_30_dec_detl0;
		if (start == 1'b0 && ^(main_30_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_detl0_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_detl.0 = phi i32 [ %73, %decode.exit.i ], [ 32, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_detl0_reg <= main_30_dec_detl0;
		if (start == 1'b0 && ^(main_30_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_detl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_al2.0 = phi i32 [ %...i18.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_al20 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_al2.0 = phi i32 [ %...i18.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_al20 = main_upzeroexit25ii_i18ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_al2.0 = phi i32 [ %...i18.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_al20_reg <= main_30_dec_al20;
		if (start == 1'b0 && ^(main_30_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_al20_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_al2.0 = phi i32 [ %...i18.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_al20_reg <= main_30_dec_al20;
		if (start == 1'b0 && ^(main_30_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_al20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_rlt20 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_rlt20 = main_30_dec_rlt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_rlt20_reg <= main_30_dec_rlt20;
		if (start == 1'b0 && ^(main_30_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_rlt20_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_rlt20_reg <= main_30_dec_rlt20;
		if (start == 1'b0 && ^(main_30_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_rlt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i14.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_al10 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i14.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_al10 = main_filtezexit11ii_apl12i14ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i14.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_al10_reg <= main_30_dec_al10;
		if (start == 1'b0 && ^(main_30_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_al10_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i14.i.i, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_al10_reg <= main_30_dec_al10;
		if (start == 1'b0 && ^(main_30_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_al10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %dec_rlt1.0 = phi i32 [ %127, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_rlt10 = 32'd0;
	end
	/* main: %30*/
	/*   %dec_rlt1.0 = phi i32 [ %127, %decode.exit.i ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) */ begin
		main_30_dec_rlt10 = main_filtezexit11ii_127_reg;
	end
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %dec_rlt1.0 = phi i32 [ %127, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_30_dec_rlt10_reg <= main_30_dec_rlt10;
		if (start == 1'b0 && ^(main_30_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_rlt10_reg"); $finish; end
	end
	/* main: %30*/
	/*   %dec_rlt1.0 = phi i32 [ %127, %decode.exit.i ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decodeexiti_177) & (memory_controller_waitrequest == 1'd0)) & (main_decodeexiti_exitcond41_reg == 1'd0))) begin
		main_30_dec_rlt10_reg <= main_30_dec_rlt10;
		if (start == 1'b0 && ^(main_30_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_dec_rlt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %i.03.i = shl i32 %indvar39, 1*/
		main_30_i03i = (main_30_indvar39_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %i.03.i = shl i32 %indvar39, 1*/
	if ((cur_state == LEGUP_F_main_BB__30_70)) begin
		main_30_i03i_reg <= main_30_i03i;
		if (start == 1'b0 && ^(main_30_i03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_i03i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %31 = or i32 %i.03.i, 1*/
		main_30_31 = (main_30_i03i | 32'd1);
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %31 = or i32 %i.03.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__30_70)) begin
		main_30_31_reg <= main_30_31;
		if (start == 1'b0 && ^(main_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %scevgep42 = getelementptr [100 x i32]* @result, i32 0, i32 %31*/
		main_30_scevgep42 = (1'd0 | (4 * main_30_31));
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %scevgep42 = getelementptr [100 x i32]* @result, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__30_70)) begin
		main_30_scevgep42_reg <= main_30_scevgep42;
		if (start == 1'b0 && ^(main_30_scevgep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_scevgep42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %scevgep43 = getelementptr [100 x i32]* @result, i32 0, i32 %i.03.i*/
		main_30_scevgep43 = (1'd0 | (4 * main_30_i03i));
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %scevgep43 = getelementptr [100 x i32]* @result, i32 0, i32 %i.03.i*/
	if ((cur_state == LEGUP_F_main_BB__30_70)) begin
		main_30_scevgep43_reg <= main_30_scevgep43;
		if (start == 1'b0 && ^(main_30_scevgep43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_scevgep43_reg"); $finish; end
	end
end
always @(*) begin
	main_30_32 = main_signed_divide_32_0;
end
always @(*) begin
/* main: %30*/
/*   %32 = sdiv i32 %i.03.i, 2*/
	main_30_32_reg = main_resetexiti_11_reg;
end
always @(*) begin
	/* main: %30*/
	/*   %33 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %32*/
		main_30_33 = (1'd0 | (4 * main_30_32));
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %33 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__30_102)) begin
		main_30_33_reg <= main_30_33;
		if (start == 1'b0 && ^(main_30_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
		main_30_34 = compressed_out_a;
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__30_103)) begin
		main_30_34_reg <= main_30_34;
		if (start == 1'b0 && ^(main_30_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %35 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_30_35 = dec_del_bpl_out_a;
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %35 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__30_71)) begin
		main_30_35_reg <= main_30_35;
		if (start == 1'b0 && ^(main_30_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %30*/
	/*   %36 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_30_36 = dec_del_dltx_out_a;
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %36 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__30_71)) begin
		main_30_36_reg <= main_30_36;
		if (start == 1'b0 && ^(main_30_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_36_reg"); $finish; end
	end
end
always @(*) begin
	main_30_37 = main_30_37_stage0_reg;
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %37 = mul nsw i32 %36, %35*/
	if ((cur_state == LEGUP_F_main_BB__30_72)) begin
		main_30_37_reg <= main_30_37;
		if (start == 1'b0 && ^(main_30_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_37_reg"); $finish; end
	end
	/* main: %30*/
	/*   %37 = mul nsw i32 %36, %35*/
	if ((cur_state == LEGUP_F_main_BB__30_72)) begin
		main_30_37_reg <= main_30_37;
		if (start == 1'b0 && ^(main_30_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_30_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %indvar = phi i32 [ %indvar.next, %38 ], [ 0, %30 ]*/
	if (((cur_state == LEGUP_F_main_BB__30_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_indvar = 32'd0;
	end
	/* main: %38*/
	/*   %indvar = phi i32 [ %indvar.next, %38 ], [ 0, %30 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__38_107) & (memory_controller_waitrequest == 1'd0)) & (main_38_exitcond7_reg == 1'd0))) */ begin
		main_38_indvar = main_38_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %indvar = phi i32 [ %indvar.next, %38 ], [ 0, %30 ]*/
	if (((cur_state == LEGUP_F_main_BB__30_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_indvar_reg <= main_38_indvar;
		if (start == 1'b0 && ^(main_38_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_indvar_reg"); $finish; end
	end
	/* main: %38*/
	/*   %indvar = phi i32 [ %indvar.next, %38 ], [ 0, %30 ]*/
	if ((((cur_state == LEGUP_F_main_BB__38_107) & (memory_controller_waitrequest == 1'd0)) & (main_38_exitcond7_reg == 1'd0))) begin
		main_38_indvar_reg <= main_38_indvar;
		if (start == 1'b0 && ^(main_38_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %zl.05.i.i.i = phi i32 [ %43, %38 ], [ %37, %30 ]*/
	if (((cur_state == LEGUP_F_main_BB__30_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_zl05iii = main_30_37_reg;
	end
	/* main: %38*/
	/*   %zl.05.i.i.i = phi i32 [ %43, %38 ], [ %37, %30 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__38_107) & (memory_controller_waitrequest == 1'd0)) & (main_38_exitcond7_reg == 1'd0))) */ begin
		main_38_zl05iii = main_38_43;
	end
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %zl.05.i.i.i = phi i32 [ %43, %38 ], [ %37, %30 ]*/
	if (((cur_state == LEGUP_F_main_BB__30_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_zl05iii_reg <= main_38_zl05iii;
		if (start == 1'b0 && ^(main_38_zl05iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_zl05iii_reg"); $finish; end
	end
	/* main: %38*/
	/*   %zl.05.i.i.i = phi i32 [ %43, %38 ], [ %37, %30 ]*/
	if ((((cur_state == LEGUP_F_main_BB__38_107) & (memory_controller_waitrequest == 1'd0)) & (main_38_exitcond7_reg == 1'd0))) begin
		main_38_zl05iii_reg <= main_38_zl05iii;
		if (start == 1'b0 && ^(main_38_zl05iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_zl05iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %39 = add i32 %indvar, 1*/
		main_38_39 = (main_38_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %39 = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__38_104)) begin
		main_38_39_reg <= main_38_39;
		if (start == 1'b0 && ^(main_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %.017.i.i.i = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %39*/
		main_38_017iii = (1'd0 | (4 * main_38_39_reg));
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %.017.i.i.i = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %39*/
	if ((cur_state == LEGUP_F_main_BB__38_105)) begin
		main_38_017iii_reg <= main_38_017iii;
		if (start == 1'b0 && ^(main_38_017iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_017iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %.06.i.i.i = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %39*/
		main_38_06iii = (1'd0 | (4 * main_38_39_reg));
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %.06.i.i.i = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %39*/
	if ((cur_state == LEGUP_F_main_BB__38_105)) begin
		main_38_06iii_reg <= main_38_06iii;
		if (start == 1'b0 && ^(main_38_06iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_06iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %40 = load i32* %.017.i.i.i, align 4, !tbaa !1*/
		main_38_40 = dec_del_bpl_out_a;
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %40 = load i32* %.017.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__38_106)) begin
		main_38_40_reg <= main_38_40;
		if (start == 1'b0 && ^(main_38_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %41 = load i32* %.06.i.i.i, align 4, !tbaa !1*/
		main_38_41 = dec_del_dltx_out_a;
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %41 = load i32* %.06.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__38_106)) begin
		main_38_41_reg <= main_38_41;
		if (start == 1'b0 && ^(main_38_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_41_reg"); $finish; end
	end
end
always @(*) begin
	main_38_42 = main_38_42_stage0_reg;
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %42 = mul nsw i32 %41, %40*/
	if ((cur_state == LEGUP_F_main_BB__38_107)) begin
		main_38_42_reg <= main_38_42;
		if (start == 1'b0 && ^(main_38_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_42_reg"); $finish; end
	end
	/* main: %38*/
	/*   %42 = mul nsw i32 %41, %40*/
	if ((cur_state == LEGUP_F_main_BB__38_107)) begin
		main_38_42_reg <= main_38_42;
		if (start == 1'b0 && ^(main_38_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %43 = add nsw i32 %42, %zl.05.i.i.i*/
		main_38_43 = (main_38_42 + main_38_zl05iii_reg);
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %43 = add nsw i32 %42, %zl.05.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__38_107)) begin
		main_38_43_reg <= main_38_43;
		if (start == 1'b0 && ^(main_38_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_38_indvarnext = (main_38_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__38_104)) begin
		main_38_indvarnext_reg <= main_38_indvarnext;
		if (start == 1'b0 && ^(main_38_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %exitcond7 = icmp eq i32 %indvar.next, 5*/
		main_38_exitcond7 = (main_38_indvarnext == 32'd5);
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %exitcond7 = icmp eq i32 %indvar.next, 5*/
	if ((cur_state == LEGUP_F_main_BB__38_104)) begin
		main_38_exitcond7_reg <= main_38_exitcond7;
		if (start == 1'b0 && ^(main_38_exitcond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_exitcond7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %44 = ashr i32 %34, 6*/
		main_filtezexitii_44 = ($signed(main_30_34_reg) >>> 32'd6);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %44 = ashr i32 %34, 6*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		main_filtezexitii_44_reg <= main_filtezexitii_44;
		if (start == 1'b0 && ^(main_filtezexitii_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %45 = ashr i32 %43, 14*/
		main_filtezexitii_45 = ($signed(main_38_43_reg) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %45 = ashr i32 %43, 14*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		main_filtezexitii_45_reg <= main_filtezexitii_45;
		if (start == 1'b0 && ^(main_filtezexitii_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_45_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexitii_46 = main_filtezexitii_46_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %46 = mul i32 %dec_al1.0, %dec_rlt1.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_46_reg <= main_filtezexitii_46;
		if (start == 1'b0 && ^(main_filtezexitii_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_46_reg"); $finish; end
	end
	/* main: %filtez.exit.i.i*/
	/*   %46 = mul i32 %dec_al1.0, %dec_rlt1.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_46_reg <= main_filtezexitii_46;
		if (start == 1'b0 && ^(main_filtezexitii_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_46_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexitii_47 = main_filtezexitii_47_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %47 = mul i32 %dec_al2.0, %dec_rlt2.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_47_reg <= main_filtezexitii_47;
		if (start == 1'b0 && ^(main_filtezexitii_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_47_reg"); $finish; end
	end
	/* main: %filtez.exit.i.i*/
	/*   %47 = mul i32 %dec_al2.0, %dec_rlt2.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_47_reg <= main_filtezexitii_47;
		if (start == 1'b0 && ^(main_filtezexitii_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %tmp.i28.i.i = add i32 %47, %46*/
		main_filtezexitii_tmpi28ii = (main_filtezexitii_47 + main_filtezexitii_46);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %tmp.i28.i.i = add i32 %47, %46*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_tmpi28ii_reg <= main_filtezexitii_tmpi28ii;
		if (start == 1'b0 && ^(main_filtezexitii_tmpi28ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_tmpi28ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %tmp1.i29.i.i = shl i32 %tmp.i28.i.i, 1*/
		main_filtezexitii_tmp1i29ii = (main_filtezexitii_tmpi28ii <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %tmp1.i29.i.i = shl i32 %tmp.i28.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_tmp1i29ii_reg <= main_filtezexitii_tmp1i29ii;
		if (start == 1'b0 && ^(main_filtezexitii_tmp1i29ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_tmp1i29ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %48 = ashr i32 %tmp1.i29.i.i, 15*/
		main_filtezexitii_48 = ($signed(main_filtezexitii_tmp1i29ii) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %48 = ashr i32 %tmp1.i29.i.i, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_48_reg <= main_filtezexitii_48;
		if (start == 1'b0 && ^(main_filtezexitii_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %49 = add nsw i32 %48, %45*/
		main_filtezexitii_49 = (main_filtezexitii_48 + main_filtezexitii_45_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %49 = add nsw i32 %48, %45*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_49_reg <= main_filtezexitii_49;
		if (start == 1'b0 && ^(main_filtezexitii_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %50 = lshr i32 %34, 2*/
		main_filtezexitii_50 = (main_30_34_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %50 = lshr i32 %34, 2*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		main_filtezexitii_50_reg <= main_filtezexitii_50;
		if (start == 1'b0 && ^(main_filtezexitii_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %51 = and i32 %50, 15*/
		main_filtezexitii_51 = (main_filtezexitii_50 & 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %51 = and i32 %50, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		main_filtezexitii_51_reg <= main_filtezexitii_51;
		if (start == 1'b0 && ^(main_filtezexitii_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %52 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %51*/
		main_filtezexitii_52 = (`TAG_g_qq4_code4_table_a | (4 * main_filtezexitii_51));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %52 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %51*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		main_filtezexitii_52_reg <= main_filtezexitii_52;
		if (start == 1'b0 && ^(main_filtezexitii_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
		main_filtezexitii_53 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_110)) begin
		main_filtezexitii_53_reg <= main_filtezexitii_53;
		if (start == 1'b0 && ^(main_filtezexitii_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_53_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexitii_54 = main_filtezexitii_54_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %54 = mul nsw i32 %53, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_111)) begin
		main_filtezexitii_54_reg <= main_filtezexitii_54;
		if (start == 1'b0 && ^(main_filtezexitii_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_54_reg"); $finish; end
	end
	/* main: %filtez.exit.i.i*/
	/*   %54 = mul nsw i32 %53, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_111)) begin
		main_filtezexitii_54_reg <= main_filtezexitii_54;
		if (start == 1'b0 && ^(main_filtezexitii_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %55 = ashr i32 %54, 15*/
		main_filtezexitii_55 = ($signed(main_filtezexitii_54) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %55 = ashr i32 %54, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_111)) begin
		main_filtezexitii_55_reg <= main_filtezexitii_55;
		if (start == 1'b0 && ^(main_filtezexitii_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_55_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexitii_56 = main_filtezexitii_56_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %56 = mul nsw i32 %29, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_56_reg <= main_filtezexitii_56;
		if (start == 1'b0 && ^(main_filtezexitii_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_56_reg"); $finish; end
	end
	/* main: %filtez.exit.i.i*/
	/*   %56 = mul nsw i32 %29, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_56_reg <= main_filtezexitii_56;
		if (start == 1'b0 && ^(main_filtezexitii_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %57 = ashr i32 %56, 15*/
		main_filtezexitii_57 = ($signed(main_filtezexitii_56) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %57 = ashr i32 %56, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_57_reg <= main_filtezexitii_57;
		if (start == 1'b0 && ^(main_filtezexitii_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %58 = add nsw i32 %57, %49*/
		main_filtezexitii_58 = (main_filtezexitii_57 + main_filtezexitii_49);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %58 = add nsw i32 %57, %49*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_58_reg <= main_filtezexitii_58;
		if (start == 1'b0 && ^(main_filtezexitii_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_58_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexitii_59 = main_filtezexitii_59_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %59 = mul nsw i32 %dec_nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_59_reg <= main_filtezexitii_59;
		if (start == 1'b0 && ^(main_filtezexitii_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_59_reg"); $finish; end
	end
	/* main: %filtez.exit.i.i*/
	/*   %59 = mul nsw i32 %dec_nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_59_reg <= main_filtezexitii_59;
		if (start == 1'b0 && ^(main_filtezexitii_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %60 = ashr i32 %59, 7*/
		main_filtezexitii_60 = ($signed(main_filtezexitii_59) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %60 = ashr i32 %59, 7*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_109)) begin
		main_filtezexitii_60_reg <= main_filtezexitii_60;
		if (start == 1'b0 && ^(main_filtezexitii_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %61 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %51*/
		main_filtezexitii_61 = (`TAG_g_wl_code_table_a | (4 * main_filtezexitii_51));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %61 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %51*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		main_filtezexitii_61_reg <= main_filtezexitii_61;
		if (start == 1'b0 && ^(main_filtezexitii_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
		main_filtezexitii_62 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_110)) begin
		main_filtezexitii_62_reg <= main_filtezexitii_62;
		if (start == 1'b0 && ^(main_filtezexitii_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %63 = add nsw i32 %60, %62*/
		main_filtezexitii_63 = (main_filtezexitii_60_reg + main_filtezexitii_62);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %63 = add nsw i32 %60, %62*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_110)) begin
		main_filtezexitii_63_reg <= main_filtezexitii_63;
		if (start == 1'b0 && ^(main_filtezexitii_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %64 = icmp slt i32 %63, 0*/
		main_filtezexitii_64 = ($signed(main_filtezexitii_63) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %64 = icmp slt i32 %63, 0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_110)) begin
		main_filtezexitii_64_reg <= main_filtezexitii_64;
		if (start == 1'b0 && ^(main_filtezexitii_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %..i26.i.i = select i1 %64, i32 0, i32 %63*/
		main_filtezexitii_i26ii = (main_filtezexitii_64 ? 32'd0 : main_filtezexitii_63);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %..i26.i.i = select i1 %64, i32 0, i32 %63*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_110)) begin
		main_filtezexitii_i26ii_reg <= main_filtezexitii_i26ii;
		if (start == 1'b0 && ^(main_filtezexitii_i26ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_i26ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %65 = icmp sgt i32 %..i26.i.i, 18432*/
		main_filtezexitii_65 = ($signed(main_filtezexitii_i26ii) > $signed(32'd18432));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %65 = icmp sgt i32 %..i26.i.i, 18432*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_110)) begin
		main_filtezexitii_65_reg <= main_filtezexitii_65;
		if (start == 1'b0 && ^(main_filtezexitii_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %...i27.i.i = select i1 %65, i32 18432, i32 %..i26.i.i*/
		main_filtezexitii_i27ii = (main_filtezexitii_65 ? 32'd18432 : main_filtezexitii_i26ii);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %...i27.i.i = select i1 %65, i32 18432, i32 %..i26.i.i*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_110)) begin
		main_filtezexitii_i27ii_reg <= main_filtezexitii_i27ii;
		if (start == 1'b0 && ^(main_filtezexitii_i27ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_i27ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %66 = lshr i32 %...i27.i.i, 6*/
		main_filtezexitii_66 = (main_filtezexitii_i27ii >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %66 = lshr i32 %...i27.i.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_110)) begin
		main_filtezexitii_66_reg <= main_filtezexitii_66;
		if (start == 1'b0 && ^(main_filtezexitii_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %67 = and i32 %66, 31*/
		main_filtezexitii_67 = (main_filtezexitii_66 & 32'd31);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %67 = and i32 %66, 31*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_110)) begin
		main_filtezexitii_67_reg <= main_filtezexitii_67;
		if (start == 1'b0 && ^(main_filtezexitii_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %68 = ashr i32 %...i27.i.i, 11*/
		main_filtezexitii_68 = ($signed(main_filtezexitii_i27ii) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %68 = ashr i32 %...i27.i.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_110)) begin
		main_filtezexitii_68_reg <= main_filtezexitii_68;
		if (start == 1'b0 && ^(main_filtezexitii_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %69 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %67*/
		main_filtezexitii_69 = (`TAG_g_ilb_table_a | (4 * main_filtezexitii_67_reg));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %69 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %67*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_111)) begin
		main_filtezexitii_69_reg <= main_filtezexitii_69;
		if (start == 1'b0 && ^(main_filtezexitii_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
		main_filtezexitii_70 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_113)) begin
		main_filtezexitii_70_reg <= main_filtezexitii_70;
		if (start == 1'b0 && ^(main_filtezexitii_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %71 = sub i32 9, %68*/
		main_filtezexitii_71 = (32'd9 - main_filtezexitii_68);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %71 = sub i32 9, %68*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_110)) begin
		main_filtezexitii_71_reg <= main_filtezexitii_71;
		if (start == 1'b0 && ^(main_filtezexitii_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %72 = ashr i32 %70, %71*/
		main_filtezexitii_72 = ($signed(main_filtezexitii_70) >>> main_filtezexitii_71_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %72 = ashr i32 %70, %71*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_113)) begin
		main_filtezexitii_72_reg <= main_filtezexitii_72;
		if (start == 1'b0 && ^(main_filtezexitii_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %73 = shl i32 %72, 3*/
		main_filtezexitii_73 = (main_filtezexitii_72 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %73 = shl i32 %72, 3*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_113)) begin
		main_filtezexitii_73_reg <= main_filtezexitii_73;
		if (start == 1'b0 && ^(main_filtezexitii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %74 = add nsw i32 %45, %55*/
		main_filtezexitii_74 = (main_filtezexitii_45_reg + main_filtezexitii_55);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %74 = add nsw i32 %45, %55*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_111)) begin
		main_filtezexitii_74_reg <= main_filtezexitii_74;
		if (start == 1'b0 && ^(main_filtezexitii_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %75 = icmp eq i32 %55, 0*/
		main_filtezexitii_75 = (main_filtezexitii_55 == 32'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %75 = icmp eq i32 %55, 0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_111)) begin
		main_filtezexitii_75_reg <= main_filtezexitii_75;
		if (start == 1'b0 && ^(main_filtezexitii_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i21.i.i*/
	/*   %76 = phi i32 [ %.pre.i.i, %.preheader.i21..preheader.i21_crit_edge.i.i ], [ %35, %.preheader.i21.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi21iipreheader_115) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi21ii_76 = main_30_35_reg;
	end
	/* main: %.preheader.i21.i.i*/
	/*   %76 = phi i32 [ %.pre.i.i, %.preheader.i21..preheader.i21_crit_edge.i.i ], [ %35, %.preheader.i21.i.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_121) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheaderi21ii_76 = main_preheaderi21preheaderi21_crit_edgeii_preii;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i21.i.i*/
	/*   %76 = phi i32 [ %.pre.i.i, %.preheader.i21..preheader.i21_crit_edge.i.i ], [ %35, %.preheader.i21.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi21iipreheader_115) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi21ii_76_reg <= main_preheaderi21ii_76;
		if (start == 1'b0 && ^(main_preheaderi21ii_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21ii_76_reg"); $finish; end
	end
	/* main: %.preheader.i21.i.i*/
	/*   %76 = phi i32 [ %.pre.i.i, %.preheader.i21..preheader.i21_crit_edge.i.i ], [ %35, %.preheader.i21.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_121) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi21ii_76_reg <= main_preheaderi21ii_76;
		if (start == 1'b0 && ^(main_preheaderi21ii_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21ii_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i21.i.i*/
	/*   %i.03.i19.i.i = phi i32 [ %79, %.preheader.i21..preheader.i21_crit_edge.i.i ], [ 0, %.preheader.i21.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi21iipreheader_115) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi21ii_i03i19ii = 32'd0;
	end
	/* main: %.preheader.i21.i.i*/
	/*   %i.03.i19.i.i = phi i32 [ %79, %.preheader.i21..preheader.i21_crit_edge.i.i ], [ 0, %.preheader.i21.i.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_121) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheaderi21ii_i03i19ii = main_preheaderi21preheaderi21_crit_edgeii_79_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i21.i.i*/
	/*   %i.03.i19.i.i = phi i32 [ %79, %.preheader.i21..preheader.i21_crit_edge.i.i ], [ 0, %.preheader.i21.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi21iipreheader_115) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi21ii_i03i19ii_reg <= main_preheaderi21ii_i03i19ii;
		if (start == 1'b0 && ^(main_preheaderi21ii_i03i19ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21ii_i03i19ii_reg"); $finish; end
	end
	/* main: %.preheader.i21.i.i*/
	/*   %i.03.i19.i.i = phi i32 [ %79, %.preheader.i21..preheader.i21_crit_edge.i.i ], [ 0, %.preheader.i21.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_121) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi21ii_i03i19ii_reg <= main_preheaderi21ii_i03i19ii;
		if (start == 1'b0 && ^(main_preheaderi21ii_i03i19ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21ii_i03i19ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i21.i.i*/
	/*   %scevgep16 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %i.03.i19.i.i*/
		main_preheaderi21ii_scevgep16 = (1'd0 | (4 * main_preheaderi21ii_i03i19ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i21.i.i*/
	/*   %scevgep16 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %i.03.i19.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21ii_116)) begin
		main_preheaderi21ii_scevgep16_reg <= main_preheaderi21ii_scevgep16;
		if (start == 1'b0 && ^(main_preheaderi21ii_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21ii_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi21ii_77 = main_preheaderi21ii_77_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i21.i.i*/
	/*   %77 = mul nsw i32 %76, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21ii_117)) begin
		main_preheaderi21ii_77_reg <= main_preheaderi21ii_77;
		if (start == 1'b0 && ^(main_preheaderi21ii_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21ii_77_reg"); $finish; end
	end
	/* main: %.preheader.i21.i.i*/
	/*   %77 = mul nsw i32 %76, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21ii_117)) begin
		main_preheaderi21ii_77_reg <= main_preheaderi21ii_77;
		if (start == 1'b0 && ^(main_preheaderi21ii_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21ii_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i21.i.i*/
	/*   %78 = ashr i32 %77, 8*/
		main_preheaderi21ii_78 = ($signed(main_preheaderi21ii_77) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %.preheader.i21.i.i*/
	/*   %78 = ashr i32 %77, 8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21ii_117)) begin
		main_preheaderi21ii_78_reg <= main_preheaderi21ii_78;
		if (start == 1'b0 && ^(main_preheaderi21ii_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21ii_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i21.i.i*/
	/*   %exitcond14 = icmp eq i32 %i.03.i19.i.i, 5*/
		main_preheaderi21ii_exitcond14 = (main_preheaderi21ii_i03i19ii_reg == 32'd5);
end
always @(posedge clk) begin
	/* main: %.preheader.i21.i.i*/
	/*   %exitcond14 = icmp eq i32 %i.03.i19.i.i, 5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21ii_116)) begin
		main_preheaderi21ii_exitcond14_reg <= main_preheaderi21ii_exitcond14;
		if (start == 1'b0 && ^(main_preheaderi21ii_exitcond14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21ii_exitcond14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i21..preheader.i21_crit_edge.i.i*/
	/*   %79 = add nsw i32 %i.03.i19.i.i, 1*/
		main_preheaderi21preheaderi21_crit_edgeii_79 = (main_preheaderi21ii_i03i19ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i21..preheader.i21_crit_edge.i.i*/
	/*   %79 = add nsw i32 %i.03.i19.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_119)) begin
		main_preheaderi21preheaderi21_crit_edgeii_79_reg <= main_preheaderi21preheaderi21_crit_edgeii_79;
		if (start == 1'b0 && ^(main_preheaderi21preheaderi21_crit_edgeii_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21preheaderi21_crit_edgeii_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i21..preheader.i21_crit_edge.i.i*/
	/*   %80 = add i32 %i.03.i19.i.i, 1*/
		main_preheaderi21preheaderi21_crit_edgeii_80 = (main_preheaderi21ii_i03i19ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i21..preheader.i21_crit_edge.i.i*/
	/*   %80 = add i32 %i.03.i19.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_119)) begin
		main_preheaderi21preheaderi21_crit_edgeii_80_reg <= main_preheaderi21preheaderi21_crit_edgeii_80;
		if (start == 1'b0 && ^(main_preheaderi21preheaderi21_crit_edgeii_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21preheaderi21_crit_edgeii_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i21..preheader.i21_crit_edge.i.i*/
	/*   %.phi.trans.insert.i.i = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %80*/
		main_preheaderi21preheaderi21_crit_edgeii_phitransinsertii = (1'd0 | (4 * main_preheaderi21preheaderi21_crit_edgeii_80_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i21..preheader.i21_crit_edge.i.i*/
	/*   %.phi.trans.insert.i.i = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %80*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_120)) begin
		main_preheaderi21preheaderi21_crit_edgeii_phitransinsertii_reg <= main_preheaderi21preheaderi21_crit_edgeii_phitransinsertii;
		if (start == 1'b0 && ^(main_preheaderi21preheaderi21_crit_edgeii_phitransinsertii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21preheaderi21_crit_edgeii_phitransinsertii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i21..preheader.i21_crit_edge.i.i*/
	/*   %.pre.i.i = load i32* %.phi.trans.insert.i.i, align 4, !tbaa !1*/
		main_preheaderi21preheaderi21_crit_edgeii_preii = dec_del_bpl_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i21..preheader.i21_crit_edge.i.i*/
	/*   %.pre.i.i = load i32* %.phi.trans.insert.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_121)) begin
		main_preheaderi21preheaderi21_crit_edgeii_preii_reg <= main_preheaderi21preheaderi21_crit_edgeii_preii;
		if (start == 1'b0 && ^(main_preheaderi21preheaderi21_crit_edgeii_preii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi21preheaderi21_crit_edgeii_preii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %81 = phi i32 [ %.pre65.i.i, %.preheader1.i24..preheader1.i24_crit_edge.i.i ], [ %35, %.preheader1.i24.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i24iipreheader_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i24ii_81 = main_30_35_reg;
	end
	/* main: %.preheader1.i24.i.i*/
	/*   %81 = phi i32 [ %.pre65.i.i, %.preheader1.i24..preheader1.i24_crit_edge.i.i ], [ %35, %.preheader1.i24.i.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_126) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader1i24ii_81 = main_preheader1i24preheader1i24_crit_edgeii_pre65ii;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %81 = phi i32 [ %.pre65.i.i, %.preheader1.i24..preheader1.i24_crit_edge.i.i ], [ %35, %.preheader1.i24.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i24iipreheader_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i24ii_81_reg <= main_preheader1i24ii_81;
		if (start == 1'b0 && ^(main_preheader1i24ii_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_81_reg"); $finish; end
	end
	/* main: %.preheader1.i24.i.i*/
	/*   %81 = phi i32 [ %.pre65.i.i, %.preheader1.i24..preheader1.i24_crit_edge.i.i ], [ %35, %.preheader1.i24.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_126) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i24ii_81_reg <= main_preheader1i24ii_81;
		if (start == 1'b0 && ^(main_preheader1i24ii_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %82 = phi i32 [ %.pre63.i.i, %.preheader1.i24..preheader1.i24_crit_edge.i.i ], [ %36, %.preheader1.i24.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i24iipreheader_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i24ii_82 = main_30_36_reg;
	end
	/* main: %.preheader1.i24.i.i*/
	/*   %82 = phi i32 [ %.pre63.i.i, %.preheader1.i24..preheader1.i24_crit_edge.i.i ], [ %36, %.preheader1.i24.i.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_126) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader1i24ii_82 = main_preheader1i24preheader1i24_crit_edgeii_pre63ii;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %82 = phi i32 [ %.pre63.i.i, %.preheader1.i24..preheader1.i24_crit_edge.i.i ], [ %36, %.preheader1.i24.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i24iipreheader_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i24ii_82_reg <= main_preheader1i24ii_82;
		if (start == 1'b0 && ^(main_preheader1i24ii_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_82_reg"); $finish; end
	end
	/* main: %.preheader1.i24.i.i*/
	/*   %82 = phi i32 [ %.pre63.i.i, %.preheader1.i24..preheader1.i24_crit_edge.i.i ], [ %36, %.preheader1.i24.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_126) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i24ii_82_reg <= main_preheader1i24ii_82;
		if (start == 1'b0 && ^(main_preheader1i24ii_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %i.14.i22.i.i = phi i32 [ %91, %.preheader1.i24..preheader1.i24_crit_edge.i.i ], [ 0, %.preheader1.i24.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i24iipreheader_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i24ii_i14i22ii = 32'd0;
	end
	/* main: %.preheader1.i24.i.i*/
	/*   %i.14.i22.i.i = phi i32 [ %91, %.preheader1.i24..preheader1.i24_crit_edge.i.i ], [ 0, %.preheader1.i24.i.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_126) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader1i24ii_i14i22ii = main_preheader1i24preheader1i24_crit_edgeii_91_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %i.14.i22.i.i = phi i32 [ %91, %.preheader1.i24..preheader1.i24_crit_edge.i.i ], [ 0, %.preheader1.i24.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i24iipreheader_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i24ii_i14i22ii_reg <= main_preheader1i24ii_i14i22ii;
		if (start == 1'b0 && ^(main_preheader1i24ii_i14i22ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_i14i22ii_reg"); $finish; end
	end
	/* main: %.preheader1.i24.i.i*/
	/*   %i.14.i22.i.i = phi i32 [ %91, %.preheader1.i24..preheader1.i24_crit_edge.i.i ], [ 0, %.preheader1.i24.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_126) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i24ii_i14i22ii_reg <= main_preheader1i24ii_i14i22ii;
		if (start == 1'b0 && ^(main_preheader1i24ii_i14i22ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_i14i22ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %83 = add i32 %i.14.i22.i.i, 1*/
		main_preheader1i24ii_83 = (main_preheader1i24ii_i14i22ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %83 = add i32 %i.14.i22.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_122)) begin
		main_preheader1i24ii_83_reg <= main_preheader1i24ii_83;
		if (start == 1'b0 && ^(main_preheader1i24ii_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %scevgep13 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %i.14.i22.i.i*/
		main_preheader1i24ii_scevgep13 = (1'd0 | (4 * main_preheader1i24ii_i14i22ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %scevgep13 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %i.14.i22.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_122)) begin
		main_preheader1i24ii_scevgep13_reg <= main_preheader1i24ii_scevgep13;
		if (start == 1'b0 && ^(main_preheader1i24ii_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	main_preheader1i24ii_84 = main_preheader1i24ii_84_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %84 = mul nsw i32 %82, %55*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_123)) begin
		main_preheader1i24ii_84_reg <= main_preheader1i24ii_84;
		if (start == 1'b0 && ^(main_preheader1i24ii_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_84_reg"); $finish; end
	end
	/* main: %.preheader1.i24.i.i*/
	/*   %84 = mul nsw i32 %82, %55*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_123)) begin
		main_preheader1i24ii_84_reg <= main_preheader1i24ii_84;
		if (start == 1'b0 && ^(main_preheader1i24ii_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %85 = ashr i32 %84, 31*/
		main_preheader1i24ii_85 = ($signed(main_preheader1i24ii_84) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %85 = ashr i32 %84, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_123)) begin
		main_preheader1i24ii_85_reg <= main_preheader1i24ii_85;
		if (start == 1'b0 && ^(main_preheader1i24ii_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %86 = and i32 %85, -256*/
		main_preheader1i24ii_86 = (main_preheader1i24ii_85 & -32'd256);
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %86 = and i32 %85, -256*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_123)) begin
		main_preheader1i24ii_86_reg <= main_preheader1i24ii_86;
		if (start == 1'b0 && ^(main_preheader1i24ii_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %87 = or i32 %86, 128*/
		main_preheader1i24ii_87 = (main_preheader1i24ii_86 | 32'd128);
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %87 = or i32 %86, 128*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_123)) begin
		main_preheader1i24ii_87_reg <= main_preheader1i24ii_87;
		if (start == 1'b0 && ^(main_preheader1i24ii_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_87_reg"); $finish; end
	end
end
always @(*) begin
	main_preheader1i24ii_88 = main_preheader1i24ii_88_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %88 = mul nsw i32 %81, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_123)) begin
		main_preheader1i24ii_88_reg <= main_preheader1i24ii_88;
		if (start == 1'b0 && ^(main_preheader1i24ii_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_88_reg"); $finish; end
	end
	/* main: %.preheader1.i24.i.i*/
	/*   %88 = mul nsw i32 %81, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_123)) begin
		main_preheader1i24ii_88_reg <= main_preheader1i24ii_88;
		if (start == 1'b0 && ^(main_preheader1i24ii_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %89 = ashr i32 %88, 8*/
		main_preheader1i24ii_89 = ($signed(main_preheader1i24ii_88) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %89 = ashr i32 %88, 8*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_123)) begin
		main_preheader1i24ii_89_reg <= main_preheader1i24ii_89;
		if (start == 1'b0 && ^(main_preheader1i24ii_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %90 = add nsw i32 %87, %89*/
		main_preheader1i24ii_90 = (main_preheader1i24ii_87 + main_preheader1i24ii_89);
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %90 = add nsw i32 %87, %89*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_123)) begin
		main_preheader1i24ii_90_reg <= main_preheader1i24ii_90;
		if (start == 1'b0 && ^(main_preheader1i24ii_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %exitcond10 = icmp eq i32 %i.14.i22.i.i, 5*/
		main_preheader1i24ii_exitcond10 = (main_preheader1i24ii_i14i22ii_reg == 32'd5);
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %exitcond10 = icmp eq i32 %i.14.i22.i.i, 5*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_122)) begin
		main_preheader1i24ii_exitcond10_reg <= main_preheader1i24ii_exitcond10;
		if (start == 1'b0 && ^(main_preheader1i24ii_exitcond10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24ii_exitcond10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %91 = add nsw i32 %i.14.i22.i.i, 1*/
		main_preheader1i24preheader1i24_crit_edgeii_91 = (main_preheader1i24ii_i14i22ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %91 = add nsw i32 %i.14.i22.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_125)) begin
		main_preheader1i24preheader1i24_crit_edgeii_91_reg <= main_preheader1i24preheader1i24_crit_edgeii_91;
		if (start == 1'b0 && ^(main_preheader1i24preheader1i24_crit_edgeii_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24preheader1i24_crit_edgeii_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %.phi.trans.insert62.i.i = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %83*/
		main_preheader1i24preheader1i24_crit_edgeii_phitransinsert62ii = (1'd0 | (4 * main_preheader1i24ii_83_reg));
end
always @(posedge clk) begin
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %.phi.trans.insert62.i.i = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %83*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_125)) begin
		main_preheader1i24preheader1i24_crit_edgeii_phitransinsert62ii_reg <= main_preheader1i24preheader1i24_crit_edgeii_phitransinsert62ii;
		if (start == 1'b0 && ^(main_preheader1i24preheader1i24_crit_edgeii_phitransinsert62ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24preheader1i24_crit_edgeii_phitransinsert62ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %.phi.trans.insert64.i.i = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %83*/
		main_preheader1i24preheader1i24_crit_edgeii_phitransinsert64ii = (1'd0 | (4 * main_preheader1i24ii_83_reg));
end
always @(posedge clk) begin
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %.phi.trans.insert64.i.i = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %83*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_125)) begin
		main_preheader1i24preheader1i24_crit_edgeii_phitransinsert64ii_reg <= main_preheader1i24preheader1i24_crit_edgeii_phitransinsert64ii;
		if (start == 1'b0 && ^(main_preheader1i24preheader1i24_crit_edgeii_phitransinsert64ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24preheader1i24_crit_edgeii_phitransinsert64ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %.pre63.i.i = load i32* %.phi.trans.insert62.i.i, align 4, !tbaa !1*/
		main_preheader1i24preheader1i24_crit_edgeii_pre63ii = dec_del_dltx_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %.pre63.i.i = load i32* %.phi.trans.insert62.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_126)) begin
		main_preheader1i24preheader1i24_crit_edgeii_pre63ii_reg <= main_preheader1i24preheader1i24_crit_edgeii_pre63ii;
		if (start == 1'b0 && ^(main_preheader1i24preheader1i24_crit_edgeii_pre63ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24preheader1i24_crit_edgeii_pre63ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %.pre65.i.i = load i32* %.phi.trans.insert64.i.i, align 4, !tbaa !1*/
		main_preheader1i24preheader1i24_crit_edgeii_pre65ii = dec_del_bpl_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %.pre65.i.i = load i32* %.phi.trans.insert64.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_126)) begin
		main_preheader1i24preheader1i24_crit_edgeii_pre65ii_reg <= main_preheader1i24preheader1i24_crit_edgeii_pre65ii;
		if (start == 1'b0 && ^(main_preheader1i24preheader1i24_crit_edgeii_pre65ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i24preheader1i24_crit_edgeii_pre65ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %92 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_upzeroexit25ii_92 = dec_del_dltx_out_a;
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %92 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_92_reg <= main_upzeroexit25ii_92;
		if (start == 1'b0 && ^(main_upzeroexit25ii_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_upzeroexit25ii_93 = dec_del_dltx_out_b;
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_93_reg <= main_upzeroexit25ii_93;
		if (start == 1'b0 && ^(main_upzeroexit25ii_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_upzeroexit25ii_94 = dec_del_dltx_out_a;
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		main_upzeroexit25ii_94_reg <= main_upzeroexit25ii_94;
		if (start == 1'b0 && ^(main_upzeroexit25ii_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %95 = shl nsw i32 %dec_al1.0, 2*/
		main_upzeroexit25ii_95 = (main_30_dec_al10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %95 = shl nsw i32 %dec_al1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_129)) begin
		main_upzeroexit25ii_95_reg <= main_upzeroexit25ii_95;
		if (start == 1'b0 && ^(main_upzeroexit25ii_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_95_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexit25ii_96 = main_upzeroexit25ii_96_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %96 = mul nsw i32 %dec_plt1.0, %74*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_96_reg <= main_upzeroexit25ii_96;
		if (start == 1'b0 && ^(main_upzeroexit25ii_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_96_reg"); $finish; end
	end
	/* main: %upzero.exit25.i.i*/
	/*   %96 = mul nsw i32 %dec_plt1.0, %74*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_96_reg <= main_upzeroexit25ii_96;
		if (start == 1'b0 && ^(main_upzeroexit25ii_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %97 = icmp sgt i32 %96, -1*/
		main_upzeroexit25ii_97 = ($signed(main_upzeroexit25ii_96) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %97 = icmp sgt i32 %96, -1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_97_reg <= main_upzeroexit25ii_97;
		if (start == 1'b0 && ^(main_upzeroexit25ii_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %98 = sub nsw i32 0, %95*/
		main_upzeroexit25ii_98 = (32'd0 - main_upzeroexit25ii_95);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %98 = sub nsw i32 0, %95*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_129)) begin
		main_upzeroexit25ii_98_reg <= main_upzeroexit25ii_98;
		if (start == 1'b0 && ^(main_upzeroexit25ii_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %.1.i15.i.i = select i1 %97, i32 %98, i32 %95*/
		main_upzeroexit25ii_1i15ii = (main_upzeroexit25ii_97 ? main_upzeroexit25ii_98_reg : main_upzeroexit25ii_95_reg);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %.1.i15.i.i = select i1 %97, i32 %98, i32 %95*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_1i15ii_reg <= main_upzeroexit25ii_1i15ii;
		if (start == 1'b0 && ^(main_upzeroexit25ii_1i15ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_1i15ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %99 = ashr i32 %.1.i15.i.i, 7*/
		main_upzeroexit25ii_99 = ($signed(main_upzeroexit25ii_1i15ii) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %99 = ashr i32 %.1.i15.i.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_99_reg <= main_upzeroexit25ii_99;
		if (start == 1'b0 && ^(main_upzeroexit25ii_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_99_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexit25ii_100 = main_upzeroexit25ii_100_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %100 = mul nsw i32 %dec_plt2.0, %74*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_100_reg <= main_upzeroexit25ii_100;
		if (start == 1'b0 && ^(main_upzeroexit25ii_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_100_reg"); $finish; end
	end
	/* main: %upzero.exit25.i.i*/
	/*   %100 = mul nsw i32 %dec_plt2.0, %74*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_100_reg <= main_upzeroexit25ii_100;
		if (start == 1'b0 && ^(main_upzeroexit25ii_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %101 = ashr i32 %100, 31*/
		main_upzeroexit25ii_101 = ($signed(main_upzeroexit25ii_100) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %101 = ashr i32 %100, 31*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_101_reg <= main_upzeroexit25ii_101;
		if (start == 1'b0 && ^(main_upzeroexit25ii_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %102 = and i32 %101, -256*/
		main_upzeroexit25ii_102 = (main_upzeroexit25ii_101 & -32'd256);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %102 = and i32 %101, -256*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_102_reg <= main_upzeroexit25ii_102;
		if (start == 1'b0 && ^(main_upzeroexit25ii_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %103 = or i32 %102, 128*/
		main_upzeroexit25ii_103 = (main_upzeroexit25ii_102 | 32'd128);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %103 = or i32 %102, 128*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_103_reg <= main_upzeroexit25ii_103;
		if (start == 1'b0 && ^(main_upzeroexit25ii_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_103_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexit25ii_104 = main_upzeroexit25ii_104_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %104 = mul nsw i32 %dec_al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_104_reg <= main_upzeroexit25ii_104;
		if (start == 1'b0 && ^(main_upzeroexit25ii_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_104_reg"); $finish; end
	end
	/* main: %upzero.exit25.i.i*/
	/*   %104 = mul nsw i32 %dec_al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_104_reg <= main_upzeroexit25ii_104;
		if (start == 1'b0 && ^(main_upzeroexit25ii_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %105 = ashr i32 %104, 7*/
		main_upzeroexit25ii_105 = ($signed(main_upzeroexit25ii_104) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %105 = ashr i32 %104, 7*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_105_reg <= main_upzeroexit25ii_105;
		if (start == 1'b0 && ^(main_upzeroexit25ii_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %wd4.0.i16.i.i = add nsw i32 %99, %105*/
		main_upzeroexit25ii_wd40i16ii = (main_upzeroexit25ii_99 + main_upzeroexit25ii_105);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %wd4.0.i16.i.i = add nsw i32 %99, %105*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_wd40i16ii_reg <= main_upzeroexit25ii_wd40i16ii;
		if (start == 1'b0 && ^(main_upzeroexit25ii_wd40i16ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_wd40i16ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %106 = add nsw i32 %wd4.0.i16.i.i, %103*/
		main_upzeroexit25ii_106 = (main_upzeroexit25ii_wd40i16ii + main_upzeroexit25ii_103);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %106 = add nsw i32 %wd4.0.i16.i.i, %103*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_106_reg <= main_upzeroexit25ii_106;
		if (start == 1'b0 && ^(main_upzeroexit25ii_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %107 = icmp sgt i32 %106, 12288*/
		main_upzeroexit25ii_107 = ($signed(main_upzeroexit25ii_106) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %107 = icmp sgt i32 %106, 12288*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_107_reg <= main_upzeroexit25ii_107;
		if (start == 1'b0 && ^(main_upzeroexit25ii_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %..i17.i.i = select i1 %107, i32 12288, i32 %106*/
		main_upzeroexit25ii_i17ii = (main_upzeroexit25ii_107 ? 32'd12288 : main_upzeroexit25ii_106);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %..i17.i.i = select i1 %107, i32 12288, i32 %106*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_i17ii_reg <= main_upzeroexit25ii_i17ii;
		if (start == 1'b0 && ^(main_upzeroexit25ii_i17ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_i17ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %108 = icmp slt i32 %..i17.i.i, -12288*/
		main_upzeroexit25ii_108 = ($signed(main_upzeroexit25ii_i17ii_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %108 = icmp slt i32 %..i17.i.i, -12288*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		main_upzeroexit25ii_108_reg <= main_upzeroexit25ii_108;
		if (start == 1'b0 && ^(main_upzeroexit25ii_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %...i18.i.i = select i1 %108, i32 -12288, i32 %..i17.i.i*/
		main_upzeroexit25ii_i18ii = (main_upzeroexit25ii_108 ? -32'd12288 : main_upzeroexit25ii_i17ii_reg);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %...i18.i.i = select i1 %108, i32 -12288, i32 %..i17.i.i*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		main_upzeroexit25ii_i18ii_reg <= main_upzeroexit25ii_i18ii;
		if (start == 1'b0 && ^(main_upzeroexit25ii_i18ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_i18ii_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexit25ii_109 = main_upzeroexit25ii_109_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %109 = mul nsw i32 %dec_al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_109_reg <= main_upzeroexit25ii_109;
		if (start == 1'b0 && ^(main_upzeroexit25ii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_109_reg"); $finish; end
	end
	/* main: %upzero.exit25.i.i*/
	/*   %109 = mul nsw i32 %dec_al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_109_reg <= main_upzeroexit25ii_109;
		if (start == 1'b0 && ^(main_upzeroexit25ii_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %110 = ashr i32 %109, 8*/
		main_upzeroexit25ii_110 = ($signed(main_upzeroexit25ii_109) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %110 = ashr i32 %109, 8*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_110_reg <= main_upzeroexit25ii_110;
		if (start == 1'b0 && ^(main_upzeroexit25ii_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %111 = ashr i32 %96, 31*/
		main_upzeroexit25ii_111 = ($signed(main_upzeroexit25ii_96) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %111 = ashr i32 %96, 31*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_111_reg <= main_upzeroexit25ii_111;
		if (start == 1'b0 && ^(main_upzeroexit25ii_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %112 = and i32 %111, -384*/
		main_upzeroexit25ii_112 = (main_upzeroexit25ii_111 & -32'd384);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %112 = and i32 %111, -384*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_112_reg <= main_upzeroexit25ii_112;
		if (start == 1'b0 && ^(main_upzeroexit25ii_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %113 = add nsw i32 %110, 192*/
		main_upzeroexit25ii_113 = (main_upzeroexit25ii_110 + 32'd192);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %113 = add nsw i32 %110, 192*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_113_reg <= main_upzeroexit25ii_113;
		if (start == 1'b0 && ^(main_upzeroexit25ii_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %apl1.0.i12.i.i = add nsw i32 %113, %112*/
		main_upzeroexit25ii_apl10i12ii = (main_upzeroexit25ii_113 + main_upzeroexit25ii_112);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %apl1.0.i12.i.i = add nsw i32 %113, %112*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_apl10i12ii_reg <= main_upzeroexit25ii_apl10i12ii;
		if (start == 1'b0 && ^(main_upzeroexit25ii_apl10i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_apl10i12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %114 = sub nsw i32 15360, %...i18.i.i*/
		main_upzeroexit25ii_114 = (32'd15360 - main_upzeroexit25ii_i18ii);
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %114 = sub nsw i32 15360, %...i18.i.i*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		main_upzeroexit25ii_114_reg <= main_upzeroexit25ii_114;
		if (start == 1'b0 && ^(main_upzeroexit25ii_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %115 = icmp sgt i32 %apl1.0.i12.i.i, %114*/
		main_upzeroexit25ii_115 = ($signed(main_upzeroexit25ii_apl10i12ii_reg) > $signed(main_upzeroexit25ii_114));
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %115 = icmp sgt i32 %apl1.0.i12.i.i, %114*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		main_upzeroexit25ii_115_reg <= main_upzeroexit25ii_115;
		if (start == 1'b0 && ^(main_upzeroexit25ii_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %116 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_upzeroexit25ii_116 = dec_del_bph_out_a;
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %116 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_116_reg <= main_upzeroexit25ii_116;
		if (start == 1'b0 && ^(main_upzeroexit25ii_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit25.i.i*/
	/*   %117 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_upzeroexit25ii_117 = dec_del_dhx_out_a;
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %117 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		main_upzeroexit25ii_117_reg <= main_upzeroexit25ii_117;
		if (start == 1'b0 && ^(main_upzeroexit25ii_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_117_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexit25ii_118 = main_upzeroexit25ii_118_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %118 = mul nsw i32 %117, %116*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		main_upzeroexit25ii_118_reg <= main_upzeroexit25ii_118;
		if (start == 1'b0 && ^(main_upzeroexit25ii_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_118_reg"); $finish; end
	end
	/* main: %upzero.exit25.i.i*/
	/*   %118 = mul nsw i32 %117, %116*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		main_upzeroexit25ii_118_reg <= main_upzeroexit25ii_118;
		if (start == 1'b0 && ^(main_upzeroexit25ii_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit25ii_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %119 ], [ 0, %upzero.exit25.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_upzeroexit25ii_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_119_indvar17 = 32'd0;
	end
	/* main: %119*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %119 ], [ 0, %upzero.exit25.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__119_137) & (memory_controller_waitrequest == 1'd0)) & (main_119_exitcond19_reg == 1'd0))) */ begin
		main_119_indvar17 = main_119_indvarnext18_reg;
	end
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %119 ], [ 0, %upzero.exit25.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_upzeroexit25ii_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_119_indvar17_reg <= main_119_indvar17;
		if (start == 1'b0 && ^(main_119_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_indvar17_reg"); $finish; end
	end
	/* main: %119*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %119 ], [ 0, %upzero.exit25.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__119_137) & (memory_controller_waitrequest == 1'd0)) & (main_119_exitcond19_reg == 1'd0))) begin
		main_119_indvar17_reg <= main_119_indvar17;
		if (start == 1'b0 && ^(main_119_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_indvar17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %zl.05.i6.i.i = phi i32 [ %124, %119 ], [ %118, %upzero.exit25.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_upzeroexit25ii_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_119_zl05i6ii = main_upzeroexit25ii_118_reg;
	end
	/* main: %119*/
	/*   %zl.05.i6.i.i = phi i32 [ %124, %119 ], [ %118, %upzero.exit25.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__119_137) & (memory_controller_waitrequest == 1'd0)) & (main_119_exitcond19_reg == 1'd0))) */ begin
		main_119_zl05i6ii = main_119_124;
	end
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %zl.05.i6.i.i = phi i32 [ %124, %119 ], [ %118, %upzero.exit25.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_upzeroexit25ii_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_119_zl05i6ii_reg <= main_119_zl05i6ii;
		if (start == 1'b0 && ^(main_119_zl05i6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_zl05i6ii_reg"); $finish; end
	end
	/* main: %119*/
	/*   %zl.05.i6.i.i = phi i32 [ %124, %119 ], [ %118, %upzero.exit25.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__119_137) & (memory_controller_waitrequest == 1'd0)) & (main_119_exitcond19_reg == 1'd0))) begin
		main_119_zl05i6ii_reg <= main_119_zl05i6ii;
		if (start == 1'b0 && ^(main_119_zl05i6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_zl05i6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %120 = add i32 %indvar17, 1*/
		main_119_120 = (main_119_indvar17_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %120 = add i32 %indvar17, 1*/
	if ((cur_state == LEGUP_F_main_BB__119_134)) begin
		main_119_120_reg <= main_119_120;
		if (start == 1'b0 && ^(main_119_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %.017.i9.i.i = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %120*/
		main_119_017i9ii = (1'd0 | (4 * main_119_120_reg));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %.017.i9.i.i = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %120*/
	if ((cur_state == LEGUP_F_main_BB__119_135)) begin
		main_119_017i9ii_reg <= main_119_017i9ii;
		if (start == 1'b0 && ^(main_119_017i9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_017i9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %.06.i8.i.i = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %120*/
		main_119_06i8ii = (1'd0 | (4 * main_119_120_reg));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %.06.i8.i.i = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %120*/
	if ((cur_state == LEGUP_F_main_BB__119_135)) begin
		main_119_06i8ii_reg <= main_119_06i8ii;
		if (start == 1'b0 && ^(main_119_06i8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_06i8ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %121 = load i32* %.017.i9.i.i, align 4, !tbaa !1*/
		main_119_121 = dec_del_bph_out_a;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %121 = load i32* %.017.i9.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_136)) begin
		main_119_121_reg <= main_119_121;
		if (start == 1'b0 && ^(main_119_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %122 = load i32* %.06.i8.i.i, align 4, !tbaa !1*/
		main_119_122 = dec_del_dhx_out_a;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %122 = load i32* %.06.i8.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_136)) begin
		main_119_122_reg <= main_119_122;
		if (start == 1'b0 && ^(main_119_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_122_reg"); $finish; end
	end
end
always @(*) begin
	main_119_123 = main_119_123_stage0_reg;
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %123 = mul nsw i32 %122, %121*/
	if ((cur_state == LEGUP_F_main_BB__119_137)) begin
		main_119_123_reg <= main_119_123;
		if (start == 1'b0 && ^(main_119_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_123_reg"); $finish; end
	end
	/* main: %119*/
	/*   %123 = mul nsw i32 %122, %121*/
	if ((cur_state == LEGUP_F_main_BB__119_137)) begin
		main_119_123_reg <= main_119_123;
		if (start == 1'b0 && ^(main_119_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %124 = add nsw i32 %123, %zl.05.i6.i.i*/
		main_119_124 = (main_119_123 + main_119_zl05i6ii_reg);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %124 = add nsw i32 %123, %zl.05.i6.i.i*/
	if ((cur_state == LEGUP_F_main_BB__119_137)) begin
		main_119_124_reg <= main_119_124;
		if (start == 1'b0 && ^(main_119_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
		main_119_indvarnext18 = (main_119_indvar17_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
	if ((cur_state == LEGUP_F_main_BB__119_134)) begin
		main_119_indvarnext18_reg <= main_119_indvarnext18;
		if (start == 1'b0 && ^(main_119_indvarnext18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_indvarnext18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %exitcond19 = icmp eq i32 %indvar.next18, 5*/
		main_119_exitcond19 = (main_119_indvarnext18 == 32'd5);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %exitcond19 = icmp eq i32 %indvar.next18, 5*/
	if ((cur_state == LEGUP_F_main_BB__119_134)) begin
		main_119_exitcond19_reg <= main_119_exitcond19;
		if (start == 1'b0 && ^(main_119_exitcond19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_exitcond19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %125 = sub nsw i32 0, %114*/
		main_filtezexit11ii_125 = (32'd0 - main_upzeroexit25ii_114_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %125 = sub nsw i32 0, %114*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		main_filtezexit11ii_125_reg <= main_filtezexit11ii_125;
		if (start == 1'b0 && ^(main_filtezexit11ii_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %.apl1.0.i13.i.i = select i1 %115, i32 %114, i32 %apl1.0.i12.i.i*/
		main_filtezexit11ii_apl10i13ii = (main_upzeroexit25ii_115_reg ? main_upzeroexit25ii_114_reg : main_upzeroexit25ii_apl10i12ii_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %.apl1.0.i13.i.i = select i1 %115, i32 %114, i32 %apl1.0.i12.i.i*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		main_filtezexit11ii_apl10i13ii_reg <= main_filtezexit11ii_apl10i13ii;
		if (start == 1'b0 && ^(main_filtezexit11ii_apl10i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_apl10i13ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %126 = icmp slt i32 %.apl1.0.i13.i.i, %125*/
		main_filtezexit11ii_126 = ($signed(main_filtezexit11ii_apl10i13ii) < $signed(main_filtezexit11ii_125));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %126 = icmp slt i32 %.apl1.0.i13.i.i, %125*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		main_filtezexit11ii_126_reg <= main_filtezexit11ii_126;
		if (start == 1'b0 && ^(main_filtezexit11ii_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %apl1.2.i14.i.i = select i1 %126, i32 %125, i32 %.apl1.0.i13.i.i*/
		main_filtezexit11ii_apl12i14ii = (main_filtezexit11ii_126 ? main_filtezexit11ii_125 : main_filtezexit11ii_apl10i13ii);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %apl1.2.i14.i.i = select i1 %126, i32 %125, i32 %.apl1.0.i13.i.i*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		main_filtezexit11ii_apl12i14ii_reg <= main_filtezexit11ii_apl12i14ii;
		if (start == 1'b0 && ^(main_filtezexit11ii_apl12i14ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_apl12i14ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %127 = add nsw i32 %55, %49*/
		main_filtezexit11ii_127 = (main_filtezexitii_55_reg + main_filtezexitii_49_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %127 = add nsw i32 %55, %49*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		main_filtezexit11ii_127_reg <= main_filtezexit11ii_127;
		if (start == 1'b0 && ^(main_filtezexit11ii_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %128 = ashr i32 %124, 14*/
		main_filtezexit11ii_128 = ($signed(main_119_124_reg) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %128 = ashr i32 %124, 14*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		main_filtezexit11ii_128_reg <= main_filtezexit11ii_128;
		if (start == 1'b0 && ^(main_filtezexit11ii_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_128_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexit11ii_129 = main_filtezexit11ii_129_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %129 = mul i32 %dec_ah1.0, %dec_rh1.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_139)) begin
		main_filtezexit11ii_129_reg <= main_filtezexit11ii_129;
		if (start == 1'b0 && ^(main_filtezexit11ii_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_129_reg"); $finish; end
	end
	/* main: %filtez.exit11.i.i*/
	/*   %129 = mul i32 %dec_ah1.0, %dec_rh1.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_139)) begin
		main_filtezexit11ii_129_reg <= main_filtezexit11ii_129;
		if (start == 1'b0 && ^(main_filtezexit11ii_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_129_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexit11ii_130 = main_filtezexit11ii_130_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %130 = mul i32 %dec_ah2.0, %dec_rh2.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_139)) begin
		main_filtezexit11ii_130_reg <= main_filtezexit11ii_130;
		if (start == 1'b0 && ^(main_filtezexit11ii_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_130_reg"); $finish; end
	end
	/* main: %filtez.exit11.i.i*/
	/*   %130 = mul i32 %dec_ah2.0, %dec_rh2.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_139)) begin
		main_filtezexit11ii_130_reg <= main_filtezexit11ii_130;
		if (start == 1'b0 && ^(main_filtezexit11ii_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %tmp.i.i.i = add i32 %130, %129*/
		main_filtezexit11ii_tmpiii = (main_filtezexit11ii_130 + main_filtezexit11ii_129);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %tmp.i.i.i = add i32 %130, %129*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_139)) begin
		main_filtezexit11ii_tmpiii_reg <= main_filtezexit11ii_tmpiii;
		if (start == 1'b0 && ^(main_filtezexit11ii_tmpiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_tmpiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %tmp1.i.i.i = shl i32 %tmp.i.i.i, 1*/
		main_filtezexit11ii_tmp1iii = (main_filtezexit11ii_tmpiii <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %tmp1.i.i.i = shl i32 %tmp.i.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_139)) begin
		main_filtezexit11ii_tmp1iii_reg <= main_filtezexit11ii_tmp1iii;
		if (start == 1'b0 && ^(main_filtezexit11ii_tmp1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_tmp1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %131 = ashr i32 %tmp1.i.i.i, 15*/
		main_filtezexit11ii_131 = ($signed(main_filtezexit11ii_tmp1iii) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %131 = ashr i32 %tmp1.i.i.i, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_139)) begin
		main_filtezexit11ii_131_reg <= main_filtezexit11ii_131;
		if (start == 1'b0 && ^(main_filtezexit11ii_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %132 = add nsw i32 %131, %128*/
		main_filtezexit11ii_132 = (main_filtezexit11ii_131 + main_filtezexit11ii_128_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %132 = add nsw i32 %131, %128*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_139)) begin
		main_filtezexit11ii_132_reg <= main_filtezexit11ii_132;
		if (start == 1'b0 && ^(main_filtezexit11ii_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %133 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %44*/
		main_filtezexit11ii_133 = (`TAG_g_qq2_code2_table_a | (4 * main_filtezexitii_44_reg));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %133 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %44*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		main_filtezexit11ii_133_reg <= main_filtezexit11ii_133;
		if (start == 1'b0 && ^(main_filtezexit11ii_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %134 = load i32* %133, align 4, !tbaa !1*/
		main_filtezexit11ii_134 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %134 = load i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_140)) begin
		main_filtezexit11ii_134_reg <= main_filtezexit11ii_134;
		if (start == 1'b0 && ^(main_filtezexit11ii_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_134_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexit11ii_135 = main_filtezexit11ii_135_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %135 = mul nsw i32 %134, %dec_deth.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_141)) begin
		main_filtezexit11ii_135_reg <= main_filtezexit11ii_135;
		if (start == 1'b0 && ^(main_filtezexit11ii_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_135_reg"); $finish; end
	end
	/* main: %filtez.exit11.i.i*/
	/*   %135 = mul nsw i32 %134, %dec_deth.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_141)) begin
		main_filtezexit11ii_135_reg <= main_filtezexit11ii_135;
		if (start == 1'b0 && ^(main_filtezexit11ii_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %136 = ashr i32 %135, 15*/
		main_filtezexit11ii_136 = ($signed(main_filtezexit11ii_135) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %136 = ashr i32 %135, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_141)) begin
		main_filtezexit11ii_136_reg <= main_filtezexit11ii_136;
		if (start == 1'b0 && ^(main_filtezexit11ii_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_136_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexit11ii_137 = main_filtezexit11ii_137_stage0_reg;
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %137 = mul nsw i32 %dec_nbh.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_139)) begin
		main_filtezexit11ii_137_reg <= main_filtezexit11ii_137;
		if (start == 1'b0 && ^(main_filtezexit11ii_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_137_reg"); $finish; end
	end
	/* main: %filtez.exit11.i.i*/
	/*   %137 = mul nsw i32 %dec_nbh.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_139)) begin
		main_filtezexit11ii_137_reg <= main_filtezexit11ii_137;
		if (start == 1'b0 && ^(main_filtezexit11ii_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %138 = ashr i32 %137, 7*/
		main_filtezexit11ii_138 = ($signed(main_filtezexit11ii_137) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %138 = ashr i32 %137, 7*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_139)) begin
		main_filtezexit11ii_138_reg <= main_filtezexit11ii_138;
		if (start == 1'b0 && ^(main_filtezexit11ii_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %139 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %44*/
		main_filtezexit11ii_139 = (`TAG_g_wh_code_table_a | (4 * main_filtezexitii_44_reg));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %139 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %44*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		main_filtezexit11ii_139_reg <= main_filtezexit11ii_139;
		if (start == 1'b0 && ^(main_filtezexit11ii_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %140 = load i32* %139, align 4, !tbaa !1*/
		main_filtezexit11ii_140 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %140 = load i32* %139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_140)) begin
		main_filtezexit11ii_140_reg <= main_filtezexit11ii_140;
		if (start == 1'b0 && ^(main_filtezexit11ii_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %141 = add nsw i32 %138, %140*/
		main_filtezexit11ii_141 = (main_filtezexit11ii_138_reg + main_filtezexit11ii_140);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %141 = add nsw i32 %138, %140*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_140)) begin
		main_filtezexit11ii_141_reg <= main_filtezexit11ii_141;
		if (start == 1'b0 && ^(main_filtezexit11ii_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %142 = icmp slt i32 %141, 0*/
		main_filtezexit11ii_142 = ($signed(main_filtezexit11ii_141) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %142 = icmp slt i32 %141, 0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_140)) begin
		main_filtezexit11ii_142_reg <= main_filtezexit11ii_142;
		if (start == 1'b0 && ^(main_filtezexit11ii_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %..i2.i.i = select i1 %142, i32 0, i32 %141*/
		main_filtezexit11ii_i2ii = (main_filtezexit11ii_142 ? 32'd0 : main_filtezexit11ii_141);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %..i2.i.i = select i1 %142, i32 0, i32 %141*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_140)) begin
		main_filtezexit11ii_i2ii_reg <= main_filtezexit11ii_i2ii;
		if (start == 1'b0 && ^(main_filtezexit11ii_i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_i2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %143 = icmp sgt i32 %..i2.i.i, 22528*/
		main_filtezexit11ii_143 = ($signed(main_filtezexit11ii_i2ii) > $signed(32'd22528));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %143 = icmp sgt i32 %..i2.i.i, 22528*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_140)) begin
		main_filtezexit11ii_143_reg <= main_filtezexit11ii_143;
		if (start == 1'b0 && ^(main_filtezexit11ii_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %...i3.i.i = select i1 %143, i32 22528, i32 %..i2.i.i*/
		main_filtezexit11ii_i3ii = (main_filtezexit11ii_143 ? 32'd22528 : main_filtezexit11ii_i2ii);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %...i3.i.i = select i1 %143, i32 22528, i32 %..i2.i.i*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_140)) begin
		main_filtezexit11ii_i3ii_reg <= main_filtezexit11ii_i3ii;
		if (start == 1'b0 && ^(main_filtezexit11ii_i3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_i3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %144 = lshr i32 %...i3.i.i, 6*/
		main_filtezexit11ii_144 = (main_filtezexit11ii_i3ii >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %144 = lshr i32 %...i3.i.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_140)) begin
		main_filtezexit11ii_144_reg <= main_filtezexit11ii_144;
		if (start == 1'b0 && ^(main_filtezexit11ii_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %145 = and i32 %144, 31*/
		main_filtezexit11ii_145 = (main_filtezexit11ii_144 & 32'd31);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %145 = and i32 %144, 31*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_140)) begin
		main_filtezexit11ii_145_reg <= main_filtezexit11ii_145;
		if (start == 1'b0 && ^(main_filtezexit11ii_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %146 = ashr i32 %...i3.i.i, 11*/
		main_filtezexit11ii_146 = ($signed(main_filtezexit11ii_i3ii) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %146 = ashr i32 %...i3.i.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_140)) begin
		main_filtezexit11ii_146_reg <= main_filtezexit11ii_146;
		if (start == 1'b0 && ^(main_filtezexit11ii_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %147 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %145*/
		main_filtezexit11ii_147 = (`TAG_g_ilb_table_a | (4 * main_filtezexit11ii_145_reg));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %147 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_141)) begin
		main_filtezexit11ii_147_reg <= main_filtezexit11ii_147;
		if (start == 1'b0 && ^(main_filtezexit11ii_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
		main_filtezexit11ii_148 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_143)) begin
		main_filtezexit11ii_148_reg <= main_filtezexit11ii_148;
		if (start == 1'b0 && ^(main_filtezexit11ii_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %149 = sub i32 11, %146*/
		main_filtezexit11ii_149 = (32'd11 - main_filtezexit11ii_146);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %149 = sub i32 11, %146*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_140)) begin
		main_filtezexit11ii_149_reg <= main_filtezexit11ii_149;
		if (start == 1'b0 && ^(main_filtezexit11ii_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %150 = ashr i32 %148, %149*/
		main_filtezexit11ii_150 = ($signed(main_filtezexit11ii_148) >>> main_filtezexit11ii_149_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %150 = ashr i32 %148, %149*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_143)) begin
		main_filtezexit11ii_150_reg <= main_filtezexit11ii_150;
		if (start == 1'b0 && ^(main_filtezexit11ii_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %151 = shl i32 %150, 3*/
		main_filtezexit11ii_151 = (main_filtezexit11ii_150 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %151 = shl i32 %150, 3*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_143)) begin
		main_filtezexit11ii_151_reg <= main_filtezexit11ii_151;
		if (start == 1'b0 && ^(main_filtezexit11ii_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %152 = add nsw i32 %128, %136*/
		main_filtezexit11ii_152 = (main_filtezexit11ii_128_reg + main_filtezexit11ii_136);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %152 = add nsw i32 %128, %136*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_141)) begin
		main_filtezexit11ii_152_reg <= main_filtezexit11ii_152;
		if (start == 1'b0 && ^(main_filtezexit11ii_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit11.i.i*/
	/*   %153 = icmp eq i32 %136, 0*/
		main_filtezexit11ii_153 = (main_filtezexit11ii_136 == 32'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %153 = icmp eq i32 %136, 0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_141)) begin
		main_filtezexit11ii_153_reg <= main_filtezexit11ii_153;
		if (start == 1'b0 && ^(main_filtezexit11ii_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit11ii_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i*/
	/*   %154 = phi i32 [ %.pre57.i.i, %.preheader.i..preheader.i_crit_edge.i.i ], [ %116, %.preheader.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderiiipreheader_145) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderiii_154 = main_upzeroexit25ii_116_reg;
	end
	/* main: %.preheader.i.i.i*/
	/*   %154 = phi i32 [ %.pre57.i.i, %.preheader.i..preheader.i_crit_edge.i.i ], [ %116, %.preheader.i.i.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_151) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheaderiii_154 = main_preheaderipreheaderi_crit_edgeii_pre57ii;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i.i.i*/
	/*   %154 = phi i32 [ %.pre57.i.i, %.preheader.i..preheader.i_crit_edge.i.i ], [ %116, %.preheader.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderiiipreheader_145) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderiii_154_reg <= main_preheaderiii_154;
		if (start == 1'b0 && ^(main_preheaderiii_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_154_reg"); $finish; end
	end
	/* main: %.preheader.i.i.i*/
	/*   %154 = phi i32 [ %.pre57.i.i, %.preheader.i..preheader.i_crit_edge.i.i ], [ %116, %.preheader.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_151) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderiii_154_reg <= main_preheaderiii_154;
		if (start == 1'b0 && ^(main_preheaderiii_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i*/
	/*   %i.03.i.i.i = phi i32 [ %157, %.preheader.i..preheader.i_crit_edge.i.i ], [ 0, %.preheader.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderiiipreheader_145) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderiii_i03iii = 32'd0;
	end
	/* main: %.preheader.i.i.i*/
	/*   %i.03.i.i.i = phi i32 [ %157, %.preheader.i..preheader.i_crit_edge.i.i ], [ 0, %.preheader.i.i.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_151) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheaderiii_i03iii = main_preheaderipreheaderi_crit_edgeii_157_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i.i.i*/
	/*   %i.03.i.i.i = phi i32 [ %157, %.preheader.i..preheader.i_crit_edge.i.i ], [ 0, %.preheader.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderiiipreheader_145) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderiii_i03iii_reg <= main_preheaderiii_i03iii;
		if (start == 1'b0 && ^(main_preheaderiii_i03iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_i03iii_reg"); $finish; end
	end
	/* main: %.preheader.i.i.i*/
	/*   %i.03.i.i.i = phi i32 [ %157, %.preheader.i..preheader.i_crit_edge.i.i ], [ 0, %.preheader.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_151) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderiii_i03iii_reg <= main_preheaderiii_i03iii;
		if (start == 1'b0 && ^(main_preheaderiii_i03iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_i03iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i*/
	/*   %scevgep28 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %i.03.i.i.i*/
		main_preheaderiii_scevgep28 = (1'd0 | (4 * main_preheaderiii_i03iii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i.i*/
	/*   %scevgep28 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %i.03.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderiii_146)) begin
		main_preheaderiii_scevgep28_reg <= main_preheaderiii_scevgep28;
		if (start == 1'b0 && ^(main_preheaderiii_scevgep28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_scevgep28_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderiii_155 = main_preheaderiii_155_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i.i.i*/
	/*   %155 = mul nsw i32 %154, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderiii_147)) begin
		main_preheaderiii_155_reg <= main_preheaderiii_155;
		if (start == 1'b0 && ^(main_preheaderiii_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_155_reg"); $finish; end
	end
	/* main: %.preheader.i.i.i*/
	/*   %155 = mul nsw i32 %154, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderiii_147)) begin
		main_preheaderiii_155_reg <= main_preheaderiii_155;
		if (start == 1'b0 && ^(main_preheaderiii_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i*/
	/*   %156 = ashr i32 %155, 8*/
		main_preheaderiii_156 = ($signed(main_preheaderiii_155) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i.i*/
	/*   %156 = ashr i32 %155, 8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderiii_147)) begin
		main_preheaderiii_156_reg <= main_preheaderiii_156;
		if (start == 1'b0 && ^(main_preheaderiii_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i.i*/
	/*   %exitcond26 = icmp eq i32 %i.03.i.i.i, 5*/
		main_preheaderiii_exitcond26 = (main_preheaderiii_i03iii_reg == 32'd5);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i.i*/
	/*   %exitcond26 = icmp eq i32 %i.03.i.i.i, 5*/
	if ((cur_state == LEGUP_F_main_BB_preheaderiii_146)) begin
		main_preheaderiii_exitcond26_reg <= main_preheaderiii_exitcond26;
		if (start == 1'b0 && ^(main_preheaderiii_exitcond26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderiii_exitcond26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i..preheader.i_crit_edge.i.i*/
	/*   %157 = add nsw i32 %i.03.i.i.i, 1*/
		main_preheaderipreheaderi_crit_edgeii_157 = (main_preheaderiii_i03iii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i..preheader.i_crit_edge.i.i*/
	/*   %157 = add nsw i32 %i.03.i.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_149)) begin
		main_preheaderipreheaderi_crit_edgeii_157_reg <= main_preheaderipreheaderi_crit_edgeii_157;
		if (start == 1'b0 && ^(main_preheaderipreheaderi_crit_edgeii_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheaderi_crit_edgeii_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i..preheader.i_crit_edge.i.i*/
	/*   %158 = add i32 %i.03.i.i.i, 1*/
		main_preheaderipreheaderi_crit_edgeii_158 = (main_preheaderiii_i03iii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i..preheader.i_crit_edge.i.i*/
	/*   %158 = add i32 %i.03.i.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_149)) begin
		main_preheaderipreheaderi_crit_edgeii_158_reg <= main_preheaderipreheaderi_crit_edgeii_158;
		if (start == 1'b0 && ^(main_preheaderipreheaderi_crit_edgeii_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheaderi_crit_edgeii_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i..preheader.i_crit_edge.i.i*/
	/*   %.phi.trans.insert56.i.i = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %158*/
		main_preheaderipreheaderi_crit_edgeii_phitransinsert56ii = (1'd0 | (4 * main_preheaderipreheaderi_crit_edgeii_158_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i..preheader.i_crit_edge.i.i*/
	/*   %.phi.trans.insert56.i.i = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %158*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_150)) begin
		main_preheaderipreheaderi_crit_edgeii_phitransinsert56ii_reg <= main_preheaderipreheaderi_crit_edgeii_phitransinsert56ii;
		if (start == 1'b0 && ^(main_preheaderipreheaderi_crit_edgeii_phitransinsert56ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheaderi_crit_edgeii_phitransinsert56ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i..preheader.i_crit_edge.i.i*/
	/*   %.pre57.i.i = load i32* %.phi.trans.insert56.i.i, align 4, !tbaa !1*/
		main_preheaderipreheaderi_crit_edgeii_pre57ii = dec_del_bph_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i..preheader.i_crit_edge.i.i*/
	/*   %.pre57.i.i = load i32* %.phi.trans.insert56.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_151)) begin
		main_preheaderipreheaderi_crit_edgeii_pre57ii_reg <= main_preheaderipreheaderi_crit_edgeii_pre57ii;
		if (start == 1'b0 && ^(main_preheaderipreheaderi_crit_edgeii_pre57ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheaderi_crit_edgeii_pre57ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i*/
	/*   %159 = phi i32 [ %.pre61.i.i, %.preheader1.i..preheader1.i_crit_edge.i.i ], [ %116, %.preheader1.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1iiipreheader_144) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1iii_159 = main_upzeroexit25ii_116_reg;
	end
	/* main: %.preheader1.i.i.i*/
	/*   %159 = phi i32 [ %.pre61.i.i, %.preheader1.i..preheader1.i_crit_edge.i.i ], [ %116, %.preheader1.i.i.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_156) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader1iii_159 = main_preheader1ipreheader1i_crit_edgeii_pre61ii;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %159 = phi i32 [ %.pre61.i.i, %.preheader1.i..preheader1.i_crit_edge.i.i ], [ %116, %.preheader1.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1iiipreheader_144) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1iii_159_reg <= main_preheader1iii_159;
		if (start == 1'b0 && ^(main_preheader1iii_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_159_reg"); $finish; end
	end
	/* main: %.preheader1.i.i.i*/
	/*   %159 = phi i32 [ %.pre61.i.i, %.preheader1.i..preheader1.i_crit_edge.i.i ], [ %116, %.preheader1.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_156) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1iii_159_reg <= main_preheader1iii_159;
		if (start == 1'b0 && ^(main_preheader1iii_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i*/
	/*   %160 = phi i32 [ %.pre59.i.i, %.preheader1.i..preheader1.i_crit_edge.i.i ], [ %117, %.preheader1.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1iiipreheader_144) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1iii_160 = main_upzeroexit25ii_117_reg;
	end
	/* main: %.preheader1.i.i.i*/
	/*   %160 = phi i32 [ %.pre59.i.i, %.preheader1.i..preheader1.i_crit_edge.i.i ], [ %117, %.preheader1.i.i.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_156) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader1iii_160 = main_preheader1ipreheader1i_crit_edgeii_pre59ii;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %160 = phi i32 [ %.pre59.i.i, %.preheader1.i..preheader1.i_crit_edge.i.i ], [ %117, %.preheader1.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1iiipreheader_144) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1iii_160_reg <= main_preheader1iii_160;
		if (start == 1'b0 && ^(main_preheader1iii_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_160_reg"); $finish; end
	end
	/* main: %.preheader1.i.i.i*/
	/*   %160 = phi i32 [ %.pre59.i.i, %.preheader1.i..preheader1.i_crit_edge.i.i ], [ %117, %.preheader1.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_156) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1iii_160_reg <= main_preheader1iii_160;
		if (start == 1'b0 && ^(main_preheader1iii_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i*/
	/*   %i.14.i.i.i = phi i32 [ %169, %.preheader1.i..preheader1.i_crit_edge.i.i ], [ 0, %.preheader1.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1iiipreheader_144) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1iii_i14iii = 32'd0;
	end
	/* main: %.preheader1.i.i.i*/
	/*   %i.14.i.i.i = phi i32 [ %169, %.preheader1.i..preheader1.i_crit_edge.i.i ], [ 0, %.preheader1.i.i.i.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_156) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader1iii_i14iii = main_preheader1ipreheader1i_crit_edgeii_169_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %i.14.i.i.i = phi i32 [ %169, %.preheader1.i..preheader1.i_crit_edge.i.i ], [ 0, %.preheader1.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1iiipreheader_144) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1iii_i14iii_reg <= main_preheader1iii_i14iii;
		if (start == 1'b0 && ^(main_preheader1iii_i14iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_i14iii_reg"); $finish; end
	end
	/* main: %.preheader1.i.i.i*/
	/*   %i.14.i.i.i = phi i32 [ %169, %.preheader1.i..preheader1.i_crit_edge.i.i ], [ 0, %.preheader1.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_156) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1iii_i14iii_reg <= main_preheader1iii_i14iii;
		if (start == 1'b0 && ^(main_preheader1iii_i14iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_i14iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i*/
	/*   %161 = add i32 %i.14.i.i.i, 1*/
		main_preheader1iii_161 = (main_preheader1iii_i14iii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %161 = add i32 %i.14.i.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_152)) begin
		main_preheader1iii_161_reg <= main_preheader1iii_161;
		if (start == 1'b0 && ^(main_preheader1iii_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i*/
	/*   %scevgep25 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %i.14.i.i.i*/
		main_preheader1iii_scevgep25 = (1'd0 | (4 * main_preheader1iii_i14iii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %scevgep25 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %i.14.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_152)) begin
		main_preheader1iii_scevgep25_reg <= main_preheader1iii_scevgep25;
		if (start == 1'b0 && ^(main_preheader1iii_scevgep25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_scevgep25_reg"); $finish; end
	end
end
always @(*) begin
	main_preheader1iii_162 = main_preheader1iii_162_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %162 = mul nsw i32 %160, %136*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_153)) begin
		main_preheader1iii_162_reg <= main_preheader1iii_162;
		if (start == 1'b0 && ^(main_preheader1iii_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_162_reg"); $finish; end
	end
	/* main: %.preheader1.i.i.i*/
	/*   %162 = mul nsw i32 %160, %136*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_153)) begin
		main_preheader1iii_162_reg <= main_preheader1iii_162;
		if (start == 1'b0 && ^(main_preheader1iii_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i*/
	/*   %163 = ashr i32 %162, 31*/
		main_preheader1iii_163 = ($signed(main_preheader1iii_162) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %163 = ashr i32 %162, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_153)) begin
		main_preheader1iii_163_reg <= main_preheader1iii_163;
		if (start == 1'b0 && ^(main_preheader1iii_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i*/
	/*   %164 = and i32 %163, -256*/
		main_preheader1iii_164 = (main_preheader1iii_163 & -32'd256);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %164 = and i32 %163, -256*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_153)) begin
		main_preheader1iii_164_reg <= main_preheader1iii_164;
		if (start == 1'b0 && ^(main_preheader1iii_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i*/
	/*   %165 = or i32 %164, 128*/
		main_preheader1iii_165 = (main_preheader1iii_164 | 32'd128);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %165 = or i32 %164, 128*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_153)) begin
		main_preheader1iii_165_reg <= main_preheader1iii_165;
		if (start == 1'b0 && ^(main_preheader1iii_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_165_reg"); $finish; end
	end
end
always @(*) begin
	main_preheader1iii_166 = main_preheader1iii_166_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %166 = mul nsw i32 %159, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_153)) begin
		main_preheader1iii_166_reg <= main_preheader1iii_166;
		if (start == 1'b0 && ^(main_preheader1iii_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_166_reg"); $finish; end
	end
	/* main: %.preheader1.i.i.i*/
	/*   %166 = mul nsw i32 %159, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_153)) begin
		main_preheader1iii_166_reg <= main_preheader1iii_166;
		if (start == 1'b0 && ^(main_preheader1iii_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i*/
	/*   %167 = ashr i32 %166, 8*/
		main_preheader1iii_167 = ($signed(main_preheader1iii_166) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %167 = ashr i32 %166, 8*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_153)) begin
		main_preheader1iii_167_reg <= main_preheader1iii_167;
		if (start == 1'b0 && ^(main_preheader1iii_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i*/
	/*   %168 = add nsw i32 %165, %167*/
		main_preheader1iii_168 = (main_preheader1iii_165 + main_preheader1iii_167);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %168 = add nsw i32 %165, %167*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_153)) begin
		main_preheader1iii_168_reg <= main_preheader1iii_168;
		if (start == 1'b0 && ^(main_preheader1iii_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i*/
	/*   %exitcond22 = icmp eq i32 %i.14.i.i.i, 5*/
		main_preheader1iii_exitcond22 = (main_preheader1iii_i14iii_reg == 32'd5);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %exitcond22 = icmp eq i32 %i.14.i.i.i, 5*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_152)) begin
		main_preheader1iii_exitcond22_reg <= main_preheader1iii_exitcond22;
		if (start == 1'b0 && ^(main_preheader1iii_exitcond22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iii_exitcond22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %169 = add nsw i32 %i.14.i.i.i, 1*/
		main_preheader1ipreheader1i_crit_edgeii_169 = (main_preheader1iii_i14iii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %169 = add nsw i32 %i.14.i.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_155)) begin
		main_preheader1ipreheader1i_crit_edgeii_169_reg <= main_preheader1ipreheader1i_crit_edgeii_169;
		if (start == 1'b0 && ^(main_preheader1ipreheader1i_crit_edgeii_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ipreheader1i_crit_edgeii_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %.phi.trans.insert58.i.i = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %161*/
		main_preheader1ipreheader1i_crit_edgeii_phitransinsert58ii = (1'd0 | (4 * main_preheader1iii_161_reg));
end
always @(posedge clk) begin
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %.phi.trans.insert58.i.i = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %161*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_155)) begin
		main_preheader1ipreheader1i_crit_edgeii_phitransinsert58ii_reg <= main_preheader1ipreheader1i_crit_edgeii_phitransinsert58ii;
		if (start == 1'b0 && ^(main_preheader1ipreheader1i_crit_edgeii_phitransinsert58ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ipreheader1i_crit_edgeii_phitransinsert58ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %.phi.trans.insert60.i.i = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %161*/
		main_preheader1ipreheader1i_crit_edgeii_phitransinsert60ii = (1'd0 | (4 * main_preheader1iii_161_reg));
end
always @(posedge clk) begin
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %.phi.trans.insert60.i.i = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %161*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_155)) begin
		main_preheader1ipreheader1i_crit_edgeii_phitransinsert60ii_reg <= main_preheader1ipreheader1i_crit_edgeii_phitransinsert60ii;
		if (start == 1'b0 && ^(main_preheader1ipreheader1i_crit_edgeii_phitransinsert60ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ipreheader1i_crit_edgeii_phitransinsert60ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %.pre59.i.i = load i32* %.phi.trans.insert58.i.i, align 4, !tbaa !1*/
		main_preheader1ipreheader1i_crit_edgeii_pre59ii = dec_del_dhx_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %.pre59.i.i = load i32* %.phi.trans.insert58.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_156)) begin
		main_preheader1ipreheader1i_crit_edgeii_pre59ii_reg <= main_preheader1ipreheader1i_crit_edgeii_pre59ii;
		if (start == 1'b0 && ^(main_preheader1ipreheader1i_crit_edgeii_pre59ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ipreheader1i_crit_edgeii_pre59ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %.pre61.i.i = load i32* %.phi.trans.insert60.i.i, align 4, !tbaa !1*/
		main_preheader1ipreheader1i_crit_edgeii_pre61ii = dec_del_bph_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %.pre61.i.i = load i32* %.phi.trans.insert60.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_156)) begin
		main_preheader1ipreheader1i_crit_edgeii_pre61ii_reg <= main_preheader1ipreheader1i_crit_edgeii_pre61ii;
		if (start == 1'b0 && ^(main_preheader1ipreheader1i_crit_edgeii_pre61ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ipreheader1i_crit_edgeii_pre61ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_upzeroexitii_170 = dec_del_dhx_out_a;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_170_reg <= main_upzeroexitii_170;
		if (start == 1'b0 && ^(main_upzeroexitii_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %171 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_upzeroexitii_171 = dec_del_dhx_out_b;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %171 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_171_reg <= main_upzeroexitii_171;
		if (start == 1'b0 && ^(main_upzeroexitii_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_upzeroexitii_172 = dec_del_dhx_out_a;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_161)) begin
		main_upzeroexitii_172_reg <= main_upzeroexitii_172;
		if (start == 1'b0 && ^(main_upzeroexitii_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %173 = shl nsw i32 %dec_ah1.0, 2*/
		main_upzeroexitii_173 = (main_30_dec_ah10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %173 = shl nsw i32 %dec_ah1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_159)) begin
		main_upzeroexitii_173_reg <= main_upzeroexitii_173;
		if (start == 1'b0 && ^(main_upzeroexitii_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_173_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexitii_174 = main_upzeroexitii_174_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %174 = mul nsw i32 %dec_ph1.0, %152*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_174_reg <= main_upzeroexitii_174;
		if (start == 1'b0 && ^(main_upzeroexitii_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_174_reg"); $finish; end
	end
	/* main: %upzero.exit.i.i*/
	/*   %174 = mul nsw i32 %dec_ph1.0, %152*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_174_reg <= main_upzeroexitii_174;
		if (start == 1'b0 && ^(main_upzeroexitii_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %175 = icmp sgt i32 %174, -1*/
		main_upzeroexitii_175 = ($signed(main_upzeroexitii_174) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %175 = icmp sgt i32 %174, -1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_175_reg <= main_upzeroexitii_175;
		if (start == 1'b0 && ^(main_upzeroexitii_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %176 = sub nsw i32 0, %173*/
		main_upzeroexitii_176 = (32'd0 - main_upzeroexitii_173);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %176 = sub nsw i32 0, %173*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_159)) begin
		main_upzeroexitii_176_reg <= main_upzeroexitii_176;
		if (start == 1'b0 && ^(main_upzeroexitii_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %.1.i.i.i = select i1 %175, i32 %176, i32 %173*/
		main_upzeroexitii_1iii = (main_upzeroexitii_175 ? main_upzeroexitii_176_reg : main_upzeroexitii_173_reg);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %.1.i.i.i = select i1 %175, i32 %176, i32 %173*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_1iii_reg <= main_upzeroexitii_1iii;
		if (start == 1'b0 && ^(main_upzeroexitii_1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %177 = ashr i32 %.1.i.i.i, 7*/
		main_upzeroexitii_177 = ($signed(main_upzeroexitii_1iii) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %177 = ashr i32 %.1.i.i.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_177_reg <= main_upzeroexitii_177;
		if (start == 1'b0 && ^(main_upzeroexitii_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_177_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexitii_178 = main_upzeroexitii_178_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %178 = mul nsw i32 %dec_ph2.0, %152*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_178_reg <= main_upzeroexitii_178;
		if (start == 1'b0 && ^(main_upzeroexitii_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_178_reg"); $finish; end
	end
	/* main: %upzero.exit.i.i*/
	/*   %178 = mul nsw i32 %dec_ph2.0, %152*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_178_reg <= main_upzeroexitii_178;
		if (start == 1'b0 && ^(main_upzeroexitii_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %179 = ashr i32 %178, 31*/
		main_upzeroexitii_179 = ($signed(main_upzeroexitii_178) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %179 = ashr i32 %178, 31*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_179_reg <= main_upzeroexitii_179;
		if (start == 1'b0 && ^(main_upzeroexitii_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %180 = and i32 %179, -256*/
		main_upzeroexitii_180 = (main_upzeroexitii_179 & -32'd256);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %180 = and i32 %179, -256*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_180_reg <= main_upzeroexitii_180;
		if (start == 1'b0 && ^(main_upzeroexitii_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %181 = or i32 %180, 128*/
		main_upzeroexitii_181 = (main_upzeroexitii_180 | 32'd128);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %181 = or i32 %180, 128*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_181_reg <= main_upzeroexitii_181;
		if (start == 1'b0 && ^(main_upzeroexitii_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_181_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexitii_182 = main_upzeroexitii_182_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %182 = mul nsw i32 %dec_ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_182_reg <= main_upzeroexitii_182;
		if (start == 1'b0 && ^(main_upzeroexitii_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_182_reg"); $finish; end
	end
	/* main: %upzero.exit.i.i*/
	/*   %182 = mul nsw i32 %dec_ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_182_reg <= main_upzeroexitii_182;
		if (start == 1'b0 && ^(main_upzeroexitii_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %183 = ashr i32 %182, 7*/
		main_upzeroexitii_183 = ($signed(main_upzeroexitii_182) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %183 = ashr i32 %182, 7*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_183_reg <= main_upzeroexitii_183;
		if (start == 1'b0 && ^(main_upzeroexitii_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %wd4.0.i.i.i = add nsw i32 %177, %183*/
		main_upzeroexitii_wd40iii = (main_upzeroexitii_177 + main_upzeroexitii_183);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %wd4.0.i.i.i = add nsw i32 %177, %183*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_wd40iii_reg <= main_upzeroexitii_wd40iii;
		if (start == 1'b0 && ^(main_upzeroexitii_wd40iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_wd40iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %184 = add nsw i32 %wd4.0.i.i.i, %181*/
		main_upzeroexitii_184 = (main_upzeroexitii_wd40iii + main_upzeroexitii_181);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %184 = add nsw i32 %wd4.0.i.i.i, %181*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_184_reg <= main_upzeroexitii_184;
		if (start == 1'b0 && ^(main_upzeroexitii_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %185 = icmp sgt i32 %184, 12288*/
		main_upzeroexitii_185 = ($signed(main_upzeroexitii_184) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %185 = icmp sgt i32 %184, 12288*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_185_reg <= main_upzeroexitii_185;
		if (start == 1'b0 && ^(main_upzeroexitii_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %..i.i.i = select i1 %185, i32 12288, i32 %184*/
		main_upzeroexitii_iii = (main_upzeroexitii_185 ? 32'd12288 : main_upzeroexitii_184);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %..i.i.i = select i1 %185, i32 12288, i32 %184*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_iii_reg <= main_upzeroexitii_iii;
		if (start == 1'b0 && ^(main_upzeroexitii_iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %186 = icmp slt i32 %..i.i.i, -12288*/
		main_upzeroexitii_186 = ($signed(main_upzeroexitii_iii_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %186 = icmp slt i32 %..i.i.i, -12288*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_161)) begin
		main_upzeroexitii_186_reg <= main_upzeroexitii_186;
		if (start == 1'b0 && ^(main_upzeroexitii_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %...i.i.i = select i1 %186, i32 -12288, i32 %..i.i.i*/
		main_upzeroexitii_iii_var0 = (main_upzeroexitii_186 ? -32'd12288 : main_upzeroexitii_iii_reg);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %...i.i.i = select i1 %186, i32 -12288, i32 %..i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_161)) begin
		main_upzeroexitii_iii_var0_reg <= main_upzeroexitii_iii_var0;
		if (start == 1'b0 && ^(main_upzeroexitii_iii_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_iii_var0_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexitii_187 = main_upzeroexitii_187_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %187 = mul nsw i32 %dec_ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_187_reg <= main_upzeroexitii_187;
		if (start == 1'b0 && ^(main_upzeroexitii_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_187_reg"); $finish; end
	end
	/* main: %upzero.exit.i.i*/
	/*   %187 = mul nsw i32 %dec_ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_187_reg <= main_upzeroexitii_187;
		if (start == 1'b0 && ^(main_upzeroexitii_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %188 = ashr i32 %187, 8*/
		main_upzeroexitii_188 = ($signed(main_upzeroexitii_187) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %188 = ashr i32 %187, 8*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_188_reg <= main_upzeroexitii_188;
		if (start == 1'b0 && ^(main_upzeroexitii_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %189 = ashr i32 %174, 31*/
		main_upzeroexitii_189 = ($signed(main_upzeroexitii_174) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %189 = ashr i32 %174, 31*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_189_reg <= main_upzeroexitii_189;
		if (start == 1'b0 && ^(main_upzeroexitii_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %190 = add nsw i32 %188, 192*/
		main_upzeroexitii_190 = (main_upzeroexitii_188 + 32'd192);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %190 = add nsw i32 %188, 192*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_190_reg <= main_upzeroexitii_190;
		if (start == 1'b0 && ^(main_upzeroexitii_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %191 = sub nsw i32 15360, %...i.i.i*/
		main_upzeroexitii_191 = (32'd15360 - main_upzeroexitii_iii_var0);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %191 = sub nsw i32 15360, %...i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_161)) begin
		main_upzeroexitii_191_reg <= main_upzeroexitii_191;
		if (start == 1'b0 && ^(main_upzeroexitii_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %192 = add nsw i32 %136, %132*/
		main_upzeroexitii_192 = (main_filtezexit11ii_136_reg + main_filtezexit11ii_132_reg);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %192 = add nsw i32 %136, %132*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_159)) begin
		main_upzeroexitii_192_reg <= main_upzeroexitii_192;
		if (start == 1'b0 && ^(main_upzeroexitii_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %193 = sub nsw i32 %58, %192*/
		main_upzeroexitii_193 = (main_filtezexitii_58_reg - main_upzeroexitii_192);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %193 = sub nsw i32 %58, %192*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_159)) begin
		main_upzeroexitii_193_reg <= main_upzeroexitii_193;
		if (start == 1'b0 && ^(main_upzeroexitii_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit.i.i*/
	/*   %194 = add nsw i32 %192, %58*/
		main_upzeroexitii_194 = (main_upzeroexitii_192 + main_filtezexitii_58_reg);
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %194 = add nsw i32 %192, %58*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_159)) begin
		main_upzeroexitii_194_reg <= main_upzeroexitii_194;
		if (start == 1'b0 && ^(main_upzeroexitii_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_194_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexitii_195 = main_upzeroexitii_195_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %195 = mul nsw i32 %193, 12*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_195_reg <= main_upzeroexitii_195;
		if (start == 1'b0 && ^(main_upzeroexitii_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_195_reg"); $finish; end
	end
	/* main: %upzero.exit.i.i*/
	/*   %195 = mul nsw i32 %193, 12*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_195_reg <= main_upzeroexitii_195;
		if (start == 1'b0 && ^(main_upzeroexitii_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_195_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexitii_196 = main_upzeroexitii_196_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %196 = mul nsw i32 %194, -44*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_196_reg <= main_upzeroexitii_196;
		if (start == 1'b0 && ^(main_upzeroexitii_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_196_reg"); $finish; end
	end
	/* main: %upzero.exit.i.i*/
	/*   %196 = mul nsw i32 %194, -44*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		main_upzeroexitii_196_reg <= main_upzeroexitii_196;
		if (start == 1'b0 && ^(main_upzeroexitii_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexitii_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %xa2.042.i.i = phi i32 [ %196, %upzero.exit.i.i ], [ %208, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB_upzeroexitii_163) & (memory_controller_waitrequest == 1'd0))) begin
		main_197_xa2042ii = main_upzeroexitii_196_reg;
	end
	/* main: %197*/
	/*   %xa2.042.i.i = phi i32 [ %196, %upzero.exit.i.i ], [ %208, %197 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__197_168) & (memory_controller_waitrequest == 1'd0)) & (main_197_exitcond29_reg == 1'd0))) */ begin
		main_197_xa2042ii = main_197_208;
	end
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %xa2.042.i.i = phi i32 [ %196, %upzero.exit.i.i ], [ %208, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB_upzeroexitii_163) & (memory_controller_waitrequest == 1'd0))) begin
		main_197_xa2042ii_reg <= main_197_xa2042ii;
		if (start == 1'b0 && ^(main_197_xa2042ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_xa2042ii_reg"); $finish; end
	end
	/* main: %197*/
	/*   %xa2.042.i.i = phi i32 [ %196, %upzero.exit.i.i ], [ %208, %197 ]*/
	if ((((cur_state == LEGUP_F_main_BB__197_168) & (memory_controller_waitrequest == 1'd0)) & (main_197_exitcond29_reg == 1'd0))) begin
		main_197_xa2042ii_reg <= main_197_xa2042ii;
		if (start == 1'b0 && ^(main_197_xa2042ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_xa2042ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %xa1.041.i.i = phi i32 [ %195, %upzero.exit.i.i ], [ %204, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB_upzeroexitii_163) & (memory_controller_waitrequest == 1'd0))) begin
		main_197_xa1041ii = main_upzeroexitii_195_reg;
	end
	/* main: %197*/
	/*   %xa1.041.i.i = phi i32 [ %195, %upzero.exit.i.i ], [ %204, %197 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__197_168) & (memory_controller_waitrequest == 1'd0)) & (main_197_exitcond29_reg == 1'd0))) */ begin
		main_197_xa1041ii = main_197_204;
	end
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %xa1.041.i.i = phi i32 [ %195, %upzero.exit.i.i ], [ %204, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB_upzeroexitii_163) & (memory_controller_waitrequest == 1'd0))) begin
		main_197_xa1041ii_reg <= main_197_xa1041ii;
		if (start == 1'b0 && ^(main_197_xa1041ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_xa1041ii_reg"); $finish; end
	end
	/* main: %197*/
	/*   %xa1.041.i.i = phi i32 [ %195, %upzero.exit.i.i ], [ %204, %197 ]*/
	if ((((cur_state == LEGUP_F_main_BB__197_168) & (memory_controller_waitrequest == 1'd0)) & (main_197_exitcond29_reg == 1'd0))) begin
		main_197_xa1041ii_reg <= main_197_xa1041ii;
		if (start == 1'b0 && ^(main_197_xa1041ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_xa1041ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %i.040.i.i = phi i32 [ 0, %upzero.exit.i.i ], [ %209, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB_upzeroexitii_163) & (memory_controller_waitrequest == 1'd0))) begin
		main_197_i040ii = 32'd0;
	end
	/* main: %197*/
	/*   %i.040.i.i = phi i32 [ 0, %upzero.exit.i.i ], [ %209, %197 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__197_168) & (memory_controller_waitrequest == 1'd0)) & (main_197_exitcond29_reg == 1'd0))) */ begin
		main_197_i040ii = main_197_209_reg;
	end
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %i.040.i.i = phi i32 [ 0, %upzero.exit.i.i ], [ %209, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB_upzeroexitii_163) & (memory_controller_waitrequest == 1'd0))) begin
		main_197_i040ii_reg <= main_197_i040ii;
		if (start == 1'b0 && ^(main_197_i040ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_i040ii_reg"); $finish; end
	end
	/* main: %197*/
	/*   %i.040.i.i = phi i32 [ 0, %upzero.exit.i.i ], [ %209, %197 ]*/
	if ((((cur_state == LEGUP_F_main_BB__197_168) & (memory_controller_waitrequest == 1'd0)) & (main_197_exitcond29_reg == 1'd0))) begin
		main_197_i040ii_reg <= main_197_i040ii;
		if (start == 1'b0 && ^(main_197_i040ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_i040ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %ad_ptr.045.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %i.040.i.i*/
		main_197_ad_ptr045ii = (1'd0 | (4 * main_197_i040ii_reg));
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %ad_ptr.045.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %i.040.i.i*/
	if ((cur_state == LEGUP_F_main_BB__197_164)) begin
		main_197_ad_ptr045ii_reg <= main_197_ad_ptr045ii;
		if (start == 1'b0 && ^(main_197_ad_ptr045ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_ad_ptr045ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %ac_ptr.044.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %i.040.i.i*/
		main_197_ac_ptr044ii = (1'd0 | (4 * main_197_i040ii_reg));
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %ac_ptr.044.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %i.040.i.i*/
	if ((cur_state == LEGUP_F_main_BB__197_164)) begin
		main_197_ac_ptr044ii_reg <= main_197_ac_ptr044ii;
		if (start == 1'b0 && ^(main_197_ac_ptr044ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_ac_ptr044ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %198 = shl i32 %i.040.i.i, 1*/
		main_197_198 = (main_197_i040ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %198 = shl i32 %i.040.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__197_164)) begin
		main_197_198_reg <= main_197_198;
		if (start == 1'b0 && ^(main_197_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %199 = add i32 %198, 2*/
		main_197_199 = (main_197_198 + 32'd2);
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %199 = add i32 %198, 2*/
	if ((cur_state == LEGUP_F_main_BB__197_164)) begin
		main_197_199_reg <= main_197_199;
		if (start == 1'b0 && ^(main_197_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %h_ptr.043.i.i = getelementptr [24 x i32]* @h, i32 0, i32 %199*/
		main_197_h_ptr043ii = (`TAG_g_h_a | (4 * main_197_199_reg));
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %h_ptr.043.i.i = getelementptr [24 x i32]* @h, i32 0, i32 %199*/
	if ((cur_state == LEGUP_F_main_BB__197_165)) begin
		main_197_h_ptr043ii_reg <= main_197_h_ptr043ii;
		if (start == 1'b0 && ^(main_197_h_ptr043ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_h_ptr043ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %200 = add i32 %198, 3*/
		main_197_200 = (main_197_198 + 32'd3);
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %200 = add i32 %198, 3*/
	if ((cur_state == LEGUP_F_main_BB__197_164)) begin
		main_197_200_reg <= main_197_200;
		if (start == 1'b0 && ^(main_197_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %scevgep33 = getelementptr [24 x i32]* @h, i32 0, i32 %200*/
		main_197_scevgep33 = (`TAG_g_h_a | (4 * main_197_200_reg));
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %scevgep33 = getelementptr [24 x i32]* @h, i32 0, i32 %200*/
	if ((cur_state == LEGUP_F_main_BB__197_165)) begin
		main_197_scevgep33_reg <= main_197_scevgep33;
		if (start == 1'b0 && ^(main_197_scevgep33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_scevgep33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %201 = load i32* %ac_ptr.044.i.i, align 4, !tbaa !1*/
		main_197_201 = accumc_out_a;
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %201 = load i32* %ac_ptr.044.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_165)) begin
		main_197_201_reg <= main_197_201;
		if (start == 1'b0 && ^(main_197_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %202 = load i32* %h_ptr.043.i.i, align 4, !tbaa !1*/
		main_197_202 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %202 = load i32* %h_ptr.043.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_167)) begin
		main_197_202_reg <= main_197_202;
		if (start == 1'b0 && ^(main_197_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_202_reg"); $finish; end
	end
end
always @(*) begin
	main_197_203 = main_197_203_stage0_reg;
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %203 = mul nsw i32 %202, %201*/
	if ((cur_state == LEGUP_F_main_BB__197_168)) begin
		main_197_203_reg <= main_197_203;
		if (start == 1'b0 && ^(main_197_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_203_reg"); $finish; end
	end
	/* main: %197*/
	/*   %203 = mul nsw i32 %202, %201*/
	if ((cur_state == LEGUP_F_main_BB__197_168)) begin
		main_197_203_reg <= main_197_203;
		if (start == 1'b0 && ^(main_197_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %204 = add nsw i32 %203, %xa1.041.i.i*/
		main_197_204 = (main_197_203 + main_197_xa1041ii_reg);
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %204 = add nsw i32 %203, %xa1.041.i.i*/
	if ((cur_state == LEGUP_F_main_BB__197_168)) begin
		main_197_204_reg <= main_197_204;
		if (start == 1'b0 && ^(main_197_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %205 = load i32* %ad_ptr.045.i.i, align 4, !tbaa !1*/
		main_197_205 = accumd_out_a;
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %205 = load i32* %ad_ptr.045.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_165)) begin
		main_197_205_reg <= main_197_205;
		if (start == 1'b0 && ^(main_197_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %206 = load i32* %scevgep33, align 4, !tbaa !1*/
		main_197_206 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %206 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_167)) begin
		main_197_206_reg <= main_197_206;
		if (start == 1'b0 && ^(main_197_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_206_reg"); $finish; end
	end
end
always @(*) begin
	main_197_207 = main_197_207_stage0_reg;
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %207 = mul nsw i32 %206, %205*/
	if ((cur_state == LEGUP_F_main_BB__197_168)) begin
		main_197_207_reg <= main_197_207;
		if (start == 1'b0 && ^(main_197_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_207_reg"); $finish; end
	end
	/* main: %197*/
	/*   %207 = mul nsw i32 %206, %205*/
	if ((cur_state == LEGUP_F_main_BB__197_168)) begin
		main_197_207_reg <= main_197_207;
		if (start == 1'b0 && ^(main_197_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %208 = add nsw i32 %207, %xa2.042.i.i*/
		main_197_208 = (main_197_207 + main_197_xa2042ii_reg);
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %208 = add nsw i32 %207, %xa2.042.i.i*/
	if ((cur_state == LEGUP_F_main_BB__197_168)) begin
		main_197_208_reg <= main_197_208;
		if (start == 1'b0 && ^(main_197_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %209 = add nsw i32 %i.040.i.i, 1*/
		main_197_209 = (main_197_i040ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %209 = add nsw i32 %i.040.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__197_164)) begin
		main_197_209_reg <= main_197_209;
		if (start == 1'b0 && ^(main_197_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %exitcond29 = icmp eq i32 %209, 10*/
		main_197_exitcond29 = (main_197_209 == 32'd10);
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %exitcond29 = icmp eq i32 %209, 10*/
	if ((cur_state == LEGUP_F_main_BB__197_164)) begin
		main_197_exitcond29_reg <= main_197_exitcond29;
		if (start == 1'b0 && ^(main_197_exitcond29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_exitcond29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %211 = and i32 %189, -384*/
		main_210_211 = (main_upzeroexitii_189_reg & -32'd384);
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %211 = and i32 %189, -384*/
	if ((cur_state == LEGUP_F_main_BB__210_169)) begin
		main_210_211_reg <= main_210_211;
		if (start == 1'b0 && ^(main_210_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %apl1.0.i.i.i = add nsw i32 %190, %211*/
		main_210_apl10iii = (main_upzeroexitii_190_reg + main_210_211);
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %apl1.0.i.i.i = add nsw i32 %190, %211*/
	if ((cur_state == LEGUP_F_main_BB__210_169)) begin
		main_210_apl10iii_reg <= main_210_apl10iii;
		if (start == 1'b0 && ^(main_210_apl10iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_apl10iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %212 = icmp sgt i32 %apl1.0.i.i.i, %191*/
		main_210_212 = ($signed(main_210_apl10iii) > $signed(main_upzeroexitii_191_reg));
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %212 = icmp sgt i32 %apl1.0.i.i.i, %191*/
	if ((cur_state == LEGUP_F_main_BB__210_169)) begin
		main_210_212_reg <= main_210_212;
		if (start == 1'b0 && ^(main_210_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %213 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4, !tbaa !1*/
		main_210_213 = accumc_out_a;
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %213 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__210_170)) begin
		main_210_213_reg <= main_210_213;
		if (start == 1'b0 && ^(main_210_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %214 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4, !tbaa !1*/
		main_210_214 = accumd_out_a;
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %214 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__210_170)) begin
		main_210_214_reg <= main_210_214;
		if (start == 1'b0 && ^(main_210_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %i.135.i.i = phi i32 [ 0, %210 ], [ %220, %215 ]*/
	if (((cur_state == LEGUP_F_main_BB__210_170) & (memory_controller_waitrequest == 1'd0))) begin
		main_215_i135ii = 32'd0;
	end
	/* main: %215*/
	/*   %i.135.i.i = phi i32 [ 0, %210 ], [ %220, %215 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__215_174) & (memory_controller_waitrequest == 1'd0)) & (main_215_exitcond34_reg == 1'd0))) */ begin
		main_215_i135ii = main_215_220_reg;
	end
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %i.135.i.i = phi i32 [ 0, %210 ], [ %220, %215 ]*/
	if (((cur_state == LEGUP_F_main_BB__210_170) & (memory_controller_waitrequest == 1'd0))) begin
		main_215_i135ii_reg <= main_215_i135ii;
		if (start == 1'b0 && ^(main_215_i135ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_i135ii_reg"); $finish; end
	end
	/* main: %215*/
	/*   %i.135.i.i = phi i32 [ 0, %210 ], [ %220, %215 ]*/
	if ((((cur_state == LEGUP_F_main_BB__215_174) & (memory_controller_waitrequest == 1'd0)) & (main_215_exitcond34_reg == 1'd0))) begin
		main_215_i135ii_reg <= main_215_i135ii;
		if (start == 1'b0 && ^(main_215_i135ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_i135ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %216 = sub i32 9, %i.135.i.i*/
		main_215_216 = (32'd9 - main_215_i135ii_reg);
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %216 = sub i32 9, %i.135.i.i*/
	if ((cur_state == LEGUP_F_main_BB__215_171)) begin
		main_215_216_reg <= main_215_216;
		if (start == 1'b0 && ^(main_215_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %ac_ptr1.039.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %216*/
		main_215_ac_ptr1039ii = (1'd0 | (4 * main_215_216_reg));
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %ac_ptr1.039.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %216*/
	if ((cur_state == LEGUP_F_main_BB__215_172)) begin
		main_215_ac_ptr1039ii_reg <= main_215_ac_ptr1039ii;
		if (start == 1'b0 && ^(main_215_ac_ptr1039ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_ac_ptr1039ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %ad_ptr1.038.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %216*/
		main_215_ad_ptr1038ii = (1'd0 | (4 * main_215_216_reg));
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %ad_ptr1.038.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %216*/
	if ((cur_state == LEGUP_F_main_BB__215_172)) begin
		main_215_ad_ptr1038ii_reg <= main_215_ad_ptr1038ii;
		if (start == 1'b0 && ^(main_215_ad_ptr1038ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_ad_ptr1038ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %217 = sub i32 10, %i.135.i.i*/
		main_215_217 = (32'd10 - main_215_i135ii_reg);
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %217 = sub i32 10, %i.135.i.i*/
	if ((cur_state == LEGUP_F_main_BB__215_171)) begin
		main_215_217_reg <= main_215_217;
		if (start == 1'b0 && ^(main_215_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %ad_ptr.137.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %217*/
		main_215_ad_ptr137ii = (1'd0 | (4 * main_215_217_reg));
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %ad_ptr.137.i.i = getelementptr [11 x i32]* @accumd, i32 0, i32 %217*/
	if ((cur_state == LEGUP_F_main_BB__215_172)) begin
		main_215_ad_ptr137ii_reg <= main_215_ad_ptr137ii;
		if (start == 1'b0 && ^(main_215_ad_ptr137ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_ad_ptr137ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %ac_ptr.136.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %217*/
		main_215_ac_ptr136ii = (1'd0 | (4 * main_215_217_reg));
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %ac_ptr.136.i.i = getelementptr [11 x i32]* @accumc, i32 0, i32 %217*/
	if ((cur_state == LEGUP_F_main_BB__215_172)) begin
		main_215_ac_ptr136ii_reg <= main_215_ac_ptr136ii;
		if (start == 1'b0 && ^(main_215_ac_ptr136ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_ac_ptr136ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %218 = load i32* %ac_ptr1.039.i.i, align 4, !tbaa !1*/
		main_215_218 = accumc_out_a;
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %218 = load i32* %ac_ptr1.039.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_173)) begin
		main_215_218_reg <= main_215_218;
		if (start == 1'b0 && ^(main_215_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %219 = load i32* %ad_ptr1.038.i.i, align 4, !tbaa !1*/
		main_215_219 = accumd_out_a;
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %219 = load i32* %ad_ptr1.038.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_173)) begin
		main_215_219_reg <= main_215_219;
		if (start == 1'b0 && ^(main_215_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %220 = add nsw i32 %i.135.i.i, 1*/
		main_215_220 = (main_215_i135ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %220 = add nsw i32 %i.135.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__215_171)) begin
		main_215_220_reg <= main_215_220;
		if (start == 1'b0 && ^(main_215_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %215*/
	/*   %exitcond34 = icmp eq i32 %220, 10*/
		main_215_exitcond34 = (main_215_220 == 32'd10);
end
always @(posedge clk) begin
	/* main: %215*/
	/*   %exitcond34 = icmp eq i32 %220, 10*/
	if ((cur_state == LEGUP_F_main_BB__215_171)) begin
		main_215_exitcond34_reg <= main_215_exitcond34;
		if (start == 1'b0 && ^(main_215_exitcond34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_215_exitcond34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %221 = sub nsw i32 0, %191*/
		main_decodeexiti_221 = (32'd0 - main_upzeroexitii_191_reg);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %221 = sub nsw i32 0, %191*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_175)) begin
		main_decodeexiti_221_reg <= main_decodeexiti_221;
		if (start == 1'b0 && ^(main_decodeexiti_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %.apl1.0.i.i.i = select i1 %212, i32 %191, i32 %apl1.0.i.i.i*/
		main_decodeexiti_apl10iii = (main_210_212_reg ? main_upzeroexitii_191_reg : main_210_apl10iii_reg);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %.apl1.0.i.i.i = select i1 %212, i32 %191, i32 %apl1.0.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_175)) begin
		main_decodeexiti_apl10iii_reg <= main_decodeexiti_apl10iii;
		if (start == 1'b0 && ^(main_decodeexiti_apl10iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_apl10iii_reg"); $finish; end
	end
end
always @(*) begin
	main_decodeexiti_222 = main_decodeexiti_222_stage0_reg;
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %222 = mul nsw i32 %213, -44*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		main_decodeexiti_222_reg <= main_decodeexiti_222;
		if (start == 1'b0 && ^(main_decodeexiti_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_222_reg"); $finish; end
	end
	/* main: %decode.exit.i*/
	/*   %222 = mul nsw i32 %213, -44*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		main_decodeexiti_222_reg <= main_decodeexiti_222;
		if (start == 1'b0 && ^(main_decodeexiti_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_222_reg"); $finish; end
	end
end
always @(*) begin
	main_decodeexiti_223 = main_decodeexiti_223_stage0_reg;
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %223 = mul nsw i32 %214, 12*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		main_decodeexiti_223_reg <= main_decodeexiti_223;
		if (start == 1'b0 && ^(main_decodeexiti_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_223_reg"); $finish; end
	end
	/* main: %decode.exit.i*/
	/*   %223 = mul nsw i32 %214, 12*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		main_decodeexiti_223_reg <= main_decodeexiti_223;
		if (start == 1'b0 && ^(main_decodeexiti_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %224 = icmp slt i32 %.apl1.0.i.i.i, %221*/
		main_decodeexiti_224 = ($signed(main_decodeexiti_apl10iii) < $signed(main_decodeexiti_221));
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %224 = icmp slt i32 %.apl1.0.i.i.i, %221*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_175)) begin
		main_decodeexiti_224_reg <= main_decodeexiti_224;
		if (start == 1'b0 && ^(main_decodeexiti_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %225 = add nsw i32 %222, %204*/
		main_decodeexiti_225 = (main_decodeexiti_222 + main_197_204_reg);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %225 = add nsw i32 %222, %204*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		main_decodeexiti_225_reg <= main_decodeexiti_225;
		if (start == 1'b0 && ^(main_decodeexiti_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %226 = ashr i32 %225, 14*/
		main_decodeexiti_226 = ($signed(main_decodeexiti_225) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %226 = ashr i32 %225, 14*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		main_decodeexiti_226_reg <= main_decodeexiti_226;
		if (start == 1'b0 && ^(main_decodeexiti_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %apl1.2.i.i.i = select i1 %224, i32 %221, i32 %.apl1.0.i.i.i*/
		main_decodeexiti_apl12iii = (main_decodeexiti_224 ? main_decodeexiti_221 : main_decodeexiti_apl10iii);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %apl1.2.i.i.i = select i1 %224, i32 %221, i32 %.apl1.0.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_175)) begin
		main_decodeexiti_apl12iii_reg <= main_decodeexiti_apl12iii;
		if (start == 1'b0 && ^(main_decodeexiti_apl12iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_apl12iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %227 = add nsw i32 %223, %208*/
		main_decodeexiti_227 = (main_decodeexiti_223 + main_197_208_reg);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %227 = add nsw i32 %223, %208*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		main_decodeexiti_227_reg <= main_decodeexiti_227;
		if (start == 1'b0 && ^(main_decodeexiti_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %228 = ashr i32 %227, 14*/
		main_decodeexiti_228 = ($signed(main_decodeexiti_227) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %228 = ashr i32 %227, 14*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		main_decodeexiti_228_reg <= main_decodeexiti_228;
		if (start == 1'b0 && ^(main_decodeexiti_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %indvar.next40 = add i32 %indvar39, 1*/
		main_decodeexiti_indvarnext40 = (main_30_indvar39_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %indvar.next40 = add i32 %indvar39, 1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_175)) begin
		main_decodeexiti_indvarnext40_reg <= main_decodeexiti_indvarnext40;
		if (start == 1'b0 && ^(main_decodeexiti_indvarnext40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_indvarnext40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %exitcond41 = icmp eq i32 %indvar.next40, 50*/
		main_decodeexiti_exitcond41 = (main_decodeexiti_indvarnext40 == 32'd50);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %exitcond41 = icmp eq i32 %indvar.next40, 50*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_175)) begin
		main_decodeexiti_exitcond41_reg <= main_decodeexiti_exitcond41;
		if (start == 1'b0 && ^(main_decodeexiti_exitcond41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_exitcond41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_178) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) */ begin
		main_adpcm_mainexit_main_result04 = main_adpcm_mainexit_main_result0;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_178) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg <= main_adpcm_mainexit_main_result04;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg <= main_adpcm_mainexit_main_result04;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %233, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_178) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %233, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) */ begin
		main_adpcm_mainexit_i03 = main_adpcm_mainexit_233_reg;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %233, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_178) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03_reg <= main_adpcm_mainexit_i03;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %233, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) begin
		main_adpcm_mainexit_i03_reg <= main_adpcm_mainexit_i03;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep5 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep5 = (1'd0 | (4 * main_adpcm_mainexit_i03_reg));
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep5 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %i.03*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_179)) begin
		main_adpcm_mainexit_scevgep5_reg <= main_adpcm_mainexit_scevgep5;
		if (start == 1'b0 && ^(main_adpcm_mainexit_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep6 = getelementptr [100 x i32]* @compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep6 = (1'd0 | (4 * main_adpcm_mainexit_i03_reg));
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep6 = getelementptr [100 x i32]* @compressed, i32 0, i32 %i.03*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_179)) begin
		main_adpcm_mainexit_scevgep6_reg <= main_adpcm_mainexit_scevgep6;
		if (start == 1'b0 && ^(main_adpcm_mainexit_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %229 = load i32* %scevgep6, align 4, !tbaa !1*/
		main_adpcm_mainexit_229 = compressed_out_a;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %229 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_adpcm_mainexit_229_reg <= main_adpcm_mainexit_229;
		if (start == 1'b0 && ^(main_adpcm_mainexit_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %230 = load i32* %scevgep5, align 4, !tbaa !1*/
		main_adpcm_mainexit_230 = test_compressed_out_a;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %230 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_adpcm_mainexit_230_reg <= main_adpcm_mainexit_230;
		if (start == 1'b0 && ^(main_adpcm_mainexit_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %231 = icmp eq i32 %229, %230*/
		main_adpcm_mainexit_231 = (main_adpcm_mainexit_229 == main_adpcm_mainexit_230);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %231 = icmp eq i32 %229, %230*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_adpcm_mainexit_231_reg <= main_adpcm_mainexit_231;
		if (start == 1'b0 && ^(main_adpcm_mainexit_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %232 = zext i1 %231 to i32*/
		main_adpcm_mainexit_232 = main_adpcm_mainexit_231;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %232 = zext i1 %231 to i32*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_adpcm_mainexit_232_reg <= main_adpcm_mainexit_232;
		if (start == 1'b0 && ^(main_adpcm_mainexit_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %232, %main_result.04*/
		main_adpcm_mainexit_main_result0 = (main_adpcm_mainexit_232 + main_adpcm_mainexit_main_result04_reg);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %232, %main_result.04*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_180)) begin
		main_adpcm_mainexit_main_result0_reg <= main_adpcm_mainexit_main_result0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %233 = add nsw i32 %i.03, 1*/
		main_adpcm_mainexit_233 = (main_adpcm_mainexit_i03_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %233 = add nsw i32 %i.03, 1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_179)) begin
		main_adpcm_mainexit_233_reg <= main_adpcm_mainexit_233;
		if (start == 1'b0 && ^(main_adpcm_mainexit_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %233, 50*/
		main_adpcm_mainexit_exitcond = (main_adpcm_mainexit_233 == 32'd50);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %233, 50*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_179)) begin
		main_adpcm_mainexit_exitcond_reg <= main_adpcm_mainexit_exitcond;
		if (start == 1'b0 && ^(main_adpcm_mainexit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_181) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22 = main_adpcm_mainexit_main_result0_reg;
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader_183) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond3_reg == 1'd0))) */ begin
		main_preheader_main_result22 = main_preheader_main_result2;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_181) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22_reg <= main_preheader_main_result22;
		if (start == 1'b0 && ^(main_preheader_main_result22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_183) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond3_reg == 1'd0))) begin
		main_preheader_main_result22_reg <= main_preheader_main_result22;
		if (start == 1'b0 && ^(main_preheader_main_result22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %238, %.preheader ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_181) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %238, %.preheader ], [ 0, %.preheader.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader_183) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond3_reg == 1'd0))) */ begin
		main_preheader_i11 = main_preheader_238_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %238, %.preheader ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_181) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11_reg <= main_preheader_i11;
		if (start == 1'b0 && ^(main_preheader_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %238, %.preheader ], [ 0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_183) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond3_reg == 1'd0))) begin
		main_preheader_i11_reg <= main_preheader_i11;
		if (start == 1'b0 && ^(main_preheader_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %i.11*/
		main_preheader_scevgep = (1'd0 | (4 * main_preheader_i11_reg));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %i.11*/
	if ((cur_state == LEGUP_F_main_BB_preheader_182)) begin
		main_preheader_scevgep_reg <= main_preheader_scevgep;
		if (start == 1'b0 && ^(main_preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep4 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11*/
		main_preheader_scevgep4 = (1'd0 | (4 * main_preheader_i11_reg));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep4 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11*/
	if ((cur_state == LEGUP_F_main_BB_preheader_182)) begin
		main_preheader_scevgep4_reg <= main_preheader_scevgep4;
		if (start == 1'b0 && ^(main_preheader_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %234 = load i32* %scevgep4, align 4, !tbaa !1*/
		main_preheader_234 = result_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %234 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_183)) begin
		main_preheader_234_reg <= main_preheader_234;
		if (start == 1'b0 && ^(main_preheader_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %235 = load i32* %scevgep, align 4, !tbaa !1*/
		main_preheader_235 = test_result_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %235 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_183)) begin
		main_preheader_235_reg <= main_preheader_235;
		if (start == 1'b0 && ^(main_preheader_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %236 = icmp eq i32 %234, %235*/
		main_preheader_236 = (main_preheader_234 == main_preheader_235);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %236 = icmp eq i32 %234, %235*/
	if ((cur_state == LEGUP_F_main_BB_preheader_183)) begin
		main_preheader_236_reg <= main_preheader_236;
		if (start == 1'b0 && ^(main_preheader_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %237 = zext i1 %236 to i32*/
		main_preheader_237 = main_preheader_236;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %237 = zext i1 %236 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_183)) begin
		main_preheader_237_reg <= main_preheader_237;
		if (start == 1'b0 && ^(main_preheader_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %237, %main_result.22*/
		main_preheader_main_result2 = (main_preheader_237 + main_preheader_main_result22_reg);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %237, %main_result.22*/
	if ((cur_state == LEGUP_F_main_BB_preheader_183)) begin
		main_preheader_main_result2_reg <= main_preheader_main_result2;
		if (start == 1'b0 && ^(main_preheader_main_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %238 = add nsw i32 %i.11, 1*/
		main_preheader_238 = (main_preheader_i11_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %238 = add nsw i32 %i.11, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_182)) begin
		main_preheader_238_reg <= main_preheader_238;
		if (start == 1'b0 && ^(main_preheader_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %exitcond3 = icmp eq i32 %238, 100*/
		main_preheader_exitcond3 = (main_preheader_238 == 32'd100);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %exitcond3 = icmp eq i32 %238, 100*/
	if ((cur_state == LEGUP_F_main_BB_preheader_182)) begin
		main_preheader_exitcond3_reg <= main_preheader_exitcond3;
		if (start == 1'b0 && ^(main_preheader_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %241 = icmp eq i32 %.main_result.2, 150*/
		main_239_241 = (main_preheader_main_result2_reg == 32'd150);
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %241 = icmp eq i32 %.main_result.2, 150*/
	if ((cur_state == LEGUP_F_main_BB__239_184)) begin
		main_239_241_reg <= main_239_241;
		if (start == 1'b0 && ^(main_239_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_241_reg"); $finish; end
	end
end
always @(*) begin
	qq6_code6_table_address_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_68)) begin
		qq6_code6_table_address_a = (main_preheaderi_28 >>> 3'd2);
	end
end
always @(*) begin
	qq6_code6_table_write_enable_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_68)) begin
		qq6_code6_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	dec_del_bpl_address_a = 1'd0;
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		dec_del_bpl_address_a = (main_preheader2ii_scevgep60 >>> 3'd2);
	end
	/* main: %30*/
	/*   %35 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__30_70)) begin
		dec_del_bpl_address_a = (1'd0 >>> 3'd2);
	end
	/* main: %38*/
	/*   %40 = load i32* %.017.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__38_105)) begin
		dec_del_bpl_address_a = (main_38_017iii >>> 3'd2);
	end
	/* main: %.preheader.i21.i.i*/
	/*   store i32 %78, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21ii_117)) begin
		dec_del_bpl_address_a = (main_preheaderi21ii_scevgep16_reg >>> 3'd2);
	end
	/* main: %.preheader.i21..preheader.i21_crit_edge.i.i*/
	/*   %.pre.i.i = load i32* %.phi.trans.insert.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_120)) begin
		dec_del_bpl_address_a = (main_preheaderi21preheaderi21_crit_edgeii_phitransinsertii >>> 3'd2);
	end
	/* main: %.preheader1.i24.i.i*/
	/*   store i32 %90, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_123)) begin
		dec_del_bpl_address_a = (main_preheader1i24ii_scevgep13_reg >>> 3'd2);
	end
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %.pre65.i.i = load i32* %.phi.trans.insert64.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_125)) begin
		dec_del_bpl_address_a = (main_preheader1i24preheader1i24_crit_edgeii_phitransinsert64ii >>> 3'd2);
	end
end
always @(*) begin
	dec_del_bpl_write_enable_a = 1'd0;
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		dec_del_bpl_write_enable_a = 1'd1;
	end
	/* main: %30*/
	/*   %35 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__30_70)) begin
		dec_del_bpl_write_enable_a = 1'd0;
	end
	/* main: %38*/
	/*   %40 = load i32* %.017.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__38_105)) begin
		dec_del_bpl_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i21.i.i*/
	/*   store i32 %78, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21ii_117)) begin
		dec_del_bpl_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i21..preheader.i21_crit_edge.i.i*/
	/*   %.pre.i.i = load i32* %.phi.trans.insert.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21preheaderi21_crit_edgeii_120)) begin
		dec_del_bpl_write_enable_a = 1'd0;
	end
	/* main: %.preheader1.i24.i.i*/
	/*   store i32 %90, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_123)) begin
		dec_del_bpl_write_enable_a = 1'd1;
	end
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %.pre65.i.i = load i32* %.phi.trans.insert64.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_125)) begin
		dec_del_bpl_write_enable_a = 1'd0;
	end
end
always @(*) begin
	dec_del_bpl_in_a = 1'd0;
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		dec_del_bpl_in_a = 32'd0;
	end
	/* main: %.preheader.i21.i.i*/
	/*   store i32 %78, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi21ii_117)) begin
		dec_del_bpl_in_a = main_preheaderi21ii_78;
	end
	/* main: %.preheader1.i24.i.i*/
	/*   store i32 %90, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24ii_123)) begin
		dec_del_bpl_in_a = main_preheader1i24ii_90;
	end
end
always @(*) begin
	dec_del_dltx_address_a = 1'd0;
	/* main: %1*/
	/*   store i32 0, i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		dec_del_dltx_address_a = (main_1_scevgep65 >>> 3'd2);
	end
	/* main: %30*/
	/*   %36 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__30_70)) begin
		dec_del_dltx_address_a = (1'd0 >>> 3'd2);
	end
	/* main: %38*/
	/*   %41 = load i32* %.06.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__38_105)) begin
		dec_del_dltx_address_a = (main_38_06iii >>> 3'd2);
	end
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %.pre63.i.i = load i32* %.phi.trans.insert62.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_125)) begin
		dec_del_dltx_address_a = (main_preheader1i24preheader1i24_crit_edgeii_phitransinsert62ii >>> 3'd2);
	end
	/* main: %upzero.exit25.i.i*/
	/*   %92 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_129)) begin
		dec_del_dltx_address_a = ((1'd0 | (4 * 32'd4)) >>> 3'd2);
	end
	/* main: %upzero.exit25.i.i*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		dec_del_dltx_address_a = ((1'd0 | (4 * 32'd2)) >>> 3'd2);
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %92, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		dec_del_dltx_address_a = ((1'd0 | (4 * 32'd5)) >>> 3'd2);
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %93, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_132)) begin
		dec_del_dltx_address_a = ((1'd0 | (4 * 32'd4)) >>> 3'd2);
	end
end
always @(*) begin
	dec_del_dltx_write_enable_a = 1'd0;
	/* main: %1*/
	/*   store i32 0, i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		dec_del_dltx_write_enable_a = 1'd1;
	end
	/* main: %30*/
	/*   %36 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__30_70)) begin
		dec_del_dltx_write_enable_a = 1'd0;
	end
	/* main: %38*/
	/*   %41 = load i32* %.06.i.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__38_105)) begin
		dec_del_dltx_write_enable_a = 1'd0;
	end
	/* main: %.preheader1.i24..preheader1.i24_crit_edge.i.i*/
	/*   %.pre63.i.i = load i32* %.phi.trans.insert62.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i24preheader1i24_crit_edgeii_125)) begin
		dec_del_dltx_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit25.i.i*/
	/*   %92 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_129)) begin
		dec_del_dltx_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit25.i.i*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		dec_del_dltx_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %92, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		dec_del_dltx_write_enable_a = 1'd1;
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %93, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_132)) begin
		dec_del_dltx_write_enable_a = 1'd1;
	end
end
always @(*) begin
	dec_del_dltx_in_a = 1'd0;
	/* main: %1*/
	/*   store i32 0, i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		dec_del_dltx_in_a = 32'd0;
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %92, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		dec_del_dltx_in_a = main_upzeroexit25ii_92_reg;
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %93, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_132)) begin
		dec_del_dltx_in_a = main_upzeroexit25ii_93_reg;
	end
end
always @(*) begin
	dec_del_dltx_address_b = 1'd0;
	/* main: %upzero.exit25.i.i*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_129)) begin
		dec_del_dltx_address_b = ((1'd0 | (4 * 32'd3)) >>> 3'd2);
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %36, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		dec_del_dltx_address_b = ((1'd0 | (4 * 32'd1)) >>> 3'd2);
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %55, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		dec_del_dltx_address_b = (1'd0 >>> 3'd2);
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %94, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_132)) begin
		dec_del_dltx_address_b = ((1'd0 | (4 * 32'd3)) >>> 3'd2);
	end
end
always @(*) begin
	dec_del_dltx_write_enable_b = 1'd0;
	/* main: %upzero.exit25.i.i*/
	/*   %93 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_129)) begin
		dec_del_dltx_write_enable_b = 1'd0;
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %36, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		dec_del_dltx_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %55, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		dec_del_dltx_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %94, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_132)) begin
		dec_del_dltx_write_enable_b = 1'd1;
	end
end
always @(*) begin
	dec_del_dltx_in_b = 1'd0;
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %36, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_130)) begin
		dec_del_dltx_in_b = main_30_36_reg;
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %55, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_131)) begin
		dec_del_dltx_in_b = main_filtezexitii_55_reg;
	end
	/* main: %upzero.exit25.i.i*/
	/*   store i32 %94, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_132)) begin
		dec_del_dltx_in_b = main_upzeroexit25ii_94_reg;
	end
end
always @(*) begin
	dec_del_bph_address_a = 1'd0;
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		dec_del_bph_address_a = (main_preheader2ii_scevgep59 >>> 3'd2);
	end
	/* main: %upzero.exit25.i.i*/
	/*   %116 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_129)) begin
		dec_del_bph_address_a = (1'd0 >>> 3'd2);
	end
	/* main: %119*/
	/*   %121 = load i32* %.017.i9.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_135)) begin
		dec_del_bph_address_a = (main_119_017i9ii >>> 3'd2);
	end
	/* main: %.preheader.i.i.i*/
	/*   store i32 %156, i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderiii_147)) begin
		dec_del_bph_address_a = (main_preheaderiii_scevgep28_reg >>> 3'd2);
	end
	/* main: %.preheader.i..preheader.i_crit_edge.i.i*/
	/*   %.pre57.i.i = load i32* %.phi.trans.insert56.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_150)) begin
		dec_del_bph_address_a = (main_preheaderipreheaderi_crit_edgeii_phitransinsert56ii >>> 3'd2);
	end
	/* main: %.preheader1.i.i.i*/
	/*   store i32 %168, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_153)) begin
		dec_del_bph_address_a = (main_preheader1iii_scevgep25_reg >>> 3'd2);
	end
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %.pre61.i.i = load i32* %.phi.trans.insert60.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_155)) begin
		dec_del_bph_address_a = (main_preheader1ipreheader1i_crit_edgeii_phitransinsert60ii >>> 3'd2);
	end
end
always @(*) begin
	dec_del_bph_write_enable_a = 1'd0;
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		dec_del_bph_write_enable_a = 1'd1;
	end
	/* main: %upzero.exit25.i.i*/
	/*   %116 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_129)) begin
		dec_del_bph_write_enable_a = 1'd0;
	end
	/* main: %119*/
	/*   %121 = load i32* %.017.i9.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_135)) begin
		dec_del_bph_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i.i.i*/
	/*   store i32 %156, i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderiii_147)) begin
		dec_del_bph_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i..preheader.i_crit_edge.i.i*/
	/*   %.pre57.i.i = load i32* %.phi.trans.insert56.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheaderi_crit_edgeii_150)) begin
		dec_del_bph_write_enable_a = 1'd0;
	end
	/* main: %.preheader1.i.i.i*/
	/*   store i32 %168, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_153)) begin
		dec_del_bph_write_enable_a = 1'd1;
	end
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %.pre61.i.i = load i32* %.phi.trans.insert60.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_155)) begin
		dec_del_bph_write_enable_a = 1'd0;
	end
end
always @(*) begin
	dec_del_bph_in_a = 1'd0;
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		dec_del_bph_in_a = 32'd0;
	end
	/* main: %.preheader.i.i.i*/
	/*   store i32 %156, i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderiii_147)) begin
		dec_del_bph_in_a = main_preheaderiii_156;
	end
	/* main: %.preheader1.i.i.i*/
	/*   store i32 %168, i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iii_153)) begin
		dec_del_bph_in_a = main_preheader1iii_168;
	end
end
always @(*) begin
	dec_del_dhx_address_a = 1'd0;
	/* main: %1*/
	/*   store i32 0, i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		dec_del_dhx_address_a = (main_1_scevgep64 >>> 3'd2);
	end
	/* main: %upzero.exit25.i.i*/
	/*   %117 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_129)) begin
		dec_del_dhx_address_a = (1'd0 >>> 3'd2);
	end
	/* main: %119*/
	/*   %122 = load i32* %.06.i8.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_135)) begin
		dec_del_dhx_address_a = (main_119_06i8ii >>> 3'd2);
	end
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %.pre59.i.i = load i32* %.phi.trans.insert58.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_155)) begin
		dec_del_dhx_address_a = (main_preheader1ipreheader1i_crit_edgeii_phitransinsert58ii >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_159)) begin
		dec_del_dhx_address_a = ((1'd0 | (4 * 32'd4)) >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		dec_del_dhx_address_a = ((1'd0 | (4 * 32'd2)) >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %170, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_161)) begin
		dec_del_dhx_address_a = ((1'd0 | (4 * 32'd5)) >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %171, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_162)) begin
		dec_del_dhx_address_a = ((1'd0 | (4 * 32'd4)) >>> 3'd2);
	end
end
always @(*) begin
	dec_del_dhx_write_enable_a = 1'd0;
	/* main: %1*/
	/*   store i32 0, i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		dec_del_dhx_write_enable_a = 1'd1;
	end
	/* main: %upzero.exit25.i.i*/
	/*   %117 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit25ii_129)) begin
		dec_del_dhx_write_enable_a = 1'd0;
	end
	/* main: %119*/
	/*   %122 = load i32* %.06.i8.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_135)) begin
		dec_del_dhx_write_enable_a = 1'd0;
	end
	/* main: %.preheader1.i..preheader1.i_crit_edge.i.i*/
	/*   %.pre59.i.i = load i32* %.phi.trans.insert58.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ipreheader1i_crit_edgeii_155)) begin
		dec_del_dhx_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit.i.i*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_159)) begin
		dec_del_dhx_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit.i.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		dec_del_dhx_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %170, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_161)) begin
		dec_del_dhx_write_enable_a = 1'd1;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %171, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_162)) begin
		dec_del_dhx_write_enable_a = 1'd1;
	end
end
always @(*) begin
	dec_del_dhx_in_a = 1'd0;
	/* main: %1*/
	/*   store i32 0, i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		dec_del_dhx_in_a = 32'd0;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %170, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_161)) begin
		dec_del_dhx_in_a = main_upzeroexitii_170_reg;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %171, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_162)) begin
		dec_del_dhx_in_a = main_upzeroexitii_171_reg;
	end
end
always @(*) begin
	dec_del_dhx_address_b = 1'd0;
	/* main: %upzero.exit.i.i*/
	/*   %171 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_159)) begin
		dec_del_dhx_address_b = ((1'd0 | (4 * 32'd3)) >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %117, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		dec_del_dhx_address_b = ((1'd0 | (4 * 32'd1)) >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %136, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_161)) begin
		dec_del_dhx_address_b = (1'd0 >>> 3'd2);
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %172, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_162)) begin
		dec_del_dhx_address_b = ((1'd0 | (4 * 32'd3)) >>> 3'd2);
	end
end
always @(*) begin
	dec_del_dhx_write_enable_b = 1'd0;
	/* main: %upzero.exit.i.i*/
	/*   %171 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_159)) begin
		dec_del_dhx_write_enable_b = 1'd0;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %117, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		dec_del_dhx_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %136, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_161)) begin
		dec_del_dhx_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %172, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_162)) begin
		dec_del_dhx_write_enable_b = 1'd1;
	end
end
always @(*) begin
	dec_del_dhx_in_b = 1'd0;
	/* main: %upzero.exit.i.i*/
	/*   store i32 %117, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_160)) begin
		dec_del_dhx_in_b = main_upzeroexit25ii_117_reg;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %136, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_161)) begin
		dec_del_dhx_in_b = main_filtezexit11ii_136_reg;
	end
	/* main: %upzero.exit.i.i*/
	/*   store i32 %172, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexitii_162)) begin
		dec_del_dhx_in_b = main_upzeroexitii_172_reg;
	end
end
always @(*) begin
	accumc_address_a = 1'd0;
	/* main: %.preheader.i.i*/
	/*   store i32 0, i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_19)) begin
		accumc_address_a = (main_preheaderii_scevgep55 >>> 3'd2);
	end
	/* main: %197*/
	/*   %201 = load i32* %ac_ptr.044.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_164)) begin
		accumc_address_a = (main_197_ac_ptr044ii >>> 3'd2);
	end
	/* main: %210*/
	/*   %213 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__210_169)) begin
		accumc_address_a = ((1'd0 | (4 * 32'd10)) >>> 3'd2);
	end
	/* main: %215*/
	/*   %218 = load i32* %ac_ptr1.039.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_172)) begin
		accumc_address_a = (main_215_ac_ptr1039ii >>> 3'd2);
	end
	/* main: %215*/
	/*   store i32 %218, i32* %ac_ptr.136.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_173)) begin
		accumc_address_a = (main_215_ac_ptr136ii_reg >>> 3'd2);
	end
	/* main: %decode.exit.i*/
	/*   store i32 %193, i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_175)) begin
		accumc_address_a = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	accumc_write_enable_a = 1'd0;
	/* main: %.preheader.i.i*/
	/*   store i32 0, i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_19)) begin
		accumc_write_enable_a = 1'd1;
	end
	/* main: %197*/
	/*   %201 = load i32* %ac_ptr.044.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_164)) begin
		accumc_write_enable_a = 1'd0;
	end
	/* main: %210*/
	/*   %213 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__210_169)) begin
		accumc_write_enable_a = 1'd0;
	end
	/* main: %215*/
	/*   %218 = load i32* %ac_ptr1.039.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_172)) begin
		accumc_write_enable_a = 1'd0;
	end
	/* main: %215*/
	/*   store i32 %218, i32* %ac_ptr.136.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_173)) begin
		accumc_write_enable_a = 1'd1;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %193, i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_175)) begin
		accumc_write_enable_a = 1'd1;
	end
end
always @(*) begin
	accumc_in_a = 1'd0;
	/* main: %.preheader.i.i*/
	/*   store i32 0, i32* %scevgep55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_19)) begin
		accumc_in_a = 32'd0;
	end
	/* main: %215*/
	/*   store i32 %218, i32* %ac_ptr.136.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_173)) begin
		accumc_in_a = main_215_218;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %193, i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_175)) begin
		accumc_in_a = main_upzeroexitii_193_reg;
	end
end
always @(*) begin
	accumd_address_a = 1'd0;
	/* main: %.preheader.i.i*/
	/*   store i32 0, i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_19)) begin
		accumd_address_a = (main_preheaderii_scevgep54 >>> 3'd2);
	end
	/* main: %197*/
	/*   %205 = load i32* %ad_ptr.045.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_164)) begin
		accumd_address_a = (main_197_ad_ptr045ii >>> 3'd2);
	end
	/* main: %210*/
	/*   %214 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__210_169)) begin
		accumd_address_a = ((1'd0 | (4 * 32'd10)) >>> 3'd2);
	end
	/* main: %215*/
	/*   %219 = load i32* %ad_ptr1.038.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_172)) begin
		accumd_address_a = (main_215_ad_ptr1038ii >>> 3'd2);
	end
	/* main: %215*/
	/*   store i32 %219, i32* %ad_ptr.137.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_173)) begin
		accumd_address_a = (main_215_ad_ptr137ii_reg >>> 3'd2);
	end
	/* main: %decode.exit.i*/
	/*   store i32 %194, i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_175)) begin
		accumd_address_a = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	accumd_write_enable_a = 1'd0;
	/* main: %.preheader.i.i*/
	/*   store i32 0, i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_19)) begin
		accumd_write_enable_a = 1'd1;
	end
	/* main: %197*/
	/*   %205 = load i32* %ad_ptr.045.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_164)) begin
		accumd_write_enable_a = 1'd0;
	end
	/* main: %210*/
	/*   %214 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__210_169)) begin
		accumd_write_enable_a = 1'd0;
	end
	/* main: %215*/
	/*   %219 = load i32* %ad_ptr1.038.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_172)) begin
		accumd_write_enable_a = 1'd0;
	end
	/* main: %215*/
	/*   store i32 %219, i32* %ad_ptr.137.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_173)) begin
		accumd_write_enable_a = 1'd1;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %194, i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_175)) begin
		accumd_write_enable_a = 1'd1;
	end
end
always @(*) begin
	accumd_in_a = 1'd0;
	/* main: %.preheader.i.i*/
	/*   store i32 0, i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_19)) begin
		accumd_in_a = 32'd0;
	end
	/* main: %215*/
	/*   store i32 %219, i32* %ad_ptr.137.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__215_173)) begin
		accumd_in_a = main_215_219;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %194, i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_175)) begin
		accumd_in_a = main_upzeroexitii_194_reg;
	end
end
always @(*) begin
	test_data_address_a = 1'd0;
	/* main: %reset.exit.i*/
	/*   %12 = load i32* %scevgep52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		test_data_address_a = (main_resetexiti_scevgep52 >>> 3'd2);
	end
	/* main: %reset.exit.i*/
	/*   %17 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_26)) begin
		test_data_address_a = (main_resetexiti_scevgep50_reg >>> 3'd2);
	end
	/* main: %reset.exit.i*/
	/*   %22 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_59)) begin
		test_data_address_a = (main_resetexiti_scevgep48_reg >>> 3'd2);
	end
end
always @(*) begin
	test_data_write_enable_a = 1'd0;
	/* main: %reset.exit.i*/
	/*   %12 = load i32* %scevgep52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %reset.exit.i*/
	/*   %17 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_26)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %reset.exit.i*/
	/*   %22 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_59)) begin
		test_data_write_enable_a = 1'd0;
	end
end
always @(*) begin
	test_data_address_b = 1'd0;
	/* main: %reset.exit.i*/
	/*   %13 = load i32* %scevgep51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		test_data_address_b = (main_resetexiti_scevgep51 >>> 3'd2);
	end
	/* main: %reset.exit.i*/
	/*   %18 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_26)) begin
		test_data_address_b = (main_resetexiti_scevgep49_reg >>> 3'd2);
	end
	/* main: %reset.exit.i*/
	/*   %23 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_59)) begin
		test_data_address_b = (main_resetexiti_scevgep47_reg >>> 3'd2);
	end
end
always @(*) begin
	test_data_write_enable_b = 1'd0;
	/* main: %reset.exit.i*/
	/*   %13 = load i32* %scevgep51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %reset.exit.i*/
	/*   %18 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_26)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %reset.exit.i*/
	/*   %23 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_59)) begin
		test_data_write_enable_b = 1'd0;
	end
end
always @(*) begin
	test_compressed_address_a = 1'd0;
	/* main: %adpcm_main.exit*/
	/*   %230 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_179)) begin
		test_compressed_address_a = (main_adpcm_mainexit_scevgep5 >>> 3'd2);
	end
end
always @(*) begin
	test_compressed_write_enable_a = 1'd0;
	/* main: %adpcm_main.exit*/
	/*   %230 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_179)) begin
		test_compressed_write_enable_a = 1'd0;
	end
end
always @(*) begin
	test_result_address_a = 1'd0;
	/* main: %.preheader*/
	/*   %235 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_182)) begin
		test_result_address_a = (main_preheader_scevgep >>> 3'd2);
	end
end
always @(*) begin
	test_result_write_enable_a = 1'd0;
	/* main: %.preheader*/
	/*   %235 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_182)) begin
		test_result_write_enable_a = 1'd0;
	end
end
always @(*) begin
	compressed_address_a = 1'd0;
	/* main: %reset.exit.i*/
	/*   store i32 %14, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_56)) begin
		compressed_address_a = (main_resetexiti_15 >>> 3'd2);
	end
	/* main: %reset.exit.i*/
	/*   store i32 %19, i32* %20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_59)) begin
		compressed_address_a = (main_resetexiti_20_reg >>> 3'd2);
	end
	/* main: %reset.exit.i*/
	/*   store i32 %24, i32* %25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_62)) begin
		compressed_address_a = (main_resetexiti_25_reg >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   store i32 %26, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 49), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_66)) begin
		compressed_address_a = ((1'd0 | (4 * 32'd49)) >>> 3'd2);
	end
	/* main: %30*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__30_102)) begin
		compressed_address_a = (main_30_33 >>> 3'd2);
	end
	/* main: %adpcm_main.exit*/
	/*   %229 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_179)) begin
		compressed_address_a = (main_adpcm_mainexit_scevgep6 >>> 3'd2);
	end
end
always @(*) begin
	compressed_write_enable_a = 1'd0;
	/* main: %reset.exit.i*/
	/*   store i32 %14, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_56)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %reset.exit.i*/
	/*   store i32 %19, i32* %20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_59)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %reset.exit.i*/
	/*   store i32 %24, i32* %25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_62)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   store i32 %26, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 49), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_66)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %30*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__30_102)) begin
		compressed_write_enable_a = 1'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %229 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_179)) begin
		compressed_write_enable_a = 1'd0;
	end
end
always @(*) begin
	compressed_in_a = 1'd0;
	/* main: %reset.exit.i*/
	/*   store i32 %14, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_56)) begin
		compressed_in_a = main_resetexiti_14_reg;
	end
	/* main: %reset.exit.i*/
	/*   store i32 %19, i32* %20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_59)) begin
		compressed_in_a = main_resetexiti_19_reg;
	end
	/* main: %reset.exit.i*/
	/*   store i32 %24, i32* %25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_62)) begin
		compressed_in_a = main_resetexiti_24_reg;
	end
	/* main: %.preheader.i*/
	/*   store i32 %26, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 49), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_66)) begin
		compressed_in_a = main_preheaderi_26_reg;
	end
end
always @(*) begin
	result_address_a = 1'd0;
	/* main: %decode.exit.i*/
	/*   store i32 %226, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		result_address_a = (main_30_scevgep43_reg >>> 3'd2);
	end
	/* main: %.preheader*/
	/*   %234 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_182)) begin
		result_address_a = (main_preheader_scevgep4 >>> 3'd2);
	end
end
always @(*) begin
	result_write_enable_a = 1'd0;
	/* main: %decode.exit.i*/
	/*   store i32 %226, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		result_write_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %234 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_182)) begin
		result_write_enable_a = 1'd0;
	end
end
always @(*) begin
	result_in_a = 1'd0;
	/* main: %decode.exit.i*/
	/*   store i32 %226, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		result_in_a = main_decodeexiti_226;
	end
end
always @(*) begin
	result_address_b = 1'd0;
	/* main: %decode.exit.i*/
	/*   store i32 %228, i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		result_address_b = (main_30_scevgep42_reg >>> 3'd2);
	end
end
always @(*) begin
	result_write_enable_b = 1'd0;
	/* main: %decode.exit.i*/
	/*   store i32 %228, i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		result_write_enable_b = 1'd1;
	end
end
always @(*) begin
	result_in_b = 1'd0;
	/* main: %decode.exit.i*/
	/*   store i32 %228, i32* %scevgep42, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_176)) begin
		result_in_b = main_decodeexiti_228;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_24)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_25)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_57)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_60)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_61)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_65)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_24)) begin
		encode_arg_xin1 <= main_resetexiti_12;
		if (start == 1'b0 && ^(main_resetexiti_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_57)) begin
		encode_arg_xin1 <= main_resetexiti_17_reg;
		if (start == 1'b0 && ^(main_resetexiti_17_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_60)) begin
		encode_arg_xin1 <= main_resetexiti_22;
		if (start == 1'b0 && ^(main_resetexiti_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		encode_arg_xin1 <= 32'd60;
		if (start == 1'b0 && ^(32'd60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_24)) begin
		encode_arg_xin2 <= main_resetexiti_13;
		if (start == 1'b0 && ^(main_resetexiti_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_57)) begin
		encode_arg_xin2 <= main_resetexiti_18_reg;
		if (start == 1'b0 && ^(main_resetexiti_18_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_60)) begin
		encode_arg_xin2 <= main_resetexiti_23;
		if (start == 1'b0 && ^(main_resetexiti_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		encode_arg_xin2 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	else if ((cur_state == LEGUP_function_call_58)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	else if ((cur_state == LEGUP_function_call_61)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	else /* if ((cur_state == LEGUP_function_call_65)) */ begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	else if ((cur_state == LEGUP_function_call_58)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	else if ((cur_state == LEGUP_function_call_61)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	else /* if ((cur_state == LEGUP_function_call_65)) */ begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	encode_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	encode_finish_final = encode_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_resetexiti_24))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_resetexiti_57))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_resetexiti_60))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheaderi_64))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_resetexiti_24))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_resetexiti_57))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_resetexiti_60))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheaderi_64))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		legup_function_call = 1'd1;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		legup_function_call = 1'd1;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %11 = sdiv i32 %i1.05.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		main_signed_divide_32_0_op0 = main_resetexiti_i105i;
	end
	/* main: %reset.exit.i*/
	/*   %16 = sdiv i32 %9, 2*/
	else if ((cur_state == LEGUP_F_main_BB_resetexiti_24)) begin
		main_signed_divide_32_0_op0 = main_resetexiti_9_reg;
	end
	/* main: %reset.exit.i*/
	/*   %21 = sdiv i32 %7, 2*/
	else if ((cur_state == LEGUP_F_main_BB_resetexiti_26)) begin
		main_signed_divide_32_0_op0 = main_resetexiti_7_reg;
	end
	/* main: %30*/
	/*   %32 = sdiv i32 %i.03.i, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB__30_70)) */ begin
		main_signed_divide_32_0_op0 = main_30_i03i;
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %11 = sdiv i32 %i1.05.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_23)) begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
	/* main: %reset.exit.i*/
	/*   %16 = sdiv i32 %9, 2*/
	else if ((cur_state == LEGUP_F_main_BB_resetexiti_24)) begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
	/* main: %reset.exit.i*/
	/*   %21 = sdiv i32 %7, 2*/
	else if ((cur_state == LEGUP_F_main_BB_resetexiti_26)) begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
	/* main: %30*/
	/*   %32 = sdiv i32 %i.03.i, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB__30_70)) */ begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
end
always @(*) begin
	lpm_divide_main_resetexiti_11_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_resetexiti_11_out = lpm_divide_main_resetexiti_11_temp_out;
end
always @(*) begin
	main_signed_divide_32_0 = lpm_divide_main_resetexiti_11_out;
end
always @(*) begin
	lpm_mult_main_resetexiti_i105i_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %i1.05.i = mul i32 %indvar44, 6*/
	if ((lpm_mult_main_resetexiti_i105i_en == 1'd1)) begin
		main_resetexiti_i105i_stage0_reg <= (main_resetexiti_indvar44_reg * 32'd6);
	end
end
always @(*) begin
	lpm_divide_main_resetexiti_16_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_resetexiti_21_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_30_32_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_30_37_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %30*/
	/*   %37 = mul nsw i32 %36, %35*/
	if ((lpm_mult_main_30_37_en == 1'd1)) begin
		main_30_37_stage0_reg <= (main_30_36 * main_30_35);
	end
end
always @(*) begin
	lpm_mult_main_38_42_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %42 = mul nsw i32 %41, %40*/
	if ((lpm_mult_main_38_42_en == 1'd1)) begin
		main_38_42_stage0_reg <= (main_38_41 * main_38_40);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_46_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %46 = mul i32 %dec_al1.0, %dec_rlt1.0*/
	if ((lpm_mult_main_filtezexitii_46_en == 1'd1)) begin
		main_filtezexitii_46_stage0_reg <= (main_30_dec_al10_reg * main_30_dec_rlt10_reg);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_47_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %47 = mul i32 %dec_al2.0, %dec_rlt2.0*/
	if ((lpm_mult_main_filtezexitii_47_en == 1'd1)) begin
		main_filtezexitii_47_stage0_reg <= (main_30_dec_al20_reg * main_30_dec_rlt20_reg);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_56_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %56 = mul nsw i32 %29, %dec_detl.0*/
	if ((lpm_mult_main_filtezexitii_56_en == 1'd1)) begin
		main_filtezexitii_56_stage0_reg <= (main_preheaderi_29_reg * main_30_dec_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_59_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %59 = mul nsw i32 %dec_nbl.0, 127*/
	if ((lpm_mult_main_filtezexitii_59_en == 1'd1)) begin
		main_filtezexitii_59_stage0_reg <= (main_30_dec_nbl0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_54_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %54 = mul nsw i32 %53, %dec_detl.0*/
	if ((lpm_mult_main_filtezexitii_54_en == 1'd1)) begin
		main_filtezexitii_54_stage0_reg <= (main_filtezexitii_53 * main_30_dec_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi21ii_77_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i21.i.i*/
	/*   %77 = mul nsw i32 %76, 255*/
	if ((lpm_mult_main_preheaderi21ii_77_en == 1'd1)) begin
		main_preheaderi21ii_77_stage0_reg <= (main_preheaderi21ii_76_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_preheader1i24ii_84_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %84 = mul nsw i32 %82, %55*/
	if ((lpm_mult_main_preheader1i24ii_84_en == 1'd1)) begin
		main_preheader1i24ii_84_stage0_reg <= (main_preheader1i24ii_82_reg * main_filtezexitii_55_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheader1i24ii_88_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader1.i24.i.i*/
	/*   %88 = mul nsw i32 %81, 255*/
	if ((lpm_mult_main_preheader1i24ii_88_en == 1'd1)) begin
		main_preheader1i24ii_88_stage0_reg <= (main_preheader1i24ii_81_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit25ii_96_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %96 = mul nsw i32 %dec_plt1.0, %74*/
	if ((lpm_mult_main_upzeroexit25ii_96_en == 1'd1)) begin
		main_upzeroexit25ii_96_stage0_reg <= (main_30_dec_plt10_reg * main_filtezexitii_74_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit25ii_100_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %100 = mul nsw i32 %dec_plt2.0, %74*/
	if ((lpm_mult_main_upzeroexit25ii_100_en == 1'd1)) begin
		main_upzeroexit25ii_100_stage0_reg <= (main_30_dec_plt20_reg * main_filtezexitii_74_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit25ii_104_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %104 = mul nsw i32 %dec_al2.0, 127*/
	if ((lpm_mult_main_upzeroexit25ii_104_en == 1'd1)) begin
		main_upzeroexit25ii_104_stage0_reg <= (main_30_dec_al20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit25ii_109_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %109 = mul nsw i32 %dec_al1.0, 255*/
	if ((lpm_mult_main_upzeroexit25ii_109_en == 1'd1)) begin
		main_upzeroexit25ii_109_stage0_reg <= (main_30_dec_al10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit25ii_118_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit25.i.i*/
	/*   %118 = mul nsw i32 %117, %116*/
	if ((lpm_mult_main_upzeroexit25ii_118_en == 1'd1)) begin
		main_upzeroexit25ii_118_stage0_reg <= (main_upzeroexit25ii_117 * main_upzeroexit25ii_116);
	end
end
always @(*) begin
	lpm_mult_main_119_123_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %123 = mul nsw i32 %122, %121*/
	if ((lpm_mult_main_119_123_en == 1'd1)) begin
		main_119_123_stage0_reg <= (main_119_122 * main_119_121);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit11ii_129_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %129 = mul i32 %dec_ah1.0, %dec_rh1.0*/
	if ((lpm_mult_main_filtezexit11ii_129_en == 1'd1)) begin
		main_filtezexit11ii_129_stage0_reg <= (main_30_dec_ah10_reg * main_30_dec_rh10_reg);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit11ii_130_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %130 = mul i32 %dec_ah2.0, %dec_rh2.0*/
	if ((lpm_mult_main_filtezexit11ii_130_en == 1'd1)) begin
		main_filtezexit11ii_130_stage0_reg <= (main_30_dec_ah20_reg * main_30_dec_rh20_reg);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit11ii_137_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %137 = mul nsw i32 %dec_nbh.0, 127*/
	if ((lpm_mult_main_filtezexit11ii_137_en == 1'd1)) begin
		main_filtezexit11ii_137_stage0_reg <= (main_30_dec_nbh0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit11ii_135_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit11.i.i*/
	/*   %135 = mul nsw i32 %134, %dec_deth.0*/
	if ((lpm_mult_main_filtezexit11ii_135_en == 1'd1)) begin
		main_filtezexit11ii_135_stage0_reg <= (main_filtezexit11ii_134 * main_30_dec_deth0_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderiii_155_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i.i*/
	/*   %155 = mul nsw i32 %154, 255*/
	if ((lpm_mult_main_preheaderiii_155_en == 1'd1)) begin
		main_preheaderiii_155_stage0_reg <= (main_preheaderiii_154_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_preheader1iii_162_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %162 = mul nsw i32 %160, %136*/
	if ((lpm_mult_main_preheader1iii_162_en == 1'd1)) begin
		main_preheader1iii_162_stage0_reg <= (main_preheader1iii_160_reg * main_filtezexit11ii_136_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheader1iii_166_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i*/
	/*   %166 = mul nsw i32 %159, 255*/
	if ((lpm_mult_main_preheader1iii_166_en == 1'd1)) begin
		main_preheader1iii_166_stage0_reg <= (main_preheader1iii_159_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexitii_174_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %174 = mul nsw i32 %dec_ph1.0, %152*/
	if ((lpm_mult_main_upzeroexitii_174_en == 1'd1)) begin
		main_upzeroexitii_174_stage0_reg <= (main_30_dec_ph10_reg * main_filtezexit11ii_152_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexitii_178_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %178 = mul nsw i32 %dec_ph2.0, %152*/
	if ((lpm_mult_main_upzeroexitii_178_en == 1'd1)) begin
		main_upzeroexitii_178_stage0_reg <= (main_30_dec_ph20_reg * main_filtezexit11ii_152_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexitii_182_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %182 = mul nsw i32 %dec_ah2.0, 127*/
	if ((lpm_mult_main_upzeroexitii_182_en == 1'd1)) begin
		main_upzeroexitii_182_stage0_reg <= (main_30_dec_ah20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexitii_187_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %187 = mul nsw i32 %dec_ah1.0, 255*/
	if ((lpm_mult_main_upzeroexitii_187_en == 1'd1)) begin
		main_upzeroexitii_187_stage0_reg <= (main_30_dec_ah10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexitii_195_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %195 = mul nsw i32 %193, 12*/
	if ((lpm_mult_main_upzeroexitii_195_en == 1'd1)) begin
		main_upzeroexitii_195_stage0_reg <= (main_upzeroexitii_193 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexitii_196_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %upzero.exit.i.i*/
	/*   %196 = mul nsw i32 %194, -44*/
	if ((lpm_mult_main_upzeroexitii_196_en == 1'd1)) begin
		main_upzeroexitii_196_stage0_reg <= (main_upzeroexitii_194 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_197_203_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %203 = mul nsw i32 %202, %201*/
	if ((lpm_mult_main_197_203_en == 1'd1)) begin
		main_197_203_stage0_reg <= (main_197_202 * main_197_201_reg);
	end
end
always @(*) begin
	lpm_mult_main_197_207_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %207 = mul nsw i32 %206, %205*/
	if ((lpm_mult_main_197_207_en == 1'd1)) begin
		main_197_207_stage0_reg <= (main_197_206 * main_197_205_reg);
	end
end
always @(*) begin
	lpm_mult_main_decodeexiti_222_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %222 = mul nsw i32 %213, -44*/
	if ((lpm_mult_main_decodeexiti_222_en == 1'd1)) begin
		main_decodeexiti_222_stage0_reg <= (main_210_213_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_decodeexiti_223_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %223 = mul nsw i32 %214, 12*/
	if ((lpm_mult_main_decodeexiti_223_en == 1'd1)) begin
		main_decodeexiti_223_stage0_reg <= (main_210_214_reg * 32'd12);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %246*/
	/*   ret i32 %.main_result.2*/
	if ((cur_state == LEGUP_F_main_BB__246_187)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 0, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader1.i.i*/
	/*   store i32 0, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %filtez.exit.i.i*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %filtez.exit11.i.i*/
	/*   %134 = load i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %filtez.exit11.i.i*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_141)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %197*/
	/*   %202 = load i32* %h_ptr.043.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_165)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_detl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = `TAG_g_rlt2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_a = `TAG_g_plt2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_a = `TAG_g_al2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_a = `TAG_g_nbl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_a = `TAG_g_rh1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = `TAG_g_ph1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_a = `TAG_g_ah1_a;
	end
	/* main: %1*/
	/*   store i32 0, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		memory_controller_address_a = main_1_scevgep67;
	end
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		memory_controller_address_a = main_preheader2ii_scevgep62;
	end
	/* main: %.preheader1.i.i*/
	/*   store i32 0, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii_16)) begin
		memory_controller_address_a = main_preheader1ii_scevgep57;
	end
	/* main: %filtez.exit.i.i*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		memory_controller_address_a = main_filtezexitii_52;
	end
	/* main: %filtez.exit11.i.i*/
	/*   %134 = load i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		memory_controller_address_a = main_filtezexit11ii_133;
	end
	/* main: %filtez.exit11.i.i*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_141)) begin
		memory_controller_address_a = main_filtezexit11ii_147;
	end
	/* main: %197*/
	/*   %202 = load i32* %h_ptr.043.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_165)) begin
		memory_controller_address_a = main_197_h_ptr043ii;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 0, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader1.i.i*/
	/*   store i32 0, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %filtez.exit.i.i*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %filtez.exit11.i.i*/
	/*   %134 = load i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %filtez.exit11.i.i*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_141)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %197*/
	/*   %202 = load i32* %h_ptr.043.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_165)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd32;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %1*/
	/*   store i32 0, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %.preheader1.i.i*/
	/*   store i32 0, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii_16)) begin
		memory_controller_in_a = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   store i32 0, i32* %scevgep67, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader1.i.i*/
	/*   store i32 0, i32* %scevgep57, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %filtez.exit.i.i*/
	/*   %53 = load i32* %52, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %filtez.exit11.i.i*/
	/*   %134 = load i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %filtez.exit11.i.i*/
	/*   %148 = load i32* %147, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_141)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %197*/
	/*   %202 = load i32* %h_ptr.043.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_165)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 0, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %27 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_66)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %filtez.exit.i.i*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %filtez.exit.i.i*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_111)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %filtez.exit11.i.i*/
	/*   %140 = load i32* %139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %197*/
	/*   %206 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_165)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_deth_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_b = `TAG_g_rlt1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_b = `TAG_g_plt1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_b = `TAG_g_al1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_b = `TAG_g_rh2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_b = `TAG_g_ph2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_b = `TAG_g_ah2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_b = `TAG_g_nbh_a;
	end
	/* main: %1*/
	/*   store i32 0, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		memory_controller_address_b = main_1_scevgep66;
	end
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		memory_controller_address_b = main_preheader2ii_scevgep61;
	end
	/* main: %.preheader.i*/
	/*   %27 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_66)) begin
		memory_controller_address_b = `TAG_g_il_a;
	end
	/* main: %filtez.exit.i.i*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		memory_controller_address_b = main_filtezexitii_61;
	end
	/* main: %filtez.exit.i.i*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_111)) begin
		memory_controller_address_b = main_filtezexitii_69;
	end
	/* main: %filtez.exit11.i.i*/
	/*   %140 = load i32* %139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		memory_controller_address_b = main_filtezexit11ii_139;
	end
	/* main: %197*/
	/*   %206 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_165)) begin
		memory_controller_address_b = main_197_scevgep33;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 0, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %27 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_66)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %filtez.exit.i.i*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %filtez.exit.i.i*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_111)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %filtez.exit11.i.i*/
	/*   %140 = load i32* %139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %197*/
	/*   %206 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_165)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd8;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %1*/
	/*   store i32 0, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		memory_controller_in_b = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %reset.exit.i*/
	/*   %14 = tail call fastcc i32 @encode(i32 %12, i32 %13) #1*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %reset.exit.i*/
	/*   %19 = tail call fastcc i32 @encode(i32 %17, i32 %18) #1*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %reset.exit.i*/
	/*   %24 = tail call fastcc i32 @encode(i32 %22, i32 %23) #1*/
	if ((cur_state == LEGUP_function_call_61)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %.preheader.i*/
	/*   %26 = tail call fastcc i32 @encode(i32 60, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   store i32 0, i32* %scevgep66, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader2.i.i*/
	/*   store i32 0, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2ii_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %27 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_66)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %filtez.exit.i.i*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_108)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %filtez.exit.i.i*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_111)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %filtez.exit11.i.i*/
	/*   %140 = load i32* %139, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit11ii_138)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %197*/
	/*   %206 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__197_165)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %246*/
	/*   ret i32 %.main_result.2*/
	if ((cur_state == LEGUP_F_main_BB__246_187)) begin
		return_val <= main_preheader_main_result2_reg;
		if (start == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
