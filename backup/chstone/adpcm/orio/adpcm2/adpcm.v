//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Apr 14 18:11:18 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 23
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @dec_del_bph = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_bph `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_bph_a {`TAG_g_dec_del_bph, 23'd192}
// @dec_del_bpl = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_bpl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_bpl_a {`TAG_g_dec_del_bpl, 23'd128}
// @dec_del_dhx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_dhx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_dhx_a {`TAG_g_dec_del_dhx, 23'd224}
// @dec_del_dltx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_dltx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_dltx_a {`TAG_g_dec_del_dltx, 23'd160}
// @delay_bph = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bph `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_bph_a {`TAG_g_delay_bph, 23'd64}
// @delay_bpl = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bpl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_bpl_a {`TAG_g_delay_bpl, 23'd0}
// @delay_dhx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dhx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_dhx_a {`TAG_g_delay_dhx, 23'd96}
// @delay_dltx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dltx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_dltx_a {`TAG_g_delay_dltx, 23'd32}
// @quant26bt_neg = internal unnamed_addr constant [31 x i32] [i32 63, i32 62, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 ...
`define TAG_g_quant26bt_neg `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_quant26bt_neg_a {`TAG_g_quant26bt_neg, 23'd128}
// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
`define TAG_g_quant26bt_pos `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_quant26bt_pos_a {`TAG_g_quant26bt_pos, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [5:0] rom_32_address_a;
reg [5:0] rom_32_address_b;
reg rom_32_write_enable_a;
reg rom_32_write_enable_b;
reg [31:0] rom_32_in_a;
reg [31:0] rom_32_in_b;
wire [31:0] rom_32_out_a;
wire [31:0] rom_32_out_b;

// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
rom_dual_port rom_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_32_address_a ),
	.address_b( rom_32_address_b ),
	.q_a( rom_32_out_a ),
	.q_b( rom_32_out_b)
);
defparam rom_32.width_a = 32;
defparam rom_32.width_b = 32;
defparam rom_32.widthad_a = 6;
defparam rom_32.widthad_b = 6;
defparam rom_32.numwords_a = 63;
defparam rom_32.numwords_b = 63;
defparam rom_32.latency = ram_latency;
defparam rom_32.init_file = "rom_32.mif";

reg [5:0] ram_32_address_a;
reg [5:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @delay_bpl = internal global [6 x i32] zeroinitializer, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 6;
defparam ram_32.widthad_b = 6;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 62;
defparam ram_32.numwords_b = 62;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_32_a;
assign select_rom_32_a = (tag_a == 2);
reg [ram_latency:0] select_rom_32_reg_a;
wire [31:0] memory_controller_rom_32_out_a;
assign memory_controller_rom_32_out_a = {32{ select_rom_32_reg_a[ram_latency]}} & rom_32_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 3);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	rom_32_address_a = memory_controller_address_a [6-1+2:2] & {6{select_rom_32_a}};
	rom_32_write_enable_a = memory_controller_write_enable_a & select_rom_32_a;
	rom_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ram_32_address_a = memory_controller_address_a [6-1+2:2] & {6{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_rom_32_reg_a[ram_latency]}} | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_32_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_32_b;
assign select_rom_32_b = (tag_b == 2);
reg [ram_latency:0] select_rom_32_reg_b;
wire [31:0] memory_controller_rom_32_out_b;
assign memory_controller_rom_32_out_b = {32{ select_rom_32_reg_b[ram_latency]}} & rom_32_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 3);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	rom_32_address_b = memory_controller_address_b [6-1+2:2] & {6{select_rom_32_b}};
	rom_32_write_enable_b = memory_controller_write_enable_b & select_rom_32_b;
	rom_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ram_32_address_b = memory_controller_address_b [6-1+2:2] & {6{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_rom_32_reg_b[ram_latency]}} | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_32_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module upzero
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_dlt,
	arg_dlti,
	arg_bli
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_upzero_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_2 = 6'd2;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_3 = 6'd3;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_4 = 6'd4;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_5 = 6'd5;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_6 = 6'd6;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_7 = 6'd7;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_8 = 6'd8;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_9 = 6'd9;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_10 = 6'd10;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_11 = 6'd11;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_12 = 6'd12;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_13 = 6'd13;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_14 = 6'd14;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_15 = 6'd15;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_16 = 6'd16;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_17 = 6'd17;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_18 = 6'd18;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_19 = 6'd19;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_20 = 6'd20;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_21 = 6'd21;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_22 = 6'd22;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_23 = 6'd23;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_24 = 6'd24;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_25 = 6'd25;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_26 = 6'd26;
parameter [5:0] LEGUP_F_upzero_BB_preheader_27 = 6'd27;
parameter [5:0] LEGUP_F_upzero_BB_preheader_28 = 6'd28;
parameter [5:0] LEGUP_F_upzero_BB_preheader_29 = 6'd29;
parameter [5:0] LEGUP_F_upzero_BB_preheader_30 = 6'd30;
parameter [5:0] LEGUP_F_upzero_BB_preheader_31 = 6'd31;
parameter [5:0] LEGUP_F_upzero_BB_preheader_32 = 6'd32;
parameter [5:0] LEGUP_F_upzero_BB_preheader_33 = 6'd33;
parameter [5:0] LEGUP_F_upzero_BB__89_34 = 6'd34;
parameter [5:0] LEGUP_F_upzero_BB__89_35 = 6'd35;
parameter [5:0] LEGUP_F_upzero_BB__89_36 = 6'd36;
parameter [5:0] LEGUP_F_upzero_BB__89_37 = 6'd37;
parameter [5:0] LEGUP_F_upzero_BB__89_38 = 6'd38;
parameter [5:0] LEGUP_F_upzero_BB__89_39 = 6'd39;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [31:0] arg_dlt;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_dlti;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_bli;
reg [5:0] cur_state;
reg [5:0] next_state;
reg  upzero_0_1;
reg  upzero_0_1_reg;
reg [31:0] upzero_preheader1_2;
reg [31:0] upzero_preheader1_2_reg;
reg [31:0] upzero_preheader1_3;
reg [31:0] upzero_preheader1_3_reg;
reg [31:0] upzero_preheader1_4;
reg [31:0] upzero_preheader1_4_reg;
reg [31:0] upzero_preheader1_5;
reg [31:0] upzero_preheader1_5_reg;
reg [31:0] upzero_preheader1_6;
reg [31:0] upzero_preheader1_6_reg;
reg [31:0] upzero_preheader1_7;
reg [31:0] upzero_preheader1_7_reg;
reg [31:0] upzero_preheader1_8;
reg [31:0] upzero_preheader1_8_reg;
reg [31:0] upzero_preheader1_9;
reg [31:0] upzero_preheader1_9_reg;
reg [31:0] upzero_preheader1_10;
reg [31:0] upzero_preheader1_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_11_reg;
reg [31:0] upzero_preheader1_12;
reg [31:0] upzero_preheader1_12_reg;
reg [31:0] upzero_preheader1_13;
reg [31:0] upzero_preheader1_13_reg;
reg [31:0] upzero_preheader1_14;
reg [31:0] upzero_preheader1_14_reg;
reg [31:0] upzero_preheader1_15;
reg [31:0] upzero_preheader1_15_reg;
reg [31:0] upzero_preheader1_16;
reg [31:0] upzero_preheader1_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_17_reg;
reg [31:0] upzero_preheader1_18;
reg [31:0] upzero_preheader1_18_reg;
reg [31:0] upzero_preheader1_19;
reg [31:0] upzero_preheader1_19_reg;
reg [31:0] upzero_preheader1_20;
reg [31:0] upzero_preheader1_20_reg;
reg [31:0] upzero_preheader1_21;
reg [31:0] upzero_preheader1_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_22_reg;
reg [31:0] upzero_preheader1_23;
reg [31:0] upzero_preheader1_23_reg;
reg [31:0] upzero_preheader1_24;
reg [31:0] upzero_preheader1_24_reg;
reg [31:0] upzero_preheader1_25;
reg [31:0] upzero_preheader1_25_reg;
reg [31:0] upzero_preheader1_26;
reg [31:0] upzero_preheader1_26_reg;
reg [31:0] upzero_preheader1_27;
reg [31:0] upzero_preheader1_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_28_reg;
reg [31:0] upzero_preheader1_29;
reg [31:0] upzero_preheader1_29_reg;
reg [31:0] upzero_preheader1_30;
reg [31:0] upzero_preheader1_30_reg;
reg [31:0] upzero_preheader1_31;
reg [31:0] upzero_preheader1_31_reg;
reg [31:0] upzero_preheader1_32;
reg [31:0] upzero_preheader1_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_33_reg;
reg [31:0] upzero_preheader1_34;
reg [31:0] upzero_preheader1_34_reg;
reg [31:0] upzero_preheader1_35;
reg [31:0] upzero_preheader1_35_reg;
reg [31:0] upzero_preheader1_36;
reg [31:0] upzero_preheader1_36_reg;
reg [31:0] upzero_preheader1_37;
reg [31:0] upzero_preheader1_37_reg;
reg [31:0] upzero_preheader1_38;
reg [31:0] upzero_preheader1_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_39_reg;
reg [31:0] upzero_preheader1_40;
reg [31:0] upzero_preheader1_40_reg;
reg [31:0] upzero_preheader1_41;
reg [31:0] upzero_preheader1_41_reg;
reg [31:0] upzero_preheader1_42;
reg [31:0] upzero_preheader1_42_reg;
reg [31:0] upzero_preheader1_43;
reg [31:0] upzero_preheader1_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_44_reg;
reg [31:0] upzero_preheader1_45;
reg [31:0] upzero_preheader1_45_reg;
reg [31:0] upzero_preheader1_46;
reg [31:0] upzero_preheader1_46_reg;
reg [31:0] upzero_preheader1_47;
reg [31:0] upzero_preheader1_47_reg;
reg [31:0] upzero_preheader1_48;
reg [31:0] upzero_preheader1_48_reg;
reg [31:0] upzero_preheader1_49;
reg [31:0] upzero_preheader1_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_50_reg;
reg [31:0] upzero_preheader1_51;
reg [31:0] upzero_preheader1_51_reg;
reg [31:0] upzero_preheader1_52;
reg [31:0] upzero_preheader1_52_reg;
reg [31:0] upzero_preheader1_53;
reg [31:0] upzero_preheader1_53_reg;
reg [31:0] upzero_preheader1_54;
reg [31:0] upzero_preheader1_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_55_reg;
reg [31:0] upzero_preheader1_56;
reg [31:0] upzero_preheader1_56_reg;
reg [31:0] upzero_preheader1_57;
reg [31:0] upzero_preheader1_57_reg;
reg [31:0] upzero_preheader1_58;
reg [31:0] upzero_preheader1_58_reg;
reg [31:0] upzero_preheader1_59;
reg [31:0] upzero_preheader1_59_reg;
reg [31:0] upzero_preheader1_60;
reg [31:0] upzero_preheader1_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_61_reg;
reg [31:0] upzero_preheader1_62;
reg [31:0] upzero_preheader1_62_reg;
reg [31:0] upzero_preheader1_63;
reg [31:0] upzero_preheader1_63_reg;
reg [31:0] upzero_preheader1_64;
reg [31:0] upzero_preheader1_64_reg;
reg [31:0] upzero_preheader1_65;
reg [31:0] upzero_preheader1_65_reg;
reg [31:0] upzero_preheader_66;
reg [31:0] upzero_preheader_66_reg;
reg [31:0] upzero_preheader_67;
reg [31:0] upzero_preheader_67_reg;
reg [31:0] upzero_preheader_68;
reg [31:0] upzero_preheader_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_69_reg;
reg [31:0] upzero_preheader_70;
reg [31:0] upzero_preheader_70_reg;
reg [31:0] upzero_preheader_71;
reg [31:0] upzero_preheader_71_reg;
reg [31:0] upzero_preheader_72;
reg [31:0] upzero_preheader_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_73_reg;
reg [31:0] upzero_preheader_74;
reg [31:0] upzero_preheader_74_reg;
reg [31:0] upzero_preheader_75;
reg [31:0] upzero_preheader_75_reg;
reg [31:0] upzero_preheader_76;
reg [31:0] upzero_preheader_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_77_reg;
reg [31:0] upzero_preheader_78;
reg [31:0] upzero_preheader_78_reg;
reg [31:0] upzero_preheader_79;
reg [31:0] upzero_preheader_79_reg;
reg [31:0] upzero_preheader_80;
reg [31:0] upzero_preheader_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_81_reg;
reg [31:0] upzero_preheader_82;
reg [31:0] upzero_preheader_82_reg;
reg [31:0] upzero_preheader_83;
reg [31:0] upzero_preheader_83_reg;
reg [31:0] upzero_preheader_84;
reg [31:0] upzero_preheader_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_85_reg;
reg [31:0] upzero_preheader_86;
reg [31:0] upzero_preheader_86_reg;
reg [31:0] upzero_preheader_87;
reg [31:0] upzero_preheader_87_reg;
reg [31:0] upzero_preheader_88;
reg [31:0] upzero_preheader_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi_reg;
reg [31:0] upzero_89_90;
reg [31:0] upzero_89_90_reg;
reg [31:0] upzero_89_91;
reg [31:0] upzero_89_91_reg;
reg [31:0] upzero_89_92;
reg [31:0] upzero_89_92_reg;
reg [31:0] upzero_89_93;
reg [31:0] upzero_89_93_reg;
wire [3:0] qq4_code4_table_address_a;
wire  qq4_code4_table_write_enable_a;
wire [31:0] qq4_code4_table_in_a;
wire [31:0] qq4_code4_table_out_a;
wire [3:0] qq4_code4_table_address_b;
wire  qq4_code4_table_write_enable_b;
wire [31:0] qq4_code4_table_in_b;
wire [31:0] qq4_code4_table_out_b;
wire [5:0] qq6_code6_table_address_a;
wire  qq6_code6_table_write_enable_a;
wire [31:0] qq6_code6_table_in_a;
wire [31:0] qq6_code6_table_out_a;
wire [5:0] qq6_code6_table_address_b;
wire  qq6_code6_table_write_enable_b;
wire [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_b;
wire [3:0] wl_code_table_address_a;
wire  wl_code_table_write_enable_a;
wire [31:0] wl_code_table_in_a;
wire [31:0] wl_code_table_out_a;
wire [3:0] wl_code_table_address_b;
wire  wl_code_table_write_enable_b;
wire [31:0] wl_code_table_in_b;
wire [31:0] wl_code_table_out_b;
wire [4:0] ilb_table_address_a;
wire  ilb_table_write_enable_a;
wire [31:0] ilb_table_in_a;
wire [31:0] ilb_table_out_a;
wire [4:0] ilb_table_address_b;
wire  ilb_table_write_enable_b;
wire [31:0] ilb_table_in_b;
wire [31:0] ilb_table_out_b;
wire [4:0] decis_levl_address_a;
wire  decis_levl_write_enable_a;
wire [31:0] decis_levl_in_a;
wire [31:0] decis_levl_out_a;
wire [4:0] decis_levl_address_b;
wire  decis_levl_write_enable_b;
wire [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_b;
wire [4:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [4:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
wire [1:0] qq2_code2_table_address_a;
wire  qq2_code2_table_write_enable_a;
wire [31:0] qq2_code2_table_in_a;
wire [31:0] qq2_code2_table_out_a;
wire [1:0] qq2_code2_table_address_b;
wire  qq2_code2_table_write_enable_b;
wire [31:0] qq2_code2_table_in_b;
wire [31:0] qq2_code2_table_out_b;
wire [1:0] wh_code_table_address_a;
wire  wh_code_table_write_enable_a;
wire [31:0] wh_code_table_in_a;
wire [31:0] wh_code_table_out_a;
wire [1:0] wh_code_table_address_b;
wire  wh_code_table_write_enable_b;
wire [31:0] wh_code_table_in_b;
wire [31:0] wh_code_table_out_b;
wire [4:0] tqmf_address_a;
wire  tqmf_write_enable_a;
wire [31:0] tqmf_in_a;
wire [31:0] tqmf_out_a;
wire [4:0] tqmf_address_b;
wire  tqmf_write_enable_b;
wire [31:0] tqmf_in_b;
wire [31:0] tqmf_out_b;
wire [2:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [2:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [6:0] test_data_address_a;
wire  test_data_write_enable_a;
wire [31:0] test_data_in_a;
wire [31:0] test_data_out_a;
wire [6:0] test_data_address_b;
wire  test_data_write_enable_b;
wire [31:0] test_data_in_b;
wire [31:0] test_data_out_b;
wire [6:0] test_compressed_address_a;
wire  test_compressed_write_enable_a;
wire [31:0] test_compressed_in_a;
wire [31:0] test_compressed_out_a;
wire [6:0] test_compressed_address_b;
wire  test_compressed_write_enable_b;
wire [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_b;
wire [6:0] test_result_address_a;
wire  test_result_write_enable_a;
wire [31:0] test_result_in_a;
wire [31:0] test_result_out_a;
wire [6:0] test_result_address_b;
wire  test_result_write_enable_b;
wire [31:0] test_result_in_b;
wire [31:0] test_result_out_b;
wire [6:0] compressed_address_a;
wire  compressed_write_enable_a;
wire [31:0] compressed_in_a;
wire [31:0] compressed_out_a;
wire [6:0] compressed_address_b;
wire  compressed_write_enable_b;
wire [31:0] compressed_in_b;
wire [31:0] compressed_out_b;
wire [6:0] result_address_a;
wire  result_write_enable_a;
wire [31:0] result_in_a;
wire [31:0] result_out_a;
wire [6:0] result_address_b;
wire  result_write_enable_b;
wire [31:0] result_in_b;
wire [31:0] result_out_b;
reg  lpm_mult_upzero_preheader1_3_en;
reg [31:0] upzero_preheader1_3_stage0_reg;
reg  lpm_mult_upzero_preheader1_8_en;
reg [31:0] upzero_preheader1_8_stage0_reg;
reg  lpm_mult_upzero_preheader1_13_en;
reg [31:0] upzero_preheader1_13_stage0_reg;
reg  lpm_mult_upzero_preheader1_19_en;
reg [31:0] upzero_preheader1_19_stage0_reg;
reg  lpm_mult_upzero_preheader1_24_en;
reg [31:0] upzero_preheader1_24_stage0_reg;
reg  lpm_mult_upzero_preheader1_30_en;
reg [31:0] upzero_preheader1_30_stage0_reg;
reg  lpm_mult_upzero_preheader1_35_en;
reg [31:0] upzero_preheader1_35_stage0_reg;
reg  lpm_mult_upzero_preheader1_41_en;
reg [31:0] upzero_preheader1_41_stage0_reg;
reg  lpm_mult_upzero_preheader1_46_en;
reg [31:0] upzero_preheader1_46_stage0_reg;
reg  lpm_mult_upzero_preheader1_52_en;
reg [31:0] upzero_preheader1_52_stage0_reg;
reg  lpm_mult_upzero_preheader1_57_en;
reg [31:0] upzero_preheader1_57_stage0_reg;
reg  lpm_mult_upzero_preheader1_63_en;
reg [31:0] upzero_preheader1_63_stage0_reg;
reg  lpm_mult_upzero_preheader_67_en;
reg [31:0] upzero_preheader_67_stage0_reg;
reg  lpm_mult_upzero_preheader_71_en;
reg [31:0] upzero_preheader_71_stage0_reg;
reg  lpm_mult_upzero_preheader_75_en;
reg [31:0] upzero_preheader_75_stage0_reg;
reg  lpm_mult_upzero_preheader_79_en;
reg [31:0] upzero_preheader_79_stage0_reg;
reg  lpm_mult_upzero_preheader_83_en;
reg [31:0] upzero_preheader_83_stage0_reg;
reg  lpm_mult_upzero_preheader_87_en;
reg [31:0] upzero_preheader_87_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_upzero_BB__0_1;
LEGUP_F_upzero_BB__0_1:
	if ((upzero_0_1 == 1'd1))
		next_state = LEGUP_F_upzero_BB_preheader_27;
	else if ((upzero_0_1 == 1'd0))
		next_state = LEGUP_F_upzero_BB_preheader1_2;
LEGUP_F_upzero_BB__89_34:
		next_state = LEGUP_F_upzero_BB__89_35;
LEGUP_F_upzero_BB__89_35:
		next_state = LEGUP_F_upzero_BB__89_36;
LEGUP_F_upzero_BB__89_36:
		next_state = LEGUP_F_upzero_BB__89_37;
LEGUP_F_upzero_BB__89_37:
		next_state = LEGUP_F_upzero_BB__89_38;
LEGUP_F_upzero_BB__89_38:
		next_state = LEGUP_F_upzero_BB__89_39;
LEGUP_F_upzero_BB__89_39:
		next_state = LEGUP_0;
LEGUP_F_upzero_BB_preheader1_10:
		next_state = LEGUP_F_upzero_BB_preheader1_11;
LEGUP_F_upzero_BB_preheader1_11:
		next_state = LEGUP_F_upzero_BB_preheader1_12;
LEGUP_F_upzero_BB_preheader1_12:
		next_state = LEGUP_F_upzero_BB_preheader1_13;
LEGUP_F_upzero_BB_preheader1_13:
		next_state = LEGUP_F_upzero_BB_preheader1_14;
LEGUP_F_upzero_BB_preheader1_14:
		next_state = LEGUP_F_upzero_BB_preheader1_15;
LEGUP_F_upzero_BB_preheader1_15:
		next_state = LEGUP_F_upzero_BB_preheader1_16;
LEGUP_F_upzero_BB_preheader1_16:
		next_state = LEGUP_F_upzero_BB_preheader1_17;
LEGUP_F_upzero_BB_preheader1_17:
		next_state = LEGUP_F_upzero_BB_preheader1_18;
LEGUP_F_upzero_BB_preheader1_18:
		next_state = LEGUP_F_upzero_BB_preheader1_19;
LEGUP_F_upzero_BB_preheader1_19:
		next_state = LEGUP_F_upzero_BB_preheader1_20;
LEGUP_F_upzero_BB_preheader1_2:
		next_state = LEGUP_F_upzero_BB_preheader1_3;
LEGUP_F_upzero_BB_preheader1_20:
		next_state = LEGUP_F_upzero_BB_preheader1_21;
LEGUP_F_upzero_BB_preheader1_21:
		next_state = LEGUP_F_upzero_BB_preheader1_22;
LEGUP_F_upzero_BB_preheader1_22:
		next_state = LEGUP_F_upzero_BB_preheader1_23;
LEGUP_F_upzero_BB_preheader1_23:
		next_state = LEGUP_F_upzero_BB_preheader1_24;
LEGUP_F_upzero_BB_preheader1_24:
		next_state = LEGUP_F_upzero_BB_preheader1_25;
LEGUP_F_upzero_BB_preheader1_25:
		next_state = LEGUP_F_upzero_BB_preheader1_26;
LEGUP_F_upzero_BB_preheader1_26:
		next_state = LEGUP_F_upzero_BB__89_34;
LEGUP_F_upzero_BB_preheader1_3:
		next_state = LEGUP_F_upzero_BB_preheader1_4;
LEGUP_F_upzero_BB_preheader1_4:
		next_state = LEGUP_F_upzero_BB_preheader1_5;
LEGUP_F_upzero_BB_preheader1_5:
		next_state = LEGUP_F_upzero_BB_preheader1_6;
LEGUP_F_upzero_BB_preheader1_6:
		next_state = LEGUP_F_upzero_BB_preheader1_7;
LEGUP_F_upzero_BB_preheader1_7:
		next_state = LEGUP_F_upzero_BB_preheader1_8;
LEGUP_F_upzero_BB_preheader1_8:
		next_state = LEGUP_F_upzero_BB_preheader1_9;
LEGUP_F_upzero_BB_preheader1_9:
		next_state = LEGUP_F_upzero_BB_preheader1_10;
LEGUP_F_upzero_BB_preheader_27:
		next_state = LEGUP_F_upzero_BB_preheader_28;
LEGUP_F_upzero_BB_preheader_28:
		next_state = LEGUP_F_upzero_BB_preheader_29;
LEGUP_F_upzero_BB_preheader_29:
		next_state = LEGUP_F_upzero_BB_preheader_30;
LEGUP_F_upzero_BB_preheader_30:
		next_state = LEGUP_F_upzero_BB_preheader_31;
LEGUP_F_upzero_BB_preheader_31:
		next_state = LEGUP_F_upzero_BB_preheader_32;
LEGUP_F_upzero_BB_preheader_32:
		next_state = LEGUP_F_upzero_BB_preheader_33;
LEGUP_F_upzero_BB_preheader_33:
		next_state = LEGUP_F_upzero_BB__89_34;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* upzero: %0*/
	/*   %1 = icmp eq i32 %dlt, 0*/
		upzero_0_1 = (arg_dlt == 32'd0);
end
always @(posedge clk) begin
	/* upzero: %0*/
	/*   %1 = icmp eq i32 %dlt, 0*/
	if ((cur_state == LEGUP_F_upzero_BB__0_1)) begin
		upzero_0_1_reg <= upzero_0_1;
		if (start == 1'b0 && ^(upzero_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
		upzero_preheader1_2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_4)) begin
		upzero_preheader1_2_reg <= upzero_preheader1_2;
		if (start == 1'b0 && ^(upzero_preheader1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_2_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_3 = upzero_preheader1_3_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %3 = mul nsw i32 %2, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_3_reg <= upzero_preheader1_3;
		if (start == 1'b0 && ^(upzero_preheader1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_3_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %3 = mul nsw i32 %2, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_3_reg <= upzero_preheader1_3;
		if (start == 1'b0 && ^(upzero_preheader1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %4 = ashr i32 %3, 31*/
		upzero_preheader1_4 = ($signed(upzero_preheader1_3) >>> 32'd31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %4 = ashr i32 %3, 31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_4_reg <= upzero_preheader1_4;
		if (start == 1'b0 && ^(upzero_preheader1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %5 = and i32 %4, -256*/
		upzero_preheader1_5 = (upzero_preheader1_4 & -32'd256);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %5 = and i32 %4, -256*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_5_reg <= upzero_preheader1_5;
		if (start == 1'b0 && ^(upzero_preheader1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %6 = or i32 %5, 128*/
		upzero_preheader1_6 = (upzero_preheader1_5 | 32'd128);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %6 = or i32 %5, 128*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_6_reg <= upzero_preheader1_6;
		if (start == 1'b0 && ^(upzero_preheader1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
		upzero_preheader1_7 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_4)) begin
		upzero_preheader1_7_reg <= upzero_preheader1_7;
		if (start == 1'b0 && ^(upzero_preheader1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_7_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_8 = upzero_preheader1_8_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %8 = mul nsw i32 %7, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_8_reg <= upzero_preheader1_8;
		if (start == 1'b0 && ^(upzero_preheader1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_8_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %8 = mul nsw i32 %7, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_8_reg <= upzero_preheader1_8;
		if (start == 1'b0 && ^(upzero_preheader1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %9 = ashr i32 %8, 8*/
		upzero_preheader1_9 = ($signed(upzero_preheader1_8) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %9 = ashr i32 %8, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_9_reg <= upzero_preheader1_9;
		if (start == 1'b0 && ^(upzero_preheader1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_9_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
		upzero_preheader1_10 = (upzero_preheader1_6 + upzero_preheader1_9);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_10_reg <= upzero_preheader1_10;
		if (start == 1'b0 && ^(upzero_preheader1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %11 = getelementptr inbounds i32* %dlti, i32 1*/
		upzero_preheader1_11 = (arg_dlti + (4 * 32'd1));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %11 = getelementptr inbounds i32* %dlti, i32 1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_11_reg <= upzero_preheader1_11;
		if (start == 1'b0 && ^(upzero_preheader1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
		upzero_preheader1_12 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_8)) begin
		upzero_preheader1_12_reg <= upzero_preheader1_12;
		if (start == 1'b0 && ^(upzero_preheader1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_12_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_13 = upzero_preheader1_13_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %13 = mul nsw i32 %12, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_13_reg <= upzero_preheader1_13;
		if (start == 1'b0 && ^(upzero_preheader1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_13_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %13 = mul nsw i32 %12, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_13_reg <= upzero_preheader1_13;
		if (start == 1'b0 && ^(upzero_preheader1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_13_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %14 = ashr i32 %13, 31*/
		upzero_preheader1_14 = ($signed(upzero_preheader1_13) >>> 32'd31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %14 = ashr i32 %13, 31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_14_reg <= upzero_preheader1_14;
		if (start == 1'b0 && ^(upzero_preheader1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_14_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %15 = and i32 %14, -256*/
		upzero_preheader1_15 = (upzero_preheader1_14 & -32'd256);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %15 = and i32 %14, -256*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_15_reg <= upzero_preheader1_15;
		if (start == 1'b0 && ^(upzero_preheader1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_15_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %16 = or i32 %15, 128*/
		upzero_preheader1_16 = (upzero_preheader1_15 | 32'd128);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %16 = or i32 %15, 128*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_16_reg <= upzero_preheader1_16;
		if (start == 1'b0 && ^(upzero_preheader1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_16_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %17 = getelementptr inbounds i32* %bli, i32 1*/
		upzero_preheader1_17 = (arg_bli + (4 * 32'd1));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %17 = getelementptr inbounds i32* %bli, i32 1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_17_reg <= upzero_preheader1_17;
		if (start == 1'b0 && ^(upzero_preheader1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_17_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
		upzero_preheader1_18 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_8)) begin
		upzero_preheader1_18_reg <= upzero_preheader1_18;
		if (start == 1'b0 && ^(upzero_preheader1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_18_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_19 = upzero_preheader1_19_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %19 = mul nsw i32 %18, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_19_reg <= upzero_preheader1_19;
		if (start == 1'b0 && ^(upzero_preheader1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_19_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %19 = mul nsw i32 %18, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_19_reg <= upzero_preheader1_19;
		if (start == 1'b0 && ^(upzero_preheader1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_19_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %20 = ashr i32 %19, 8*/
		upzero_preheader1_20 = ($signed(upzero_preheader1_19) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %20 = ashr i32 %19, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_20_reg <= upzero_preheader1_20;
		if (start == 1'b0 && ^(upzero_preheader1_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_20_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
		upzero_preheader1_21 = (upzero_preheader1_16 + upzero_preheader1_20);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_21_reg <= upzero_preheader1_21;
		if (start == 1'b0 && ^(upzero_preheader1_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_21_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %22 = getelementptr inbounds i32* %dlti, i32 2*/
		upzero_preheader1_22 = (arg_dlti + (4 * 32'd2));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %22 = getelementptr inbounds i32* %dlti, i32 2*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_22_reg <= upzero_preheader1_22;
		if (start == 1'b0 && ^(upzero_preheader1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_22_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
		upzero_preheader1_23 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_12)) begin
		upzero_preheader1_23_reg <= upzero_preheader1_23;
		if (start == 1'b0 && ^(upzero_preheader1_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_23_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_24 = upzero_preheader1_24_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %24 = mul nsw i32 %23, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_24_reg <= upzero_preheader1_24;
		if (start == 1'b0 && ^(upzero_preheader1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_24_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %24 = mul nsw i32 %23, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_24_reg <= upzero_preheader1_24;
		if (start == 1'b0 && ^(upzero_preheader1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_24_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %25 = ashr i32 %24, 31*/
		upzero_preheader1_25 = ($signed(upzero_preheader1_24) >>> 32'd31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %25 = ashr i32 %24, 31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_25_reg <= upzero_preheader1_25;
		if (start == 1'b0 && ^(upzero_preheader1_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_25_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %26 = and i32 %25, -256*/
		upzero_preheader1_26 = (upzero_preheader1_25 & -32'd256);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %26 = and i32 %25, -256*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_26_reg <= upzero_preheader1_26;
		if (start == 1'b0 && ^(upzero_preheader1_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_26_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %27 = or i32 %26, 128*/
		upzero_preheader1_27 = (upzero_preheader1_26 | 32'd128);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %27 = or i32 %26, 128*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_27_reg <= upzero_preheader1_27;
		if (start == 1'b0 && ^(upzero_preheader1_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_27_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %28 = getelementptr inbounds i32* %bli, i32 2*/
		upzero_preheader1_28 = (arg_bli + (4 * 32'd2));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %28 = getelementptr inbounds i32* %bli, i32 2*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_28_reg <= upzero_preheader1_28;
		if (start == 1'b0 && ^(upzero_preheader1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_28_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
		upzero_preheader1_29 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_12)) begin
		upzero_preheader1_29_reg <= upzero_preheader1_29;
		if (start == 1'b0 && ^(upzero_preheader1_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_29_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_30 = upzero_preheader1_30_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %30 = mul nsw i32 %29, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_30_reg <= upzero_preheader1_30;
		if (start == 1'b0 && ^(upzero_preheader1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_30_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %30 = mul nsw i32 %29, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_30_reg <= upzero_preheader1_30;
		if (start == 1'b0 && ^(upzero_preheader1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_30_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %31 = ashr i32 %30, 8*/
		upzero_preheader1_31 = ($signed(upzero_preheader1_30) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %31 = ashr i32 %30, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_31_reg <= upzero_preheader1_31;
		if (start == 1'b0 && ^(upzero_preheader1_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_31_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
		upzero_preheader1_32 = (upzero_preheader1_27 + upzero_preheader1_31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_32_reg <= upzero_preheader1_32;
		if (start == 1'b0 && ^(upzero_preheader1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_32_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %33 = getelementptr inbounds i32* %dlti, i32 3*/
		upzero_preheader1_33 = (arg_dlti + (4 * 32'd3));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %33 = getelementptr inbounds i32* %dlti, i32 3*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_33_reg <= upzero_preheader1_33;
		if (start == 1'b0 && ^(upzero_preheader1_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_33_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
		upzero_preheader1_34 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_16)) begin
		upzero_preheader1_34_reg <= upzero_preheader1_34;
		if (start == 1'b0 && ^(upzero_preheader1_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_34_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_35 = upzero_preheader1_35_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %35 = mul nsw i32 %34, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_35_reg <= upzero_preheader1_35;
		if (start == 1'b0 && ^(upzero_preheader1_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_35_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %35 = mul nsw i32 %34, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_35_reg <= upzero_preheader1_35;
		if (start == 1'b0 && ^(upzero_preheader1_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_35_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %36 = ashr i32 %35, 31*/
		upzero_preheader1_36 = ($signed(upzero_preheader1_35) >>> 32'd31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %36 = ashr i32 %35, 31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_36_reg <= upzero_preheader1_36;
		if (start == 1'b0 && ^(upzero_preheader1_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_36_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %37 = and i32 %36, -256*/
		upzero_preheader1_37 = (upzero_preheader1_36 & -32'd256);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %37 = and i32 %36, -256*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_37_reg <= upzero_preheader1_37;
		if (start == 1'b0 && ^(upzero_preheader1_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_37_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %38 = or i32 %37, 128*/
		upzero_preheader1_38 = (upzero_preheader1_37 | 32'd128);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %38 = or i32 %37, 128*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_38_reg <= upzero_preheader1_38;
		if (start == 1'b0 && ^(upzero_preheader1_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_38_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %39 = getelementptr inbounds i32* %bli, i32 3*/
		upzero_preheader1_39 = (arg_bli + (4 * 32'd3));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %39 = getelementptr inbounds i32* %bli, i32 3*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_39_reg <= upzero_preheader1_39;
		if (start == 1'b0 && ^(upzero_preheader1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_39_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
		upzero_preheader1_40 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_16)) begin
		upzero_preheader1_40_reg <= upzero_preheader1_40;
		if (start == 1'b0 && ^(upzero_preheader1_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_40_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_41 = upzero_preheader1_41_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %41 = mul nsw i32 %40, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_41_reg <= upzero_preheader1_41;
		if (start == 1'b0 && ^(upzero_preheader1_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_41_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %41 = mul nsw i32 %40, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_41_reg <= upzero_preheader1_41;
		if (start == 1'b0 && ^(upzero_preheader1_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_41_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %42 = ashr i32 %41, 8*/
		upzero_preheader1_42 = ($signed(upzero_preheader1_41) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %42 = ashr i32 %41, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_42_reg <= upzero_preheader1_42;
		if (start == 1'b0 && ^(upzero_preheader1_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_42_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
		upzero_preheader1_43 = (upzero_preheader1_38 + upzero_preheader1_42);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_43_reg <= upzero_preheader1_43;
		if (start == 1'b0 && ^(upzero_preheader1_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_43_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %44 = getelementptr inbounds i32* %dlti, i32 4*/
		upzero_preheader1_44 = (arg_dlti + (4 * 32'd4));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %44 = getelementptr inbounds i32* %dlti, i32 4*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_44_reg <= upzero_preheader1_44;
		if (start == 1'b0 && ^(upzero_preheader1_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_44_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
		upzero_preheader1_45 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_20)) begin
		upzero_preheader1_45_reg <= upzero_preheader1_45;
		if (start == 1'b0 && ^(upzero_preheader1_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_45_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_46 = upzero_preheader1_46_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %46 = mul nsw i32 %45, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_46_reg <= upzero_preheader1_46;
		if (start == 1'b0 && ^(upzero_preheader1_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_46_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %46 = mul nsw i32 %45, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_46_reg <= upzero_preheader1_46;
		if (start == 1'b0 && ^(upzero_preheader1_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_46_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %47 = ashr i32 %46, 31*/
		upzero_preheader1_47 = ($signed(upzero_preheader1_46) >>> 32'd31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %47 = ashr i32 %46, 31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_47_reg <= upzero_preheader1_47;
		if (start == 1'b0 && ^(upzero_preheader1_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_47_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %48 = and i32 %47, -256*/
		upzero_preheader1_48 = (upzero_preheader1_47 & -32'd256);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %48 = and i32 %47, -256*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_48_reg <= upzero_preheader1_48;
		if (start == 1'b0 && ^(upzero_preheader1_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_48_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %49 = or i32 %48, 128*/
		upzero_preheader1_49 = (upzero_preheader1_48 | 32'd128);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %49 = or i32 %48, 128*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_49_reg <= upzero_preheader1_49;
		if (start == 1'b0 && ^(upzero_preheader1_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_49_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %50 = getelementptr inbounds i32* %bli, i32 4*/
		upzero_preheader1_50 = (arg_bli + (4 * 32'd4));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %50 = getelementptr inbounds i32* %bli, i32 4*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_50_reg <= upzero_preheader1_50;
		if (start == 1'b0 && ^(upzero_preheader1_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_50_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
		upzero_preheader1_51 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_20)) begin
		upzero_preheader1_51_reg <= upzero_preheader1_51;
		if (start == 1'b0 && ^(upzero_preheader1_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_51_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_52 = upzero_preheader1_52_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %52 = mul nsw i32 %51, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_52_reg <= upzero_preheader1_52;
		if (start == 1'b0 && ^(upzero_preheader1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_52_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %52 = mul nsw i32 %51, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_52_reg <= upzero_preheader1_52;
		if (start == 1'b0 && ^(upzero_preheader1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_52_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %53 = ashr i32 %52, 8*/
		upzero_preheader1_53 = ($signed(upzero_preheader1_52) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %53 = ashr i32 %52, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_53_reg <= upzero_preheader1_53;
		if (start == 1'b0 && ^(upzero_preheader1_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_53_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
		upzero_preheader1_54 = (upzero_preheader1_49 + upzero_preheader1_53);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_54_reg <= upzero_preheader1_54;
		if (start == 1'b0 && ^(upzero_preheader1_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_54_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %55 = getelementptr inbounds i32* %dlti, i32 5*/
		upzero_preheader1_55 = (arg_dlti + (4 * 32'd5));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %55 = getelementptr inbounds i32* %dlti, i32 5*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_55_reg <= upzero_preheader1_55;
		if (start == 1'b0 && ^(upzero_preheader1_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_55_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
		upzero_preheader1_56 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_24)) begin
		upzero_preheader1_56_reg <= upzero_preheader1_56;
		if (start == 1'b0 && ^(upzero_preheader1_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_56_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_57 = upzero_preheader1_57_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %57 = mul nsw i32 %56, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_57_reg <= upzero_preheader1_57;
		if (start == 1'b0 && ^(upzero_preheader1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_57_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %57 = mul nsw i32 %56, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_57_reg <= upzero_preheader1_57;
		if (start == 1'b0 && ^(upzero_preheader1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_57_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %58 = ashr i32 %57, 31*/
		upzero_preheader1_58 = ($signed(upzero_preheader1_57) >>> 32'd31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %58 = ashr i32 %57, 31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_58_reg <= upzero_preheader1_58;
		if (start == 1'b0 && ^(upzero_preheader1_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_58_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %59 = and i32 %58, -256*/
		upzero_preheader1_59 = (upzero_preheader1_58 & -32'd256);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %59 = and i32 %58, -256*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_59_reg <= upzero_preheader1_59;
		if (start == 1'b0 && ^(upzero_preheader1_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_59_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %60 = or i32 %59, 128*/
		upzero_preheader1_60 = (upzero_preheader1_59 | 32'd128);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %60 = or i32 %59, 128*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_60_reg <= upzero_preheader1_60;
		if (start == 1'b0 && ^(upzero_preheader1_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_60_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %61 = getelementptr inbounds i32* %bli, i32 5*/
		upzero_preheader1_61 = (arg_bli + (4 * 32'd5));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %61 = getelementptr inbounds i32* %bli, i32 5*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_61_reg <= upzero_preheader1_61;
		if (start == 1'b0 && ^(upzero_preheader1_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_61_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
		upzero_preheader1_62 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_24)) begin
		upzero_preheader1_62_reg <= upzero_preheader1_62;
		if (start == 1'b0 && ^(upzero_preheader1_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_62_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_63 = upzero_preheader1_63_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %63 = mul nsw i32 %62, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_63_reg <= upzero_preheader1_63;
		if (start == 1'b0 && ^(upzero_preheader1_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_63_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %63 = mul nsw i32 %62, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_63_reg <= upzero_preheader1_63;
		if (start == 1'b0 && ^(upzero_preheader1_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_63_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %64 = ashr i32 %63, 8*/
		upzero_preheader1_64 = ($signed(upzero_preheader1_63) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %64 = ashr i32 %63, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_64_reg <= upzero_preheader1_64;
		if (start == 1'b0 && ^(upzero_preheader1_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_64_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
		upzero_preheader1_65 = (upzero_preheader1_60 + upzero_preheader1_64);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_65_reg <= upzero_preheader1_65;
		if (start == 1'b0 && ^(upzero_preheader1_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_65_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
		upzero_preheader_66 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		upzero_preheader_66_reg <= upzero_preheader_66;
		if (start == 1'b0 && ^(upzero_preheader_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_66_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader_67 = upzero_preheader_67_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %67 = mul nsw i32 %66, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_67_reg <= upzero_preheader_67;
		if (start == 1'b0 && ^(upzero_preheader_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_67_reg"); $finish; end
	end
	/* upzero: %.preheader*/
	/*   %67 = mul nsw i32 %66, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_67_reg <= upzero_preheader_67;
		if (start == 1'b0 && ^(upzero_preheader_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_67_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %68 = ashr i32 %67, 8*/
		upzero_preheader_68 = ($signed(upzero_preheader_67) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %68 = ashr i32 %67, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_68_reg <= upzero_preheader_68;
		if (start == 1'b0 && ^(upzero_preheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_68_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %69 = getelementptr inbounds i32* %bli, i32 1*/
		upzero_preheader_69 = (arg_bli + (4 * 32'd1));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %69 = getelementptr inbounds i32* %bli, i32 1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_69_reg <= upzero_preheader_69;
		if (start == 1'b0 && ^(upzero_preheader_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_69_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
		upzero_preheader_70 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		upzero_preheader_70_reg <= upzero_preheader_70;
		if (start == 1'b0 && ^(upzero_preheader_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_70_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader_71 = upzero_preheader_71_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %71 = mul nsw i32 %70, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_71_reg <= upzero_preheader_71;
		if (start == 1'b0 && ^(upzero_preheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_71_reg"); $finish; end
	end
	/* upzero: %.preheader*/
	/*   %71 = mul nsw i32 %70, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_71_reg <= upzero_preheader_71;
		if (start == 1'b0 && ^(upzero_preheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_71_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %72 = ashr i32 %71, 8*/
		upzero_preheader_72 = ($signed(upzero_preheader_71) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %72 = ashr i32 %71, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_72_reg <= upzero_preheader_72;
		if (start == 1'b0 && ^(upzero_preheader_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_72_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %73 = getelementptr inbounds i32* %bli, i32 2*/
		upzero_preheader_73 = (arg_bli + (4 * 32'd2));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %73 = getelementptr inbounds i32* %bli, i32 2*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_73_reg <= upzero_preheader_73;
		if (start == 1'b0 && ^(upzero_preheader_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_73_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
		upzero_preheader_74 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_74_reg <= upzero_preheader_74;
		if (start == 1'b0 && ^(upzero_preheader_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_74_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader_75 = upzero_preheader_75_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %75 = mul nsw i32 %74, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_75_reg <= upzero_preheader_75;
		if (start == 1'b0 && ^(upzero_preheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_75_reg"); $finish; end
	end
	/* upzero: %.preheader*/
	/*   %75 = mul nsw i32 %74, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_75_reg <= upzero_preheader_75;
		if (start == 1'b0 && ^(upzero_preheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_75_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %76 = ashr i32 %75, 8*/
		upzero_preheader_76 = ($signed(upzero_preheader_75) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %76 = ashr i32 %75, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_76_reg <= upzero_preheader_76;
		if (start == 1'b0 && ^(upzero_preheader_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_76_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %77 = getelementptr inbounds i32* %bli, i32 3*/
		upzero_preheader_77 = (arg_bli + (4 * 32'd3));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %77 = getelementptr inbounds i32* %bli, i32 3*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_77_reg <= upzero_preheader_77;
		if (start == 1'b0 && ^(upzero_preheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_77_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
		upzero_preheader_78 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_78_reg <= upzero_preheader_78;
		if (start == 1'b0 && ^(upzero_preheader_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_78_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader_79 = upzero_preheader_79_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %79 = mul nsw i32 %78, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_79_reg <= upzero_preheader_79;
		if (start == 1'b0 && ^(upzero_preheader_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_79_reg"); $finish; end
	end
	/* upzero: %.preheader*/
	/*   %79 = mul nsw i32 %78, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_79_reg <= upzero_preheader_79;
		if (start == 1'b0 && ^(upzero_preheader_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_79_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %80 = ashr i32 %79, 8*/
		upzero_preheader_80 = ($signed(upzero_preheader_79) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %80 = ashr i32 %79, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_80_reg <= upzero_preheader_80;
		if (start == 1'b0 && ^(upzero_preheader_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_80_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %81 = getelementptr inbounds i32* %bli, i32 4*/
		upzero_preheader_81 = (arg_bli + (4 * 32'd4));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %81 = getelementptr inbounds i32* %bli, i32 4*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_81_reg <= upzero_preheader_81;
		if (start == 1'b0 && ^(upzero_preheader_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_81_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
		upzero_preheader_82 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_82_reg <= upzero_preheader_82;
		if (start == 1'b0 && ^(upzero_preheader_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_82_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader_83 = upzero_preheader_83_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %83 = mul nsw i32 %82, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		upzero_preheader_83_reg <= upzero_preheader_83;
		if (start == 1'b0 && ^(upzero_preheader_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_83_reg"); $finish; end
	end
	/* upzero: %.preheader*/
	/*   %83 = mul nsw i32 %82, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		upzero_preheader_83_reg <= upzero_preheader_83;
		if (start == 1'b0 && ^(upzero_preheader_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_83_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %84 = ashr i32 %83, 8*/
		upzero_preheader_84 = ($signed(upzero_preheader_83) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %84 = ashr i32 %83, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		upzero_preheader_84_reg <= upzero_preheader_84;
		if (start == 1'b0 && ^(upzero_preheader_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_84_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %85 = getelementptr inbounds i32* %bli, i32 5*/
		upzero_preheader_85 = (arg_bli + (4 * 32'd5));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %85 = getelementptr inbounds i32* %bli, i32 5*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_85_reg <= upzero_preheader_85;
		if (start == 1'b0 && ^(upzero_preheader_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_85_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
		upzero_preheader_86 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_86_reg <= upzero_preheader_86;
		if (start == 1'b0 && ^(upzero_preheader_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_86_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader_87 = upzero_preheader_87_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %87 = mul nsw i32 %86, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		upzero_preheader_87_reg <= upzero_preheader_87;
		if (start == 1'b0 && ^(upzero_preheader_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_87_reg"); $finish; end
	end
	/* upzero: %.preheader*/
	/*   %87 = mul nsw i32 %86, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		upzero_preheader_87_reg <= upzero_preheader_87;
		if (start == 1'b0 && ^(upzero_preheader_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_87_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %88 = ashr i32 %87, 8*/
		upzero_preheader_88 = ($signed(upzero_preheader_87) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %88 = ashr i32 %87, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		upzero_preheader_88_reg <= upzero_preheader_88;
		if (start == 1'b0 && ^(upzero_preheader_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_88_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre = getelementptr inbounds i32* %dlti, i32 4*/
		upzero_preheader_pre = (arg_dlti + (4 * 32'd4));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %.pre = getelementptr inbounds i32* %dlti, i32 4*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_pre_reg <= upzero_preheader_pre;
		if (start == 1'b0 && ^(upzero_preheader_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre7 = getelementptr inbounds i32* %dlti, i32 5*/
		upzero_preheader_pre7 = (arg_dlti + (4 * 32'd5));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %.pre7 = getelementptr inbounds i32* %dlti, i32 5*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_pre7_reg <= upzero_preheader_pre7;
		if (start == 1'b0 && ^(upzero_preheader_pre7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre7_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre9 = getelementptr inbounds i32* %dlti, i32 3*/
		upzero_preheader_pre9 = (arg_dlti + (4 * 32'd3));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %.pre9 = getelementptr inbounds i32* %dlti, i32 3*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_pre9_reg <= upzero_preheader_pre9;
		if (start == 1'b0 && ^(upzero_preheader_pre9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre9_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre11 = getelementptr inbounds i32* %dlti, i32 2*/
		upzero_preheader_pre11 = (arg_dlti + (4 * 32'd2));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %.pre11 = getelementptr inbounds i32* %dlti, i32 2*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_pre11_reg <= upzero_preheader_pre11;
		if (start == 1'b0 && ^(upzero_preheader_pre11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre11_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre13 = getelementptr inbounds i32* %dlti, i32 1*/
		upzero_preheader_pre13 = (arg_dlti + (4 * 32'd1));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %.pre13 = getelementptr inbounds i32* %dlti, i32 1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_pre13_reg <= upzero_preheader_pre13;
		if (start == 1'b0 && ^(upzero_preheader_pre13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre13_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14 = upzero_preheader1_11_reg;
	end
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi14 = upzero_preheader_pre13_reg;
	end
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_reg <= upzero_89_prephi14;
		if (start == 1'b0 && ^(upzero_89_prephi14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi14_reg"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_reg <= upzero_89_prephi14;
		if (start == 1'b0 && ^(upzero_89_prephi14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi14_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12 = upzero_preheader1_22_reg;
	end
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi12 = upzero_preheader_pre11_reg;
	end
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_reg <= upzero_89_prephi12;
		if (start == 1'b0 && ^(upzero_89_prephi12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi12_reg"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_reg <= upzero_89_prephi12;
		if (start == 1'b0 && ^(upzero_89_prephi12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi12_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10 = upzero_preheader1_33_reg;
	end
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi10 = upzero_preheader_pre9_reg;
	end
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_reg <= upzero_89_prephi10;
		if (start == 1'b0 && ^(upzero_89_prephi10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi10_reg"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_reg <= upzero_89_prephi10;
		if (start == 1'b0 && ^(upzero_89_prephi10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi10_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8 = upzero_preheader1_55_reg;
	end
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi8 = upzero_preheader_pre7_reg;
	end
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_reg <= upzero_89_prephi8;
		if (start == 1'b0 && ^(upzero_89_prephi8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi8_reg"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_reg <= upzero_89_prephi8;
		if (start == 1'b0 && ^(upzero_89_prephi8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi8_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi = upzero_preheader1_44_reg;
	end
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi = upzero_preheader_pre_reg;
	end
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_reg <= upzero_89_prephi;
		if (start == 1'b0 && ^(upzero_89_prephi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi_reg"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_reg <= upzero_89_prephi;
		if (start == 1'b0 && ^(upzero_89_prephi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
		upzero_89_90 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		upzero_89_90_reg <= upzero_89_90;
		if (start == 1'b0 && ^(upzero_89_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_90_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
		upzero_89_91 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		upzero_89_91_reg <= upzero_89_91;
		if (start == 1'b0 && ^(upzero_89_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_91_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
		upzero_89_92 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		upzero_89_92_reg <= upzero_89_92;
		if (start == 1'b0 && ^(upzero_89_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_92_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
		upzero_89_93 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		upzero_89_93_reg <= upzero_89_93;
		if (start == 1'b0 && ^(upzero_89_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_93_reg"); $finish; end
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_3_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %3 = mul nsw i32 %2, %dlt*/
	if ((lpm_mult_upzero_preheader1_3_en == 1'd1)) begin
		upzero_preheader1_3_stage0_reg <= (upzero_preheader1_2 * arg_dlt);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_8_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %8 = mul nsw i32 %7, 255*/
	if ((lpm_mult_upzero_preheader1_8_en == 1'd1)) begin
		upzero_preheader1_8_stage0_reg <= (upzero_preheader1_7 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_13_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %13 = mul nsw i32 %12, %dlt*/
	if ((lpm_mult_upzero_preheader1_13_en == 1'd1)) begin
		upzero_preheader1_13_stage0_reg <= (upzero_preheader1_12 * arg_dlt);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_19_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %19 = mul nsw i32 %18, 255*/
	if ((lpm_mult_upzero_preheader1_19_en == 1'd1)) begin
		upzero_preheader1_19_stage0_reg <= (upzero_preheader1_18 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_24_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %24 = mul nsw i32 %23, %dlt*/
	if ((lpm_mult_upzero_preheader1_24_en == 1'd1)) begin
		upzero_preheader1_24_stage0_reg <= (upzero_preheader1_23 * arg_dlt);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_30_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %30 = mul nsw i32 %29, 255*/
	if ((lpm_mult_upzero_preheader1_30_en == 1'd1)) begin
		upzero_preheader1_30_stage0_reg <= (upzero_preheader1_29 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_35_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %35 = mul nsw i32 %34, %dlt*/
	if ((lpm_mult_upzero_preheader1_35_en == 1'd1)) begin
		upzero_preheader1_35_stage0_reg <= (upzero_preheader1_34 * arg_dlt);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_41_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %41 = mul nsw i32 %40, 255*/
	if ((lpm_mult_upzero_preheader1_41_en == 1'd1)) begin
		upzero_preheader1_41_stage0_reg <= (upzero_preheader1_40 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_46_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %46 = mul nsw i32 %45, %dlt*/
	if ((lpm_mult_upzero_preheader1_46_en == 1'd1)) begin
		upzero_preheader1_46_stage0_reg <= (upzero_preheader1_45 * arg_dlt);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_52_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %52 = mul nsw i32 %51, 255*/
	if ((lpm_mult_upzero_preheader1_52_en == 1'd1)) begin
		upzero_preheader1_52_stage0_reg <= (upzero_preheader1_51 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_57_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %57 = mul nsw i32 %56, %dlt*/
	if ((lpm_mult_upzero_preheader1_57_en == 1'd1)) begin
		upzero_preheader1_57_stage0_reg <= (upzero_preheader1_56 * arg_dlt);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_63_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %63 = mul nsw i32 %62, 255*/
	if ((lpm_mult_upzero_preheader1_63_en == 1'd1)) begin
		upzero_preheader1_63_stage0_reg <= (upzero_preheader1_62 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader_67_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %67 = mul nsw i32 %66, 255*/
	if ((lpm_mult_upzero_preheader_67_en == 1'd1)) begin
		upzero_preheader_67_stage0_reg <= (upzero_preheader_66 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader_71_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %71 = mul nsw i32 %70, 255*/
	if ((lpm_mult_upzero_preheader_71_en == 1'd1)) begin
		upzero_preheader_71_stage0_reg <= (upzero_preheader_70 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader_75_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %75 = mul nsw i32 %74, 255*/
	if ((lpm_mult_upzero_preheader_75_en == 1'd1)) begin
		upzero_preheader_75_stage0_reg <= (upzero_preheader_74 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader_79_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %79 = mul nsw i32 %78, 255*/
	if ((lpm_mult_upzero_preheader_79_en == 1'd1)) begin
		upzero_preheader_79_stage0_reg <= (upzero_preheader_78 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader_83_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %83 = mul nsw i32 %82, 255*/
	if ((lpm_mult_upzero_preheader_83_en == 1'd1)) begin
		upzero_preheader_83_stage0_reg <= (upzero_preheader_82 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader_87_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %87 = mul nsw i32 %86, 255*/
	if ((lpm_mult_upzero_preheader_87_en == 1'd1)) begin
		upzero_preheader_87_stage0_reg <= (upzero_preheader_86 * 32'd255);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* upzero: %89*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_upzero_BB__89_39)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_38)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_address_a = arg_dlti;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_address_a = arg_bli;
	end
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_address_a = upzero_preheader1_11_reg;
	end
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_address_a = upzero_preheader1_22_reg;
	end
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_address_a = upzero_preheader1_33_reg;
	end
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_address_a = upzero_preheader1_44_reg;
	end
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_address_a = upzero_preheader1_55_reg;
	end
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_address_a = arg_bli;
	end
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_address_a = upzero_preheader_73_reg;
	end
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_address_a = upzero_preheader_81_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_address_a = arg_bli;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_address_a = upzero_preheader_73_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_address_a = upzero_preheader_81_reg;
	end
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_address_a = upzero_89_prephi_reg;
	end
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_address_a = upzero_89_prephi12_reg;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_address_a = upzero_89_prephi_reg;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_address_a = upzero_89_prephi14_reg;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_38)) begin
		memory_controller_address_a = arg_dlti;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_38)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_in_a = upzero_preheader1_10;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_in_a = upzero_preheader_68;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_in_a = upzero_preheader_76;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_in_a = upzero_preheader_84;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_in_a = upzero_89_91;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_in_a = upzero_89_93;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_38)) begin
		memory_controller_in_a = arg_dlt;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_38)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_address_b = arg_bli;
	end
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_address_b = upzero_preheader1_17_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		memory_controller_address_b = upzero_preheader1_17_reg;
	end
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_address_b = upzero_preheader1_28_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_address_b = upzero_preheader1_28_reg;
	end
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_address_b = upzero_preheader1_39_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_address_b = upzero_preheader1_39_reg;
	end
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_address_b = upzero_preheader1_50_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		memory_controller_address_b = upzero_preheader1_50_reg;
	end
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_address_b = upzero_preheader1_61_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		memory_controller_address_b = upzero_preheader1_61_reg;
	end
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_address_b = upzero_preheader_69;
	end
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_address_b = upzero_preheader_77_reg;
	end
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_address_b = upzero_preheader_85_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_address_b = upzero_preheader_69_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_address_b = upzero_preheader_77_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_address_b = upzero_preheader_85_reg;
	end
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_address_b = upzero_89_prephi10_reg;
	end
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_address_b = arg_dlti;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_address_b = upzero_89_prephi8_reg;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_address_b = upzero_89_prephi10_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		memory_controller_in_b = upzero_preheader1_21;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_in_b = upzero_preheader1_32;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_in_b = upzero_preheader1_43;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		memory_controller_in_b = upzero_preheader1_54;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		memory_controller_in_b = upzero_preheader1_65;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_in_b = upzero_preheader_72;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_in_b = upzero_preheader_80;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_in_b = upzero_preheader_88;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_in_b = upzero_89_90;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_in_b = upzero_89_92;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__0_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__0_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__0_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__0_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__0_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__0_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__0_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__0_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__0_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__0_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__0_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__0_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__0_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__0_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__0_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__0_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__0_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__0_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__0_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__0_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__0_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__0_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__0_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB__1_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB__2_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB__2_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB__114_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB__117_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB__117_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB__117_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB_preheaderi_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB_preheaderi_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB_preheaderi_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB_preheaderi_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB_preheaderi_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB_preheaderi_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB_preheaderi_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB_preheaderi_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB_preheaderi_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB_preheaderi_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB_preheaderi_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB_preheaderi_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB_preheaderi_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB_preheaderi_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB_preheaderi_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB_preheaderi_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB_preheaderi_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB_preheaderi_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB_preheaderi_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB_preheaderi_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB_preheaderi_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB_preheaderi_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB_preheaderi_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB_preheaderi_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB_preheaderi_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB_preheaderi_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB_preheaderi_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB_preheaderi_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB_preheaderi_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB_preheaderi_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB_preheaderi_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB_preheaderi_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB_preheaderi_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB_preheaderi_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB_preheaderi_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB_preheaderi_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB_preheaderi_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB_preheaderi_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB_preheaderi_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB_preheaderi_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB_preheaderi_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB_preheaderi_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB_preheaderi_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB_preheaderi_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB_preheaderi_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB_preheaderi_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB_preheaderi_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB_preheaderi_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB_preheaderi_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexitpreheader_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB_preheaderpreheader_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB_preheader_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB_preheader_164 = 8'd164;
parameter [7:0] LEGUP_F_main_BB__465_165 = 8'd165;
parameter [7:0] LEGUP_F_main_BB__468_166 = 8'd166;
parameter [7:0] LEGUP_F_main_BB__470_167 = 8'd167;
parameter [7:0] LEGUP_F_main_BB__472_168 = 8'd168;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_74 = 8'd74;
parameter [7:0] LEGUP_function_call_89 = 8'd89;
parameter [7:0] LEGUP_function_call_145 = 8'd145;
parameter [7:0] LEGUP_function_call_154 = 8'd154;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [63:0] main_1_indvar13;
reg [63:0] main_1_indvar13_reg;
reg  main_1_exitcond15;
reg  main_1_exitcond15_reg;
reg [63:0] main_2_3;
reg [63:0] main_2_3_reg;
reg [63:0] main_2_4;
reg [63:0] main_2_4_reg;
reg [31:0] main_2_5;
reg [31:0] main_2_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0_reg;
reg [63:0] main_2_indvarnext14;
reg [63:0] main_2_indvarnext14_reg;
reg [31:0] main_legup_memset_4_i64exit_indvar9;
reg [31:0] main_legup_memset_4_i64exit_indvar9_reg;
reg [31:0] main_legup_memset_4_i64exit_6;
reg [31:0] main_legup_memset_4_i64exit_6_reg;
reg [31:0] main_legup_memset_4_i64exit_7;
reg [31:0] main_legup_memset_4_i64exit_7_reg;
reg [31:0] main_legup_memset_4_i64exit_8;
reg [31:0] main_legup_memset_4_i64exit_8_reg;
reg [31:0] main_legup_memset_4_i64exit_9;
reg [31:0] main_legup_memset_4_i64exit_9_reg;
reg [31:0] main_legup_memset_4_i64exit_10;
reg [31:0] main_legup_memset_4_i64exit_10_reg;
reg [31:0] main_legup_memset_4_i64exit_11;
reg [31:0] main_legup_memset_4_i64exit_11_reg;
reg [31:0] main_legup_memset_4_i64exit_12;
reg [31:0] main_legup_memset_4_i64exit_12_reg;
reg [31:0] main_legup_memset_4_i64exit_13;
reg [31:0] main_legup_memset_4_i64exit_13_reg;
reg [31:0] main_legup_memset_4_i64exit_14;
reg [31:0] main_legup_memset_4_i64exit_14_reg;
reg [31:0] main_legup_memset_4_i64exit_15;
reg [31:0] main_legup_memset_4_i64exit_15_reg;
reg [31:0] main_legup_memset_4_i64exit_16;
reg [31:0] main_legup_memset_4_i64exit_16_reg;
reg [31:0] main_legup_memset_4_i64exit_17;
reg [31:0] main_legup_memset_4_i64exit_17_reg;
reg [31:0] main_legup_memset_4_i64exit_18;
reg [31:0] main_legup_memset_4_i64exit_18_reg;
reg [31:0] main_legup_memset_4_i64exit_19;
reg [31:0] main_legup_memset_4_i64exit_19_reg;
reg [31:0] main_legup_memset_4_i64exit_20;
reg [31:0] main_legup_memset_4_i64exit_20_reg;
reg [31:0] main_legup_memset_4_i64exit_21;
reg [31:0] main_legup_memset_4_i64exit_21_reg;
reg [31:0] main_legup_memset_4_i64exit_22;
reg [31:0] main_legup_memset_4_i64exit_22_reg;
reg [31:0] main_legup_memset_4_i64exit_23;
reg [31:0] main_legup_memset_4_i64exit_23_reg;
reg [31:0] main_legup_memset_4_i64exit_24;
reg [31:0] main_legup_memset_4_i64exit_24_reg;
reg [31:0] main_legup_memset_4_i64exit_25;
reg [31:0] main_legup_memset_4_i64exit_25_reg;
reg [31:0] main_legup_memset_4_i64exit_26;
reg [31:0] main_legup_memset_4_i64exit_26_reg;
reg [31:0] main_legup_memset_4_i64exit_27;
reg [31:0] main_legup_memset_4_i64exit_27_reg;
reg [31:0] main_legup_memset_4_i64exit_28;
reg [31:0] main_legup_memset_4_i64exit_28_reg;
reg [31:0] main_legup_memset_4_i64exit_29;
reg [31:0] main_legup_memset_4_i64exit_29_reg;
reg [31:0] main_legup_memset_4_i64exit_ph20;
reg [31:0] main_legup_memset_4_i64exit_ph20_reg;
reg [31:0] main_legup_memset_4_i64exit_ph10;
reg [31:0] main_legup_memset_4_i64exit_ph10_reg;
reg [31:0] main_legup_memset_4_i64exit_nbh0;
reg [31:0] main_legup_memset_4_i64exit_nbh0_reg;
reg [31:0] main_legup_memset_4_i64exit_deth0;
reg [31:0] main_legup_memset_4_i64exit_deth0_reg;
reg [31:0] main_legup_memset_4_i64exit_ah20;
reg [31:0] main_legup_memset_4_i64exit_ah20_reg;
reg [31:0] main_legup_memset_4_i64exit_rh20;
reg [31:0] main_legup_memset_4_i64exit_rh20_reg;
reg [31:0] main_legup_memset_4_i64exit_ah10;
reg [31:0] main_legup_memset_4_i64exit_ah10_reg;
reg [31:0] main_legup_memset_4_i64exit_rh10;
reg [31:0] main_legup_memset_4_i64exit_rh10_reg;
reg [31:0] main_legup_memset_4_i64exit_plt20;
reg [31:0] main_legup_memset_4_i64exit_plt20_reg;
reg [31:0] main_legup_memset_4_i64exit_plt10;
reg [31:0] main_legup_memset_4_i64exit_plt10_reg;
reg [31:0] main_legup_memset_4_i64exit_nbl0;
reg [31:0] main_legup_memset_4_i64exit_nbl0_reg;
reg [31:0] main_legup_memset_4_i64exit_detl0;
reg [31:0] main_legup_memset_4_i64exit_detl0_reg;
reg [31:0] main_legup_memset_4_i64exit_al20;
reg [31:0] main_legup_memset_4_i64exit_al20_reg;
reg [31:0] main_legup_memset_4_i64exit_rlt20;
reg [31:0] main_legup_memset_4_i64exit_rlt20_reg;
reg [31:0] main_legup_memset_4_i64exit_al10;
reg [31:0] main_legup_memset_4_i64exit_al10_reg;
reg [31:0] main_legup_memset_4_i64exit_rlt10;
reg [31:0] main_legup_memset_4_i64exit_rlt10_reg;
reg [31:0] main_legup_memset_4_i64exit_i02i;
reg [31:0] main_legup_memset_4_i64exit_i02i_reg;
reg [31:0] main_legup_memset_4_i64exit_30;
reg [31:0] main_legup_memset_4_i64exit_30_reg;
reg [31:0] main_legup_memset_4_i64exit_31;
reg [31:0] main_legup_memset_4_i64exit_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep12_reg;
reg [31:0] main_legup_memset_4_i64exit_32;
reg [31:0] main_legup_memset_4_i64exit_32_reg;
reg [31:0] main_legup_memset_4_i64exit_33;
reg [31:0] main_legup_memset_4_i64exit_33_reg;
reg [31:0] main_legup_memset_4_i64exit_34;
reg [31:0] main_legup_memset_4_i64exit_34_reg;
reg [31:0] main_legup_memset_4_i64exit_35;
reg [31:0] main_legup_memset_4_i64exit_35_reg;
reg [31:0] main_legup_memset_4_i64exit_36;
reg [31:0] main_legup_memset_4_i64exit_36_reg;
reg [31:0] main_legup_memset_4_i64exit_37;
reg [31:0] main_legup_memset_4_i64exit_37_reg;
reg [31:0] main_legup_memset_4_i64exit_38;
reg [31:0] main_legup_memset_4_i64exit_38_reg;
reg [31:0] main_legup_memset_4_i64exit_39;
reg [31:0] main_legup_memset_4_i64exit_39_reg;
reg [31:0] main_legup_memset_4_i64exit_40;
reg [31:0] main_legup_memset_4_i64exit_40_reg;
reg [31:0] main_legup_memset_4_i64exit_41;
reg [31:0] main_legup_memset_4_i64exit_41_reg;
reg [31:0] main_legup_memset_4_i64exit_42;
reg [31:0] main_legup_memset_4_i64exit_42_reg;
reg [31:0] main_legup_memset_4_i64exit_43;
reg [31:0] main_legup_memset_4_i64exit_43_reg;
reg [31:0] main_legup_memset_4_i64exit_44;
reg [31:0] main_legup_memset_4_i64exit_44_reg;
reg [31:0] main_legup_memset_4_i64exit_45;
reg [31:0] main_legup_memset_4_i64exit_45_reg;
reg [31:0] main_legup_memset_4_i64exit_46;
reg [31:0] main_legup_memset_4_i64exit_46_reg;
reg [31:0] main_legup_memset_4_i64exit_47;
reg [31:0] main_legup_memset_4_i64exit_47_reg;
reg [31:0] main_legup_memset_4_i64exit_48;
reg [31:0] main_legup_memset_4_i64exit_48_reg;
reg [31:0] main_legup_memset_4_i64exit_49;
reg [31:0] main_legup_memset_4_i64exit_49_reg;
reg [31:0] main_legup_memset_4_i64exit_50;
reg [31:0] main_legup_memset_4_i64exit_50_reg;
reg [31:0] main_legup_memset_4_i64exit_51;
reg [31:0] main_legup_memset_4_i64exit_51_reg;
reg [31:0] main_legup_memset_4_i64exit_52;
reg [31:0] main_legup_memset_4_i64exit_52_reg;
reg [31:0] main_legup_memset_4_i64exit_53;
reg [31:0] main_legup_memset_4_i64exit_53_reg;
reg [31:0] main_legup_memset_4_i64exit_54;
reg [31:0] main_legup_memset_4_i64exit_54_reg;
reg [31:0] main_legup_memset_4_i64exit_55;
reg [31:0] main_legup_memset_4_i64exit_55_reg;
reg [31:0] main_legup_memset_4_i64exit_56;
reg [31:0] main_legup_memset_4_i64exit_56_reg;
reg [31:0] main_legup_memset_4_i64exit_57;
reg [31:0] main_legup_memset_4_i64exit_57_reg;
reg [31:0] main_legup_memset_4_i64exit_58;
reg [31:0] main_legup_memset_4_i64exit_58_reg;
reg [31:0] main_legup_memset_4_i64exit_59;
reg [31:0] main_legup_memset_4_i64exit_59_reg;
reg [31:0] main_legup_memset_4_i64exit_60;
reg [31:0] main_legup_memset_4_i64exit_60_reg;
reg [31:0] main_legup_memset_4_i64exit_61;
reg [31:0] main_legup_memset_4_i64exit_61_reg;
reg [31:0] main_legup_memset_4_i64exit_62;
reg [31:0] main_legup_memset_4_i64exit_62_reg;
reg [31:0] main_legup_memset_4_i64exit_63;
reg [31:0] main_legup_memset_4_i64exit_63_reg;
reg [31:0] main_legup_memset_4_i64exit_64;
reg [31:0] main_legup_memset_4_i64exit_64_reg;
reg [31:0] main_legup_memset_4_i64exit_65;
reg [31:0] main_legup_memset_4_i64exit_65_reg;
reg [31:0] main_legup_memset_4_i64exit_66;
reg [31:0] main_legup_memset_4_i64exit_66_reg;
reg [31:0] main_legup_memset_4_i64exit_67;
reg [31:0] main_legup_memset_4_i64exit_67_reg;
reg [31:0] main_legup_memset_4_i64exit_68;
reg [31:0] main_legup_memset_4_i64exit_68_reg;
reg [31:0] main_legup_memset_4_i64exit_69;
reg [31:0] main_legup_memset_4_i64exit_69_reg;
reg [31:0] main_legup_memset_4_i64exit_70;
reg [31:0] main_legup_memset_4_i64exit_70_reg;
reg [31:0] main_legup_memset_4_i64exit_71;
reg [31:0] main_legup_memset_4_i64exit_71_reg;
reg [31:0] main_legup_memset_4_i64exit_72;
reg [31:0] main_legup_memset_4_i64exit_72_reg;
reg [31:0] main_legup_memset_4_i64exit_73;
reg [31:0] main_legup_memset_4_i64exit_73_reg;
reg [31:0] main_legup_memset_4_i64exit_74;
reg [31:0] main_legup_memset_4_i64exit_74_reg;
reg [31:0] main_legup_memset_4_i64exit_75;
reg [31:0] main_legup_memset_4_i64exit_75_reg;
reg [31:0] main_legup_memset_4_i64exit_76;
reg [31:0] main_legup_memset_4_i64exit_76_reg;
reg [31:0] main_legup_memset_4_i64exit_77;
reg [31:0] main_legup_memset_4_i64exit_77_reg;
reg [31:0] main_legup_memset_4_i64exit_78;
reg [31:0] main_legup_memset_4_i64exit_78_reg;
reg [31:0] main_legup_memset_4_i64exit_79;
reg [31:0] main_legup_memset_4_i64exit_79_reg;
reg [31:0] main_legup_memset_4_i64exit_80;
reg [31:0] main_legup_memset_4_i64exit_80_reg;
reg [31:0] main_legup_memset_4_i64exit_81;
reg [31:0] main_legup_memset_4_i64exit_81_reg;
reg [31:0] main_legup_memset_4_i64exit_82;
reg [31:0] main_legup_memset_4_i64exit_82_reg;
reg [31:0] main_legup_memset_4_i64exit_83;
reg [31:0] main_legup_memset_4_i64exit_83_reg;
reg [31:0] main_legup_memset_4_i64exit_84;
reg [31:0] main_legup_memset_4_i64exit_84_reg;
reg [31:0] main_legup_memset_4_i64exit_85;
reg [31:0] main_legup_memset_4_i64exit_85_reg;
reg [31:0] main_legup_memset_4_i64exit_86;
reg [31:0] main_legup_memset_4_i64exit_86_reg;
reg [31:0] main_legup_memset_4_i64exit_87;
reg [31:0] main_legup_memset_4_i64exit_87_reg;
reg [31:0] main_legup_memset_4_i64exit_88;
reg [31:0] main_legup_memset_4_i64exit_88_reg;
reg [31:0] main_legup_memset_4_i64exit_89;
reg [31:0] main_legup_memset_4_i64exit_89_reg;
reg [31:0] main_legup_memset_4_i64exit_90;
reg [31:0] main_legup_memset_4_i64exit_90_reg;
reg [31:0] main_legup_memset_4_i64exit_91;
reg [31:0] main_legup_memset_4_i64exit_91_reg;
reg [31:0] main_legup_memset_4_i64exit_92;
reg [31:0] main_legup_memset_4_i64exit_92_reg;
reg [31:0] main_legup_memset_4_i64exit_93;
reg [31:0] main_legup_memset_4_i64exit_93_reg;
reg [31:0] main_legup_memset_4_i64exit_94;
reg [31:0] main_legup_memset_4_i64exit_94_reg;
reg [31:0] main_legup_memset_4_i64exit_95;
reg [31:0] main_legup_memset_4_i64exit_95_reg;
reg [31:0] main_legup_memset_4_i64exit_96;
reg [31:0] main_legup_memset_4_i64exit_96_reg;
reg [31:0] main_legup_memset_4_i64exit_97;
reg [31:0] main_legup_memset_4_i64exit_97_reg;
reg [31:0] main_legup_memset_4_i64exit_98;
reg [31:0] main_legup_memset_4_i64exit_98_reg;
reg [31:0] main_legup_memset_4_i64exit_99;
reg [31:0] main_legup_memset_4_i64exit_99_reg;
reg [31:0] main_legup_memset_4_i64exit_100;
reg [31:0] main_legup_memset_4_i64exit_100_reg;
reg [31:0] main_legup_memset_4_i64exit_101;
reg [31:0] main_legup_memset_4_i64exit_101_reg;
reg [31:0] main_legup_memset_4_i64exit_102;
reg [31:0] main_legup_memset_4_i64exit_102_reg;
reg [31:0] main_legup_memset_4_i64exit_103;
reg [31:0] main_legup_memset_4_i64exit_103_reg;
reg [31:0] main_legup_memset_4_i64exit_104;
reg [31:0] main_legup_memset_4_i64exit_104_reg;
reg [31:0] main_legup_memset_4_i64exit_105;
reg [31:0] main_legup_memset_4_i64exit_105_reg;
reg [31:0] main_legup_memset_4_i64exit_106;
reg [31:0] main_legup_memset_4_i64exit_106_reg;
reg [31:0] main_legup_memset_4_i64exit_107;
reg [31:0] main_legup_memset_4_i64exit_107_reg;
reg [31:0] main_legup_memset_4_i64exit_108;
reg [31:0] main_legup_memset_4_i64exit_108_reg;
reg [31:0] main_legup_memset_4_i64exit_tmpii1;
reg [31:0] main_legup_memset_4_i64exit_tmpii1_reg;
reg [31:0] main_legup_memset_4_i64exit_tmp1ii2;
reg [31:0] main_legup_memset_4_i64exit_tmp1ii2_reg;
reg [31:0] main_legup_memset_4_i64exit_109;
reg [31:0] main_legup_memset_4_i64exit_109_reg;
reg [31:0] main_legup_memset_4_i64exit_110;
reg [31:0] main_legup_memset_4_i64exit_110_reg;
reg [31:0] main_legup_memset_4_i64exit_111;
reg [31:0] main_legup_memset_4_i64exit_111_reg;
reg  main_legup_memset_4_i64exit_112;
reg  main_legup_memset_4_i64exit_112_reg;
reg [31:0] main_legup_memset_4_i64exit_113;
reg [31:0] main_legup_memset_4_i64exit_113_reg;
reg [31:0] main_legup_memset_4_i64exit_m0iii;
reg [31:0] main_legup_memset_4_i64exit_m0iii_reg;
reg [31:0] main_114_115;
reg [31:0] main_114_115_reg;
reg  main_114_116;
reg  main_114_116_reg;
reg [31:0] main_117_118;
reg [31:0] main_117_118_reg;
reg [31:0] main_117_119;
reg [31:0] main_117_119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_117_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_117_scevgep8_reg;
reg [31:0] main_117_120;
reg [31:0] main_117_120_reg;
reg [31:0] main_117_121;
reg [31:0] main_117_121_reg;
reg [31:0] main_117_122;
reg [31:0] main_117_122_reg;
reg  main_117_123;
reg  main_117_123_reg;
reg [31:0] main_quantlexiti_mil0lcssaii;
reg [31:0] main_quantlexiti_mil0lcssaii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_quant26bt_posquant26bt_negii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_quant26bt_posquant26bt_negii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_ril0inii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_ril0inii_reg;
reg [31:0] main_quantlexiti_ril0ii;
reg [31:0] main_quantlexiti_ril0ii_reg;
reg [31:0] main_quantlexiti_124;
reg [31:0] main_quantlexiti_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_125_reg;
reg [31:0] main_quantlexiti_126;
reg [31:0] main_quantlexiti_126_reg;
reg [31:0] main_quantlexiti_127;
reg [31:0] main_quantlexiti_127_reg;
reg [31:0] main_quantlexiti_128;
reg [31:0] main_quantlexiti_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_129_reg;
reg [31:0] main_quantlexiti_130;
reg [31:0] main_quantlexiti_130_reg;
reg [31:0] main_quantlexiti_131;
reg [31:0] main_quantlexiti_131_reg;
reg  main_quantlexiti_132;
reg  main_quantlexiti_132_reg;
reg [31:0] main_quantlexiti_i12i3;
reg [31:0] main_quantlexiti_i12i3_reg;
reg  main_quantlexiti_133;
reg  main_quantlexiti_133_reg;
reg [31:0] main_quantlexiti_i13i4;
reg [31:0] main_quantlexiti_i13i4_reg;
reg [31:0] main_quantlexiti_134;
reg [31:0] main_quantlexiti_134_reg;
reg [31:0] main_quantlexiti_135;
reg [31:0] main_quantlexiti_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_136_reg;
reg [31:0] main_quantlexiti_137;
reg [31:0] main_quantlexiti_137_reg;
reg [31:0] main_quantlexiti_138;
reg [31:0] main_quantlexiti_138_reg;
reg [31:0] main_quantlexiti_139;
reg [31:0] main_quantlexiti_139_reg;
reg [31:0] main_quantlexiti_140;
reg [31:0] main_quantlexiti_140_reg;
reg  main_quantlexiti_141;
reg  main_quantlexiti_141_reg;
reg [31:0] main_quantlexiti_142;
reg [31:0] main_quantlexiti_142_reg;
reg [31:0] main_quantlexiti_1i8i5;
reg [31:0] main_quantlexiti_1i8i5_reg;
reg [31:0] main_quantlexiti_143;
reg [31:0] main_quantlexiti_143_reg;
reg [31:0] main_quantlexiti_144;
reg [31:0] main_quantlexiti_144_reg;
reg [31:0] main_quantlexiti_145;
reg [31:0] main_quantlexiti_145_reg;
reg [31:0] main_quantlexiti_146;
reg [31:0] main_quantlexiti_146_reg;
reg [31:0] main_quantlexiti_147;
reg [31:0] main_quantlexiti_147_reg;
reg [31:0] main_quantlexiti_148;
reg [31:0] main_quantlexiti_148_reg;
reg [31:0] main_quantlexiti_149;
reg [31:0] main_quantlexiti_149_reg;
reg [31:0] main_quantlexiti_wd40i9i6;
reg [31:0] main_quantlexiti_wd40i9i6_reg;
reg [31:0] main_quantlexiti_150;
reg [31:0] main_quantlexiti_150_reg;
reg  main_quantlexiti_151;
reg  main_quantlexiti_151_reg;
reg [31:0] main_quantlexiti_i10i7;
reg [31:0] main_quantlexiti_i10i7_reg;
reg  main_quantlexiti_152;
reg  main_quantlexiti_152_reg;
reg [31:0] main_quantlexiti_i11i8;
reg [31:0] main_quantlexiti_i11i8_reg;
reg [31:0] main_quantlexiti_153;
reg [31:0] main_quantlexiti_153_reg;
reg [31:0] main_quantlexiti_154;
reg [31:0] main_quantlexiti_154_reg;
reg [31:0] main_quantlexiti_155;
reg [31:0] main_quantlexiti_155_reg;
reg [31:0] main_quantlexiti_156;
reg [31:0] main_quantlexiti_156_reg;
reg [31:0] main_quantlexiti_157;
reg [31:0] main_quantlexiti_157_reg;
reg [31:0] main_quantlexiti_apl10i5i9;
reg [31:0] main_quantlexiti_apl10i5i9_reg;
reg [31:0] main_quantlexiti_158;
reg [31:0] main_quantlexiti_158_reg;
reg  main_quantlexiti_159;
reg  main_quantlexiti_159_reg;
reg [31:0] main_quantlexiti_apl10i6i10;
reg [31:0] main_quantlexiti_apl10i6i10_reg;
reg [31:0] main_quantlexiti_160;
reg [31:0] main_quantlexiti_160_reg;
reg [31:0] main_quantlexiti_161;
reg [31:0] main_quantlexiti_161_reg;
reg [31:0] main_quantlexiti_162;
reg [31:0] main_quantlexiti_162_reg;
reg [31:0] main_quantlexiti_163;
reg [31:0] main_quantlexiti_163_reg;
reg [31:0] main_quantlexiti_164;
reg [31:0] main_quantlexiti_164_reg;
reg [31:0] main_quantlexiti_165;
reg [31:0] main_quantlexiti_165_reg;
reg [31:0] main_quantlexiti_166;
reg [31:0] main_quantlexiti_166_reg;
reg [31:0] main_quantlexiti_167;
reg [31:0] main_quantlexiti_167_reg;
reg [31:0] main_quantlexiti_168;
reg [31:0] main_quantlexiti_168_reg;
reg [31:0] main_quantlexiti_169;
reg [31:0] main_quantlexiti_169_reg;
reg [31:0] main_quantlexiti_170;
reg [31:0] main_quantlexiti_170_reg;
reg [31:0] main_quantlexiti_171;
reg [31:0] main_quantlexiti_171_reg;
reg [31:0] main_quantlexiti_172;
reg [31:0] main_quantlexiti_172_reg;
reg [31:0] main_quantlexiti_173;
reg [31:0] main_quantlexiti_173_reg;
reg [31:0] main_quantlexiti_174;
reg [31:0] main_quantlexiti_174_reg;
reg [31:0] main_quantlexiti_175;
reg [31:0] main_quantlexiti_175_reg;
reg [31:0] main_quantlexiti_176;
reg [31:0] main_quantlexiti_176_reg;
reg [31:0] main_quantlexiti_177;
reg [31:0] main_quantlexiti_177_reg;
reg [31:0] main_quantlexiti_178;
reg [31:0] main_quantlexiti_178_reg;
reg [31:0] main_quantlexiti_179;
reg [31:0] main_quantlexiti_179_reg;
reg [31:0] main_quantlexiti_180;
reg [31:0] main_quantlexiti_180_reg;
reg [31:0] main_quantlexiti_181;
reg [31:0] main_quantlexiti_181_reg;
reg [31:0] main_quantlexiti_182;
reg [31:0] main_quantlexiti_182_reg;
reg [31:0] main_quantlexiti_183;
reg [31:0] main_quantlexiti_183_reg;
reg [31:0] main_quantlexiti_184;
reg [31:0] main_quantlexiti_184_reg;
reg [31:0] main_quantlexiti_185;
reg [31:0] main_quantlexiti_185_reg;
reg [31:0] main_quantlexiti_186;
reg [31:0] main_quantlexiti_186_reg;
reg [31:0] main_quantlexiti_tmpi3i12;
reg [31:0] main_quantlexiti_tmpi3i12_reg;
reg [31:0] main_quantlexiti_tmp1i4i13;
reg [31:0] main_quantlexiti_tmp1i4i13_reg;
reg [31:0] main_quantlexiti_187;
reg [31:0] main_quantlexiti_187_reg;
reg [31:0] main_quantlexiti_188;
reg [31:0] main_quantlexiti_188_reg;
reg [31:0] main_quantlexiti_189;
reg [31:0] main_quantlexiti_189_reg;
reg [31:0] main_quantlexiti_190;
reg [31:0] main_quantlexiti_190_reg;
reg [31:0] main_quantlexiti_191;
reg [31:0] main_quantlexiti_191_reg;
reg [31:0] main_quantlexiti_192;
reg [31:0] main_quantlexiti_192_reg;
reg [31:0] main_quantlexiti_193;
reg [31:0] main_quantlexiti_193_reg;
reg  main_quantlexiti_194;
reg  main_quantlexiti_194_reg;
reg [31:0] main_quantlexiti_195;
reg [31:0] main_quantlexiti_195_reg;
reg [31:0] main_quantlexiti_m0ii;
reg [31:0] main_quantlexiti_m0ii_reg;
reg  main_quantlexiti_196;
reg  main_quantlexiti_196_reg;
reg [31:0] main_quantlexiti_v;
reg [31:0] main_quantlexiti_v_reg;
reg [31:0] main_quantlexiti_;
reg [31:0] main_quantlexiti__reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_197;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_197_reg;
reg [31:0] main_quantlexiti_198;
reg [31:0] main_quantlexiti_198_reg;
reg [31:0] main_quantlexiti_199;
reg [31:0] main_quantlexiti_199_reg;
reg [31:0] main_quantlexiti_200;
reg [31:0] main_quantlexiti_200_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_201;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_201_reg;
reg [31:0] main_quantlexiti_202;
reg [31:0] main_quantlexiti_202_reg;
reg [31:0] main_quantlexiti_203;
reg [31:0] main_quantlexiti_203_reg;
reg  main_quantlexiti_204;
reg  main_quantlexiti_204_reg;
reg [31:0] main_quantlexiti_i1i14;
reg [31:0] main_quantlexiti_i1i14_reg;
reg  main_quantlexiti_205;
reg  main_quantlexiti_205_reg;
reg [31:0] main_quantlexiti_i2i15;
reg [31:0] main_quantlexiti_i2i15_reg;
reg [31:0] main_quantlexiti_206;
reg [31:0] main_quantlexiti_206_reg;
reg [31:0] main_quantlexiti_207;
reg [31:0] main_quantlexiti_207_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_208;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_208_reg;
reg [31:0] main_quantlexiti_209;
reg [31:0] main_quantlexiti_209_reg;
reg [31:0] main_quantlexiti_210;
reg [31:0] main_quantlexiti_210_reg;
reg [31:0] main_quantlexiti_211;
reg [31:0] main_quantlexiti_211_reg;
reg [31:0] main_quantlexiti_212;
reg [31:0] main_quantlexiti_212_reg;
reg  main_quantlexiti_213;
reg  main_quantlexiti_213_reg;
reg [31:0] main_quantlexiti_214;
reg [31:0] main_quantlexiti_214_reg;
reg [31:0] main_quantlexiti_1ii16;
reg [31:0] main_quantlexiti_1ii16_reg;
reg [31:0] main_quantlexiti_215;
reg [31:0] main_quantlexiti_215_reg;
reg [31:0] main_quantlexiti_216;
reg [31:0] main_quantlexiti_216_reg;
reg [31:0] main_quantlexiti_217;
reg [31:0] main_quantlexiti_217_reg;
reg [31:0] main_quantlexiti_218;
reg [31:0] main_quantlexiti_218_reg;
reg [31:0] main_quantlexiti_219;
reg [31:0] main_quantlexiti_219_reg;
reg [31:0] main_quantlexiti_220;
reg [31:0] main_quantlexiti_220_reg;
reg [31:0] main_quantlexiti_221;
reg [31:0] main_quantlexiti_221_reg;
reg [31:0] main_quantlexiti_wd40ii17;
reg [31:0] main_quantlexiti_wd40ii17_reg;
reg [31:0] main_quantlexiti_222;
reg [31:0] main_quantlexiti_222_reg;
reg  main_quantlexiti_223;
reg  main_quantlexiti_223_reg;
reg [31:0] main_quantlexiti_ii18;
reg [31:0] main_quantlexiti_ii18_reg;
reg  main_quantlexiti_224;
reg  main_quantlexiti_224_reg;
reg [31:0] main_quantlexiti_ii19;
reg [31:0] main_quantlexiti_ii19_reg;
reg [31:0] main_quantlexiti_225;
reg [31:0] main_quantlexiti_225_reg;
reg [31:0] main_quantlexiti_226;
reg [31:0] main_quantlexiti_226_reg;
reg [31:0] main_quantlexiti_227;
reg [31:0] main_quantlexiti_227_reg;
reg [31:0] main_quantlexiti_228;
reg [31:0] main_quantlexiti_228_reg;
reg [31:0] main_quantlexiti_229;
reg [31:0] main_quantlexiti_229_reg;
reg [31:0] main_quantlexiti_apl10ii20;
reg [31:0] main_quantlexiti_apl10ii20_reg;
reg [31:0] main_quantlexiti_230;
reg [31:0] main_quantlexiti_230_reg;
reg  main_quantlexiti_231;
reg  main_quantlexiti_231_reg;
reg [31:0] main_quantlexiti_apl10ii21;
reg [31:0] main_quantlexiti_apl10ii21_reg;
reg [31:0] main_quantlexiti_232;
reg [31:0] main_quantlexiti_232_reg;
reg [31:0] main_quantlexiti_233;
reg [31:0] main_quantlexiti_233_reg;
reg [31:0] main_quantlexiti_234;
reg [31:0] main_quantlexiti_234_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_235;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_235_reg;
reg  main_quantlexiti_236;
reg  main_quantlexiti_236_reg;
reg [31:0] main_encodeexit_crit_edge_237;
reg [31:0] main_encodeexit_crit_edge_237_reg;
reg  main_encodeexit_crit_edge_238;
reg  main_encodeexit_crit_edge_238_reg;
reg [31:0] main_encodeexit_crit_edge_apl12ii22;
reg [31:0] main_encodeexit_crit_edge_apl12ii22_reg;
reg [31:0] main_encodeexit_crit_edge_239;
reg [31:0] main_encodeexit_crit_edge_239_reg;
reg [31:0] main_encodeexit_crit_edge_240;
reg [31:0] main_encodeexit_crit_edge_240_reg;
reg [31:0] main_encodeexit_crit_edge_241;
reg [31:0] main_encodeexit_crit_edge_241_reg;
reg [31:0] main_encodeexit_crit_edge_242;
reg [31:0] main_encodeexit_crit_edge_242_reg;
reg [31:0] main_encodeexit_crit_edge_243;
reg [31:0] main_encodeexit_crit_edge_243_reg;
reg  main_encodeexit_crit_edge_244;
reg  main_encodeexit_crit_edge_244_reg;
reg [31:0] main_encodeexit_crit_edge_apl12i7i11;
reg [31:0] main_encodeexit_crit_edge_apl12i7i11_reg;
reg [31:0] main_encodeexit_crit_edge_245;
reg [31:0] main_encodeexit_crit_edge_245_reg;
reg [31:0] main_encodeexit_crit_edge_246;
reg [31:0] main_encodeexit_crit_edge_246_reg;
reg [31:0] main_encodeexit_crit_edge_247;
reg [31:0] main_encodeexit_crit_edge_247_reg;
reg [31:0] main_encodeexit_crit_edge_248;
reg [31:0] main_encodeexit_crit_edge_248_reg;
reg [31:0] main_encodeexit_crit_edge_pre;
reg [31:0] main_encodeexit_crit_edge_pre_reg;
reg [31:0] main_encodeexit_crit_edge_pre37;
reg [31:0] main_encodeexit_crit_edge_pre37_reg;
reg [31:0] main_encodeexit_crit_edge_pre38;
reg [31:0] main_encodeexit_crit_edge_pre38_reg;
reg [31:0] main_encodeexit_crit_edge_pre39;
reg [31:0] main_encodeexit_crit_edge_pre39_reg;
reg [31:0] main_encodeexit_crit_edge_pre40;
reg [31:0] main_encodeexit_crit_edge_pre40_reg;
reg [31:0] main_encodeexit_crit_edge_pre41;
reg [31:0] main_encodeexit_crit_edge_pre41_reg;
reg [31:0] main_encodeexit_crit_edge_pre42;
reg [31:0] main_encodeexit_crit_edge_pre42_reg;
reg [31:0] main_encodeexit_crit_edge_pre43;
reg [31:0] main_encodeexit_crit_edge_pre43_reg;
reg [31:0] main_encodeexit_crit_edge_pre44;
reg [31:0] main_encodeexit_crit_edge_pre44_reg;
reg [31:0] main_encodeexit_crit_edge_pre45;
reg [31:0] main_encodeexit_crit_edge_pre45_reg;
reg [31:0] main_encodeexit_crit_edge_pre46;
reg [31:0] main_encodeexit_crit_edge_pre46_reg;
reg [31:0] main_encodeexit_crit_edge_pre47;
reg [31:0] main_encodeexit_crit_edge_pre47_reg;
reg [31:0] main_encodeexit_crit_edge_pre48;
reg [31:0] main_encodeexit_crit_edge_pre48_reg;
reg [31:0] main_encodeexit_crit_edge_pre49;
reg [31:0] main_encodeexit_crit_edge_pre49_reg;
reg [31:0] main_encodeexit_crit_edge_pre50;
reg [31:0] main_encodeexit_crit_edge_pre50_reg;
reg [31:0] main_encodeexit_crit_edge_pre51;
reg [31:0] main_encodeexit_crit_edge_pre51_reg;
reg [31:0] main_encodeexit_crit_edge_pre52;
reg [31:0] main_encodeexit_crit_edge_pre52_reg;
reg [31:0] main_encodeexit_crit_edge_pre53;
reg [31:0] main_encodeexit_crit_edge_pre53_reg;
reg [31:0] main_encodeexit_crit_edge_pre54;
reg [31:0] main_encodeexit_crit_edge_pre54_reg;
reg [31:0] main_encodeexit_crit_edge_pre55;
reg [31:0] main_encodeexit_crit_edge_pre55_reg;
reg [31:0] main_encodeexit_crit_edge_pre56;
reg [31:0] main_encodeexit_crit_edge_pre56_reg;
reg [31:0] main_encodeexit_crit_edge_pre57;
reg [31:0] main_encodeexit_crit_edge_pre57_reg;
reg [31:0] main_encodeexit_crit_edge_pre58;
reg [31:0] main_encodeexit_crit_edge_pre58_reg;
reg [31:0] main_encodeexit_crit_edge_pre59;
reg [31:0] main_encodeexit_crit_edge_pre59_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp;
reg [31:0] main_encodeexit_crit_edge_phitmp_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp1;
reg [31:0] main_encodeexit_crit_edge_phitmp1_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp2;
reg [31:0] main_encodeexit_crit_edge_phitmp2_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp3;
reg [31:0] main_encodeexit_crit_edge_phitmp3_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp4;
reg [31:0] main_encodeexit_crit_edge_phitmp4_reg;
reg [31:0] main_encodeexit_crit_edge_phitmp5;
reg [31:0] main_encodeexit_crit_edge_phitmp5_reg;
reg [31:0] main_encodeexit_crit_edge_indvarnext10;
reg [31:0] main_encodeexit_crit_edge_indvarnext10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderipreheader_249;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderipreheader_249_reg;
reg [31:0] main_preheaderipreheader_250;
reg [31:0] main_preheaderipreheader_250_reg;
reg [31:0] main_preheaderi_indvar;
reg [31:0] main_preheaderi_indvar_reg;
reg [31:0] main_preheaderi_accumd100;
reg [31:0] main_preheaderi_accumd100_reg;
reg [31:0] main_preheaderi_accumd90;
reg [31:0] main_preheaderi_accumd90_reg;
reg [31:0] main_preheaderi_accumd80;
reg [31:0] main_preheaderi_accumd80_reg;
reg [31:0] main_preheaderi_accumd70;
reg [31:0] main_preheaderi_accumd70_reg;
reg [31:0] main_preheaderi_accumd60;
reg [31:0] main_preheaderi_accumd60_reg;
reg [31:0] main_preheaderi_accumd50;
reg [31:0] main_preheaderi_accumd50_reg;
reg [31:0] main_preheaderi_accumd40;
reg [31:0] main_preheaderi_accumd40_reg;
reg [31:0] main_preheaderi_accumd30;
reg [31:0] main_preheaderi_accumd30_reg;
reg [31:0] main_preheaderi_accumd20;
reg [31:0] main_preheaderi_accumd20_reg;
reg [31:0] main_preheaderi_accumd10;
reg [31:0] main_preheaderi_accumd10_reg;
reg [31:0] main_preheaderi_accumd00;
reg [31:0] main_preheaderi_accumd00_reg;
reg [31:0] main_preheaderi_accumc100;
reg [31:0] main_preheaderi_accumc100_reg;
reg [31:0] main_preheaderi_accumc90;
reg [31:0] main_preheaderi_accumc90_reg;
reg [31:0] main_preheaderi_accumc80;
reg [31:0] main_preheaderi_accumc80_reg;
reg [31:0] main_preheaderi_accumc70;
reg [31:0] main_preheaderi_accumc70_reg;
reg [31:0] main_preheaderi_accumc60;
reg [31:0] main_preheaderi_accumc60_reg;
reg [31:0] main_preheaderi_accumc50;
reg [31:0] main_preheaderi_accumc50_reg;
reg [31:0] main_preheaderi_accumc40;
reg [31:0] main_preheaderi_accumc40_reg;
reg [31:0] main_preheaderi_accumc30;
reg [31:0] main_preheaderi_accumc30_reg;
reg [31:0] main_preheaderi_accumc20;
reg [31:0] main_preheaderi_accumc20_reg;
reg [31:0] main_preheaderi_accumc10;
reg [31:0] main_preheaderi_accumc10_reg;
reg [31:0] main_preheaderi_accumc00;
reg [31:0] main_preheaderi_accumc00_reg;
reg [31:0] main_preheaderi_dec_ph20;
reg [31:0] main_preheaderi_dec_ph20_reg;
reg [31:0] main_preheaderi_dec_ph10;
reg [31:0] main_preheaderi_dec_ph10_reg;
reg [31:0] main_preheaderi_dec_nbh0;
reg [31:0] main_preheaderi_dec_nbh0_reg;
reg [31:0] main_preheaderi_dec_deth0;
reg [31:0] main_preheaderi_dec_deth0_reg;
reg [31:0] main_preheaderi_dec_ah20;
reg [31:0] main_preheaderi_dec_ah20_reg;
reg [31:0] main_preheaderi_dec_rh20;
reg [31:0] main_preheaderi_dec_rh20_reg;
reg [31:0] main_preheaderi_dec_ah10;
reg [31:0] main_preheaderi_dec_ah10_reg;
reg [31:0] main_preheaderi_dec_rh10;
reg [31:0] main_preheaderi_dec_rh10_reg;
reg [31:0] main_preheaderi_dec_plt20;
reg [31:0] main_preheaderi_dec_plt20_reg;
reg [31:0] main_preheaderi_dec_plt10;
reg [31:0] main_preheaderi_dec_plt10_reg;
reg [31:0] main_preheaderi_dec_nbl0;
reg [31:0] main_preheaderi_dec_nbl0_reg;
reg [31:0] main_preheaderi_dec_detl0;
reg [31:0] main_preheaderi_dec_detl0_reg;
reg [31:0] main_preheaderi_dec_al20;
reg [31:0] main_preheaderi_dec_al20_reg;
reg [31:0] main_preheaderi_dec_rlt20;
reg [31:0] main_preheaderi_dec_rlt20_reg;
reg [31:0] main_preheaderi_dec_al10;
reg [31:0] main_preheaderi_dec_al10_reg;
reg [31:0] main_preheaderi_dec_rlt10;
reg [31:0] main_preheaderi_dec_rlt10_reg;
reg [31:0] main_preheaderi_i11i;
reg [31:0] main_preheaderi_i11i_reg;
reg [31:0] main_preheaderi_251;
reg [31:0] main_preheaderi_251_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep7_reg;
reg [31:0] main_preheaderi_252;
reg [31:0] main_preheaderi_252_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_253;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_253_reg;
reg [31:0] main_preheaderi_254;
reg [31:0] main_preheaderi_254_reg;
reg [31:0] main_preheaderi_255;
reg [31:0] main_preheaderi_255_reg;
reg [31:0] main_preheaderi_256;
reg [31:0] main_preheaderi_256_reg;
reg [31:0] main_preheaderi_257;
reg [31:0] main_preheaderi_257_reg;
reg [31:0] main_preheaderi_258;
reg [31:0] main_preheaderi_258_reg;
reg [31:0] main_preheaderi_259;
reg [31:0] main_preheaderi_259_reg;
reg [31:0] main_preheaderi_260;
reg [31:0] main_preheaderi_260_reg;
reg [31:0] main_preheaderi_261;
reg [31:0] main_preheaderi_261_reg;
reg [31:0] main_preheaderi_262;
reg [31:0] main_preheaderi_262_reg;
reg [31:0] main_preheaderi_263;
reg [31:0] main_preheaderi_263_reg;
reg [31:0] main_preheaderi_264;
reg [31:0] main_preheaderi_264_reg;
reg [31:0] main_preheaderi_265;
reg [31:0] main_preheaderi_265_reg;
reg [31:0] main_preheaderi_266;
reg [31:0] main_preheaderi_266_reg;
reg [31:0] main_preheaderi_267;
reg [31:0] main_preheaderi_267_reg;
reg [31:0] main_preheaderi_268;
reg [31:0] main_preheaderi_268_reg;
reg [31:0] main_preheaderi_269;
reg [31:0] main_preheaderi_269_reg;
reg [31:0] main_preheaderi_270;
reg [31:0] main_preheaderi_270_reg;
reg [31:0] main_preheaderi_271;
reg [31:0] main_preheaderi_271_reg;
reg [31:0] main_preheaderi_272;
reg [31:0] main_preheaderi_272_reg;
reg [31:0] main_preheaderi_273;
reg [31:0] main_preheaderi_273_reg;
reg [31:0] main_preheaderi_274;
reg [31:0] main_preheaderi_274_reg;
reg [31:0] main_preheaderi_275;
reg [31:0] main_preheaderi_275_reg;
reg [31:0] main_preheaderi_276;
reg [31:0] main_preheaderi_276_reg;
reg [31:0] main_preheaderi_277;
reg [31:0] main_preheaderi_277_reg;
reg [31:0] main_preheaderi_278;
reg [31:0] main_preheaderi_278_reg;
reg [31:0] main_preheaderi_279;
reg [31:0] main_preheaderi_279_reg;
reg [31:0] main_preheaderi_280;
reg [31:0] main_preheaderi_280_reg;
reg [31:0] main_preheaderi_281;
reg [31:0] main_preheaderi_281_reg;
reg [31:0] main_preheaderi_tmpii;
reg [31:0] main_preheaderi_tmpii_reg;
reg [31:0] main_preheaderi_tmp1ii;
reg [31:0] main_preheaderi_tmp1ii_reg;
reg [31:0] main_preheaderi_282;
reg [31:0] main_preheaderi_282_reg;
reg [31:0] main_preheaderi_283;
reg [31:0] main_preheaderi_283_reg;
reg [31:0] main_preheaderi_284;
reg [31:0] main_preheaderi_284_reg;
reg [31:0] main_preheaderi_285;
reg [31:0] main_preheaderi_285_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_286;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_286_reg;
reg [31:0] main_preheaderi_287;
reg [31:0] main_preheaderi_287_reg;
reg [31:0] main_preheaderi_288;
reg [31:0] main_preheaderi_288_reg;
reg [31:0] main_preheaderi_289;
reg [31:0] main_preheaderi_289_reg;
reg [31:0] main_preheaderi_290;
reg [31:0] main_preheaderi_290_reg;
reg [31:0] main_preheaderi_291;
reg [31:0] main_preheaderi_291_reg;
reg [31:0] main_preheaderi_292;
reg [31:0] main_preheaderi_292_reg;
reg [31:0] main_preheaderi_293;
reg [31:0] main_preheaderi_293_reg;
reg [31:0] main_preheaderi_294;
reg [31:0] main_preheaderi_294_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_295;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_295_reg;
reg [31:0] main_preheaderi_296;
reg [31:0] main_preheaderi_296_reg;
reg [31:0] main_preheaderi_297;
reg [31:0] main_preheaderi_297_reg;
reg  main_preheaderi_298;
reg  main_preheaderi_298_reg;
reg [31:0] main_preheaderi_i12i;
reg [31:0] main_preheaderi_i12i_reg;
reg  main_preheaderi_299;
reg  main_preheaderi_299_reg;
reg [31:0] main_preheaderi_i13i;
reg [31:0] main_preheaderi_i13i_reg;
reg [31:0] main_preheaderi_300;
reg [31:0] main_preheaderi_300_reg;
reg [31:0] main_preheaderi_301;
reg [31:0] main_preheaderi_301_reg;
reg [31:0] main_preheaderi_302;
reg [31:0] main_preheaderi_302_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_303;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_303_reg;
reg [31:0] main_preheaderi_304;
reg [31:0] main_preheaderi_304_reg;
reg [31:0] main_preheaderi_305;
reg [31:0] main_preheaderi_305_reg;
reg [31:0] main_preheaderi_306;
reg [31:0] main_preheaderi_306_reg;
reg [31:0] main_preheaderi_307;
reg [31:0] main_preheaderi_307_reg;
reg [31:0] main_preheaderi_308;
reg [31:0] main_preheaderi_308_reg;
reg [31:0] main_preheaderi_309;
reg [31:0] main_preheaderi_309_reg;
reg [31:0] main_preheaderi_310;
reg [31:0] main_preheaderi_310_reg;
reg  main_preheaderi_311;
reg  main_preheaderi_311_reg;
reg [31:0] main_preheaderi_312;
reg [31:0] main_preheaderi_312_reg;
reg [31:0] main_preheaderi_1i8i;
reg [31:0] main_preheaderi_1i8i_reg;
reg [31:0] main_preheaderi_313;
reg [31:0] main_preheaderi_313_reg;
reg [31:0] main_preheaderi_314;
reg [31:0] main_preheaderi_314_reg;
reg [31:0] main_preheaderi_315;
reg [31:0] main_preheaderi_315_reg;
reg [31:0] main_preheaderi_316;
reg [31:0] main_preheaderi_316_reg;
reg [31:0] main_preheaderi_317;
reg [31:0] main_preheaderi_317_reg;
reg [31:0] main_preheaderi_318;
reg [31:0] main_preheaderi_318_reg;
reg [31:0] main_preheaderi_319;
reg [31:0] main_preheaderi_319_reg;
reg [31:0] main_preheaderi_wd40i9i;
reg [31:0] main_preheaderi_wd40i9i_reg;
reg [31:0] main_preheaderi_320;
reg [31:0] main_preheaderi_320_reg;
reg  main_preheaderi_321;
reg  main_preheaderi_321_reg;
reg [31:0] main_preheaderi_i10i;
reg [31:0] main_preheaderi_i10i_reg;
reg  main_preheaderi_322;
reg  main_preheaderi_322_reg;
reg [31:0] main_preheaderi_i11i_var0;
reg [31:0] main_preheaderi_i11i_var0_reg;
reg [31:0] main_preheaderi_323;
reg [31:0] main_preheaderi_323_reg;
reg [31:0] main_preheaderi_324;
reg [31:0] main_preheaderi_324_reg;
reg [31:0] main_preheaderi_325;
reg [31:0] main_preheaderi_325_reg;
reg [31:0] main_preheaderi_326;
reg [31:0] main_preheaderi_326_reg;
reg [31:0] main_preheaderi_327;
reg [31:0] main_preheaderi_327_reg;
reg [31:0] main_preheaderi_apl10i5i;
reg [31:0] main_preheaderi_apl10i5i_reg;
reg [31:0] main_preheaderi_328;
reg [31:0] main_preheaderi_328_reg;
reg  main_preheaderi_329;
reg  main_preheaderi_329_reg;
reg [31:0] main_preheaderi_apl10i6i;
reg [31:0] main_preheaderi_apl10i6i_reg;
reg [31:0] main_preheaderi_330;
reg [31:0] main_preheaderi_330_reg;
reg  main_preheaderi_331;
reg  main_preheaderi_331_reg;
reg [31:0] main_preheaderi_apl12i7i;
reg [31:0] main_preheaderi_apl12i7i_reg;
reg [31:0] main_preheaderi_332;
reg [31:0] main_preheaderi_332_reg;
reg [31:0] main_preheaderi_333;
reg [31:0] main_preheaderi_333_reg;
reg [31:0] main_preheaderi_334;
reg [31:0] main_preheaderi_334_reg;
reg [31:0] main_preheaderi_335;
reg [31:0] main_preheaderi_335_reg;
reg [31:0] main_preheaderi_336;
reg [31:0] main_preheaderi_336_reg;
reg [31:0] main_preheaderi_337;
reg [31:0] main_preheaderi_337_reg;
reg [31:0] main_preheaderi_338;
reg [31:0] main_preheaderi_338_reg;
reg [31:0] main_preheaderi_339;
reg [31:0] main_preheaderi_339_reg;
reg [31:0] main_preheaderi_340;
reg [31:0] main_preheaderi_340_reg;
reg [31:0] main_preheaderi_341;
reg [31:0] main_preheaderi_341_reg;
reg [31:0] main_preheaderi_342;
reg [31:0] main_preheaderi_342_reg;
reg [31:0] main_preheaderi_343;
reg [31:0] main_preheaderi_343_reg;
reg [31:0] main_preheaderi_344;
reg [31:0] main_preheaderi_344_reg;
reg [31:0] main_preheaderi_345;
reg [31:0] main_preheaderi_345_reg;
reg [31:0] main_preheaderi_346;
reg [31:0] main_preheaderi_346_reg;
reg [31:0] main_preheaderi_347;
reg [31:0] main_preheaderi_347_reg;
reg [31:0] main_preheaderi_348;
reg [31:0] main_preheaderi_348_reg;
reg [31:0] main_preheaderi_349;
reg [31:0] main_preheaderi_349_reg;
reg [31:0] main_preheaderi_350;
reg [31:0] main_preheaderi_350_reg;
reg [31:0] main_preheaderi_351;
reg [31:0] main_preheaderi_351_reg;
reg [31:0] main_preheaderi_352;
reg [31:0] main_preheaderi_352_reg;
reg [31:0] main_preheaderi_353;
reg [31:0] main_preheaderi_353_reg;
reg [31:0] main_preheaderi_354;
reg [31:0] main_preheaderi_354_reg;
reg [31:0] main_preheaderi_355;
reg [31:0] main_preheaderi_355_reg;
reg [31:0] main_preheaderi_356;
reg [31:0] main_preheaderi_356_reg;
reg [31:0] main_preheaderi_357;
reg [31:0] main_preheaderi_357_reg;
reg [31:0] main_preheaderi_358;
reg [31:0] main_preheaderi_358_reg;
reg [31:0] main_preheaderi_tmpi3i;
reg [31:0] main_preheaderi_tmpi3i_reg;
reg [31:0] main_preheaderi_tmp1i4i;
reg [31:0] main_preheaderi_tmp1i4i_reg;
reg [31:0] main_preheaderi_359;
reg [31:0] main_preheaderi_359_reg;
reg [31:0] main_preheaderi_360;
reg [31:0] main_preheaderi_360_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_361;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_361_reg;
reg [31:0] main_preheaderi_362;
reg [31:0] main_preheaderi_362_reg;
reg [31:0] main_preheaderi_363;
reg [31:0] main_preheaderi_363_reg;
reg [31:0] main_preheaderi_364;
reg [31:0] main_preheaderi_364_reg;
reg [31:0] main_preheaderi_365;
reg [31:0] main_preheaderi_365_reg;
reg [31:0] main_preheaderi_366;
reg [31:0] main_preheaderi_366_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_367;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_367_reg;
reg [31:0] main_preheaderi_368;
reg [31:0] main_preheaderi_368_reg;
reg [31:0] main_preheaderi_369;
reg [31:0] main_preheaderi_369_reg;
reg  main_preheaderi_370;
reg  main_preheaderi_370_reg;
reg [31:0] main_preheaderi_i1i;
reg [31:0] main_preheaderi_i1i_reg;
reg  main_preheaderi_371;
reg  main_preheaderi_371_reg;
reg [31:0] main_preheaderi_i2i;
reg [31:0] main_preheaderi_i2i_reg;
reg [31:0] main_preheaderi_372;
reg [31:0] main_preheaderi_372_reg;
reg [31:0] main_preheaderi_373;
reg [31:0] main_preheaderi_373_reg;
reg [31:0] main_preheaderi_374;
reg [31:0] main_preheaderi_374_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_375;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_375_reg;
reg [31:0] main_preheaderi_376;
reg [31:0] main_preheaderi_376_reg;
reg [31:0] main_preheaderi_377;
reg [31:0] main_preheaderi_377_reg;
reg [31:0] main_preheaderi_378;
reg [31:0] main_preheaderi_378_reg;
reg [31:0] main_preheaderi_379;
reg [31:0] main_preheaderi_379_reg;
reg [31:0] main_preheaderi_380;
reg [31:0] main_preheaderi_380_reg;
reg [31:0] main_preheaderi_381;
reg [31:0] main_preheaderi_381_reg;
reg [31:0] main_preheaderi_382;
reg [31:0] main_preheaderi_382_reg;
reg  main_preheaderi_383;
reg  main_preheaderi_383_reg;
reg [31:0] main_preheaderi_384;
reg [31:0] main_preheaderi_384_reg;
reg [31:0] main_preheaderi_1ii;
reg [31:0] main_preheaderi_1ii_reg;
reg [31:0] main_preheaderi_385;
reg [31:0] main_preheaderi_385_reg;
reg [31:0] main_preheaderi_386;
reg [31:0] main_preheaderi_386_reg;
reg [31:0] main_preheaderi_387;
reg [31:0] main_preheaderi_387_reg;
reg [31:0] main_preheaderi_388;
reg [31:0] main_preheaderi_388_reg;
reg [31:0] main_preheaderi_389;
reg [31:0] main_preheaderi_389_reg;
reg [31:0] main_preheaderi_390;
reg [31:0] main_preheaderi_390_reg;
reg [31:0] main_preheaderi_391;
reg [31:0] main_preheaderi_391_reg;
reg [31:0] main_preheaderi_wd40ii;
reg [31:0] main_preheaderi_wd40ii_reg;
reg [31:0] main_preheaderi_392;
reg [31:0] main_preheaderi_392_reg;
reg  main_preheaderi_393;
reg  main_preheaderi_393_reg;
reg [31:0] main_preheaderi_ii;
reg [31:0] main_preheaderi_ii_reg;
reg  main_preheaderi_394;
reg  main_preheaderi_394_reg;
reg [31:0] main_preheaderi_ii_var1;
reg [31:0] main_preheaderi_ii_var1_reg;
reg [31:0] main_preheaderi_395;
reg [31:0] main_preheaderi_395_reg;
reg [31:0] main_preheaderi_396;
reg [31:0] main_preheaderi_396_reg;
reg [31:0] main_preheaderi_397;
reg [31:0] main_preheaderi_397_reg;
reg [31:0] main_preheaderi_398;
reg [31:0] main_preheaderi_398_reg;
reg [31:0] main_preheaderi_399;
reg [31:0] main_preheaderi_399_reg;
reg [31:0] main_preheaderi_apl10ii;
reg [31:0] main_preheaderi_apl10ii_reg;
reg [31:0] main_preheaderi_400;
reg [31:0] main_preheaderi_400_reg;
reg  main_preheaderi_401;
reg  main_preheaderi_401_reg;
reg [31:0] main_preheaderi_apl10ii_var2;
reg [31:0] main_preheaderi_apl10ii_var2_reg;
reg [31:0] main_preheaderi_402;
reg [31:0] main_preheaderi_402_reg;
reg  main_preheaderi_403;
reg  main_preheaderi_403_reg;
reg [31:0] main_preheaderi_apl12ii;
reg [31:0] main_preheaderi_apl12ii_reg;
reg [31:0] main_preheaderi_404;
reg [31:0] main_preheaderi_404_reg;
reg [31:0] main_preheaderi_405;
reg [31:0] main_preheaderi_405_reg;
reg [31:0] main_preheaderi_406;
reg [31:0] main_preheaderi_406_reg;
reg [31:0] main_preheaderi_407;
reg [31:0] main_preheaderi_407_reg;
reg [31:0] main_preheaderi_408;
reg [31:0] main_preheaderi_408_reg;
reg [31:0] main_preheaderi_409;
reg [31:0] main_preheaderi_409_reg;
reg [31:0] main_preheaderi_410;
reg [31:0] main_preheaderi_410_reg;
reg [31:0] main_preheaderi_411;
reg [31:0] main_preheaderi_411_reg;
reg [31:0] main_preheaderi_412;
reg [31:0] main_preheaderi_412_reg;
reg [31:0] main_preheaderi_413;
reg [31:0] main_preheaderi_413_reg;
reg [31:0] main_preheaderi_414;
reg [31:0] main_preheaderi_414_reg;
reg [31:0] main_preheaderi_415;
reg [31:0] main_preheaderi_415_reg;
reg [31:0] main_preheaderi_416;
reg [31:0] main_preheaderi_416_reg;
reg [31:0] main_preheaderi_417;
reg [31:0] main_preheaderi_417_reg;
reg [31:0] main_preheaderi_418;
reg [31:0] main_preheaderi_418_reg;
reg [31:0] main_preheaderi_419;
reg [31:0] main_preheaderi_419_reg;
reg [31:0] main_preheaderi_420;
reg [31:0] main_preheaderi_420_reg;
reg [31:0] main_preheaderi_421;
reg [31:0] main_preheaderi_421_reg;
reg [31:0] main_preheaderi_422;
reg [31:0] main_preheaderi_422_reg;
reg [31:0] main_preheaderi_423;
reg [31:0] main_preheaderi_423_reg;
reg [31:0] main_preheaderi_424;
reg [31:0] main_preheaderi_424_reg;
reg [31:0] main_preheaderi_425;
reg [31:0] main_preheaderi_425_reg;
reg [31:0] main_preheaderi_426;
reg [31:0] main_preheaderi_426_reg;
reg [31:0] main_preheaderi_427;
reg [31:0] main_preheaderi_427_reg;
reg [31:0] main_preheaderi_428;
reg [31:0] main_preheaderi_428_reg;
reg [31:0] main_preheaderi_429;
reg [31:0] main_preheaderi_429_reg;
reg [31:0] main_preheaderi_430;
reg [31:0] main_preheaderi_430_reg;
reg [31:0] main_preheaderi_431;
reg [31:0] main_preheaderi_431_reg;
reg [31:0] main_preheaderi_432;
reg [31:0] main_preheaderi_432_reg;
reg [31:0] main_preheaderi_433;
reg [31:0] main_preheaderi_433_reg;
reg [31:0] main_preheaderi_434;
reg [31:0] main_preheaderi_434_reg;
reg [31:0] main_preheaderi_435;
reg [31:0] main_preheaderi_435_reg;
reg [31:0] main_preheaderi_436;
reg [31:0] main_preheaderi_436_reg;
reg [31:0] main_preheaderi_437;
reg [31:0] main_preheaderi_437_reg;
reg [31:0] main_preheaderi_438;
reg [31:0] main_preheaderi_438_reg;
reg [31:0] main_preheaderi_439;
reg [31:0] main_preheaderi_439_reg;
reg [31:0] main_preheaderi_440;
reg [31:0] main_preheaderi_440_reg;
reg [31:0] main_preheaderi_441;
reg [31:0] main_preheaderi_441_reg;
reg [31:0] main_preheaderi_442;
reg [31:0] main_preheaderi_442_reg;
reg [31:0] main_preheaderi_443;
reg [31:0] main_preheaderi_443_reg;
reg [31:0] main_preheaderi_444;
reg [31:0] main_preheaderi_444_reg;
reg [31:0] main_preheaderi_445;
reg [31:0] main_preheaderi_445_reg;
reg [31:0] main_preheaderi_446;
reg [31:0] main_preheaderi_446_reg;
reg [31:0] main_preheaderi_447;
reg [31:0] main_preheaderi_447_reg;
reg [31:0] main_preheaderi_448;
reg [31:0] main_preheaderi_448_reg;
reg [31:0] main_preheaderi_449;
reg [31:0] main_preheaderi_449_reg;
reg [31:0] main_preheaderi_450;
reg [31:0] main_preheaderi_450_reg;
reg [31:0] main_preheaderi_451;
reg [31:0] main_preheaderi_451_reg;
reg [31:0] main_preheaderi_452;
reg [31:0] main_preheaderi_452_reg;
reg [31:0] main_preheaderi_453;
reg [31:0] main_preheaderi_453_reg;
reg [31:0] main_preheaderi_454;
reg [31:0] main_preheaderi_454_reg;
reg [31:0] main_preheaderi_indvarnext;
reg [31:0] main_preheaderi_indvarnext_reg;
reg  main_preheaderi_exitcond5;
reg  main_preheaderi_exitcond5_reg;
reg [31:0] main_adpcm_mainexit_main_result04;
reg [31:0] main_adpcm_mainexit_main_result04_reg;
reg [31:0] main_adpcm_mainexit_i03;
reg [31:0] main_adpcm_mainexit_i03_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep4_reg;
reg [31:0] main_adpcm_mainexit_455;
reg [31:0] main_adpcm_mainexit_455_reg;
reg [31:0] main_adpcm_mainexit_456;
reg [31:0] main_adpcm_mainexit_456_reg;
reg  main_adpcm_mainexit_457;
reg  main_adpcm_mainexit_457_reg;
reg [31:0] main_adpcm_mainexit_458;
reg [31:0] main_adpcm_mainexit_458_reg;
reg [31:0] main_adpcm_mainexit_main_result0;
reg [31:0] main_adpcm_mainexit_main_result0_reg;
reg [31:0] main_adpcm_mainexit_459;
reg [31:0] main_adpcm_mainexit_459_reg;
reg  main_adpcm_mainexit_exitcond;
reg  main_adpcm_mainexit_exitcond_reg;
reg [31:0] main_preheader_main_result22;
reg [31:0] main_preheader_main_result22_reg;
reg [31:0] main_preheader_i11;
reg [31:0] main_preheader_i11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep2_reg;
reg [31:0] main_preheader_460;
reg [31:0] main_preheader_460_reg;
reg [31:0] main_preheader_461;
reg [31:0] main_preheader_461_reg;
reg  main_preheader_462;
reg  main_preheader_462_reg;
reg [31:0] main_preheader_463;
reg [31:0] main_preheader_463_reg;
reg [31:0] main_preheader_main_result2;
reg [31:0] main_preheader_main_result2_reg;
reg [31:0] main_preheader_464;
reg [31:0] main_preheader_464_reg;
reg  main_preheader_exitcond1;
reg  main_preheader_exitcond1_reg;
reg  main_465_467;
reg  main_465_467_reg;
reg [3:0] qq4_code4_table_address_a;
reg  qq4_code4_table_write_enable_a;
wire [31:0] qq4_code4_table_in_a;
wire [31:0] qq4_code4_table_out_a;
wire [3:0] qq4_code4_table_address_b;
wire  qq4_code4_table_write_enable_b;
wire [31:0] qq4_code4_table_in_b;
wire [31:0] qq4_code4_table_out_b;
reg [5:0] qq6_code6_table_address_a;
reg  qq6_code6_table_write_enable_a;
wire [31:0] qq6_code6_table_in_a;
wire [31:0] qq6_code6_table_out_a;
wire [5:0] qq6_code6_table_address_b;
wire  qq6_code6_table_write_enable_b;
wire [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_b;
reg [3:0] wl_code_table_address_a;
reg  wl_code_table_write_enable_a;
wire [31:0] wl_code_table_in_a;
wire [31:0] wl_code_table_out_a;
wire [3:0] wl_code_table_address_b;
wire  wl_code_table_write_enable_b;
wire [31:0] wl_code_table_in_b;
wire [31:0] wl_code_table_out_b;
reg [4:0] ilb_table_address_a;
reg  ilb_table_write_enable_a;
wire [31:0] ilb_table_in_a;
wire [31:0] ilb_table_out_a;
wire [4:0] ilb_table_address_b;
wire  ilb_table_write_enable_b;
wire [31:0] ilb_table_in_b;
wire [31:0] ilb_table_out_b;
reg [4:0] decis_levl_address_a;
reg  decis_levl_write_enable_a;
wire [31:0] decis_levl_in_a;
wire [31:0] decis_levl_out_a;
wire [4:0] decis_levl_address_b;
wire  decis_levl_write_enable_b;
wire [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_b;
wire [4:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [4:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
reg [1:0] qq2_code2_table_address_a;
reg  qq2_code2_table_write_enable_a;
wire [31:0] qq2_code2_table_in_a;
wire [31:0] qq2_code2_table_out_a;
wire [1:0] qq2_code2_table_address_b;
wire  qq2_code2_table_write_enable_b;
wire [31:0] qq2_code2_table_in_b;
wire [31:0] qq2_code2_table_out_b;
reg [1:0] wh_code_table_address_a;
reg  wh_code_table_write_enable_a;
wire [31:0] wh_code_table_in_a;
wire [31:0] wh_code_table_out_a;
wire [1:0] wh_code_table_address_b;
wire  wh_code_table_write_enable_b;
wire [31:0] wh_code_table_in_b;
wire [31:0] wh_code_table_out_b;
reg [4:0] tqmf_address_a;
reg  tqmf_write_enable_a;
reg [31:0] tqmf_in_a;
wire [31:0] tqmf_out_a;
reg [4:0] tqmf_address_b;
reg  tqmf_write_enable_b;
reg [31:0] tqmf_in_b;
wire [31:0] tqmf_out_b;
wire [2:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [2:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [6:0] test_data_address_a;
reg  test_data_write_enable_a;
wire [31:0] test_data_in_a;
wire [31:0] test_data_out_a;
reg [6:0] test_data_address_b;
reg  test_data_write_enable_b;
wire [31:0] test_data_in_b;
wire [31:0] test_data_out_b;
reg [6:0] test_compressed_address_a;
reg  test_compressed_write_enable_a;
wire [31:0] test_compressed_in_a;
wire [31:0] test_compressed_out_a;
wire [6:0] test_compressed_address_b;
wire  test_compressed_write_enable_b;
wire [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_b;
reg [6:0] test_result_address_a;
reg  test_result_write_enable_a;
wire [31:0] test_result_in_a;
wire [31:0] test_result_out_a;
wire [6:0] test_result_address_b;
wire  test_result_write_enable_b;
wire [31:0] test_result_in_b;
wire [31:0] test_result_out_b;
reg [6:0] compressed_address_a;
reg  compressed_write_enable_a;
reg [31:0] compressed_in_a;
wire [31:0] compressed_out_a;
wire [6:0] compressed_address_b;
wire  compressed_write_enable_b;
wire [31:0] compressed_in_b;
wire [31:0] compressed_out_b;
reg [6:0] result_address_a;
reg  result_write_enable_a;
reg [31:0] result_in_a;
wire [31:0] result_out_a;
reg [6:0] result_address_b;
reg  result_write_enable_b;
reg [31:0] result_in_b;
wire [31:0] result_out_b;
reg  upzero_start;
reg [31:0] upzero_arg_dlt;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_dlti;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_bli;
wire  upzero_memory_controller_enable_a;
wire  upzero_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_out_a;
wire [1:0] upzero_memory_controller_size_a;
wire  upzero_memory_controller_enable_b;
wire  upzero_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_out_b;
wire [1:0] upzero_memory_controller_size_b;
reg  upzero_memory_controller_waitrequest;
reg  upzero_finish_final;
reg  upzero_finish_reg;
wire  upzero_finish;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_preheaderi_252_temp_out;
wire [31:0] main_preheaderi_252_unused;
reg  lpm_divide_main_preheaderi_252_en;
reg [31:0] lpm_divide_main_preheaderi_252_out;
reg [31:0] main_signed_divide_32_0;
reg  lpm_divide_main_legup_memset_4_i64exit_32_en;
reg  lpm_mult_main_legup_memset_4_i64exit_35_en;
reg [31:0] main_legup_memset_4_i64exit_35_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_36_en;
reg [31:0] main_legup_memset_4_i64exit_36_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_37_en;
reg [31:0] main_legup_memset_4_i64exit_37_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_39_en;
reg [31:0] main_legup_memset_4_i64exit_39_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_41_en;
reg [31:0] main_legup_memset_4_i64exit_41_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_43_en;
reg [31:0] main_legup_memset_4_i64exit_43_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_47_en;
reg [31:0] main_legup_memset_4_i64exit_47_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_49_en;
reg [31:0] main_legup_memset_4_i64exit_49_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_51_en;
reg [31:0] main_legup_memset_4_i64exit_51_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_53_en;
reg [31:0] main_legup_memset_4_i64exit_53_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_55_en;
reg [31:0] main_legup_memset_4_i64exit_55_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_57_en;
reg [31:0] main_legup_memset_4_i64exit_57_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_59_en;
reg [31:0] main_legup_memset_4_i64exit_59_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_61_en;
reg [31:0] main_legup_memset_4_i64exit_61_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_63_en;
reg [31:0] main_legup_memset_4_i64exit_63_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_65_en;
reg [31:0] main_legup_memset_4_i64exit_65_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_69_en;
reg [31:0] main_legup_memset_4_i64exit_69_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_71_en;
reg [31:0] main_legup_memset_4_i64exit_71_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_73_en;
reg [31:0] main_legup_memset_4_i64exit_73_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_75_en;
reg [31:0] main_legup_memset_4_i64exit_75_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_107_en;
reg [31:0] main_legup_memset_4_i64exit_107_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_108_en;
reg [31:0] main_legup_memset_4_i64exit_108_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_85_en;
reg [31:0] main_legup_memset_4_i64exit_85_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_88_en;
reg [31:0] main_legup_memset_4_i64exit_88_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_92_en;
reg [31:0] main_legup_memset_4_i64exit_92_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_96_en;
reg [31:0] main_legup_memset_4_i64exit_96_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_100_en;
reg [31:0] main_legup_memset_4_i64exit_100_stage0_reg;
reg  lpm_mult_main_legup_memset_4_i64exit_104_en;
reg [31:0] main_legup_memset_4_i64exit_104_stage0_reg;
reg  lpm_mult_main_117_121_en;
reg [31:0] main_117_121_stage0_reg;
reg  lpm_mult_main_quantlexiti_148_en;
reg [31:0] main_quantlexiti_148_stage0_reg;
reg  lpm_mult_main_quantlexiti_153_en;
reg [31:0] main_quantlexiti_153_stage0_reg;
reg  lpm_mult_main_quantlexiti_185_en;
reg [31:0] main_quantlexiti_185_stage0_reg;
reg  lpm_mult_main_quantlexiti_186_en;
reg [31:0] main_quantlexiti_186_stage0_reg;
reg  lpm_mult_main_quantlexiti_192_en;
reg [31:0] main_quantlexiti_192_stage0_reg;
reg  lpm_mult_main_quantlexiti_220_en;
reg [31:0] main_quantlexiti_220_stage0_reg;
reg  lpm_mult_main_quantlexiti_225_en;
reg [31:0] main_quantlexiti_225_stage0_reg;
reg  lpm_mult_main_quantlexiti_127_en;
reg [31:0] main_quantlexiti_127_stage0_reg;
reg  lpm_mult_main_quantlexiti_140_en;
reg [31:0] main_quantlexiti_140_stage0_reg;
reg  lpm_mult_main_quantlexiti_144_en;
reg [31:0] main_quantlexiti_144_stage0_reg;
reg  lpm_mult_main_quantlexiti_163_en;
reg [31:0] main_quantlexiti_163_stage0_reg;
reg  lpm_mult_main_quantlexiti_166_en;
reg [31:0] main_quantlexiti_166_stage0_reg;
reg  lpm_mult_main_quantlexiti_170_en;
reg [31:0] main_quantlexiti_170_stage0_reg;
reg  lpm_mult_main_quantlexiti_174_en;
reg [31:0] main_quantlexiti_174_stage0_reg;
reg  lpm_mult_main_quantlexiti_178_en;
reg [31:0] main_quantlexiti_178_stage0_reg;
reg  lpm_mult_main_quantlexiti_182_en;
reg [31:0] main_quantlexiti_182_stage0_reg;
reg  lpm_mult_main_quantlexiti_199_en;
reg [31:0] main_quantlexiti_199_stage0_reg;
reg  lpm_mult_main_quantlexiti_212_en;
reg [31:0] main_quantlexiti_212_stage0_reg;
reg  lpm_mult_main_quantlexiti_216_en;
reg [31:0] main_quantlexiti_216_stage0_reg;
reg  lpm_mult_main_encodeexit_crit_edge_phitmp2_en;
reg [31:0] main_encodeexit_crit_edge_phitmp2_stage0_reg;
reg  lpm_mult_main_encodeexit_crit_edge_phitmp4_en;
reg [31:0] main_encodeexit_crit_edge_phitmp4_stage0_reg;
reg  lpm_mult_main_encodeexit_crit_edge_phitmp_en;
reg [31:0] main_encodeexit_crit_edge_phitmp_stage0_reg;
reg  lpm_mult_main_encodeexit_crit_edge_phitmp1_en;
reg [31:0] main_encodeexit_crit_edge_phitmp1_stage0_reg;
reg  lpm_mult_main_preheaderi_280_en;
reg [31:0] main_preheaderi_280_stage0_reg;
reg  lpm_mult_main_preheaderi_281_en;
reg [31:0] main_preheaderi_281_stage0_reg;
reg  lpm_mult_main_preheaderi_290_en;
reg [31:0] main_preheaderi_290_stage0_reg;
reg  lpm_mult_main_preheaderi_293_en;
reg [31:0] main_preheaderi_293_stage0_reg;
reg  lpm_mult_main_preheaderi_318_en;
reg [31:0] main_preheaderi_318_stage0_reg;
reg  lpm_mult_main_preheaderi_323_en;
reg [31:0] main_preheaderi_323_stage0_reg;
reg  lpm_mult_main_preheaderi_357_en;
reg [31:0] main_preheaderi_357_stage0_reg;
reg  lpm_mult_main_preheaderi_358_en;
reg [31:0] main_preheaderi_358_stage0_reg;
reg  lpm_mult_main_preheaderi_365_en;
reg [31:0] main_preheaderi_365_stage0_reg;
reg  lpm_mult_main_preheaderi_390_en;
reg [31:0] main_preheaderi_390_stage0_reg;
reg  lpm_mult_main_preheaderi_395_en;
reg [31:0] main_preheaderi_395_stage0_reg;
reg  lpm_mult_main_preheaderi_409_en;
reg [31:0] main_preheaderi_409_stage0_reg;
reg  lpm_mult_main_preheaderi_411_en;
reg [31:0] main_preheaderi_411_stage0_reg;
reg  lpm_mult_main_preheaderi_413_en;
reg [31:0] main_preheaderi_413_stage0_reg;
reg  lpm_mult_main_preheaderi_415_en;
reg [31:0] main_preheaderi_415_stage0_reg;
reg  lpm_mult_main_preheaderi_419_en;
reg [31:0] main_preheaderi_419_stage0_reg;
reg  lpm_mult_main_preheaderi_421_en;
reg [31:0] main_preheaderi_421_stage0_reg;
reg  lpm_mult_main_preheaderi_423_en;
reg [31:0] main_preheaderi_423_stage0_reg;
reg  lpm_mult_main_preheaderi_425_en;
reg [31:0] main_preheaderi_425_stage0_reg;
reg  lpm_mult_main_preheaderi_427_en;
reg [31:0] main_preheaderi_427_stage0_reg;
reg  lpm_mult_main_preheaderi_429_en;
reg [31:0] main_preheaderi_429_stage0_reg;
reg  lpm_mult_main_preheaderi_431_en;
reg [31:0] main_preheaderi_431_stage0_reg;
reg  lpm_mult_main_preheaderi_433_en;
reg [31:0] main_preheaderi_433_stage0_reg;
reg  lpm_mult_main_preheaderi_435_en;
reg [31:0] main_preheaderi_435_stage0_reg;
reg  lpm_mult_main_preheaderi_437_en;
reg [31:0] main_preheaderi_437_stage0_reg;
reg  lpm_mult_main_preheaderi_441_en;
reg [31:0] main_preheaderi_441_stage0_reg;
reg  lpm_mult_main_preheaderi_443_en;
reg [31:0] main_preheaderi_443_stage0_reg;
reg  lpm_mult_main_preheaderi_445_en;
reg [31:0] main_preheaderi_445_stage0_reg;
reg  lpm_mult_main_preheaderi_447_en;
reg [31:0] main_preheaderi_447_stage0_reg;
reg  lpm_mult_main_preheaderi_449_en;
reg [31:0] main_preheaderi_449_stage0_reg;
reg  lpm_mult_main_preheaderi_451_en;
reg [31:0] main_preheaderi_451_stage0_reg;
reg  lpm_mult_main_preheaderi_258_en;
reg [31:0] main_preheaderi_258_stage0_reg;
reg  lpm_mult_main_preheaderi_261_en;
reg [31:0] main_preheaderi_261_stage0_reg;
reg  lpm_mult_main_preheaderi_265_en;
reg [31:0] main_preheaderi_265_stage0_reg;
reg  lpm_mult_main_preheaderi_269_en;
reg [31:0] main_preheaderi_269_stage0_reg;
reg  lpm_mult_main_preheaderi_273_en;
reg [31:0] main_preheaderi_273_stage0_reg;
reg  lpm_mult_main_preheaderi_277_en;
reg [31:0] main_preheaderi_277_stage0_reg;
reg  lpm_mult_main_preheaderi_288_en;
reg [31:0] main_preheaderi_288_stage0_reg;
reg  lpm_mult_main_preheaderi_310_en;
reg [31:0] main_preheaderi_310_stage0_reg;
reg  lpm_mult_main_preheaderi_314_en;
reg [31:0] main_preheaderi_314_stage0_reg;
reg  lpm_mult_main_preheaderi_363_en;
reg [31:0] main_preheaderi_363_stage0_reg;
reg  lpm_mult_main_preheaderi_335_en;
reg [31:0] main_preheaderi_335_stage0_reg;
reg  lpm_mult_main_preheaderi_338_en;
reg [31:0] main_preheaderi_338_stage0_reg;
reg  lpm_mult_main_preheaderi_342_en;
reg [31:0] main_preheaderi_342_stage0_reg;
reg  lpm_mult_main_preheaderi_346_en;
reg [31:0] main_preheaderi_346_stage0_reg;
reg  lpm_mult_main_preheaderi_350_en;
reg [31:0] main_preheaderi_350_stage0_reg;
reg  lpm_mult_main_preheaderi_354_en;
reg [31:0] main_preheaderi_354_stage0_reg;
reg  lpm_mult_main_preheaderi_382_en;
reg [31:0] main_preheaderi_382_stage0_reg;
reg  lpm_mult_main_preheaderi_386_en;
reg [31:0] main_preheaderi_386_stage0_reg;
reg  lpm_mult_main_preheaderi_407_en;
reg [31:0] main_preheaderi_407_stage0_reg;
reg  lpm_mult_main_preheaderi_408_en;
reg [31:0] main_preheaderi_408_stage0_reg;

/*   %252 = sdiv i32 %i.11.i, 2*/
lpm_divide lpm_divide_main_preheaderi_252 (
	.quotient (lpm_divide_main_preheaderi_252_temp_out),
	.remain (main_preheaderi_252_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_preheaderi_252_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_preheaderi_252.lpm_pipeline = 32,
	lpm_divide_main_preheaderi_252.lpm_widthn = 32,
	lpm_divide_main_preheaderi_252.lpm_widthd = 32,
	lpm_divide_main_preheaderi_252.lpm_drepresentation = "SIGNED",
	lpm_divide_main_preheaderi_252.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_preheaderi_252.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


upzero upzero (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (upzero_memory_controller_enable_a),
	.memory_controller_address_a (upzero_memory_controller_address_a),
	.memory_controller_write_enable_a (upzero_memory_controller_write_enable_a),
	.memory_controller_in_a (upzero_memory_controller_in_a),
	.memory_controller_size_a (upzero_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (upzero_memory_controller_enable_b),
	.memory_controller_address_b (upzero_memory_controller_address_b),
	.memory_controller_write_enable_b (upzero_memory_controller_write_enable_b),
	.memory_controller_in_b (upzero_memory_controller_in_b),
	.memory_controller_size_b (upzero_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (upzero_start),
	.finish (upzero_finish),
	.arg_dlt (upzero_arg_dlt),
	.arg_dlti (upzero_arg_dlti),
	.arg_bli (upzero_arg_bli)
);

defparam
	upzero.tag_offset = tag_offset;

// Local Rams


// @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, ...
rom_dual_port qq4_code4_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq4_code4_table_address_a ),
	.address_b( qq4_code4_table_address_b ),
	.q_a( qq4_code4_table_out_a ),
	.q_b( qq4_code4_table_out_b)
);
defparam qq4_code4_table.width_a = 32;
defparam qq4_code4_table.width_b = 32;
defparam qq4_code4_table.widthad_a = 4;
defparam qq4_code4_table.widthad_b = 4;
defparam qq4_code4_table.numwords_a = 16;
defparam qq4_code4_table.numwords_b = 16;
defparam qq4_code4_table.latency = 1;
defparam qq4_code4_table.init_file = "qq4_code4_table.mif";


// @qq6_code6_table = internal unnamed_addr constant [64 x i32] [i32 -136, i32 -136, i32 -136, i32 -136, i32 -24808, i32 -21904, i32 -19008, i32 -16704, i32 -14984, i32 -13512, i32 -12280, i32 -11192, i3...
rom_dual_port qq6_code6_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq6_code6_table_address_a ),
	.address_b( qq6_code6_table_address_b ),
	.q_a( qq6_code6_table_out_a ),
	.q_b( qq6_code6_table_out_b)
);
defparam qq6_code6_table.width_a = 32;
defparam qq6_code6_table.width_b = 32;
defparam qq6_code6_table.widthad_a = 6;
defparam qq6_code6_table.widthad_b = 6;
defparam qq6_code6_table.numwords_a = 64;
defparam qq6_code6_table.numwords_b = 64;
defparam qq6_code6_table.latency = 1;
defparam qq6_code6_table.init_file = "qq6_code6_table.mif";


// @wl_code_table = internal unnamed_addr constant [16 x i32] [i32 -60, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32...
rom_dual_port wl_code_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( wl_code_table_address_a ),
	.address_b( wl_code_table_address_b ),
	.q_a( wl_code_table_out_a ),
	.q_b( wl_code_table_out_b)
);
defparam wl_code_table.width_a = 32;
defparam wl_code_table.width_b = 32;
defparam wl_code_table.widthad_a = 4;
defparam wl_code_table.widthad_b = 4;
defparam wl_code_table.numwords_a = 16;
defparam wl_code_table.numwords_b = 16;
defparam wl_code_table.latency = 1;
defparam wl_code_table.init_file = "wl_code_table.mif";


// @ilb_table = internal unnamed_addr constant [32 x i32] [i32 2048, i32 2093, i32 2139, i32 2186, i32 2233, i32 2282, i32 2332, i32 2383, i32 2435, i32 2489, i32 2543, i32 2599, i32 2656, i32 2714, i32 ...
rom_dual_port ilb_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ilb_table_address_a ),
	.address_b( ilb_table_address_b ),
	.q_a( ilb_table_out_a ),
	.q_b( ilb_table_out_b)
);
defparam ilb_table.width_a = 32;
defparam ilb_table.width_b = 32;
defparam ilb_table.widthad_a = 5;
defparam ilb_table.widthad_b = 5;
defparam ilb_table.numwords_a = 32;
defparam ilb_table.numwords_b = 32;
defparam ilb_table.latency = 1;
defparam ilb_table.init_file = "ilb_table.mif";


// @decis_levl = internal unnamed_addr constant [30 x i32] [i32 280, i32 576, i32 880, i32 1200, i32 1520, i32 1864, i32 2208, i32 2584, i32 2960, i32 3376, i32 3784, i32 4240, i32 4696, i32 5200, i32 57...
rom_dual_port decis_levl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( decis_levl_address_a ),
	.address_b( decis_levl_address_b ),
	.q_a( decis_levl_out_a ),
	.q_b( decis_levl_out_b)
);
defparam decis_levl.width_a = 32;
defparam decis_levl.width_b = 32;
defparam decis_levl.widthad_a = 5;
defparam decis_levl.widthad_b = 5;
defparam decis_levl.numwords_a = 30;
defparam decis_levl.numwords_b = 30;
defparam decis_levl.latency = 1;
defparam decis_levl.init_file = "decis_levl.mif";


// @qq2_code2_table = internal unnamed_addr constant [4 x i32] [i32 -7408, i32 -1616, i32 7408, i32 1616], align 4
rom_dual_port qq2_code2_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq2_code2_table_address_a ),
	.address_b( qq2_code2_table_address_b ),
	.q_a( qq2_code2_table_out_a ),
	.q_b( qq2_code2_table_out_b)
);
defparam qq2_code2_table.width_a = 32;
defparam qq2_code2_table.width_b = 32;
defparam qq2_code2_table.widthad_a = 2;
defparam qq2_code2_table.widthad_b = 2;
defparam qq2_code2_table.numwords_a = 4;
defparam qq2_code2_table.numwords_b = 4;
defparam qq2_code2_table.latency = 1;
defparam qq2_code2_table.init_file = "qq2_code2_table.mif";


// @wh_code_table = internal unnamed_addr constant [4 x i32] [i32 798, i32 -214, i32 798, i32 -214], align 4
rom_dual_port wh_code_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( wh_code_table_address_a ),
	.address_b( wh_code_table_address_b ),
	.q_a( wh_code_table_out_a ),
	.q_b( wh_code_table_out_b)
);
defparam wh_code_table.width_a = 32;
defparam wh_code_table.width_b = 32;
defparam wh_code_table.widthad_a = 2;
defparam wh_code_table.widthad_b = 2;
defparam wh_code_table.numwords_a = 4;
defparam wh_code_table.numwords_b = 4;
defparam wh_code_table.latency = 1;
defparam wh_code_table.init_file = "wh_code_table.mif";


// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
ram_dual_port tqmf (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( tqmf_address_a ),
	.address_b( tqmf_address_b ),
	.wren_a( tqmf_write_enable_a ),
	.wren_b( tqmf_write_enable_b ),
	.data_a( tqmf_in_a ),
	.data_b( tqmf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( tqmf_out_a ),
	.q_b( tqmf_out_b)
);
defparam tqmf.width_a = 32;
defparam tqmf.width_b = 32;
defparam tqmf.widthad_a = 5;
defparam tqmf.widthad_b = 5;
defparam tqmf.width_be_a = 1;
defparam tqmf.width_be_b = 1;
defparam tqmf.numwords_a = 24;
defparam tqmf.numwords_b = 24;
defparam tqmf.latency = 1;
defparam tqmf.init_file = "tqmf.mif";


// @test_data = internal unnamed_addr constant [100 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 67,...
rom_dual_port test_data (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_data_address_a ),
	.address_b( test_data_address_b ),
	.q_a( test_data_out_a ),
	.q_b( test_data_out_b)
);
defparam test_data.width_a = 32;
defparam test_data.width_b = 32;
defparam test_data.widthad_a = 7;
defparam test_data.widthad_b = 7;
defparam test_data.numwords_a = 100;
defparam test_data.numwords_b = 100;
defparam test_data.latency = 1;
defparam test_data.init_file = "test_data.mif";


// @test_compressed = internal unnamed_addr constant [100 x i32] [i32 253, i32 222, i32 119, i32 186, i32 244, i32 146, i32 32, i32 160, i32 236, i32 237, i32 238, i32 240, i32 241, i32 241, i32 242, i32...
rom_dual_port test_compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_compressed_address_a ),
	.address_b( test_compressed_address_b ),
	.q_a( test_compressed_out_a ),
	.q_b( test_compressed_out_b)
);
defparam test_compressed.width_a = 32;
defparam test_compressed.width_b = 32;
defparam test_compressed.widthad_a = 7;
defparam test_compressed.widthad_b = 7;
defparam test_compressed.numwords_a = 100;
defparam test_compressed.numwords_b = 100;
defparam test_compressed.latency = 1;
defparam test_compressed.init_file = "test_compressed.mif";


// @test_result = internal unnamed_addr constant [100 x i32] [i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 -2, i32 -1, i32 -2, i32 0, ...
rom_dual_port test_result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_result_address_a ),
	.address_b( test_result_address_b ),
	.q_a( test_result_out_a ),
	.q_b( test_result_out_b)
);
defparam test_result.width_a = 32;
defparam test_result.width_b = 32;
defparam test_result.widthad_a = 7;
defparam test_result.widthad_b = 7;
defparam test_result.numwords_a = 100;
defparam test_result.numwords_b = 100;
defparam test_result.latency = 1;
defparam test_result.init_file = "test_result.mif";


// @compressed = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( compressed_address_a ),
	.address_b( compressed_address_b ),
	.wren_a( compressed_write_enable_a ),
	.wren_b( compressed_write_enable_b ),
	.data_a( compressed_in_a ),
	.data_b( compressed_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( compressed_out_a ),
	.q_b( compressed_out_b)
);
defparam compressed.width_a = 32;
defparam compressed.width_b = 32;
defparam compressed.widthad_a = 7;
defparam compressed.widthad_b = 7;
defparam compressed.width_be_a = 1;
defparam compressed.width_be_b = 1;
defparam compressed.numwords_a = 100;
defparam compressed.numwords_b = 100;
defparam compressed.latency = 1;
defparam compressed.init_file = "compressed.mif";


// @result = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( result_address_a ),
	.address_b( result_address_b ),
	.wren_a( result_write_enable_a ),
	.wren_b( result_write_enable_b ),
	.data_a( result_in_a ),
	.data_b( result_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( result_out_a ),
	.q_b( result_out_b)
);
defparam result.width_a = 32;
defparam result.width_b = 32;
defparam result.widthad_a = 7;
defparam result.widthad_b = 7;
defparam result.width_be_a = 1;
defparam result.width_be_b = 1;
defparam result.numwords_a = 100;
defparam result.numwords_b = 100;
defparam result.latency = 1;
defparam result.init_file = "result.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %465*/
	/*   %466 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %.main_result.2) #1*/
	if ((cur_state == LEGUP_F_main_BB__465_165)) begin
		$write("Result: %d ", $signed(main_preheader_main_result2_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) finish <= 0;
	end
	/* main: %468*/
	/*   %469 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__468_166)) begin
		$write("RESULT: PASS ");
	end
	/* main: %470*/
	/*   %471 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__470_167)) begin
		$write("RESULT: FAIL");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_10:
		next_state = LEGUP_F_main_BB__0_11;
LEGUP_F_main_BB__0_11:
		next_state = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state = LEGUP_F_main_BB__0_14;
LEGUP_F_main_BB__0_14:
		next_state = LEGUP_F_main_BB__0_15;
LEGUP_F_main_BB__0_15:
		next_state = LEGUP_F_main_BB__0_16;
LEGUP_F_main_BB__0_16:
		next_state = LEGUP_F_main_BB__0_17;
LEGUP_F_main_BB__0_17:
		next_state = LEGUP_F_main_BB__0_18;
LEGUP_F_main_BB__0_18:
		next_state = LEGUP_F_main_BB__0_19;
LEGUP_F_main_BB__0_19:
		next_state = LEGUP_F_main_BB__0_20;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_20:
		next_state = LEGUP_F_main_BB__0_21;
LEGUP_F_main_BB__0_21:
		next_state = LEGUP_F_main_BB__0_22;
LEGUP_F_main_BB__0_22:
		next_state = LEGUP_F_main_BB__0_23;
LEGUP_F_main_BB__0_23:
		next_state = LEGUP_F_main_BB__0_24;
LEGUP_F_main_BB__0_24:
		next_state = LEGUP_F_main_BB__0_25;
LEGUP_F_main_BB__0_25:
		next_state = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_F_main_BB__0_10;
LEGUP_F_main_BB__114_63:
	if ((main_114_116 == 1'd1))
		next_state = LEGUP_F_main_BB__117_64;
	else if ((main_114_116 == 1'd0))
		next_state = LEGUP_F_main_BB_quantlexiti_67;
LEGUP_F_main_BB__117_64:
		next_state = LEGUP_F_main_BB__117_65;
LEGUP_F_main_BB__117_65:
		next_state = LEGUP_F_main_BB__117_66;
LEGUP_F_main_BB__117_66:
	if ((main_117_123 == 1'd1))
		next_state = LEGUP_F_main_BB__114_63;
	else if ((main_117_123 == 1'd0))
		next_state = LEGUP_F_main_BB_quantlexiti_67;
LEGUP_F_main_BB__1_26:
	if ((main_1_exitcond15 == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27;
	else if ((main_1_exitcond15 == 1'd0))
		next_state = LEGUP_F_main_BB__2_28;
LEGUP_F_main_BB__2_28:
		next_state = LEGUP_F_main_BB__2_29;
LEGUP_F_main_BB__2_29:
		next_state = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__465_165:
	if ((main_465_467 == 1'd1))
		next_state = LEGUP_F_main_BB__468_166;
	else if ((main_465_467 == 1'd0))
		next_state = LEGUP_F_main_BB__470_167;
LEGUP_F_main_BB__468_166:
		next_state = LEGUP_F_main_BB__472_168;
LEGUP_F_main_BB__470_167:
		next_state = LEGUP_F_main_BB__472_168;
LEGUP_F_main_BB__472_168:
		next_state = LEGUP_0;
LEGUP_F_main_BB_adpcm_mainexit_160:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_161;
LEGUP_F_main_BB_adpcm_mainexit_161:
	if ((main_adpcm_mainexit_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderpreheader_162;
	else if ((main_adpcm_mainexit_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_adpcm_mainexit_160;
LEGUP_F_main_BB_adpcm_mainexitpreheader_159:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_160;
LEGUP_F_main_BB_encodeexit_crit_edge_100:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_101;
LEGUP_F_main_BB_encodeexit_crit_edge_101:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_102;
LEGUP_F_main_BB_encodeexit_crit_edge_102:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_103;
LEGUP_F_main_BB_encodeexit_crit_edge_103:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_104;
LEGUP_F_main_BB_encodeexit_crit_edge_104:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_105;
LEGUP_F_main_BB_encodeexit_crit_edge_105:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_30;
LEGUP_F_main_BB_encodeexit_crit_edge_92:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_93;
LEGUP_F_main_BB_encodeexit_crit_edge_93:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_94;
LEGUP_F_main_BB_encodeexit_crit_edge_94:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_95;
LEGUP_F_main_BB_encodeexit_crit_edge_95:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_96;
LEGUP_F_main_BB_encodeexit_crit_edge_96:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_97;
LEGUP_F_main_BB_encodeexit_crit_edge_97:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_98;
LEGUP_F_main_BB_encodeexit_crit_edge_98:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_99;
LEGUP_F_main_BB_encodeexit_crit_edge_99:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_100;
LEGUP_F_main_BB_legup_memset_4_i64exit_30:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_31;
LEGUP_F_main_BB_legup_memset_4_i64exit_31:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_32;
LEGUP_F_main_BB_legup_memset_4_i64exit_32:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_33;
LEGUP_F_main_BB_legup_memset_4_i64exit_33:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_34;
LEGUP_F_main_BB_legup_memset_4_i64exit_34:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_35;
LEGUP_F_main_BB_legup_memset_4_i64exit_35:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_36;
LEGUP_F_main_BB_legup_memset_4_i64exit_36:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_37;
LEGUP_F_main_BB_legup_memset_4_i64exit_37:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_38;
LEGUP_F_main_BB_legup_memset_4_i64exit_38:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_39;
LEGUP_F_main_BB_legup_memset_4_i64exit_39:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_40;
LEGUP_F_main_BB_legup_memset_4_i64exit_40:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_41;
LEGUP_F_main_BB_legup_memset_4_i64exit_41:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_42;
LEGUP_F_main_BB_legup_memset_4_i64exit_42:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_43;
LEGUP_F_main_BB_legup_memset_4_i64exit_43:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_44;
LEGUP_F_main_BB_legup_memset_4_i64exit_44:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_45;
LEGUP_F_main_BB_legup_memset_4_i64exit_45:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_46;
LEGUP_F_main_BB_legup_memset_4_i64exit_46:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_47;
LEGUP_F_main_BB_legup_memset_4_i64exit_47:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_48;
LEGUP_F_main_BB_legup_memset_4_i64exit_48:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_49;
LEGUP_F_main_BB_legup_memset_4_i64exit_49:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_50;
LEGUP_F_main_BB_legup_memset_4_i64exit_50:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_51;
LEGUP_F_main_BB_legup_memset_4_i64exit_51:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_52;
LEGUP_F_main_BB_legup_memset_4_i64exit_52:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_53;
LEGUP_F_main_BB_legup_memset_4_i64exit_53:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_54;
LEGUP_F_main_BB_legup_memset_4_i64exit_54:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_55;
LEGUP_F_main_BB_legup_memset_4_i64exit_55:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_56;
LEGUP_F_main_BB_legup_memset_4_i64exit_56:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_57;
LEGUP_F_main_BB_legup_memset_4_i64exit_57:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_58;
LEGUP_F_main_BB_legup_memset_4_i64exit_58:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_59;
LEGUP_F_main_BB_legup_memset_4_i64exit_59:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_60;
LEGUP_F_main_BB_legup_memset_4_i64exit_60:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_61;
LEGUP_F_main_BB_legup_memset_4_i64exit_61:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_62;
LEGUP_F_main_BB_legup_memset_4_i64exit_62:
		next_state = LEGUP_F_main_BB__117_64;
LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_30;
LEGUP_F_main_BB_preheader_163:
		next_state = LEGUP_F_main_BB_preheader_164;
LEGUP_F_main_BB_preheader_164:
	if ((main_preheader_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB__465_165;
	else if ((main_preheader_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader_163;
LEGUP_F_main_BB_preheaderi_108:
		next_state = LEGUP_F_main_BB_preheaderi_109;
LEGUP_F_main_BB_preheaderi_109:
		next_state = LEGUP_F_main_BB_preheaderi_110;
LEGUP_F_main_BB_preheaderi_110:
		next_state = LEGUP_F_main_BB_preheaderi_111;
LEGUP_F_main_BB_preheaderi_111:
		next_state = LEGUP_F_main_BB_preheaderi_112;
LEGUP_F_main_BB_preheaderi_112:
		next_state = LEGUP_F_main_BB_preheaderi_113;
LEGUP_F_main_BB_preheaderi_113:
		next_state = LEGUP_F_main_BB_preheaderi_114;
LEGUP_F_main_BB_preheaderi_114:
		next_state = LEGUP_F_main_BB_preheaderi_115;
LEGUP_F_main_BB_preheaderi_115:
		next_state = LEGUP_F_main_BB_preheaderi_116;
LEGUP_F_main_BB_preheaderi_116:
		next_state = LEGUP_F_main_BB_preheaderi_117;
LEGUP_F_main_BB_preheaderi_117:
		next_state = LEGUP_F_main_BB_preheaderi_118;
LEGUP_F_main_BB_preheaderi_118:
		next_state = LEGUP_F_main_BB_preheaderi_119;
LEGUP_F_main_BB_preheaderi_119:
		next_state = LEGUP_F_main_BB_preheaderi_120;
LEGUP_F_main_BB_preheaderi_120:
		next_state = LEGUP_F_main_BB_preheaderi_121;
LEGUP_F_main_BB_preheaderi_121:
		next_state = LEGUP_F_main_BB_preheaderi_122;
LEGUP_F_main_BB_preheaderi_122:
		next_state = LEGUP_F_main_BB_preheaderi_123;
LEGUP_F_main_BB_preheaderi_123:
		next_state = LEGUP_F_main_BB_preheaderi_124;
LEGUP_F_main_BB_preheaderi_124:
		next_state = LEGUP_F_main_BB_preheaderi_125;
LEGUP_F_main_BB_preheaderi_125:
		next_state = LEGUP_F_main_BB_preheaderi_126;
LEGUP_F_main_BB_preheaderi_126:
		next_state = LEGUP_F_main_BB_preheaderi_127;
LEGUP_F_main_BB_preheaderi_127:
		next_state = LEGUP_F_main_BB_preheaderi_128;
LEGUP_F_main_BB_preheaderi_128:
		next_state = LEGUP_F_main_BB_preheaderi_129;
LEGUP_F_main_BB_preheaderi_129:
		next_state = LEGUP_F_main_BB_preheaderi_130;
LEGUP_F_main_BB_preheaderi_130:
		next_state = LEGUP_F_main_BB_preheaderi_131;
LEGUP_F_main_BB_preheaderi_131:
		next_state = LEGUP_F_main_BB_preheaderi_132;
LEGUP_F_main_BB_preheaderi_132:
		next_state = LEGUP_F_main_BB_preheaderi_133;
LEGUP_F_main_BB_preheaderi_133:
		next_state = LEGUP_F_main_BB_preheaderi_134;
LEGUP_F_main_BB_preheaderi_134:
		next_state = LEGUP_F_main_BB_preheaderi_135;
LEGUP_F_main_BB_preheaderi_135:
		next_state = LEGUP_F_main_BB_preheaderi_136;
LEGUP_F_main_BB_preheaderi_136:
		next_state = LEGUP_F_main_BB_preheaderi_137;
LEGUP_F_main_BB_preheaderi_137:
		next_state = LEGUP_F_main_BB_preheaderi_138;
LEGUP_F_main_BB_preheaderi_138:
		next_state = LEGUP_F_main_BB_preheaderi_139;
LEGUP_F_main_BB_preheaderi_139:
		next_state = LEGUP_F_main_BB_preheaderi_140;
LEGUP_F_main_BB_preheaderi_140:
		next_state = LEGUP_F_main_BB_preheaderi_141;
LEGUP_F_main_BB_preheaderi_141:
		next_state = LEGUP_F_main_BB_preheaderi_142;
LEGUP_F_main_BB_preheaderi_142:
		next_state = LEGUP_F_main_BB_preheaderi_143;
LEGUP_F_main_BB_preheaderi_143:
		next_state = LEGUP_F_main_BB_preheaderi_144;
LEGUP_F_main_BB_preheaderi_144:
		next_state = LEGUP_function_call_145;
LEGUP_F_main_BB_preheaderi_146:
		next_state = LEGUP_F_main_BB_preheaderi_147;
LEGUP_F_main_BB_preheaderi_147:
		next_state = LEGUP_F_main_BB_preheaderi_148;
LEGUP_F_main_BB_preheaderi_148:
		next_state = LEGUP_F_main_BB_preheaderi_149;
LEGUP_F_main_BB_preheaderi_149:
		next_state = LEGUP_F_main_BB_preheaderi_150;
LEGUP_F_main_BB_preheaderi_150:
		next_state = LEGUP_F_main_BB_preheaderi_151;
LEGUP_F_main_BB_preheaderi_151:
		next_state = LEGUP_F_main_BB_preheaderi_152;
LEGUP_F_main_BB_preheaderi_152:
		next_state = LEGUP_F_main_BB_preheaderi_153;
LEGUP_F_main_BB_preheaderi_153:
		next_state = LEGUP_function_call_154;
LEGUP_F_main_BB_preheaderi_155:
		next_state = LEGUP_F_main_BB_preheaderi_156;
LEGUP_F_main_BB_preheaderi_156:
		next_state = LEGUP_F_main_BB_preheaderi_157;
LEGUP_F_main_BB_preheaderi_157:
		next_state = LEGUP_F_main_BB_preheaderi_158;
LEGUP_F_main_BB_preheaderi_158:
	if ((main_preheaderi_exitcond5_reg == 1'd1))
		next_state = LEGUP_F_main_BB_adpcm_mainexitpreheader_159;
	else if ((main_preheaderi_exitcond5_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi_108;
LEGUP_F_main_BB_preheaderipreheader_106:
		next_state = LEGUP_F_main_BB_preheaderipreheader_107;
LEGUP_F_main_BB_preheaderipreheader_107:
		next_state = LEGUP_F_main_BB_preheaderi_108;
LEGUP_F_main_BB_preheaderpreheader_162:
		next_state = LEGUP_F_main_BB_preheader_163;
LEGUP_F_main_BB_quantlexiti_67:
		next_state = LEGUP_F_main_BB_quantlexiti_68;
LEGUP_F_main_BB_quantlexiti_68:
		next_state = LEGUP_F_main_BB_quantlexiti_69;
LEGUP_F_main_BB_quantlexiti_69:
		next_state = LEGUP_F_main_BB_quantlexiti_70;
LEGUP_F_main_BB_quantlexiti_70:
		next_state = LEGUP_F_main_BB_quantlexiti_71;
LEGUP_F_main_BB_quantlexiti_71:
		next_state = LEGUP_F_main_BB_quantlexiti_72;
LEGUP_F_main_BB_quantlexiti_72:
		next_state = LEGUP_F_main_BB_quantlexiti_73;
LEGUP_F_main_BB_quantlexiti_73:
		next_state = LEGUP_function_call_74;
LEGUP_F_main_BB_quantlexiti_75:
		next_state = LEGUP_F_main_BB_quantlexiti_76;
LEGUP_F_main_BB_quantlexiti_76:
		next_state = LEGUP_F_main_BB_quantlexiti_77;
LEGUP_F_main_BB_quantlexiti_77:
		next_state = LEGUP_F_main_BB_quantlexiti_78;
LEGUP_F_main_BB_quantlexiti_78:
		next_state = LEGUP_F_main_BB_quantlexiti_79;
LEGUP_F_main_BB_quantlexiti_79:
		next_state = LEGUP_F_main_BB_quantlexiti_80;
LEGUP_F_main_BB_quantlexiti_80:
		next_state = LEGUP_F_main_BB_quantlexiti_81;
LEGUP_F_main_BB_quantlexiti_81:
		next_state = LEGUP_F_main_BB_quantlexiti_82;
LEGUP_F_main_BB_quantlexiti_82:
		next_state = LEGUP_F_main_BB_quantlexiti_83;
LEGUP_F_main_BB_quantlexiti_83:
		next_state = LEGUP_F_main_BB_quantlexiti_84;
LEGUP_F_main_BB_quantlexiti_84:
		next_state = LEGUP_F_main_BB_quantlexiti_85;
LEGUP_F_main_BB_quantlexiti_85:
		next_state = LEGUP_F_main_BB_quantlexiti_86;
LEGUP_F_main_BB_quantlexiti_86:
		next_state = LEGUP_F_main_BB_quantlexiti_87;
LEGUP_F_main_BB_quantlexiti_87:
		next_state = LEGUP_F_main_BB_quantlexiti_88;
LEGUP_F_main_BB_quantlexiti_88:
		next_state = LEGUP_function_call_89;
LEGUP_F_main_BB_quantlexiti_90:
		next_state = LEGUP_F_main_BB_quantlexiti_91;
LEGUP_F_main_BB_quantlexiti_91:
	if ((main_quantlexiti_236_reg == 1'd1))
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_92;
	else if ((main_quantlexiti_236_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderipreheader_106;
LEGUP_function_call_145:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi_146;
LEGUP_function_call_154:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi_155;
LEGUP_function_call_74:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_quantlexiti_75;
LEGUP_function_call_89:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_quantlexiti_90;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13 = 64'd0;
	end
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__2_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_indvar13 = main_2_indvarnext14_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_reg <= main_1_indvar13;
		if (start == 1'b0 && ^(main_1_indvar13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar13_reg"); $finish; end
	end
	/* main: %1*/
	/*   %indvar13 = phi i64 [ %indvar.next14, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__2_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar13_reg <= main_1_indvar13;
		if (start == 1'b0 && ^(main_1_indvar13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond15 = icmp eq i64 %indvar13, 24*/
		main_1_exitcond15 = (main_1_indvar13_reg == 64'd24);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond15 = icmp eq i64 %indvar13, 24*/
	if ((cur_state == LEGUP_F_main_BB__1_26)) begin
		main_1_exitcond15_reg <= main_1_exitcond15;
		if (start == 1'b0 && ^(main_1_exitcond15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %3 = shl i64 %indvar13, 2*/
		main_2_3 = (main_1_indvar13_reg <<< (64'd2 % 64'd64));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %3 = shl i64 %indvar13, 2*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		main_2_3_reg <= main_2_3;
		if (start == 1'b0 && ^(main_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
		main_2_4 = (main_2_3 + 1'd0);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		main_2_4_reg <= main_2_4;
		if (start == 1'b0 && ^(main_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %5 = trunc i64 %4 to i32*/
		main_2_5 = main_2_4[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %5 = trunc i64 %4 to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		main_2_5_reg <= main_2_5;
		if (start == 1'b0 && ^(main_2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %s.i.0 = inttoptr i32 %5 to i32**/
		main_2_si0 = main_2_5;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %s.i.0 = inttoptr i32 %5 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		main_2_si0_reg <= main_2_si0;
		if (start == 1'b0 && ^(main_2_si0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_si0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
		main_2_indvarnext14 = (main_1_indvar13_reg + 64'd1);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %indvar.next14 = add i64 %indvar13, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		main_2_indvarnext14_reg <= main_2_indvarnext14;
		if (start == 1'b0 && ^(main_2_indvarnext14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_indvarnext14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_indvar9 = main_encodeexit_crit_edge_indvarnext10_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_reg <= main_legup_memset_4_i64exit_indvar9;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvar9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvar9_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next10, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar9_reg <= main_legup_memset_4_i64exit_indvar9;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvar9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvar9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_6 = main_encodeexit_crit_edge_phitmp1;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_reg <= main_legup_memset_4_i64exit_6;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_6_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %6 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp1, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_6_reg <= main_legup_memset_4_i64exit_6;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_7 = main_encodeexit_crit_edge_phitmp;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_reg <= main_legup_memset_4_i64exit_7;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_7_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %7 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_7_reg <= main_legup_memset_4_i64exit_7;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_8 = main_encodeexit_crit_edge_pre57_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_reg <= main_legup_memset_4_i64exit_8;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_8_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre57, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_8_reg <= main_legup_memset_4_i64exit_8;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_9 = main_encodeexit_crit_edge_pre56_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_reg <= main_legup_memset_4_i64exit_9;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_9_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %9 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre56, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_9_reg <= main_legup_memset_4_i64exit_9;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_10 = main_encodeexit_crit_edge_pre55_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_reg <= main_legup_memset_4_i64exit_10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre55, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_10_reg <= main_legup_memset_4_i64exit_10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_11 = main_encodeexit_crit_edge_pre54_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_reg <= main_legup_memset_4_i64exit_11;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_11_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre54, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_11_reg <= main_legup_memset_4_i64exit_11;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_12 = main_encodeexit_crit_edge_pre53_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_reg <= main_legup_memset_4_i64exit_12;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_12_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre53, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_12_reg <= main_legup_memset_4_i64exit_12;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_13 = main_encodeexit_crit_edge_pre52_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_reg <= main_legup_memset_4_i64exit_13;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_13_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre52, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_13_reg <= main_legup_memset_4_i64exit_13;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_14 = main_encodeexit_crit_edge_pre51_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_reg <= main_legup_memset_4_i64exit_14;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_14_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre51, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_14_reg <= main_legup_memset_4_i64exit_14;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_15 = main_encodeexit_crit_edge_pre50_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_reg <= main_legup_memset_4_i64exit_15;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_15_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre50, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_15_reg <= main_legup_memset_4_i64exit_15;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_16 = main_encodeexit_crit_edge_pre49_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_reg <= main_legup_memset_4_i64exit_16;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_16_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre49, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_16_reg <= main_legup_memset_4_i64exit_16;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_17 = main_encodeexit_crit_edge_pre48_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_reg <= main_legup_memset_4_i64exit_17;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_17_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre48, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_17_reg <= main_legup_memset_4_i64exit_17;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_18 = main_encodeexit_crit_edge_pre47_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_reg <= main_legup_memset_4_i64exit_18;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_18_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre47, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_18_reg <= main_legup_memset_4_i64exit_18;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_19 = main_encodeexit_crit_edge_pre46_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_reg <= main_legup_memset_4_i64exit_19;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_19_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre46, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_19_reg <= main_legup_memset_4_i64exit_19;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_20 = main_encodeexit_crit_edge_pre45_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_reg <= main_legup_memset_4_i64exit_20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre45, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_20_reg <= main_legup_memset_4_i64exit_20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_21 = main_encodeexit_crit_edge_pre44_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_reg <= main_legup_memset_4_i64exit_21;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_21_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre44, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_21_reg <= main_legup_memset_4_i64exit_21;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_22 = main_encodeexit_crit_edge_pre43_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_reg <= main_legup_memset_4_i64exit_22;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_22_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre43, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_22_reg <= main_legup_memset_4_i64exit_22;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_23 = main_encodeexit_crit_edge_pre42_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_reg <= main_legup_memset_4_i64exit_23;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_23_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre42, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_23_reg <= main_legup_memset_4_i64exit_23;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_24 = main_encodeexit_crit_edge_pre41_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_reg <= main_legup_memset_4_i64exit_24;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_24_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre41, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_24_reg <= main_legup_memset_4_i64exit_24;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_25 = main_encodeexit_crit_edge_pre40_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_reg <= main_legup_memset_4_i64exit_25;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_25_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre40, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_25_reg <= main_legup_memset_4_i64exit_25;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_26 = main_encodeexit_crit_edge_pre39_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_reg <= main_legup_memset_4_i64exit_26;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_26_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre39, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_26_reg <= main_legup_memset_4_i64exit_26;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_27 = main_encodeexit_crit_edge_pre38_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_reg <= main_legup_memset_4_i64exit_27;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_27_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre38, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_27_reg <= main_legup_memset_4_i64exit_27;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_28 = main_encodeexit_crit_edge_pre37_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_reg <= main_legup_memset_4_i64exit_28;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_28_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre37, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_28_reg <= main_legup_memset_4_i64exit_28;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_29 = main_encodeexit_crit_edge_pre_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_reg <= main_legup_memset_4_i64exit_29;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_29_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %.pre, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_29_reg <= main_legup_memset_4_i64exit_29;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ph20 = main_legup_memset_4_i64exit_ph10_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_reg <= main_legup_memset_4_i64exit_ph20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %ph1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph20_reg <= main_legup_memset_4_i64exit_ph20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %210, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %210, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ph10 = main_quantlexiti_210_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %210, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_reg <= main_legup_memset_4_i64exit_ph10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ph1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %210, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ph10_reg <= main_legup_memset_4_i64exit_ph10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ph10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_nbh0 = main_encodeexit_crit_edge_phitmp5_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_reg <= main_legup_memset_4_i64exit_nbh0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbh0_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbh.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp5, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbh0_reg <= main_legup_memset_4_i64exit_nbh0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbh0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0 = 32'd8;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_deth0 = main_encodeexit_crit_edge_242_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_reg <= main_legup_memset_4_i64exit_deth0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_deth0_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %deth.0 = phi i32 [ 8, %legup_memset_4_i64.exit.preheader ], [ %242, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_deth0_reg <= main_legup_memset_4_i64exit_deth0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_deth0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ah20 = main_quantlexiti_ii19_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_reg <= main_legup_memset_4_i64exit_ah20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i.i19, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah20_reg <= main_legup_memset_4_i64exit_ah20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rh20 = main_legup_memset_4_i64exit_rh10_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_reg <= main_legup_memset_4_i64exit_rh20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rh1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh20_reg <= main_legup_memset_4_i64exit_rh20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_ah10 = main_encodeexit_crit_edge_apl12ii22_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_reg <= main_legup_memset_4_i64exit_ah10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %ah1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i.i22, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_ah10_reg <= main_legup_memset_4_i64exit_ah10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_ah10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rh10 = main_encodeexit_crit_edge_237_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_reg <= main_legup_memset_4_i64exit_rh10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rh1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %237, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rh10_reg <= main_legup_memset_4_i64exit_rh10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rh10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_plt20 = main_legup_memset_4_i64exit_plt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_reg <= main_legup_memset_4_i64exit_plt20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %plt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt20_reg <= main_legup_memset_4_i64exit_plt20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %138, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %138, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_plt10 = main_quantlexiti_138_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %138, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_reg <= main_legup_memset_4_i64exit_plt10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %plt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %138, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_plt10_reg <= main_legup_memset_4_i64exit_plt10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_plt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_nbl0 = main_encodeexit_crit_edge_phitmp3_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_reg <= main_legup_memset_4_i64exit_nbl0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbl0_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %nbl.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %phitmp3, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_nbl0_reg <= main_legup_memset_4_i64exit_nbl0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_nbl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0 = 32'd32;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_detl0 = main_encodeexit_crit_edge_248_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_reg <= main_legup_memset_4_i64exit_detl0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_detl0_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %detl.0 = phi i32 [ 32, %legup_memset_4_i64.exit.preheader ], [ %248, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_detl0_reg <= main_legup_memset_4_i64exit_detl0;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_detl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_al20 = main_quantlexiti_i11i8_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_reg <= main_legup_memset_4_i64exit_al20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %...i11.i8, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al20_reg <= main_legup_memset_4_i64exit_al20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rlt20 = main_legup_memset_4_i64exit_rlt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_reg <= main_legup_memset_4_i64exit_rlt20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt20_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt2.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt20_reg <= main_legup_memset_4_i64exit_rlt20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_al10 = main_encodeexit_crit_edge_apl12i7i11_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_reg <= main_legup_memset_4_i64exit_al10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %al1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %apl1.2.i7.i11, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_al10_reg <= main_legup_memset_4_i64exit_al10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_al10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4_i64exit_rlt10 = main_encodeexit_crit_edge_243_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_reg <= main_legup_memset_4_i64exit_rlt10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt10_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %rlt1.0 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %243, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_rlt10_reg <= main_legup_memset_4_i64exit_rlt10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_rlt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %i.02.i = shl i32 %indvar9, 1*/
		main_legup_memset_4_i64exit_i02i = (main_legup_memset_4_i64exit_indvar9_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %i.02.i = shl i32 %indvar9, 1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_i02i_reg <= main_legup_memset_4_i64exit_i02i;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_i02i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_i02i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
		main_legup_memset_4_i64exit_30 = (main_legup_memset_4_i64exit_i02i + 32'd2);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = add i32 %i.02.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_30_reg <= main_legup_memset_4_i64exit_30;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %31 = or i32 %i.02.i, 1*/
		main_legup_memset_4_i64exit_31 = (main_legup_memset_4_i64exit_i02i | 32'd1);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %31 = or i32 %i.02.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_31_reg <= main_legup_memset_4_i64exit_31;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep11 = getelementptr [100 x i32]* @test_data, i32 0, i32 %31*/
		main_legup_memset_4_i64exit_scevgep11 = (1'd0 | (4 * main_legup_memset_4_i64exit_31));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep11 = getelementptr [100 x i32]* @test_data, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_scevgep11_reg <= main_legup_memset_4_i64exit_scevgep11;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep12 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i.02.i*/
		main_legup_memset_4_i64exit_scevgep12 = (1'd0 | (4 * main_legup_memset_4_i64exit_i02i));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep12 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i.02.i*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_scevgep12_reg <= main_legup_memset_4_i64exit_scevgep12;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_32 = main_signed_divide_32_0;
end
always @(*) begin
/* main: %legup_memset_4_i64.exit*/
/*   %32 = sdiv i32 %i.02.i, 2*/
	main_legup_memset_4_i64exit_32_reg = main_preheaderi_252_reg;
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep12, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_33 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_33_reg <= main_legup_memset_4_i64exit_33;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = load i32* %scevgep11, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_34 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_34_reg <= main_legup_memset_4_i64exit_34;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_34_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_35 = main_legup_memset_4_i64exit_35_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = mul nsw i32 %29, 12*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_35_reg <= main_legup_memset_4_i64exit_35;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_35_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = mul nsw i32 %29, 12*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_35_reg <= main_legup_memset_4_i64exit_35;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_35_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_36 = main_legup_memset_4_i64exit_36_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = mul nsw i32 %28, -44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_36_reg <= main_legup_memset_4_i64exit_36;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_36_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = mul nsw i32 %28, -44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_36_reg <= main_legup_memset_4_i64exit_36;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_36_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_37 = main_legup_memset_4_i64exit_37_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = mul nsw i32 %27, -44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_37_reg <= main_legup_memset_4_i64exit_37;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_37_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = mul nsw i32 %27, -44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_37_reg <= main_legup_memset_4_i64exit_37;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %38 = add nsw i32 %37, %35*/
		main_legup_memset_4_i64exit_38 = (main_legup_memset_4_i64exit_37 + main_legup_memset_4_i64exit_35);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %38 = add nsw i32 %37, %35*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_38_reg <= main_legup_memset_4_i64exit_38;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_38_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_39 = main_legup_memset_4_i64exit_39_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = mul nsw i32 %26, 212*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_39_reg <= main_legup_memset_4_i64exit_39;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_39_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = mul nsw i32 %26, 212*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_39_reg <= main_legup_memset_4_i64exit_39;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = add nsw i32 %39, %36*/
		main_legup_memset_4_i64exit_40 = (main_legup_memset_4_i64exit_39 + main_legup_memset_4_i64exit_36);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = add nsw i32 %39, %36*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_40_reg <= main_legup_memset_4_i64exit_40;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_40_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_41 = main_legup_memset_4_i64exit_41_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = mul nsw i32 %25, 48*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_41_reg <= main_legup_memset_4_i64exit_41;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_41_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = mul nsw i32 %25, 48*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_41_reg <= main_legup_memset_4_i64exit_41;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = add nsw i32 %41, %38*/
		main_legup_memset_4_i64exit_42 = (main_legup_memset_4_i64exit_41 + main_legup_memset_4_i64exit_38);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = add nsw i32 %41, %38*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_42_reg <= main_legup_memset_4_i64exit_42;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_42_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_43 = main_legup_memset_4_i64exit_43_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = mul nsw i32 %24, -624*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_43_reg <= main_legup_memset_4_i64exit_43;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = mul nsw i32 %24, -624*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_43_reg <= main_legup_memset_4_i64exit_43;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = add nsw i32 %43, %40*/
		main_legup_memset_4_i64exit_44 = (main_legup_memset_4_i64exit_43 + main_legup_memset_4_i64exit_40);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = add nsw i32 %43, %40*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_44_reg <= main_legup_memset_4_i64exit_44;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = shl nsw i32 %23, 7*/
		main_legup_memset_4_i64exit_45 = (main_legup_memset_4_i64exit_23_reg <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = shl nsw i32 %23, 7*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_45_reg <= main_legup_memset_4_i64exit_45;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = add nsw i32 %45, %42*/
		main_legup_memset_4_i64exit_46 = (main_legup_memset_4_i64exit_45_reg + main_legup_memset_4_i64exit_42);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = add nsw i32 %45, %42*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_46_reg <= main_legup_memset_4_i64exit_46;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_46_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_47 = main_legup_memset_4_i64exit_47_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = mul nsw i32 %22, 1448*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_47_reg <= main_legup_memset_4_i64exit_47;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_47_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = mul nsw i32 %22, 1448*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_47_reg <= main_legup_memset_4_i64exit_47;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = add nsw i32 %47, %44*/
		main_legup_memset_4_i64exit_48 = (main_legup_memset_4_i64exit_47 + main_legup_memset_4_i64exit_44);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = add nsw i32 %47, %44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_48_reg <= main_legup_memset_4_i64exit_48;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_48_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_49 = main_legup_memset_4_i64exit_49_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = mul nsw i32 %21, -840*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_49_reg <= main_legup_memset_4_i64exit_49;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_49_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = mul nsw i32 %21, -840*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_49_reg <= main_legup_memset_4_i64exit_49;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = add nsw i32 %49, %46*/
		main_legup_memset_4_i64exit_50 = (main_legup_memset_4_i64exit_49 + main_legup_memset_4_i64exit_46);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = add nsw i32 %49, %46*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_50_reg <= main_legup_memset_4_i64exit_50;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_50_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_51 = main_legup_memset_4_i64exit_51_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = mul nsw i32 %20, -3220*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_51_reg <= main_legup_memset_4_i64exit_51;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_51_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = mul nsw i32 %20, -3220*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_51_reg <= main_legup_memset_4_i64exit_51;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = add nsw i32 %51, %48*/
		main_legup_memset_4_i64exit_52 = (main_legup_memset_4_i64exit_51 + main_legup_memset_4_i64exit_48);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = add nsw i32 %51, %48*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_52_reg <= main_legup_memset_4_i64exit_52;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_52_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_53 = main_legup_memset_4_i64exit_53_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = mul nsw i32 %19, 3804*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_53_reg <= main_legup_memset_4_i64exit_53;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_53_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = mul nsw i32 %19, 3804*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_53_reg <= main_legup_memset_4_i64exit_53;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = add nsw i32 %53, %50*/
		main_legup_memset_4_i64exit_54 = (main_legup_memset_4_i64exit_53 + main_legup_memset_4_i64exit_50);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = add nsw i32 %53, %50*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_54_reg <= main_legup_memset_4_i64exit_54;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_54_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_55 = main_legup_memset_4_i64exit_55_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = mul nsw i32 %18, 15504*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_55_reg <= main_legup_memset_4_i64exit_55;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = mul nsw i32 %18, 15504*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_55_reg <= main_legup_memset_4_i64exit_55;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = add nsw i32 %55, %52*/
		main_legup_memset_4_i64exit_56 = (main_legup_memset_4_i64exit_55 + main_legup_memset_4_i64exit_52);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = add nsw i32 %55, %52*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_56_reg <= main_legup_memset_4_i64exit_56;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_56_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_57 = main_legup_memset_4_i64exit_57_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = mul nsw i32 %17, 15504*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_57_reg <= main_legup_memset_4_i64exit_57;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = mul nsw i32 %17, 15504*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_57_reg <= main_legup_memset_4_i64exit_57;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %58 = add nsw i32 %57, %54*/
		main_legup_memset_4_i64exit_58 = (main_legup_memset_4_i64exit_57 + main_legup_memset_4_i64exit_54);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %58 = add nsw i32 %57, %54*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_58_reg <= main_legup_memset_4_i64exit_58;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_58_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_59 = main_legup_memset_4_i64exit_59_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = mul nsw i32 %16, 3804*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_59_reg <= main_legup_memset_4_i64exit_59;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = mul nsw i32 %16, 3804*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_59_reg <= main_legup_memset_4_i64exit_59;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %60 = add nsw i32 %59, %56*/
		main_legup_memset_4_i64exit_60 = (main_legup_memset_4_i64exit_59 + main_legup_memset_4_i64exit_56);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %60 = add nsw i32 %59, %56*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_60_reg <= main_legup_memset_4_i64exit_60;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_60_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_61 = main_legup_memset_4_i64exit_61_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = mul nsw i32 %15, -3220*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_61_reg <= main_legup_memset_4_i64exit_61;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = mul nsw i32 %15, -3220*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_61_reg <= main_legup_memset_4_i64exit_61;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %62 = add nsw i32 %61, %58*/
		main_legup_memset_4_i64exit_62 = (main_legup_memset_4_i64exit_61 + main_legup_memset_4_i64exit_58);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %62 = add nsw i32 %61, %58*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_62_reg <= main_legup_memset_4_i64exit_62;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_62_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_63 = main_legup_memset_4_i64exit_63_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = mul nsw i32 %14, -840*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_63_reg <= main_legup_memset_4_i64exit_63;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_63_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = mul nsw i32 %14, -840*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_63_reg <= main_legup_memset_4_i64exit_63;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %64 = add nsw i32 %63, %60*/
		main_legup_memset_4_i64exit_64 = (main_legup_memset_4_i64exit_63 + main_legup_memset_4_i64exit_60);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %64 = add nsw i32 %63, %60*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_64_reg <= main_legup_memset_4_i64exit_64;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_64_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_65 = main_legup_memset_4_i64exit_65_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = mul nsw i32 %13, 1448*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_65_reg <= main_legup_memset_4_i64exit_65;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_65_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = mul nsw i32 %13, 1448*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_65_reg <= main_legup_memset_4_i64exit_65;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %66 = add nsw i32 %65, %62*/
		main_legup_memset_4_i64exit_66 = (main_legup_memset_4_i64exit_65 + main_legup_memset_4_i64exit_62);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %66 = add nsw i32 %65, %62*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_66_reg <= main_legup_memset_4_i64exit_66;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = shl nsw i32 %12, 7*/
		main_legup_memset_4_i64exit_67 = (main_legup_memset_4_i64exit_12_reg <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %67 = shl nsw i32 %12, 7*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_legup_memset_4_i64exit_67_reg <= main_legup_memset_4_i64exit_67;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %68 = add nsw i32 %67, %64*/
		main_legup_memset_4_i64exit_68 = (main_legup_memset_4_i64exit_67_reg + main_legup_memset_4_i64exit_64);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %68 = add nsw i32 %67, %64*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_68_reg <= main_legup_memset_4_i64exit_68;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_68_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_69 = main_legup_memset_4_i64exit_69_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = mul nsw i32 %11, -624*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_69_reg <= main_legup_memset_4_i64exit_69;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_69_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = mul nsw i32 %11, -624*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_69_reg <= main_legup_memset_4_i64exit_69;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %70 = add nsw i32 %69, %66*/
		main_legup_memset_4_i64exit_70 = (main_legup_memset_4_i64exit_69_reg + main_legup_memset_4_i64exit_66_reg);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %70 = add nsw i32 %69, %66*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_70_reg <= main_legup_memset_4_i64exit_70;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_70_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_71 = main_legup_memset_4_i64exit_71_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = mul nsw i32 %10, 48*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_71_reg <= main_legup_memset_4_i64exit_71;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_71_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = mul nsw i32 %10, 48*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_71_reg <= main_legup_memset_4_i64exit_71;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %72 = add nsw i32 %71, %68*/
		main_legup_memset_4_i64exit_72 = (main_legup_memset_4_i64exit_71_reg + main_legup_memset_4_i64exit_68_reg);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %72 = add nsw i32 %71, %68*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_72_reg <= main_legup_memset_4_i64exit_72;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_72_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_73 = main_legup_memset_4_i64exit_73_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = mul nsw i32 %9, 212*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_73_reg <= main_legup_memset_4_i64exit_73;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_73_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = mul nsw i32 %9, 212*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_73_reg <= main_legup_memset_4_i64exit_73;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %74 = add nsw i32 %73, %70*/
		main_legup_memset_4_i64exit_74 = (main_legup_memset_4_i64exit_73_reg + main_legup_memset_4_i64exit_70);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %74 = add nsw i32 %73, %70*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_74_reg <= main_legup_memset_4_i64exit_74;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_74_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_75 = main_legup_memset_4_i64exit_75_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = mul nsw i32 %8, -44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_75_reg <= main_legup_memset_4_i64exit_75;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_75_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = mul nsw i32 %8, -44*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_75_reg <= main_legup_memset_4_i64exit_75;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %75, %72*/
		main_legup_memset_4_i64exit_76 = (main_legup_memset_4_i64exit_75_reg + main_legup_memset_4_i64exit_72);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %76 = add nsw i32 %75, %72*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_76_reg <= main_legup_memset_4_i64exit_76;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %7, %74*/
		main_legup_memset_4_i64exit_77 = (main_legup_memset_4_i64exit_7_reg + main_legup_memset_4_i64exit_74);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %77 = add nsw i32 %7, %74*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_77_reg <= main_legup_memset_4_i64exit_77;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %6, %76*/
		main_legup_memset_4_i64exit_78 = (main_legup_memset_4_i64exit_6_reg + main_legup_memset_4_i64exit_76);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %78 = add nsw i32 %6, %76*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_78_reg <= main_legup_memset_4_i64exit_78;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %79 = add nsw i32 %78, %77*/
		main_legup_memset_4_i64exit_79 = (main_legup_memset_4_i64exit_78 + main_legup_memset_4_i64exit_77);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %79 = add nsw i32 %78, %77*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_79_reg <= main_legup_memset_4_i64exit_79;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %80 = ashr i32 %79, 15*/
		main_legup_memset_4_i64exit_80 = ($signed(main_legup_memset_4_i64exit_79) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %80 = ashr i32 %79, 15*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_80_reg <= main_legup_memset_4_i64exit_80;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %81 = sub nsw i32 %77, %78*/
		main_legup_memset_4_i64exit_81 = (main_legup_memset_4_i64exit_77 - main_legup_memset_4_i64exit_78);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %81 = sub nsw i32 %77, %78*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_81_reg <= main_legup_memset_4_i64exit_81;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = ashr i32 %81, 15*/
		main_legup_memset_4_i64exit_82 = ($signed(main_legup_memset_4_i64exit_81) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %82 = ashr i32 %81, 15*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_82_reg <= main_legup_memset_4_i64exit_82;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_83 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_83_reg <= main_legup_memset_4_i64exit_83;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_84 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		main_legup_memset_4_i64exit_84_reg <= main_legup_memset_4_i64exit_84;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_84_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_85 = main_legup_memset_4_i64exit_85_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = mul nsw i32 %84, %83*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_85_reg <= main_legup_memset_4_i64exit_85;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_85_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = mul nsw i32 %84, %83*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_85_reg <= main_legup_memset_4_i64exit_85;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_86 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_86_reg <= main_legup_memset_4_i64exit_86;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_87 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		main_legup_memset_4_i64exit_87_reg <= main_legup_memset_4_i64exit_87;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_87_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_88 = main_legup_memset_4_i64exit_88_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = mul nsw i32 %87, %86*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_88_reg <= main_legup_memset_4_i64exit_88;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_88_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = mul nsw i32 %87, %86*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_88_reg <= main_legup_memset_4_i64exit_88;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = add nsw i32 %88, %85*/
		main_legup_memset_4_i64exit_89 = (main_legup_memset_4_i64exit_88 + main_legup_memset_4_i64exit_85_reg);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %89 = add nsw i32 %88, %85*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_89_reg <= main_legup_memset_4_i64exit_89;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_90 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_90_reg <= main_legup_memset_4_i64exit_90;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_91 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		main_legup_memset_4_i64exit_91_reg <= main_legup_memset_4_i64exit_91;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_91_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_92 = main_legup_memset_4_i64exit_92_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = mul nsw i32 %91, %90*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_92_reg <= main_legup_memset_4_i64exit_92;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_92_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = mul nsw i32 %91, %90*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_92_reg <= main_legup_memset_4_i64exit_92;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = add nsw i32 %89, %92*/
		main_legup_memset_4_i64exit_93 = (main_legup_memset_4_i64exit_89_reg + main_legup_memset_4_i64exit_92);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %93 = add nsw i32 %89, %92*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_93_reg <= main_legup_memset_4_i64exit_93;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_94 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_94_reg <= main_legup_memset_4_i64exit_94;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_95 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		main_legup_memset_4_i64exit_95_reg <= main_legup_memset_4_i64exit_95;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_95_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_96 = main_legup_memset_4_i64exit_96_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = mul nsw i32 %95, %94*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_96_reg <= main_legup_memset_4_i64exit_96;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_96_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = mul nsw i32 %95, %94*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_96_reg <= main_legup_memset_4_i64exit_96;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = add nsw i32 %93, %96*/
		main_legup_memset_4_i64exit_97 = (main_legup_memset_4_i64exit_93_reg + main_legup_memset_4_i64exit_96);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %97 = add nsw i32 %93, %96*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_97_reg <= main_legup_memset_4_i64exit_97;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_98 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_98_reg <= main_legup_memset_4_i64exit_98;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_99 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		main_legup_memset_4_i64exit_99_reg <= main_legup_memset_4_i64exit_99;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_99_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_100 = main_legup_memset_4_i64exit_100_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = mul nsw i32 %99, %98*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_100_reg <= main_legup_memset_4_i64exit_100;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_100_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = mul nsw i32 %99, %98*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_100_reg <= main_legup_memset_4_i64exit_100;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = add nsw i32 %97, %100*/
		main_legup_memset_4_i64exit_101 = (main_legup_memset_4_i64exit_97_reg + main_legup_memset_4_i64exit_100);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %101 = add nsw i32 %97, %100*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_101_reg <= main_legup_memset_4_i64exit_101;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_102 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_102_reg <= main_legup_memset_4_i64exit_102;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_103 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		main_legup_memset_4_i64exit_103_reg <= main_legup_memset_4_i64exit_103;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_103_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_104 = main_legup_memset_4_i64exit_104_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = mul nsw i32 %103, %102*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_104_reg <= main_legup_memset_4_i64exit_104;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_104_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = mul nsw i32 %103, %102*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_104_reg <= main_legup_memset_4_i64exit_104;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = add nsw i32 %101, %104*/
		main_legup_memset_4_i64exit_105 = (main_legup_memset_4_i64exit_101_reg + main_legup_memset_4_i64exit_104);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %105 = add nsw i32 %101, %104*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_105_reg <= main_legup_memset_4_i64exit_105;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = ashr i32 %105, 14*/
		main_legup_memset_4_i64exit_106 = ($signed(main_legup_memset_4_i64exit_105) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %106 = ashr i32 %105, 14*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_106_reg <= main_legup_memset_4_i64exit_106;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_106_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_107 = main_legup_memset_4_i64exit_107_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %107 = mul i32 %al1.0, %rlt1.0*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_107_reg <= main_legup_memset_4_i64exit_107;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_107_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %107 = mul i32 %al1.0, %rlt1.0*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_107_reg <= main_legup_memset_4_i64exit_107;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_107_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4_i64exit_108 = main_legup_memset_4_i64exit_108_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %108 = mul i32 %al2.0, %rlt2.0*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_108_reg <= main_legup_memset_4_i64exit_108;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_108_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %108 = mul i32 %al2.0, %rlt2.0*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_108_reg <= main_legup_memset_4_i64exit_108;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %108, %107*/
		main_legup_memset_4_i64exit_tmpii1 = (main_legup_memset_4_i64exit_108 + main_legup_memset_4_i64exit_107);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp.i.i1 = add i32 %108, %107*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_tmpii1_reg <= main_legup_memset_4_i64exit_tmpii1;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_tmpii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_tmpii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp1.i.i2 = shl i32 %tmp.i.i1, 1*/
		main_legup_memset_4_i64exit_tmp1ii2 = (main_legup_memset_4_i64exit_tmpii1 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %tmp1.i.i2 = shl i32 %tmp.i.i1, 1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_tmp1ii2_reg <= main_legup_memset_4_i64exit_tmp1ii2;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_tmp1ii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_tmp1ii2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = ashr i32 %tmp1.i.i2, 15*/
		main_legup_memset_4_i64exit_109 = ($signed(main_legup_memset_4_i64exit_tmp1ii2) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %109 = ashr i32 %tmp1.i.i2, 15*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		main_legup_memset_4_i64exit_109_reg <= main_legup_memset_4_i64exit_109;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = add nsw i32 %109, %106*/
		main_legup_memset_4_i64exit_110 = (main_legup_memset_4_i64exit_109_reg + main_legup_memset_4_i64exit_106);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %110 = add nsw i32 %109, %106*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_110_reg <= main_legup_memset_4_i64exit_110;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %111 = sub nsw i32 %80, %110*/
		main_legup_memset_4_i64exit_111 = (main_legup_memset_4_i64exit_80_reg - main_legup_memset_4_i64exit_110);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %111 = sub nsw i32 %80, %110*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_111_reg <= main_legup_memset_4_i64exit_111;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %112 = icmp sgt i32 %111, -1*/
		main_legup_memset_4_i64exit_112 = ($signed(main_legup_memset_4_i64exit_111) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %112 = icmp sgt i32 %111, -1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_112_reg <= main_legup_memset_4_i64exit_112;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %113 = sub nsw i32 0, %111*/
		main_legup_memset_4_i64exit_113 = (32'd0 - main_legup_memset_4_i64exit_111);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %113 = sub nsw i32 0, %111*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_113_reg <= main_legup_memset_4_i64exit_113;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %m.0.i.i.i = select i1 %112, i32 %111, i32 %113*/
		main_legup_memset_4_i64exit_m0iii = (main_legup_memset_4_i64exit_112 ? main_legup_memset_4_i64exit_111 : main_legup_memset_4_i64exit_113);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %m.0.i.i.i = select i1 %112, i32 %111, i32 %113*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		main_legup_memset_4_i64exit_m0iii_reg <= main_legup_memset_4_i64exit_m0iii;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_m0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_m0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %115 = add nsw i32 %118, 1*/
		main_114_115 = (main_117_118_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %115 = add nsw i32 %118, 1*/
	if ((cur_state == LEGUP_F_main_BB__114_63)) begin
		main_114_115_reg <= main_114_115;
		if (start == 1'b0 && ^(main_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %116 = icmp slt i32 %119, 30*/
		main_114_116 = ($signed(main_117_119_reg) < $signed(32'd30));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %116 = icmp slt i32 %119, 30*/
	if ((cur_state == LEGUP_F_main_BB__114_63)) begin
		main_114_116_reg <= main_114_116;
		if (start == 1'b0 && ^(main_114_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %117*/
	/*   %118 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %115, %114 ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_117_118 = 32'd0;
	end
	/* main: %117*/
	/*   %118 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %115, %114 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__114_63) & (memory_controller_waitrequest == 1'd0)) & (main_114_116 == 1'd1))) */ begin
		main_117_118 = main_114_115;
	end
end
always @(posedge clk) begin
	/* main: %117*/
	/*   %118 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %115, %114 ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_117_118_reg <= main_117_118;
		if (start == 1'b0 && ^(main_117_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_117_118_reg"); $finish; end
	end
	/* main: %117*/
	/*   %118 = phi i32 [ 0, %legup_memset_4_i64.exit ], [ %115, %114 ]*/
	if ((((cur_state == LEGUP_F_main_BB__114_63) & (memory_controller_waitrequest == 1'd0)) & (main_114_116 == 1'd1))) begin
		main_117_118_reg <= main_117_118;
		if (start == 1'b0 && ^(main_117_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_117_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %117*/
	/*   %119 = add i32 %118, 1*/
		main_117_119 = (main_117_118_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %117*/
	/*   %119 = add i32 %118, 1*/
	if ((cur_state == LEGUP_F_main_BB__117_64)) begin
		main_117_119_reg <= main_117_119;
		if (start == 1'b0 && ^(main_117_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_117_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %117*/
	/*   %scevgep8 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %118*/
		main_117_scevgep8 = (1'd0 | (4 * main_117_118_reg));
end
always @(posedge clk) begin
	/* main: %117*/
	/*   %scevgep8 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %118*/
	if ((cur_state == LEGUP_F_main_BB__117_64)) begin
		main_117_scevgep8_reg <= main_117_scevgep8;
		if (start == 1'b0 && ^(main_117_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_117_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %117*/
	/*   %120 = load i32* %scevgep8, align 4, !tbaa !1*/
		main_117_120 = decis_levl_out_a;
end
always @(posedge clk) begin
	/* main: %117*/
	/*   %120 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__117_65)) begin
		main_117_120_reg <= main_117_120;
		if (start == 1'b0 && ^(main_117_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_117_120_reg"); $finish; end
	end
end
always @(*) begin
	main_117_121 = main_117_121_stage0_reg;
end
always @(posedge clk) begin
	/* main: %117*/
	/*   %121 = mul nsw i32 %120, %detl.0*/
	if ((cur_state == LEGUP_F_main_BB__117_66)) begin
		main_117_121_reg <= main_117_121;
		if (start == 1'b0 && ^(main_117_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_117_121_reg"); $finish; end
	end
	/* main: %117*/
	/*   %121 = mul nsw i32 %120, %detl.0*/
	if ((cur_state == LEGUP_F_main_BB__117_66)) begin
		main_117_121_reg <= main_117_121;
		if (start == 1'b0 && ^(main_117_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_117_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %117*/
	/*   %122 = ashr i32 %121, 15*/
		main_117_122 = ($signed(main_117_121) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %117*/
	/*   %122 = ashr i32 %121, 15*/
	if ((cur_state == LEGUP_F_main_BB__117_66)) begin
		main_117_122_reg <= main_117_122;
		if (start == 1'b0 && ^(main_117_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_117_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %117*/
	/*   %123 = icmp sgt i32 %m.0.i.i.i, %122*/
		main_117_123 = ($signed(main_legup_memset_4_i64exit_m0iii_reg) > $signed(main_117_122));
end
always @(posedge clk) begin
	/* main: %117*/
	/*   %123 = icmp sgt i32 %m.0.i.i.i, %122*/
	if ((cur_state == LEGUP_F_main_BB__117_66)) begin
		main_117_123_reg <= main_117_123;
		if (start == 1'b0 && ^(main_117_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_117_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %118, %117 ], [ %119, %114 ]*/
	if ((((cur_state == LEGUP_F_main_BB__114_63) & (memory_controller_waitrequest == 1'd0)) & (main_114_116 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii = main_117_119_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %118, %117 ], [ %119, %114 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__117_66) & (memory_controller_waitrequest == 1'd0)) & (main_117_123 == 1'd0))) */ begin
		main_quantlexiti_mil0lcssaii = main_117_118_reg;
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %118, %117 ], [ %119, %114 ]*/
	if ((((cur_state == LEGUP_F_main_BB__114_63) & (memory_controller_waitrequest == 1'd0)) & (main_114_116 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_reg <= main_quantlexiti_mil0lcssaii;
		if (start == 1'b0 && ^(main_quantlexiti_mil0lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_mil0lcssaii_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %118, %117 ], [ %119, %114 ]*/
	if ((((cur_state == LEGUP_F_main_BB__117_66) & (memory_controller_waitrequest == 1'd0)) & (main_117_123 == 1'd0))) begin
		main_quantlexiti_mil0lcssaii_reg <= main_quantlexiti_mil0lcssaii;
		if (start == 1'b0 && ^(main_quantlexiti_mil0lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_mil0lcssaii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %quant26bt_pos.quant26bt_neg.i.i = select i1 %112, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
		main_quantlexiti_quant26bt_posquant26bt_negii = (main_legup_memset_4_i64exit_112_reg ? `TAG_g_quant26bt_pos_a : `TAG_g_quant26bt_neg_a);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %quant26bt_pos.quant26bt_neg.i.i = select i1 %112, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_quant26bt_posquant26bt_negii_reg <= main_quantlexiti_quant26bt_posquant26bt_negii;
		if (start == 1'b0 && ^(main_quantlexiti_quant26bt_posquant26bt_negii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_quant26bt_posquant26bt_negii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.in.i.i = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg.i.i, i32 0, i32 %mil.0.lcssa.i.i*/
		main_quantlexiti_ril0inii = (main_quantlexiti_quant26bt_posquant26bt_negii_reg + (4 * main_quantlexiti_mil0lcssaii_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.in.i.i = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg.i.i, i32 0, i32 %mil.0.lcssa.i.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_ril0inii_reg <= main_quantlexiti_ril0inii;
		if (start == 1'b0 && ^(main_quantlexiti_ril0inii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ril0inii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
		main_quantlexiti_ril0ii = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_ril0ii_reg <= main_quantlexiti_ril0ii;
		if (start == 1'b0 && ^(main_quantlexiti_ril0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ril0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %124 = ashr i32 %ril.0.i.i, 2*/
		main_quantlexiti_124 = ($signed(main_quantlexiti_ril0ii) >>> 32'd2);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %124 = ashr i32 %ril.0.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_124_reg <= main_quantlexiti_124;
		if (start == 1'b0 && ^(main_quantlexiti_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %125 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %124*/
		main_quantlexiti_125 = (1'd0 | (4 * main_quantlexiti_124));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %125 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %124*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_125_reg <= main_quantlexiti_125;
		if (start == 1'b0 && ^(main_quantlexiti_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
		main_quantlexiti_126 = qq4_code4_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_126_reg <= main_quantlexiti_126;
		if (start == 1'b0 && ^(main_quantlexiti_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_126_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_127 = main_quantlexiti_127_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %127 = mul nsw i32 %126, %detl.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_127_reg <= main_quantlexiti_127;
		if (start == 1'b0 && ^(main_quantlexiti_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_127_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %127 = mul nsw i32 %126, %detl.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_127_reg <= main_quantlexiti_127;
		if (start == 1'b0 && ^(main_quantlexiti_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %128 = ashr i32 %127, 15*/
		main_quantlexiti_128 = ($signed(main_quantlexiti_127) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %128 = ashr i32 %127, 15*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_128_reg <= main_quantlexiti_128;
		if (start == 1'b0 && ^(main_quantlexiti_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %129 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %124*/
		main_quantlexiti_129 = (1'd0 | (4 * main_quantlexiti_124));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %129 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %124*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_129_reg <= main_quantlexiti_129;
		if (start == 1'b0 && ^(main_quantlexiti_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
		main_quantlexiti_130 = wl_code_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_130_reg <= main_quantlexiti_130;
		if (start == 1'b0 && ^(main_quantlexiti_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %131 = add nsw i32 %nbl.0, %130*/
		main_quantlexiti_131 = (main_legup_memset_4_i64exit_nbl0_reg + main_quantlexiti_130);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %131 = add nsw i32 %nbl.0, %130*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_131_reg <= main_quantlexiti_131;
		if (start == 1'b0 && ^(main_quantlexiti_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %132 = icmp slt i32 %131, 0*/
		main_quantlexiti_132 = ($signed(main_quantlexiti_131) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %132 = icmp slt i32 %131, 0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_132_reg <= main_quantlexiti_132;
		if (start == 1'b0 && ^(main_quantlexiti_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i12.i3 = select i1 %132, i32 0, i32 %131*/
		main_quantlexiti_i12i3 = (main_quantlexiti_132 ? 32'd0 : main_quantlexiti_131);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..i12.i3 = select i1 %132, i32 0, i32 %131*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_i12i3_reg <= main_quantlexiti_i12i3;
		if (start == 1'b0 && ^(main_quantlexiti_i12i3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i12i3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %133 = icmp sgt i32 %..i12.i3, 18432*/
		main_quantlexiti_133 = ($signed(main_quantlexiti_i12i3) > $signed(32'd18432));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %133 = icmp sgt i32 %..i12.i3, 18432*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_133_reg <= main_quantlexiti_133;
		if (start == 1'b0 && ^(main_quantlexiti_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i13.i4 = select i1 %133, i32 18432, i32 %..i12.i3*/
		main_quantlexiti_i13i4 = (main_quantlexiti_133 ? 32'd18432 : main_quantlexiti_i12i3);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %...i13.i4 = select i1 %133, i32 18432, i32 %..i12.i3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_i13i4_reg <= main_quantlexiti_i13i4;
		if (start == 1'b0 && ^(main_quantlexiti_i13i4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i13i4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %134 = lshr i32 %...i13.i4, 6*/
		main_quantlexiti_134 = (main_quantlexiti_i13i4 >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %134 = lshr i32 %...i13.i4, 6*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_134_reg <= main_quantlexiti_134;
		if (start == 1'b0 && ^(main_quantlexiti_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %135 = and i32 %134, 31*/
		main_quantlexiti_135 = (main_quantlexiti_134 & 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %135 = and i32 %134, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_135_reg <= main_quantlexiti_135;
		if (start == 1'b0 && ^(main_quantlexiti_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %136 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %135*/
		main_quantlexiti_136 = (1'd0 | (4 * main_quantlexiti_135_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %136 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %135*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_136_reg <= main_quantlexiti_136;
		if (start == 1'b0 && ^(main_quantlexiti_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %137 = load i32* %136, align 4, !tbaa !1*/
		main_quantlexiti_137 = ilb_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %137 = load i32* %136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_137_reg <= main_quantlexiti_137;
		if (start == 1'b0 && ^(main_quantlexiti_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %138 = add nsw i32 %106, %128*/
		main_quantlexiti_138 = (main_legup_memset_4_i64exit_106_reg + main_quantlexiti_128);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %138 = add nsw i32 %106, %128*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_138_reg <= main_quantlexiti_138;
		if (start == 1'b0 && ^(main_quantlexiti_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %139 = shl nsw i32 %al1.0, 2*/
		main_quantlexiti_139 = (main_legup_memset_4_i64exit_al10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %139 = shl nsw i32 %al1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_139_reg <= main_quantlexiti_139;
		if (start == 1'b0 && ^(main_quantlexiti_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_139_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_140 = main_quantlexiti_140_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %140 = mul nsw i32 %plt1.0, %138*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_140_reg <= main_quantlexiti_140;
		if (start == 1'b0 && ^(main_quantlexiti_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_140_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %140 = mul nsw i32 %plt1.0, %138*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_140_reg <= main_quantlexiti_140;
		if (start == 1'b0 && ^(main_quantlexiti_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %141 = icmp sgt i32 %140, -1*/
		main_quantlexiti_141 = ($signed(main_quantlexiti_140) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %141 = icmp sgt i32 %140, -1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_141_reg <= main_quantlexiti_141;
		if (start == 1'b0 && ^(main_quantlexiti_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %142 = sub nsw i32 0, %139*/
		main_quantlexiti_142 = (32'd0 - main_quantlexiti_139);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %142 = sub nsw i32 0, %139*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_142_reg <= main_quantlexiti_142;
		if (start == 1'b0 && ^(main_quantlexiti_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i8.i5 = select i1 %141, i32 %142, i32 %139*/
		main_quantlexiti_1i8i5 = (main_quantlexiti_141 ? main_quantlexiti_142_reg : main_quantlexiti_139_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i8.i5 = select i1 %141, i32 %142, i32 %139*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_1i8i5_reg <= main_quantlexiti_1i8i5;
		if (start == 1'b0 && ^(main_quantlexiti_1i8i5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_1i8i5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %143 = ashr i32 %.1.i8.i5, 7*/
		main_quantlexiti_143 = ($signed(main_quantlexiti_1i8i5) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %143 = ashr i32 %.1.i8.i5, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_143_reg <= main_quantlexiti_143;
		if (start == 1'b0 && ^(main_quantlexiti_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_143_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_144 = main_quantlexiti_144_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %144 = mul nsw i32 %plt2.0, %138*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_144_reg <= main_quantlexiti_144;
		if (start == 1'b0 && ^(main_quantlexiti_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_144_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %144 = mul nsw i32 %plt2.0, %138*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_144_reg <= main_quantlexiti_144;
		if (start == 1'b0 && ^(main_quantlexiti_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %145 = ashr i32 %144, 31*/
		main_quantlexiti_145 = ($signed(main_quantlexiti_144) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %145 = ashr i32 %144, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_145_reg <= main_quantlexiti_145;
		if (start == 1'b0 && ^(main_quantlexiti_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %146 = and i32 %145, -256*/
		main_quantlexiti_146 = (main_quantlexiti_145 & -32'd256);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %146 = and i32 %145, -256*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_146_reg <= main_quantlexiti_146;
		if (start == 1'b0 && ^(main_quantlexiti_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %147 = or i32 %146, 128*/
		main_quantlexiti_147 = (main_quantlexiti_146 | 32'd128);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %147 = or i32 %146, 128*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_147_reg <= main_quantlexiti_147;
		if (start == 1'b0 && ^(main_quantlexiti_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_147_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_148 = main_quantlexiti_148_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %148 = mul nsw i32 %al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_148_reg <= main_quantlexiti_148;
		if (start == 1'b0 && ^(main_quantlexiti_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_148_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %148 = mul nsw i32 %al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_148_reg <= main_quantlexiti_148;
		if (start == 1'b0 && ^(main_quantlexiti_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %149 = ashr i32 %148, 7*/
		main_quantlexiti_149 = ($signed(main_quantlexiti_148) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %149 = ashr i32 %148, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_149_reg <= main_quantlexiti_149;
		if (start == 1'b0 && ^(main_quantlexiti_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %143, %149*/
		main_quantlexiti_wd40i9i6 = (main_quantlexiti_143 + main_quantlexiti_149_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i9.i6 = add nsw i32 %143, %149*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_wd40i9i6_reg <= main_quantlexiti_wd40i9i6;
		if (start == 1'b0 && ^(main_quantlexiti_wd40i9i6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_wd40i9i6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %150 = add nsw i32 %wd4.0.i9.i6, %147*/
		main_quantlexiti_150 = (main_quantlexiti_wd40i9i6 + main_quantlexiti_147);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %150 = add nsw i32 %wd4.0.i9.i6, %147*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_150_reg <= main_quantlexiti_150;
		if (start == 1'b0 && ^(main_quantlexiti_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %151 = icmp sgt i32 %150, 12288*/
		main_quantlexiti_151 = ($signed(main_quantlexiti_150) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %151 = icmp sgt i32 %150, 12288*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_151_reg <= main_quantlexiti_151;
		if (start == 1'b0 && ^(main_quantlexiti_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i10.i7 = select i1 %151, i32 12288, i32 %150*/
		main_quantlexiti_i10i7 = (main_quantlexiti_151 ? 32'd12288 : main_quantlexiti_150);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..i10.i7 = select i1 %151, i32 12288, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_i10i7_reg <= main_quantlexiti_i10i7;
		if (start == 1'b0 && ^(main_quantlexiti_i10i7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i10i7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %152 = icmp slt i32 %..i10.i7, -12288*/
		main_quantlexiti_152 = ($signed(main_quantlexiti_i10i7_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %152 = icmp slt i32 %..i10.i7, -12288*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_152_reg <= main_quantlexiti_152;
		if (start == 1'b0 && ^(main_quantlexiti_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i11.i8 = select i1 %152, i32 -12288, i32 %..i10.i7*/
		main_quantlexiti_i11i8 = (main_quantlexiti_152 ? -32'd12288 : main_quantlexiti_i10i7_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %...i11.i8 = select i1 %152, i32 -12288, i32 %..i10.i7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_i11i8_reg <= main_quantlexiti_i11i8;
		if (start == 1'b0 && ^(main_quantlexiti_i11i8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i11i8_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_153 = main_quantlexiti_153_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %153 = mul nsw i32 %al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_153_reg <= main_quantlexiti_153;
		if (start == 1'b0 && ^(main_quantlexiti_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_153_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %153 = mul nsw i32 %al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_153_reg <= main_quantlexiti_153;
		if (start == 1'b0 && ^(main_quantlexiti_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %154 = ashr i32 %153, 8*/
		main_quantlexiti_154 = ($signed(main_quantlexiti_153) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %154 = ashr i32 %153, 8*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_154_reg <= main_quantlexiti_154;
		if (start == 1'b0 && ^(main_quantlexiti_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %155 = ashr i32 %140, 31*/
		main_quantlexiti_155 = ($signed(main_quantlexiti_140) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %155 = ashr i32 %140, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_155_reg <= main_quantlexiti_155;
		if (start == 1'b0 && ^(main_quantlexiti_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %156 = and i32 %155, -384*/
		main_quantlexiti_156 = (main_quantlexiti_155 & -32'd384);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %156 = and i32 %155, -384*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_156_reg <= main_quantlexiti_156;
		if (start == 1'b0 && ^(main_quantlexiti_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %157 = add nsw i32 %154, 192*/
		main_quantlexiti_157 = (main_quantlexiti_154 + 32'd192);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %157 = add nsw i32 %154, 192*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_157_reg <= main_quantlexiti_157;
		if (start == 1'b0 && ^(main_quantlexiti_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %157, %156*/
		main_quantlexiti_apl10i5i9 = (main_quantlexiti_157_reg + main_quantlexiti_156);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i5.i9 = add nsw i32 %157, %156*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_apl10i5i9_reg <= main_quantlexiti_apl10i5i9;
		if (start == 1'b0 && ^(main_quantlexiti_apl10i5i9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10i5i9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %158 = sub nsw i32 15360, %...i11.i8*/
		main_quantlexiti_158 = (32'd15360 - main_quantlexiti_i11i8);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %158 = sub nsw i32 15360, %...i11.i8*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_158_reg <= main_quantlexiti_158;
		if (start == 1'b0 && ^(main_quantlexiti_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %159 = icmp sgt i32 %apl1.0.i5.i9, %158*/
		main_quantlexiti_159 = ($signed(main_quantlexiti_apl10i5i9_reg) > $signed(main_quantlexiti_158));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %159 = icmp sgt i32 %apl1.0.i5.i9, %158*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_159_reg <= main_quantlexiti_159;
		if (start == 1'b0 && ^(main_quantlexiti_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i6.i10 = select i1 %159, i32 %158, i32 %apl1.0.i5.i9*/
		main_quantlexiti_apl10i6i10 = (main_quantlexiti_159 ? main_quantlexiti_158 : main_quantlexiti_apl10i5i9_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i6.i10 = select i1 %159, i32 %158, i32 %apl1.0.i5.i9*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_apl10i6i10_reg <= main_quantlexiti_apl10i6i10;
		if (start == 1'b0 && ^(main_quantlexiti_apl10i6i10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10i6i10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %160 = sub nsw i32 0, %158*/
		main_quantlexiti_160 = (32'd0 - main_quantlexiti_158);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %160 = sub nsw i32 0, %158*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_160_reg <= main_quantlexiti_160;
		if (start == 1'b0 && ^(main_quantlexiti_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_161 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_quantlexiti_161_reg <= main_quantlexiti_161;
		if (start == 1'b0 && ^(main_quantlexiti_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %162 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_162 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %162 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_quantlexiti_162_reg <= main_quantlexiti_162;
		if (start == 1'b0 && ^(main_quantlexiti_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_162_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_163 = main_quantlexiti_163_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %163 = mul nsw i32 %162, %161*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_quantlexiti_163_reg <= main_quantlexiti_163;
		if (start == 1'b0 && ^(main_quantlexiti_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_163_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %163 = mul nsw i32 %162, %161*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_quantlexiti_163_reg <= main_quantlexiti_163;
		if (start == 1'b0 && ^(main_quantlexiti_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_164 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_quantlexiti_164_reg <= main_quantlexiti_164;
		if (start == 1'b0 && ^(main_quantlexiti_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_165 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_78)) begin
		main_quantlexiti_165_reg <= main_quantlexiti_165;
		if (start == 1'b0 && ^(main_quantlexiti_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_165_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_166 = main_quantlexiti_166_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %166 = mul nsw i32 %165, %164*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_166_reg <= main_quantlexiti_166;
		if (start == 1'b0 && ^(main_quantlexiti_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_166_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %166 = mul nsw i32 %165, %164*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_166_reg <= main_quantlexiti_166;
		if (start == 1'b0 && ^(main_quantlexiti_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %167 = add nsw i32 %166, %163*/
		main_quantlexiti_167 = (main_quantlexiti_166 + main_quantlexiti_163_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %167 = add nsw i32 %166, %163*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_167_reg <= main_quantlexiti_167;
		if (start == 1'b0 && ^(main_quantlexiti_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_168 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_168_reg <= main_quantlexiti_168;
		if (start == 1'b0 && ^(main_quantlexiti_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_169 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_169_reg <= main_quantlexiti_169;
		if (start == 1'b0 && ^(main_quantlexiti_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_169_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_170 = main_quantlexiti_170_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %170 = mul nsw i32 %169, %168*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_quantlexiti_170_reg <= main_quantlexiti_170;
		if (start == 1'b0 && ^(main_quantlexiti_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_170_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %170 = mul nsw i32 %169, %168*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_quantlexiti_170_reg <= main_quantlexiti_170;
		if (start == 1'b0 && ^(main_quantlexiti_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %171 = add nsw i32 %167, %170*/
		main_quantlexiti_171 = (main_quantlexiti_167_reg + main_quantlexiti_170);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %171 = add nsw i32 %167, %170*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_quantlexiti_171_reg <= main_quantlexiti_171;
		if (start == 1'b0 && ^(main_quantlexiti_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_172 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_quantlexiti_172_reg <= main_quantlexiti_172;
		if (start == 1'b0 && ^(main_quantlexiti_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_173 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		main_quantlexiti_173_reg <= main_quantlexiti_173;
		if (start == 1'b0 && ^(main_quantlexiti_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_173_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_174 = main_quantlexiti_174_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %174 = mul nsw i32 %173, %172*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_174_reg <= main_quantlexiti_174;
		if (start == 1'b0 && ^(main_quantlexiti_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_174_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %174 = mul nsw i32 %173, %172*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_174_reg <= main_quantlexiti_174;
		if (start == 1'b0 && ^(main_quantlexiti_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %175 = add nsw i32 %171, %174*/
		main_quantlexiti_175 = (main_quantlexiti_171_reg + main_quantlexiti_174);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %175 = add nsw i32 %171, %174*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_175_reg <= main_quantlexiti_175;
		if (start == 1'b0 && ^(main_quantlexiti_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_176 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_176_reg <= main_quantlexiti_176;
		if (start == 1'b0 && ^(main_quantlexiti_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %177 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_177 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %177 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_81)) begin
		main_quantlexiti_177_reg <= main_quantlexiti_177;
		if (start == 1'b0 && ^(main_quantlexiti_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_177_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_178 = main_quantlexiti_178_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %178 = mul nsw i32 %177, %176*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_178_reg <= main_quantlexiti_178;
		if (start == 1'b0 && ^(main_quantlexiti_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_178_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %178 = mul nsw i32 %177, %176*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_178_reg <= main_quantlexiti_178;
		if (start == 1'b0 && ^(main_quantlexiti_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %179 = add nsw i32 %175, %178*/
		main_quantlexiti_179 = (main_quantlexiti_175_reg + main_quantlexiti_178);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %179 = add nsw i32 %175, %178*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_179_reg <= main_quantlexiti_179;
		if (start == 1'b0 && ^(main_quantlexiti_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_quantlexiti_180 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_180_reg <= main_quantlexiti_180;
		if (start == 1'b0 && ^(main_quantlexiti_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_quantlexiti_181 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_181_reg <= main_quantlexiti_181;
		if (start == 1'b0 && ^(main_quantlexiti_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_181_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_182 = main_quantlexiti_182_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %182 = mul nsw i32 %181, %180*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_182_reg <= main_quantlexiti_182;
		if (start == 1'b0 && ^(main_quantlexiti_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_182_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %182 = mul nsw i32 %181, %180*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_182_reg <= main_quantlexiti_182;
		if (start == 1'b0 && ^(main_quantlexiti_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %183 = add nsw i32 %179, %182*/
		main_quantlexiti_183 = (main_quantlexiti_179_reg + main_quantlexiti_182);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %183 = add nsw i32 %179, %182*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_183_reg <= main_quantlexiti_183;
		if (start == 1'b0 && ^(main_quantlexiti_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %184 = ashr i32 %183, 14*/
		main_quantlexiti_184 = ($signed(main_quantlexiti_183) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %184 = ashr i32 %183, 14*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_184_reg <= main_quantlexiti_184;
		if (start == 1'b0 && ^(main_quantlexiti_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_184_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_185 = main_quantlexiti_185_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %185 = mul i32 %ah1.0, %rh1.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_185_reg <= main_quantlexiti_185;
		if (start == 1'b0 && ^(main_quantlexiti_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_185_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %185 = mul i32 %ah1.0, %rh1.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_185_reg <= main_quantlexiti_185;
		if (start == 1'b0 && ^(main_quantlexiti_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_185_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_186 = main_quantlexiti_186_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %186 = mul i32 %ah2.0, %rh2.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_186_reg <= main_quantlexiti_186;
		if (start == 1'b0 && ^(main_quantlexiti_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_186_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %186 = mul i32 %ah2.0, %rh2.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_186_reg <= main_quantlexiti_186;
		if (start == 1'b0 && ^(main_quantlexiti_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %186, %185*/
		main_quantlexiti_tmpi3i12 = (main_quantlexiti_186 + main_quantlexiti_185);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %tmp.i3.i12 = add i32 %186, %185*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_tmpi3i12_reg <= main_quantlexiti_tmpi3i12;
		if (start == 1'b0 && ^(main_quantlexiti_tmpi3i12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_tmpi3i12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %tmp1.i4.i13 = shl i32 %tmp.i3.i12, 1*/
		main_quantlexiti_tmp1i4i13 = (main_quantlexiti_tmpi3i12 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %tmp1.i4.i13 = shl i32 %tmp.i3.i12, 1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_tmp1i4i13_reg <= main_quantlexiti_tmp1i4i13;
		if (start == 1'b0 && ^(main_quantlexiti_tmp1i4i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_tmp1i4i13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %187 = ashr i32 %tmp1.i4.i13, 15*/
		main_quantlexiti_187 = ($signed(main_quantlexiti_tmp1i4i13) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %187 = ashr i32 %tmp1.i4.i13, 15*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_187_reg <= main_quantlexiti_187;
		if (start == 1'b0 && ^(main_quantlexiti_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %188 = add nsw i32 %187, %184*/
		main_quantlexiti_188 = (main_quantlexiti_187_reg + main_quantlexiti_184);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %188 = add nsw i32 %187, %184*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_188_reg <= main_quantlexiti_188;
		if (start == 1'b0 && ^(main_quantlexiti_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %189 = sub nsw i32 %82, %188*/
		main_quantlexiti_189 = (main_legup_memset_4_i64exit_82_reg - main_quantlexiti_188);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %189 = sub nsw i32 %82, %188*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_189_reg <= main_quantlexiti_189;
		if (start == 1'b0 && ^(main_quantlexiti_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %190 = ashr i32 %189, 31*/
		main_quantlexiti_190 = ($signed(main_quantlexiti_189) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %190 = ashr i32 %189, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_190_reg <= main_quantlexiti_190;
		if (start == 1'b0 && ^(main_quantlexiti_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %191 = and i32 %190, -2*/
		main_quantlexiti_191 = (main_quantlexiti_190 & -32'd2);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %191 = and i32 %190, -2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_191_reg <= main_quantlexiti_191;
		if (start == 1'b0 && ^(main_quantlexiti_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_191_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_192 = main_quantlexiti_192_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %192 = mul nsw i32 %deth.0, 564*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_192_reg <= main_quantlexiti_192;
		if (start == 1'b0 && ^(main_quantlexiti_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_192_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %192 = mul nsw i32 %deth.0, 564*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_192_reg <= main_quantlexiti_192;
		if (start == 1'b0 && ^(main_quantlexiti_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %193 = ashr i32 %192, 12*/
		main_quantlexiti_193 = ($signed(main_quantlexiti_192) >>> 32'd12);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %193 = ashr i32 %192, 12*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_193_reg <= main_quantlexiti_193;
		if (start == 1'b0 && ^(main_quantlexiti_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %194 = icmp sgt i32 %189, -1*/
		main_quantlexiti_194 = ($signed(main_quantlexiti_189) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %194 = icmp sgt i32 %189, -1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_194_reg <= main_quantlexiti_194;
		if (start == 1'b0 && ^(main_quantlexiti_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %195 = sub nsw i32 0, %189*/
		main_quantlexiti_195 = (32'd0 - main_quantlexiti_189);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %195 = sub nsw i32 0, %189*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_195_reg <= main_quantlexiti_195;
		if (start == 1'b0 && ^(main_quantlexiti_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %m.0.i.i = select i1 %194, i32 %189, i32 %195*/
		main_quantlexiti_m0ii = (main_quantlexiti_194 ? main_quantlexiti_189 : main_quantlexiti_195);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %m.0.i.i = select i1 %194, i32 %189, i32 %195*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_m0ii_reg <= main_quantlexiti_m0ii;
		if (start == 1'b0 && ^(main_quantlexiti_m0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_m0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %196 = icmp sgt i32 %m.0.i.i, %193*/
		main_quantlexiti_196 = ($signed(main_quantlexiti_m0ii) > $signed(main_quantlexiti_193_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %196 = icmp sgt i32 %m.0.i.i, %193*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_196_reg <= main_quantlexiti_196;
		if (start == 1'b0 && ^(main_quantlexiti_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..v = select i1 %196, i32 2, i32 3*/
		main_quantlexiti_v = (main_quantlexiti_196_reg ? 32'd2 : 32'd3);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..v = select i1 %196, i32 2, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_quantlexiti_v_reg <= main_quantlexiti_v;
		if (start == 1'b0 && ^(main_quantlexiti_v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_v_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %191, %..v*/
		main_quantlexiti_ = (main_quantlexiti_191_reg + main_quantlexiti_v);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %. = add nsw i32 %191, %..v*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_quantlexiti__reg <= main_quantlexiti_;
		if (start == 1'b0 && ^(main_quantlexiti_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti__reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %197 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %.*/
		main_quantlexiti_197 = (1'd0 | (4 * main_quantlexiti__reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %197 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %.*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_85)) begin
		main_quantlexiti_197_reg <= main_quantlexiti_197;
		if (start == 1'b0 && ^(main_quantlexiti_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
		main_quantlexiti_198 = qq2_code2_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_86)) begin
		main_quantlexiti_198_reg <= main_quantlexiti_198;
		if (start == 1'b0 && ^(main_quantlexiti_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_198_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_199 = main_quantlexiti_199_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %199 = mul nsw i32 %198, %deth.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_87)) begin
		main_quantlexiti_199_reg <= main_quantlexiti_199;
		if (start == 1'b0 && ^(main_quantlexiti_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_199_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %199 = mul nsw i32 %198, %deth.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_87)) begin
		main_quantlexiti_199_reg <= main_quantlexiti_199;
		if (start == 1'b0 && ^(main_quantlexiti_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %200 = ashr i32 %199, 15*/
		main_quantlexiti_200 = ($signed(main_quantlexiti_199) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %200 = ashr i32 %199, 15*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_87)) begin
		main_quantlexiti_200_reg <= main_quantlexiti_200;
		if (start == 1'b0 && ^(main_quantlexiti_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %201 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %.*/
		main_quantlexiti_201 = (1'd0 | (4 * main_quantlexiti__reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %201 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %.*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_85)) begin
		main_quantlexiti_201_reg <= main_quantlexiti_201;
		if (start == 1'b0 && ^(main_quantlexiti_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %202 = load i32* %201, align 4, !tbaa !1*/
		main_quantlexiti_202 = wh_code_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %202 = load i32* %201, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_86)) begin
		main_quantlexiti_202_reg <= main_quantlexiti_202;
		if (start == 1'b0 && ^(main_quantlexiti_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %203 = add nsw i32 %nbh.0, %202*/
		main_quantlexiti_203 = (main_legup_memset_4_i64exit_nbh0_reg + main_quantlexiti_202);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %203 = add nsw i32 %nbh.0, %202*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_86)) begin
		main_quantlexiti_203_reg <= main_quantlexiti_203;
		if (start == 1'b0 && ^(main_quantlexiti_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %204 = icmp slt i32 %203, 0*/
		main_quantlexiti_204 = ($signed(main_quantlexiti_203) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %204 = icmp slt i32 %203, 0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_86)) begin
		main_quantlexiti_204_reg <= main_quantlexiti_204;
		if (start == 1'b0 && ^(main_quantlexiti_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i1.i14 = select i1 %204, i32 0, i32 %203*/
		main_quantlexiti_i1i14 = (main_quantlexiti_204 ? 32'd0 : main_quantlexiti_203);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..i1.i14 = select i1 %204, i32 0, i32 %203*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_86)) begin
		main_quantlexiti_i1i14_reg <= main_quantlexiti_i1i14;
		if (start == 1'b0 && ^(main_quantlexiti_i1i14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i1i14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %205 = icmp sgt i32 %..i1.i14, 22528*/
		main_quantlexiti_205 = ($signed(main_quantlexiti_i1i14) > $signed(32'd22528));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %205 = icmp sgt i32 %..i1.i14, 22528*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_86)) begin
		main_quantlexiti_205_reg <= main_quantlexiti_205;
		if (start == 1'b0 && ^(main_quantlexiti_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i2.i15 = select i1 %205, i32 22528, i32 %..i1.i14*/
		main_quantlexiti_i2i15 = (main_quantlexiti_205 ? 32'd22528 : main_quantlexiti_i1i14);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %...i2.i15 = select i1 %205, i32 22528, i32 %..i1.i14*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_86)) begin
		main_quantlexiti_i2i15_reg <= main_quantlexiti_i2i15;
		if (start == 1'b0 && ^(main_quantlexiti_i2i15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i2i15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %206 = lshr i32 %...i2.i15, 6*/
		main_quantlexiti_206 = (main_quantlexiti_i2i15 >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %206 = lshr i32 %...i2.i15, 6*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_86)) begin
		main_quantlexiti_206_reg <= main_quantlexiti_206;
		if (start == 1'b0 && ^(main_quantlexiti_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %207 = and i32 %206, 31*/
		main_quantlexiti_207 = (main_quantlexiti_206 & 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %207 = and i32 %206, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_86)) begin
		main_quantlexiti_207_reg <= main_quantlexiti_207;
		if (start == 1'b0 && ^(main_quantlexiti_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %208 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %207*/
		main_quantlexiti_208 = (1'd0 | (4 * main_quantlexiti_207_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %208 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %207*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_87)) begin
		main_quantlexiti_208_reg <= main_quantlexiti_208;
		if (start == 1'b0 && ^(main_quantlexiti_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %209 = load i32* %208, align 4, !tbaa !1*/
		main_quantlexiti_209 = ilb_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %209 = load i32* %208, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_209_reg <= main_quantlexiti_209;
		if (start == 1'b0 && ^(main_quantlexiti_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %210 = add nsw i32 %184, %200*/
		main_quantlexiti_210 = (main_quantlexiti_184_reg + main_quantlexiti_200);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %210 = add nsw i32 %184, %200*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_87)) begin
		main_quantlexiti_210_reg <= main_quantlexiti_210;
		if (start == 1'b0 && ^(main_quantlexiti_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %211 = shl nsw i32 %ah1.0, 2*/
		main_quantlexiti_211 = (main_legup_memset_4_i64exit_ah10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %211 = shl nsw i32 %ah1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_211_reg <= main_quantlexiti_211;
		if (start == 1'b0 && ^(main_quantlexiti_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_211_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_212 = main_quantlexiti_212_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %212 = mul nsw i32 %ph1.0, %210*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_212_reg <= main_quantlexiti_212;
		if (start == 1'b0 && ^(main_quantlexiti_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_212_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %212 = mul nsw i32 %ph1.0, %210*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_212_reg <= main_quantlexiti_212;
		if (start == 1'b0 && ^(main_quantlexiti_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %213 = icmp sgt i32 %212, -1*/
		main_quantlexiti_213 = ($signed(main_quantlexiti_212) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %213 = icmp sgt i32 %212, -1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_213_reg <= main_quantlexiti_213;
		if (start == 1'b0 && ^(main_quantlexiti_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %214 = sub nsw i32 0, %211*/
		main_quantlexiti_214 = (32'd0 - main_quantlexiti_211);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %214 = sub nsw i32 0, %211*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_214_reg <= main_quantlexiti_214;
		if (start == 1'b0 && ^(main_quantlexiti_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i.i16 = select i1 %213, i32 %214, i32 %211*/
		main_quantlexiti_1ii16 = (main_quantlexiti_213 ? main_quantlexiti_214_reg : main_quantlexiti_211_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i.i16 = select i1 %213, i32 %214, i32 %211*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_1ii16_reg <= main_quantlexiti_1ii16;
		if (start == 1'b0 && ^(main_quantlexiti_1ii16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_1ii16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %215 = ashr i32 %.1.i.i16, 7*/
		main_quantlexiti_215 = ($signed(main_quantlexiti_1ii16) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %215 = ashr i32 %.1.i.i16, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_215_reg <= main_quantlexiti_215;
		if (start == 1'b0 && ^(main_quantlexiti_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_215_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_216 = main_quantlexiti_216_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %216 = mul nsw i32 %ph2.0, %210*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_216_reg <= main_quantlexiti_216;
		if (start == 1'b0 && ^(main_quantlexiti_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_216_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %216 = mul nsw i32 %ph2.0, %210*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_216_reg <= main_quantlexiti_216;
		if (start == 1'b0 && ^(main_quantlexiti_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %217 = ashr i32 %216, 31*/
		main_quantlexiti_217 = ($signed(main_quantlexiti_216) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %217 = ashr i32 %216, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_217_reg <= main_quantlexiti_217;
		if (start == 1'b0 && ^(main_quantlexiti_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %218 = and i32 %217, -256*/
		main_quantlexiti_218 = (main_quantlexiti_217 & -32'd256);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %218 = and i32 %217, -256*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_218_reg <= main_quantlexiti_218;
		if (start == 1'b0 && ^(main_quantlexiti_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %219 = or i32 %218, 128*/
		main_quantlexiti_219 = (main_quantlexiti_218 | 32'd128);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %219 = or i32 %218, 128*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_219_reg <= main_quantlexiti_219;
		if (start == 1'b0 && ^(main_quantlexiti_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_219_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_220 = main_quantlexiti_220_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %220 = mul nsw i32 %ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_220_reg <= main_quantlexiti_220;
		if (start == 1'b0 && ^(main_quantlexiti_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_220_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %220 = mul nsw i32 %ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_220_reg <= main_quantlexiti_220;
		if (start == 1'b0 && ^(main_quantlexiti_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %221 = ashr i32 %220, 7*/
		main_quantlexiti_221 = ($signed(main_quantlexiti_220) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %221 = ashr i32 %220, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_221_reg <= main_quantlexiti_221;
		if (start == 1'b0 && ^(main_quantlexiti_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %215, %221*/
		main_quantlexiti_wd40ii17 = (main_quantlexiti_215 + main_quantlexiti_221_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i17 = add nsw i32 %215, %221*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_wd40ii17_reg <= main_quantlexiti_wd40ii17;
		if (start == 1'b0 && ^(main_quantlexiti_wd40ii17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_wd40ii17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %222 = add nsw i32 %wd4.0.i.i17, %219*/
		main_quantlexiti_222 = (main_quantlexiti_wd40ii17 + main_quantlexiti_219);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %222 = add nsw i32 %wd4.0.i.i17, %219*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_222_reg <= main_quantlexiti_222;
		if (start == 1'b0 && ^(main_quantlexiti_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %223 = icmp sgt i32 %222, 12288*/
		main_quantlexiti_223 = ($signed(main_quantlexiti_222) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %223 = icmp sgt i32 %222, 12288*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_223_reg <= main_quantlexiti_223;
		if (start == 1'b0 && ^(main_quantlexiti_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i.i18 = select i1 %223, i32 12288, i32 %222*/
		main_quantlexiti_ii18 = (main_quantlexiti_223 ? 32'd12288 : main_quantlexiti_222);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..i.i18 = select i1 %223, i32 12288, i32 %222*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_ii18_reg <= main_quantlexiti_ii18;
		if (start == 1'b0 && ^(main_quantlexiti_ii18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ii18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %224 = icmp slt i32 %..i.i18, -12288*/
		main_quantlexiti_224 = ($signed(main_quantlexiti_ii18_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %224 = icmp slt i32 %..i.i18, -12288*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_90)) begin
		main_quantlexiti_224_reg <= main_quantlexiti_224;
		if (start == 1'b0 && ^(main_quantlexiti_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i.i19 = select i1 %224, i32 -12288, i32 %..i.i18*/
		main_quantlexiti_ii19 = (main_quantlexiti_224 ? -32'd12288 : main_quantlexiti_ii18_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %...i.i19 = select i1 %224, i32 -12288, i32 %..i.i18*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_90)) begin
		main_quantlexiti_ii19_reg <= main_quantlexiti_ii19;
		if (start == 1'b0 && ^(main_quantlexiti_ii19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ii19_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_225 = main_quantlexiti_225_stage0_reg;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %225 = mul nsw i32 %ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_225_reg <= main_quantlexiti_225;
		if (start == 1'b0 && ^(main_quantlexiti_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_225_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %225 = mul nsw i32 %ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_225_reg <= main_quantlexiti_225;
		if (start == 1'b0 && ^(main_quantlexiti_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %226 = ashr i32 %225, 8*/
		main_quantlexiti_226 = ($signed(main_quantlexiti_225) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %226 = ashr i32 %225, 8*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_226_reg <= main_quantlexiti_226;
		if (start == 1'b0 && ^(main_quantlexiti_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %227 = ashr i32 %212, 31*/
		main_quantlexiti_227 = ($signed(main_quantlexiti_212) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %227 = ashr i32 %212, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_227_reg <= main_quantlexiti_227;
		if (start == 1'b0 && ^(main_quantlexiti_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %228 = and i32 %227, -384*/
		main_quantlexiti_228 = (main_quantlexiti_227 & -32'd384);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %228 = and i32 %227, -384*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_228_reg <= main_quantlexiti_228;
		if (start == 1'b0 && ^(main_quantlexiti_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %229 = add nsw i32 %226, 192*/
		main_quantlexiti_229 = (main_quantlexiti_226 + 32'd192);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %229 = add nsw i32 %226, 192*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_229_reg <= main_quantlexiti_229;
		if (start == 1'b0 && ^(main_quantlexiti_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %229, %228*/
		main_quantlexiti_apl10ii20 = (main_quantlexiti_229_reg + main_quantlexiti_228);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i20 = add nsw i32 %229, %228*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		main_quantlexiti_apl10ii20_reg <= main_quantlexiti_apl10ii20;
		if (start == 1'b0 && ^(main_quantlexiti_apl10ii20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10ii20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %230 = sub nsw i32 15360, %...i.i19*/
		main_quantlexiti_230 = (32'd15360 - main_quantlexiti_ii19);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %230 = sub nsw i32 15360, %...i.i19*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_90)) begin
		main_quantlexiti_230_reg <= main_quantlexiti_230;
		if (start == 1'b0 && ^(main_quantlexiti_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %231 = icmp sgt i32 %apl1.0.i.i20, %230*/
		main_quantlexiti_231 = ($signed(main_quantlexiti_apl10ii20_reg) > $signed(main_quantlexiti_230));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %231 = icmp sgt i32 %apl1.0.i.i20, %230*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_90)) begin
		main_quantlexiti_231_reg <= main_quantlexiti_231;
		if (start == 1'b0 && ^(main_quantlexiti_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i.i21 = select i1 %231, i32 %230, i32 %apl1.0.i.i20*/
		main_quantlexiti_apl10ii21 = (main_quantlexiti_231 ? main_quantlexiti_230 : main_quantlexiti_apl10ii20_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i.i21 = select i1 %231, i32 %230, i32 %apl1.0.i.i20*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_90)) begin
		main_quantlexiti_apl10ii21_reg <= main_quantlexiti_apl10ii21;
		if (start == 1'b0 && ^(main_quantlexiti_apl10ii21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10ii21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %232 = sub nsw i32 0, %230*/
		main_quantlexiti_232 = (32'd0 - main_quantlexiti_230);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %232 = sub nsw i32 0, %230*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_90)) begin
		main_quantlexiti_232_reg <= main_quantlexiti_232;
		if (start == 1'b0 && ^(main_quantlexiti_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %233 = shl nsw i32 %., 6*/
		main_quantlexiti_233 = (main_quantlexiti_ <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %233 = shl nsw i32 %., 6*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_quantlexiti_233_reg <= main_quantlexiti_233;
		if (start == 1'b0 && ^(main_quantlexiti_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %234 = or i32 %233, %ril.0.i.i*/
		main_quantlexiti_234 = (main_quantlexiti_233 | main_quantlexiti_ril0ii_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %234 = or i32 %233, %ril.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_84)) begin
		main_quantlexiti_234_reg <= main_quantlexiti_234;
		if (start == 1'b0 && ^(main_quantlexiti_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %235 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %32*/
		main_quantlexiti_235 = (1'd0 | (4 * main_legup_memset_4_i64exit_32_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %235 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_235_reg <= main_quantlexiti_235;
		if (start == 1'b0 && ^(main_quantlexiti_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %236 = icmp slt i32 %30, 100*/
		main_quantlexiti_236 = ($signed(main_legup_memset_4_i64exit_30_reg) < $signed(32'd100));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %236 = icmp slt i32 %30, 100*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_236_reg <= main_quantlexiti_236;
		if (start == 1'b0 && ^(main_quantlexiti_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %200, %188*/
		main_encodeexit_crit_edge_237 = (main_quantlexiti_200_reg + main_quantlexiti_188_reg);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %237 = add nsw i32 %200, %188*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_237_reg <= main_encodeexit_crit_edge_237;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %238 = icmp slt i32 %.apl1.0.i.i21, %232*/
		main_encodeexit_crit_edge_238 = ($signed(main_quantlexiti_apl10ii21_reg) < $signed(main_quantlexiti_232_reg));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %238 = icmp slt i32 %.apl1.0.i.i21, %232*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_238_reg <= main_encodeexit_crit_edge_238;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i.i22 = select i1 %238, i32 %232, i32 %.apl1.0.i.i21*/
		main_encodeexit_crit_edge_apl12ii22 = (main_encodeexit_crit_edge_238 ? main_quantlexiti_232_reg : main_quantlexiti_apl10ii21_reg);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i.i22 = select i1 %238, i32 %232, i32 %.apl1.0.i.i21*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_apl12ii22_reg <= main_encodeexit_crit_edge_apl12ii22;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_apl12ii22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_apl12ii22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %239 = ashr i32 %...i2.i15, 11*/
		main_encodeexit_crit_edge_239 = ($signed(main_quantlexiti_i2i15_reg) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %239 = ashr i32 %...i2.i15, 11*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_239_reg <= main_encodeexit_crit_edge_239;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %240 = sub i32 11, %239*/
		main_encodeexit_crit_edge_240 = (32'd11 - main_encodeexit_crit_edge_239);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %240 = sub i32 11, %239*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_240_reg <= main_encodeexit_crit_edge_240;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %241 = ashr i32 %209, %240*/
		main_encodeexit_crit_edge_241 = ($signed(main_quantlexiti_209_reg) >>> main_encodeexit_crit_edge_240);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %241 = ashr i32 %209, %240*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_241_reg <= main_encodeexit_crit_edge_241;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %242 = shl i32 %241, 3*/
		main_encodeexit_crit_edge_242 = (main_encodeexit_crit_edge_241 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %242 = shl i32 %241, 3*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_242_reg <= main_encodeexit_crit_edge_242;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %128, %110*/
		main_encodeexit_crit_edge_243 = (main_quantlexiti_128_reg + main_legup_memset_4_i64exit_110_reg);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %243 = add nsw i32 %128, %110*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_243_reg <= main_encodeexit_crit_edge_243;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %244 = icmp slt i32 %.apl1.0.i6.i10, %160*/
		main_encodeexit_crit_edge_244 = ($signed(main_quantlexiti_apl10i6i10_reg) < $signed(main_quantlexiti_160_reg));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %244 = icmp slt i32 %.apl1.0.i6.i10, %160*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_244_reg <= main_encodeexit_crit_edge_244;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i7.i11 = select i1 %244, i32 %160, i32 %.apl1.0.i6.i10*/
		main_encodeexit_crit_edge_apl12i7i11 = (main_encodeexit_crit_edge_244 ? main_quantlexiti_160_reg : main_quantlexiti_apl10i6i10_reg);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %apl1.2.i7.i11 = select i1 %244, i32 %160, i32 %.apl1.0.i6.i10*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_apl12i7i11_reg <= main_encodeexit_crit_edge_apl12i7i11;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_apl12i7i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_apl12i7i11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %245 = ashr i32 %...i13.i4, 11*/
		main_encodeexit_crit_edge_245 = ($signed(main_quantlexiti_i13i4_reg) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %245 = ashr i32 %...i13.i4, 11*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_245_reg <= main_encodeexit_crit_edge_245;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %246 = sub i32 9, %245*/
		main_encodeexit_crit_edge_246 = (32'd9 - main_encodeexit_crit_edge_245);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %246 = sub i32 9, %245*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_246_reg <= main_encodeexit_crit_edge_246;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %247 = ashr i32 %137, %246*/
		main_encodeexit_crit_edge_247 = ($signed(main_quantlexiti_137_reg) >>> main_encodeexit_crit_edge_246);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %247 = ashr i32 %137, %246*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_247_reg <= main_encodeexit_crit_edge_247;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %248 = shl i32 %247, 3*/
		main_encodeexit_crit_edge_248 = (main_encodeexit_crit_edge_247 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %248 = shl i32 %247, 3*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_248_reg <= main_encodeexit_crit_edge_248;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_pre_reg <= main_encodeexit_crit_edge_pre;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre37 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_pre37_reg <= main_encodeexit_crit_edge_pre37;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre38 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		main_encodeexit_crit_edge_pre38_reg <= main_encodeexit_crit_edge_pre38;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre39 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		main_encodeexit_crit_edge_pre39_reg <= main_encodeexit_crit_edge_pre39;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre40 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		main_encodeexit_crit_edge_pre40_reg <= main_encodeexit_crit_edge_pre40;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre41 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		main_encodeexit_crit_edge_pre41_reg <= main_encodeexit_crit_edge_pre41;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre42 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_pre42_reg <= main_encodeexit_crit_edge_pre42;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre43 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_pre43_reg <= main_encodeexit_crit_edge_pre43;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre44 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		main_encodeexit_crit_edge_pre44_reg <= main_encodeexit_crit_edge_pre44;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre45 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		main_encodeexit_crit_edge_pre45_reg <= main_encodeexit_crit_edge_pre45;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre46 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		main_encodeexit_crit_edge_pre46_reg <= main_encodeexit_crit_edge_pre46;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre47 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		main_encodeexit_crit_edge_pre47_reg <= main_encodeexit_crit_edge_pre47;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre48 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		main_encodeexit_crit_edge_pre48_reg <= main_encodeexit_crit_edge_pre48;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre49 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		main_encodeexit_crit_edge_pre49_reg <= main_encodeexit_crit_edge_pre49;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre50 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		main_encodeexit_crit_edge_pre50_reg <= main_encodeexit_crit_edge_pre50;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre51 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		main_encodeexit_crit_edge_pre51_reg <= main_encodeexit_crit_edge_pre51;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre52 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		main_encodeexit_crit_edge_pre52_reg <= main_encodeexit_crit_edge_pre52;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre53 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		main_encodeexit_crit_edge_pre53_reg <= main_encodeexit_crit_edge_pre53;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre54 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_102)) begin
		main_encodeexit_crit_edge_pre54_reg <= main_encodeexit_crit_edge_pre54;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre55 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_102)) begin
		main_encodeexit_crit_edge_pre55_reg <= main_encodeexit_crit_edge_pre55;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre56 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_103)) begin
		main_encodeexit_crit_edge_pre56_reg <= main_encodeexit_crit_edge_pre56;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre57 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_103)) begin
		main_encodeexit_crit_edge_pre57_reg <= main_encodeexit_crit_edge_pre57;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre58 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre58 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre58 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_104)) begin
		main_encodeexit_crit_edge_pre58_reg <= main_encodeexit_crit_edge_pre58;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre59 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_104)) begin
		main_encodeexit_crit_edge_pre59_reg <= main_encodeexit_crit_edge_pre59;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre59_reg"); $finish; end
	end
end
always @(*) begin
	main_encodeexit_crit_edge_phitmp = main_encodeexit_crit_edge_phitmp_stage0_reg;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp = mul i32 %.pre58, -44*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105)) begin
		main_encodeexit_crit_edge_phitmp_reg <= main_encodeexit_crit_edge_phitmp;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp_reg"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp = mul i32 %.pre58, -44*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105)) begin
		main_encodeexit_crit_edge_phitmp_reg <= main_encodeexit_crit_edge_phitmp;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp_reg"); $finish; end
	end
end
always @(*) begin
	main_encodeexit_crit_edge_phitmp1 = main_encodeexit_crit_edge_phitmp1_stage0_reg;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp1 = mul i32 %.pre59, 12*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105)) begin
		main_encodeexit_crit_edge_phitmp1_reg <= main_encodeexit_crit_edge_phitmp1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp1_reg"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp1 = mul i32 %.pre59, 12*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_105)) begin
		main_encodeexit_crit_edge_phitmp1_reg <= main_encodeexit_crit_edge_phitmp1;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp1_reg"); $finish; end
	end
end
always @(*) begin
	main_encodeexit_crit_edge_phitmp2 = main_encodeexit_crit_edge_phitmp2_stage0_reg;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp2 = mul i32 %...i13.i4, 127*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_phitmp2_reg <= main_encodeexit_crit_edge_phitmp2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp2_reg"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp2 = mul i32 %...i13.i4, 127*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_phitmp2_reg <= main_encodeexit_crit_edge_phitmp2;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp3 = ashr i32 %phitmp2, 7*/
		main_encodeexit_crit_edge_phitmp3 = ($signed(main_encodeexit_crit_edge_phitmp2) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp3 = ashr i32 %phitmp2, 7*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_phitmp3_reg <= main_encodeexit_crit_edge_phitmp3;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp3_reg"); $finish; end
	end
end
always @(*) begin
	main_encodeexit_crit_edge_phitmp4 = main_encodeexit_crit_edge_phitmp4_stage0_reg;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp4 = mul i32 %...i2.i15, 127*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_phitmp4_reg <= main_encodeexit_crit_edge_phitmp4;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp4_reg"); $finish; end
	end
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp4 = mul i32 %...i2.i15, 127*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_phitmp4_reg <= main_encodeexit_crit_edge_phitmp4;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp5 = ashr i32 %phitmp4, 7*/
		main_encodeexit_crit_edge_phitmp5 = ($signed(main_encodeexit_crit_edge_phitmp4) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp5 = ashr i32 %phitmp4, 7*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_phitmp5_reg <= main_encodeexit_crit_edge_phitmp5;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_phitmp5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_phitmp5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
		main_encodeexit_crit_edge_indvarnext10 = (main_legup_memset_4_i64exit_indvar9_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_indvarnext10_reg <= main_encodeexit_crit_edge_indvarnext10;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_indvarnext10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_indvarnext10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %249 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %ril.0.i.i*/
		main_preheaderipreheader_249 = (1'd0 | (4 * main_quantlexiti_ril0ii_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.preheader*/
	/*   %249 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %ril.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_106)) begin
		main_preheaderipreheader_249_reg <= main_preheaderipreheader_249;
		if (start == 1'b0 && ^(main_preheaderipreheader_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheader_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
		main_preheaderipreheader_250 = qq6_code6_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_107)) begin
		main_preheaderipreheader_250_reg <= main_preheaderipreheader_250;
		if (start == 1'b0 && ^(main_preheaderipreheader_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheader_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_indvar = main_preheaderi_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar_reg <= main_preheaderi_indvar;
		if (start == 1'b0 && ^(main_preheaderi_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_indvar_reg <= main_preheaderi_indvar;
		if (start == 1'b0 && ^(main_preheaderi_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd100 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd100 = main_preheaderi_accumd90_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd100_reg <= main_preheaderi_accumd100;
		if (start == 1'b0 && ^(main_preheaderi_accumd100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd100_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd100_reg <= main_preheaderi_accumd100;
		if (start == 1'b0 && ^(main_preheaderi_accumd100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd90 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd90 = main_preheaderi_accumd80_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd90_reg <= main_preheaderi_accumd90;
		if (start == 1'b0 && ^(main_preheaderi_accumd90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd90_reg <= main_preheaderi_accumd90;
		if (start == 1'b0 && ^(main_preheaderi_accumd90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd80 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd80 = main_preheaderi_accumd70_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd80_reg <= main_preheaderi_accumd80;
		if (start == 1'b0 && ^(main_preheaderi_accumd80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd80_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd80_reg <= main_preheaderi_accumd80;
		if (start == 1'b0 && ^(main_preheaderi_accumd80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd70 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd70 = main_preheaderi_accumd60_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd70_reg <= main_preheaderi_accumd70;
		if (start == 1'b0 && ^(main_preheaderi_accumd70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd70_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd70_reg <= main_preheaderi_accumd70;
		if (start == 1'b0 && ^(main_preheaderi_accumd70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd60 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd60 = main_preheaderi_accumd50_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd60_reg <= main_preheaderi_accumd60;
		if (start == 1'b0 && ^(main_preheaderi_accumd60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd60_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd60_reg <= main_preheaderi_accumd60;
		if (start == 1'b0 && ^(main_preheaderi_accumd60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd50 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd50 = main_preheaderi_accumd40_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd50_reg <= main_preheaderi_accumd50;
		if (start == 1'b0 && ^(main_preheaderi_accumd50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd50_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd50_reg <= main_preheaderi_accumd50;
		if (start == 1'b0 && ^(main_preheaderi_accumd50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd40 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd40 = main_preheaderi_accumd30_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd40_reg <= main_preheaderi_accumd40;
		if (start == 1'b0 && ^(main_preheaderi_accumd40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd40_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd40_reg <= main_preheaderi_accumd40;
		if (start == 1'b0 && ^(main_preheaderi_accumd40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd30 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd30 = main_preheaderi_accumd20_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd30_reg <= main_preheaderi_accumd30;
		if (start == 1'b0 && ^(main_preheaderi_accumd30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd30_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd30_reg <= main_preheaderi_accumd30;
		if (start == 1'b0 && ^(main_preheaderi_accumd30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd20 = main_preheaderi_accumd10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd20_reg <= main_preheaderi_accumd20;
		if (start == 1'b0 && ^(main_preheaderi_accumd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd20_reg <= main_preheaderi_accumd20;
		if (start == 1'b0 && ^(main_preheaderi_accumd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd10 = main_preheaderi_accumd00_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd10_reg <= main_preheaderi_accumd10;
		if (start == 1'b0 && ^(main_preheaderi_accumd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd10_reg <= main_preheaderi_accumd10;
		if (start == 1'b0 && ^(main_preheaderi_accumd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd00 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumd00 = main_preheaderi_406_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumd00_reg <= main_preheaderi_accumd00;
		if (start == 1'b0 && ^(main_preheaderi_accumd00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd00_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %406, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumd00_reg <= main_preheaderi_accumd00;
		if (start == 1'b0 && ^(main_preheaderi_accumd00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd00_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc100 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc100 = main_preheaderi_accumc90_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc100_reg <= main_preheaderi_accumc100;
		if (start == 1'b0 && ^(main_preheaderi_accumc100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc100_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc100_reg <= main_preheaderi_accumc100;
		if (start == 1'b0 && ^(main_preheaderi_accumc100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc90 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc90 = main_preheaderi_accumc80_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc90_reg <= main_preheaderi_accumc90;
		if (start == 1'b0 && ^(main_preheaderi_accumc90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc90_reg <= main_preheaderi_accumc90;
		if (start == 1'b0 && ^(main_preheaderi_accumc90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc80 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc80 = main_preheaderi_accumc70_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc80_reg <= main_preheaderi_accumc80;
		if (start == 1'b0 && ^(main_preheaderi_accumc80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc80_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc80_reg <= main_preheaderi_accumc80;
		if (start == 1'b0 && ^(main_preheaderi_accumc80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc70 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc70 = main_preheaderi_accumc60_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc70_reg <= main_preheaderi_accumc70;
		if (start == 1'b0 && ^(main_preheaderi_accumc70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc70_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc70_reg <= main_preheaderi_accumc70;
		if (start == 1'b0 && ^(main_preheaderi_accumc70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc60 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc60 = main_preheaderi_accumc50_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc60_reg <= main_preheaderi_accumc60;
		if (start == 1'b0 && ^(main_preheaderi_accumc60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc60_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc60_reg <= main_preheaderi_accumc60;
		if (start == 1'b0 && ^(main_preheaderi_accumc60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc50 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc50 = main_preheaderi_accumc40_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc50_reg <= main_preheaderi_accumc50;
		if (start == 1'b0 && ^(main_preheaderi_accumc50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc50_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc50_reg <= main_preheaderi_accumc50;
		if (start == 1'b0 && ^(main_preheaderi_accumc50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc40 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc40 = main_preheaderi_accumc30_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc40_reg <= main_preheaderi_accumc40;
		if (start == 1'b0 && ^(main_preheaderi_accumc40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc40_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc40_reg <= main_preheaderi_accumc40;
		if (start == 1'b0 && ^(main_preheaderi_accumc40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc30 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc30 = main_preheaderi_accumc20_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc30_reg <= main_preheaderi_accumc30;
		if (start == 1'b0 && ^(main_preheaderi_accumc30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc30_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc30_reg <= main_preheaderi_accumc30;
		if (start == 1'b0 && ^(main_preheaderi_accumc30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc20 = main_preheaderi_accumc10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc20_reg <= main_preheaderi_accumc20;
		if (start == 1'b0 && ^(main_preheaderi_accumc20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc20_reg <= main_preheaderi_accumc20;
		if (start == 1'b0 && ^(main_preheaderi_accumc20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc10 = main_preheaderi_accumc00_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc10_reg <= main_preheaderi_accumc10;
		if (start == 1'b0 && ^(main_preheaderi_accumc10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc10_reg <= main_preheaderi_accumc10;
		if (start == 1'b0 && ^(main_preheaderi_accumc10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc00 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_accumc00 = main_preheaderi_405_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_accumc00_reg <= main_preheaderi_accumc00;
		if (start == 1'b0 && ^(main_preheaderi_accumc00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc00_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %405, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_accumc00_reg <= main_preheaderi_accumc00;
		if (start == 1'b0 && ^(main_preheaderi_accumc00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc00_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_ph20 = main_preheaderi_dec_ph10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph20_reg <= main_preheaderi_dec_ph20;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_ph20_reg <= main_preheaderi_dec_ph20;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_ph10 = main_preheaderi_380_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ph10_reg <= main_preheaderi_dec_ph10;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %380, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_ph10_reg <= main_preheaderi_dec_ph10;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbh0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_nbh0 = main_preheaderi_i2i_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbh0_reg <= main_preheaderi_dec_nbh0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbh0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_nbh0_reg <= main_preheaderi_dec_nbh0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbh0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_deth0 = 32'd8;
	end
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_deth0 = main_preheaderi_379_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_deth0_reg <= main_preheaderi_dec_deth0;
		if (start == 1'b0 && ^(main_preheaderi_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_deth0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %379, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_deth0_reg <= main_preheaderi_dec_deth0;
		if (start == 1'b0 && ^(main_preheaderi_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_deth0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_ah20 = main_preheaderi_ii_var1_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah20_reg <= main_preheaderi_dec_ah20;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_ah20_reg <= main_preheaderi_dec_ah20;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_rh20 = main_preheaderi_dec_rh10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh20_reg <= main_preheaderi_dec_rh20;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_rh20_reg <= main_preheaderi_dec_rh20;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_ah10 = main_preheaderi_apl12ii;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_ah10_reg <= main_preheaderi_dec_ah10;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_ah10_reg <= main_preheaderi_dec_ah10;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_rh10 = main_preheaderi_404_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rh10_reg <= main_preheaderi_dec_rh10;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %404, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_rh10_reg <= main_preheaderi_dec_rh10;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_plt20 = main_preheaderi_dec_plt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt20_reg <= main_preheaderi_dec_plt20;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_plt20_reg <= main_preheaderi_dec_plt20;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_plt10 = main_preheaderi_308_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_plt10_reg <= main_preheaderi_dec_plt10;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %308, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_plt10_reg <= main_preheaderi_dec_plt10;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbl0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_nbl0 = main_preheaderi_i13i_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_nbl0_reg <= main_preheaderi_dec_nbl0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbl0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_nbl0_reg <= main_preheaderi_dec_nbl0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_detl0 = 32'd32;
	end
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_detl0 = main_preheaderi_307_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_detl0_reg <= main_preheaderi_dec_detl0;
		if (start == 1'b0 && ^(main_preheaderi_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_detl0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %307, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_detl0_reg <= main_preheaderi_dec_detl0;
		if (start == 1'b0 && ^(main_preheaderi_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_detl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_al20 = main_preheaderi_i11i_var0_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al20_reg <= main_preheaderi_dec_al20;
		if (start == 1'b0 && ^(main_preheaderi_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_al20_reg <= main_preheaderi_dec_al20;
		if (start == 1'b0 && ^(main_preheaderi_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_rlt20 = main_preheaderi_dec_rlt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt20_reg <= main_preheaderi_dec_rlt20;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_rlt20_reg <= main_preheaderi_dec_rlt20;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_al10 = main_preheaderi_apl12i7i_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_al10_reg <= main_preheaderi_dec_al10;
		if (start == 1'b0 && ^(main_preheaderi_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_al10_reg <= main_preheaderi_dec_al10;
		if (start == 1'b0 && ^(main_preheaderi_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) */ begin
		main_preheaderi_dec_rlt10 = main_preheaderi_332_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_dec_rlt10_reg <= main_preheaderi_dec_rlt10;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %332, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_158) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond5_reg == 1'd0))) begin
		main_preheaderi_dec_rlt10_reg <= main_preheaderi_dec_rlt10;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %i.11.i = shl i32 %indvar, 1*/
		main_preheaderi_i11i = (main_preheaderi_indvar_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %i.11.i = shl i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_i11i_reg <= main_preheaderi_i11i;
		if (start == 1'b0 && ^(main_preheaderi_i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i11i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %251 = or i32 %i.11.i, 1*/
		main_preheaderi_251 = (main_preheaderi_i11i | 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %251 = or i32 %i.11.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_251_reg <= main_preheaderi_251;
		if (start == 1'b0 && ^(main_preheaderi_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %251*/
		main_preheaderi_scevgep6 = (1'd0 | (4 * main_preheaderi_251));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %251*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_scevgep6_reg <= main_preheaderi_scevgep6;
		if (start == 1'b0 && ^(main_preheaderi_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep7 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11.i*/
		main_preheaderi_scevgep7 = (1'd0 | (4 * main_preheaderi_i11i));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %scevgep7 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_scevgep7_reg <= main_preheaderi_scevgep7;
		if (start == 1'b0 && ^(main_preheaderi_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_252 = main_signed_divide_32_0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %252 = sdiv i32 %i.11.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_252_reg <= main_preheaderi_252;
		if (start == 1'b0 && ^(main_preheaderi_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_252_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %252 = sdiv i32 %i.11.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_252_reg <= main_preheaderi_252;
		if (start == 1'b0 && ^(main_preheaderi_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_252_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = sdiv i32 %i.02.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_62)) begin
		main_preheaderi_252_reg <= main_legup_memset_4_i64exit_32;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %253 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %252*/
		main_preheaderi_253 = (1'd0 | (4 * main_preheaderi_252));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %253 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %252*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_253_reg <= main_preheaderi_253;
		if (start == 1'b0 && ^(main_preheaderi_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
		main_preheaderi_254 = compressed_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_254_reg <= main_preheaderi_254;
		if (start == 1'b0 && ^(main_preheaderi_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %255 = ashr i32 %254, 6*/
		main_preheaderi_255 = ($signed(main_preheaderi_254) >>> 32'd6);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %255 = ashr i32 %254, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_255_reg <= main_preheaderi_255;
		if (start == 1'b0 && ^(main_preheaderi_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_256 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_preheaderi_256_reg <= main_preheaderi_256;
		if (start == 1'b0 && ^(main_preheaderi_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_257 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_preheaderi_257_reg <= main_preheaderi_257;
		if (start == 1'b0 && ^(main_preheaderi_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_257_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_258 = main_preheaderi_258_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %258 = mul nsw i32 %257, %256*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_258_reg <= main_preheaderi_258;
		if (start == 1'b0 && ^(main_preheaderi_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_258_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %258 = mul nsw i32 %257, %256*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_258_reg <= main_preheaderi_258;
		if (start == 1'b0 && ^(main_preheaderi_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_259 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_259_reg <= main_preheaderi_259;
		if (start == 1'b0 && ^(main_preheaderi_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_260 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_260_reg <= main_preheaderi_260;
		if (start == 1'b0 && ^(main_preheaderi_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_260_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_261 = main_preheaderi_261_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %261 = mul nsw i32 %260, %259*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_preheaderi_261_reg <= main_preheaderi_261;
		if (start == 1'b0 && ^(main_preheaderi_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_261_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %261 = mul nsw i32 %260, %259*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_preheaderi_261_reg <= main_preheaderi_261;
		if (start == 1'b0 && ^(main_preheaderi_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
		main_preheaderi_262 = (main_preheaderi_261 + main_preheaderi_258_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %262 = add nsw i32 %261, %258*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_preheaderi_262_reg <= main_preheaderi_262;
		if (start == 1'b0 && ^(main_preheaderi_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_263 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_preheaderi_263_reg <= main_preheaderi_263;
		if (start == 1'b0 && ^(main_preheaderi_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_264 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_preheaderi_264_reg <= main_preheaderi_264;
		if (start == 1'b0 && ^(main_preheaderi_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_264_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_265 = main_preheaderi_265_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %265 = mul nsw i32 %264, %263*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_265_reg <= main_preheaderi_265;
		if (start == 1'b0 && ^(main_preheaderi_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_265_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %265 = mul nsw i32 %264, %263*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_265_reg <= main_preheaderi_265;
		if (start == 1'b0 && ^(main_preheaderi_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
		main_preheaderi_266 = (main_preheaderi_262_reg + main_preheaderi_265);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %266 = add nsw i32 %262, %265*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_266_reg <= main_preheaderi_266;
		if (start == 1'b0 && ^(main_preheaderi_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_267 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_267_reg <= main_preheaderi_267;
		if (start == 1'b0 && ^(main_preheaderi_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_268 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_268_reg <= main_preheaderi_268;
		if (start == 1'b0 && ^(main_preheaderi_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_268_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_269 = main_preheaderi_269_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %269 = mul nsw i32 %268, %267*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_114)) begin
		main_preheaderi_269_reg <= main_preheaderi_269;
		if (start == 1'b0 && ^(main_preheaderi_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_269_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %269 = mul nsw i32 %268, %267*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_114)) begin
		main_preheaderi_269_reg <= main_preheaderi_269;
		if (start == 1'b0 && ^(main_preheaderi_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
		main_preheaderi_270 = (main_preheaderi_266_reg + main_preheaderi_269);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %270 = add nsw i32 %266, %269*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_114)) begin
		main_preheaderi_270_reg <= main_preheaderi_270;
		if (start == 1'b0 && ^(main_preheaderi_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_271 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_114)) begin
		main_preheaderi_271_reg <= main_preheaderi_271;
		if (start == 1'b0 && ^(main_preheaderi_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_272 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_114)) begin
		main_preheaderi_272_reg <= main_preheaderi_272;
		if (start == 1'b0 && ^(main_preheaderi_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_272_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_273 = main_preheaderi_273_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_115)) begin
		main_preheaderi_273_reg <= main_preheaderi_273;
		if (start == 1'b0 && ^(main_preheaderi_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_273_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_115)) begin
		main_preheaderi_273_reg <= main_preheaderi_273;
		if (start == 1'b0 && ^(main_preheaderi_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
		main_preheaderi_274 = (main_preheaderi_270_reg + main_preheaderi_273);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %270, %273*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_115)) begin
		main_preheaderi_274_reg <= main_preheaderi_274;
		if (start == 1'b0 && ^(main_preheaderi_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_275 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_115)) begin
		main_preheaderi_275_reg <= main_preheaderi_275;
		if (start == 1'b0 && ^(main_preheaderi_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_276 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_115)) begin
		main_preheaderi_276_reg <= main_preheaderi_276;
		if (start == 1'b0 && ^(main_preheaderi_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_276_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_277 = main_preheaderi_277_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %277 = mul nsw i32 %276, %275*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_116)) begin
		main_preheaderi_277_reg <= main_preheaderi_277;
		if (start == 1'b0 && ^(main_preheaderi_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_277_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %277 = mul nsw i32 %276, %275*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_116)) begin
		main_preheaderi_277_reg <= main_preheaderi_277;
		if (start == 1'b0 && ^(main_preheaderi_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_277_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
		main_preheaderi_278 = (main_preheaderi_274_reg + main_preheaderi_277);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_116)) begin
		main_preheaderi_278_reg <= main_preheaderi_278;
		if (start == 1'b0 && ^(main_preheaderi_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %279 = ashr i32 %278, 14*/
		main_preheaderi_279 = ($signed(main_preheaderi_278) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %279 = ashr i32 %278, 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_116)) begin
		main_preheaderi_279_reg <= main_preheaderi_279;
		if (start == 1'b0 && ^(main_preheaderi_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_279_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_280 = main_preheaderi_280_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %280 = mul i32 %dec_al1.0, %dec_rlt1.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_280_reg <= main_preheaderi_280;
		if (start == 1'b0 && ^(main_preheaderi_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_280_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %280 = mul i32 %dec_al1.0, %dec_rlt1.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_280_reg <= main_preheaderi_280;
		if (start == 1'b0 && ^(main_preheaderi_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_280_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_281 = main_preheaderi_281_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %281 = mul i32 %dec_al2.0, %dec_rlt2.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_281_reg <= main_preheaderi_281;
		if (start == 1'b0 && ^(main_preheaderi_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_281_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %281 = mul i32 %dec_al2.0, %dec_rlt2.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_281_reg <= main_preheaderi_281;
		if (start == 1'b0 && ^(main_preheaderi_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
		main_preheaderi_tmpii = (main_preheaderi_281 + main_preheaderi_280);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %tmp.i.i = add i32 %281, %280*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_tmpii_reg <= main_preheaderi_tmpii;
		if (start == 1'b0 && ^(main_preheaderi_tmpii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_tmpii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp1.i.i = shl i32 %tmp.i.i, 1*/
		main_preheaderi_tmp1ii = (main_preheaderi_tmpii <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %tmp1.i.i = shl i32 %tmp.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_tmp1ii_reg <= main_preheaderi_tmp1ii;
		if (start == 1'b0 && ^(main_preheaderi_tmp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_tmp1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %282 = ashr i32 %tmp1.i.i, 15*/
		main_preheaderi_282 = ($signed(main_preheaderi_tmp1ii) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %282 = ashr i32 %tmp1.i.i, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_282_reg <= main_preheaderi_282;
		if (start == 1'b0 && ^(main_preheaderi_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
		main_preheaderi_283 = (main_preheaderi_282_reg + main_preheaderi_279);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %283 = add nsw i32 %282, %279*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_116)) begin
		main_preheaderi_283_reg <= main_preheaderi_283;
		if (start == 1'b0 && ^(main_preheaderi_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %284 = lshr i32 %254, 2*/
		main_preheaderi_284 = (main_preheaderi_254 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %284 = lshr i32 %254, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_284_reg <= main_preheaderi_284;
		if (start == 1'b0 && ^(main_preheaderi_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_284_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %285 = and i32 %284, 15*/
		main_preheaderi_285 = (main_preheaderi_284 & 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %285 = and i32 %284, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_285_reg <= main_preheaderi_285;
		if (start == 1'b0 && ^(main_preheaderi_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %286 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %285*/
		main_preheaderi_286 = (1'd0 | (4 * main_preheaderi_285));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %286 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %285*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_286_reg <= main_preheaderi_286;
		if (start == 1'b0 && ^(main_preheaderi_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
		main_preheaderi_287 = qq4_code4_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_287_reg <= main_preheaderi_287;
		if (start == 1'b0 && ^(main_preheaderi_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_287_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_288 = main_preheaderi_288_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %288 = mul nsw i32 %287, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_288_reg <= main_preheaderi_288;
		if (start == 1'b0 && ^(main_preheaderi_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_288_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %288 = mul nsw i32 %287, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_288_reg <= main_preheaderi_288;
		if (start == 1'b0 && ^(main_preheaderi_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %289 = ashr i32 %288, 15*/
		main_preheaderi_289 = ($signed(main_preheaderi_288) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %289 = ashr i32 %288, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_289_reg <= main_preheaderi_289;
		if (start == 1'b0 && ^(main_preheaderi_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_289_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_290 = main_preheaderi_290_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %290 = mul nsw i32 %250, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_290_reg <= main_preheaderi_290;
		if (start == 1'b0 && ^(main_preheaderi_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_290_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %290 = mul nsw i32 %250, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_290_reg <= main_preheaderi_290;
		if (start == 1'b0 && ^(main_preheaderi_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %291 = ashr i32 %290, 15*/
		main_preheaderi_291 = ($signed(main_preheaderi_290) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %291 = ashr i32 %290, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_291_reg <= main_preheaderi_291;
		if (start == 1'b0 && ^(main_preheaderi_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
		main_preheaderi_292 = (main_preheaderi_291_reg + main_preheaderi_283);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %292 = add nsw i32 %291, %283*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_116)) begin
		main_preheaderi_292_reg <= main_preheaderi_292;
		if (start == 1'b0 && ^(main_preheaderi_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_292_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_293 = main_preheaderi_293_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %293 = mul nsw i32 %dec_nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_293_reg <= main_preheaderi_293;
		if (start == 1'b0 && ^(main_preheaderi_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_293_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %293 = mul nsw i32 %dec_nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_293_reg <= main_preheaderi_293;
		if (start == 1'b0 && ^(main_preheaderi_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %294 = ashr i32 %293, 7*/
		main_preheaderi_294 = ($signed(main_preheaderi_293) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %294 = ashr i32 %293, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_294_reg <= main_preheaderi_294;
		if (start == 1'b0 && ^(main_preheaderi_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %295 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %285*/
		main_preheaderi_295 = (1'd0 | (4 * main_preheaderi_285));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %295 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %285*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_295_reg <= main_preheaderi_295;
		if (start == 1'b0 && ^(main_preheaderi_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %296 = load i32* %295, align 4, !tbaa !1*/
		main_preheaderi_296 = wl_code_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %296 = load i32* %295, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_296_reg <= main_preheaderi_296;
		if (start == 1'b0 && ^(main_preheaderi_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
		main_preheaderi_297 = (main_preheaderi_294_reg + main_preheaderi_296);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %297 = add nsw i32 %294, %296*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_297_reg <= main_preheaderi_297;
		if (start == 1'b0 && ^(main_preheaderi_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %298 = icmp slt i32 %297, 0*/
		main_preheaderi_298 = ($signed(main_preheaderi_297) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %298 = icmp slt i32 %297, 0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_298_reg <= main_preheaderi_298;
		if (start == 1'b0 && ^(main_preheaderi_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i12.i = select i1 %298, i32 0, i32 %297*/
		main_preheaderi_i12i = (main_preheaderi_298 ? 32'd0 : main_preheaderi_297);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i12.i = select i1 %298, i32 0, i32 %297*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_i12i_reg <= main_preheaderi_i12i;
		if (start == 1'b0 && ^(main_preheaderi_i12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i12i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %299 = icmp sgt i32 %..i12.i, 18432*/
		main_preheaderi_299 = ($signed(main_preheaderi_i12i) > $signed(32'd18432));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %299 = icmp sgt i32 %..i12.i, 18432*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_299_reg <= main_preheaderi_299;
		if (start == 1'b0 && ^(main_preheaderi_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i13.i = select i1 %299, i32 18432, i32 %..i12.i*/
		main_preheaderi_i13i = (main_preheaderi_299 ? 32'd18432 : main_preheaderi_i12i);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %...i13.i = select i1 %299, i32 18432, i32 %..i12.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_i13i_reg <= main_preheaderi_i13i;
		if (start == 1'b0 && ^(main_preheaderi_i13i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i13i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %300 = lshr i32 %...i13.i, 6*/
		main_preheaderi_300 = (main_preheaderi_i13i >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %300 = lshr i32 %...i13.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_300_reg <= main_preheaderi_300;
		if (start == 1'b0 && ^(main_preheaderi_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %301 = and i32 %300, 31*/
		main_preheaderi_301 = (main_preheaderi_300 & 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %301 = and i32 %300, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_301_reg <= main_preheaderi_301;
		if (start == 1'b0 && ^(main_preheaderi_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %302 = ashr i32 %...i13.i, 11*/
		main_preheaderi_302 = ($signed(main_preheaderi_i13i) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %302 = ashr i32 %...i13.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_302_reg <= main_preheaderi_302;
		if (start == 1'b0 && ^(main_preheaderi_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_302_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %303 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %301*/
		main_preheaderi_303 = (1'd0 | (4 * main_preheaderi_301_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %303 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %301*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_303_reg <= main_preheaderi_303;
		if (start == 1'b0 && ^(main_preheaderi_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !1*/
		main_preheaderi_304 = ilb_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_304_reg <= main_preheaderi_304;
		if (start == 1'b0 && ^(main_preheaderi_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %305 = sub i32 9, %302*/
		main_preheaderi_305 = (32'd9 - main_preheaderi_302);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %305 = sub i32 9, %302*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_305_reg <= main_preheaderi_305;
		if (start == 1'b0 && ^(main_preheaderi_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %306 = ashr i32 %304, %305*/
		main_preheaderi_306 = ($signed(main_preheaderi_304) >>> main_preheaderi_305_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %306 = ashr i32 %304, %305*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_306_reg <= main_preheaderi_306;
		if (start == 1'b0 && ^(main_preheaderi_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %307 = shl i32 %306, 3*/
		main_preheaderi_307 = (main_preheaderi_306 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %307 = shl i32 %306, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_307_reg <= main_preheaderi_307;
		if (start == 1'b0 && ^(main_preheaderi_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
		main_preheaderi_308 = (main_preheaderi_279_reg + main_preheaderi_289);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %308 = add nsw i32 %279, %289*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_308_reg <= main_preheaderi_308;
		if (start == 1'b0 && ^(main_preheaderi_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %309 = shl nsw i32 %dec_al1.0, 2*/
		main_preheaderi_309 = (main_preheaderi_dec_al10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %309 = shl nsw i32 %dec_al1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_309_reg <= main_preheaderi_309;
		if (start == 1'b0 && ^(main_preheaderi_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_309_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_310 = main_preheaderi_310_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %310 = mul nsw i32 %dec_plt1.0, %308*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_310_reg <= main_preheaderi_310;
		if (start == 1'b0 && ^(main_preheaderi_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_310_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %310 = mul nsw i32 %dec_plt1.0, %308*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_310_reg <= main_preheaderi_310;
		if (start == 1'b0 && ^(main_preheaderi_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %311 = icmp sgt i32 %310, -1*/
		main_preheaderi_311 = ($signed(main_preheaderi_310) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %311 = icmp sgt i32 %310, -1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_311_reg <= main_preheaderi_311;
		if (start == 1'b0 && ^(main_preheaderi_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %312 = sub nsw i32 0, %309*/
		main_preheaderi_312 = (32'd0 - main_preheaderi_309);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %312 = sub nsw i32 0, %309*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_312_reg <= main_preheaderi_312;
		if (start == 1'b0 && ^(main_preheaderi_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.1.i8.i = select i1 %311, i32 %312, i32 %309*/
		main_preheaderi_1i8i = (main_preheaderi_311 ? main_preheaderi_312_reg : main_preheaderi_309_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.1.i8.i = select i1 %311, i32 %312, i32 %309*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_1i8i_reg <= main_preheaderi_1i8i;
		if (start == 1'b0 && ^(main_preheaderi_1i8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_1i8i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %313 = ashr i32 %.1.i8.i, 7*/
		main_preheaderi_313 = ($signed(main_preheaderi_1i8i) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %313 = ashr i32 %.1.i8.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_313_reg <= main_preheaderi_313;
		if (start == 1'b0 && ^(main_preheaderi_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_313_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_314 = main_preheaderi_314_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %314 = mul nsw i32 %dec_plt2.0, %308*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_314_reg <= main_preheaderi_314;
		if (start == 1'b0 && ^(main_preheaderi_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_314_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %314 = mul nsw i32 %dec_plt2.0, %308*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_314_reg <= main_preheaderi_314;
		if (start == 1'b0 && ^(main_preheaderi_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %315 = ashr i32 %314, 31*/
		main_preheaderi_315 = ($signed(main_preheaderi_314) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %315 = ashr i32 %314, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_315_reg <= main_preheaderi_315;
		if (start == 1'b0 && ^(main_preheaderi_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %316 = and i32 %315, -256*/
		main_preheaderi_316 = (main_preheaderi_315 & -32'd256);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %316 = and i32 %315, -256*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_316_reg <= main_preheaderi_316;
		if (start == 1'b0 && ^(main_preheaderi_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %317 = or i32 %316, 128*/
		main_preheaderi_317 = (main_preheaderi_316 | 32'd128);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %317 = or i32 %316, 128*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_317_reg <= main_preheaderi_317;
		if (start == 1'b0 && ^(main_preheaderi_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_317_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_318 = main_preheaderi_318_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %318 = mul nsw i32 %dec_al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_318_reg <= main_preheaderi_318;
		if (start == 1'b0 && ^(main_preheaderi_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_318_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %318 = mul nsw i32 %dec_al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_318_reg <= main_preheaderi_318;
		if (start == 1'b0 && ^(main_preheaderi_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %319 = ashr i32 %318, 7*/
		main_preheaderi_319 = ($signed(main_preheaderi_318) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %319 = ashr i32 %318, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_319_reg <= main_preheaderi_319;
		if (start == 1'b0 && ^(main_preheaderi_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
		main_preheaderi_wd40i9i = (main_preheaderi_313 + main_preheaderi_319_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i9.i = add nsw i32 %313, %319*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_wd40i9i_reg <= main_preheaderi_wd40i9i;
		if (start == 1'b0 && ^(main_preheaderi_wd40i9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_wd40i9i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
		main_preheaderi_320 = (main_preheaderi_wd40i9i + main_preheaderi_317);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %320 = add nsw i32 %wd4.0.i9.i, %317*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_320_reg <= main_preheaderi_320;
		if (start == 1'b0 && ^(main_preheaderi_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_320_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %321 = icmp sgt i32 %320, 12288*/
		main_preheaderi_321 = ($signed(main_preheaderi_320) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %321 = icmp sgt i32 %320, 12288*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_321_reg <= main_preheaderi_321;
		if (start == 1'b0 && ^(main_preheaderi_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_321_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i10.i = select i1 %321, i32 12288, i32 %320*/
		main_preheaderi_i10i = (main_preheaderi_321 ? 32'd12288 : main_preheaderi_320);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i10.i = select i1 %321, i32 12288, i32 %320*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_i10i_reg <= main_preheaderi_i10i;
		if (start == 1'b0 && ^(main_preheaderi_i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i10i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %322 = icmp slt i32 %..i10.i, -12288*/
		main_preheaderi_322 = ($signed(main_preheaderi_i10i_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %322 = icmp slt i32 %..i10.i, -12288*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_322_reg <= main_preheaderi_322;
		if (start == 1'b0 && ^(main_preheaderi_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i11.i = select i1 %322, i32 -12288, i32 %..i10.i*/
		main_preheaderi_i11i_var0 = (main_preheaderi_322 ? -32'd12288 : main_preheaderi_i10i_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %...i11.i = select i1 %322, i32 -12288, i32 %..i10.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_i11i_var0_reg <= main_preheaderi_i11i_var0;
		if (start == 1'b0 && ^(main_preheaderi_i11i_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i11i_var0_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_323 = main_preheaderi_323_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %323 = mul nsw i32 %dec_al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_323_reg <= main_preheaderi_323;
		if (start == 1'b0 && ^(main_preheaderi_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_323_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %323 = mul nsw i32 %dec_al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_323_reg <= main_preheaderi_323;
		if (start == 1'b0 && ^(main_preheaderi_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_323_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %324 = ashr i32 %323, 8*/
		main_preheaderi_324 = ($signed(main_preheaderi_323) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %324 = ashr i32 %323, 8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_324_reg <= main_preheaderi_324;
		if (start == 1'b0 && ^(main_preheaderi_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %325 = ashr i32 %310, 31*/
		main_preheaderi_325 = ($signed(main_preheaderi_310) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %325 = ashr i32 %310, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_325_reg <= main_preheaderi_325;
		if (start == 1'b0 && ^(main_preheaderi_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %326 = and i32 %325, -384*/
		main_preheaderi_326 = (main_preheaderi_325 & -32'd384);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %326 = and i32 %325, -384*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_326_reg <= main_preheaderi_326;
		if (start == 1'b0 && ^(main_preheaderi_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_326_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
		main_preheaderi_327 = (main_preheaderi_324 + 32'd192);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %327 = add nsw i32 %324, 192*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_327_reg <= main_preheaderi_327;
		if (start == 1'b0 && ^(main_preheaderi_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_327_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
		main_preheaderi_apl10i5i = (main_preheaderi_327_reg + main_preheaderi_326);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i5.i = add nsw i32 %327, %326*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_apl10i5i_reg <= main_preheaderi_apl10i5i;
		if (start == 1'b0 && ^(main_preheaderi_apl10i5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10i5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %328 = sub nsw i32 15360, %...i11.i*/
		main_preheaderi_328 = (32'd15360 - main_preheaderi_i11i_var0);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %328 = sub nsw i32 15360, %...i11.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_328_reg <= main_preheaderi_328;
		if (start == 1'b0 && ^(main_preheaderi_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %329 = icmp sgt i32 %apl1.0.i5.i, %328*/
		main_preheaderi_329 = ($signed(main_preheaderi_apl10i5i_reg) > $signed(main_preheaderi_328));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %329 = icmp sgt i32 %apl1.0.i5.i, %328*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_329_reg <= main_preheaderi_329;
		if (start == 1'b0 && ^(main_preheaderi_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i6.i = select i1 %329, i32 %328, i32 %apl1.0.i5.i*/
		main_preheaderi_apl10i6i = (main_preheaderi_329 ? main_preheaderi_328 : main_preheaderi_apl10i5i_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i6.i = select i1 %329, i32 %328, i32 %apl1.0.i5.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_apl10i6i_reg <= main_preheaderi_apl10i6i;
		if (start == 1'b0 && ^(main_preheaderi_apl10i6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10i6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %330 = sub nsw i32 0, %328*/
		main_preheaderi_330 = (32'd0 - main_preheaderi_328);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %330 = sub nsw i32 0, %328*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_330_reg <= main_preheaderi_330;
		if (start == 1'b0 && ^(main_preheaderi_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %331 = icmp slt i32 %.apl1.0.i6.i, %330*/
		main_preheaderi_331 = ($signed(main_preheaderi_apl10i6i_reg) < $signed(main_preheaderi_330_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %331 = icmp slt i32 %.apl1.0.i6.i, %330*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_331_reg <= main_preheaderi_331;
		if (start == 1'b0 && ^(main_preheaderi_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i7.i = select i1 %331, i32 %330, i32 %.apl1.0.i6.i*/
		main_preheaderi_apl12i7i = (main_preheaderi_331 ? main_preheaderi_330_reg : main_preheaderi_apl10i6i_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i7.i = select i1 %331, i32 %330, i32 %.apl1.0.i6.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_apl12i7i_reg <= main_preheaderi_apl12i7i;
		if (start == 1'b0 && ^(main_preheaderi_apl12i7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl12i7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
		main_preheaderi_332 = (main_preheaderi_289 + main_preheaderi_283_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %332 = add nsw i32 %289, %283*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_332_reg <= main_preheaderi_332;
		if (start == 1'b0 && ^(main_preheaderi_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_332_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_333 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_preheaderi_333_reg <= main_preheaderi_333;
		if (start == 1'b0 && ^(main_preheaderi_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_333_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_334 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_preheaderi_334_reg <= main_preheaderi_334;
		if (start == 1'b0 && ^(main_preheaderi_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_334_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_335 = main_preheaderi_335_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %335 = mul nsw i32 %334, %333*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_335_reg <= main_preheaderi_335;
		if (start == 1'b0 && ^(main_preheaderi_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_335_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %335 = mul nsw i32 %334, %333*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_335_reg <= main_preheaderi_335;
		if (start == 1'b0 && ^(main_preheaderi_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_335_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_336 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_336_reg <= main_preheaderi_336;
		if (start == 1'b0 && ^(main_preheaderi_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_337 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_337_reg <= main_preheaderi_337;
		if (start == 1'b0 && ^(main_preheaderi_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_337_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_338 = main_preheaderi_338_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %338 = mul nsw i32 %337, %336*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_preheaderi_338_reg <= main_preheaderi_338;
		if (start == 1'b0 && ^(main_preheaderi_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_338_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %338 = mul nsw i32 %337, %336*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_preheaderi_338_reg <= main_preheaderi_338;
		if (start == 1'b0 && ^(main_preheaderi_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_338_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
		main_preheaderi_339 = (main_preheaderi_338 + main_preheaderi_335_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %338, %335*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_preheaderi_339_reg <= main_preheaderi_339;
		if (start == 1'b0 && ^(main_preheaderi_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_340 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_preheaderi_340_reg <= main_preheaderi_340;
		if (start == 1'b0 && ^(main_preheaderi_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_341 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_preheaderi_341_reg <= main_preheaderi_341;
		if (start == 1'b0 && ^(main_preheaderi_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_341_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_342 = main_preheaderi_342_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %342 = mul nsw i32 %341, %340*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_342_reg <= main_preheaderi_342;
		if (start == 1'b0 && ^(main_preheaderi_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_342_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %342 = mul nsw i32 %341, %340*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_342_reg <= main_preheaderi_342;
		if (start == 1'b0 && ^(main_preheaderi_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
		main_preheaderi_343 = (main_preheaderi_339_reg + main_preheaderi_342);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %343 = add nsw i32 %339, %342*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_343_reg <= main_preheaderi_343;
		if (start == 1'b0 && ^(main_preheaderi_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_343_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_344 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_344_reg <= main_preheaderi_344;
		if (start == 1'b0 && ^(main_preheaderi_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_344_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_345 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_345_reg <= main_preheaderi_345;
		if (start == 1'b0 && ^(main_preheaderi_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_345_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_346 = main_preheaderi_346_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %346 = mul nsw i32 %345, %344*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_346_reg <= main_preheaderi_346;
		if (start == 1'b0 && ^(main_preheaderi_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_346_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %346 = mul nsw i32 %345, %344*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_346_reg <= main_preheaderi_346;
		if (start == 1'b0 && ^(main_preheaderi_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
		main_preheaderi_347 = (main_preheaderi_343_reg + main_preheaderi_346);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %347 = add nsw i32 %343, %346*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_347_reg <= main_preheaderi_347;
		if (start == 1'b0 && ^(main_preheaderi_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_347_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_348 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_348_reg <= main_preheaderi_348;
		if (start == 1'b0 && ^(main_preheaderi_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_348_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_349 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_349_reg <= main_preheaderi_349;
		if (start == 1'b0 && ^(main_preheaderi_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_349_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_350 = main_preheaderi_350_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %350 = mul nsw i32 %349, %348*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_preheaderi_350_reg <= main_preheaderi_350;
		if (start == 1'b0 && ^(main_preheaderi_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_350_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %350 = mul nsw i32 %349, %348*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_preheaderi_350_reg <= main_preheaderi_350;
		if (start == 1'b0 && ^(main_preheaderi_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_350_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
		main_preheaderi_351 = (main_preheaderi_347_reg + main_preheaderi_350);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %347, %350*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_preheaderi_351_reg <= main_preheaderi_351;
		if (start == 1'b0 && ^(main_preheaderi_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_351_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_352 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_preheaderi_352_reg <= main_preheaderi_352;
		if (start == 1'b0 && ^(main_preheaderi_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_352_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_353 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_preheaderi_353_reg <= main_preheaderi_353;
		if (start == 1'b0 && ^(main_preheaderi_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_353_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_354 = main_preheaderi_354_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %354 = mul nsw i32 %353, %352*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		main_preheaderi_354_reg <= main_preheaderi_354;
		if (start == 1'b0 && ^(main_preheaderi_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_354_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %354 = mul nsw i32 %353, %352*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		main_preheaderi_354_reg <= main_preheaderi_354;
		if (start == 1'b0 && ^(main_preheaderi_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
		main_preheaderi_355 = (main_preheaderi_351_reg + main_preheaderi_354);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %355 = add nsw i32 %351, %354*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		main_preheaderi_355_reg <= main_preheaderi_355;
		if (start == 1'b0 && ^(main_preheaderi_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_355_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %356 = ashr i32 %355, 14*/
		main_preheaderi_356 = ($signed(main_preheaderi_355) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %356 = ashr i32 %355, 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		main_preheaderi_356_reg <= main_preheaderi_356;
		if (start == 1'b0 && ^(main_preheaderi_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_356_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_357 = main_preheaderi_357_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %357 = mul i32 %dec_ah1.0, %dec_rh1.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_357_reg <= main_preheaderi_357;
		if (start == 1'b0 && ^(main_preheaderi_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_357_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %357 = mul i32 %dec_ah1.0, %dec_rh1.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_357_reg <= main_preheaderi_357;
		if (start == 1'b0 && ^(main_preheaderi_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_357_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_358 = main_preheaderi_358_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %358 = mul i32 %dec_ah2.0, %dec_rh2.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_358_reg <= main_preheaderi_358;
		if (start == 1'b0 && ^(main_preheaderi_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_358_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %358 = mul i32 %dec_ah2.0, %dec_rh2.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_358_reg <= main_preheaderi_358;
		if (start == 1'b0 && ^(main_preheaderi_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_358_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
		main_preheaderi_tmpi3i = (main_preheaderi_358 + main_preheaderi_357);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %tmp.i3.i = add i32 %358, %357*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_tmpi3i_reg <= main_preheaderi_tmpi3i;
		if (start == 1'b0 && ^(main_preheaderi_tmpi3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_tmpi3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %tmp1.i4.i = shl i32 %tmp.i3.i, 1*/
		main_preheaderi_tmp1i4i = (main_preheaderi_tmpi3i <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %tmp1.i4.i = shl i32 %tmp.i3.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_tmp1i4i_reg <= main_preheaderi_tmp1i4i;
		if (start == 1'b0 && ^(main_preheaderi_tmp1i4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_tmp1i4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %359 = ashr i32 %tmp1.i4.i, 15*/
		main_preheaderi_359 = ($signed(main_preheaderi_tmp1i4i) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %359 = ashr i32 %tmp1.i4.i, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_359_reg <= main_preheaderi_359;
		if (start == 1'b0 && ^(main_preheaderi_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
		main_preheaderi_360 = (main_preheaderi_359_reg + main_preheaderi_356);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %360 = add nsw i32 %359, %356*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		main_preheaderi_360_reg <= main_preheaderi_360;
		if (start == 1'b0 && ^(main_preheaderi_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %361 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %255*/
		main_preheaderi_361 = (1'd0 | (4 * main_preheaderi_255));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %361 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_361_reg <= main_preheaderi_361;
		if (start == 1'b0 && ^(main_preheaderi_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_361_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
		main_preheaderi_362 = qq2_code2_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_362_reg <= main_preheaderi_362;
		if (start == 1'b0 && ^(main_preheaderi_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_362_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_363 = main_preheaderi_363_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %363 = mul nsw i32 %362, %dec_deth.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_preheaderi_363_reg <= main_preheaderi_363;
		if (start == 1'b0 && ^(main_preheaderi_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_363_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %363 = mul nsw i32 %362, %dec_deth.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_preheaderi_363_reg <= main_preheaderi_363;
		if (start == 1'b0 && ^(main_preheaderi_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %364 = ashr i32 %363, 15*/
		main_preheaderi_364 = ($signed(main_preheaderi_363) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %364 = ashr i32 %363, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_preheaderi_364_reg <= main_preheaderi_364;
		if (start == 1'b0 && ^(main_preheaderi_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_364_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_365 = main_preheaderi_365_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %365 = mul nsw i32 %dec_nbh.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_365_reg <= main_preheaderi_365;
		if (start == 1'b0 && ^(main_preheaderi_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_365_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %365 = mul nsw i32 %dec_nbh.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_365_reg <= main_preheaderi_365;
		if (start == 1'b0 && ^(main_preheaderi_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_365_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %366 = ashr i32 %365, 7*/
		main_preheaderi_366 = ($signed(main_preheaderi_365) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %366 = ashr i32 %365, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_366_reg <= main_preheaderi_366;
		if (start == 1'b0 && ^(main_preheaderi_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_366_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %367 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %255*/
		main_preheaderi_367 = (1'd0 | (4 * main_preheaderi_255));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %367 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		main_preheaderi_367_reg <= main_preheaderi_367;
		if (start == 1'b0 && ^(main_preheaderi_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_367_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
		main_preheaderi_368 = wh_code_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_368_reg <= main_preheaderi_368;
		if (start == 1'b0 && ^(main_preheaderi_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_368_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
		main_preheaderi_369 = (main_preheaderi_366_reg + main_preheaderi_368);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %369 = add nsw i32 %366, %368*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_369_reg <= main_preheaderi_369;
		if (start == 1'b0 && ^(main_preheaderi_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_369_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %370 = icmp slt i32 %369, 0*/
		main_preheaderi_370 = ($signed(main_preheaderi_369) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %370 = icmp slt i32 %369, 0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_370_reg <= main_preheaderi_370;
		if (start == 1'b0 && ^(main_preheaderi_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i1.i = select i1 %370, i32 0, i32 %369*/
		main_preheaderi_i1i = (main_preheaderi_370 ? 32'd0 : main_preheaderi_369);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i1.i = select i1 %370, i32 0, i32 %369*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_i1i_reg <= main_preheaderi_i1i;
		if (start == 1'b0 && ^(main_preheaderi_i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %371 = icmp sgt i32 %..i1.i, 22528*/
		main_preheaderi_371 = ($signed(main_preheaderi_i1i) > $signed(32'd22528));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %371 = icmp sgt i32 %..i1.i, 22528*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_371_reg <= main_preheaderi_371;
		if (start == 1'b0 && ^(main_preheaderi_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i2.i = select i1 %371, i32 22528, i32 %..i1.i*/
		main_preheaderi_i2i = (main_preheaderi_371 ? 32'd22528 : main_preheaderi_i1i);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %...i2.i = select i1 %371, i32 22528, i32 %..i1.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_i2i_reg <= main_preheaderi_i2i;
		if (start == 1'b0 && ^(main_preheaderi_i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %372 = lshr i32 %...i2.i, 6*/
		main_preheaderi_372 = (main_preheaderi_i2i >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %372 = lshr i32 %...i2.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_372_reg <= main_preheaderi_372;
		if (start == 1'b0 && ^(main_preheaderi_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_372_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %373 = and i32 %372, 31*/
		main_preheaderi_373 = (main_preheaderi_372 & 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %373 = and i32 %372, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_373_reg <= main_preheaderi_373;
		if (start == 1'b0 && ^(main_preheaderi_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_373_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %374 = ashr i32 %...i2.i, 11*/
		main_preheaderi_374 = ($signed(main_preheaderi_i2i) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %374 = ashr i32 %...i2.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_374_reg <= main_preheaderi_374;
		if (start == 1'b0 && ^(main_preheaderi_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_374_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %375 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %373*/
		main_preheaderi_375 = (1'd0 | (4 * main_preheaderi_373_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %375 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %373*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_preheaderi_375_reg <= main_preheaderi_375;
		if (start == 1'b0 && ^(main_preheaderi_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
		main_preheaderi_376 = ilb_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_376_reg <= main_preheaderi_376;
		if (start == 1'b0 && ^(main_preheaderi_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_376_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %377 = sub i32 11, %374*/
		main_preheaderi_377 = (32'd11 - main_preheaderi_374);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %377 = sub i32 11, %374*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_377_reg <= main_preheaderi_377;
		if (start == 1'b0 && ^(main_preheaderi_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_377_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %378 = ashr i32 %376, %377*/
		main_preheaderi_378 = ($signed(main_preheaderi_376) >>> main_preheaderi_377_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %378 = ashr i32 %376, %377*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_378_reg <= main_preheaderi_378;
		if (start == 1'b0 && ^(main_preheaderi_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %379 = shl i32 %378, 3*/
		main_preheaderi_379 = (main_preheaderi_378 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %379 = shl i32 %378, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_379_reg <= main_preheaderi_379;
		if (start == 1'b0 && ^(main_preheaderi_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
		main_preheaderi_380 = (main_preheaderi_356 + main_preheaderi_364_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %380 = add nsw i32 %356, %364*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		main_preheaderi_380_reg <= main_preheaderi_380;
		if (start == 1'b0 && ^(main_preheaderi_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_380_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %381 = shl nsw i32 %dec_ah1.0, 2*/
		main_preheaderi_381 = (main_preheaderi_dec_ah10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %381 = shl nsw i32 %dec_ah1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_381_reg <= main_preheaderi_381;
		if (start == 1'b0 && ^(main_preheaderi_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_381_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_382 = main_preheaderi_382_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %382 = mul nsw i32 %dec_ph1.0, %380*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_382_reg <= main_preheaderi_382;
		if (start == 1'b0 && ^(main_preheaderi_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_382_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %382 = mul nsw i32 %dec_ph1.0, %380*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_382_reg <= main_preheaderi_382;
		if (start == 1'b0 && ^(main_preheaderi_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %383 = icmp sgt i32 %382, -1*/
		main_preheaderi_383 = ($signed(main_preheaderi_382) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %383 = icmp sgt i32 %382, -1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_383_reg <= main_preheaderi_383;
		if (start == 1'b0 && ^(main_preheaderi_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_383_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %384 = sub nsw i32 0, %381*/
		main_preheaderi_384 = (32'd0 - main_preheaderi_381);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %384 = sub nsw i32 0, %381*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_384_reg <= main_preheaderi_384;
		if (start == 1'b0 && ^(main_preheaderi_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.1.i.i = select i1 %383, i32 %384, i32 %381*/
		main_preheaderi_1ii = (main_preheaderi_383 ? main_preheaderi_384_reg : main_preheaderi_381_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.1.i.i = select i1 %383, i32 %384, i32 %381*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_1ii_reg <= main_preheaderi_1ii;
		if (start == 1'b0 && ^(main_preheaderi_1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %385 = ashr i32 %.1.i.i, 7*/
		main_preheaderi_385 = ($signed(main_preheaderi_1ii) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %385 = ashr i32 %.1.i.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_385_reg <= main_preheaderi_385;
		if (start == 1'b0 && ^(main_preheaderi_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_385_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_386 = main_preheaderi_386_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %386 = mul nsw i32 %dec_ph2.0, %380*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_386_reg <= main_preheaderi_386;
		if (start == 1'b0 && ^(main_preheaderi_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_386_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %386 = mul nsw i32 %dec_ph2.0, %380*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_386_reg <= main_preheaderi_386;
		if (start == 1'b0 && ^(main_preheaderi_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_386_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %387 = ashr i32 %386, 31*/
		main_preheaderi_387 = ($signed(main_preheaderi_386) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %387 = ashr i32 %386, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_387_reg <= main_preheaderi_387;
		if (start == 1'b0 && ^(main_preheaderi_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_387_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %388 = and i32 %387, -256*/
		main_preheaderi_388 = (main_preheaderi_387 & -32'd256);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %388 = and i32 %387, -256*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_388_reg <= main_preheaderi_388;
		if (start == 1'b0 && ^(main_preheaderi_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %389 = or i32 %388, 128*/
		main_preheaderi_389 = (main_preheaderi_388 | 32'd128);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %389 = or i32 %388, 128*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_389_reg <= main_preheaderi_389;
		if (start == 1'b0 && ^(main_preheaderi_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_389_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_390 = main_preheaderi_390_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %390 = mul nsw i32 %dec_ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_390_reg <= main_preheaderi_390;
		if (start == 1'b0 && ^(main_preheaderi_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_390_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %390 = mul nsw i32 %dec_ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_390_reg <= main_preheaderi_390;
		if (start == 1'b0 && ^(main_preheaderi_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_390_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %391 = ashr i32 %390, 7*/
		main_preheaderi_391 = ($signed(main_preheaderi_390) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %391 = ashr i32 %390, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_391_reg <= main_preheaderi_391;
		if (start == 1'b0 && ^(main_preheaderi_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_391_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
		main_preheaderi_wd40ii = (main_preheaderi_385 + main_preheaderi_391_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %385, %391*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_wd40ii_reg <= main_preheaderi_wd40ii;
		if (start == 1'b0 && ^(main_preheaderi_wd40ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_wd40ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
		main_preheaderi_392 = (main_preheaderi_wd40ii + main_preheaderi_389);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %392 = add nsw i32 %wd4.0.i.i, %389*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_392_reg <= main_preheaderi_392;
		if (start == 1'b0 && ^(main_preheaderi_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_392_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %393 = icmp sgt i32 %392, 12288*/
		main_preheaderi_393 = ($signed(main_preheaderi_392) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %393 = icmp sgt i32 %392, 12288*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_393_reg <= main_preheaderi_393;
		if (start == 1'b0 && ^(main_preheaderi_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_393_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i.i = select i1 %393, i32 12288, i32 %392*/
		main_preheaderi_ii = (main_preheaderi_393 ? 32'd12288 : main_preheaderi_392);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i.i = select i1 %393, i32 12288, i32 %392*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_ii_reg <= main_preheaderi_ii;
		if (start == 1'b0 && ^(main_preheaderi_ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %394 = icmp slt i32 %..i.i, -12288*/
		main_preheaderi_394 = ($signed(main_preheaderi_ii_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %394 = icmp slt i32 %..i.i, -12288*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_394_reg <= main_preheaderi_394;
		if (start == 1'b0 && ^(main_preheaderi_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i.i = select i1 %394, i32 -12288, i32 %..i.i*/
		main_preheaderi_ii_var1 = (main_preheaderi_394 ? -32'd12288 : main_preheaderi_ii_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %...i.i = select i1 %394, i32 -12288, i32 %..i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_ii_var1_reg <= main_preheaderi_ii_var1;
		if (start == 1'b0 && ^(main_preheaderi_ii_var1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_ii_var1_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_395 = main_preheaderi_395_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %395 = mul nsw i32 %dec_ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_395_reg <= main_preheaderi_395;
		if (start == 1'b0 && ^(main_preheaderi_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_395_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %395 = mul nsw i32 %dec_ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_395_reg <= main_preheaderi_395;
		if (start == 1'b0 && ^(main_preheaderi_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %396 = ashr i32 %395, 8*/
		main_preheaderi_396 = ($signed(main_preheaderi_395) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %396 = ashr i32 %395, 8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_396_reg <= main_preheaderi_396;
		if (start == 1'b0 && ^(main_preheaderi_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_396_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %397 = ashr i32 %382, 31*/
		main_preheaderi_397 = ($signed(main_preheaderi_382) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %397 = ashr i32 %382, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_397_reg <= main_preheaderi_397;
		if (start == 1'b0 && ^(main_preheaderi_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_397_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %398 = and i32 %397, -384*/
		main_preheaderi_398 = (main_preheaderi_397 & -32'd384);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %398 = and i32 %397, -384*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_398_reg <= main_preheaderi_398;
		if (start == 1'b0 && ^(main_preheaderi_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_398_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
		main_preheaderi_399 = (main_preheaderi_396 + 32'd192);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %399 = add nsw i32 %396, 192*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_399_reg <= main_preheaderi_399;
		if (start == 1'b0 && ^(main_preheaderi_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
		main_preheaderi_apl10ii = (main_preheaderi_399_reg + main_preheaderi_398);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %399, %398*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_apl10ii_reg <= main_preheaderi_apl10ii;
		if (start == 1'b0 && ^(main_preheaderi_apl10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %400 = sub nsw i32 15360, %...i.i*/
		main_preheaderi_400 = (32'd15360 - main_preheaderi_ii_var1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %400 = sub nsw i32 15360, %...i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_400_reg <= main_preheaderi_400;
		if (start == 1'b0 && ^(main_preheaderi_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %401 = icmp sgt i32 %apl1.0.i.i, %400*/
		main_preheaderi_401 = ($signed(main_preheaderi_apl10ii_reg) > $signed(main_preheaderi_400));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %401 = icmp sgt i32 %apl1.0.i.i, %400*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_401_reg <= main_preheaderi_401;
		if (start == 1'b0 && ^(main_preheaderi_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_401_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i.i = select i1 %401, i32 %400, i32 %apl1.0.i.i*/
		main_preheaderi_apl10ii_var2 = (main_preheaderi_401 ? main_preheaderi_400 : main_preheaderi_apl10ii_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i.i = select i1 %401, i32 %400, i32 %apl1.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_apl10ii_var2_reg <= main_preheaderi_apl10ii_var2;
		if (start == 1'b0 && ^(main_preheaderi_apl10ii_var2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10ii_var2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %402 = sub nsw i32 0, %400*/
		main_preheaderi_402 = (32'd0 - main_preheaderi_400);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %402 = sub nsw i32 0, %400*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_402_reg <= main_preheaderi_402;
		if (start == 1'b0 && ^(main_preheaderi_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_402_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %403 = icmp slt i32 %.apl1.0.i.i, %402*/
		main_preheaderi_403 = ($signed(main_preheaderi_apl10ii_var2_reg) < $signed(main_preheaderi_402_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %403 = icmp slt i32 %.apl1.0.i.i, %402*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_158)) begin
		main_preheaderi_403_reg <= main_preheaderi_403;
		if (start == 1'b0 && ^(main_preheaderi_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_403_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i.i = select i1 %403, i32 %402, i32 %.apl1.0.i.i*/
		main_preheaderi_apl12ii = (main_preheaderi_403 ? main_preheaderi_402_reg : main_preheaderi_apl10ii_var2_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i.i = select i1 %403, i32 %402, i32 %.apl1.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_158)) begin
		main_preheaderi_apl12ii_reg <= main_preheaderi_apl12ii;
		if (start == 1'b0 && ^(main_preheaderi_apl12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
		main_preheaderi_404 = (main_preheaderi_364_reg + main_preheaderi_360);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %404 = add nsw i32 %364, %360*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		main_preheaderi_404_reg <= main_preheaderi_404;
		if (start == 1'b0 && ^(main_preheaderi_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_404_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %405 = sub nsw i32 %292, %404*/
		main_preheaderi_405 = (main_preheaderi_292_reg - main_preheaderi_404);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %405 = sub nsw i32 %292, %404*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		main_preheaderi_405_reg <= main_preheaderi_405;
		if (start == 1'b0 && ^(main_preheaderi_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_405_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
		main_preheaderi_406 = (main_preheaderi_404 + main_preheaderi_292_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %406 = add nsw i32 %404, %292*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_155)) begin
		main_preheaderi_406_reg <= main_preheaderi_406;
		if (start == 1'b0 && ^(main_preheaderi_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_406_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_407 = main_preheaderi_407_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %407 = mul nsw i32 %405, 12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_407_reg <= main_preheaderi_407;
		if (start == 1'b0 && ^(main_preheaderi_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_407_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %407 = mul nsw i32 %405, 12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_407_reg <= main_preheaderi_407;
		if (start == 1'b0 && ^(main_preheaderi_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_407_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_408 = main_preheaderi_408_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %408 = mul nsw i32 %406, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_408_reg <= main_preheaderi_408;
		if (start == 1'b0 && ^(main_preheaderi_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_408_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %408 = mul nsw i32 %406, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_408_reg <= main_preheaderi_408;
		if (start == 1'b0 && ^(main_preheaderi_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_408_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_409 = main_preheaderi_409_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %accumc.0.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_409_reg <= main_preheaderi_409;
		if (start == 1'b0 && ^(main_preheaderi_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_409_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %accumc.0.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_409_reg <= main_preheaderi_409;
		if (start == 1'b0 && ^(main_preheaderi_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_409_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
		main_preheaderi_410 = (main_preheaderi_409_reg + main_preheaderi_407);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %410 = add nsw i32 %409, %407*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_410_reg <= main_preheaderi_410;
		if (start == 1'b0 && ^(main_preheaderi_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_410_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_411 = main_preheaderi_411_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %411 = mul nsw i32 %accumd.0.0, 212*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_411_reg <= main_preheaderi_411;
		if (start == 1'b0 && ^(main_preheaderi_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_411_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %411 = mul nsw i32 %accumd.0.0, 212*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_411_reg <= main_preheaderi_411;
		if (start == 1'b0 && ^(main_preheaderi_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_411_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
		main_preheaderi_412 = (main_preheaderi_411_reg + main_preheaderi_408);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %412 = add nsw i32 %411, %408*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_412_reg <= main_preheaderi_412;
		if (start == 1'b0 && ^(main_preheaderi_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_412_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_413 = main_preheaderi_413_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %413 = mul nsw i32 %accumc.1.0, 48*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_413_reg <= main_preheaderi_413;
		if (start == 1'b0 && ^(main_preheaderi_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_413_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %413 = mul nsw i32 %accumc.1.0, 48*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_413_reg <= main_preheaderi_413;
		if (start == 1'b0 && ^(main_preheaderi_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_413_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
		main_preheaderi_414 = (main_preheaderi_413_reg + main_preheaderi_410);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %414 = add nsw i32 %413, %410*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_414_reg <= main_preheaderi_414;
		if (start == 1'b0 && ^(main_preheaderi_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_414_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_415 = main_preheaderi_415_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %415 = mul nsw i32 %accumd.1.0, -624*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_415_reg <= main_preheaderi_415;
		if (start == 1'b0 && ^(main_preheaderi_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_415_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %415 = mul nsw i32 %accumd.1.0, -624*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_415_reg <= main_preheaderi_415;
		if (start == 1'b0 && ^(main_preheaderi_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_415_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
		main_preheaderi_416 = (main_preheaderi_415_reg + main_preheaderi_412);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %416 = add nsw i32 %415, %412*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_416_reg <= main_preheaderi_416;
		if (start == 1'b0 && ^(main_preheaderi_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_416_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %417 = shl nsw i32 %accumc.2.0, 7*/
		main_preheaderi_417 = (main_preheaderi_accumc20_reg <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %417 = shl nsw i32 %accumc.2.0, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_417_reg <= main_preheaderi_417;
		if (start == 1'b0 && ^(main_preheaderi_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_417_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
		main_preheaderi_418 = (main_preheaderi_417_reg + main_preheaderi_414);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %418 = add nsw i32 %417, %414*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_418_reg <= main_preheaderi_418;
		if (start == 1'b0 && ^(main_preheaderi_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_418_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_419 = main_preheaderi_419_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %419 = mul nsw i32 %accumd.2.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_419_reg <= main_preheaderi_419;
		if (start == 1'b0 && ^(main_preheaderi_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_419_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %419 = mul nsw i32 %accumd.2.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_419_reg <= main_preheaderi_419;
		if (start == 1'b0 && ^(main_preheaderi_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_419_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
		main_preheaderi_420 = (main_preheaderi_419_reg + main_preheaderi_416);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %419, %416*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_420_reg <= main_preheaderi_420;
		if (start == 1'b0 && ^(main_preheaderi_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_420_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_421 = main_preheaderi_421_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %421 = mul nsw i32 %accumc.3.0, -840*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_421_reg <= main_preheaderi_421;
		if (start == 1'b0 && ^(main_preheaderi_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_421_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %421 = mul nsw i32 %accumc.3.0, -840*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_421_reg <= main_preheaderi_421;
		if (start == 1'b0 && ^(main_preheaderi_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_421_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
		main_preheaderi_422 = (main_preheaderi_421_reg + main_preheaderi_418);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %422 = add nsw i32 %421, %418*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_422_reg <= main_preheaderi_422;
		if (start == 1'b0 && ^(main_preheaderi_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_422_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_423 = main_preheaderi_423_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %423 = mul nsw i32 %accumd.3.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_423_reg <= main_preheaderi_423;
		if (start == 1'b0 && ^(main_preheaderi_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_423_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %423 = mul nsw i32 %accumd.3.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_423_reg <= main_preheaderi_423;
		if (start == 1'b0 && ^(main_preheaderi_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_423_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
		main_preheaderi_424 = (main_preheaderi_423_reg + main_preheaderi_420);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %424 = add nsw i32 %423, %420*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_424_reg <= main_preheaderi_424;
		if (start == 1'b0 && ^(main_preheaderi_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_424_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_425 = main_preheaderi_425_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %425 = mul nsw i32 %accumc.4.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_425_reg <= main_preheaderi_425;
		if (start == 1'b0 && ^(main_preheaderi_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_425_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %425 = mul nsw i32 %accumc.4.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_425_reg <= main_preheaderi_425;
		if (start == 1'b0 && ^(main_preheaderi_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_425_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
		main_preheaderi_426 = (main_preheaderi_425_reg + main_preheaderi_422);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %426 = add nsw i32 %425, %422*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_426_reg <= main_preheaderi_426;
		if (start == 1'b0 && ^(main_preheaderi_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_426_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_427 = main_preheaderi_427_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %427 = mul nsw i32 %accumd.4.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_427_reg <= main_preheaderi_427;
		if (start == 1'b0 && ^(main_preheaderi_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_427_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %427 = mul nsw i32 %accumd.4.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_427_reg <= main_preheaderi_427;
		if (start == 1'b0 && ^(main_preheaderi_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_427_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
		main_preheaderi_428 = (main_preheaderi_427_reg + main_preheaderi_424);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %428 = add nsw i32 %427, %424*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_428_reg <= main_preheaderi_428;
		if (start == 1'b0 && ^(main_preheaderi_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_428_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_429 = main_preheaderi_429_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %429 = mul nsw i32 %accumc.5.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_429_reg <= main_preheaderi_429;
		if (start == 1'b0 && ^(main_preheaderi_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_429_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %429 = mul nsw i32 %accumc.5.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_429_reg <= main_preheaderi_429;
		if (start == 1'b0 && ^(main_preheaderi_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_429_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
		main_preheaderi_430 = (main_preheaderi_429_reg + main_preheaderi_426);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %430 = add nsw i32 %429, %426*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_430_reg <= main_preheaderi_430;
		if (start == 1'b0 && ^(main_preheaderi_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_430_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_431 = main_preheaderi_431_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %431 = mul nsw i32 %accumd.5.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_431_reg <= main_preheaderi_431;
		if (start == 1'b0 && ^(main_preheaderi_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_431_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %431 = mul nsw i32 %accumd.5.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_431_reg <= main_preheaderi_431;
		if (start == 1'b0 && ^(main_preheaderi_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_431_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
		main_preheaderi_432 = (main_preheaderi_431_reg + main_preheaderi_428);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %432 = add nsw i32 %431, %428*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_432_reg <= main_preheaderi_432;
		if (start == 1'b0 && ^(main_preheaderi_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_432_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_433 = main_preheaderi_433_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %433 = mul nsw i32 %accumc.6.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_433_reg <= main_preheaderi_433;
		if (start == 1'b0 && ^(main_preheaderi_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_433_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %433 = mul nsw i32 %accumc.6.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_433_reg <= main_preheaderi_433;
		if (start == 1'b0 && ^(main_preheaderi_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_433_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
		main_preheaderi_434 = (main_preheaderi_433_reg + main_preheaderi_430);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %434 = add nsw i32 %433, %430*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_434_reg <= main_preheaderi_434;
		if (start == 1'b0 && ^(main_preheaderi_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_434_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_435 = main_preheaderi_435_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %435 = mul nsw i32 %accumd.6.0, -840*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_435_reg <= main_preheaderi_435;
		if (start == 1'b0 && ^(main_preheaderi_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_435_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %435 = mul nsw i32 %accumd.6.0, -840*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_435_reg <= main_preheaderi_435;
		if (start == 1'b0 && ^(main_preheaderi_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_435_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
		main_preheaderi_436 = (main_preheaderi_435_reg + main_preheaderi_432);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %436 = add nsw i32 %435, %432*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_436_reg <= main_preheaderi_436;
		if (start == 1'b0 && ^(main_preheaderi_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_436_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_437 = main_preheaderi_437_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %437 = mul nsw i32 %accumc.7.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_437_reg <= main_preheaderi_437;
		if (start == 1'b0 && ^(main_preheaderi_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_437_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %437 = mul nsw i32 %accumc.7.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_437_reg <= main_preheaderi_437;
		if (start == 1'b0 && ^(main_preheaderi_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_437_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
		main_preheaderi_438 = (main_preheaderi_437_reg + main_preheaderi_434);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %438 = add nsw i32 %437, %434*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_438_reg <= main_preheaderi_438;
		if (start == 1'b0 && ^(main_preheaderi_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_438_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %439 = shl nsw i32 %accumd.7.0, 7*/
		main_preheaderi_439 = (main_preheaderi_accumd70_reg <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %439 = shl nsw i32 %accumd.7.0, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_439_reg <= main_preheaderi_439;
		if (start == 1'b0 && ^(main_preheaderi_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
		main_preheaderi_440 = (main_preheaderi_439_reg + main_preheaderi_436);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %440 = add nsw i32 %439, %436*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_440_reg <= main_preheaderi_440;
		if (start == 1'b0 && ^(main_preheaderi_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_440_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_441 = main_preheaderi_441_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %accumc.8.0, -624*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_441_reg <= main_preheaderi_441;
		if (start == 1'b0 && ^(main_preheaderi_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_441_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %accumc.8.0, -624*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_441_reg <= main_preheaderi_441;
		if (start == 1'b0 && ^(main_preheaderi_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_441_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
		main_preheaderi_442 = (main_preheaderi_441_reg + main_preheaderi_438_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %442 = add nsw i32 %441, %438*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_442_reg <= main_preheaderi_442;
		if (start == 1'b0 && ^(main_preheaderi_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_442_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_443 = main_preheaderi_443_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %443 = mul nsw i32 %accumd.8.0, 48*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_443_reg <= main_preheaderi_443;
		if (start == 1'b0 && ^(main_preheaderi_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_443_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %443 = mul nsw i32 %accumd.8.0, 48*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_443_reg <= main_preheaderi_443;
		if (start == 1'b0 && ^(main_preheaderi_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_443_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
		main_preheaderi_444 = (main_preheaderi_443_reg + main_preheaderi_440_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %444 = add nsw i32 %443, %440*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_444_reg <= main_preheaderi_444;
		if (start == 1'b0 && ^(main_preheaderi_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_444_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_445 = main_preheaderi_445_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %445 = mul nsw i32 %accumc.9.0, 212*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_445_reg <= main_preheaderi_445;
		if (start == 1'b0 && ^(main_preheaderi_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_445_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %445 = mul nsw i32 %accumc.9.0, 212*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_445_reg <= main_preheaderi_445;
		if (start == 1'b0 && ^(main_preheaderi_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_445_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
		main_preheaderi_446 = (main_preheaderi_445_reg + main_preheaderi_442);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %446 = add nsw i32 %445, %442*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_446_reg <= main_preheaderi_446;
		if (start == 1'b0 && ^(main_preheaderi_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_446_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_447 = main_preheaderi_447_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %447 = mul nsw i32 %accumd.9.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_447_reg <= main_preheaderi_447;
		if (start == 1'b0 && ^(main_preheaderi_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_447_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %447 = mul nsw i32 %accumd.9.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_447_reg <= main_preheaderi_447;
		if (start == 1'b0 && ^(main_preheaderi_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_447_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
		main_preheaderi_448 = (main_preheaderi_447_reg + main_preheaderi_444);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %448 = add nsw i32 %447, %444*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_448_reg <= main_preheaderi_448;
		if (start == 1'b0 && ^(main_preheaderi_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_448_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_449 = main_preheaderi_449_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %449 = mul nsw i32 %accumc.10.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_449_reg <= main_preheaderi_449;
		if (start == 1'b0 && ^(main_preheaderi_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_449_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %449 = mul nsw i32 %accumc.10.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_449_reg <= main_preheaderi_449;
		if (start == 1'b0 && ^(main_preheaderi_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_449_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
		main_preheaderi_450 = (main_preheaderi_449_reg + main_preheaderi_446);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %449, %446*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_450_reg <= main_preheaderi_450;
		if (start == 1'b0 && ^(main_preheaderi_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_450_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_451 = main_preheaderi_451_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %451 = mul nsw i32 %accumd.10.0, 12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_451_reg <= main_preheaderi_451;
		if (start == 1'b0 && ^(main_preheaderi_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_451_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %451 = mul nsw i32 %accumd.10.0, 12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_451_reg <= main_preheaderi_451;
		if (start == 1'b0 && ^(main_preheaderi_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_451_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
		main_preheaderi_452 = (main_preheaderi_451_reg + main_preheaderi_448);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %452 = add nsw i32 %451, %448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_452_reg <= main_preheaderi_452;
		if (start == 1'b0 && ^(main_preheaderi_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %453 = ashr i32 %450, 14*/
		main_preheaderi_453 = ($signed(main_preheaderi_450) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %453 = ashr i32 %450, 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_453_reg <= main_preheaderi_453;
		if (start == 1'b0 && ^(main_preheaderi_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_453_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %454 = ashr i32 %452, 14*/
		main_preheaderi_454 = ($signed(main_preheaderi_452) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %454 = ashr i32 %452, 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_454_reg <= main_preheaderi_454;
		if (start == 1'b0 && ^(main_preheaderi_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_454_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_preheaderi_indvarnext = (main_preheaderi_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_indvarnext_reg <= main_preheaderi_indvarnext;
		if (start == 1'b0 && ^(main_preheaderi_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %exitcond5 = icmp eq i32 %indvar.next, 50*/
		main_preheaderi_exitcond5 = (main_preheaderi_indvarnext == 32'd50);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %exitcond5 = icmp eq i32 %indvar.next, 50*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_exitcond5_reg <= main_preheaderi_exitcond5;
		if (start == 1'b0 && ^(main_preheaderi_exitcond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_exitcond5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) */ begin
		main_adpcm_mainexit_main_result04 = main_adpcm_mainexit_main_result0;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg <= main_adpcm_mainexit_main_result04;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg <= main_adpcm_mainexit_main_result04;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) */ begin
		main_adpcm_mainexit_i03 = main_adpcm_mainexit_459_reg;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03_reg <= main_adpcm_mainexit_i03;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %459, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) begin
		main_adpcm_mainexit_i03_reg <= main_adpcm_mainexit_i03;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep3 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep3 = (1'd0 | (4 * main_adpcm_mainexit_i03_reg));
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep3 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %i.03*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		main_adpcm_mainexit_scevgep3_reg <= main_adpcm_mainexit_scevgep3;
		if (start == 1'b0 && ^(main_adpcm_mainexit_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep4 = getelementptr [100 x i32]* @compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep4 = (1'd0 | (4 * main_adpcm_mainexit_i03_reg));
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep4 = getelementptr [100 x i32]* @compressed, i32 0, i32 %i.03*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		main_adpcm_mainexit_scevgep4_reg <= main_adpcm_mainexit_scevgep4;
		if (start == 1'b0 && ^(main_adpcm_mainexit_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %455 = load i32* %scevgep4, align 4, !tbaa !1*/
		main_adpcm_mainexit_455 = compressed_out_a;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %455 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_adpcm_mainexit_455_reg <= main_adpcm_mainexit_455;
		if (start == 1'b0 && ^(main_adpcm_mainexit_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_455_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %456 = load i32* %scevgep3, align 4, !tbaa !1*/
		main_adpcm_mainexit_456 = test_compressed_out_a;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %456 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_adpcm_mainexit_456_reg <= main_adpcm_mainexit_456;
		if (start == 1'b0 && ^(main_adpcm_mainexit_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_456_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %457 = icmp eq i32 %455, %456*/
		main_adpcm_mainexit_457 = (main_adpcm_mainexit_455 == main_adpcm_mainexit_456);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %457 = icmp eq i32 %455, %456*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_adpcm_mainexit_457_reg <= main_adpcm_mainexit_457;
		if (start == 1'b0 && ^(main_adpcm_mainexit_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_457_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %458 = zext i1 %457 to i32*/
		main_adpcm_mainexit_458 = main_adpcm_mainexit_457;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %458 = zext i1 %457 to i32*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_adpcm_mainexit_458_reg <= main_adpcm_mainexit_458;
		if (start == 1'b0 && ^(main_adpcm_mainexit_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_458_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
		main_adpcm_mainexit_main_result0 = (main_adpcm_mainexit_458 + main_adpcm_mainexit_main_result04_reg);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %458, %main_result.04*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_adpcm_mainexit_main_result0_reg <= main_adpcm_mainexit_main_result0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
		main_adpcm_mainexit_459 = (main_adpcm_mainexit_i03_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %459 = add nsw i32 %i.03, 1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		main_adpcm_mainexit_459_reg <= main_adpcm_mainexit_459;
		if (start == 1'b0 && ^(main_adpcm_mainexit_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_459_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %459, 50*/
		main_adpcm_mainexit_exitcond = (main_adpcm_mainexit_459 == 32'd50);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %459, 50*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		main_adpcm_mainexit_exitcond_reg <= main_adpcm_mainexit_exitcond;
		if (start == 1'b0 && ^(main_adpcm_mainexit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_162) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22 = main_adpcm_mainexit_main_result0_reg;
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader_164) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg == 1'd0))) */ begin
		main_preheader_main_result22 = main_preheader_main_result2;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_162) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22_reg <= main_preheader_main_result22;
		if (start == 1'b0 && ^(main_preheader_main_result22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_164) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg == 1'd0))) begin
		main_preheader_main_result22_reg <= main_preheader_main_result22;
		if (start == 1'b0 && ^(main_preheader_main_result22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_162) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader_164) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg == 1'd0))) */ begin
		main_preheader_i11 = main_preheader_464_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_162) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11_reg <= main_preheader_i11;
		if (start == 1'b0 && ^(main_preheader_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %464, %.preheader ], [ 0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_164) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg == 1'd0))) begin
		main_preheader_i11_reg <= main_preheader_i11;
		if (start == 1'b0 && ^(main_preheader_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %i.11*/
		main_preheader_scevgep = (1'd0 | (4 * main_preheader_i11_reg));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %i.11*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		main_preheader_scevgep_reg <= main_preheader_scevgep;
		if (start == 1'b0 && ^(main_preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep2 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11*/
		main_preheader_scevgep2 = (1'd0 | (4 * main_preheader_i11_reg));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep2 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		main_preheader_scevgep2_reg <= main_preheader_scevgep2;
		if (start == 1'b0 && ^(main_preheader_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %460 = load i32* %scevgep2, align 4, !tbaa !1*/
		main_preheader_460 = result_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %460 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		main_preheader_460_reg <= main_preheader_460;
		if (start == 1'b0 && ^(main_preheader_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_460_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %461 = load i32* %scevgep, align 4, !tbaa !1*/
		main_preheader_461 = test_result_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %461 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		main_preheader_461_reg <= main_preheader_461;
		if (start == 1'b0 && ^(main_preheader_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_461_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %462 = icmp eq i32 %460, %461*/
		main_preheader_462 = (main_preheader_460 == main_preheader_461);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %462 = icmp eq i32 %460, %461*/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		main_preheader_462_reg <= main_preheader_462;
		if (start == 1'b0 && ^(main_preheader_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_462_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %463 = zext i1 %462 to i32*/
		main_preheader_463 = main_preheader_462;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %463 = zext i1 %462 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		main_preheader_463_reg <= main_preheader_463;
		if (start == 1'b0 && ^(main_preheader_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_463_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
		main_preheader_main_result2 = (main_preheader_463 + main_preheader_main_result22_reg);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %463, %main_result.22*/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		main_preheader_main_result2_reg <= main_preheader_main_result2;
		if (start == 1'b0 && ^(main_preheader_main_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
		main_preheader_464 = (main_preheader_i11_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %464 = add nsw i32 %i.11, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		main_preheader_464_reg <= main_preheader_464;
		if (start == 1'b0 && ^(main_preheader_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_464_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %464, 100*/
		main_preheader_exitcond1 = (main_preheader_464 == 32'd100);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %464, 100*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		main_preheader_exitcond1_reg <= main_preheader_exitcond1;
		if (start == 1'b0 && ^(main_preheader_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %465*/
	/*   %467 = icmp eq i32 %.main_result.2, 150*/
		main_465_467 = (main_preheader_main_result2_reg == 32'd150);
end
always @(posedge clk) begin
	/* main: %465*/
	/*   %467 = icmp eq i32 %.main_result.2, 150*/
	if ((cur_state == LEGUP_F_main_BB__465_165)) begin
		main_465_467_reg <= main_465_467;
		if (start == 1'b0 && ^(main_465_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_465_467_reg"); $finish; end
	end
end
always @(*) begin
	qq4_code4_table_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		qq4_code4_table_address_a = (main_quantlexiti_125 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		qq4_code4_table_address_a = (main_preheaderi_286 >>> 3'd2);
	end
end
always @(*) begin
	qq4_code4_table_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %126 = load i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		qq4_code4_table_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %287 = load i32* %286, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		qq4_code4_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	qq6_code6_table_address_a = 1'd0;
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_106)) begin
		qq6_code6_table_address_a = (main_preheaderipreheader_249 >>> 3'd2);
	end
end
always @(*) begin
	qq6_code6_table_write_enable_a = 1'd0;
	/* main: %.preheader.i.preheader*/
	/*   %250 = load i32* %249, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_106)) begin
		qq6_code6_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	wl_code_table_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		wl_code_table_address_a = (main_quantlexiti_129 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %296 = load i32* %295, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		wl_code_table_address_a = (main_preheaderi_295 >>> 3'd2);
	end
end
always @(*) begin
	wl_code_table_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		wl_code_table_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %296 = load i32* %295, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_141)) begin
		wl_code_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	ilb_table_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %137 = load i32* %136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		ilb_table_address_a = (main_quantlexiti_136 >>> 3'd2);
	end
	/* main: %quantl.exit.i*/
	/*   %209 = load i32* %208, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_87)) begin
		ilb_table_address_a = (main_quantlexiti_208 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		ilb_table_address_a = (main_preheaderi_303 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		ilb_table_address_a = (main_preheaderi_375 >>> 3'd2);
	end
end
always @(*) begin
	ilb_table_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %137 = load i32* %136, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		ilb_table_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %209 = load i32* %208, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_87)) begin
		ilb_table_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		ilb_table_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %376 = load i32* %375, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		ilb_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	decis_levl_address_a = 1'd0;
	/* main: %117*/
	/*   %120 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__117_64)) begin
		decis_levl_address_a = (main_117_scevgep8 >>> 3'd2);
	end
end
always @(*) begin
	decis_levl_write_enable_a = 1'd0;
	/* main: %117*/
	/*   %120 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__117_64)) begin
		decis_levl_write_enable_a = 1'd0;
	end
end
always @(*) begin
	qq2_code2_table_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_85)) begin
		qq2_code2_table_address_a = (main_quantlexiti_197 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		qq2_code2_table_address_a = (main_preheaderi_361_reg >>> 3'd2);
	end
end
always @(*) begin
	qq2_code2_table_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %198 = load i32* %197, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_85)) begin
		qq2_code2_table_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %362 = load i32* %361, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		qq2_code2_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	wh_code_table_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %202 = load i32* %201, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_85)) begin
		wh_code_table_address_a = (main_quantlexiti_201 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		wh_code_table_address_a = (main_preheaderi_367_reg >>> 3'd2);
	end
end
always @(*) begin
	wh_code_table_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   %202 = load i32* %201, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_85)) begin
		wh_code_table_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %368 = load i32* %367, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		wh_code_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	tqmf_address_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		tqmf_address_a = (main_2_si0 >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd23)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %10, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd21)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %12, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd19)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd17)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd15)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd13)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd11)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd9)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd7)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd5)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd3)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd1)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		tqmf_address_a = (1'd0 >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd2)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd4)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd6)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd8)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd10)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd12)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd14)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd16)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd18)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_102)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd20)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre58 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_103)) begin
		tqmf_address_a = ((1'd0 | (4 * 32'd22)) >>> 3'd2);
	end
end
always @(*) begin
	tqmf_write_enable_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %10, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %12, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre52 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre54 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_102)) begin
		tqmf_write_enable_a = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre58 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_103)) begin
		tqmf_write_enable_a = 1'd0;
	end
end
always @(*) begin
	tqmf_in_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_28)) begin
		tqmf_in_a = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_8_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %10, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_10_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %12, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_12_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_14_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_16_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_18_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_20_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_22_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_24_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_26_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_28_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		tqmf_in_a = main_legup_memset_4_i64exit_33_reg;
	end
end
always @(*) begin
	tqmf_address_b = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %9, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd22)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd20)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd18)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd16)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd14)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd12)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd10)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd8)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd6)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd4)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd2)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %34, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		tqmf_address_b = (1'd0 >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd1)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd3)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd5)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd7)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd9)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd11)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd13)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd15)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd17)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd19)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_102)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd21)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_103)) begin
		tqmf_address_b = ((1'd0 | (4 * 32'd23)) >>> 3'd2);
	end
end
always @(*) begin
	tqmf_write_enable_b = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %9, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %34, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_98)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre51 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_99)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_100)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre55 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_101)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre57 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_102)) begin
		tqmf_write_enable_b = 1'd0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_103)) begin
		tqmf_write_enable_b = 1'd0;
	end
end
always @(*) begin
	tqmf_in_b = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %9, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_9_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_11_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_13_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_15_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_17_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_19_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_36)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_21_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_37)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_23_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_38)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_25_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_39)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_27_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_40)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_29_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %34, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_41)) begin
		tqmf_in_b = main_legup_memset_4_i64exit_34_reg;
	end
end
always @(*) begin
	test_data_address_a = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		test_data_address_a = (main_legup_memset_4_i64exit_scevgep12 >>> 3'd2);
	end
end
always @(*) begin
	test_data_write_enable_a = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		test_data_write_enable_a = 1'd0;
	end
end
always @(*) begin
	test_data_address_b = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		test_data_address_b = (main_legup_memset_4_i64exit_scevgep11 >>> 3'd2);
	end
end
always @(*) begin
	test_data_write_enable_b = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		test_data_write_enable_b = 1'd0;
	end
end
always @(*) begin
	test_compressed_address_a = 1'd0;
	/* main: %adpcm_main.exit*/
	/*   %456 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		test_compressed_address_a = (main_adpcm_mainexit_scevgep3 >>> 3'd2);
	end
end
always @(*) begin
	test_compressed_write_enable_a = 1'd0;
	/* main: %adpcm_main.exit*/
	/*   %456 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		test_compressed_write_enable_a = 1'd0;
	end
end
always @(*) begin
	test_result_address_a = 1'd0;
	/* main: %.preheader*/
	/*   %461 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		test_result_address_a = (main_preheader_scevgep >>> 3'd2);
	end
end
always @(*) begin
	test_result_write_enable_a = 1'd0;
	/* main: %.preheader*/
	/*   %461 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		test_result_write_enable_a = 1'd0;
	end
end
always @(*) begin
	compressed_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   store i32 %234, i32* %235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_90)) begin
		compressed_address_a = (main_quantlexiti_235_reg >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		compressed_address_a = (main_preheaderi_253 >>> 3'd2);
	end
	/* main: %adpcm_main.exit*/
	/*   %455 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		compressed_address_a = (main_adpcm_mainexit_scevgep4 >>> 3'd2);
	end
end
always @(*) begin
	compressed_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   store i32 %234, i32* %235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_90)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %254 = load i32* %253, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		compressed_write_enable_a = 1'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %455 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		compressed_write_enable_a = 1'd0;
	end
end
always @(*) begin
	compressed_in_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   store i32 %234, i32* %235, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_90)) begin
		compressed_in_a = main_quantlexiti_234_reg;
	end
end
always @(*) begin
	result_address_a = 1'd0;
	/* main: %.preheader.i*/
	/*   store i32 %453, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		result_address_a = (main_preheaderi_scevgep7_reg >>> 3'd2);
	end
	/* main: %.preheader*/
	/*   %460 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		result_address_a = (main_preheader_scevgep2 >>> 3'd2);
	end
end
always @(*) begin
	result_write_enable_a = 1'd0;
	/* main: %.preheader.i*/
	/*   store i32 %453, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		result_write_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %460 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		result_write_enable_a = 1'd0;
	end
end
always @(*) begin
	result_in_a = 1'd0;
	/* main: %.preheader.i*/
	/*   store i32 %453, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		result_in_a = main_preheaderi_453;
	end
end
always @(*) begin
	result_address_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i32 %454, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		result_address_b = (main_preheaderi_scevgep6_reg >>> 3'd2);
	end
end
always @(*) begin
	result_write_enable_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i32 %454, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		result_write_enable_b = 1'd1;
	end
end
always @(*) begin
	result_in_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i32 %454, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		result_in_b = main_preheaderi_454;
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_74)) begin
		upzero_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_89)) begin
		upzero_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_145)) begin
		upzero_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_154)) begin
		upzero_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		upzero_arg_dlt <= main_quantlexiti_128_reg;
		if (start == 1'b0 && ^(main_quantlexiti_128_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		upzero_arg_dlt <= main_quantlexiti_200_reg;
		if (start == 1'b0 && ^(main_quantlexiti_200_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		upzero_arg_dlt <= main_preheaderi_289_reg;
		if (start == 1'b0 && ^(main_preheaderi_289_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		upzero_arg_dlt <= main_preheaderi_364_reg;
		if (start == 1'b0 && ^(main_preheaderi_364_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		upzero_arg_dlti <= `TAG_g_delay_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		upzero_arg_dlti <= `TAG_g_delay_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		upzero_arg_dlti <= `TAG_g_dec_del_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		upzero_arg_dlti <= `TAG_g_dec_del_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		upzero_arg_bli <= `TAG_g_delay_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_88)) begin
		upzero_arg_bli <= `TAG_g_delay_bph_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		upzero_arg_bli <= `TAG_g_dec_del_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		upzero_arg_bli <= `TAG_g_dec_del_bph_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		upzero_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if ((cur_state == LEGUP_function_call_89)) begin
		upzero_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if ((cur_state == LEGUP_function_call_145)) begin
		upzero_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else /* if ((cur_state == LEGUP_function_call_154)) */ begin
		upzero_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		upzero_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else if ((cur_state == LEGUP_function_call_89)) begin
		upzero_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	else if ((cur_state == LEGUP_function_call_145)) begin
		upzero_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else /* if ((cur_state == LEGUP_function_call_154)) */ begin
		upzero_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	upzero_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	upzero_finish_final = upzero_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_quantlexiti_73))) begin
		upzero_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_quantlexiti_88))) begin
		upzero_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheaderi_144))) begin
		upzero_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheaderi_153))) begin
		upzero_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		legup_function_call = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = sdiv i32 %i.02.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_divide_32_0_op0 = main_legup_memset_4_i64exit_i02i;
	end
	/* main: %.preheader.i*/
	/*   %252 = sdiv i32 %i.11.i, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) */ begin
		main_signed_divide_32_0_op0 = main_preheaderi_i11i;
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = sdiv i32 %i.02.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
	/* main: %.preheader.i*/
	/*   %252 = sdiv i32 %i.11.i, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) */ begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
end
always @(*) begin
	lpm_divide_main_preheaderi_252_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_preheaderi_252_out = lpm_divide_main_preheaderi_252_temp_out;
end
always @(*) begin
	main_signed_divide_32_0 = lpm_divide_main_preheaderi_252_out;
end
always @(*) begin
	lpm_divide_main_legup_memset_4_i64exit_32_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_35_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = mul nsw i32 %29, 12*/
	if ((lpm_mult_main_legup_memset_4_i64exit_35_en == 1'd1)) begin
		main_legup_memset_4_i64exit_35_stage0_reg <= (main_legup_memset_4_i64exit_29_reg * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_36_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = mul nsw i32 %28, -44*/
	if ((lpm_mult_main_legup_memset_4_i64exit_36_en == 1'd1)) begin
		main_legup_memset_4_i64exit_36_stage0_reg <= (main_legup_memset_4_i64exit_28_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_37_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = mul nsw i32 %27, -44*/
	if ((lpm_mult_main_legup_memset_4_i64exit_37_en == 1'd1)) begin
		main_legup_memset_4_i64exit_37_stage0_reg <= (main_legup_memset_4_i64exit_27_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_39_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = mul nsw i32 %26, 212*/
	if ((lpm_mult_main_legup_memset_4_i64exit_39_en == 1'd1)) begin
		main_legup_memset_4_i64exit_39_stage0_reg <= (main_legup_memset_4_i64exit_26_reg * 32'd212);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_41_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = mul nsw i32 %25, 48*/
	if ((lpm_mult_main_legup_memset_4_i64exit_41_en == 1'd1)) begin
		main_legup_memset_4_i64exit_41_stage0_reg <= (main_legup_memset_4_i64exit_25_reg * 32'd48);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_43_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = mul nsw i32 %24, -624*/
	if ((lpm_mult_main_legup_memset_4_i64exit_43_en == 1'd1)) begin
		main_legup_memset_4_i64exit_43_stage0_reg <= (main_legup_memset_4_i64exit_24_reg * -32'd624);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_47_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = mul nsw i32 %22, 1448*/
	if ((lpm_mult_main_legup_memset_4_i64exit_47_en == 1'd1)) begin
		main_legup_memset_4_i64exit_47_stage0_reg <= (main_legup_memset_4_i64exit_22_reg * 32'd1448);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_49_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = mul nsw i32 %21, -840*/
	if ((lpm_mult_main_legup_memset_4_i64exit_49_en == 1'd1)) begin
		main_legup_memset_4_i64exit_49_stage0_reg <= (main_legup_memset_4_i64exit_21_reg * -32'd840);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_51_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = mul nsw i32 %20, -3220*/
	if ((lpm_mult_main_legup_memset_4_i64exit_51_en == 1'd1)) begin
		main_legup_memset_4_i64exit_51_stage0_reg <= (main_legup_memset_4_i64exit_20_reg * -32'd3220);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_53_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = mul nsw i32 %19, 3804*/
	if ((lpm_mult_main_legup_memset_4_i64exit_53_en == 1'd1)) begin
		main_legup_memset_4_i64exit_53_stage0_reg <= (main_legup_memset_4_i64exit_19_reg * 32'd3804);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_55_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = mul nsw i32 %18, 15504*/
	if ((lpm_mult_main_legup_memset_4_i64exit_55_en == 1'd1)) begin
		main_legup_memset_4_i64exit_55_stage0_reg <= (main_legup_memset_4_i64exit_18_reg * 32'd15504);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_57_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = mul nsw i32 %17, 15504*/
	if ((lpm_mult_main_legup_memset_4_i64exit_57_en == 1'd1)) begin
		main_legup_memset_4_i64exit_57_stage0_reg <= (main_legup_memset_4_i64exit_17_reg * 32'd15504);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_59_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %59 = mul nsw i32 %16, 3804*/
	if ((lpm_mult_main_legup_memset_4_i64exit_59_en == 1'd1)) begin
		main_legup_memset_4_i64exit_59_stage0_reg <= (main_legup_memset_4_i64exit_16_reg * 32'd3804);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_61_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %61 = mul nsw i32 %15, -3220*/
	if ((lpm_mult_main_legup_memset_4_i64exit_61_en == 1'd1)) begin
		main_legup_memset_4_i64exit_61_stage0_reg <= (main_legup_memset_4_i64exit_15_reg * -32'd3220);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_63_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %63 = mul nsw i32 %14, -840*/
	if ((lpm_mult_main_legup_memset_4_i64exit_63_en == 1'd1)) begin
		main_legup_memset_4_i64exit_63_stage0_reg <= (main_legup_memset_4_i64exit_14_reg * -32'd840);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_65_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %65 = mul nsw i32 %13, 1448*/
	if ((lpm_mult_main_legup_memset_4_i64exit_65_en == 1'd1)) begin
		main_legup_memset_4_i64exit_65_stage0_reg <= (main_legup_memset_4_i64exit_13_reg * 32'd1448);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_69_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %69 = mul nsw i32 %11, -624*/
	if ((lpm_mult_main_legup_memset_4_i64exit_69_en == 1'd1)) begin
		main_legup_memset_4_i64exit_69_stage0_reg <= (main_legup_memset_4_i64exit_11_reg * -32'd624);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_71_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %71 = mul nsw i32 %10, 48*/
	if ((lpm_mult_main_legup_memset_4_i64exit_71_en == 1'd1)) begin
		main_legup_memset_4_i64exit_71_stage0_reg <= (main_legup_memset_4_i64exit_10_reg * 32'd48);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_73_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %73 = mul nsw i32 %9, 212*/
	if ((lpm_mult_main_legup_memset_4_i64exit_73_en == 1'd1)) begin
		main_legup_memset_4_i64exit_73_stage0_reg <= (main_legup_memset_4_i64exit_9_reg * 32'd212);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_75_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %75 = mul nsw i32 %8, -44*/
	if ((lpm_mult_main_legup_memset_4_i64exit_75_en == 1'd1)) begin
		main_legup_memset_4_i64exit_75_stage0_reg <= (main_legup_memset_4_i64exit_8_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_107_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %107 = mul i32 %al1.0, %rlt1.0*/
	if ((lpm_mult_main_legup_memset_4_i64exit_107_en == 1'd1)) begin
		main_legup_memset_4_i64exit_107_stage0_reg <= (main_legup_memset_4_i64exit_al10_reg * main_legup_memset_4_i64exit_rlt10_reg);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_108_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %108 = mul i32 %al2.0, %rlt2.0*/
	if ((lpm_mult_main_legup_memset_4_i64exit_108_en == 1'd1)) begin
		main_legup_memset_4_i64exit_108_stage0_reg <= (main_legup_memset_4_i64exit_al20_reg * main_legup_memset_4_i64exit_rlt20_reg);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_85_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %85 = mul nsw i32 %84, %83*/
	if ((lpm_mult_main_legup_memset_4_i64exit_85_en == 1'd1)) begin
		main_legup_memset_4_i64exit_85_stage0_reg <= (main_legup_memset_4_i64exit_84 * main_legup_memset_4_i64exit_83);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_88_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %88 = mul nsw i32 %87, %86*/
	if ((lpm_mult_main_legup_memset_4_i64exit_88_en == 1'd1)) begin
		main_legup_memset_4_i64exit_88_stage0_reg <= (main_legup_memset_4_i64exit_87 * main_legup_memset_4_i64exit_86);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_92_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %92 = mul nsw i32 %91, %90*/
	if ((lpm_mult_main_legup_memset_4_i64exit_92_en == 1'd1)) begin
		main_legup_memset_4_i64exit_92_stage0_reg <= (main_legup_memset_4_i64exit_91 * main_legup_memset_4_i64exit_90);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_96_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %96 = mul nsw i32 %95, %94*/
	if ((lpm_mult_main_legup_memset_4_i64exit_96_en == 1'd1)) begin
		main_legup_memset_4_i64exit_96_stage0_reg <= (main_legup_memset_4_i64exit_95 * main_legup_memset_4_i64exit_94);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_100_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %100 = mul nsw i32 %99, %98*/
	if ((lpm_mult_main_legup_memset_4_i64exit_100_en == 1'd1)) begin
		main_legup_memset_4_i64exit_100_stage0_reg <= (main_legup_memset_4_i64exit_99 * main_legup_memset_4_i64exit_98);
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4_i64exit_104_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %104 = mul nsw i32 %103, %102*/
	if ((lpm_mult_main_legup_memset_4_i64exit_104_en == 1'd1)) begin
		main_legup_memset_4_i64exit_104_stage0_reg <= (main_legup_memset_4_i64exit_103 * main_legup_memset_4_i64exit_102);
	end
end
always @(*) begin
	lpm_mult_main_117_121_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %117*/
	/*   %121 = mul nsw i32 %120, %detl.0*/
	if ((lpm_mult_main_117_121_en == 1'd1)) begin
		main_117_121_stage0_reg <= (main_117_120 * main_legup_memset_4_i64exit_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_148_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %148 = mul nsw i32 %al2.0, 127*/
	if ((lpm_mult_main_quantlexiti_148_en == 1'd1)) begin
		main_quantlexiti_148_stage0_reg <= (main_legup_memset_4_i64exit_al20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_153_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %153 = mul nsw i32 %al1.0, 255*/
	if ((lpm_mult_main_quantlexiti_153_en == 1'd1)) begin
		main_quantlexiti_153_stage0_reg <= (main_legup_memset_4_i64exit_al10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_185_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %185 = mul i32 %ah1.0, %rh1.0*/
	if ((lpm_mult_main_quantlexiti_185_en == 1'd1)) begin
		main_quantlexiti_185_stage0_reg <= (main_legup_memset_4_i64exit_ah10_reg * main_legup_memset_4_i64exit_rh10_reg);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_186_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %186 = mul i32 %ah2.0, %rh2.0*/
	if ((lpm_mult_main_quantlexiti_186_en == 1'd1)) begin
		main_quantlexiti_186_stage0_reg <= (main_legup_memset_4_i64exit_ah20_reg * main_legup_memset_4_i64exit_rh20_reg);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_192_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %192 = mul nsw i32 %deth.0, 564*/
	if ((lpm_mult_main_quantlexiti_192_en == 1'd1)) begin
		main_quantlexiti_192_stage0_reg <= (main_legup_memset_4_i64exit_deth0_reg * 32'd564);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_220_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %220 = mul nsw i32 %ah2.0, 127*/
	if ((lpm_mult_main_quantlexiti_220_en == 1'd1)) begin
		main_quantlexiti_220_stage0_reg <= (main_legup_memset_4_i64exit_ah20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_225_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %225 = mul nsw i32 %ah1.0, 255*/
	if ((lpm_mult_main_quantlexiti_225_en == 1'd1)) begin
		main_quantlexiti_225_stage0_reg <= (main_legup_memset_4_i64exit_ah10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_127_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %127 = mul nsw i32 %126, %detl.0*/
	if ((lpm_mult_main_quantlexiti_127_en == 1'd1)) begin
		main_quantlexiti_127_stage0_reg <= (main_quantlexiti_126 * main_legup_memset_4_i64exit_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_140_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %140 = mul nsw i32 %plt1.0, %138*/
	if ((lpm_mult_main_quantlexiti_140_en == 1'd1)) begin
		main_quantlexiti_140_stage0_reg <= (main_legup_memset_4_i64exit_plt10_reg * main_quantlexiti_138);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_144_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %144 = mul nsw i32 %plt2.0, %138*/
	if ((lpm_mult_main_quantlexiti_144_en == 1'd1)) begin
		main_quantlexiti_144_stage0_reg <= (main_legup_memset_4_i64exit_plt20_reg * main_quantlexiti_138);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_163_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %163 = mul nsw i32 %162, %161*/
	if ((lpm_mult_main_quantlexiti_163_en == 1'd1)) begin
		main_quantlexiti_163_stage0_reg <= (main_quantlexiti_162 * main_quantlexiti_161);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_166_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %166 = mul nsw i32 %165, %164*/
	if ((lpm_mult_main_quantlexiti_166_en == 1'd1)) begin
		main_quantlexiti_166_stage0_reg <= (main_quantlexiti_165 * main_quantlexiti_164);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_170_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %170 = mul nsw i32 %169, %168*/
	if ((lpm_mult_main_quantlexiti_170_en == 1'd1)) begin
		main_quantlexiti_170_stage0_reg <= (main_quantlexiti_169 * main_quantlexiti_168);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_174_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %174 = mul nsw i32 %173, %172*/
	if ((lpm_mult_main_quantlexiti_174_en == 1'd1)) begin
		main_quantlexiti_174_stage0_reg <= (main_quantlexiti_173 * main_quantlexiti_172);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_178_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %178 = mul nsw i32 %177, %176*/
	if ((lpm_mult_main_quantlexiti_178_en == 1'd1)) begin
		main_quantlexiti_178_stage0_reg <= (main_quantlexiti_177 * main_quantlexiti_176);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_182_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %182 = mul nsw i32 %181, %180*/
	if ((lpm_mult_main_quantlexiti_182_en == 1'd1)) begin
		main_quantlexiti_182_stage0_reg <= (main_quantlexiti_181 * main_quantlexiti_180);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_199_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %199 = mul nsw i32 %198, %deth.0*/
	if ((lpm_mult_main_quantlexiti_199_en == 1'd1)) begin
		main_quantlexiti_199_stage0_reg <= (main_quantlexiti_198 * main_legup_memset_4_i64exit_deth0_reg);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_212_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %212 = mul nsw i32 %ph1.0, %210*/
	if ((lpm_mult_main_quantlexiti_212_en == 1'd1)) begin
		main_quantlexiti_212_stage0_reg <= (main_legup_memset_4_i64exit_ph10_reg * main_quantlexiti_210);
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_216_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %216 = mul nsw i32 %ph2.0, %210*/
	if ((lpm_mult_main_quantlexiti_216_en == 1'd1)) begin
		main_quantlexiti_216_stage0_reg <= (main_legup_memset_4_i64exit_ph20_reg * main_quantlexiti_210);
	end
end
always @(*) begin
	lpm_mult_main_encodeexit_crit_edge_phitmp2_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp2 = mul i32 %...i13.i4, 127*/
	if ((lpm_mult_main_encodeexit_crit_edge_phitmp2_en == 1'd1)) begin
		main_encodeexit_crit_edge_phitmp2_stage0_reg <= (main_quantlexiti_i13i4_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_encodeexit_crit_edge_phitmp4_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp4 = mul i32 %...i2.i15, 127*/
	if ((lpm_mult_main_encodeexit_crit_edge_phitmp4_en == 1'd1)) begin
		main_encodeexit_crit_edge_phitmp4_stage0_reg <= (main_quantlexiti_i2i15_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_encodeexit_crit_edge_phitmp_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp = mul i32 %.pre58, -44*/
	if ((lpm_mult_main_encodeexit_crit_edge_phitmp_en == 1'd1)) begin
		main_encodeexit_crit_edge_phitmp_stage0_reg <= (main_encodeexit_crit_edge_pre58 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_encodeexit_crit_edge_phitmp1_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %phitmp1 = mul i32 %.pre59, 12*/
	if ((lpm_mult_main_encodeexit_crit_edge_phitmp1_en == 1'd1)) begin
		main_encodeexit_crit_edge_phitmp1_stage0_reg <= (main_encodeexit_crit_edge_pre59 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_280_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %280 = mul i32 %dec_al1.0, %dec_rlt1.0*/
	if ((lpm_mult_main_preheaderi_280_en == 1'd1)) begin
		main_preheaderi_280_stage0_reg <= (main_preheaderi_dec_al10_reg * main_preheaderi_dec_rlt10_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_281_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %281 = mul i32 %dec_al2.0, %dec_rlt2.0*/
	if ((lpm_mult_main_preheaderi_281_en == 1'd1)) begin
		main_preheaderi_281_stage0_reg <= (main_preheaderi_dec_al20_reg * main_preheaderi_dec_rlt20_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_290_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %290 = mul nsw i32 %250, %dec_detl.0*/
	if ((lpm_mult_main_preheaderi_290_en == 1'd1)) begin
		main_preheaderi_290_stage0_reg <= (main_preheaderipreheader_250_reg * main_preheaderi_dec_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_293_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %293 = mul nsw i32 %dec_nbl.0, 127*/
	if ((lpm_mult_main_preheaderi_293_en == 1'd1)) begin
		main_preheaderi_293_stage0_reg <= (main_preheaderi_dec_nbl0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_318_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %318 = mul nsw i32 %dec_al2.0, 127*/
	if ((lpm_mult_main_preheaderi_318_en == 1'd1)) begin
		main_preheaderi_318_stage0_reg <= (main_preheaderi_dec_al20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_323_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %323 = mul nsw i32 %dec_al1.0, 255*/
	if ((lpm_mult_main_preheaderi_323_en == 1'd1)) begin
		main_preheaderi_323_stage0_reg <= (main_preheaderi_dec_al10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_357_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %357 = mul i32 %dec_ah1.0, %dec_rh1.0*/
	if ((lpm_mult_main_preheaderi_357_en == 1'd1)) begin
		main_preheaderi_357_stage0_reg <= (main_preheaderi_dec_ah10_reg * main_preheaderi_dec_rh10_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_358_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %358 = mul i32 %dec_ah2.0, %dec_rh2.0*/
	if ((lpm_mult_main_preheaderi_358_en == 1'd1)) begin
		main_preheaderi_358_stage0_reg <= (main_preheaderi_dec_ah20_reg * main_preheaderi_dec_rh20_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_365_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %365 = mul nsw i32 %dec_nbh.0, 127*/
	if ((lpm_mult_main_preheaderi_365_en == 1'd1)) begin
		main_preheaderi_365_stage0_reg <= (main_preheaderi_dec_nbh0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_390_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %390 = mul nsw i32 %dec_ah2.0, 127*/
	if ((lpm_mult_main_preheaderi_390_en == 1'd1)) begin
		main_preheaderi_390_stage0_reg <= (main_preheaderi_dec_ah20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_395_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %395 = mul nsw i32 %dec_ah1.0, 255*/
	if ((lpm_mult_main_preheaderi_395_en == 1'd1)) begin
		main_preheaderi_395_stage0_reg <= (main_preheaderi_dec_ah10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_409_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %accumc.0.0, -44*/
	if ((lpm_mult_main_preheaderi_409_en == 1'd1)) begin
		main_preheaderi_409_stage0_reg <= (main_preheaderi_accumc00_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_411_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %411 = mul nsw i32 %accumd.0.0, 212*/
	if ((lpm_mult_main_preheaderi_411_en == 1'd1)) begin
		main_preheaderi_411_stage0_reg <= (main_preheaderi_accumd00_reg * 32'd212);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_413_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %413 = mul nsw i32 %accumc.1.0, 48*/
	if ((lpm_mult_main_preheaderi_413_en == 1'd1)) begin
		main_preheaderi_413_stage0_reg <= (main_preheaderi_accumc10_reg * 32'd48);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_415_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %415 = mul nsw i32 %accumd.1.0, -624*/
	if ((lpm_mult_main_preheaderi_415_en == 1'd1)) begin
		main_preheaderi_415_stage0_reg <= (main_preheaderi_accumd10_reg * -32'd624);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_419_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %419 = mul nsw i32 %accumd.2.0, 1448*/
	if ((lpm_mult_main_preheaderi_419_en == 1'd1)) begin
		main_preheaderi_419_stage0_reg <= (main_preheaderi_accumd20_reg * 32'd1448);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_421_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %421 = mul nsw i32 %accumc.3.0, -840*/
	if ((lpm_mult_main_preheaderi_421_en == 1'd1)) begin
		main_preheaderi_421_stage0_reg <= (main_preheaderi_accumc30_reg * -32'd840);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_423_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %423 = mul nsw i32 %accumd.3.0, -3220*/
	if ((lpm_mult_main_preheaderi_423_en == 1'd1)) begin
		main_preheaderi_423_stage0_reg <= (main_preheaderi_accumd30_reg * -32'd3220);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_425_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %425 = mul nsw i32 %accumc.4.0, 3804*/
	if ((lpm_mult_main_preheaderi_425_en == 1'd1)) begin
		main_preheaderi_425_stage0_reg <= (main_preheaderi_accumc40_reg * 32'd3804);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_427_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %427 = mul nsw i32 %accumd.4.0, 15504*/
	if ((lpm_mult_main_preheaderi_427_en == 1'd1)) begin
		main_preheaderi_427_stage0_reg <= (main_preheaderi_accumd40_reg * 32'd15504);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_429_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %429 = mul nsw i32 %accumc.5.0, 15504*/
	if ((lpm_mult_main_preheaderi_429_en == 1'd1)) begin
		main_preheaderi_429_stage0_reg <= (main_preheaderi_accumc50_reg * 32'd15504);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_431_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %431 = mul nsw i32 %accumd.5.0, 3804*/
	if ((lpm_mult_main_preheaderi_431_en == 1'd1)) begin
		main_preheaderi_431_stage0_reg <= (main_preheaderi_accumd50_reg * 32'd3804);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_433_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %433 = mul nsw i32 %accumc.6.0, -3220*/
	if ((lpm_mult_main_preheaderi_433_en == 1'd1)) begin
		main_preheaderi_433_stage0_reg <= (main_preheaderi_accumc60_reg * -32'd3220);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_435_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %435 = mul nsw i32 %accumd.6.0, -840*/
	if ((lpm_mult_main_preheaderi_435_en == 1'd1)) begin
		main_preheaderi_435_stage0_reg <= (main_preheaderi_accumd60_reg * -32'd840);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_437_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %437 = mul nsw i32 %accumc.7.0, 1448*/
	if ((lpm_mult_main_preheaderi_437_en == 1'd1)) begin
		main_preheaderi_437_stage0_reg <= (main_preheaderi_accumc70_reg * 32'd1448);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_441_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %accumc.8.0, -624*/
	if ((lpm_mult_main_preheaderi_441_en == 1'd1)) begin
		main_preheaderi_441_stage0_reg <= (main_preheaderi_accumc80_reg * -32'd624);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_443_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %443 = mul nsw i32 %accumd.8.0, 48*/
	if ((lpm_mult_main_preheaderi_443_en == 1'd1)) begin
		main_preheaderi_443_stage0_reg <= (main_preheaderi_accumd80_reg * 32'd48);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_445_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %445 = mul nsw i32 %accumc.9.0, 212*/
	if ((lpm_mult_main_preheaderi_445_en == 1'd1)) begin
		main_preheaderi_445_stage0_reg <= (main_preheaderi_accumc90_reg * 32'd212);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_447_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %447 = mul nsw i32 %accumd.9.0, -44*/
	if ((lpm_mult_main_preheaderi_447_en == 1'd1)) begin
		main_preheaderi_447_stage0_reg <= (main_preheaderi_accumd90_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_449_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %449 = mul nsw i32 %accumc.10.0, -44*/
	if ((lpm_mult_main_preheaderi_449_en == 1'd1)) begin
		main_preheaderi_449_stage0_reg <= (main_preheaderi_accumc100_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_451_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %451 = mul nsw i32 %accumd.10.0, 12*/
	if ((lpm_mult_main_preheaderi_451_en == 1'd1)) begin
		main_preheaderi_451_stage0_reg <= (main_preheaderi_accumd100_reg * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_258_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %258 = mul nsw i32 %257, %256*/
	if ((lpm_mult_main_preheaderi_258_en == 1'd1)) begin
		main_preheaderi_258_stage0_reg <= (main_preheaderi_257 * main_preheaderi_256);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_261_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %261 = mul nsw i32 %260, %259*/
	if ((lpm_mult_main_preheaderi_261_en == 1'd1)) begin
		main_preheaderi_261_stage0_reg <= (main_preheaderi_260 * main_preheaderi_259);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_265_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %265 = mul nsw i32 %264, %263*/
	if ((lpm_mult_main_preheaderi_265_en == 1'd1)) begin
		main_preheaderi_265_stage0_reg <= (main_preheaderi_264 * main_preheaderi_263);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_269_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %269 = mul nsw i32 %268, %267*/
	if ((lpm_mult_main_preheaderi_269_en == 1'd1)) begin
		main_preheaderi_269_stage0_reg <= (main_preheaderi_268 * main_preheaderi_267);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_273_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
	if ((lpm_mult_main_preheaderi_273_en == 1'd1)) begin
		main_preheaderi_273_stage0_reg <= (main_preheaderi_272 * main_preheaderi_271);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_277_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %277 = mul nsw i32 %276, %275*/
	if ((lpm_mult_main_preheaderi_277_en == 1'd1)) begin
		main_preheaderi_277_stage0_reg <= (main_preheaderi_276 * main_preheaderi_275);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_288_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %288 = mul nsw i32 %287, %dec_detl.0*/
	if ((lpm_mult_main_preheaderi_288_en == 1'd1)) begin
		main_preheaderi_288_stage0_reg <= (main_preheaderi_287 * main_preheaderi_dec_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_310_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %310 = mul nsw i32 %dec_plt1.0, %308*/
	if ((lpm_mult_main_preheaderi_310_en == 1'd1)) begin
		main_preheaderi_310_stage0_reg <= (main_preheaderi_dec_plt10_reg * main_preheaderi_308);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_314_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %314 = mul nsw i32 %dec_plt2.0, %308*/
	if ((lpm_mult_main_preheaderi_314_en == 1'd1)) begin
		main_preheaderi_314_stage0_reg <= (main_preheaderi_dec_plt20_reg * main_preheaderi_308);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_363_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %363 = mul nsw i32 %362, %dec_deth.0*/
	if ((lpm_mult_main_preheaderi_363_en == 1'd1)) begin
		main_preheaderi_363_stage0_reg <= (main_preheaderi_362 * main_preheaderi_dec_deth0_reg);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_335_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %335 = mul nsw i32 %334, %333*/
	if ((lpm_mult_main_preheaderi_335_en == 1'd1)) begin
		main_preheaderi_335_stage0_reg <= (main_preheaderi_334 * main_preheaderi_333);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_338_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %338 = mul nsw i32 %337, %336*/
	if ((lpm_mult_main_preheaderi_338_en == 1'd1)) begin
		main_preheaderi_338_stage0_reg <= (main_preheaderi_337 * main_preheaderi_336);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_342_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %342 = mul nsw i32 %341, %340*/
	if ((lpm_mult_main_preheaderi_342_en == 1'd1)) begin
		main_preheaderi_342_stage0_reg <= (main_preheaderi_341 * main_preheaderi_340);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_346_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %346 = mul nsw i32 %345, %344*/
	if ((lpm_mult_main_preheaderi_346_en == 1'd1)) begin
		main_preheaderi_346_stage0_reg <= (main_preheaderi_345 * main_preheaderi_344);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_350_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %350 = mul nsw i32 %349, %348*/
	if ((lpm_mult_main_preheaderi_350_en == 1'd1)) begin
		main_preheaderi_350_stage0_reg <= (main_preheaderi_349 * main_preheaderi_348);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_354_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %354 = mul nsw i32 %353, %352*/
	if ((lpm_mult_main_preheaderi_354_en == 1'd1)) begin
		main_preheaderi_354_stage0_reg <= (main_preheaderi_353 * main_preheaderi_352);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_382_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %382 = mul nsw i32 %dec_ph1.0, %380*/
	if ((lpm_mult_main_preheaderi_382_en == 1'd1)) begin
		main_preheaderi_382_stage0_reg <= (main_preheaderi_dec_ph10_reg * main_preheaderi_380);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_386_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %386 = mul nsw i32 %dec_ph2.0, %380*/
	if ((lpm_mult_main_preheaderi_386_en == 1'd1)) begin
		main_preheaderi_386_stage0_reg <= (main_preheaderi_dec_ph20_reg * main_preheaderi_380);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_407_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %407 = mul nsw i32 %405, 12*/
	if ((lpm_mult_main_preheaderi_407_en == 1'd1)) begin
		main_preheaderi_407_stage0_reg <= (main_preheaderi_405 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_408_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %408 = mul nsw i32 %406, -44*/
	if ((lpm_mult_main_preheaderi_408_en == 1'd1)) begin
		main_preheaderi_408_stage0_reg <= (main_preheaderi_406 * -32'd44);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %472*/
	/*   ret i32 %.main_result.2*/
	if ((cur_state == LEGUP_F_main_BB__472_168)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_78)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_delay_dltx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = `TAG_g_dec_del_dltx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_a = `TAG_g_dec_del_bpl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd5));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd1));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd2));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd3));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd4));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd5));
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_address_a = main_quantlexiti_ril0inii;
	end
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		memory_controller_address_a = `TAG_g_delay_bph_a;
	end
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd2));
	end
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_78)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd3));
	end
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd4));
	end
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_address_a = `TAG_g_dec_del_bpl_a;
	end
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_address_a = `TAG_g_dec_del_bph_a;
	end
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd5));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_78)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_in_a = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %98 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %102 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %168 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_78)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %256 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %259 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %267 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %333 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %336 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %340 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %344 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %348 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %162 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_78)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %177 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_b = `TAG_g_dec_del_dhx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_b = `TAG_g_delay_bph_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_b = `TAG_g_dec_del_bph_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd5));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_address_b = `TAG_g_delay_dltx_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd1));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd2));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd3));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd4));
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd5));
	end
	/* main: %quantl.exit.i*/
	/*   %162 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* main: %quantl.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd2));
	end
	/* main: %quantl.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_78)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd3));
	end
	/* main: %quantl.exit.i*/
	/*   %177 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd4));
	end
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_address_b = `TAG_g_dec_del_dltx_a;
	end
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_address_b = `TAG_g_dec_del_dhx_a;
	end
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd5));
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %162 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_78)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %177 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_in_b = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %quantl.exit.i*/
	/*   tail call fastcc void @upzero(i32 %200, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %289, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_145)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %.preheader.i*/
	/*   tail call fastcc void @upzero(i32 %364, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_154)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %84 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %87 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %91 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %95 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_33)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %99 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %103 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %162 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_78)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %177 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_80)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %257 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %260 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %264 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %334 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %337 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %341 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %345 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %349 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %472*/
	/*   ret i32 %.main_result.2*/
	if ((cur_state == LEGUP_F_main_BB__472_168)) begin
		return_val <= main_preheader_main_result2_reg;
		if (start == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
