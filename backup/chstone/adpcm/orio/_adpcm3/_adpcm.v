//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Jan 28 18:16:29 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 42
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @ah1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_ah1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ah1_a {`TAG_g_ah1, 23'd280}
// @ah2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_ah2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ah2_a {`TAG_g_ah2, 23'd120}
// @al1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_al1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_al1_a {`TAG_g_al1, 23'd152}
// @al2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_al2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_al2_a {`TAG_g_al2, 23'd316}
// @dec_del_bph = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_bph `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_bph_a {`TAG_g_dec_del_bph, 23'd160}
// @dec_del_bpl = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_bpl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_bpl_a {`TAG_g_dec_del_bpl, 23'd224}
// @dec_del_dhx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_dhx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_dhx_a {`TAG_g_dec_del_dhx, 23'd128}
// @dec_del_dltx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_dltx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_dltx_a {`TAG_g_dec_del_dltx, 23'd192}
// @delay_bph = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bph `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_bph_a {`TAG_g_delay_bph, 23'd256}
// @delay_bpl = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bpl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_bpl_a {`TAG_g_delay_bpl, 23'd288}
// @delay_dhx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dhx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_dhx_a {`TAG_g_delay_dhx, 23'd96}
// @delay_dltx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dltx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_dltx_a {`TAG_g_delay_dltx, 23'd320}
// @deth = internal unnamed_addr global i32 0, align 4
`define TAG_g_deth `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_deth_a {`TAG_g_deth, 23'd216}
// @detl = internal unnamed_addr global i32 0, align 4
`define TAG_g_detl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_detl_a {`TAG_g_detl, 23'd248}
// @ih = internal unnamed_addr global i32 0, align 4
`define TAG_g_ih `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ih_a {`TAG_g_ih, 23'd220}
// @il = internal unnamed_addr global i32 0, align 4
`define TAG_g_il `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_il_a {`TAG_g_il, 23'd356}
// @ilb_table = internal unnamed_addr constant [32 x i32] [i32 2048, i32 2093, i32 2139, i32 2186, i32 2233, i32 2282, i32 2332, i32 2383, i32 2435, i32 2489, i32 2543, i32 2599, i32 2656, i32 2714, i32 ...
`define TAG_g_ilb_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_ilb_table_a {`TAG_g_ilb_table, 23'd0}
// @nbh = internal unnamed_addr global i32 0, align 4
`define TAG_g_nbh `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_nbh_a {`TAG_g_nbh, 23'd188}
// @nbl = internal unnamed_addr global i32 0, align 4
`define TAG_g_nbl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_nbl_a {`TAG_g_nbl, 23'd352}
// @ph1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_ph1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ph1_a {`TAG_g_ph1, 23'd184}
// @ph2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_ph2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ph2_a {`TAG_g_ph2, 23'd156}
// @plt1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_plt1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_plt1_a {`TAG_g_plt1, 23'd348}
// @plt2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_plt2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_plt2_a {`TAG_g_plt2, 23'd344}
// @qq2_code2_table = internal unnamed_addr constant [4 x i32] [i32 -7408, i32 -1616, i32 7408, i32 1616], align 4
`define TAG_g_qq2_code2_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_qq2_code2_table_a {`TAG_g_qq2_code2_table, 23'd512}
// @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, ...
`define TAG_g_qq4_code4_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_qq4_code4_table_a {`TAG_g_qq4_code4_table, 23'd384}
// @quant26bt_neg = internal unnamed_addr constant [31 x i32] [i32 63, i32 62, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 ...
`define TAG_g_quant26bt_neg `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_quant26bt_neg_a {`TAG_g_quant26bt_neg, 23'd256}
// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
`define TAG_g_quant26bt_pos `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_quant26bt_pos_a {`TAG_g_quant26bt_pos, 23'd128}
// @rh1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_rh1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rh1_a {`TAG_g_rh1, 23'd284}
// @rh2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_rh2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rh2_a {`TAG_g_rh2, 23'd252}
// @rlt1 = internal unnamed_addr global i32 0, align 4
`define TAG_g_rlt1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rlt1_a {`TAG_g_rlt1, 23'd124}
// @rlt2 = internal unnamed_addr global i32 0, align 4
`define TAG_g_rlt2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_rlt2_a {`TAG_g_rlt2, 23'd312}
// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
`define TAG_g_tqmf `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_tqmf_a {`TAG_g_tqmf, 23'd0}
// @wh_code_table = internal unnamed_addr constant [4 x i32] [i32 798, i32 -214, i32 798, i32 -214], align 4
`define TAG_g_wh_code_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_wh_code_table_a {`TAG_g_wh_code_table, 23'd528}
// @wl_code_table = internal unnamed_addr constant [16 x i32] [i32 -60, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32...
`define TAG_g_wl_code_table `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_wl_code_table_a {`TAG_g_wl_code_table, 23'd448}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [7:0] rom_32_address_a;
reg [7:0] rom_32_address_b;
reg rom_32_write_enable_a;
reg rom_32_write_enable_b;
reg [31:0] rom_32_in_a;
reg [31:0] rom_32_in_b;
wire [31:0] rom_32_out_a;
wire [31:0] rom_32_out_b;

// @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, ...
rom_dual_port rom_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_32_address_a ),
	.address_b( rom_32_address_b ),
	.q_a( rom_32_out_a ),
	.q_b( rom_32_out_b)
);
defparam rom_32.width_a = 32;
defparam rom_32.width_b = 32;
defparam rom_32.widthad_a = 8;
defparam rom_32.widthad_b = 8;
defparam rom_32.numwords_a = 136;
defparam rom_32.numwords_b = 136;
defparam rom_32.latency = ram_latency;
defparam rom_32.init_file = "rom_32.mif";

reg [6:0] ram_32_address_a;
reg [6:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 7;
defparam ram_32.widthad_b = 7;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 90;
defparam ram_32.numwords_b = 90;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_32_a;
assign select_rom_32_a = (tag_a == 2);
reg [ram_latency:0] select_rom_32_reg_a;
wire [31:0] memory_controller_rom_32_out_a;
assign memory_controller_rom_32_out_a = {32{ select_rom_32_reg_a[ram_latency]}} & rom_32_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 3);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	rom_32_address_a = memory_controller_address_a [8-1+2:2] & {8{select_rom_32_a}};
	rom_32_write_enable_a = memory_controller_write_enable_a & select_rom_32_a;
	rom_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ram_32_address_a = memory_controller_address_a [7-1+2:2] & {7{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_rom_32_reg_a[ram_latency]}} | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_32_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_32_b;
assign select_rom_32_b = (tag_b == 2);
reg [ram_latency:0] select_rom_32_reg_b;
wire [31:0] memory_controller_rom_32_out_b;
assign memory_controller_rom_32_out_b = {32{ select_rom_32_reg_b[ram_latency]}} & rom_32_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 3);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	rom_32_address_b = memory_controller_address_b [8-1+2:2] & {8{select_rom_32_b}};
	rom_32_write_enable_b = memory_controller_write_enable_b & select_rom_32_b;
	rom_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ram_32_address_b = memory_controller_address_b [7-1+2:2] & {7{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_rom_32_reg_b[ram_latency]}} | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_32_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module upzero
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_dlt,
	arg_dlti,
	arg_bli
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_upzero_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_2 = 6'd2;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_3 = 6'd3;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_4 = 6'd4;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_5 = 6'd5;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_6 = 6'd6;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_7 = 6'd7;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_8 = 6'd8;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_9 = 6'd9;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_10 = 6'd10;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_11 = 6'd11;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_12 = 6'd12;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_13 = 6'd13;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_14 = 6'd14;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_15 = 6'd15;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_16 = 6'd16;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_17 = 6'd17;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_18 = 6'd18;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_19 = 6'd19;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_20 = 6'd20;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_21 = 6'd21;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_22 = 6'd22;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_23 = 6'd23;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_24 = 6'd24;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_25 = 6'd25;
parameter [5:0] LEGUP_F_upzero_BB_preheader1_26 = 6'd26;
parameter [5:0] LEGUP_F_upzero_BB_preheader_27 = 6'd27;
parameter [5:0] LEGUP_F_upzero_BB_preheader_28 = 6'd28;
parameter [5:0] LEGUP_F_upzero_BB_preheader_29 = 6'd29;
parameter [5:0] LEGUP_F_upzero_BB_preheader_30 = 6'd30;
parameter [5:0] LEGUP_F_upzero_BB_preheader_31 = 6'd31;
parameter [5:0] LEGUP_F_upzero_BB_preheader_32 = 6'd32;
parameter [5:0] LEGUP_F_upzero_BB_preheader_33 = 6'd33;
parameter [5:0] LEGUP_F_upzero_BB__89_34 = 6'd34;
parameter [5:0] LEGUP_F_upzero_BB__89_35 = 6'd35;
parameter [5:0] LEGUP_F_upzero_BB__89_36 = 6'd36;
parameter [5:0] LEGUP_F_upzero_BB__89_37 = 6'd37;
parameter [5:0] LEGUP_F_upzero_BB__89_38 = 6'd38;
parameter [5:0] LEGUP_F_upzero_BB__89_39 = 6'd39;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [31:0] arg_dlt;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_dlti;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_bli;
reg [5:0] cur_state;
reg [5:0] next_state;
reg  upzero_0_1;
reg  upzero_0_1_reg;
reg [31:0] upzero_preheader1_2;
reg [31:0] upzero_preheader1_2_reg;
reg [31:0] upzero_preheader1_3;
reg [31:0] upzero_preheader1_3_reg;
reg [31:0] upzero_preheader1_4;
reg [31:0] upzero_preheader1_4_reg;
reg [31:0] upzero_preheader1_5;
reg [31:0] upzero_preheader1_5_reg;
reg [31:0] upzero_preheader1_6;
reg [31:0] upzero_preheader1_6_reg;
reg [31:0] upzero_preheader1_7;
reg [31:0] upzero_preheader1_7_reg;
reg [31:0] upzero_preheader1_8;
reg [31:0] upzero_preheader1_8_reg;
reg [31:0] upzero_preheader1_9;
reg [31:0] upzero_preheader1_9_reg;
reg [31:0] upzero_preheader1_10;
reg [31:0] upzero_preheader1_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_11_reg;
reg [31:0] upzero_preheader1_12;
reg [31:0] upzero_preheader1_12_reg;
reg [31:0] upzero_preheader1_13;
reg [31:0] upzero_preheader1_13_reg;
reg [31:0] upzero_preheader1_14;
reg [31:0] upzero_preheader1_14_reg;
reg [31:0] upzero_preheader1_15;
reg [31:0] upzero_preheader1_15_reg;
reg [31:0] upzero_preheader1_16;
reg [31:0] upzero_preheader1_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_17_reg;
reg [31:0] upzero_preheader1_18;
reg [31:0] upzero_preheader1_18_reg;
reg [31:0] upzero_preheader1_19;
reg [31:0] upzero_preheader1_19_reg;
reg [31:0] upzero_preheader1_20;
reg [31:0] upzero_preheader1_20_reg;
reg [31:0] upzero_preheader1_21;
reg [31:0] upzero_preheader1_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_22_reg;
reg [31:0] upzero_preheader1_23;
reg [31:0] upzero_preheader1_23_reg;
reg [31:0] upzero_preheader1_24;
reg [31:0] upzero_preheader1_24_reg;
reg [31:0] upzero_preheader1_25;
reg [31:0] upzero_preheader1_25_reg;
reg [31:0] upzero_preheader1_26;
reg [31:0] upzero_preheader1_26_reg;
reg [31:0] upzero_preheader1_27;
reg [31:0] upzero_preheader1_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_28_reg;
reg [31:0] upzero_preheader1_29;
reg [31:0] upzero_preheader1_29_reg;
reg [31:0] upzero_preheader1_30;
reg [31:0] upzero_preheader1_30_reg;
reg [31:0] upzero_preheader1_31;
reg [31:0] upzero_preheader1_31_reg;
reg [31:0] upzero_preheader1_32;
reg [31:0] upzero_preheader1_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_33_reg;
reg [31:0] upzero_preheader1_34;
reg [31:0] upzero_preheader1_34_reg;
reg [31:0] upzero_preheader1_35;
reg [31:0] upzero_preheader1_35_reg;
reg [31:0] upzero_preheader1_36;
reg [31:0] upzero_preheader1_36_reg;
reg [31:0] upzero_preheader1_37;
reg [31:0] upzero_preheader1_37_reg;
reg [31:0] upzero_preheader1_38;
reg [31:0] upzero_preheader1_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_39_reg;
reg [31:0] upzero_preheader1_40;
reg [31:0] upzero_preheader1_40_reg;
reg [31:0] upzero_preheader1_41;
reg [31:0] upzero_preheader1_41_reg;
reg [31:0] upzero_preheader1_42;
reg [31:0] upzero_preheader1_42_reg;
reg [31:0] upzero_preheader1_43;
reg [31:0] upzero_preheader1_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_44_reg;
reg [31:0] upzero_preheader1_45;
reg [31:0] upzero_preheader1_45_reg;
reg [31:0] upzero_preheader1_46;
reg [31:0] upzero_preheader1_46_reg;
reg [31:0] upzero_preheader1_47;
reg [31:0] upzero_preheader1_47_reg;
reg [31:0] upzero_preheader1_48;
reg [31:0] upzero_preheader1_48_reg;
reg [31:0] upzero_preheader1_49;
reg [31:0] upzero_preheader1_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_50_reg;
reg [31:0] upzero_preheader1_51;
reg [31:0] upzero_preheader1_51_reg;
reg [31:0] upzero_preheader1_52;
reg [31:0] upzero_preheader1_52_reg;
reg [31:0] upzero_preheader1_53;
reg [31:0] upzero_preheader1_53_reg;
reg [31:0] upzero_preheader1_54;
reg [31:0] upzero_preheader1_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_55_reg;
reg [31:0] upzero_preheader1_56;
reg [31:0] upzero_preheader1_56_reg;
reg [31:0] upzero_preheader1_57;
reg [31:0] upzero_preheader1_57_reg;
reg [31:0] upzero_preheader1_58;
reg [31:0] upzero_preheader1_58_reg;
reg [31:0] upzero_preheader1_59;
reg [31:0] upzero_preheader1_59_reg;
reg [31:0] upzero_preheader1_60;
reg [31:0] upzero_preheader1_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader1_61_reg;
reg [31:0] upzero_preheader1_62;
reg [31:0] upzero_preheader1_62_reg;
reg [31:0] upzero_preheader1_63;
reg [31:0] upzero_preheader1_63_reg;
reg [31:0] upzero_preheader1_64;
reg [31:0] upzero_preheader1_64_reg;
reg [31:0] upzero_preheader1_65;
reg [31:0] upzero_preheader1_65_reg;
reg [31:0] upzero_preheader_66;
reg [31:0] upzero_preheader_66_reg;
reg [31:0] upzero_preheader_67;
reg [31:0] upzero_preheader_67_reg;
reg [31:0] upzero_preheader_68;
reg [31:0] upzero_preheader_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_69_reg;
reg [31:0] upzero_preheader_70;
reg [31:0] upzero_preheader_70_reg;
reg [31:0] upzero_preheader_71;
reg [31:0] upzero_preheader_71_reg;
reg [31:0] upzero_preheader_72;
reg [31:0] upzero_preheader_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_73_reg;
reg [31:0] upzero_preheader_74;
reg [31:0] upzero_preheader_74_reg;
reg [31:0] upzero_preheader_75;
reg [31:0] upzero_preheader_75_reg;
reg [31:0] upzero_preheader_76;
reg [31:0] upzero_preheader_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_77_reg;
reg [31:0] upzero_preheader_78;
reg [31:0] upzero_preheader_78_reg;
reg [31:0] upzero_preheader_79;
reg [31:0] upzero_preheader_79_reg;
reg [31:0] upzero_preheader_80;
reg [31:0] upzero_preheader_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_81_reg;
reg [31:0] upzero_preheader_82;
reg [31:0] upzero_preheader_82_reg;
reg [31:0] upzero_preheader_83;
reg [31:0] upzero_preheader_83_reg;
reg [31:0] upzero_preheader_84;
reg [31:0] upzero_preheader_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_85_reg;
reg [31:0] upzero_preheader_86;
reg [31:0] upzero_preheader_86_reg;
reg [31:0] upzero_preheader_87;
reg [31:0] upzero_preheader_87_reg;
reg [31:0] upzero_preheader_88;
reg [31:0] upzero_preheader_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_preheader_pre13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_89_prephi_reg;
reg [31:0] upzero_89_90;
reg [31:0] upzero_89_90_reg;
reg [31:0] upzero_89_91;
reg [31:0] upzero_89_91_reg;
reg [31:0] upzero_89_92;
reg [31:0] upzero_89_92_reg;
reg [31:0] upzero_89_93;
reg [31:0] upzero_89_93_reg;
wire [1:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [1:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
wire [5:0] qq6_code6_table_address_a;
wire  qq6_code6_table_write_enable_a;
wire [31:0] qq6_code6_table_in_a;
wire [31:0] qq6_code6_table_out_a;
wire [5:0] qq6_code6_table_address_b;
wire  qq6_code6_table_write_enable_b;
wire [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_b;
wire [4:0] decis_levl_address_a;
wire  decis_levl_write_enable_a;
wire [31:0] decis_levl_in_a;
wire [31:0] decis_levl_out_a;
wire [4:0] decis_levl_address_b;
wire  decis_levl_write_enable_b;
wire [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_b;
wire [2:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [2:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire  xh_address_a;
wire  xh_write_enable_a;
wire [31:0] xh_in_a;
wire [31:0] xh_out_a;
wire  xh_address_b;
wire  xh_write_enable_b;
wire [31:0] xh_in_b;
wire [31:0] xh_out_b;
wire [6:0] test_data_address_a;
wire  test_data_write_enable_a;
wire [31:0] test_data_in_a;
wire [31:0] test_data_out_a;
wire [6:0] test_data_address_b;
wire  test_data_write_enable_b;
wire [31:0] test_data_in_b;
wire [31:0] test_data_out_b;
wire [6:0] test_compressed_address_a;
wire  test_compressed_write_enable_a;
wire [31:0] test_compressed_in_a;
wire [31:0] test_compressed_out_a;
wire [6:0] test_compressed_address_b;
wire  test_compressed_write_enable_b;
wire [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_b;
wire [6:0] test_result_address_a;
wire  test_result_write_enable_a;
wire [31:0] test_result_in_a;
wire [31:0] test_result_out_a;
wire [6:0] test_result_address_b;
wire  test_result_write_enable_b;
wire [31:0] test_result_in_b;
wire [31:0] test_result_out_b;
wire [6:0] compressed_address_a;
wire  compressed_write_enable_a;
wire [31:0] compressed_in_a;
wire [31:0] compressed_out_a;
wire [6:0] compressed_address_b;
wire  compressed_write_enable_b;
wire [31:0] compressed_in_b;
wire [31:0] compressed_out_b;
wire [6:0] result_address_a;
wire  result_write_enable_a;
wire [31:0] result_in_a;
wire [31:0] result_out_a;
wire [6:0] result_address_b;
wire  result_write_enable_b;
wire [31:0] result_in_b;
wire [31:0] result_out_b;
reg  lpm_mult_upzero_preheader1_3_en;
reg [31:0] upzero_preheader1_3_stage0_reg;
reg  lpm_mult_upzero_preheader1_8_en;
reg [31:0] upzero_preheader1_8_stage0_reg;
reg  lpm_mult_upzero_preheader1_13_en;
reg [31:0] upzero_preheader1_13_stage0_reg;
reg  lpm_mult_upzero_preheader1_19_en;
reg [31:0] upzero_preheader1_19_stage0_reg;
reg  lpm_mult_upzero_preheader1_24_en;
reg [31:0] upzero_preheader1_24_stage0_reg;
reg  lpm_mult_upzero_preheader1_30_en;
reg [31:0] upzero_preheader1_30_stage0_reg;
reg  lpm_mult_upzero_preheader1_35_en;
reg [31:0] upzero_preheader1_35_stage0_reg;
reg  lpm_mult_upzero_preheader1_41_en;
reg [31:0] upzero_preheader1_41_stage0_reg;
reg  lpm_mult_upzero_preheader1_46_en;
reg [31:0] upzero_preheader1_46_stage0_reg;
reg  lpm_mult_upzero_preheader1_52_en;
reg [31:0] upzero_preheader1_52_stage0_reg;
reg  lpm_mult_upzero_preheader1_57_en;
reg [31:0] upzero_preheader1_57_stage0_reg;
reg  lpm_mult_upzero_preheader1_63_en;
reg [31:0] upzero_preheader1_63_stage0_reg;
reg  lpm_mult_upzero_preheader_67_en;
reg [31:0] upzero_preheader_67_stage0_reg;
reg  lpm_mult_upzero_preheader_71_en;
reg [31:0] upzero_preheader_71_stage0_reg;
reg  lpm_mult_upzero_preheader_75_en;
reg [31:0] upzero_preheader_75_stage0_reg;
reg  lpm_mult_upzero_preheader_79_en;
reg [31:0] upzero_preheader_79_stage0_reg;
reg  lpm_mult_upzero_preheader_83_en;
reg [31:0] upzero_preheader_83_stage0_reg;
reg  lpm_mult_upzero_preheader_87_en;
reg [31:0] upzero_preheader_87_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_upzero_BB__0_1;
LEGUP_F_upzero_BB__0_1:
	if ((upzero_0_1 == 1'd1))
		next_state = LEGUP_F_upzero_BB_preheader_27;
	else if ((upzero_0_1 == 1'd0))
		next_state = LEGUP_F_upzero_BB_preheader1_2;
LEGUP_F_upzero_BB__89_34:
		next_state = LEGUP_F_upzero_BB__89_35;
LEGUP_F_upzero_BB__89_35:
		next_state = LEGUP_F_upzero_BB__89_36;
LEGUP_F_upzero_BB__89_36:
		next_state = LEGUP_F_upzero_BB__89_37;
LEGUP_F_upzero_BB__89_37:
		next_state = LEGUP_F_upzero_BB__89_38;
LEGUP_F_upzero_BB__89_38:
		next_state = LEGUP_F_upzero_BB__89_39;
LEGUP_F_upzero_BB__89_39:
		next_state = LEGUP_0;
LEGUP_F_upzero_BB_preheader1_10:
		next_state = LEGUP_F_upzero_BB_preheader1_11;
LEGUP_F_upzero_BB_preheader1_11:
		next_state = LEGUP_F_upzero_BB_preheader1_12;
LEGUP_F_upzero_BB_preheader1_12:
		next_state = LEGUP_F_upzero_BB_preheader1_13;
LEGUP_F_upzero_BB_preheader1_13:
		next_state = LEGUP_F_upzero_BB_preheader1_14;
LEGUP_F_upzero_BB_preheader1_14:
		next_state = LEGUP_F_upzero_BB_preheader1_15;
LEGUP_F_upzero_BB_preheader1_15:
		next_state = LEGUP_F_upzero_BB_preheader1_16;
LEGUP_F_upzero_BB_preheader1_16:
		next_state = LEGUP_F_upzero_BB_preheader1_17;
LEGUP_F_upzero_BB_preheader1_17:
		next_state = LEGUP_F_upzero_BB_preheader1_18;
LEGUP_F_upzero_BB_preheader1_18:
		next_state = LEGUP_F_upzero_BB_preheader1_19;
LEGUP_F_upzero_BB_preheader1_19:
		next_state = LEGUP_F_upzero_BB_preheader1_20;
LEGUP_F_upzero_BB_preheader1_2:
		next_state = LEGUP_F_upzero_BB_preheader1_3;
LEGUP_F_upzero_BB_preheader1_20:
		next_state = LEGUP_F_upzero_BB_preheader1_21;
LEGUP_F_upzero_BB_preheader1_21:
		next_state = LEGUP_F_upzero_BB_preheader1_22;
LEGUP_F_upzero_BB_preheader1_22:
		next_state = LEGUP_F_upzero_BB_preheader1_23;
LEGUP_F_upzero_BB_preheader1_23:
		next_state = LEGUP_F_upzero_BB_preheader1_24;
LEGUP_F_upzero_BB_preheader1_24:
		next_state = LEGUP_F_upzero_BB_preheader1_25;
LEGUP_F_upzero_BB_preheader1_25:
		next_state = LEGUP_F_upzero_BB_preheader1_26;
LEGUP_F_upzero_BB_preheader1_26:
		next_state = LEGUP_F_upzero_BB__89_34;
LEGUP_F_upzero_BB_preheader1_3:
		next_state = LEGUP_F_upzero_BB_preheader1_4;
LEGUP_F_upzero_BB_preheader1_4:
		next_state = LEGUP_F_upzero_BB_preheader1_5;
LEGUP_F_upzero_BB_preheader1_5:
		next_state = LEGUP_F_upzero_BB_preheader1_6;
LEGUP_F_upzero_BB_preheader1_6:
		next_state = LEGUP_F_upzero_BB_preheader1_7;
LEGUP_F_upzero_BB_preheader1_7:
		next_state = LEGUP_F_upzero_BB_preheader1_8;
LEGUP_F_upzero_BB_preheader1_8:
		next_state = LEGUP_F_upzero_BB_preheader1_9;
LEGUP_F_upzero_BB_preheader1_9:
		next_state = LEGUP_F_upzero_BB_preheader1_10;
LEGUP_F_upzero_BB_preheader_27:
		next_state = LEGUP_F_upzero_BB_preheader_28;
LEGUP_F_upzero_BB_preheader_28:
		next_state = LEGUP_F_upzero_BB_preheader_29;
LEGUP_F_upzero_BB_preheader_29:
		next_state = LEGUP_F_upzero_BB_preheader_30;
LEGUP_F_upzero_BB_preheader_30:
		next_state = LEGUP_F_upzero_BB_preheader_31;
LEGUP_F_upzero_BB_preheader_31:
		next_state = LEGUP_F_upzero_BB_preheader_32;
LEGUP_F_upzero_BB_preheader_32:
		next_state = LEGUP_F_upzero_BB_preheader_33;
LEGUP_F_upzero_BB_preheader_33:
		next_state = LEGUP_F_upzero_BB__89_34;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* upzero: %0*/
	/*   %1 = icmp eq i32 %dlt, 0*/
		upzero_0_1 = (arg_dlt == 32'd0);
end
always @(posedge clk) begin
	/* upzero: %0*/
	/*   %1 = icmp eq i32 %dlt, 0*/
	if ((cur_state == LEGUP_F_upzero_BB__0_1)) begin
		upzero_0_1_reg <= upzero_0_1;
		if (start == 1'b0 && ^(upzero_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
		upzero_preheader1_2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_4)) begin
		upzero_preheader1_2_reg <= upzero_preheader1_2;
		if (start == 1'b0 && ^(upzero_preheader1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_2_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_3 = upzero_preheader1_3_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %3 = mul nsw i32 %2, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_3_reg <= upzero_preheader1_3;
		if (start == 1'b0 && ^(upzero_preheader1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_3_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %3 = mul nsw i32 %2, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_3_reg <= upzero_preheader1_3;
		if (start == 1'b0 && ^(upzero_preheader1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %4 = ashr i32 %3, 31*/
		upzero_preheader1_4 = ($signed(upzero_preheader1_3) >>> 32'd31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %4 = ashr i32 %3, 31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_4_reg <= upzero_preheader1_4;
		if (start == 1'b0 && ^(upzero_preheader1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %5 = and i32 %4, -256*/
		upzero_preheader1_5 = (upzero_preheader1_4 & -32'd256);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %5 = and i32 %4, -256*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_5_reg <= upzero_preheader1_5;
		if (start == 1'b0 && ^(upzero_preheader1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %6 = or i32 %5, 128*/
		upzero_preheader1_6 = (upzero_preheader1_5 | 32'd128);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %6 = or i32 %5, 128*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_6_reg <= upzero_preheader1_6;
		if (start == 1'b0 && ^(upzero_preheader1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
		upzero_preheader1_7 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_4)) begin
		upzero_preheader1_7_reg <= upzero_preheader1_7;
		if (start == 1'b0 && ^(upzero_preheader1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_7_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_8 = upzero_preheader1_8_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %8 = mul nsw i32 %7, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_8_reg <= upzero_preheader1_8;
		if (start == 1'b0 && ^(upzero_preheader1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_8_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %8 = mul nsw i32 %7, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_8_reg <= upzero_preheader1_8;
		if (start == 1'b0 && ^(upzero_preheader1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %9 = ashr i32 %8, 8*/
		upzero_preheader1_9 = ($signed(upzero_preheader1_8) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %9 = ashr i32 %8, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_9_reg <= upzero_preheader1_9;
		if (start == 1'b0 && ^(upzero_preheader1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_9_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
		upzero_preheader1_10 = (upzero_preheader1_6 + upzero_preheader1_9);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %10 = add nsw i32 %6, %9*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		upzero_preheader1_10_reg <= upzero_preheader1_10;
		if (start == 1'b0 && ^(upzero_preheader1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %11 = getelementptr inbounds i32* %dlti, i32 1*/
		upzero_preheader1_11 = (arg_dlti + (4 * 32'd1));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %11 = getelementptr inbounds i32* %dlti, i32 1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_11_reg <= upzero_preheader1_11;
		if (start == 1'b0 && ^(upzero_preheader1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
		upzero_preheader1_12 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_8)) begin
		upzero_preheader1_12_reg <= upzero_preheader1_12;
		if (start == 1'b0 && ^(upzero_preheader1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_12_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_13 = upzero_preheader1_13_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %13 = mul nsw i32 %12, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_13_reg <= upzero_preheader1_13;
		if (start == 1'b0 && ^(upzero_preheader1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_13_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %13 = mul nsw i32 %12, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_13_reg <= upzero_preheader1_13;
		if (start == 1'b0 && ^(upzero_preheader1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_13_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %14 = ashr i32 %13, 31*/
		upzero_preheader1_14 = ($signed(upzero_preheader1_13) >>> 32'd31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %14 = ashr i32 %13, 31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_14_reg <= upzero_preheader1_14;
		if (start == 1'b0 && ^(upzero_preheader1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_14_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %15 = and i32 %14, -256*/
		upzero_preheader1_15 = (upzero_preheader1_14 & -32'd256);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %15 = and i32 %14, -256*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_15_reg <= upzero_preheader1_15;
		if (start == 1'b0 && ^(upzero_preheader1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_15_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %16 = or i32 %15, 128*/
		upzero_preheader1_16 = (upzero_preheader1_15 | 32'd128);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %16 = or i32 %15, 128*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_16_reg <= upzero_preheader1_16;
		if (start == 1'b0 && ^(upzero_preheader1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_16_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %17 = getelementptr inbounds i32* %bli, i32 1*/
		upzero_preheader1_17 = (arg_bli + (4 * 32'd1));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %17 = getelementptr inbounds i32* %bli, i32 1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_17_reg <= upzero_preheader1_17;
		if (start == 1'b0 && ^(upzero_preheader1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_17_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
		upzero_preheader1_18 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_8)) begin
		upzero_preheader1_18_reg <= upzero_preheader1_18;
		if (start == 1'b0 && ^(upzero_preheader1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_18_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_19 = upzero_preheader1_19_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %19 = mul nsw i32 %18, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_19_reg <= upzero_preheader1_19;
		if (start == 1'b0 && ^(upzero_preheader1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_19_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %19 = mul nsw i32 %18, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_19_reg <= upzero_preheader1_19;
		if (start == 1'b0 && ^(upzero_preheader1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_19_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %20 = ashr i32 %19, 8*/
		upzero_preheader1_20 = ($signed(upzero_preheader1_19) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %20 = ashr i32 %19, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_20_reg <= upzero_preheader1_20;
		if (start == 1'b0 && ^(upzero_preheader1_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_20_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
		upzero_preheader1_21 = (upzero_preheader1_16 + upzero_preheader1_20);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %21 = add nsw i32 %16, %20*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		upzero_preheader1_21_reg <= upzero_preheader1_21;
		if (start == 1'b0 && ^(upzero_preheader1_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_21_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %22 = getelementptr inbounds i32* %dlti, i32 2*/
		upzero_preheader1_22 = (arg_dlti + (4 * 32'd2));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %22 = getelementptr inbounds i32* %dlti, i32 2*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_22_reg <= upzero_preheader1_22;
		if (start == 1'b0 && ^(upzero_preheader1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_22_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
		upzero_preheader1_23 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_12)) begin
		upzero_preheader1_23_reg <= upzero_preheader1_23;
		if (start == 1'b0 && ^(upzero_preheader1_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_23_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_24 = upzero_preheader1_24_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %24 = mul nsw i32 %23, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_24_reg <= upzero_preheader1_24;
		if (start == 1'b0 && ^(upzero_preheader1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_24_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %24 = mul nsw i32 %23, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_24_reg <= upzero_preheader1_24;
		if (start == 1'b0 && ^(upzero_preheader1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_24_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %25 = ashr i32 %24, 31*/
		upzero_preheader1_25 = ($signed(upzero_preheader1_24) >>> 32'd31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %25 = ashr i32 %24, 31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_25_reg <= upzero_preheader1_25;
		if (start == 1'b0 && ^(upzero_preheader1_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_25_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %26 = and i32 %25, -256*/
		upzero_preheader1_26 = (upzero_preheader1_25 & -32'd256);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %26 = and i32 %25, -256*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_26_reg <= upzero_preheader1_26;
		if (start == 1'b0 && ^(upzero_preheader1_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_26_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %27 = or i32 %26, 128*/
		upzero_preheader1_27 = (upzero_preheader1_26 | 32'd128);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %27 = or i32 %26, 128*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_27_reg <= upzero_preheader1_27;
		if (start == 1'b0 && ^(upzero_preheader1_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_27_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %28 = getelementptr inbounds i32* %bli, i32 2*/
		upzero_preheader1_28 = (arg_bli + (4 * 32'd2));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %28 = getelementptr inbounds i32* %bli, i32 2*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_28_reg <= upzero_preheader1_28;
		if (start == 1'b0 && ^(upzero_preheader1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_28_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
		upzero_preheader1_29 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_12)) begin
		upzero_preheader1_29_reg <= upzero_preheader1_29;
		if (start == 1'b0 && ^(upzero_preheader1_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_29_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_30 = upzero_preheader1_30_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %30 = mul nsw i32 %29, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_30_reg <= upzero_preheader1_30;
		if (start == 1'b0 && ^(upzero_preheader1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_30_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %30 = mul nsw i32 %29, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_30_reg <= upzero_preheader1_30;
		if (start == 1'b0 && ^(upzero_preheader1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_30_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %31 = ashr i32 %30, 8*/
		upzero_preheader1_31 = ($signed(upzero_preheader1_30) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %31 = ashr i32 %30, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_31_reg <= upzero_preheader1_31;
		if (start == 1'b0 && ^(upzero_preheader1_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_31_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
		upzero_preheader1_32 = (upzero_preheader1_27 + upzero_preheader1_31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %32 = add nsw i32 %27, %31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		upzero_preheader1_32_reg <= upzero_preheader1_32;
		if (start == 1'b0 && ^(upzero_preheader1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_32_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %33 = getelementptr inbounds i32* %dlti, i32 3*/
		upzero_preheader1_33 = (arg_dlti + (4 * 32'd3));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %33 = getelementptr inbounds i32* %dlti, i32 3*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_33_reg <= upzero_preheader1_33;
		if (start == 1'b0 && ^(upzero_preheader1_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_33_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
		upzero_preheader1_34 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_16)) begin
		upzero_preheader1_34_reg <= upzero_preheader1_34;
		if (start == 1'b0 && ^(upzero_preheader1_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_34_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_35 = upzero_preheader1_35_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %35 = mul nsw i32 %34, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_35_reg <= upzero_preheader1_35;
		if (start == 1'b0 && ^(upzero_preheader1_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_35_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %35 = mul nsw i32 %34, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_35_reg <= upzero_preheader1_35;
		if (start == 1'b0 && ^(upzero_preheader1_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_35_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %36 = ashr i32 %35, 31*/
		upzero_preheader1_36 = ($signed(upzero_preheader1_35) >>> 32'd31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %36 = ashr i32 %35, 31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_36_reg <= upzero_preheader1_36;
		if (start == 1'b0 && ^(upzero_preheader1_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_36_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %37 = and i32 %36, -256*/
		upzero_preheader1_37 = (upzero_preheader1_36 & -32'd256);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %37 = and i32 %36, -256*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_37_reg <= upzero_preheader1_37;
		if (start == 1'b0 && ^(upzero_preheader1_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_37_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %38 = or i32 %37, 128*/
		upzero_preheader1_38 = (upzero_preheader1_37 | 32'd128);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %38 = or i32 %37, 128*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_38_reg <= upzero_preheader1_38;
		if (start == 1'b0 && ^(upzero_preheader1_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_38_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %39 = getelementptr inbounds i32* %bli, i32 3*/
		upzero_preheader1_39 = (arg_bli + (4 * 32'd3));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %39 = getelementptr inbounds i32* %bli, i32 3*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_39_reg <= upzero_preheader1_39;
		if (start == 1'b0 && ^(upzero_preheader1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_39_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
		upzero_preheader1_40 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_16)) begin
		upzero_preheader1_40_reg <= upzero_preheader1_40;
		if (start == 1'b0 && ^(upzero_preheader1_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_40_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_41 = upzero_preheader1_41_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %41 = mul nsw i32 %40, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_41_reg <= upzero_preheader1_41;
		if (start == 1'b0 && ^(upzero_preheader1_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_41_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %41 = mul nsw i32 %40, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_41_reg <= upzero_preheader1_41;
		if (start == 1'b0 && ^(upzero_preheader1_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_41_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %42 = ashr i32 %41, 8*/
		upzero_preheader1_42 = ($signed(upzero_preheader1_41) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %42 = ashr i32 %41, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_42_reg <= upzero_preheader1_42;
		if (start == 1'b0 && ^(upzero_preheader1_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_42_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
		upzero_preheader1_43 = (upzero_preheader1_38 + upzero_preheader1_42);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %43 = add nsw i32 %38, %42*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		upzero_preheader1_43_reg <= upzero_preheader1_43;
		if (start == 1'b0 && ^(upzero_preheader1_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_43_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %44 = getelementptr inbounds i32* %dlti, i32 4*/
		upzero_preheader1_44 = (arg_dlti + (4 * 32'd4));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %44 = getelementptr inbounds i32* %dlti, i32 4*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_44_reg <= upzero_preheader1_44;
		if (start == 1'b0 && ^(upzero_preheader1_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_44_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
		upzero_preheader1_45 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_20)) begin
		upzero_preheader1_45_reg <= upzero_preheader1_45;
		if (start == 1'b0 && ^(upzero_preheader1_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_45_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_46 = upzero_preheader1_46_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %46 = mul nsw i32 %45, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_46_reg <= upzero_preheader1_46;
		if (start == 1'b0 && ^(upzero_preheader1_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_46_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %46 = mul nsw i32 %45, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_46_reg <= upzero_preheader1_46;
		if (start == 1'b0 && ^(upzero_preheader1_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_46_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %47 = ashr i32 %46, 31*/
		upzero_preheader1_47 = ($signed(upzero_preheader1_46) >>> 32'd31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %47 = ashr i32 %46, 31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_47_reg <= upzero_preheader1_47;
		if (start == 1'b0 && ^(upzero_preheader1_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_47_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %48 = and i32 %47, -256*/
		upzero_preheader1_48 = (upzero_preheader1_47 & -32'd256);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %48 = and i32 %47, -256*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_48_reg <= upzero_preheader1_48;
		if (start == 1'b0 && ^(upzero_preheader1_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_48_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %49 = or i32 %48, 128*/
		upzero_preheader1_49 = (upzero_preheader1_48 | 32'd128);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %49 = or i32 %48, 128*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_49_reg <= upzero_preheader1_49;
		if (start == 1'b0 && ^(upzero_preheader1_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_49_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %50 = getelementptr inbounds i32* %bli, i32 4*/
		upzero_preheader1_50 = (arg_bli + (4 * 32'd4));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %50 = getelementptr inbounds i32* %bli, i32 4*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_50_reg <= upzero_preheader1_50;
		if (start == 1'b0 && ^(upzero_preheader1_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_50_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
		upzero_preheader1_51 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_20)) begin
		upzero_preheader1_51_reg <= upzero_preheader1_51;
		if (start == 1'b0 && ^(upzero_preheader1_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_51_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_52 = upzero_preheader1_52_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %52 = mul nsw i32 %51, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_52_reg <= upzero_preheader1_52;
		if (start == 1'b0 && ^(upzero_preheader1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_52_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %52 = mul nsw i32 %51, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_52_reg <= upzero_preheader1_52;
		if (start == 1'b0 && ^(upzero_preheader1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_52_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %53 = ashr i32 %52, 8*/
		upzero_preheader1_53 = ($signed(upzero_preheader1_52) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %53 = ashr i32 %52, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_53_reg <= upzero_preheader1_53;
		if (start == 1'b0 && ^(upzero_preheader1_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_53_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
		upzero_preheader1_54 = (upzero_preheader1_49 + upzero_preheader1_53);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %54 = add nsw i32 %49, %53*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		upzero_preheader1_54_reg <= upzero_preheader1_54;
		if (start == 1'b0 && ^(upzero_preheader1_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_54_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %55 = getelementptr inbounds i32* %dlti, i32 5*/
		upzero_preheader1_55 = (arg_dlti + (4 * 32'd5));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %55 = getelementptr inbounds i32* %dlti, i32 5*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_55_reg <= upzero_preheader1_55;
		if (start == 1'b0 && ^(upzero_preheader1_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_55_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
		upzero_preheader1_56 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_24)) begin
		upzero_preheader1_56_reg <= upzero_preheader1_56;
		if (start == 1'b0 && ^(upzero_preheader1_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_56_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_57 = upzero_preheader1_57_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %57 = mul nsw i32 %56, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_57_reg <= upzero_preheader1_57;
		if (start == 1'b0 && ^(upzero_preheader1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_57_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %57 = mul nsw i32 %56, %dlt*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_57_reg <= upzero_preheader1_57;
		if (start == 1'b0 && ^(upzero_preheader1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_57_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %58 = ashr i32 %57, 31*/
		upzero_preheader1_58 = ($signed(upzero_preheader1_57) >>> 32'd31);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %58 = ashr i32 %57, 31*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_58_reg <= upzero_preheader1_58;
		if (start == 1'b0 && ^(upzero_preheader1_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_58_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %59 = and i32 %58, -256*/
		upzero_preheader1_59 = (upzero_preheader1_58 & -32'd256);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %59 = and i32 %58, -256*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_59_reg <= upzero_preheader1_59;
		if (start == 1'b0 && ^(upzero_preheader1_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_59_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %60 = or i32 %59, 128*/
		upzero_preheader1_60 = (upzero_preheader1_59 | 32'd128);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %60 = or i32 %59, 128*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_60_reg <= upzero_preheader1_60;
		if (start == 1'b0 && ^(upzero_preheader1_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_60_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %61 = getelementptr inbounds i32* %bli, i32 5*/
		upzero_preheader1_61 = (arg_bli + (4 * 32'd5));
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %61 = getelementptr inbounds i32* %bli, i32 5*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		upzero_preheader1_61_reg <= upzero_preheader1_61;
		if (start == 1'b0 && ^(upzero_preheader1_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_61_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
		upzero_preheader1_62 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_24)) begin
		upzero_preheader1_62_reg <= upzero_preheader1_62;
		if (start == 1'b0 && ^(upzero_preheader1_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_62_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader1_63 = upzero_preheader1_63_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %63 = mul nsw i32 %62, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_63_reg <= upzero_preheader1_63;
		if (start == 1'b0 && ^(upzero_preheader1_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_63_reg"); $finish; end
	end
	/* upzero: %.preheader1*/
	/*   %63 = mul nsw i32 %62, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_63_reg <= upzero_preheader1_63;
		if (start == 1'b0 && ^(upzero_preheader1_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_63_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %64 = ashr i32 %63, 8*/
		upzero_preheader1_64 = ($signed(upzero_preheader1_63) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %64 = ashr i32 %63, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_64_reg <= upzero_preheader1_64;
		if (start == 1'b0 && ^(upzero_preheader1_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_64_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
		upzero_preheader1_65 = (upzero_preheader1_60 + upzero_preheader1_64);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %65 = add nsw i32 %60, %64*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		upzero_preheader1_65_reg <= upzero_preheader1_65;
		if (start == 1'b0 && ^(upzero_preheader1_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader1_65_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
		upzero_preheader_66 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		upzero_preheader_66_reg <= upzero_preheader_66;
		if (start == 1'b0 && ^(upzero_preheader_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_66_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader_67 = upzero_preheader_67_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %67 = mul nsw i32 %66, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_67_reg <= upzero_preheader_67;
		if (start == 1'b0 && ^(upzero_preheader_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_67_reg"); $finish; end
	end
	/* upzero: %.preheader*/
	/*   %67 = mul nsw i32 %66, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_67_reg <= upzero_preheader_67;
		if (start == 1'b0 && ^(upzero_preheader_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_67_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %68 = ashr i32 %67, 8*/
		upzero_preheader_68 = ($signed(upzero_preheader_67) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %68 = ashr i32 %67, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_68_reg <= upzero_preheader_68;
		if (start == 1'b0 && ^(upzero_preheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_68_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %69 = getelementptr inbounds i32* %bli, i32 1*/
		upzero_preheader_69 = (arg_bli + (4 * 32'd1));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %69 = getelementptr inbounds i32* %bli, i32 1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_69_reg <= upzero_preheader_69;
		if (start == 1'b0 && ^(upzero_preheader_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_69_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
		upzero_preheader_70 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		upzero_preheader_70_reg <= upzero_preheader_70;
		if (start == 1'b0 && ^(upzero_preheader_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_70_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader_71 = upzero_preheader_71_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %71 = mul nsw i32 %70, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_71_reg <= upzero_preheader_71;
		if (start == 1'b0 && ^(upzero_preheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_71_reg"); $finish; end
	end
	/* upzero: %.preheader*/
	/*   %71 = mul nsw i32 %70, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_71_reg <= upzero_preheader_71;
		if (start == 1'b0 && ^(upzero_preheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_71_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %72 = ashr i32 %71, 8*/
		upzero_preheader_72 = ($signed(upzero_preheader_71) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %72 = ashr i32 %71, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_72_reg <= upzero_preheader_72;
		if (start == 1'b0 && ^(upzero_preheader_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_72_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %73 = getelementptr inbounds i32* %bli, i32 2*/
		upzero_preheader_73 = (arg_bli + (4 * 32'd2));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %73 = getelementptr inbounds i32* %bli, i32 2*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_73_reg <= upzero_preheader_73;
		if (start == 1'b0 && ^(upzero_preheader_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_73_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
		upzero_preheader_74 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_74_reg <= upzero_preheader_74;
		if (start == 1'b0 && ^(upzero_preheader_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_74_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader_75 = upzero_preheader_75_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %75 = mul nsw i32 %74, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_75_reg <= upzero_preheader_75;
		if (start == 1'b0 && ^(upzero_preheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_75_reg"); $finish; end
	end
	/* upzero: %.preheader*/
	/*   %75 = mul nsw i32 %74, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_75_reg <= upzero_preheader_75;
		if (start == 1'b0 && ^(upzero_preheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_75_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %76 = ashr i32 %75, 8*/
		upzero_preheader_76 = ($signed(upzero_preheader_75) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %76 = ashr i32 %75, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_76_reg <= upzero_preheader_76;
		if (start == 1'b0 && ^(upzero_preheader_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_76_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %77 = getelementptr inbounds i32* %bli, i32 3*/
		upzero_preheader_77 = (arg_bli + (4 * 32'd3));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %77 = getelementptr inbounds i32* %bli, i32 3*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_77_reg <= upzero_preheader_77;
		if (start == 1'b0 && ^(upzero_preheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_77_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
		upzero_preheader_78 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		upzero_preheader_78_reg <= upzero_preheader_78;
		if (start == 1'b0 && ^(upzero_preheader_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_78_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader_79 = upzero_preheader_79_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %79 = mul nsw i32 %78, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_79_reg <= upzero_preheader_79;
		if (start == 1'b0 && ^(upzero_preheader_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_79_reg"); $finish; end
	end
	/* upzero: %.preheader*/
	/*   %79 = mul nsw i32 %78, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_79_reg <= upzero_preheader_79;
		if (start == 1'b0 && ^(upzero_preheader_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_79_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %80 = ashr i32 %79, 8*/
		upzero_preheader_80 = ($signed(upzero_preheader_79) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %80 = ashr i32 %79, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_80_reg <= upzero_preheader_80;
		if (start == 1'b0 && ^(upzero_preheader_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_80_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %81 = getelementptr inbounds i32* %bli, i32 4*/
		upzero_preheader_81 = (arg_bli + (4 * 32'd4));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %81 = getelementptr inbounds i32* %bli, i32 4*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_81_reg <= upzero_preheader_81;
		if (start == 1'b0 && ^(upzero_preheader_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_81_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
		upzero_preheader_82 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_82_reg <= upzero_preheader_82;
		if (start == 1'b0 && ^(upzero_preheader_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_82_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader_83 = upzero_preheader_83_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %83 = mul nsw i32 %82, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		upzero_preheader_83_reg <= upzero_preheader_83;
		if (start == 1'b0 && ^(upzero_preheader_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_83_reg"); $finish; end
	end
	/* upzero: %.preheader*/
	/*   %83 = mul nsw i32 %82, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		upzero_preheader_83_reg <= upzero_preheader_83;
		if (start == 1'b0 && ^(upzero_preheader_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_83_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %84 = ashr i32 %83, 8*/
		upzero_preheader_84 = ($signed(upzero_preheader_83) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %84 = ashr i32 %83, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		upzero_preheader_84_reg <= upzero_preheader_84;
		if (start == 1'b0 && ^(upzero_preheader_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_84_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %85 = getelementptr inbounds i32* %bli, i32 5*/
		upzero_preheader_85 = (arg_bli + (4 * 32'd5));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %85 = getelementptr inbounds i32* %bli, i32 5*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_85_reg <= upzero_preheader_85;
		if (start == 1'b0 && ^(upzero_preheader_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_85_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
		upzero_preheader_86 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		upzero_preheader_86_reg <= upzero_preheader_86;
		if (start == 1'b0 && ^(upzero_preheader_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_86_reg"); $finish; end
	end
end
always @(*) begin
	upzero_preheader_87 = upzero_preheader_87_stage0_reg;
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %87 = mul nsw i32 %86, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		upzero_preheader_87_reg <= upzero_preheader_87;
		if (start == 1'b0 && ^(upzero_preheader_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_87_reg"); $finish; end
	end
	/* upzero: %.preheader*/
	/*   %87 = mul nsw i32 %86, 255*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		upzero_preheader_87_reg <= upzero_preheader_87;
		if (start == 1'b0 && ^(upzero_preheader_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_87_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %88 = ashr i32 %87, 8*/
		upzero_preheader_88 = ($signed(upzero_preheader_87) >>> 32'd8);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %88 = ashr i32 %87, 8*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		upzero_preheader_88_reg <= upzero_preheader_88;
		if (start == 1'b0 && ^(upzero_preheader_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_88_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre = getelementptr inbounds i32* %dlti, i32 4*/
		upzero_preheader_pre = (arg_dlti + (4 * 32'd4));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %.pre = getelementptr inbounds i32* %dlti, i32 4*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_pre_reg <= upzero_preheader_pre;
		if (start == 1'b0 && ^(upzero_preheader_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre7 = getelementptr inbounds i32* %dlti, i32 5*/
		upzero_preheader_pre7 = (arg_dlti + (4 * 32'd5));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %.pre7 = getelementptr inbounds i32* %dlti, i32 5*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_pre7_reg <= upzero_preheader_pre7;
		if (start == 1'b0 && ^(upzero_preheader_pre7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre7_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre9 = getelementptr inbounds i32* %dlti, i32 3*/
		upzero_preheader_pre9 = (arg_dlti + (4 * 32'd3));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %.pre9 = getelementptr inbounds i32* %dlti, i32 3*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_pre9_reg <= upzero_preheader_pre9;
		if (start == 1'b0 && ^(upzero_preheader_pre9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre9_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre11 = getelementptr inbounds i32* %dlti, i32 2*/
		upzero_preheader_pre11 = (arg_dlti + (4 * 32'd2));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %.pre11 = getelementptr inbounds i32* %dlti, i32 2*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_pre11_reg <= upzero_preheader_pre11;
		if (start == 1'b0 && ^(upzero_preheader_pre11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre11_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %.preheader*/
	/*   %.pre13 = getelementptr inbounds i32* %dlti, i32 1*/
		upzero_preheader_pre13 = (arg_dlti + (4 * 32'd1));
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %.pre13 = getelementptr inbounds i32* %dlti, i32 1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		upzero_preheader_pre13_reg <= upzero_preheader_pre13;
		if (start == 1'b0 && ^(upzero_preheader_pre13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_preheader_pre13_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14 = upzero_preheader1_11_reg;
	end
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi14 = upzero_preheader_pre13_reg;
	end
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_reg <= upzero_89_prephi14;
		if (start == 1'b0 && ^(upzero_89_prephi14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi14_reg"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi14 = phi i32* [ %11, %.preheader1 ], [ %.pre13, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi14_reg <= upzero_89_prephi14;
		if (start == 1'b0 && ^(upzero_89_prephi14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi14_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12 = upzero_preheader1_22_reg;
	end
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi12 = upzero_preheader_pre11_reg;
	end
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_reg <= upzero_89_prephi12;
		if (start == 1'b0 && ^(upzero_89_prephi12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi12_reg"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi12 = phi i32* [ %22, %.preheader1 ], [ %.pre11, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi12_reg <= upzero_89_prephi12;
		if (start == 1'b0 && ^(upzero_89_prephi12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi12_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10 = upzero_preheader1_33_reg;
	end
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi10 = upzero_preheader_pre9_reg;
	end
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_reg <= upzero_89_prephi10;
		if (start == 1'b0 && ^(upzero_89_prephi10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi10_reg"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi10 = phi i32* [ %33, %.preheader1 ], [ %.pre9, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi10_reg <= upzero_89_prephi10;
		if (start == 1'b0 && ^(upzero_89_prephi10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi10_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8 = upzero_preheader1_55_reg;
	end
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi8 = upzero_preheader_pre7_reg;
	end
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_reg <= upzero_89_prephi8;
		if (start == 1'b0 && ^(upzero_89_prephi8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi8_reg"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi8 = phi i32* [ %55, %.preheader1 ], [ %.pre7, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi8_reg <= upzero_89_prephi8;
		if (start == 1'b0 && ^(upzero_89_prephi8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi8_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi = upzero_preheader1_44_reg;
	end
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	else /* if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		upzero_89_prephi = upzero_preheader_pre_reg;
	end
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader1_26) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_reg <= upzero_89_prephi;
		if (start == 1'b0 && ^(upzero_89_prephi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi_reg"); $finish; end
	end
	/* upzero: %89*/
	/*   %.pre-phi = phi i32* [ %44, %.preheader1 ], [ %.pre, %.preheader ]*/
	if (((cur_state == LEGUP_F_upzero_BB_preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		upzero_89_prephi_reg <= upzero_89_prephi;
		if (start == 1'b0 && ^(upzero_89_prephi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_prephi_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
		upzero_89_90 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		upzero_89_90_reg <= upzero_89_90;
		if (start == 1'b0 && ^(upzero_89_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_90_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
		upzero_89_91 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		upzero_89_91_reg <= upzero_89_91;
		if (start == 1'b0 && ^(upzero_89_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_91_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
		upzero_89_92 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		upzero_89_92_reg <= upzero_89_92;
		if (start == 1'b0 && ^(upzero_89_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_92_reg"); $finish; end
	end
end
always @(*) begin
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
		upzero_89_93 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		upzero_89_93_reg <= upzero_89_93;
		if (start == 1'b0 && ^(upzero_89_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_89_93_reg"); $finish; end
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_3_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %3 = mul nsw i32 %2, %dlt*/
	if ((lpm_mult_upzero_preheader1_3_en == 1'd1)) begin
		upzero_preheader1_3_stage0_reg <= (upzero_preheader1_2 * arg_dlt);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_8_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %8 = mul nsw i32 %7, 255*/
	if ((lpm_mult_upzero_preheader1_8_en == 1'd1)) begin
		upzero_preheader1_8_stage0_reg <= (upzero_preheader1_7 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_13_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %13 = mul nsw i32 %12, %dlt*/
	if ((lpm_mult_upzero_preheader1_13_en == 1'd1)) begin
		upzero_preheader1_13_stage0_reg <= (upzero_preheader1_12 * arg_dlt);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_19_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %19 = mul nsw i32 %18, 255*/
	if ((lpm_mult_upzero_preheader1_19_en == 1'd1)) begin
		upzero_preheader1_19_stage0_reg <= (upzero_preheader1_18 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_24_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %24 = mul nsw i32 %23, %dlt*/
	if ((lpm_mult_upzero_preheader1_24_en == 1'd1)) begin
		upzero_preheader1_24_stage0_reg <= (upzero_preheader1_23 * arg_dlt);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_30_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %30 = mul nsw i32 %29, 255*/
	if ((lpm_mult_upzero_preheader1_30_en == 1'd1)) begin
		upzero_preheader1_30_stage0_reg <= (upzero_preheader1_29 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_35_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %35 = mul nsw i32 %34, %dlt*/
	if ((lpm_mult_upzero_preheader1_35_en == 1'd1)) begin
		upzero_preheader1_35_stage0_reg <= (upzero_preheader1_34 * arg_dlt);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_41_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %41 = mul nsw i32 %40, 255*/
	if ((lpm_mult_upzero_preheader1_41_en == 1'd1)) begin
		upzero_preheader1_41_stage0_reg <= (upzero_preheader1_40 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_46_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %46 = mul nsw i32 %45, %dlt*/
	if ((lpm_mult_upzero_preheader1_46_en == 1'd1)) begin
		upzero_preheader1_46_stage0_reg <= (upzero_preheader1_45 * arg_dlt);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_52_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %52 = mul nsw i32 %51, 255*/
	if ((lpm_mult_upzero_preheader1_52_en == 1'd1)) begin
		upzero_preheader1_52_stage0_reg <= (upzero_preheader1_51 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_57_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %57 = mul nsw i32 %56, %dlt*/
	if ((lpm_mult_upzero_preheader1_57_en == 1'd1)) begin
		upzero_preheader1_57_stage0_reg <= (upzero_preheader1_56 * arg_dlt);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader1_63_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader1*/
	/*   %63 = mul nsw i32 %62, 255*/
	if ((lpm_mult_upzero_preheader1_63_en == 1'd1)) begin
		upzero_preheader1_63_stage0_reg <= (upzero_preheader1_62 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader_67_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %67 = mul nsw i32 %66, 255*/
	if ((lpm_mult_upzero_preheader_67_en == 1'd1)) begin
		upzero_preheader_67_stage0_reg <= (upzero_preheader_66 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader_71_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %71 = mul nsw i32 %70, 255*/
	if ((lpm_mult_upzero_preheader_71_en == 1'd1)) begin
		upzero_preheader_71_stage0_reg <= (upzero_preheader_70 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader_75_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %75 = mul nsw i32 %74, 255*/
	if ((lpm_mult_upzero_preheader_75_en == 1'd1)) begin
		upzero_preheader_75_stage0_reg <= (upzero_preheader_74 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader_79_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %79 = mul nsw i32 %78, 255*/
	if ((lpm_mult_upzero_preheader_79_en == 1'd1)) begin
		upzero_preheader_79_stage0_reg <= (upzero_preheader_78 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader_83_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %83 = mul nsw i32 %82, 255*/
	if ((lpm_mult_upzero_preheader_83_en == 1'd1)) begin
		upzero_preheader_83_stage0_reg <= (upzero_preheader_82 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_upzero_preheader_87_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* upzero: %.preheader*/
	/*   %87 = mul nsw i32 %86, 255*/
	if ((lpm_mult_upzero_preheader_87_en == 1'd1)) begin
		upzero_preheader_87_stage0_reg <= (upzero_preheader_86 * 32'd255);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* upzero: %89*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_upzero_BB__89_39)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_38)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_address_a = arg_dlti;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_address_a = arg_bli;
	end
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_address_a = upzero_preheader1_11_reg;
	end
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_address_a = upzero_preheader1_22_reg;
	end
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_address_a = upzero_preheader1_33_reg;
	end
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_address_a = upzero_preheader1_44_reg;
	end
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_address_a = upzero_preheader1_55_reg;
	end
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_address_a = arg_bli;
	end
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_address_a = upzero_preheader_73_reg;
	end
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_address_a = upzero_preheader_81_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_address_a = arg_bli;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_address_a = upzero_preheader_73_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_address_a = upzero_preheader_81_reg;
	end
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_address_a = upzero_89_prephi_reg;
	end
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_address_a = upzero_89_prephi12_reg;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_address_a = upzero_89_prephi_reg;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_address_a = upzero_89_prephi14_reg;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_38)) begin
		memory_controller_address_a = arg_dlti;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_38)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_in_a = upzero_preheader1_10;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_in_a = upzero_preheader_68;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_in_a = upzero_preheader_76;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_in_a = upzero_preheader_84;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_in_a = upzero_89_91;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_in_a = upzero_89_93;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_38)) begin
		memory_controller_in_a = arg_dlt;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %2 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %10, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %12 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %23 = load i32* %22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %34 = load i32* %33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %56 = load i32* %55, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %66 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %74 = load i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %68, i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %76, i32* %73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %84, i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   %90 = load i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   %92 = load i32* %.pre-phi12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %91, i32* %.pre-phi, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %93, i32* %.pre-phi14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %dlt, i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_38)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_address_b = arg_bli;
	end
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_address_b = upzero_preheader1_17_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		memory_controller_address_b = upzero_preheader1_17_reg;
	end
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_address_b = upzero_preheader1_28_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_address_b = upzero_preheader1_28_reg;
	end
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_address_b = upzero_preheader1_39_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_address_b = upzero_preheader1_39_reg;
	end
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_address_b = upzero_preheader1_50_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		memory_controller_address_b = upzero_preheader1_50_reg;
	end
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_address_b = upzero_preheader1_61_reg;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		memory_controller_address_b = upzero_preheader1_61_reg;
	end
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_address_b = upzero_preheader_69;
	end
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_address_b = upzero_preheader_77_reg;
	end
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_address_b = upzero_preheader_85_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_address_b = upzero_preheader_69_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_address_b = upzero_preheader_77_reg;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_address_b = upzero_preheader_85_reg;
	end
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_address_b = upzero_89_prephi10_reg;
	end
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_address_b = arg_dlti;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_address_b = upzero_89_prephi8_reg;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_address_b = upzero_89_prephi10_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		memory_controller_in_b = upzero_preheader1_21;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_in_b = upzero_preheader1_32;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_in_b = upzero_preheader1_43;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		memory_controller_in_b = upzero_preheader1_54;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		memory_controller_in_b = upzero_preheader1_65;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_in_b = upzero_preheader_72;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_in_b = upzero_preheader_80;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_in_b = upzero_preheader_88;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_in_b = upzero_89_90;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_in_b = upzero_89_92;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* upzero: %.preheader1*/
	/*   %7 = load i32* %bli, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %18 = load i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %21, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %29 = load i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %32, i32* %28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %43, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %51 = load i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %54, i32* %50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader1*/
	/*   store i32 %65, i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader1_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %78 = load i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   %86 = load i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %72, i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %80, i32* %77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %.preheader*/
	/*   store i32 %88, i32* %85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB_preheader_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %89*/
	/*   %91 = load i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %89*/
	/*   %93 = load i32* %dlti, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %90, i32* %.pre-phi8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_36)) begin
		memory_controller_size_b = 2'd2;
	end
	/* upzero: %89*/
	/*   store i32 %92, i32* %.pre-phi10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_upzero_BB__89_37)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module encode
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_xin1,
	arg_xin2
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_encode_BB__0_1 = 7'd1;
parameter [6:0] LEGUP_F_encode_BB__0_2 = 7'd2;
parameter [6:0] LEGUP_F_encode_BB__0_3 = 7'd3;
parameter [6:0] LEGUP_F_encode_BB__0_4 = 7'd4;
parameter [6:0] LEGUP_F_encode_BB__0_5 = 7'd5;
parameter [6:0] LEGUP_F_encode_BB__0_6 = 7'd6;
parameter [6:0] LEGUP_F_encode_BB__0_7 = 7'd7;
parameter [6:0] LEGUP_F_encode_BB__0_8 = 7'd8;
parameter [6:0] LEGUP_F_encode_BB__0_9 = 7'd9;
parameter [6:0] LEGUP_F_encode_BB__0_10 = 7'd10;
parameter [6:0] LEGUP_F_encode_BB__0_11 = 7'd11;
parameter [6:0] LEGUP_F_encode_BB__0_12 = 7'd12;
parameter [6:0] LEGUP_F_encode_BB__0_13 = 7'd13;
parameter [6:0] LEGUP_F_encode_BB__0_14 = 7'd14;
parameter [6:0] LEGUP_F_encode_BB__0_15 = 7'd15;
parameter [6:0] LEGUP_F_encode_BB__0_16 = 7'd16;
parameter [6:0] LEGUP_F_encode_BB__0_17 = 7'd17;
parameter [6:0] LEGUP_F_encode_BB__0_18 = 7'd18;
parameter [6:0] LEGUP_F_encode_BB__0_19 = 7'd19;
parameter [6:0] LEGUP_F_encode_BB__0_20 = 7'd20;
parameter [6:0] LEGUP_F_encode_BB__0_21 = 7'd21;
parameter [6:0] LEGUP_F_encode_BB__0_22 = 7'd22;
parameter [6:0] LEGUP_F_encode_BB__0_23 = 7'd23;
parameter [6:0] LEGUP_F_encode_BB__0_24 = 7'd24;
parameter [6:0] LEGUP_F_encode_BB__0_25 = 7'd25;
parameter [6:0] LEGUP_F_encode_BB__0_26 = 7'd26;
parameter [6:0] LEGUP_F_encode_BB__0_27 = 7'd27;
parameter [6:0] LEGUP_F_encode_BB__0_28 = 7'd28;
parameter [6:0] LEGUP_F_encode_BB__0_29 = 7'd29;
parameter [6:0] LEGUP_F_encode_BB__0_30 = 7'd30;
parameter [6:0] LEGUP_F_encode_BB__0_31 = 7'd31;
parameter [6:0] LEGUP_F_encode_BB__0_32 = 7'd32;
parameter [6:0] LEGUP_F_encode_BB__0_33 = 7'd33;
parameter [6:0] LEGUP_F_encode_BB__0_34 = 7'd34;
parameter [6:0] LEGUP_F_encode_BB__111_35 = 7'd35;
parameter [6:0] LEGUP_F_encode_BB__114_36 = 7'd36;
parameter [6:0] LEGUP_F_encode_BB__114_37 = 7'd37;
parameter [6:0] LEGUP_F_encode_BB__114_38 = 7'd38;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_39 = 7'd39;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_40 = 7'd40;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_41 = 7'd41;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_42 = 7'd42;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_43 = 7'd43;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_44 = 7'd44;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_45 = 7'd45;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_46 = 7'd46;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_47 = 7'd47;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_48 = 7'd48;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_50 = 7'd50;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_51 = 7'd51;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_52 = 7'd52;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_53 = 7'd53;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_54 = 7'd54;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_55 = 7'd55;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_56 = 7'd56;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_57 = 7'd57;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_58 = 7'd58;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_59 = 7'd59;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_60 = 7'd60;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_61 = 7'd61;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_62 = 7'd62;
parameter [6:0] LEGUP_F_encode_BB_quantlexit_63 = 7'd63;
parameter [6:0] LEGUP_F_encode_BB__212_64 = 7'd64;
parameter [6:0] LEGUP_F_encode_BB__212_65 = 7'd65;
parameter [6:0] LEGUP_F_encode_BB__214_66 = 7'd66;
parameter [6:0] LEGUP_F_encode_BB__214_67 = 7'd67;
parameter [6:0] LEGUP_F_encode_BB__214_68 = 7'd68;
parameter [6:0] LEGUP_F_encode_BB__214_69 = 7'd69;
parameter [6:0] LEGUP_F_encode_BB__214_70 = 7'd70;
parameter [6:0] LEGUP_F_encode_BB__214_71 = 7'd71;
parameter [6:0] LEGUP_F_encode_BB__214_72 = 7'd72;
parameter [6:0] LEGUP_F_encode_BB__214_73 = 7'd73;
parameter [6:0] LEGUP_F_encode_BB__214_75 = 7'd75;
parameter [6:0] LEGUP_F_encode_BB__214_76 = 7'd76;
parameter [6:0] LEGUP_F_encode_BB__214_77 = 7'd77;
parameter [6:0] LEGUP_F_encode_BB__214_78 = 7'd78;
parameter [6:0] LEGUP_F_encode_BB__214_79 = 7'd79;
parameter [6:0] LEGUP_F_encode_BB__214_80 = 7'd80;
parameter [6:0] LEGUP_F_encode_BB__214_81 = 7'd81;
parameter [6:0] LEGUP_F_encode_BB__214_82 = 7'd82;
parameter [6:0] LEGUP_F_encode_BB__214_83 = 7'd83;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [6:0] LEGUP_function_call_49 = 7'd49;
parameter [6:0] LEGUP_function_call_74 = 7'd74;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_xin1;
input [31:0] arg_xin2;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] encode_0_1;
reg [31:0] encode_0_1_reg;
reg [31:0] encode_0_2;
reg [31:0] encode_0_2_reg;
reg [31:0] encode_0_3;
reg [31:0] encode_0_3_reg;
reg [31:0] encode_0_4;
reg [31:0] encode_0_4_reg;
reg [31:0] encode_0_5;
reg [31:0] encode_0_5_reg;
reg [31:0] encode_0_6;
reg [31:0] encode_0_6_reg;
reg [31:0] encode_0_7;
reg [31:0] encode_0_7_reg;
reg [31:0] encode_0_8;
reg [31:0] encode_0_8_reg;
reg [31:0] encode_0_9;
reg [31:0] encode_0_9_reg;
reg [31:0] encode_0_10;
reg [31:0] encode_0_10_reg;
reg [31:0] encode_0_11;
reg [31:0] encode_0_11_reg;
reg [31:0] encode_0_12;
reg [31:0] encode_0_12_reg;
reg [31:0] encode_0_13;
reg [31:0] encode_0_13_reg;
reg [31:0] encode_0_14;
reg [31:0] encode_0_14_reg;
reg [31:0] encode_0_15;
reg [31:0] encode_0_15_reg;
reg [31:0] encode_0_16;
reg [31:0] encode_0_16_reg;
reg [31:0] encode_0_17;
reg [31:0] encode_0_17_reg;
reg [31:0] encode_0_18;
reg [31:0] encode_0_18_reg;
reg [31:0] encode_0_19;
reg [31:0] encode_0_19_reg;
reg [31:0] encode_0_20;
reg [31:0] encode_0_20_reg;
reg [31:0] encode_0_21;
reg [31:0] encode_0_21_reg;
reg [31:0] encode_0_22;
reg [31:0] encode_0_22_reg;
reg [31:0] encode_0_23;
reg [31:0] encode_0_23_reg;
reg [31:0] encode_0_24;
reg [31:0] encode_0_24_reg;
reg [31:0] encode_0_25;
reg [31:0] encode_0_25_reg;
reg [31:0] encode_0_26;
reg [31:0] encode_0_26_reg;
reg [31:0] encode_0_27;
reg [31:0] encode_0_27_reg;
reg [31:0] encode_0_28;
reg [31:0] encode_0_28_reg;
reg [31:0] encode_0_29;
reg [31:0] encode_0_29_reg;
reg [31:0] encode_0_30;
reg [31:0] encode_0_30_reg;
reg [31:0] encode_0_31;
reg [31:0] encode_0_31_reg;
reg [31:0] encode_0_32;
reg [31:0] encode_0_32_reg;
reg [31:0] encode_0_33;
reg [31:0] encode_0_33_reg;
reg [31:0] encode_0_34;
reg [31:0] encode_0_34_reg;
reg [31:0] encode_0_35;
reg [31:0] encode_0_35_reg;
reg [31:0] encode_0_36;
reg [31:0] encode_0_36_reg;
reg [31:0] encode_0_37;
reg [31:0] encode_0_37_reg;
reg [31:0] encode_0_38;
reg [31:0] encode_0_38_reg;
reg [31:0] encode_0_39;
reg [31:0] encode_0_39_reg;
reg [31:0] encode_0_40;
reg [31:0] encode_0_40_reg;
reg [31:0] encode_0_41;
reg [31:0] encode_0_41_reg;
reg [31:0] encode_0_42;
reg [31:0] encode_0_42_reg;
reg [31:0] encode_0_43;
reg [31:0] encode_0_43_reg;
reg [31:0] encode_0_44;
reg [31:0] encode_0_44_reg;
reg [31:0] encode_0_45;
reg [31:0] encode_0_45_reg;
reg [31:0] encode_0_46;
reg [31:0] encode_0_46_reg;
reg [31:0] encode_0_47;
reg [31:0] encode_0_47_reg;
reg [31:0] encode_0_48;
reg [31:0] encode_0_48_reg;
reg [31:0] encode_0_49;
reg [31:0] encode_0_49_reg;
reg [31:0] encode_0_50;
reg [31:0] encode_0_50_reg;
reg [31:0] encode_0_51;
reg [31:0] encode_0_51_reg;
reg [31:0] encode_0_52;
reg [31:0] encode_0_52_reg;
reg [31:0] encode_0_53;
reg [31:0] encode_0_53_reg;
reg [31:0] encode_0_54;
reg [31:0] encode_0_54_reg;
reg [31:0] encode_0_55;
reg [31:0] encode_0_55_reg;
reg [31:0] encode_0_56;
reg [31:0] encode_0_56_reg;
reg [31:0] encode_0_57;
reg [31:0] encode_0_57_reg;
reg [31:0] encode_0_58;
reg [31:0] encode_0_58_reg;
reg [31:0] encode_0_59;
reg [31:0] encode_0_59_reg;
reg [31:0] encode_0_60;
reg [31:0] encode_0_60_reg;
reg [31:0] encode_0_61;
reg [31:0] encode_0_61_reg;
reg [31:0] encode_0_62;
reg [31:0] encode_0_62_reg;
reg [31:0] encode_0_63;
reg [31:0] encode_0_63_reg;
reg [31:0] encode_0_64;
reg [31:0] encode_0_64_reg;
reg [31:0] encode_0_65;
reg [31:0] encode_0_65_reg;
reg [31:0] encode_0_66;
reg [31:0] encode_0_66_reg;
reg [31:0] encode_0_67;
reg [31:0] encode_0_67_reg;
reg [31:0] encode_0_68;
reg [31:0] encode_0_68_reg;
reg [31:0] encode_0_69;
reg [31:0] encode_0_69_reg;
reg [31:0] encode_0_70;
reg [31:0] encode_0_70_reg;
reg [31:0] encode_0_71;
reg [31:0] encode_0_71_reg;
reg [31:0] encode_0_72;
reg [31:0] encode_0_72_reg;
reg [31:0] encode_0_73;
reg [31:0] encode_0_73_reg;
reg [31:0] encode_0_74;
reg [31:0] encode_0_74_reg;
reg [31:0] encode_0_75;
reg [31:0] encode_0_75_reg;
reg [31:0] encode_0_76;
reg [31:0] encode_0_76_reg;
reg [31:0] encode_0_77;
reg [31:0] encode_0_77_reg;
reg [31:0] encode_0_78;
reg [31:0] encode_0_78_reg;
reg [31:0] encode_0_79;
reg [31:0] encode_0_79_reg;
reg [31:0] encode_0_80;
reg [31:0] encode_0_80_reg;
reg [31:0] encode_0_81;
reg [31:0] encode_0_81_reg;
reg [31:0] encode_0_82;
reg [31:0] encode_0_82_reg;
reg [31:0] encode_0_83;
reg [31:0] encode_0_83_reg;
reg [31:0] encode_0_84;
reg [31:0] encode_0_84_reg;
reg [31:0] encode_0_85;
reg [31:0] encode_0_85_reg;
reg [31:0] encode_0_86;
reg [31:0] encode_0_86_reg;
reg [31:0] encode_0_87;
reg [31:0] encode_0_87_reg;
reg [31:0] encode_0_88;
reg [31:0] encode_0_88_reg;
reg [31:0] encode_0_89;
reg [31:0] encode_0_89_reg;
reg [31:0] encode_0_90;
reg [31:0] encode_0_90_reg;
reg [31:0] encode_0_91;
reg [31:0] encode_0_91_reg;
reg [31:0] encode_0_92;
reg [31:0] encode_0_92_reg;
reg [31:0] encode_0_93;
reg [31:0] encode_0_93_reg;
reg [31:0] encode_0_94;
reg [31:0] encode_0_94_reg;
reg [31:0] encode_0_95;
reg [31:0] encode_0_95_reg;
reg [31:0] encode_0_96;
reg [31:0] encode_0_96_reg;
reg [31:0] encode_0_97;
reg [31:0] encode_0_97_reg;
reg [31:0] encode_0_98;
reg [31:0] encode_0_98_reg;
reg [31:0] encode_0_99;
reg [31:0] encode_0_99_reg;
reg [31:0] encode_0_100;
reg [31:0] encode_0_100_reg;
reg [31:0] encode_0_101;
reg [31:0] encode_0_101_reg;
reg [31:0] encode_0_102;
reg [31:0] encode_0_102_reg;
reg [31:0] encode_0_103;
reg [31:0] encode_0_103_reg;
reg [31:0] encode_0_104;
reg [31:0] encode_0_104_reg;
reg [31:0] encode_0_tmpi;
reg [31:0] encode_0_tmpi_reg;
reg [31:0] encode_0_tmp1i;
reg [31:0] encode_0_tmp1i_reg;
reg [31:0] encode_0_105;
reg [31:0] encode_0_105_reg;
reg [31:0] encode_0_106;
reg [31:0] encode_0_106_reg;
reg [31:0] encode_0_107;
reg [31:0] encode_0_107_reg;
reg [31:0] encode_0_108;
reg [31:0] encode_0_108_reg;
reg  encode_0_109;
reg  encode_0_109_reg;
reg [31:0] encode_0_110;
reg [31:0] encode_0_110_reg;
reg [31:0] encode_0_m0ii;
reg [31:0] encode_0_m0ii_reg;
reg [31:0] encode_111_112;
reg [31:0] encode_111_112_reg;
reg  encode_111_113;
reg  encode_111_113_reg;
reg [31:0] encode_114_115;
reg [31:0] encode_114_115_reg;
reg [31:0] encode_114_116;
reg [31:0] encode_114_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_114_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_114_scevgep_reg;
reg [31:0] encode_114_117;
reg [31:0] encode_114_117_reg;
reg [31:0] encode_114_118;
reg [31:0] encode_114_118_reg;
reg [31:0] encode_114_119;
reg [31:0] encode_114_119_reg;
reg  encode_114_120;
reg  encode_114_120_reg;
reg [31:0] encode_quantlexit_mil0lcssai;
reg [31:0] encode_quantlexit_mil0lcssai_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_quant26bt_posquant26bt_negi;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_quant26bt_posquant26bt_negi_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_ril0ini;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_ril0ini_reg;
reg [31:0] encode_quantlexit_ril0i;
reg [31:0] encode_quantlexit_ril0i_reg;
reg [31:0] encode_quantlexit_121;
reg [31:0] encode_quantlexit_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_122_reg;
reg [31:0] encode_quantlexit_123;
reg [31:0] encode_quantlexit_123_reg;
reg [31:0] encode_quantlexit_124;
reg [31:0] encode_quantlexit_124_reg;
reg [31:0] encode_quantlexit_125;
reg [31:0] encode_quantlexit_125_reg;
reg [31:0] encode_quantlexit_126;
reg [31:0] encode_quantlexit_126_reg;
reg [31:0] encode_quantlexit_127;
reg [31:0] encode_quantlexit_127_reg;
reg [31:0] encode_quantlexit_128;
reg [31:0] encode_quantlexit_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_129_reg;
reg [31:0] encode_quantlexit_130;
reg [31:0] encode_quantlexit_130_reg;
reg [31:0] encode_quantlexit_131;
reg [31:0] encode_quantlexit_131_reg;
reg  encode_quantlexit_132;
reg  encode_quantlexit_132_reg;
reg [31:0] encode_quantlexit_i12;
reg [31:0] encode_quantlexit_i12_reg;
reg  encode_quantlexit_133;
reg  encode_quantlexit_133_reg;
reg [31:0] encode_quantlexit_i13;
reg [31:0] encode_quantlexit_i13_reg;
reg [31:0] encode_quantlexit_134;
reg [31:0] encode_quantlexit_134_reg;
reg [31:0] encode_quantlexit_135;
reg [31:0] encode_quantlexit_135_reg;
reg [31:0] encode_quantlexit_136;
reg [31:0] encode_quantlexit_136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_quantlexit_137_reg;
reg [31:0] encode_quantlexit_138;
reg [31:0] encode_quantlexit_138_reg;
reg [31:0] encode_quantlexit_139;
reg [31:0] encode_quantlexit_139_reg;
reg [31:0] encode_quantlexit_140;
reg [31:0] encode_quantlexit_140_reg;
reg [31:0] encode_quantlexit_141;
reg [31:0] encode_quantlexit_141_reg;
reg [31:0] encode_quantlexit_142;
reg [31:0] encode_quantlexit_142_reg;
reg [31:0] encode_quantlexit_143;
reg [31:0] encode_quantlexit_143_reg;
reg [31:0] encode_quantlexit_144;
reg [31:0] encode_quantlexit_144_reg;
reg [31:0] encode_quantlexit_145;
reg [31:0] encode_quantlexit_145_reg;
reg [31:0] encode_quantlexit_146;
reg [31:0] encode_quantlexit_146_reg;
reg  encode_quantlexit_147;
reg  encode_quantlexit_147_reg;
reg [31:0] encode_quantlexit_148;
reg [31:0] encode_quantlexit_148_reg;
reg [31:0] encode_quantlexit_1i8;
reg [31:0] encode_quantlexit_1i8_reg;
reg [31:0] encode_quantlexit_149;
reg [31:0] encode_quantlexit_149_reg;
reg [31:0] encode_quantlexit_150;
reg [31:0] encode_quantlexit_150_reg;
reg [31:0] encode_quantlexit_151;
reg [31:0] encode_quantlexit_151_reg;
reg [31:0] encode_quantlexit_152;
reg [31:0] encode_quantlexit_152_reg;
reg [31:0] encode_quantlexit_153;
reg [31:0] encode_quantlexit_153_reg;
reg [31:0] encode_quantlexit_154;
reg [31:0] encode_quantlexit_154_reg;
reg [31:0] encode_quantlexit_155;
reg [31:0] encode_quantlexit_155_reg;
reg [31:0] encode_quantlexit_wd40i9;
reg [31:0] encode_quantlexit_wd40i9_reg;
reg [31:0] encode_quantlexit_156;
reg [31:0] encode_quantlexit_156_reg;
reg  encode_quantlexit_157;
reg  encode_quantlexit_157_reg;
reg [31:0] encode_quantlexit_i10;
reg [31:0] encode_quantlexit_i10_reg;
reg  encode_quantlexit_158;
reg  encode_quantlexit_158_reg;
reg [31:0] encode_quantlexit_i11;
reg [31:0] encode_quantlexit_i11_reg;
reg [31:0] encode_quantlexit_159;
reg [31:0] encode_quantlexit_159_reg;
reg [31:0] encode_quantlexit_160;
reg [31:0] encode_quantlexit_160_reg;
reg [31:0] encode_quantlexit_161;
reg [31:0] encode_quantlexit_161_reg;
reg [31:0] encode_quantlexit_162;
reg [31:0] encode_quantlexit_162_reg;
reg [31:0] encode_quantlexit_163;
reg [31:0] encode_quantlexit_163_reg;
reg [31:0] encode_quantlexit_apl10i5;
reg [31:0] encode_quantlexit_apl10i5_reg;
reg [31:0] encode_quantlexit_164;
reg [31:0] encode_quantlexit_164_reg;
reg  encode_quantlexit_165;
reg  encode_quantlexit_165_reg;
reg [31:0] encode_quantlexit_apl10i6;
reg [31:0] encode_quantlexit_apl10i6_reg;
reg [31:0] encode_quantlexit_166;
reg [31:0] encode_quantlexit_166_reg;
reg  encode_quantlexit_167;
reg  encode_quantlexit_167_reg;
reg [31:0] encode_quantlexit_apl12i7;
reg [31:0] encode_quantlexit_apl12i7_reg;
reg [31:0] encode_quantlexit_168;
reg [31:0] encode_quantlexit_168_reg;
reg [31:0] encode_quantlexit_169;
reg [31:0] encode_quantlexit_169_reg;
reg [31:0] encode_quantlexit_170;
reg [31:0] encode_quantlexit_170_reg;
reg [31:0] encode_quantlexit_171;
reg [31:0] encode_quantlexit_171_reg;
reg [31:0] encode_quantlexit_172;
reg [31:0] encode_quantlexit_172_reg;
reg [31:0] encode_quantlexit_173;
reg [31:0] encode_quantlexit_173_reg;
reg [31:0] encode_quantlexit_174;
reg [31:0] encode_quantlexit_174_reg;
reg [31:0] encode_quantlexit_175;
reg [31:0] encode_quantlexit_175_reg;
reg [31:0] encode_quantlexit_176;
reg [31:0] encode_quantlexit_176_reg;
reg [31:0] encode_quantlexit_177;
reg [31:0] encode_quantlexit_177_reg;
reg [31:0] encode_quantlexit_178;
reg [31:0] encode_quantlexit_178_reg;
reg [31:0] encode_quantlexit_179;
reg [31:0] encode_quantlexit_179_reg;
reg [31:0] encode_quantlexit_180;
reg [31:0] encode_quantlexit_180_reg;
reg [31:0] encode_quantlexit_181;
reg [31:0] encode_quantlexit_181_reg;
reg [31:0] encode_quantlexit_182;
reg [31:0] encode_quantlexit_182_reg;
reg [31:0] encode_quantlexit_183;
reg [31:0] encode_quantlexit_183_reg;
reg [31:0] encode_quantlexit_184;
reg [31:0] encode_quantlexit_184_reg;
reg [31:0] encode_quantlexit_185;
reg [31:0] encode_quantlexit_185_reg;
reg [31:0] encode_quantlexit_186;
reg [31:0] encode_quantlexit_186_reg;
reg [31:0] encode_quantlexit_187;
reg [31:0] encode_quantlexit_187_reg;
reg [31:0] encode_quantlexit_188;
reg [31:0] encode_quantlexit_188_reg;
reg [31:0] encode_quantlexit_189;
reg [31:0] encode_quantlexit_189_reg;
reg [31:0] encode_quantlexit_190;
reg [31:0] encode_quantlexit_190_reg;
reg [31:0] encode_quantlexit_191;
reg [31:0] encode_quantlexit_191_reg;
reg [31:0] encode_quantlexit_192;
reg [31:0] encode_quantlexit_192_reg;
reg [31:0] encode_quantlexit_193;
reg [31:0] encode_quantlexit_193_reg;
reg [31:0] encode_quantlexit_194;
reg [31:0] encode_quantlexit_194_reg;
reg [31:0] encode_quantlexit_195;
reg [31:0] encode_quantlexit_195_reg;
reg [31:0] encode_quantlexit_196;
reg [31:0] encode_quantlexit_196_reg;
reg [31:0] encode_quantlexit_197;
reg [31:0] encode_quantlexit_197_reg;
reg [31:0] encode_quantlexit_198;
reg [31:0] encode_quantlexit_198_reg;
reg [31:0] encode_quantlexit_tmpi3;
reg [31:0] encode_quantlexit_tmpi3_reg;
reg [31:0] encode_quantlexit_tmp1i4;
reg [31:0] encode_quantlexit_tmp1i4_reg;
reg [31:0] encode_quantlexit_199;
reg [31:0] encode_quantlexit_199_reg;
reg [31:0] encode_quantlexit_200;
reg [31:0] encode_quantlexit_200_reg;
reg [31:0] encode_quantlexit_201;
reg [31:0] encode_quantlexit_201_reg;
reg [31:0] encode_quantlexit_202;
reg [31:0] encode_quantlexit_202_reg;
reg [31:0] encode_quantlexit_203;
reg [31:0] encode_quantlexit_203_reg;
reg [31:0] encode_quantlexit_204;
reg [31:0] encode_quantlexit_204_reg;
reg [31:0] encode_quantlexit_205;
reg [31:0] encode_quantlexit_205_reg;
reg [31:0] encode_quantlexit_206;
reg [31:0] encode_quantlexit_206_reg;
reg [31:0] encode_quantlexit_207;
reg [31:0] encode_quantlexit_207_reg;
reg [31:0] encode_quantlexit_208;
reg [31:0] encode_quantlexit_208_reg;
reg  encode_quantlexit_209;
reg  encode_quantlexit_209_reg;
reg [31:0] encode_quantlexit_210;
reg [31:0] encode_quantlexit_210_reg;
reg [31:0] encode_quantlexit_m0i;
reg [31:0] encode_quantlexit_m0i_reg;
reg  encode_quantlexit_211;
reg  encode_quantlexit_211_reg;
reg [31:0] encode_212_213;
reg [31:0] encode_212_213_reg;
reg [31:0] encode_214_215;
reg [31:0] encode_214_215_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_214_216;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_214_216_reg;
reg [31:0] encode_214_217;
reg [31:0] encode_214_217_reg;
reg [31:0] encode_214_218;
reg [31:0] encode_214_218_reg;
reg [31:0] encode_214_219;
reg [31:0] encode_214_219_reg;
reg [31:0] encode_214_220;
reg [31:0] encode_214_220_reg;
reg [31:0] encode_214_221;
reg [31:0] encode_214_221_reg;
reg [31:0] encode_214_222;
reg [31:0] encode_214_222_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_214_223;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_214_223_reg;
reg [31:0] encode_214_224;
reg [31:0] encode_214_224_reg;
reg [31:0] encode_214_225;
reg [31:0] encode_214_225_reg;
reg  encode_214_226;
reg  encode_214_226_reg;
reg [31:0] encode_214_i1;
reg [31:0] encode_214_i1_reg;
reg  encode_214_227;
reg  encode_214_227_reg;
reg [31:0] encode_214_i2;
reg [31:0] encode_214_i2_reg;
reg [31:0] encode_214_228;
reg [31:0] encode_214_228_reg;
reg [31:0] encode_214_229;
reg [31:0] encode_214_229_reg;
reg [31:0] encode_214_230;
reg [31:0] encode_214_230_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_214_231;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_214_231_reg;
reg [31:0] encode_214_232;
reg [31:0] encode_214_232_reg;
reg [31:0] encode_214_233;
reg [31:0] encode_214_233_reg;
reg [31:0] encode_214_234;
reg [31:0] encode_214_234_reg;
reg [31:0] encode_214_235;
reg [31:0] encode_214_235_reg;
reg [31:0] encode_214_236;
reg [31:0] encode_214_236_reg;
reg [31:0] encode_214_237;
reg [31:0] encode_214_237_reg;
reg [31:0] encode_214_238;
reg [31:0] encode_214_238_reg;
reg [31:0] encode_214_239;
reg [31:0] encode_214_239_reg;
reg [31:0] encode_214_240;
reg [31:0] encode_214_240_reg;
reg  encode_214_241;
reg  encode_214_241_reg;
reg [31:0] encode_214_242;
reg [31:0] encode_214_242_reg;
reg [31:0] encode_214_1i;
reg [31:0] encode_214_1i_reg;
reg [31:0] encode_214_243;
reg [31:0] encode_214_243_reg;
reg [31:0] encode_214_244;
reg [31:0] encode_214_244_reg;
reg [31:0] encode_214_245;
reg [31:0] encode_214_245_reg;
reg [31:0] encode_214_246;
reg [31:0] encode_214_246_reg;
reg [31:0] encode_214_247;
reg [31:0] encode_214_247_reg;
reg [31:0] encode_214_248;
reg [31:0] encode_214_248_reg;
reg [31:0] encode_214_249;
reg [31:0] encode_214_249_reg;
reg [31:0] encode_214_wd40i;
reg [31:0] encode_214_wd40i_reg;
reg [31:0] encode_214_250;
reg [31:0] encode_214_250_reg;
reg  encode_214_251;
reg  encode_214_251_reg;
reg [31:0] encode_214_i;
reg [31:0] encode_214_i_reg;
reg  encode_214_252;
reg  encode_214_252_reg;
reg [31:0] encode_214_i_var0;
reg [31:0] encode_214_i_var0_reg;
reg [31:0] encode_214_253;
reg [31:0] encode_214_253_reg;
reg [31:0] encode_214_254;
reg [31:0] encode_214_254_reg;
reg [31:0] encode_214_255;
reg [31:0] encode_214_255_reg;
reg [31:0] encode_214_256;
reg [31:0] encode_214_256_reg;
reg [31:0] encode_214_257;
reg [31:0] encode_214_257_reg;
reg [31:0] encode_214_apl10i;
reg [31:0] encode_214_apl10i_reg;
reg [31:0] encode_214_258;
reg [31:0] encode_214_258_reg;
reg  encode_214_259;
reg  encode_214_259_reg;
reg [31:0] encode_214_apl10i_var1;
reg [31:0] encode_214_apl10i_var1_reg;
reg [31:0] encode_214_260;
reg [31:0] encode_214_260_reg;
reg  encode_214_261;
reg  encode_214_261_reg;
reg [31:0] encode_214_apl12i;
reg [31:0] encode_214_apl12i_reg;
reg [31:0] encode_214_262;
reg [31:0] encode_214_262_reg;
reg [31:0] encode_214_263;
reg [31:0] encode_214_263_reg;
reg [31:0] encode_214_264;
reg [31:0] encode_214_264_reg;
reg [31:0] encode_214_265;
reg [31:0] encode_214_265_reg;
wire [1:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [1:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
wire [5:0] qq6_code6_table_address_a;
wire  qq6_code6_table_write_enable_a;
wire [31:0] qq6_code6_table_in_a;
wire [31:0] qq6_code6_table_out_a;
wire [5:0] qq6_code6_table_address_b;
wire  qq6_code6_table_write_enable_b;
wire [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_b;
reg [4:0] decis_levl_address_a;
reg  decis_levl_write_enable_a;
wire [31:0] decis_levl_in_a;
wire [31:0] decis_levl_out_a;
wire [4:0] decis_levl_address_b;
wire  decis_levl_write_enable_b;
wire [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_b;
wire [2:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [2:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg  xh_address_a;
reg  xh_write_enable_a;
reg [31:0] xh_in_a;
wire [31:0] xh_out_a;
wire  xh_address_b;
wire  xh_write_enable_b;
wire [31:0] xh_in_b;
wire [31:0] xh_out_b;
wire [6:0] test_data_address_a;
wire  test_data_write_enable_a;
wire [31:0] test_data_in_a;
wire [31:0] test_data_out_a;
wire [6:0] test_data_address_b;
wire  test_data_write_enable_b;
wire [31:0] test_data_in_b;
wire [31:0] test_data_out_b;
wire [6:0] test_compressed_address_a;
wire  test_compressed_write_enable_a;
wire [31:0] test_compressed_in_a;
wire [31:0] test_compressed_out_a;
wire [6:0] test_compressed_address_b;
wire  test_compressed_write_enable_b;
wire [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_b;
wire [6:0] test_result_address_a;
wire  test_result_write_enable_a;
wire [31:0] test_result_in_a;
wire [31:0] test_result_out_a;
wire [6:0] test_result_address_b;
wire  test_result_write_enable_b;
wire [31:0] test_result_in_b;
wire [31:0] test_result_out_b;
wire [6:0] compressed_address_a;
wire  compressed_write_enable_a;
wire [31:0] compressed_in_a;
wire [31:0] compressed_out_a;
wire [6:0] compressed_address_b;
wire  compressed_write_enable_b;
wire [31:0] compressed_in_b;
wire [31:0] compressed_out_b;
wire [6:0] result_address_a;
wire  result_write_enable_a;
wire [31:0] result_in_a;
wire [31:0] result_out_a;
wire [6:0] result_address_b;
wire  result_write_enable_b;
wire [31:0] result_in_b;
wire [31:0] result_out_b;
reg  upzero_start;
reg [31:0] upzero_arg_dlt;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_dlti;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_bli;
wire  upzero_memory_controller_enable_a;
wire  upzero_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_out_a;
wire [1:0] upzero_memory_controller_size_a;
wire  upzero_memory_controller_enable_b;
wire  upzero_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_out_b;
wire [1:0] upzero_memory_controller_size_b;
reg  upzero_memory_controller_waitrequest;
reg  upzero_finish_final;
reg  upzero_finish_reg;
wire  upzero_finish;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  lpm_mult_encode_0_2_en;
reg [31:0] encode_0_2_stage0_reg;
reg  lpm_mult_encode_0_4_en;
reg [31:0] encode_0_4_stage0_reg;
reg  lpm_mult_encode_0_6_en;
reg [31:0] encode_0_6_stage0_reg;
reg  lpm_mult_encode_0_9_en;
reg [31:0] encode_0_9_stage0_reg;
reg  lpm_mult_encode_0_12_en;
reg [31:0] encode_0_12_stage0_reg;
reg  lpm_mult_encode_0_15_en;
reg [31:0] encode_0_15_stage0_reg;
reg  lpm_mult_encode_0_21_en;
reg [31:0] encode_0_21_stage0_reg;
reg  lpm_mult_encode_0_24_en;
reg [31:0] encode_0_24_stage0_reg;
reg  lpm_mult_encode_0_27_en;
reg [31:0] encode_0_27_stage0_reg;
reg  lpm_mult_encode_0_30_en;
reg [31:0] encode_0_30_stage0_reg;
reg  lpm_mult_encode_0_33_en;
reg [31:0] encode_0_33_stage0_reg;
reg  lpm_mult_encode_0_36_en;
reg [31:0] encode_0_36_stage0_reg;
reg  lpm_mult_encode_0_39_en;
reg [31:0] encode_0_39_stage0_reg;
reg  lpm_mult_encode_0_42_en;
reg [31:0] encode_0_42_stage0_reg;
reg  lpm_mult_encode_0_45_en;
reg [31:0] encode_0_45_stage0_reg;
reg  lpm_mult_encode_0_48_en;
reg [31:0] encode_0_48_stage0_reg;
reg  lpm_mult_encode_0_54_en;
reg [31:0] encode_0_54_stage0_reg;
reg  lpm_mult_encode_0_57_en;
reg [31:0] encode_0_57_stage0_reg;
reg  lpm_mult_encode_0_60_en;
reg [31:0] encode_0_60_stage0_reg;
reg  lpm_mult_encode_0_63_en;
reg [31:0] encode_0_63_stage0_reg;
reg  lpm_mult_encode_0_66_en;
reg [31:0] encode_0_66_stage0_reg;
reg  lpm_mult_encode_0_69_en;
reg [31:0] encode_0_69_stage0_reg;
reg  lpm_mult_encode_0_77_en;
reg [31:0] encode_0_77_stage0_reg;
reg  lpm_mult_encode_0_80_en;
reg [31:0] encode_0_80_stage0_reg;
reg  lpm_mult_encode_0_84_en;
reg [31:0] encode_0_84_stage0_reg;
reg  lpm_mult_encode_0_88_en;
reg [31:0] encode_0_88_stage0_reg;
reg  lpm_mult_encode_0_92_en;
reg [31:0] encode_0_92_stage0_reg;
reg  lpm_mult_encode_0_96_en;
reg [31:0] encode_0_96_stage0_reg;
reg  lpm_mult_encode_0_103_en;
reg [31:0] encode_0_103_stage0_reg;
reg  lpm_mult_encode_0_104_en;
reg [31:0] encode_0_104_stage0_reg;
reg  lpm_mult_encode_114_118_en;
reg [31:0] encode_114_118_stage0_reg;
reg  lpm_mult_encode_quantlexit_154_en;
reg [31:0] encode_quantlexit_154_stage0_reg;
reg  lpm_mult_encode_quantlexit_159_en;
reg [31:0] encode_quantlexit_159_stage0_reg;
reg  lpm_mult_encode_quantlexit_127_en;
reg [31:0] encode_quantlexit_127_stage0_reg;
reg  lpm_mult_encode_quantlexit_124_en;
reg [31:0] encode_quantlexit_124_stage0_reg;
reg  lpm_mult_encode_quantlexit_146_en;
reg [31:0] encode_quantlexit_146_stage0_reg;
reg  lpm_mult_encode_quantlexit_150_en;
reg [31:0] encode_quantlexit_150_stage0_reg;
reg  lpm_mult_encode_quantlexit_171_en;
reg [31:0] encode_quantlexit_171_stage0_reg;
reg  lpm_mult_encode_quantlexit_174_en;
reg [31:0] encode_quantlexit_174_stage0_reg;
reg  lpm_mult_encode_quantlexit_178_en;
reg [31:0] encode_quantlexit_178_stage0_reg;
reg  lpm_mult_encode_quantlexit_182_en;
reg [31:0] encode_quantlexit_182_stage0_reg;
reg  lpm_mult_encode_quantlexit_186_en;
reg [31:0] encode_quantlexit_186_stage0_reg;
reg  lpm_mult_encode_quantlexit_190_en;
reg [31:0] encode_quantlexit_190_stage0_reg;
reg  lpm_mult_encode_quantlexit_197_en;
reg [31:0] encode_quantlexit_197_stage0_reg;
reg  lpm_mult_encode_quantlexit_198_en;
reg [31:0] encode_quantlexit_198_stage0_reg;
reg  lpm_mult_encode_quantlexit_207_en;
reg [31:0] encode_quantlexit_207_stage0_reg;
reg  lpm_mult_encode_214_248_en;
reg [31:0] encode_214_248_stage0_reg;
reg  lpm_mult_encode_214_253_en;
reg [31:0] encode_214_253_stage0_reg;
reg  lpm_mult_encode_214_221_en;
reg [31:0] encode_214_221_stage0_reg;
reg  lpm_mult_encode_214_218_en;
reg [31:0] encode_214_218_stage0_reg;
reg  lpm_mult_encode_214_240_en;
reg [31:0] encode_214_240_stage0_reg;
reg  lpm_mult_encode_214_244_en;
reg [31:0] encode_214_244_stage0_reg;


upzero upzero (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (upzero_memory_controller_enable_a),
	.memory_controller_address_a (upzero_memory_controller_address_a),
	.memory_controller_write_enable_a (upzero_memory_controller_write_enable_a),
	.memory_controller_in_a (upzero_memory_controller_in_a),
	.memory_controller_size_a (upzero_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (upzero_memory_controller_enable_b),
	.memory_controller_address_b (upzero_memory_controller_address_b),
	.memory_controller_write_enable_b (upzero_memory_controller_write_enable_b),
	.memory_controller_in_b (upzero_memory_controller_in_b),
	.memory_controller_size_b (upzero_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (upzero_start),
	.finish (upzero_finish),
	.arg_dlt (upzero_arg_dlt),
	.arg_dlti (upzero_arg_dlti),
	.arg_bli (upzero_arg_bli)
);

defparam
	upzero.tag_offset = tag_offset;

// Local Rams


// @decis_levl = internal unnamed_addr constant [30 x i32] [i32 280, i32 576, i32 880, i32 1200, i32 1520, i32 1864, i32 2208, i32 2584, i32 2960, i32 3376, i32 3784, i32 4240, i32 4696, i32 5200, i32 57...
rom_dual_port decis_levl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( decis_levl_address_a ),
	.address_b( decis_levl_address_b ),
	.q_a( decis_levl_out_a ),
	.q_b( decis_levl_out_b)
);
defparam decis_levl.width_a = 32;
defparam decis_levl.width_b = 32;
defparam decis_levl.widthad_a = 5;
defparam decis_levl.widthad_b = 5;
defparam decis_levl.numwords_a = 30;
defparam decis_levl.numwords_b = 30;
defparam decis_levl.latency = 1;
defparam decis_levl.init_file = "decis_levl.mif";


// @xh = internal unnamed_addr global i32 0, align 4
ram_dual_port xh (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( xh_address_a ),
	.address_b( xh_address_b ),
	.wren_a( xh_write_enable_a ),
	.wren_b( xh_write_enable_b ),
	.data_a( xh_in_a ),
	.data_b( xh_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( xh_out_a ),
	.q_b( xh_out_b)
);
defparam xh.width_a = 32;
defparam xh.width_b = 32;
defparam xh.widthad_a = 1;
defparam xh.widthad_b = 1;
defparam xh.width_be_a = 1;
defparam xh.width_be_b = 1;
defparam xh.numwords_a = 1;
defparam xh.numwords_b = 1;
defparam xh.latency = 1;
defparam xh.init_file = "xh.mif";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_encode_BB__0_1;
LEGUP_F_encode_BB__0_1:
		next_state = LEGUP_F_encode_BB__0_2;
LEGUP_F_encode_BB__0_10:
		next_state = LEGUP_F_encode_BB__0_11;
LEGUP_F_encode_BB__0_11:
		next_state = LEGUP_F_encode_BB__0_12;
LEGUP_F_encode_BB__0_12:
		next_state = LEGUP_F_encode_BB__0_13;
LEGUP_F_encode_BB__0_13:
		next_state = LEGUP_F_encode_BB__0_14;
LEGUP_F_encode_BB__0_14:
		next_state = LEGUP_F_encode_BB__0_15;
LEGUP_F_encode_BB__0_15:
		next_state = LEGUP_F_encode_BB__0_16;
LEGUP_F_encode_BB__0_16:
		next_state = LEGUP_F_encode_BB__0_17;
LEGUP_F_encode_BB__0_17:
		next_state = LEGUP_F_encode_BB__0_18;
LEGUP_F_encode_BB__0_18:
		next_state = LEGUP_F_encode_BB__0_19;
LEGUP_F_encode_BB__0_19:
		next_state = LEGUP_F_encode_BB__0_20;
LEGUP_F_encode_BB__0_2:
		next_state = LEGUP_F_encode_BB__0_3;
LEGUP_F_encode_BB__0_20:
		next_state = LEGUP_F_encode_BB__0_21;
LEGUP_F_encode_BB__0_21:
		next_state = LEGUP_F_encode_BB__0_22;
LEGUP_F_encode_BB__0_22:
		next_state = LEGUP_F_encode_BB__0_23;
LEGUP_F_encode_BB__0_23:
		next_state = LEGUP_F_encode_BB__0_24;
LEGUP_F_encode_BB__0_24:
		next_state = LEGUP_F_encode_BB__0_25;
LEGUP_F_encode_BB__0_25:
		next_state = LEGUP_F_encode_BB__0_26;
LEGUP_F_encode_BB__0_26:
		next_state = LEGUP_F_encode_BB__0_27;
LEGUP_F_encode_BB__0_27:
		next_state = LEGUP_F_encode_BB__0_28;
LEGUP_F_encode_BB__0_28:
		next_state = LEGUP_F_encode_BB__0_29;
LEGUP_F_encode_BB__0_29:
		next_state = LEGUP_F_encode_BB__0_30;
LEGUP_F_encode_BB__0_3:
		next_state = LEGUP_F_encode_BB__0_4;
LEGUP_F_encode_BB__0_30:
		next_state = LEGUP_F_encode_BB__0_31;
LEGUP_F_encode_BB__0_31:
		next_state = LEGUP_F_encode_BB__0_32;
LEGUP_F_encode_BB__0_32:
		next_state = LEGUP_F_encode_BB__0_33;
LEGUP_F_encode_BB__0_33:
		next_state = LEGUP_F_encode_BB__0_34;
LEGUP_F_encode_BB__0_34:
		next_state = LEGUP_F_encode_BB__114_36;
LEGUP_F_encode_BB__0_4:
		next_state = LEGUP_F_encode_BB__0_5;
LEGUP_F_encode_BB__0_5:
		next_state = LEGUP_F_encode_BB__0_6;
LEGUP_F_encode_BB__0_6:
		next_state = LEGUP_F_encode_BB__0_7;
LEGUP_F_encode_BB__0_7:
		next_state = LEGUP_F_encode_BB__0_8;
LEGUP_F_encode_BB__0_8:
		next_state = LEGUP_F_encode_BB__0_9;
LEGUP_F_encode_BB__0_9:
		next_state = LEGUP_F_encode_BB__0_10;
LEGUP_F_encode_BB__111_35:
	if ((encode_111_113 == 1'd1))
		next_state = LEGUP_F_encode_BB__114_36;
	else if ((encode_111_113 == 1'd0))
		next_state = LEGUP_F_encode_BB_quantlexit_39;
LEGUP_F_encode_BB__114_36:
		next_state = LEGUP_F_encode_BB__114_37;
LEGUP_F_encode_BB__114_37:
		next_state = LEGUP_F_encode_BB__114_38;
LEGUP_F_encode_BB__114_38:
	if ((encode_114_120 == 1'd1))
		next_state = LEGUP_F_encode_BB__111_35;
	else if ((encode_114_120 == 1'd0))
		next_state = LEGUP_F_encode_BB_quantlexit_39;
LEGUP_F_encode_BB__212_64:
		next_state = LEGUP_F_encode_BB__212_65;
LEGUP_F_encode_BB__212_65:
		next_state = LEGUP_F_encode_BB__214_66;
LEGUP_F_encode_BB__214_66:
		next_state = LEGUP_F_encode_BB__214_67;
LEGUP_F_encode_BB__214_67:
		next_state = LEGUP_F_encode_BB__214_68;
LEGUP_F_encode_BB__214_68:
		next_state = LEGUP_F_encode_BB__214_69;
LEGUP_F_encode_BB__214_69:
		next_state = LEGUP_F_encode_BB__214_70;
LEGUP_F_encode_BB__214_70:
		next_state = LEGUP_F_encode_BB__214_71;
LEGUP_F_encode_BB__214_71:
		next_state = LEGUP_F_encode_BB__214_72;
LEGUP_F_encode_BB__214_72:
		next_state = LEGUP_F_encode_BB__214_73;
LEGUP_F_encode_BB__214_73:
		next_state = LEGUP_function_call_74;
LEGUP_F_encode_BB__214_75:
		next_state = LEGUP_F_encode_BB__214_76;
LEGUP_F_encode_BB__214_76:
		next_state = LEGUP_F_encode_BB__214_77;
LEGUP_F_encode_BB__214_77:
		next_state = LEGUP_F_encode_BB__214_78;
LEGUP_F_encode_BB__214_78:
		next_state = LEGUP_F_encode_BB__214_79;
LEGUP_F_encode_BB__214_79:
		next_state = LEGUP_F_encode_BB__214_80;
LEGUP_F_encode_BB__214_80:
		next_state = LEGUP_F_encode_BB__214_81;
LEGUP_F_encode_BB__214_81:
		next_state = LEGUP_F_encode_BB__214_82;
LEGUP_F_encode_BB__214_82:
		next_state = LEGUP_F_encode_BB__214_83;
LEGUP_F_encode_BB__214_83:
		next_state = LEGUP_0;
LEGUP_F_encode_BB_quantlexit_39:
		next_state = LEGUP_F_encode_BB_quantlexit_40;
LEGUP_F_encode_BB_quantlexit_40:
		next_state = LEGUP_F_encode_BB_quantlexit_41;
LEGUP_F_encode_BB_quantlexit_41:
		next_state = LEGUP_F_encode_BB_quantlexit_42;
LEGUP_F_encode_BB_quantlexit_42:
		next_state = LEGUP_F_encode_BB_quantlexit_43;
LEGUP_F_encode_BB_quantlexit_43:
		next_state = LEGUP_F_encode_BB_quantlexit_44;
LEGUP_F_encode_BB_quantlexit_44:
		next_state = LEGUP_F_encode_BB_quantlexit_45;
LEGUP_F_encode_BB_quantlexit_45:
		next_state = LEGUP_F_encode_BB_quantlexit_46;
LEGUP_F_encode_BB_quantlexit_46:
		next_state = LEGUP_F_encode_BB_quantlexit_47;
LEGUP_F_encode_BB_quantlexit_47:
		next_state = LEGUP_F_encode_BB_quantlexit_48;
LEGUP_F_encode_BB_quantlexit_48:
		next_state = LEGUP_function_call_49;
LEGUP_F_encode_BB_quantlexit_50:
		next_state = LEGUP_F_encode_BB_quantlexit_51;
LEGUP_F_encode_BB_quantlexit_51:
		next_state = LEGUP_F_encode_BB_quantlexit_52;
LEGUP_F_encode_BB_quantlexit_52:
		next_state = LEGUP_F_encode_BB_quantlexit_53;
LEGUP_F_encode_BB_quantlexit_53:
		next_state = LEGUP_F_encode_BB_quantlexit_54;
LEGUP_F_encode_BB_quantlexit_54:
		next_state = LEGUP_F_encode_BB_quantlexit_55;
LEGUP_F_encode_BB_quantlexit_55:
		next_state = LEGUP_F_encode_BB_quantlexit_56;
LEGUP_F_encode_BB_quantlexit_56:
		next_state = LEGUP_F_encode_BB_quantlexit_57;
LEGUP_F_encode_BB_quantlexit_57:
		next_state = LEGUP_F_encode_BB_quantlexit_58;
LEGUP_F_encode_BB_quantlexit_58:
		next_state = LEGUP_F_encode_BB_quantlexit_59;
LEGUP_F_encode_BB_quantlexit_59:
		next_state = LEGUP_F_encode_BB_quantlexit_60;
LEGUP_F_encode_BB_quantlexit_60:
		next_state = LEGUP_F_encode_BB_quantlexit_61;
LEGUP_F_encode_BB_quantlexit_61:
		next_state = LEGUP_F_encode_BB_quantlexit_62;
LEGUP_F_encode_BB_quantlexit_62:
		next_state = LEGUP_F_encode_BB_quantlexit_63;
LEGUP_F_encode_BB_quantlexit_63:
	if ((encode_quantlexit_211_reg == 1'd1))
		next_state = LEGUP_F_encode_BB__212_64;
	else if ((encode_quantlexit_211_reg == 1'd0))
		next_state = LEGUP_F_encode_BB__214_66;
LEGUP_function_call_49:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_encode_BB_quantlexit_50;
LEGUP_function_call_74:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_encode_BB__214_75;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
		encode_0_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		encode_0_1_reg <= encode_0_1;
		if (start == 1'b0 && ^(encode_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_1_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_2 = encode_0_2_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %2 = mul nsw i32 %1, 12*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_2_reg <= encode_0_2;
		if (start == 1'b0 && ^(encode_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_2_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %2 = mul nsw i32 %1, 12*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_2_reg <= encode_0_2;
		if (start == 1'b0 && ^(encode_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
		encode_0_3 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		encode_0_3_reg <= encode_0_3;
		if (start == 1'b0 && ^(encode_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_3_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_4 = encode_0_4_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %4 = mul nsw i32 %3, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_4_reg <= encode_0_4;
		if (start == 1'b0 && ^(encode_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_4_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %4 = mul nsw i32 %3, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_4_reg <= encode_0_4;
		if (start == 1'b0 && ^(encode_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %5 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
		encode_0_5 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %5 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_5_reg <= encode_0_5;
		if (start == 1'b0 && ^(encode_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_5_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_6 = encode_0_6_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %6 = mul nsw i32 %5, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		encode_0_6_reg <= encode_0_6;
		if (start == 1'b0 && ^(encode_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_6_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %6 = mul nsw i32 %5, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		encode_0_6_reg <= encode_0_6;
		if (start == 1'b0 && ^(encode_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %7 = add nsw i32 %6, %2*/
		encode_0_7 = (encode_0_6 + encode_0_2_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %7 = add nsw i32 %6, %2*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		encode_0_7_reg <= encode_0_7;
		if (start == 1'b0 && ^(encode_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %8 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
		encode_0_8 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %8 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		encode_0_8_reg <= encode_0_8;
		if (start == 1'b0 && ^(encode_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_8_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_9 = encode_0_9_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %9 = mul nsw i32 %8, 212*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		encode_0_9_reg <= encode_0_9;
		if (start == 1'b0 && ^(encode_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_9_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %9 = mul nsw i32 %8, 212*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		encode_0_9_reg <= encode_0_9;
		if (start == 1'b0 && ^(encode_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %10 = add nsw i32 %9, %4*/
		encode_0_10 = (encode_0_9 + encode_0_4_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %10 = add nsw i32 %9, %4*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		encode_0_10_reg <= encode_0_10;
		if (start == 1'b0 && ^(encode_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %11 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
		encode_0_11 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %11 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		encode_0_11_reg <= encode_0_11;
		if (start == 1'b0 && ^(encode_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_11_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_12 = encode_0_12_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %12 = mul nsw i32 %11, 48*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		encode_0_12_reg <= encode_0_12;
		if (start == 1'b0 && ^(encode_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_12_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %12 = mul nsw i32 %11, 48*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		encode_0_12_reg <= encode_0_12;
		if (start == 1'b0 && ^(encode_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_12_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %13 = add nsw i32 %12, %7*/
		encode_0_13 = (encode_0_12 + encode_0_7_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %13 = add nsw i32 %12, %7*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		encode_0_13_reg <= encode_0_13;
		if (start == 1'b0 && ^(encode_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %14 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
		encode_0_14 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %14 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		encode_0_14_reg <= encode_0_14;
		if (start == 1'b0 && ^(encode_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_14_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_15 = encode_0_15_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %15 = mul nsw i32 %14, -624*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		encode_0_15_reg <= encode_0_15;
		if (start == 1'b0 && ^(encode_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_15_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %15 = mul nsw i32 %14, -624*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		encode_0_15_reg <= encode_0_15;
		if (start == 1'b0 && ^(encode_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_15_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %16 = add nsw i32 %15, %10*/
		encode_0_16 = (encode_0_15 + encode_0_10_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %16 = add nsw i32 %15, %10*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		encode_0_16_reg <= encode_0_16;
		if (start == 1'b0 && ^(encode_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_16_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
		encode_0_17 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		encode_0_17_reg <= encode_0_17;
		if (start == 1'b0 && ^(encode_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_17_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %18 = shl nsw i32 %17, 7*/
		encode_0_18 = (encode_0_17 <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %18 = shl nsw i32 %17, 7*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		encode_0_18_reg <= encode_0_18;
		if (start == 1'b0 && ^(encode_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_18_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %19 = add nsw i32 %18, %13*/
		encode_0_19 = (encode_0_18 + encode_0_13);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %19 = add nsw i32 %18, %13*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		encode_0_19_reg <= encode_0_19;
		if (start == 1'b0 && ^(encode_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_19_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
		encode_0_20 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		encode_0_20_reg <= encode_0_20;
		if (start == 1'b0 && ^(encode_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_20_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_21 = encode_0_21_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %21 = mul nsw i32 %20, 1448*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		encode_0_21_reg <= encode_0_21;
		if (start == 1'b0 && ^(encode_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_21_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %21 = mul nsw i32 %20, 1448*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		encode_0_21_reg <= encode_0_21;
		if (start == 1'b0 && ^(encode_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_21_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %22 = add nsw i32 %21, %16*/
		encode_0_22 = (encode_0_21 + encode_0_16_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %22 = add nsw i32 %21, %16*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		encode_0_22_reg <= encode_0_22;
		if (start == 1'b0 && ^(encode_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_22_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
		encode_0_23 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		encode_0_23_reg <= encode_0_23;
		if (start == 1'b0 && ^(encode_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_23_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_24 = encode_0_24_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %24 = mul nsw i32 %23, -840*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		encode_0_24_reg <= encode_0_24;
		if (start == 1'b0 && ^(encode_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_24_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %24 = mul nsw i32 %23, -840*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		encode_0_24_reg <= encode_0_24;
		if (start == 1'b0 && ^(encode_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_24_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %25 = add nsw i32 %24, %19*/
		encode_0_25 = (encode_0_24 + encode_0_19_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %25 = add nsw i32 %24, %19*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		encode_0_25_reg <= encode_0_25;
		if (start == 1'b0 && ^(encode_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_25_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
		encode_0_26 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		encode_0_26_reg <= encode_0_26;
		if (start == 1'b0 && ^(encode_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_26_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_27 = encode_0_27_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %27 = mul nsw i32 %26, -3220*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		encode_0_27_reg <= encode_0_27;
		if (start == 1'b0 && ^(encode_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_27_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %27 = mul nsw i32 %26, -3220*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		encode_0_27_reg <= encode_0_27;
		if (start == 1'b0 && ^(encode_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_27_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %28 = add nsw i32 %27, %22*/
		encode_0_28 = (encode_0_27 + encode_0_22_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %28 = add nsw i32 %27, %22*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		encode_0_28_reg <= encode_0_28;
		if (start == 1'b0 && ^(encode_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_28_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
		encode_0_29 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		encode_0_29_reg <= encode_0_29;
		if (start == 1'b0 && ^(encode_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_29_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_30 = encode_0_30_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %30 = mul nsw i32 %29, 3804*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		encode_0_30_reg <= encode_0_30;
		if (start == 1'b0 && ^(encode_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_30_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %30 = mul nsw i32 %29, 3804*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		encode_0_30_reg <= encode_0_30;
		if (start == 1'b0 && ^(encode_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_30_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %31 = add nsw i32 %30, %25*/
		encode_0_31 = (encode_0_30 + encode_0_25_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %31 = add nsw i32 %30, %25*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		encode_0_31_reg <= encode_0_31;
		if (start == 1'b0 && ^(encode_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_31_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
		encode_0_32 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		encode_0_32_reg <= encode_0_32;
		if (start == 1'b0 && ^(encode_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_32_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_33 = encode_0_33_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %33 = mul nsw i32 %32, 15504*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		encode_0_33_reg <= encode_0_33;
		if (start == 1'b0 && ^(encode_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_33_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %33 = mul nsw i32 %32, 15504*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		encode_0_33_reg <= encode_0_33;
		if (start == 1'b0 && ^(encode_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_33_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %34 = add nsw i32 %33, %28*/
		encode_0_34 = (encode_0_33 + encode_0_28_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %34 = add nsw i32 %33, %28*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		encode_0_34_reg <= encode_0_34;
		if (start == 1'b0 && ^(encode_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_34_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
		encode_0_35 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		encode_0_35_reg <= encode_0_35;
		if (start == 1'b0 && ^(encode_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_35_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_36 = encode_0_36_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %36 = mul nsw i32 %35, 15504*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		encode_0_36_reg <= encode_0_36;
		if (start == 1'b0 && ^(encode_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_36_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %36 = mul nsw i32 %35, 15504*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		encode_0_36_reg <= encode_0_36;
		if (start == 1'b0 && ^(encode_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_36_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %37 = add nsw i32 %36, %31*/
		encode_0_37 = (encode_0_36 + encode_0_31_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %37 = add nsw i32 %36, %31*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		encode_0_37_reg <= encode_0_37;
		if (start == 1'b0 && ^(encode_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_37_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
		encode_0_38 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		encode_0_38_reg <= encode_0_38;
		if (start == 1'b0 && ^(encode_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_38_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_39 = encode_0_39_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %39 = mul nsw i32 %38, 3804*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		encode_0_39_reg <= encode_0_39;
		if (start == 1'b0 && ^(encode_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_39_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %39 = mul nsw i32 %38, 3804*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		encode_0_39_reg <= encode_0_39;
		if (start == 1'b0 && ^(encode_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_39_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %40 = add nsw i32 %39, %34*/
		encode_0_40 = (encode_0_39 + encode_0_34_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %40 = add nsw i32 %39, %34*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		encode_0_40_reg <= encode_0_40;
		if (start == 1'b0 && ^(encode_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_40_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
		encode_0_41 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		encode_0_41_reg <= encode_0_41;
		if (start == 1'b0 && ^(encode_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_41_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_42 = encode_0_42_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %42 = mul nsw i32 %41, -3220*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		encode_0_42_reg <= encode_0_42;
		if (start == 1'b0 && ^(encode_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_42_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %42 = mul nsw i32 %41, -3220*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		encode_0_42_reg <= encode_0_42;
		if (start == 1'b0 && ^(encode_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_42_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %43 = add nsw i32 %42, %37*/
		encode_0_43 = (encode_0_42 + encode_0_37_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %43 = add nsw i32 %42, %37*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		encode_0_43_reg <= encode_0_43;
		if (start == 1'b0 && ^(encode_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_43_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
		encode_0_44 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		encode_0_44_reg <= encode_0_44;
		if (start == 1'b0 && ^(encode_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_44_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_45 = encode_0_45_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %45 = mul nsw i32 %44, -840*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		encode_0_45_reg <= encode_0_45;
		if (start == 1'b0 && ^(encode_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_45_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %45 = mul nsw i32 %44, -840*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		encode_0_45_reg <= encode_0_45;
		if (start == 1'b0 && ^(encode_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_45_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %46 = add nsw i32 %45, %40*/
		encode_0_46 = (encode_0_45 + encode_0_40_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %46 = add nsw i32 %45, %40*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		encode_0_46_reg <= encode_0_46;
		if (start == 1'b0 && ^(encode_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_46_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
		encode_0_47 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		encode_0_47_reg <= encode_0_47;
		if (start == 1'b0 && ^(encode_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_47_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_48 = encode_0_48_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %48 = mul nsw i32 %47, 1448*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		encode_0_48_reg <= encode_0_48;
		if (start == 1'b0 && ^(encode_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_48_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %48 = mul nsw i32 %47, 1448*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		encode_0_48_reg <= encode_0_48;
		if (start == 1'b0 && ^(encode_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_48_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %49 = add nsw i32 %48, %43*/
		encode_0_49 = (encode_0_48 + encode_0_43_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %49 = add nsw i32 %48, %43*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		encode_0_49_reg <= encode_0_49;
		if (start == 1'b0 && ^(encode_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_49_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
		encode_0_50 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		encode_0_50_reg <= encode_0_50;
		if (start == 1'b0 && ^(encode_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_50_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %51 = shl nsw i32 %50, 7*/
		encode_0_51 = (encode_0_50 <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %51 = shl nsw i32 %50, 7*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		encode_0_51_reg <= encode_0_51;
		if (start == 1'b0 && ^(encode_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_51_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %52 = add nsw i32 %51, %46*/
		encode_0_52 = (encode_0_51 + encode_0_46);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %52 = add nsw i32 %51, %46*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		encode_0_52_reg <= encode_0_52;
		if (start == 1'b0 && ^(encode_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_52_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
		encode_0_53 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		encode_0_53_reg <= encode_0_53;
		if (start == 1'b0 && ^(encode_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_53_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_54 = encode_0_54_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %54 = mul nsw i32 %53, -624*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		encode_0_54_reg <= encode_0_54;
		if (start == 1'b0 && ^(encode_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_54_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %54 = mul nsw i32 %53, -624*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		encode_0_54_reg <= encode_0_54;
		if (start == 1'b0 && ^(encode_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_54_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %55 = add nsw i32 %54, %49*/
		encode_0_55 = (encode_0_54 + encode_0_49_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %55 = add nsw i32 %54, %49*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		encode_0_55_reg <= encode_0_55;
		if (start == 1'b0 && ^(encode_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_55_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
		encode_0_56 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		encode_0_56_reg <= encode_0_56;
		if (start == 1'b0 && ^(encode_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_56_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_57 = encode_0_57_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %57 = mul nsw i32 %56, 48*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		encode_0_57_reg <= encode_0_57;
		if (start == 1'b0 && ^(encode_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_57_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %57 = mul nsw i32 %56, 48*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		encode_0_57_reg <= encode_0_57;
		if (start == 1'b0 && ^(encode_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_57_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %58 = add nsw i32 %57, %52*/
		encode_0_58 = (encode_0_57 + encode_0_52_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %58 = add nsw i32 %57, %52*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		encode_0_58_reg <= encode_0_58;
		if (start == 1'b0 && ^(encode_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_58_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
		encode_0_59 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		encode_0_59_reg <= encode_0_59;
		if (start == 1'b0 && ^(encode_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_59_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_60 = encode_0_60_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %60 = mul nsw i32 %59, 212*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		encode_0_60_reg <= encode_0_60;
		if (start == 1'b0 && ^(encode_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_60_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %60 = mul nsw i32 %59, 212*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		encode_0_60_reg <= encode_0_60;
		if (start == 1'b0 && ^(encode_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_60_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %61 = add nsw i32 %60, %55*/
		encode_0_61 = (encode_0_60 + encode_0_55_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %61 = add nsw i32 %60, %55*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		encode_0_61_reg <= encode_0_61;
		if (start == 1'b0 && ^(encode_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_61_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %62 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
		encode_0_62 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %62 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		encode_0_62_reg <= encode_0_62;
		if (start == 1'b0 && ^(encode_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_62_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_63 = encode_0_63_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %63 = mul nsw i32 %62, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		encode_0_63_reg <= encode_0_63;
		if (start == 1'b0 && ^(encode_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_63_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %63 = mul nsw i32 %62, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		encode_0_63_reg <= encode_0_63;
		if (start == 1'b0 && ^(encode_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_63_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %64 = add nsw i32 %63, %58*/
		encode_0_64 = (encode_0_63 + encode_0_58_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %64 = add nsw i32 %63, %58*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		encode_0_64_reg <= encode_0_64;
		if (start == 1'b0 && ^(encode_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_64_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %65 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
		encode_0_65 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %65 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		encode_0_65_reg <= encode_0_65;
		if (start == 1'b0 && ^(encode_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_65_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_66 = encode_0_66_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %66 = mul nsw i32 %65, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		encode_0_66_reg <= encode_0_66;
		if (start == 1'b0 && ^(encode_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_66_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %66 = mul nsw i32 %65, -44*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		encode_0_66_reg <= encode_0_66;
		if (start == 1'b0 && ^(encode_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_66_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %67 = add nsw i32 %66, %61*/
		encode_0_67 = (encode_0_66 + encode_0_61_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %67 = add nsw i32 %66, %61*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		encode_0_67_reg <= encode_0_67;
		if (start == 1'b0 && ^(encode_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_67_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %68 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
		encode_0_68 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %68 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		encode_0_68_reg <= encode_0_68;
		if (start == 1'b0 && ^(encode_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_68_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_69 = encode_0_69_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %69 = mul nsw i32 %68, 12*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		encode_0_69_reg <= encode_0_69;
		if (start == 1'b0 && ^(encode_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_69_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %69 = mul nsw i32 %68, 12*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		encode_0_69_reg <= encode_0_69;
		if (start == 1'b0 && ^(encode_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_69_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %70 = add nsw i32 %69, %64*/
		encode_0_70 = (encode_0_69 + encode_0_64_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %70 = add nsw i32 %69, %64*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		encode_0_70_reg <= encode_0_70;
		if (start == 1'b0 && ^(encode_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_70_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %71 = add nsw i32 %70, %67*/
		encode_0_71 = (encode_0_70 + encode_0_67);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %71 = add nsw i32 %70, %67*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		encode_0_71_reg <= encode_0_71;
		if (start == 1'b0 && ^(encode_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_71_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %72 = ashr i32 %71, 15*/
		encode_0_72 = ($signed(encode_0_71) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %72 = ashr i32 %71, 15*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		encode_0_72_reg <= encode_0_72;
		if (start == 1'b0 && ^(encode_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_72_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %73 = sub nsw i32 %67, %70*/
		encode_0_73 = (encode_0_67 - encode_0_70);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %73 = sub nsw i32 %67, %70*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		encode_0_73_reg <= encode_0_73;
		if (start == 1'b0 && ^(encode_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_73_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %74 = ashr i32 %73, 15*/
		encode_0_74 = ($signed(encode_0_73) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %74 = ashr i32 %73, 15*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		encode_0_74_reg <= encode_0_74;
		if (start == 1'b0 && ^(encode_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_74_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %75 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		encode_0_75 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %75 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		encode_0_75_reg <= encode_0_75;
		if (start == 1'b0 && ^(encode_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_75_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %76 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		encode_0_76 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %76 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		encode_0_76_reg <= encode_0_76;
		if (start == 1'b0 && ^(encode_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_76_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_77 = encode_0_77_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %77 = mul nsw i32 %76, %75*/
	if ((cur_state == LEGUP_F_encode_BB__0_16)) begin
		encode_0_77_reg <= encode_0_77;
		if (start == 1'b0 && ^(encode_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_77_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %77 = mul nsw i32 %76, %75*/
	if ((cur_state == LEGUP_F_encode_BB__0_16)) begin
		encode_0_77_reg <= encode_0_77;
		if (start == 1'b0 && ^(encode_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_77_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %78 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		encode_0_78 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %78 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_16)) begin
		encode_0_78_reg <= encode_0_78;
		if (start == 1'b0 && ^(encode_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_78_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %79 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		encode_0_79 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %79 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_16)) begin
		encode_0_79_reg <= encode_0_79;
		if (start == 1'b0 && ^(encode_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_79_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_80 = encode_0_80_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %80 = mul nsw i32 %79, %78*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		encode_0_80_reg <= encode_0_80;
		if (start == 1'b0 && ^(encode_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_80_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %80 = mul nsw i32 %79, %78*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		encode_0_80_reg <= encode_0_80;
		if (start == 1'b0 && ^(encode_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_80_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %81 = add nsw i32 %80, %77*/
		encode_0_81 = (encode_0_80 + encode_0_77_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %81 = add nsw i32 %80, %77*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		encode_0_81_reg <= encode_0_81;
		if (start == 1'b0 && ^(encode_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_81_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		encode_0_82 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		encode_0_82_reg <= encode_0_82;
		if (start == 1'b0 && ^(encode_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_82_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		encode_0_83 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		encode_0_83_reg <= encode_0_83;
		if (start == 1'b0 && ^(encode_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_83_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_84 = encode_0_84_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %84 = mul nsw i32 %83, %82*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		encode_0_84_reg <= encode_0_84;
		if (start == 1'b0 && ^(encode_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_84_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %84 = mul nsw i32 %83, %82*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		encode_0_84_reg <= encode_0_84;
		if (start == 1'b0 && ^(encode_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_84_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %85 = add nsw i32 %81, %84*/
		encode_0_85 = (encode_0_81_reg + encode_0_84);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %85 = add nsw i32 %81, %84*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		encode_0_85_reg <= encode_0_85;
		if (start == 1'b0 && ^(encode_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_85_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		encode_0_86 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		encode_0_86_reg <= encode_0_86;
		if (start == 1'b0 && ^(encode_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_86_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %87 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		encode_0_87 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %87 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		encode_0_87_reg <= encode_0_87;
		if (start == 1'b0 && ^(encode_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_87_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_88 = encode_0_88_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %88 = mul nsw i32 %87, %86*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		encode_0_88_reg <= encode_0_88;
		if (start == 1'b0 && ^(encode_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_88_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %88 = mul nsw i32 %87, %86*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		encode_0_88_reg <= encode_0_88;
		if (start == 1'b0 && ^(encode_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_88_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %89 = add nsw i32 %85, %88*/
		encode_0_89 = (encode_0_85_reg + encode_0_88);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %89 = add nsw i32 %85, %88*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		encode_0_89_reg <= encode_0_89;
		if (start == 1'b0 && ^(encode_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_89_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		encode_0_90 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		encode_0_90_reg <= encode_0_90;
		if (start == 1'b0 && ^(encode_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_90_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %91 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		encode_0_91 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %91 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		encode_0_91_reg <= encode_0_91;
		if (start == 1'b0 && ^(encode_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_91_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_92 = encode_0_92_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %92 = mul nsw i32 %91, %90*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		encode_0_92_reg <= encode_0_92;
		if (start == 1'b0 && ^(encode_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_92_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %92 = mul nsw i32 %91, %90*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		encode_0_92_reg <= encode_0_92;
		if (start == 1'b0 && ^(encode_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_92_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %93 = add nsw i32 %89, %92*/
		encode_0_93 = (encode_0_89_reg + encode_0_92);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %93 = add nsw i32 %89, %92*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		encode_0_93_reg <= encode_0_93;
		if (start == 1'b0 && ^(encode_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_93_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		encode_0_94 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		encode_0_94_reg <= encode_0_94;
		if (start == 1'b0 && ^(encode_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_94_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %95 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		encode_0_95 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %95 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		encode_0_95_reg <= encode_0_95;
		if (start == 1'b0 && ^(encode_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_95_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_96 = encode_0_96_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %96 = mul nsw i32 %95, %94*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		encode_0_96_reg <= encode_0_96;
		if (start == 1'b0 && ^(encode_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_96_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %96 = mul nsw i32 %95, %94*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		encode_0_96_reg <= encode_0_96;
		if (start == 1'b0 && ^(encode_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_96_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %97 = add nsw i32 %93, %96*/
		encode_0_97 = (encode_0_93_reg + encode_0_96);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %97 = add nsw i32 %93, %96*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		encode_0_97_reg <= encode_0_97;
		if (start == 1'b0 && ^(encode_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_97_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %98 = ashr i32 %97, 14*/
		encode_0_98 = ($signed(encode_0_97) >>> 32'd14);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %98 = ashr i32 %97, 14*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		encode_0_98_reg <= encode_0_98;
		if (start == 1'b0 && ^(encode_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_98_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %99 = load i32* @rlt1, align 4, !tbaa !1*/
		encode_0_99 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %99 = load i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		encode_0_99_reg <= encode_0_99;
		if (start == 1'b0 && ^(encode_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_99_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %100 = load i32* @al1, align 4, !tbaa !1*/
		encode_0_100 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %100 = load i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		encode_0_100_reg <= encode_0_100;
		if (start == 1'b0 && ^(encode_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_100_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %101 = load i32* @rlt2, align 4, !tbaa !1*/
		encode_0_101 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %101 = load i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		encode_0_101_reg <= encode_0_101;
		if (start == 1'b0 && ^(encode_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_101_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %102 = load i32* @al2, align 4, !tbaa !1*/
		encode_0_102 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %102 = load i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		encode_0_102_reg <= encode_0_102;
		if (start == 1'b0 && ^(encode_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_102_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_103 = encode_0_103_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %103 = mul i32 %100, %99*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		encode_0_103_reg <= encode_0_103;
		if (start == 1'b0 && ^(encode_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_103_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %103 = mul i32 %100, %99*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		encode_0_103_reg <= encode_0_103;
		if (start == 1'b0 && ^(encode_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_103_reg"); $finish; end
	end
end
always @(*) begin
	encode_0_104 = encode_0_104_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %104 = mul i32 %102, %101*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		encode_0_104_reg <= encode_0_104;
		if (start == 1'b0 && ^(encode_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_104_reg"); $finish; end
	end
	/* encode: %0*/
	/*   %104 = mul i32 %102, %101*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		encode_0_104_reg <= encode_0_104;
		if (start == 1'b0 && ^(encode_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_104_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %tmp.i = add i32 %104, %103*/
		encode_0_tmpi = (encode_0_104 + encode_0_103_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %tmp.i = add i32 %104, %103*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		encode_0_tmpi_reg <= encode_0_tmpi;
		if (start == 1'b0 && ^(encode_0_tmpi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_tmpi_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %tmp1.i = shl i32 %tmp.i, 1*/
		encode_0_tmp1i = (encode_0_tmpi <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %tmp1.i = shl i32 %tmp.i, 1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		encode_0_tmp1i_reg <= encode_0_tmp1i;
		if (start == 1'b0 && ^(encode_0_tmp1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_tmp1i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %105 = ashr i32 %tmp1.i, 15*/
		encode_0_105 = ($signed(encode_0_tmp1i) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %105 = ashr i32 %tmp1.i, 15*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		encode_0_105_reg <= encode_0_105;
		if (start == 1'b0 && ^(encode_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_105_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %106 = add nsw i32 %105, %98*/
		encode_0_106 = (encode_0_105 + encode_0_98_reg);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %106 = add nsw i32 %105, %98*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		encode_0_106_reg <= encode_0_106;
		if (start == 1'b0 && ^(encode_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_106_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %107 = sub nsw i32 %72, %106*/
		encode_0_107 = (encode_0_72_reg - encode_0_106);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %107 = sub nsw i32 %72, %106*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		encode_0_107_reg <= encode_0_107;
		if (start == 1'b0 && ^(encode_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_107_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %108 = load i32* @detl, align 4, !tbaa !1*/
		encode_0_108 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %108 = load i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		encode_0_108_reg <= encode_0_108;
		if (start == 1'b0 && ^(encode_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_108_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %109 = icmp sgt i32 %107, -1*/
		encode_0_109 = ($signed(encode_0_107) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %109 = icmp sgt i32 %107, -1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		encode_0_109_reg <= encode_0_109;
		if (start == 1'b0 && ^(encode_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_109_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %110 = sub nsw i32 0, %107*/
		encode_0_110 = (32'd0 - encode_0_107);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %110 = sub nsw i32 0, %107*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		encode_0_110_reg <= encode_0_110;
		if (start == 1'b0 && ^(encode_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_110_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %0*/
	/*   %m.0.i.i = select i1 %109, i32 %107, i32 %110*/
		encode_0_m0ii = (encode_0_109 ? encode_0_107 : encode_0_110);
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %m.0.i.i = select i1 %109, i32 %107, i32 %110*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		encode_0_m0ii_reg <= encode_0_m0ii;
		if (start == 1'b0 && ^(encode_0_m0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_0_m0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %111*/
	/*   %112 = add nsw i32 %115, 1*/
		encode_111_112 = (encode_114_115_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %111*/
	/*   %112 = add nsw i32 %115, 1*/
	if ((cur_state == LEGUP_F_encode_BB__111_35)) begin
		encode_111_112_reg <= encode_111_112;
		if (start == 1'b0 && ^(encode_111_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_111_112_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %111*/
	/*   %113 = icmp slt i32 %116, 30*/
		encode_111_113 = ($signed(encode_114_116_reg) < $signed(32'd30));
end
always @(posedge clk) begin
	/* encode: %111*/
	/*   %113 = icmp slt i32 %116, 30*/
	if ((cur_state == LEGUP_F_encode_BB__111_35)) begin
		encode_111_113_reg <= encode_111_113;
		if (start == 1'b0 && ^(encode_111_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_111_113_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %114*/
	/*   %115 = phi i32 [ 0, %0 ], [ %112, %111 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_34) & (memory_controller_waitrequest == 1'd0))) begin
		encode_114_115 = 32'd0;
	end
	/* encode: %114*/
	/*   %115 = phi i32 [ 0, %0 ], [ %112, %111 ]*/
	else /* if ((((cur_state == LEGUP_F_encode_BB__111_35) & (memory_controller_waitrequest == 1'd0)) & (encode_111_113 == 1'd1))) */ begin
		encode_114_115 = encode_111_112;
	end
end
always @(posedge clk) begin
	/* encode: %114*/
	/*   %115 = phi i32 [ 0, %0 ], [ %112, %111 ]*/
	if (((cur_state == LEGUP_F_encode_BB__0_34) & (memory_controller_waitrequest == 1'd0))) begin
		encode_114_115_reg <= encode_114_115;
		if (start == 1'b0 && ^(encode_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_114_115_reg"); $finish; end
	end
	/* encode: %114*/
	/*   %115 = phi i32 [ 0, %0 ], [ %112, %111 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__111_35) & (memory_controller_waitrequest == 1'd0)) & (encode_111_113 == 1'd1))) begin
		encode_114_115_reg <= encode_114_115;
		if (start == 1'b0 && ^(encode_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_114_115_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %114*/
	/*   %116 = add i32 %115, 1*/
		encode_114_116 = (encode_114_115_reg + 32'd1);
end
always @(posedge clk) begin
	/* encode: %114*/
	/*   %116 = add i32 %115, 1*/
	if ((cur_state == LEGUP_F_encode_BB__114_36)) begin
		encode_114_116_reg <= encode_114_116;
		if (start == 1'b0 && ^(encode_114_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_114_116_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %114*/
	/*   %scevgep = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %115*/
		encode_114_scevgep = (1'd0 | (4 * encode_114_115_reg));
end
always @(posedge clk) begin
	/* encode: %114*/
	/*   %scevgep = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %115*/
	if ((cur_state == LEGUP_F_encode_BB__114_36)) begin
		encode_114_scevgep_reg <= encode_114_scevgep;
		if (start == 1'b0 && ^(encode_114_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_114_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %114*/
	/*   %117 = load i32* %scevgep, align 4, !tbaa !1*/
		encode_114_117 = decis_levl_out_a;
end
always @(posedge clk) begin
	/* encode: %114*/
	/*   %117 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__114_37)) begin
		encode_114_117_reg <= encode_114_117;
		if (start == 1'b0 && ^(encode_114_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_114_117_reg"); $finish; end
	end
end
always @(*) begin
	encode_114_118 = encode_114_118_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %114*/
	/*   %118 = mul nsw i32 %117, %108*/
	if ((cur_state == LEGUP_F_encode_BB__114_38)) begin
		encode_114_118_reg <= encode_114_118;
		if (start == 1'b0 && ^(encode_114_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_114_118_reg"); $finish; end
	end
	/* encode: %114*/
	/*   %118 = mul nsw i32 %117, %108*/
	if ((cur_state == LEGUP_F_encode_BB__114_38)) begin
		encode_114_118_reg <= encode_114_118;
		if (start == 1'b0 && ^(encode_114_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_114_118_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %114*/
	/*   %119 = ashr i32 %118, 15*/
		encode_114_119 = ($signed(encode_114_118) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %114*/
	/*   %119 = ashr i32 %118, 15*/
	if ((cur_state == LEGUP_F_encode_BB__114_38)) begin
		encode_114_119_reg <= encode_114_119;
		if (start == 1'b0 && ^(encode_114_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_114_119_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %114*/
	/*   %120 = icmp sgt i32 %m.0.i.i, %119*/
		encode_114_120 = ($signed(encode_0_m0ii_reg) > $signed(encode_114_119));
end
always @(posedge clk) begin
	/* encode: %114*/
	/*   %120 = icmp sgt i32 %m.0.i.i, %119*/
	if ((cur_state == LEGUP_F_encode_BB__114_38)) begin
		encode_114_120_reg <= encode_114_120;
		if (start == 1'b0 && ^(encode_114_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_114_120_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %mil.0.lcssa.i = phi i32 [ %115, %114 ], [ %116, %111 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__111_35) & (memory_controller_waitrequest == 1'd0)) & (encode_111_113 == 1'd0))) begin
		encode_quantlexit_mil0lcssai = encode_114_116_reg;
	end
	/* encode: %quantl.exit*/
	/*   %mil.0.lcssa.i = phi i32 [ %115, %114 ], [ %116, %111 ]*/
	else /* if ((((cur_state == LEGUP_F_encode_BB__114_38) & (memory_controller_waitrequest == 1'd0)) & (encode_114_120 == 1'd0))) */ begin
		encode_quantlexit_mil0lcssai = encode_114_115_reg;
	end
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %mil.0.lcssa.i = phi i32 [ %115, %114 ], [ %116, %111 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__111_35) & (memory_controller_waitrequest == 1'd0)) & (encode_111_113 == 1'd0))) begin
		encode_quantlexit_mil0lcssai_reg <= encode_quantlexit_mil0lcssai;
		if (start == 1'b0 && ^(encode_quantlexit_mil0lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_mil0lcssai_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %mil.0.lcssa.i = phi i32 [ %115, %114 ], [ %116, %111 ]*/
	if ((((cur_state == LEGUP_F_encode_BB__114_38) & (memory_controller_waitrequest == 1'd0)) & (encode_114_120 == 1'd0))) begin
		encode_quantlexit_mil0lcssai_reg <= encode_quantlexit_mil0lcssai;
		if (start == 1'b0 && ^(encode_quantlexit_mil0lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_mil0lcssai_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %quant26bt_pos.quant26bt_neg.i = select i1 %109, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
		encode_quantlexit_quant26bt_posquant26bt_negi = (encode_0_109_reg ? `TAG_g_quant26bt_pos_a : `TAG_g_quant26bt_neg_a);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %quant26bt_pos.quant26bt_neg.i = select i1 %109, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_39)) begin
		encode_quantlexit_quant26bt_posquant26bt_negi_reg <= encode_quantlexit_quant26bt_posquant26bt_negi;
		if (start == 1'b0 && ^(encode_quantlexit_quant26bt_posquant26bt_negi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_quant26bt_posquant26bt_negi_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %ril.0.in.i = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg.i, i32 0, i32 %mil.0.lcssa.i*/
		encode_quantlexit_ril0ini = (encode_quantlexit_quant26bt_posquant26bt_negi_reg + (4 * encode_quantlexit_mil0lcssai_reg));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %ril.0.in.i = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg.i, i32 0, i32 %mil.0.lcssa.i*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		encode_quantlexit_ril0ini_reg <= encode_quantlexit_ril0ini;
		if (start == 1'b0 && ^(encode_quantlexit_ril0ini) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_ril0ini_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %ril.0.i = load i32* %ril.0.in.i, align 4*/
		encode_quantlexit_ril0i = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %ril.0.i = load i32* %ril.0.in.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_ril0i_reg <= encode_quantlexit_ril0i;
		if (start == 1'b0 && ^(encode_quantlexit_ril0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_ril0i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %121 = ashr i32 %ril.0.i, 2*/
		encode_quantlexit_121 = ($signed(encode_quantlexit_ril0i) >>> 32'd2);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %121 = ashr i32 %ril.0.i, 2*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_121_reg <= encode_quantlexit_121;
		if (start == 1'b0 && ^(encode_quantlexit_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_121_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %122 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %121*/
		encode_quantlexit_122 = (`TAG_g_qq4_code4_table_a | (4 * encode_quantlexit_121));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %122 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %121*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_122_reg <= encode_quantlexit_122;
		if (start == 1'b0 && ^(encode_quantlexit_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_122_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
		encode_quantlexit_123 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_123_reg <= encode_quantlexit_123;
		if (start == 1'b0 && ^(encode_quantlexit_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_123_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_124 = encode_quantlexit_124_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %124 = mul nsw i32 %123, %108*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		encode_quantlexit_124_reg <= encode_quantlexit_124;
		if (start == 1'b0 && ^(encode_quantlexit_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_124_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %124 = mul nsw i32 %123, %108*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		encode_quantlexit_124_reg <= encode_quantlexit_124;
		if (start == 1'b0 && ^(encode_quantlexit_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_124_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %125 = ashr i32 %124, 15*/
		encode_quantlexit_125 = ($signed(encode_quantlexit_124) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %125 = ashr i32 %124, 15*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		encode_quantlexit_125_reg <= encode_quantlexit_125;
		if (start == 1'b0 && ^(encode_quantlexit_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_125_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %126 = load i32* @nbl, align 4, !tbaa !1*/
		encode_quantlexit_126 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %126 = load i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_41)) begin
		encode_quantlexit_126_reg <= encode_quantlexit_126;
		if (start == 1'b0 && ^(encode_quantlexit_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_126_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_127 = encode_quantlexit_127_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %127 = mul nsw i32 %126, 127*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_127_reg <= encode_quantlexit_127;
		if (start == 1'b0 && ^(encode_quantlexit_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_127_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %127 = mul nsw i32 %126, 127*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_127_reg <= encode_quantlexit_127;
		if (start == 1'b0 && ^(encode_quantlexit_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_127_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %128 = ashr i32 %127, 7*/
		encode_quantlexit_128 = ($signed(encode_quantlexit_127) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %128 = ashr i32 %127, 7*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_128_reg <= encode_quantlexit_128;
		if (start == 1'b0 && ^(encode_quantlexit_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_128_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %129 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %121*/
		encode_quantlexit_129 = (`TAG_g_wl_code_table_a | (4 * encode_quantlexit_121));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %129 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %121*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		encode_quantlexit_129_reg <= encode_quantlexit_129;
		if (start == 1'b0 && ^(encode_quantlexit_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_129_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
		encode_quantlexit_130 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_130_reg <= encode_quantlexit_130;
		if (start == 1'b0 && ^(encode_quantlexit_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_130_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %131 = add nsw i32 %128, %130*/
		encode_quantlexit_131 = (encode_quantlexit_128_reg + encode_quantlexit_130);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %131 = add nsw i32 %128, %130*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_131_reg <= encode_quantlexit_131;
		if (start == 1'b0 && ^(encode_quantlexit_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_131_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %132 = icmp slt i32 %131, 0*/
		encode_quantlexit_132 = ($signed(encode_quantlexit_131) < $signed(32'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %132 = icmp slt i32 %131, 0*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_132_reg <= encode_quantlexit_132;
		if (start == 1'b0 && ^(encode_quantlexit_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_132_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %..i12 = select i1 %132, i32 0, i32 %131*/
		encode_quantlexit_i12 = (encode_quantlexit_132 ? 32'd0 : encode_quantlexit_131);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %..i12 = select i1 %132, i32 0, i32 %131*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_i12_reg <= encode_quantlexit_i12;
		if (start == 1'b0 && ^(encode_quantlexit_i12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_i12_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %133 = icmp sgt i32 %..i12, 18432*/
		encode_quantlexit_133 = ($signed(encode_quantlexit_i12) > $signed(32'd18432));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %133 = icmp sgt i32 %..i12, 18432*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_133_reg <= encode_quantlexit_133;
		if (start == 1'b0 && ^(encode_quantlexit_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_133_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %...i13 = select i1 %133, i32 18432, i32 %..i12*/
		encode_quantlexit_i13 = (encode_quantlexit_133 ? 32'd18432 : encode_quantlexit_i12);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %...i13 = select i1 %133, i32 18432, i32 %..i12*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_i13_reg <= encode_quantlexit_i13;
		if (start == 1'b0 && ^(encode_quantlexit_i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_i13_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %134 = lshr i32 %...i13, 6*/
		encode_quantlexit_134 = (encode_quantlexit_i13 >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %134 = lshr i32 %...i13, 6*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_134_reg <= encode_quantlexit_134;
		if (start == 1'b0 && ^(encode_quantlexit_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_134_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %135 = and i32 %134, 31*/
		encode_quantlexit_135 = (encode_quantlexit_134 & 32'd31);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %135 = and i32 %134, 31*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_135_reg <= encode_quantlexit_135;
		if (start == 1'b0 && ^(encode_quantlexit_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_135_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %136 = ashr i32 %...i13, 11*/
		encode_quantlexit_136 = ($signed(encode_quantlexit_i13) >>> 32'd11);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %136 = ashr i32 %...i13, 11*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_136_reg <= encode_quantlexit_136;
		if (start == 1'b0 && ^(encode_quantlexit_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_136_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %137 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %135*/
		encode_quantlexit_137 = (`TAG_g_ilb_table_a | (4 * encode_quantlexit_135_reg));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %137 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %135*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		encode_quantlexit_137_reg <= encode_quantlexit_137;
		if (start == 1'b0 && ^(encode_quantlexit_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_137_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
		encode_quantlexit_138 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		encode_quantlexit_138_reg <= encode_quantlexit_138;
		if (start == 1'b0 && ^(encode_quantlexit_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_138_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %139 = sub i32 9, %136*/
		encode_quantlexit_139 = (32'd9 - encode_quantlexit_136);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %139 = sub i32 9, %136*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_44)) begin
		encode_quantlexit_139_reg <= encode_quantlexit_139;
		if (start == 1'b0 && ^(encode_quantlexit_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_139_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %140 = ashr i32 %138, %139*/
		encode_quantlexit_140 = ($signed(encode_quantlexit_138) >>> encode_quantlexit_139_reg);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %140 = ashr i32 %138, %139*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		encode_quantlexit_140_reg <= encode_quantlexit_140;
		if (start == 1'b0 && ^(encode_quantlexit_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_140_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %141 = shl i32 %140, 3*/
		encode_quantlexit_141 = (encode_quantlexit_140 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %141 = shl i32 %140, 3*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		encode_quantlexit_141_reg <= encode_quantlexit_141;
		if (start == 1'b0 && ^(encode_quantlexit_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_141_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %142 = add nsw i32 %98, %125*/
		encode_quantlexit_142 = (encode_0_98_reg + encode_quantlexit_125);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %142 = add nsw i32 %98, %125*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		encode_quantlexit_142_reg <= encode_quantlexit_142;
		if (start == 1'b0 && ^(encode_quantlexit_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_142_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %143 = load i32* @plt1, align 4, !tbaa !1*/
		encode_quantlexit_143 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %143 = load i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_52)) begin
		encode_quantlexit_143_reg <= encode_quantlexit_143;
		if (start == 1'b0 && ^(encode_quantlexit_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_143_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %144 = load i32* @plt2, align 4, !tbaa !1*/
		encode_quantlexit_144 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %144 = load i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_52)) begin
		encode_quantlexit_144_reg <= encode_quantlexit_144;
		if (start == 1'b0 && ^(encode_quantlexit_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_144_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %145 = shl nsw i32 %100, 2*/
		encode_quantlexit_145 = (encode_0_100_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %145 = shl nsw i32 %100, 2*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_39)) begin
		encode_quantlexit_145_reg <= encode_quantlexit_145;
		if (start == 1'b0 && ^(encode_quantlexit_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_145_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_146 = encode_quantlexit_146_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %146 = mul nsw i32 %143, %142*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_146_reg <= encode_quantlexit_146;
		if (start == 1'b0 && ^(encode_quantlexit_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_146_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %146 = mul nsw i32 %143, %142*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_146_reg <= encode_quantlexit_146;
		if (start == 1'b0 && ^(encode_quantlexit_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_146_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %147 = icmp sgt i32 %146, -1*/
		encode_quantlexit_147 = ($signed(encode_quantlexit_146) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %147 = icmp sgt i32 %146, -1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_147_reg <= encode_quantlexit_147;
		if (start == 1'b0 && ^(encode_quantlexit_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_147_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %148 = sub nsw i32 0, %145*/
		encode_quantlexit_148 = (32'd0 - encode_quantlexit_145);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %148 = sub nsw i32 0, %145*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_39)) begin
		encode_quantlexit_148_reg <= encode_quantlexit_148;
		if (start == 1'b0 && ^(encode_quantlexit_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_148_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %.1.i8 = select i1 %147, i32 %148, i32 %145*/
		encode_quantlexit_1i8 = (encode_quantlexit_147 ? encode_quantlexit_148_reg : encode_quantlexit_145_reg);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %.1.i8 = select i1 %147, i32 %148, i32 %145*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_1i8_reg <= encode_quantlexit_1i8;
		if (start == 1'b0 && ^(encode_quantlexit_1i8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_1i8_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %149 = ashr i32 %.1.i8, 7*/
		encode_quantlexit_149 = ($signed(encode_quantlexit_1i8) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %149 = ashr i32 %.1.i8, 7*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_149_reg <= encode_quantlexit_149;
		if (start == 1'b0 && ^(encode_quantlexit_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_149_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_150 = encode_quantlexit_150_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %150 = mul nsw i32 %144, %142*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_150_reg <= encode_quantlexit_150;
		if (start == 1'b0 && ^(encode_quantlexit_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_150_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %150 = mul nsw i32 %144, %142*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_150_reg <= encode_quantlexit_150;
		if (start == 1'b0 && ^(encode_quantlexit_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_150_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %151 = ashr i32 %150, 31*/
		encode_quantlexit_151 = ($signed(encode_quantlexit_150) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %151 = ashr i32 %150, 31*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_151_reg <= encode_quantlexit_151;
		if (start == 1'b0 && ^(encode_quantlexit_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_151_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %152 = and i32 %151, -256*/
		encode_quantlexit_152 = (encode_quantlexit_151 & -32'd256);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %152 = and i32 %151, -256*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_152_reg <= encode_quantlexit_152;
		if (start == 1'b0 && ^(encode_quantlexit_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_152_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %153 = or i32 %152, 128*/
		encode_quantlexit_153 = (encode_quantlexit_152 | 32'd128);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %153 = or i32 %152, 128*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_153_reg <= encode_quantlexit_153;
		if (start == 1'b0 && ^(encode_quantlexit_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_153_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_154 = encode_quantlexit_154_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %154 = mul nsw i32 %102, 127*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		encode_quantlexit_154_reg <= encode_quantlexit_154;
		if (start == 1'b0 && ^(encode_quantlexit_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_154_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %154 = mul nsw i32 %102, 127*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		encode_quantlexit_154_reg <= encode_quantlexit_154;
		if (start == 1'b0 && ^(encode_quantlexit_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_154_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %155 = ashr i32 %154, 7*/
		encode_quantlexit_155 = ($signed(encode_quantlexit_154) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %155 = ashr i32 %154, 7*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		encode_quantlexit_155_reg <= encode_quantlexit_155;
		if (start == 1'b0 && ^(encode_quantlexit_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_155_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %wd4.0.i9 = add nsw i32 %149, %155*/
		encode_quantlexit_wd40i9 = (encode_quantlexit_149 + encode_quantlexit_155_reg);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %wd4.0.i9 = add nsw i32 %149, %155*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_wd40i9_reg <= encode_quantlexit_wd40i9;
		if (start == 1'b0 && ^(encode_quantlexit_wd40i9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_wd40i9_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %156 = add nsw i32 %wd4.0.i9, %153*/
		encode_quantlexit_156 = (encode_quantlexit_wd40i9 + encode_quantlexit_153);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %156 = add nsw i32 %wd4.0.i9, %153*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_156_reg <= encode_quantlexit_156;
		if (start == 1'b0 && ^(encode_quantlexit_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_156_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %157 = icmp sgt i32 %156, 12288*/
		encode_quantlexit_157 = ($signed(encode_quantlexit_156) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %157 = icmp sgt i32 %156, 12288*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_157_reg <= encode_quantlexit_157;
		if (start == 1'b0 && ^(encode_quantlexit_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_157_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %..i10 = select i1 %157, i32 12288, i32 %156*/
		encode_quantlexit_i10 = (encode_quantlexit_157 ? 32'd12288 : encode_quantlexit_156);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %..i10 = select i1 %157, i32 12288, i32 %156*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_i10_reg <= encode_quantlexit_i10;
		if (start == 1'b0 && ^(encode_quantlexit_i10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_i10_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %158 = icmp slt i32 %..i10, -12288*/
		encode_quantlexit_158 = ($signed(encode_quantlexit_i10_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %158 = icmp slt i32 %..i10, -12288*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		encode_quantlexit_158_reg <= encode_quantlexit_158;
		if (start == 1'b0 && ^(encode_quantlexit_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_158_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %...i11 = select i1 %158, i32 -12288, i32 %..i10*/
		encode_quantlexit_i11 = (encode_quantlexit_158 ? -32'd12288 : encode_quantlexit_i10_reg);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %...i11 = select i1 %158, i32 -12288, i32 %..i10*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		encode_quantlexit_i11_reg <= encode_quantlexit_i11;
		if (start == 1'b0 && ^(encode_quantlexit_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_i11_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_159 = encode_quantlexit_159_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %159 = mul nsw i32 %100, 255*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		encode_quantlexit_159_reg <= encode_quantlexit_159;
		if (start == 1'b0 && ^(encode_quantlexit_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_159_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %159 = mul nsw i32 %100, 255*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		encode_quantlexit_159_reg <= encode_quantlexit_159;
		if (start == 1'b0 && ^(encode_quantlexit_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_159_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %160 = ashr i32 %159, 8*/
		encode_quantlexit_160 = ($signed(encode_quantlexit_159) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %160 = ashr i32 %159, 8*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		encode_quantlexit_160_reg <= encode_quantlexit_160;
		if (start == 1'b0 && ^(encode_quantlexit_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_160_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %161 = ashr i32 %146, 31*/
		encode_quantlexit_161 = ($signed(encode_quantlexit_146) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %161 = ashr i32 %146, 31*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_161_reg <= encode_quantlexit_161;
		if (start == 1'b0 && ^(encode_quantlexit_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_161_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %162 = and i32 %161, -384*/
		encode_quantlexit_162 = (encode_quantlexit_161 & -32'd384);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %162 = and i32 %161, -384*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_162_reg <= encode_quantlexit_162;
		if (start == 1'b0 && ^(encode_quantlexit_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_162_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %163 = add nsw i32 %160, 192*/
		encode_quantlexit_163 = (encode_quantlexit_160 + 32'd192);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %163 = add nsw i32 %160, 192*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		encode_quantlexit_163_reg <= encode_quantlexit_163;
		if (start == 1'b0 && ^(encode_quantlexit_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_163_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %apl1.0.i5 = add nsw i32 %163, %162*/
		encode_quantlexit_apl10i5 = (encode_quantlexit_163_reg + encode_quantlexit_162);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %apl1.0.i5 = add nsw i32 %163, %162*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_apl10i5_reg <= encode_quantlexit_apl10i5;
		if (start == 1'b0 && ^(encode_quantlexit_apl10i5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_apl10i5_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %164 = sub nsw i32 15360, %...i11*/
		encode_quantlexit_164 = (32'd15360 - encode_quantlexit_i11);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %164 = sub nsw i32 15360, %...i11*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		encode_quantlexit_164_reg <= encode_quantlexit_164;
		if (start == 1'b0 && ^(encode_quantlexit_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_164_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %165 = icmp sgt i32 %apl1.0.i5, %164*/
		encode_quantlexit_165 = ($signed(encode_quantlexit_apl10i5_reg) > $signed(encode_quantlexit_164));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %165 = icmp sgt i32 %apl1.0.i5, %164*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		encode_quantlexit_165_reg <= encode_quantlexit_165;
		if (start == 1'b0 && ^(encode_quantlexit_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_165_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %.apl1.0.i6 = select i1 %165, i32 %164, i32 %apl1.0.i5*/
		encode_quantlexit_apl10i6 = (encode_quantlexit_165 ? encode_quantlexit_164 : encode_quantlexit_apl10i5_reg);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %.apl1.0.i6 = select i1 %165, i32 %164, i32 %apl1.0.i5*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		encode_quantlexit_apl10i6_reg <= encode_quantlexit_apl10i6;
		if (start == 1'b0 && ^(encode_quantlexit_apl10i6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_apl10i6_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %166 = sub nsw i32 0, %164*/
		encode_quantlexit_166 = (32'd0 - encode_quantlexit_164);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %166 = sub nsw i32 0, %164*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		encode_quantlexit_166_reg <= encode_quantlexit_166;
		if (start == 1'b0 && ^(encode_quantlexit_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_166_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %167 = icmp slt i32 %.apl1.0.i6, %166*/
		encode_quantlexit_167 = ($signed(encode_quantlexit_apl10i6_reg) < $signed(encode_quantlexit_166_reg));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %167 = icmp slt i32 %.apl1.0.i6, %166*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		encode_quantlexit_167_reg <= encode_quantlexit_167;
		if (start == 1'b0 && ^(encode_quantlexit_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_167_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %apl1.2.i7 = select i1 %167, i32 %166, i32 %.apl1.0.i6*/
		encode_quantlexit_apl12i7 = (encode_quantlexit_167 ? encode_quantlexit_166_reg : encode_quantlexit_apl10i6_reg);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %apl1.2.i7 = select i1 %167, i32 %166, i32 %.apl1.0.i6*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		encode_quantlexit_apl12i7_reg <= encode_quantlexit_apl12i7;
		if (start == 1'b0 && ^(encode_quantlexit_apl12i7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_apl12i7_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %168 = add nsw i32 %125, %106*/
		encode_quantlexit_168 = (encode_quantlexit_125 + encode_0_106_reg);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %168 = add nsw i32 %125, %106*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		encode_quantlexit_168_reg <= encode_quantlexit_168;
		if (start == 1'b0 && ^(encode_quantlexit_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_168_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
		encode_quantlexit_169 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_169_reg <= encode_quantlexit_169;
		if (start == 1'b0 && ^(encode_quantlexit_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_169_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		encode_quantlexit_170 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		encode_quantlexit_170_reg <= encode_quantlexit_170;
		if (start == 1'b0 && ^(encode_quantlexit_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_170_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_171 = encode_quantlexit_171_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %171 = mul nsw i32 %170, %169*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		encode_quantlexit_171_reg <= encode_quantlexit_171;
		if (start == 1'b0 && ^(encode_quantlexit_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_171_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %171 = mul nsw i32 %170, %169*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		encode_quantlexit_171_reg <= encode_quantlexit_171;
		if (start == 1'b0 && ^(encode_quantlexit_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_171_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
		encode_quantlexit_172 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		encode_quantlexit_172_reg <= encode_quantlexit_172;
		if (start == 1'b0 && ^(encode_quantlexit_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_172_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		encode_quantlexit_173 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		encode_quantlexit_173_reg <= encode_quantlexit_173;
		if (start == 1'b0 && ^(encode_quantlexit_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_173_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_174 = encode_quantlexit_174_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %174 = mul nsw i32 %173, %172*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		encode_quantlexit_174_reg <= encode_quantlexit_174;
		if (start == 1'b0 && ^(encode_quantlexit_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_174_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %174 = mul nsw i32 %173, %172*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		encode_quantlexit_174_reg <= encode_quantlexit_174;
		if (start == 1'b0 && ^(encode_quantlexit_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_174_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %175 = add nsw i32 %174, %171*/
		encode_quantlexit_175 = (encode_quantlexit_174 + encode_quantlexit_171_reg);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %175 = add nsw i32 %174, %171*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		encode_quantlexit_175_reg <= encode_quantlexit_175;
		if (start == 1'b0 && ^(encode_quantlexit_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_175_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
		encode_quantlexit_176 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		encode_quantlexit_176_reg <= encode_quantlexit_176;
		if (start == 1'b0 && ^(encode_quantlexit_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_176_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %177 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		encode_quantlexit_177 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %177 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		encode_quantlexit_177_reg <= encode_quantlexit_177;
		if (start == 1'b0 && ^(encode_quantlexit_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_177_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_178 = encode_quantlexit_178_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %178 = mul nsw i32 %177, %176*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		encode_quantlexit_178_reg <= encode_quantlexit_178;
		if (start == 1'b0 && ^(encode_quantlexit_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_178_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %178 = mul nsw i32 %177, %176*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		encode_quantlexit_178_reg <= encode_quantlexit_178;
		if (start == 1'b0 && ^(encode_quantlexit_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_178_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %179 = add nsw i32 %175, %178*/
		encode_quantlexit_179 = (encode_quantlexit_175_reg + encode_quantlexit_178);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %179 = add nsw i32 %175, %178*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		encode_quantlexit_179_reg <= encode_quantlexit_179;
		if (start == 1'b0 && ^(encode_quantlexit_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_179_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
		encode_quantlexit_180 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		encode_quantlexit_180_reg <= encode_quantlexit_180;
		if (start == 1'b0 && ^(encode_quantlexit_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_180_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		encode_quantlexit_181 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		encode_quantlexit_181_reg <= encode_quantlexit_181;
		if (start == 1'b0 && ^(encode_quantlexit_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_181_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_182 = encode_quantlexit_182_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %182 = mul nsw i32 %181, %180*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		encode_quantlexit_182_reg <= encode_quantlexit_182;
		if (start == 1'b0 && ^(encode_quantlexit_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_182_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %182 = mul nsw i32 %181, %180*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		encode_quantlexit_182_reg <= encode_quantlexit_182;
		if (start == 1'b0 && ^(encode_quantlexit_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_182_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %183 = add nsw i32 %179, %182*/
		encode_quantlexit_183 = (encode_quantlexit_179_reg + encode_quantlexit_182);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %183 = add nsw i32 %179, %182*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		encode_quantlexit_183_reg <= encode_quantlexit_183;
		if (start == 1'b0 && ^(encode_quantlexit_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_183_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %184 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
		encode_quantlexit_184 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %184 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		encode_quantlexit_184_reg <= encode_quantlexit_184;
		if (start == 1'b0 && ^(encode_quantlexit_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_184_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %185 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		encode_quantlexit_185 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %185 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		encode_quantlexit_185_reg <= encode_quantlexit_185;
		if (start == 1'b0 && ^(encode_quantlexit_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_185_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_186 = encode_quantlexit_186_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %186 = mul nsw i32 %185, %184*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		encode_quantlexit_186_reg <= encode_quantlexit_186;
		if (start == 1'b0 && ^(encode_quantlexit_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_186_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %186 = mul nsw i32 %185, %184*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		encode_quantlexit_186_reg <= encode_quantlexit_186;
		if (start == 1'b0 && ^(encode_quantlexit_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_186_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %187 = add nsw i32 %183, %186*/
		encode_quantlexit_187 = (encode_quantlexit_183_reg + encode_quantlexit_186);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %187 = add nsw i32 %183, %186*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		encode_quantlexit_187_reg <= encode_quantlexit_187;
		if (start == 1'b0 && ^(encode_quantlexit_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_187_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %188 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
		encode_quantlexit_188 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %188 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		encode_quantlexit_188_reg <= encode_quantlexit_188;
		if (start == 1'b0 && ^(encode_quantlexit_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_188_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %189 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		encode_quantlexit_189 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %189 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		encode_quantlexit_189_reg <= encode_quantlexit_189;
		if (start == 1'b0 && ^(encode_quantlexit_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_189_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_190 = encode_quantlexit_190_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %190 = mul nsw i32 %189, %188*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		encode_quantlexit_190_reg <= encode_quantlexit_190;
		if (start == 1'b0 && ^(encode_quantlexit_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_190_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %190 = mul nsw i32 %189, %188*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		encode_quantlexit_190_reg <= encode_quantlexit_190;
		if (start == 1'b0 && ^(encode_quantlexit_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_190_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %191 = add nsw i32 %187, %190*/
		encode_quantlexit_191 = (encode_quantlexit_187_reg + encode_quantlexit_190);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %191 = add nsw i32 %187, %190*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		encode_quantlexit_191_reg <= encode_quantlexit_191;
		if (start == 1'b0 && ^(encode_quantlexit_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_191_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %192 = ashr i32 %191, 14*/
		encode_quantlexit_192 = ($signed(encode_quantlexit_191) >>> 32'd14);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %192 = ashr i32 %191, 14*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		encode_quantlexit_192_reg <= encode_quantlexit_192;
		if (start == 1'b0 && ^(encode_quantlexit_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_192_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %193 = load i32* @rh1, align 4, !tbaa !1*/
		encode_quantlexit_193 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %193 = load i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		encode_quantlexit_193_reg <= encode_quantlexit_193;
		if (start == 1'b0 && ^(encode_quantlexit_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_193_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %194 = load i32* @ah1, align 4, !tbaa !1*/
		encode_quantlexit_194 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %194 = load i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		encode_quantlexit_194_reg <= encode_quantlexit_194;
		if (start == 1'b0 && ^(encode_quantlexit_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_194_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %195 = load i32* @rh2, align 4, !tbaa !1*/
		encode_quantlexit_195 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %195 = load i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		encode_quantlexit_195_reg <= encode_quantlexit_195;
		if (start == 1'b0 && ^(encode_quantlexit_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_195_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %196 = load i32* @ah2, align 4, !tbaa !1*/
		encode_quantlexit_196 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %196 = load i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		encode_quantlexit_196_reg <= encode_quantlexit_196;
		if (start == 1'b0 && ^(encode_quantlexit_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_196_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_197 = encode_quantlexit_197_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %197 = mul i32 %194, %193*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		encode_quantlexit_197_reg <= encode_quantlexit_197;
		if (start == 1'b0 && ^(encode_quantlexit_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_197_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %197 = mul i32 %194, %193*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		encode_quantlexit_197_reg <= encode_quantlexit_197;
		if (start == 1'b0 && ^(encode_quantlexit_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_197_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_198 = encode_quantlexit_198_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %198 = mul i32 %196, %195*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_198_reg <= encode_quantlexit_198;
		if (start == 1'b0 && ^(encode_quantlexit_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_198_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %198 = mul i32 %196, %195*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_198_reg <= encode_quantlexit_198;
		if (start == 1'b0 && ^(encode_quantlexit_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_198_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %tmp.i3 = add i32 %198, %197*/
		encode_quantlexit_tmpi3 = (encode_quantlexit_198 + encode_quantlexit_197_reg);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %tmp.i3 = add i32 %198, %197*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_tmpi3_reg <= encode_quantlexit_tmpi3;
		if (start == 1'b0 && ^(encode_quantlexit_tmpi3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_tmpi3_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %tmp1.i4 = shl i32 %tmp.i3, 1*/
		encode_quantlexit_tmp1i4 = (encode_quantlexit_tmpi3 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %tmp1.i4 = shl i32 %tmp.i3, 1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_tmp1i4_reg <= encode_quantlexit_tmp1i4;
		if (start == 1'b0 && ^(encode_quantlexit_tmp1i4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_tmp1i4_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %199 = ashr i32 %tmp1.i4, 15*/
		encode_quantlexit_199 = ($signed(encode_quantlexit_tmp1i4) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %199 = ashr i32 %tmp1.i4, 15*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_199_reg <= encode_quantlexit_199;
		if (start == 1'b0 && ^(encode_quantlexit_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_199_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %200 = add nsw i32 %199, %192*/
		encode_quantlexit_200 = (encode_quantlexit_199 + encode_quantlexit_192_reg);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %200 = add nsw i32 %199, %192*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_200_reg <= encode_quantlexit_200;
		if (start == 1'b0 && ^(encode_quantlexit_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_200_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %201 = load i32* @xh, align 4, !tbaa !1*/
		encode_quantlexit_201 = xh_out_a;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %201 = load i32* @xh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_51)) begin
		encode_quantlexit_201_reg <= encode_quantlexit_201;
		if (start == 1'b0 && ^(encode_quantlexit_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_201_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %202 = sub nsw i32 %201, %200*/
		encode_quantlexit_202 = (encode_quantlexit_201_reg - encode_quantlexit_200);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %202 = sub nsw i32 %201, %200*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_202_reg <= encode_quantlexit_202;
		if (start == 1'b0 && ^(encode_quantlexit_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_202_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %203 = ashr i32 %202, 31*/
		encode_quantlexit_203 = ($signed(encode_quantlexit_202) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %203 = ashr i32 %202, 31*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_203_reg <= encode_quantlexit_203;
		if (start == 1'b0 && ^(encode_quantlexit_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_203_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %204 = and i32 %203, -2*/
		encode_quantlexit_204 = (encode_quantlexit_203 & -32'd2);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %204 = and i32 %203, -2*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_204_reg <= encode_quantlexit_204;
		if (start == 1'b0 && ^(encode_quantlexit_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_204_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %205 = add nsw i32 %204, 3*/
		encode_quantlexit_205 = (encode_quantlexit_204 + 32'd3);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %205 = add nsw i32 %204, 3*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_205_reg <= encode_quantlexit_205;
		if (start == 1'b0 && ^(encode_quantlexit_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_205_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %206 = load i32* @deth, align 4, !tbaa !1*/
		encode_quantlexit_206 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %206 = load i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_206_reg <= encode_quantlexit_206;
		if (start == 1'b0 && ^(encode_quantlexit_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_206_reg"); $finish; end
	end
end
always @(*) begin
	encode_quantlexit_207 = encode_quantlexit_207_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %207 = mul nsw i32 %206, 564*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		encode_quantlexit_207_reg <= encode_quantlexit_207;
		if (start == 1'b0 && ^(encode_quantlexit_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_207_reg"); $finish; end
	end
	/* encode: %quantl.exit*/
	/*   %207 = mul nsw i32 %206, 564*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		encode_quantlexit_207_reg <= encode_quantlexit_207;
		if (start == 1'b0 && ^(encode_quantlexit_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_207_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %208 = ashr i32 %207, 12*/
		encode_quantlexit_208 = ($signed(encode_quantlexit_207) >>> 32'd12);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %208 = ashr i32 %207, 12*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		encode_quantlexit_208_reg <= encode_quantlexit_208;
		if (start == 1'b0 && ^(encode_quantlexit_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_208_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %209 = icmp sgt i32 %202, -1*/
		encode_quantlexit_209 = ($signed(encode_quantlexit_202) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %209 = icmp sgt i32 %202, -1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_209_reg <= encode_quantlexit_209;
		if (start == 1'b0 && ^(encode_quantlexit_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_209_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %210 = sub nsw i32 0, %202*/
		encode_quantlexit_210 = (32'd0 - encode_quantlexit_202);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %210 = sub nsw i32 0, %202*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_210_reg <= encode_quantlexit_210;
		if (start == 1'b0 && ^(encode_quantlexit_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_210_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %m.0.i = select i1 %209, i32 %202, i32 %210*/
		encode_quantlexit_m0i = (encode_quantlexit_209 ? encode_quantlexit_202 : encode_quantlexit_210);
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %m.0.i = select i1 %209, i32 %202, i32 %210*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		encode_quantlexit_m0i_reg <= encode_quantlexit_m0i;
		if (start == 1'b0 && ^(encode_quantlexit_m0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_m0i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   %211 = icmp sgt i32 %m.0.i, %208*/
		encode_quantlexit_211 = ($signed(encode_quantlexit_m0i_reg) > $signed(encode_quantlexit_208));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %211 = icmp sgt i32 %m.0.i, %208*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		encode_quantlexit_211_reg <= encode_quantlexit_211;
		if (start == 1'b0 && ^(encode_quantlexit_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_quantlexit_211_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %212*/
	/*   %213 = add nsw i32 %204, 2*/
		encode_212_213 = (encode_quantlexit_204_reg + 32'd2);
end
always @(posedge clk) begin
	/* encode: %212*/
	/*   %213 = add nsw i32 %204, 2*/
	if ((cur_state == LEGUP_F_encode_BB__212_64)) begin
		encode_212_213_reg <= encode_212_213;
		if (start == 1'b0 && ^(encode_212_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_212_213_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %215 = phi i32 [ %213, %212 ], [ %205, %quantl.exit ]*/
	if ((((cur_state == LEGUP_F_encode_BB_quantlexit_63) & (memory_controller_waitrequest == 1'd0)) & (encode_quantlexit_211_reg == 1'd0))) begin
		encode_214_215 = encode_quantlexit_205_reg;
	end
	/* encode: %214*/
	/*   %215 = phi i32 [ %213, %212 ], [ %205, %quantl.exit ]*/
	else /* if (((cur_state == LEGUP_F_encode_BB__212_65) & (memory_controller_waitrequest == 1'd0))) */ begin
		encode_214_215 = encode_212_213_reg;
	end
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %215 = phi i32 [ %213, %212 ], [ %205, %quantl.exit ]*/
	if ((((cur_state == LEGUP_F_encode_BB_quantlexit_63) & (memory_controller_waitrequest == 1'd0)) & (encode_quantlexit_211_reg == 1'd0))) begin
		encode_214_215_reg <= encode_214_215;
		if (start == 1'b0 && ^(encode_214_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_215_reg"); $finish; end
	end
	/* encode: %214*/
	/*   %215 = phi i32 [ %213, %212 ], [ %205, %quantl.exit ]*/
	if (((cur_state == LEGUP_F_encode_BB__212_65) & (memory_controller_waitrequest == 1'd0))) begin
		encode_214_215_reg <= encode_214_215;
		if (start == 1'b0 && ^(encode_214_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_215_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %216 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %215*/
		encode_214_216 = (`TAG_g_qq2_code2_table_a | (4 * encode_214_215_reg));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %216 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %215*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		encode_214_216_reg <= encode_214_216;
		if (start == 1'b0 && ^(encode_214_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_216_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %217 = load i32* %216, align 4, !tbaa !1*/
		encode_214_217 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %217 = load i32* %216, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_217_reg <= encode_214_217;
		if (start == 1'b0 && ^(encode_214_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_217_reg"); $finish; end
	end
end
always @(*) begin
	encode_214_218 = encode_214_218_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %218 = mul nsw i32 %217, %206*/
	if ((cur_state == LEGUP_F_encode_BB__214_70)) begin
		encode_214_218_reg <= encode_214_218;
		if (start == 1'b0 && ^(encode_214_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_218_reg"); $finish; end
	end
	/* encode: %214*/
	/*   %218 = mul nsw i32 %217, %206*/
	if ((cur_state == LEGUP_F_encode_BB__214_70)) begin
		encode_214_218_reg <= encode_214_218;
		if (start == 1'b0 && ^(encode_214_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_218_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %219 = ashr i32 %218, 15*/
		encode_214_219 = ($signed(encode_214_218) >>> 32'd15);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %219 = ashr i32 %218, 15*/
	if ((cur_state == LEGUP_F_encode_BB__214_70)) begin
		encode_214_219_reg <= encode_214_219;
		if (start == 1'b0 && ^(encode_214_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_219_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %220 = load i32* @nbh, align 4, !tbaa !1*/
		encode_214_220 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %220 = load i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_68)) begin
		encode_214_220_reg <= encode_214_220;
		if (start == 1'b0 && ^(encode_214_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_220_reg"); $finish; end
	end
end
always @(*) begin
	encode_214_221 = encode_214_221_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %221 = mul nsw i32 %220, 127*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_221_reg <= encode_214_221;
		if (start == 1'b0 && ^(encode_214_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_221_reg"); $finish; end
	end
	/* encode: %214*/
	/*   %221 = mul nsw i32 %220, 127*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_221_reg <= encode_214_221;
		if (start == 1'b0 && ^(encode_214_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_221_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %222 = ashr i32 %221, 7*/
		encode_214_222 = ($signed(encode_214_221) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %222 = ashr i32 %221, 7*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_222_reg <= encode_214_222;
		if (start == 1'b0 && ^(encode_214_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_222_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %223 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %215*/
		encode_214_223 = (`TAG_g_wh_code_table_a | (4 * encode_214_215_reg));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %223 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %215*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		encode_214_223_reg <= encode_214_223;
		if (start == 1'b0 && ^(encode_214_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_223_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %224 = load i32* %223, align 4, !tbaa !1*/
		encode_214_224 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %224 = load i32* %223, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_68)) begin
		encode_214_224_reg <= encode_214_224;
		if (start == 1'b0 && ^(encode_214_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_224_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %225 = add nsw i32 %222, %224*/
		encode_214_225 = (encode_214_222 + encode_214_224_reg);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %225 = add nsw i32 %222, %224*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_225_reg <= encode_214_225;
		if (start == 1'b0 && ^(encode_214_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_225_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %226 = icmp slt i32 %225, 0*/
		encode_214_226 = ($signed(encode_214_225) < $signed(32'd0));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %226 = icmp slt i32 %225, 0*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_226_reg <= encode_214_226;
		if (start == 1'b0 && ^(encode_214_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_226_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %..i1 = select i1 %226, i32 0, i32 %225*/
		encode_214_i1 = (encode_214_226 ? 32'd0 : encode_214_225);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %..i1 = select i1 %226, i32 0, i32 %225*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_i1_reg <= encode_214_i1;
		if (start == 1'b0 && ^(encode_214_i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_i1_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %227 = icmp sgt i32 %..i1, 22528*/
		encode_214_227 = ($signed(encode_214_i1) > $signed(32'd22528));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %227 = icmp sgt i32 %..i1, 22528*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_227_reg <= encode_214_227;
		if (start == 1'b0 && ^(encode_214_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_227_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %...i2 = select i1 %227, i32 22528, i32 %..i1*/
		encode_214_i2 = (encode_214_227 ? 32'd22528 : encode_214_i1);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %...i2 = select i1 %227, i32 22528, i32 %..i1*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_i2_reg <= encode_214_i2;
		if (start == 1'b0 && ^(encode_214_i2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_i2_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %228 = lshr i32 %...i2, 6*/
		encode_214_228 = (encode_214_i2 >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %228 = lshr i32 %...i2, 6*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_228_reg <= encode_214_228;
		if (start == 1'b0 && ^(encode_214_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_228_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %229 = and i32 %228, 31*/
		encode_214_229 = (encode_214_228 & 32'd31);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %229 = and i32 %228, 31*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_229_reg <= encode_214_229;
		if (start == 1'b0 && ^(encode_214_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_229_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %230 = ashr i32 %...i2, 11*/
		encode_214_230 = ($signed(encode_214_i2) >>> 32'd11);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %230 = ashr i32 %...i2, 11*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_230_reg <= encode_214_230;
		if (start == 1'b0 && ^(encode_214_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_230_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %231 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %229*/
		encode_214_231 = (`TAG_g_ilb_table_a | (4 * encode_214_229_reg));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %231 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %229*/
	if ((cur_state == LEGUP_F_encode_BB__214_70)) begin
		encode_214_231_reg <= encode_214_231;
		if (start == 1'b0 && ^(encode_214_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_231_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %232 = load i32* %231, align 4, !tbaa !1*/
		encode_214_232 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %232 = load i32* %231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_72)) begin
		encode_214_232_reg <= encode_214_232;
		if (start == 1'b0 && ^(encode_214_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_232_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %233 = sub i32 11, %230*/
		encode_214_233 = (32'd11 - encode_214_230);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %233 = sub i32 11, %230*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		encode_214_233_reg <= encode_214_233;
		if (start == 1'b0 && ^(encode_214_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_233_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %234 = ashr i32 %232, %233*/
		encode_214_234 = ($signed(encode_214_232) >>> encode_214_233_reg);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %234 = ashr i32 %232, %233*/
	if ((cur_state == LEGUP_F_encode_BB__214_72)) begin
		encode_214_234_reg <= encode_214_234;
		if (start == 1'b0 && ^(encode_214_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_234_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %235 = shl i32 %234, 3*/
		encode_214_235 = (encode_214_234 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %235 = shl i32 %234, 3*/
	if ((cur_state == LEGUP_F_encode_BB__214_72)) begin
		encode_214_235_reg <= encode_214_235;
		if (start == 1'b0 && ^(encode_214_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_235_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %236 = add nsw i32 %192, %219*/
		encode_214_236 = (encode_quantlexit_192_reg + encode_214_219);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %236 = add nsw i32 %192, %219*/
	if ((cur_state == LEGUP_F_encode_BB__214_70)) begin
		encode_214_236_reg <= encode_214_236;
		if (start == 1'b0 && ^(encode_214_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_236_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %237 = load i32* @ph1, align 4, !tbaa !1*/
		encode_214_237 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %237 = load i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_77)) begin
		encode_214_237_reg <= encode_214_237;
		if (start == 1'b0 && ^(encode_214_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_237_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %238 = load i32* @ph2, align 4, !tbaa !1*/
		encode_214_238 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %238 = load i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_77)) begin
		encode_214_238_reg <= encode_214_238;
		if (start == 1'b0 && ^(encode_214_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_238_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %239 = shl nsw i32 %194, 2*/
		encode_214_239 = (encode_quantlexit_194_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %239 = shl nsw i32 %194, 2*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		encode_214_239_reg <= encode_214_239;
		if (start == 1'b0 && ^(encode_214_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_239_reg"); $finish; end
	end
end
always @(*) begin
	encode_214_240 = encode_214_240_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %240 = mul nsw i32 %237, %236*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_240_reg <= encode_214_240;
		if (start == 1'b0 && ^(encode_214_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_240_reg"); $finish; end
	end
	/* encode: %214*/
	/*   %240 = mul nsw i32 %237, %236*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_240_reg <= encode_214_240;
		if (start == 1'b0 && ^(encode_214_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_240_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %241 = icmp sgt i32 %240, -1*/
		encode_214_241 = ($signed(encode_214_240) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %241 = icmp sgt i32 %240, -1*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_241_reg <= encode_214_241;
		if (start == 1'b0 && ^(encode_214_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_241_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %242 = sub nsw i32 0, %239*/
		encode_214_242 = (32'd0 - encode_214_239);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %242 = sub nsw i32 0, %239*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		encode_214_242_reg <= encode_214_242;
		if (start == 1'b0 && ^(encode_214_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_242_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %.1.i = select i1 %241, i32 %242, i32 %239*/
		encode_214_1i = (encode_214_241 ? encode_214_242_reg : encode_214_239_reg);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %.1.i = select i1 %241, i32 %242, i32 %239*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_1i_reg <= encode_214_1i;
		if (start == 1'b0 && ^(encode_214_1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_1i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %243 = ashr i32 %.1.i, 7*/
		encode_214_243 = ($signed(encode_214_1i) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %243 = ashr i32 %.1.i, 7*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_243_reg <= encode_214_243;
		if (start == 1'b0 && ^(encode_214_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_243_reg"); $finish; end
	end
end
always @(*) begin
	encode_214_244 = encode_214_244_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %244 = mul nsw i32 %238, %236*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_244_reg <= encode_214_244;
		if (start == 1'b0 && ^(encode_214_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_244_reg"); $finish; end
	end
	/* encode: %214*/
	/*   %244 = mul nsw i32 %238, %236*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_244_reg <= encode_214_244;
		if (start == 1'b0 && ^(encode_214_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_244_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %245 = ashr i32 %244, 31*/
		encode_214_245 = ($signed(encode_214_244) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %245 = ashr i32 %244, 31*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_245_reg <= encode_214_245;
		if (start == 1'b0 && ^(encode_214_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_245_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %246 = and i32 %245, -256*/
		encode_214_246 = (encode_214_245 & -32'd256);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %246 = and i32 %245, -256*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_246_reg <= encode_214_246;
		if (start == 1'b0 && ^(encode_214_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_246_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %247 = or i32 %246, 128*/
		encode_214_247 = (encode_214_246 | 32'd128);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %247 = or i32 %246, 128*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_247_reg <= encode_214_247;
		if (start == 1'b0 && ^(encode_214_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_247_reg"); $finish; end
	end
end
always @(*) begin
	encode_214_248 = encode_214_248_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %248 = mul nsw i32 %196, 127*/
	if ((cur_state == LEGUP_F_encode_BB__214_67)) begin
		encode_214_248_reg <= encode_214_248;
		if (start == 1'b0 && ^(encode_214_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_248_reg"); $finish; end
	end
	/* encode: %214*/
	/*   %248 = mul nsw i32 %196, 127*/
	if ((cur_state == LEGUP_F_encode_BB__214_67)) begin
		encode_214_248_reg <= encode_214_248;
		if (start == 1'b0 && ^(encode_214_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_248_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %249 = ashr i32 %248, 7*/
		encode_214_249 = ($signed(encode_214_248) >>> 32'd7);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %249 = ashr i32 %248, 7*/
	if ((cur_state == LEGUP_F_encode_BB__214_67)) begin
		encode_214_249_reg <= encode_214_249;
		if (start == 1'b0 && ^(encode_214_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_249_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %wd4.0.i = add nsw i32 %243, %249*/
		encode_214_wd40i = (encode_214_243 + encode_214_249_reg);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %wd4.0.i = add nsw i32 %243, %249*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_wd40i_reg <= encode_214_wd40i;
		if (start == 1'b0 && ^(encode_214_wd40i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_wd40i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %250 = add nsw i32 %wd4.0.i, %247*/
		encode_214_250 = (encode_214_wd40i + encode_214_247);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %250 = add nsw i32 %wd4.0.i, %247*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_250_reg <= encode_214_250;
		if (start == 1'b0 && ^(encode_214_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_250_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %251 = icmp sgt i32 %250, 12288*/
		encode_214_251 = ($signed(encode_214_250) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %251 = icmp sgt i32 %250, 12288*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_251_reg <= encode_214_251;
		if (start == 1'b0 && ^(encode_214_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_251_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %..i = select i1 %251, i32 12288, i32 %250*/
		encode_214_i = (encode_214_251 ? 32'd12288 : encode_214_250);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %..i = select i1 %251, i32 12288, i32 %250*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_i_reg <= encode_214_i;
		if (start == 1'b0 && ^(encode_214_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %252 = icmp slt i32 %..i, -12288*/
		encode_214_252 = ($signed(encode_214_i_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %252 = icmp slt i32 %..i, -12288*/
	if ((cur_state == LEGUP_F_encode_BB__214_79)) begin
		encode_214_252_reg <= encode_214_252;
		if (start == 1'b0 && ^(encode_214_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_252_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %...i = select i1 %252, i32 -12288, i32 %..i*/
		encode_214_i_var0 = (encode_214_252 ? -32'd12288 : encode_214_i_reg);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %...i = select i1 %252, i32 -12288, i32 %..i*/
	if ((cur_state == LEGUP_F_encode_BB__214_79)) begin
		encode_214_i_var0_reg <= encode_214_i_var0;
		if (start == 1'b0 && ^(encode_214_i_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_i_var0_reg"); $finish; end
	end
end
always @(*) begin
	encode_214_253 = encode_214_253_stage0_reg;
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %253 = mul nsw i32 %194, 255*/
	if ((cur_state == LEGUP_F_encode_BB__214_67)) begin
		encode_214_253_reg <= encode_214_253;
		if (start == 1'b0 && ^(encode_214_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_253_reg"); $finish; end
	end
	/* encode: %214*/
	/*   %253 = mul nsw i32 %194, 255*/
	if ((cur_state == LEGUP_F_encode_BB__214_67)) begin
		encode_214_253_reg <= encode_214_253;
		if (start == 1'b0 && ^(encode_214_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_253_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %254 = ashr i32 %253, 8*/
		encode_214_254 = ($signed(encode_214_253) >>> 32'd8);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %254 = ashr i32 %253, 8*/
	if ((cur_state == LEGUP_F_encode_BB__214_67)) begin
		encode_214_254_reg <= encode_214_254;
		if (start == 1'b0 && ^(encode_214_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_254_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %255 = ashr i32 %240, 31*/
		encode_214_255 = ($signed(encode_214_240) >>> 32'd31);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %255 = ashr i32 %240, 31*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_255_reg <= encode_214_255;
		if (start == 1'b0 && ^(encode_214_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_255_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %256 = and i32 %255, -384*/
		encode_214_256 = (encode_214_255 & -32'd384);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %256 = and i32 %255, -384*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_256_reg <= encode_214_256;
		if (start == 1'b0 && ^(encode_214_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_256_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %257 = add nsw i32 %254, 192*/
		encode_214_257 = (encode_214_254 + 32'd192);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %257 = add nsw i32 %254, 192*/
	if ((cur_state == LEGUP_F_encode_BB__214_67)) begin
		encode_214_257_reg <= encode_214_257;
		if (start == 1'b0 && ^(encode_214_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_257_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %apl1.0.i = add nsw i32 %257, %256*/
		encode_214_apl10i = (encode_214_257_reg + encode_214_256);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %apl1.0.i = add nsw i32 %257, %256*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_apl10i_reg <= encode_214_apl10i;
		if (start == 1'b0 && ^(encode_214_apl10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_apl10i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %258 = sub nsw i32 15360, %...i*/
		encode_214_258 = (32'd15360 - encode_214_i_var0);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %258 = sub nsw i32 15360, %...i*/
	if ((cur_state == LEGUP_F_encode_BB__214_79)) begin
		encode_214_258_reg <= encode_214_258;
		if (start == 1'b0 && ^(encode_214_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_258_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %259 = icmp sgt i32 %apl1.0.i, %258*/
		encode_214_259 = ($signed(encode_214_apl10i_reg) > $signed(encode_214_258));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %259 = icmp sgt i32 %apl1.0.i, %258*/
	if ((cur_state == LEGUP_F_encode_BB__214_79)) begin
		encode_214_259_reg <= encode_214_259;
		if (start == 1'b0 && ^(encode_214_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_259_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %.apl1.0.i = select i1 %259, i32 %258, i32 %apl1.0.i*/
		encode_214_apl10i_var1 = (encode_214_259 ? encode_214_258 : encode_214_apl10i_reg);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %.apl1.0.i = select i1 %259, i32 %258, i32 %apl1.0.i*/
	if ((cur_state == LEGUP_F_encode_BB__214_79)) begin
		encode_214_apl10i_var1_reg <= encode_214_apl10i_var1;
		if (start == 1'b0 && ^(encode_214_apl10i_var1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_apl10i_var1_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %260 = sub nsw i32 0, %258*/
		encode_214_260 = (32'd0 - encode_214_258);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %260 = sub nsw i32 0, %258*/
	if ((cur_state == LEGUP_F_encode_BB__214_79)) begin
		encode_214_260_reg <= encode_214_260;
		if (start == 1'b0 && ^(encode_214_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_260_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %261 = icmp slt i32 %.apl1.0.i, %260*/
		encode_214_261 = ($signed(encode_214_apl10i_var1_reg) < $signed(encode_214_260_reg));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %261 = icmp slt i32 %.apl1.0.i, %260*/
	if ((cur_state == LEGUP_F_encode_BB__214_80)) begin
		encode_214_261_reg <= encode_214_261;
		if (start == 1'b0 && ^(encode_214_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_261_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %apl1.2.i = select i1 %261, i32 %260, i32 %.apl1.0.i*/
		encode_214_apl12i = (encode_214_261 ? encode_214_260_reg : encode_214_apl10i_var1_reg);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %apl1.2.i = select i1 %261, i32 %260, i32 %.apl1.0.i*/
	if ((cur_state == LEGUP_F_encode_BB__214_80)) begin
		encode_214_apl12i_reg <= encode_214_apl12i;
		if (start == 1'b0 && ^(encode_214_apl12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_apl12i_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %262 = add nsw i32 %219, %200*/
		encode_214_262 = (encode_214_219 + encode_quantlexit_200_reg);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %262 = add nsw i32 %219, %200*/
	if ((cur_state == LEGUP_F_encode_BB__214_70)) begin
		encode_214_262_reg <= encode_214_262;
		if (start == 1'b0 && ^(encode_214_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_262_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %263 = load i32* @il, align 4, !tbaa !1*/
		encode_214_263 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %263 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_263_reg <= encode_214_263;
		if (start == 1'b0 && ^(encode_214_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_263_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %264 = shl nsw i32 %215, 6*/
		encode_214_264 = (encode_214_215_reg <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %264 = shl nsw i32 %215, 6*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		encode_214_264_reg <= encode_214_264;
		if (start == 1'b0 && ^(encode_214_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_264_reg"); $finish; end
	end
end
always @(*) begin
	/* encode: %214*/
	/*   %265 = or i32 %264, %263*/
		encode_214_265 = (encode_214_264_reg | encode_214_263);
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %265 = or i32 %264, %263*/
	if ((cur_state == LEGUP_F_encode_BB__214_78)) begin
		encode_214_265_reg <= encode_214_265;
		if (start == 1'b0 && ^(encode_214_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_214_265_reg"); $finish; end
	end
end
always @(*) begin
	decis_levl_address_a = 1'd0;
	/* encode: %114*/
	/*   %117 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__114_36)) begin
		decis_levl_address_a = (encode_114_scevgep >>> 3'd2);
	end
end
always @(*) begin
	decis_levl_write_enable_a = 1'd0;
	/* encode: %114*/
	/*   %117 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__114_36)) begin
		decis_levl_write_enable_a = 1'd0;
	end
end
always @(*) begin
	xh_address_a = 1'd0;
	/* encode: %0*/
	/*   store i32 %74, i32* @xh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		xh_address_a = (1'd0 >>> 3'd2);
	end
	/* encode: %quantl.exit*/
	/*   %201 = load i32* @xh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_50)) begin
		xh_address_a = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	xh_write_enable_a = 1'd0;
	/* encode: %0*/
	/*   store i32 %74, i32* @xh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		xh_write_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %201 = load i32* @xh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_50)) begin
		xh_write_enable_a = 1'd0;
	end
end
always @(*) begin
	xh_in_a = 1'd0;
	/* encode: %0*/
	/*   store i32 %74, i32* @xh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		xh_in_a = encode_0_74;
	end
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_48)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_49)) begin
		upzero_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_encode_BB__214_73)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_74)) begin
		upzero_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_48)) begin
		upzero_arg_dlt <= encode_quantlexit_125_reg;
		if (start == 1'b0 && ^(encode_quantlexit_125_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_encode_BB__214_73)) begin
		upzero_arg_dlt <= encode_214_219_reg;
		if (start == 1'b0 && ^(encode_214_219_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_48)) begin
		upzero_arg_dlti <= `TAG_g_delay_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_encode_BB__214_73)) begin
		upzero_arg_dlti <= `TAG_g_delay_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_48)) begin
		upzero_arg_bli <= `TAG_g_delay_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_encode_BB__214_73)) begin
		upzero_arg_bli <= `TAG_g_delay_bph_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		upzero_memory_controller_out_a = memory_controller_out_a;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else /* if ((cur_state == LEGUP_function_call_74)) */ begin
		upzero_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		upzero_memory_controller_out_b = memory_controller_out_b;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	else /* if ((cur_state == LEGUP_function_call_74)) */ begin
		upzero_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	upzero_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	upzero_finish_final = upzero_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_encode_BB_quantlexit_48))) begin
		upzero_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_encode_BB__214_73))) begin
		upzero_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		legup_function_call = 1'd1;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	lpm_mult_encode_0_2_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %2 = mul nsw i32 %1, 12*/
	if ((lpm_mult_encode_0_2_en == 1'd1)) begin
		encode_0_2_stage0_reg <= (encode_0_1 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_encode_0_4_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %4 = mul nsw i32 %3, -44*/
	if ((lpm_mult_encode_0_4_en == 1'd1)) begin
		encode_0_4_stage0_reg <= (encode_0_3 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_encode_0_6_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %6 = mul nsw i32 %5, -44*/
	if ((lpm_mult_encode_0_6_en == 1'd1)) begin
		encode_0_6_stage0_reg <= (encode_0_5 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_encode_0_9_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %9 = mul nsw i32 %8, 212*/
	if ((lpm_mult_encode_0_9_en == 1'd1)) begin
		encode_0_9_stage0_reg <= (encode_0_8 * 32'd212);
	end
end
always @(*) begin
	lpm_mult_encode_0_12_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %12 = mul nsw i32 %11, 48*/
	if ((lpm_mult_encode_0_12_en == 1'd1)) begin
		encode_0_12_stage0_reg <= (encode_0_11 * 32'd48);
	end
end
always @(*) begin
	lpm_mult_encode_0_15_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %15 = mul nsw i32 %14, -624*/
	if ((lpm_mult_encode_0_15_en == 1'd1)) begin
		encode_0_15_stage0_reg <= (encode_0_14 * -32'd624);
	end
end
always @(*) begin
	lpm_mult_encode_0_21_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %21 = mul nsw i32 %20, 1448*/
	if ((lpm_mult_encode_0_21_en == 1'd1)) begin
		encode_0_21_stage0_reg <= (encode_0_20 * 32'd1448);
	end
end
always @(*) begin
	lpm_mult_encode_0_24_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %24 = mul nsw i32 %23, -840*/
	if ((lpm_mult_encode_0_24_en == 1'd1)) begin
		encode_0_24_stage0_reg <= (encode_0_23 * -32'd840);
	end
end
always @(*) begin
	lpm_mult_encode_0_27_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %27 = mul nsw i32 %26, -3220*/
	if ((lpm_mult_encode_0_27_en == 1'd1)) begin
		encode_0_27_stage0_reg <= (encode_0_26 * -32'd3220);
	end
end
always @(*) begin
	lpm_mult_encode_0_30_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %30 = mul nsw i32 %29, 3804*/
	if ((lpm_mult_encode_0_30_en == 1'd1)) begin
		encode_0_30_stage0_reg <= (encode_0_29 * 32'd3804);
	end
end
always @(*) begin
	lpm_mult_encode_0_33_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %33 = mul nsw i32 %32, 15504*/
	if ((lpm_mult_encode_0_33_en == 1'd1)) begin
		encode_0_33_stage0_reg <= (encode_0_32 * 32'd15504);
	end
end
always @(*) begin
	lpm_mult_encode_0_36_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %36 = mul nsw i32 %35, 15504*/
	if ((lpm_mult_encode_0_36_en == 1'd1)) begin
		encode_0_36_stage0_reg <= (encode_0_35 * 32'd15504);
	end
end
always @(*) begin
	lpm_mult_encode_0_39_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %39 = mul nsw i32 %38, 3804*/
	if ((lpm_mult_encode_0_39_en == 1'd1)) begin
		encode_0_39_stage0_reg <= (encode_0_38 * 32'd3804);
	end
end
always @(*) begin
	lpm_mult_encode_0_42_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %42 = mul nsw i32 %41, -3220*/
	if ((lpm_mult_encode_0_42_en == 1'd1)) begin
		encode_0_42_stage0_reg <= (encode_0_41 * -32'd3220);
	end
end
always @(*) begin
	lpm_mult_encode_0_45_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %45 = mul nsw i32 %44, -840*/
	if ((lpm_mult_encode_0_45_en == 1'd1)) begin
		encode_0_45_stage0_reg <= (encode_0_44 * -32'd840);
	end
end
always @(*) begin
	lpm_mult_encode_0_48_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %48 = mul nsw i32 %47, 1448*/
	if ((lpm_mult_encode_0_48_en == 1'd1)) begin
		encode_0_48_stage0_reg <= (encode_0_47 * 32'd1448);
	end
end
always @(*) begin
	lpm_mult_encode_0_54_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %54 = mul nsw i32 %53, -624*/
	if ((lpm_mult_encode_0_54_en == 1'd1)) begin
		encode_0_54_stage0_reg <= (encode_0_53 * -32'd624);
	end
end
always @(*) begin
	lpm_mult_encode_0_57_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %57 = mul nsw i32 %56, 48*/
	if ((lpm_mult_encode_0_57_en == 1'd1)) begin
		encode_0_57_stage0_reg <= (encode_0_56 * 32'd48);
	end
end
always @(*) begin
	lpm_mult_encode_0_60_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %60 = mul nsw i32 %59, 212*/
	if ((lpm_mult_encode_0_60_en == 1'd1)) begin
		encode_0_60_stage0_reg <= (encode_0_59 * 32'd212);
	end
end
always @(*) begin
	lpm_mult_encode_0_63_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %63 = mul nsw i32 %62, -44*/
	if ((lpm_mult_encode_0_63_en == 1'd1)) begin
		encode_0_63_stage0_reg <= (encode_0_62 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_encode_0_66_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %66 = mul nsw i32 %65, -44*/
	if ((lpm_mult_encode_0_66_en == 1'd1)) begin
		encode_0_66_stage0_reg <= (encode_0_65 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_encode_0_69_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %69 = mul nsw i32 %68, 12*/
	if ((lpm_mult_encode_0_69_en == 1'd1)) begin
		encode_0_69_stage0_reg <= (encode_0_68 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_encode_0_77_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %77 = mul nsw i32 %76, %75*/
	if ((lpm_mult_encode_0_77_en == 1'd1)) begin
		encode_0_77_stage0_reg <= (encode_0_76 * encode_0_75);
	end
end
always @(*) begin
	lpm_mult_encode_0_80_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %80 = mul nsw i32 %79, %78*/
	if ((lpm_mult_encode_0_80_en == 1'd1)) begin
		encode_0_80_stage0_reg <= (encode_0_79 * encode_0_78);
	end
end
always @(*) begin
	lpm_mult_encode_0_84_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %84 = mul nsw i32 %83, %82*/
	if ((lpm_mult_encode_0_84_en == 1'd1)) begin
		encode_0_84_stage0_reg <= (encode_0_83 * encode_0_82);
	end
end
always @(*) begin
	lpm_mult_encode_0_88_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %88 = mul nsw i32 %87, %86*/
	if ((lpm_mult_encode_0_88_en == 1'd1)) begin
		encode_0_88_stage0_reg <= (encode_0_87 * encode_0_86);
	end
end
always @(*) begin
	lpm_mult_encode_0_92_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %92 = mul nsw i32 %91, %90*/
	if ((lpm_mult_encode_0_92_en == 1'd1)) begin
		encode_0_92_stage0_reg <= (encode_0_91 * encode_0_90);
	end
end
always @(*) begin
	lpm_mult_encode_0_96_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %96 = mul nsw i32 %95, %94*/
	if ((lpm_mult_encode_0_96_en == 1'd1)) begin
		encode_0_96_stage0_reg <= (encode_0_95 * encode_0_94);
	end
end
always @(*) begin
	lpm_mult_encode_0_103_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %103 = mul i32 %100, %99*/
	if ((lpm_mult_encode_0_103_en == 1'd1)) begin
		encode_0_103_stage0_reg <= (encode_0_100 * encode_0_99);
	end
end
always @(*) begin
	lpm_mult_encode_0_104_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %0*/
	/*   %104 = mul i32 %102, %101*/
	if ((lpm_mult_encode_0_104_en == 1'd1)) begin
		encode_0_104_stage0_reg <= (encode_0_102 * encode_0_101);
	end
end
always @(*) begin
	lpm_mult_encode_114_118_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %114*/
	/*   %118 = mul nsw i32 %117, %108*/
	if ((lpm_mult_encode_114_118_en == 1'd1)) begin
		encode_114_118_stage0_reg <= (encode_114_117 * encode_0_108_reg);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_154_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %154 = mul nsw i32 %102, 127*/
	if ((lpm_mult_encode_quantlexit_154_en == 1'd1)) begin
		encode_quantlexit_154_stage0_reg <= (encode_0_102_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_159_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %159 = mul nsw i32 %100, 255*/
	if ((lpm_mult_encode_quantlexit_159_en == 1'd1)) begin
		encode_quantlexit_159_stage0_reg <= (encode_0_100_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_127_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %127 = mul nsw i32 %126, 127*/
	if ((lpm_mult_encode_quantlexit_127_en == 1'd1)) begin
		encode_quantlexit_127_stage0_reg <= (encode_quantlexit_126 * 32'd127);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_124_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %124 = mul nsw i32 %123, %108*/
	if ((lpm_mult_encode_quantlexit_124_en == 1'd1)) begin
		encode_quantlexit_124_stage0_reg <= (encode_quantlexit_123 * encode_0_108_reg);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_146_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %146 = mul nsw i32 %143, %142*/
	if ((lpm_mult_encode_quantlexit_146_en == 1'd1)) begin
		encode_quantlexit_146_stage0_reg <= (encode_quantlexit_143 * encode_quantlexit_142_reg);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_150_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %150 = mul nsw i32 %144, %142*/
	if ((lpm_mult_encode_quantlexit_150_en == 1'd1)) begin
		encode_quantlexit_150_stage0_reg <= (encode_quantlexit_144 * encode_quantlexit_142_reg);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_171_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %171 = mul nsw i32 %170, %169*/
	if ((lpm_mult_encode_quantlexit_171_en == 1'd1)) begin
		encode_quantlexit_171_stage0_reg <= (encode_quantlexit_170 * encode_quantlexit_169);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_174_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %174 = mul nsw i32 %173, %172*/
	if ((lpm_mult_encode_quantlexit_174_en == 1'd1)) begin
		encode_quantlexit_174_stage0_reg <= (encode_quantlexit_173 * encode_quantlexit_172);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_178_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %178 = mul nsw i32 %177, %176*/
	if ((lpm_mult_encode_quantlexit_178_en == 1'd1)) begin
		encode_quantlexit_178_stage0_reg <= (encode_quantlexit_177 * encode_quantlexit_176);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_182_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %182 = mul nsw i32 %181, %180*/
	if ((lpm_mult_encode_quantlexit_182_en == 1'd1)) begin
		encode_quantlexit_182_stage0_reg <= (encode_quantlexit_181 * encode_quantlexit_180);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_186_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %186 = mul nsw i32 %185, %184*/
	if ((lpm_mult_encode_quantlexit_186_en == 1'd1)) begin
		encode_quantlexit_186_stage0_reg <= (encode_quantlexit_185 * encode_quantlexit_184);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_190_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %190 = mul nsw i32 %189, %188*/
	if ((lpm_mult_encode_quantlexit_190_en == 1'd1)) begin
		encode_quantlexit_190_stage0_reg <= (encode_quantlexit_189 * encode_quantlexit_188);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_197_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %197 = mul i32 %194, %193*/
	if ((lpm_mult_encode_quantlexit_197_en == 1'd1)) begin
		encode_quantlexit_197_stage0_reg <= (encode_quantlexit_194 * encode_quantlexit_193);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_198_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %198 = mul i32 %196, %195*/
	if ((lpm_mult_encode_quantlexit_198_en == 1'd1)) begin
		encode_quantlexit_198_stage0_reg <= (encode_quantlexit_196 * encode_quantlexit_195);
	end
end
always @(*) begin
	lpm_mult_encode_quantlexit_207_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %quantl.exit*/
	/*   %207 = mul nsw i32 %206, 564*/
	if ((lpm_mult_encode_quantlexit_207_en == 1'd1)) begin
		encode_quantlexit_207_stage0_reg <= (encode_quantlexit_206 * 32'd564);
	end
end
always @(*) begin
	lpm_mult_encode_214_248_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %248 = mul nsw i32 %196, 127*/
	if ((lpm_mult_encode_214_248_en == 1'd1)) begin
		encode_214_248_stage0_reg <= (encode_quantlexit_196_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_encode_214_253_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %253 = mul nsw i32 %194, 255*/
	if ((lpm_mult_encode_214_253_en == 1'd1)) begin
		encode_214_253_stage0_reg <= (encode_quantlexit_194_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_encode_214_221_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %221 = mul nsw i32 %220, 127*/
	if ((lpm_mult_encode_214_221_en == 1'd1)) begin
		encode_214_221_stage0_reg <= (encode_214_220 * 32'd127);
	end
end
always @(*) begin
	lpm_mult_encode_214_218_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %218 = mul nsw i32 %217, %206*/
	if ((lpm_mult_encode_214_218_en == 1'd1)) begin
		encode_214_218_stage0_reg <= (encode_214_217 * encode_quantlexit_206_reg);
	end
end
always @(*) begin
	lpm_mult_encode_214_240_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %240 = mul nsw i32 %237, %236*/
	if ((lpm_mult_encode_214_240_en == 1'd1)) begin
		encode_214_240_stage0_reg <= (encode_214_237 * encode_214_236_reg);
	end
end
always @(*) begin
	lpm_mult_encode_214_244_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* encode: %214*/
	/*   %244 = mul nsw i32 %238, %236*/
	if ((lpm_mult_encode_214_244_en == 1'd1)) begin
		encode_214_244_stage0_reg <= (encode_214_238 * encode_214_236_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* encode: %214*/
	/*   ret i32 %265*/
	if ((cur_state == LEGUP_F_encode_BB__214_83)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %5 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %11 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %65 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %75 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %78 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %99 = load i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   %101 = load i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %62, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %59, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %53, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %47, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %41, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %141, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %143 = load i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_50)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_52)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %184 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %188 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %193 = load i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %195 = load i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i11, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %apl1.2.i7, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %168, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %142, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %214*/
	/*   %220 = load i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %214*/
	/*   %217 = load i32* %216, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_67)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %214*/
	/*   %232 = load i32* %231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_70)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %214*/
	/*   %237 = load i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_75)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %214*/
	/*   %263 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_76)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %...i, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_79)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_80)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %262, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_81)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_tqmf_a;
	end
	/* encode: %0*/
	/*   %5 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_2)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd2));
	end
	/* encode: %0*/
	/*   %11 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd4));
	end
	/* encode: %0*/
	/*   %17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd6));
	end
	/* encode: %0*/
	/*   %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd8));
	end
	/* encode: %0*/
	/*   %29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd10));
	end
	/* encode: %0*/
	/*   %35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd12));
	end
	/* encode: %0*/
	/*   %41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd14));
	end
	/* encode: %0*/
	/*   %47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd16));
	end
	/* encode: %0*/
	/*   %53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd18));
	end
	/* encode: %0*/
	/*   %59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd20));
	end
	/* encode: %0*/
	/*   %65 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd22));
	end
	/* encode: %0*/
	/*   %75 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* encode: %0*/
	/*   %78 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd1));
	end
	/* encode: %0*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd2));
	end
	/* encode: %0*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_16)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd3));
	end
	/* encode: %0*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd4));
	end
	/* encode: %0*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd5));
	end
	/* encode: %0*/
	/*   %99 = load i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		memory_controller_address_a = `TAG_g_rlt1_a;
	end
	/* encode: %0*/
	/*   %101 = load i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		memory_controller_address_a = `TAG_g_rlt2_a;
	end
	/* encode: %0*/
	/*   store i32 %62, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd23));
	end
	/* encode: %0*/
	/*   store i32 %59, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd22));
	end
	/* encode: %0*/
	/*   store i32 %53, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd20));
	end
	/* encode: %0*/
	/*   store i32 %47, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_24)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd18));
	end
	/* encode: %0*/
	/*   store i32 %41, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_25)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd16));
	end
	/* encode: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_26)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd14));
	end
	/* encode: %0*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_27)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd12));
	end
	/* encode: %0*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_28)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd10));
	end
	/* encode: %0*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_29)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd8));
	end
	/* encode: %0*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_30)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd6));
	end
	/* encode: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_31)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd4));
	end
	/* encode: %0*/
	/*   store i32 %1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_32)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a | (4 * 32'd2));
	end
	/* encode: %quantl.exit*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_address_a = encode_quantlexit_122;
	end
	/* encode: %quantl.exit*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		memory_controller_address_a = encode_quantlexit_137;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %141, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		memory_controller_address_a = `TAG_g_detl_a;
	end
	/* encode: %quantl.exit*/
	/*   %143 = load i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_50)) begin
		memory_controller_address_a = `TAG_g_plt1_a;
	end
	/* encode: %quantl.exit*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_51)) begin
		memory_controller_address_a = `TAG_g_delay_bph_a;
	end
	/* encode: %quantl.exit*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_52)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd1));
	end
	/* encode: %quantl.exit*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd2));
	end
	/* encode: %quantl.exit*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd3));
	end
	/* encode: %quantl.exit*/
	/*   %184 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd4));
	end
	/* encode: %quantl.exit*/
	/*   %188 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd5));
	end
	/* encode: %quantl.exit*/
	/*   %193 = load i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		memory_controller_address_a = `TAG_g_rh1_a;
	end
	/* encode: %quantl.exit*/
	/*   %195 = load i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		memory_controller_address_a = `TAG_g_rh2_a;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i11, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		memory_controller_address_a = `TAG_g_al2_a;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %apl1.2.i7, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		memory_controller_address_a = `TAG_g_al1_a;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %168, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		memory_controller_address_a = `TAG_g_rlt1_a;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %142, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		memory_controller_address_a = `TAG_g_plt1_a;
	end
	/* encode: %214*/
	/*   %220 = load i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		memory_controller_address_a = `TAG_g_nbh_a;
	end
	/* encode: %214*/
	/*   %217 = load i32* %216, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_67)) begin
		memory_controller_address_a = encode_214_216_reg;
	end
	/* encode: %214*/
	/*   %232 = load i32* %231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_70)) begin
		memory_controller_address_a = encode_214_231;
	end
	/* encode: %214*/
	/*   %237 = load i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_75)) begin
		memory_controller_address_a = `TAG_g_ph1_a;
	end
	/* encode: %214*/
	/*   %263 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_76)) begin
		memory_controller_address_a = `TAG_g_il_a;
	end
	/* encode: %214*/
	/*   store i32 %...i, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_79)) begin
		memory_controller_address_a = `TAG_g_ah2_a;
	end
	/* encode: %214*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_80)) begin
		memory_controller_address_a = `TAG_g_ah1_a;
	end
	/* encode: %214*/
	/*   store i32 %262, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_81)) begin
		memory_controller_address_a = `TAG_g_rh1_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %5 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %11 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %65 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %75 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %78 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %99 = load i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   %101 = load i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %0*/
	/*   store i32 %62, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %59, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %53, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %47, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %41, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_25)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_26)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_27)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_28)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_29)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_30)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_31)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_32)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %141, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %143 = load i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_50)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_51)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_52)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %184 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %188 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %193 = load i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %195 = load i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i11, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %apl1.2.i7, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %168, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %142, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %214*/
	/*   %220 = load i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %214*/
	/*   %217 = load i32* %216, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_67)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %214*/
	/*   %232 = load i32* %231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_70)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %214*/
	/*   %237 = load i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_75)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %214*/
	/*   %263 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_76)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* encode: %214*/
	/*   store i32 %...i, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_79)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_80)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %262, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_81)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* encode: %0*/
	/*   store i32 %62, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		memory_controller_in_a = encode_0_62_reg;
	end
	/* encode: %0*/
	/*   store i32 %59, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		memory_controller_in_a = encode_0_59_reg;
	end
	/* encode: %0*/
	/*   store i32 %53, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		memory_controller_in_a = encode_0_53_reg;
	end
	/* encode: %0*/
	/*   store i32 %47, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_24)) begin
		memory_controller_in_a = encode_0_47_reg;
	end
	/* encode: %0*/
	/*   store i32 %41, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_25)) begin
		memory_controller_in_a = encode_0_41_reg;
	end
	/* encode: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_26)) begin
		memory_controller_in_a = encode_0_35_reg;
	end
	/* encode: %0*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_27)) begin
		memory_controller_in_a = encode_0_29_reg;
	end
	/* encode: %0*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_28)) begin
		memory_controller_in_a = encode_0_23_reg;
	end
	/* encode: %0*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_29)) begin
		memory_controller_in_a = encode_0_17_reg;
	end
	/* encode: %0*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_30)) begin
		memory_controller_in_a = encode_0_11_reg;
	end
	/* encode: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_31)) begin
		memory_controller_in_a = encode_0_5_reg;
	end
	/* encode: %0*/
	/*   store i32 %1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_32)) begin
		memory_controller_in_a = encode_0_1_reg;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %141, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		memory_controller_in_a = encode_quantlexit_141;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i11, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		memory_controller_in_a = encode_quantlexit_i11_reg;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %apl1.2.i7, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		memory_controller_in_a = encode_quantlexit_apl12i7_reg;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %168, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		memory_controller_in_a = encode_quantlexit_168_reg;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %142, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		memory_controller_in_a = encode_quantlexit_142_reg;
	end
	/* encode: %214*/
	/*   store i32 %...i, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_79)) begin
		memory_controller_in_a = encode_214_i_var0;
	end
	/* encode: %214*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_80)) begin
		memory_controller_in_a = encode_214_apl12i;
	end
	/* encode: %214*/
	/*   store i32 %262, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_81)) begin
		memory_controller_in_a = encode_214_262_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* encode: %0*/
	/*   %1 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %5 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %11 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %41 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %47 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %53 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %59 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %65 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %75 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %78 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %82 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %86 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %90 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %94 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %99 = load i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   %101 = load i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %62, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %59, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %53, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %47, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %41, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %11, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %123 = load i32* %122, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %138 = load i32* %137, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_45)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %141, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_47)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %143 = load i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_50)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %172 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_52)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %176 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %180 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %184 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %188 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %193 = load i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %195 = load i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i11, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %apl1.2.i7, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %168, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %142, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %214*/
	/*   %220 = load i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %214*/
	/*   %217 = load i32* %216, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_67)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %214*/
	/*   %232 = load i32* %231, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_70)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %214*/
	/*   %237 = load i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_75)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %214*/
	/*   %263 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_76)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %214*/
	/*   store i32 %...i, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_79)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %214*/
	/*   store i32 %apl1.2.i, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_80)) begin
		memory_controller_size_a = 2'd2;
	end
	/* encode: %214*/
	/*   store i32 %262, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_81)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %8 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %14 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %62 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %68 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %76 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %79 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %87 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %91 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %95 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %100 = load i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %102 = load i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   %108 = load i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %56, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %44, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %38, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %3, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_33)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %126 = load i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_39)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %ril.0.i = load i32* %ril.0.in.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %ril.0.i, i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i13, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_46)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %144 = load i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_51)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %177 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %185 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %189 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %194 = load i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %196 = load i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %206 = load i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %99, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %143, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %205, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %212*/
	/*   store i32 %213, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__212_64)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %214*/
	/*   %224 = load i32* %223, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %...i2, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %235, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_72)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %214*/
	/*   %238 = load i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_75)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %193, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_80)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %237, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_81)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %236, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_82)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd1));
	end
	/* encode: %0*/
	/*   %8 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_2)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd3));
	end
	/* encode: %0*/
	/*   %14 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd5));
	end
	/* encode: %0*/
	/*   %20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd7));
	end
	/* encode: %0*/
	/*   %26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd9));
	end
	/* encode: %0*/
	/*   %32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd11));
	end
	/* encode: %0*/
	/*   %38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd13));
	end
	/* encode: %0*/
	/*   %44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd15));
	end
	/* encode: %0*/
	/*   %50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd17));
	end
	/* encode: %0*/
	/*   %56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd19));
	end
	/* encode: %0*/
	/*   %62 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd21));
	end
	/* encode: %0*/
	/*   %68 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd23));
	end
	/* encode: %0*/
	/*   %76 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		memory_controller_address_b = `TAG_g_delay_dltx_a;
	end
	/* encode: %0*/
	/*   %79 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd1));
	end
	/* encode: %0*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd2));
	end
	/* encode: %0*/
	/*   %87 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_16)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd3));
	end
	/* encode: %0*/
	/*   %91 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd4));
	end
	/* encode: %0*/
	/*   %95 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd5));
	end
	/* encode: %0*/
	/*   %100 = load i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		memory_controller_address_b = `TAG_g_al1_a;
	end
	/* encode: %0*/
	/*   %102 = load i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		memory_controller_address_b = `TAG_g_al2_a;
	end
	/* encode: %0*/
	/*   %108 = load i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		memory_controller_address_b = `TAG_g_detl_a;
	end
	/* encode: %0*/
	/*   store i32 %56, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd21));
	end
	/* encode: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd19));
	end
	/* encode: %0*/
	/*   store i32 %44, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_24)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd17));
	end
	/* encode: %0*/
	/*   store i32 %38, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_25)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd15));
	end
	/* encode: %0*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_26)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd13));
	end
	/* encode: %0*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_27)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd11));
	end
	/* encode: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_28)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd9));
	end
	/* encode: %0*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_29)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd7));
	end
	/* encode: %0*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_30)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd5));
	end
	/* encode: %0*/
	/*   store i32 %3, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_31)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd3));
	end
	/* encode: %0*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_32)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a | (4 * 32'd1));
	end
	/* encode: %0*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_33)) begin
		memory_controller_address_b = `TAG_g_tqmf_a;
	end
	/* encode: %quantl.exit*/
	/*   %126 = load i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_39)) begin
		memory_controller_address_b = `TAG_g_nbl_a;
	end
	/* encode: %quantl.exit*/
	/*   %ril.0.i = load i32* %ril.0.in.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		memory_controller_address_b = encode_quantlexit_ril0ini;
	end
	/* encode: %quantl.exit*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_address_b = encode_quantlexit_129;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %ril.0.i, i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_43)) begin
		memory_controller_address_b = `TAG_g_il_a;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i13, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_46)) begin
		memory_controller_address_b = `TAG_g_nbl_a;
	end
	/* encode: %quantl.exit*/
	/*   %144 = load i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_50)) begin
		memory_controller_address_b = `TAG_g_plt2_a;
	end
	/* encode: %quantl.exit*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_51)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* encode: %quantl.exit*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_52)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd1));
	end
	/* encode: %quantl.exit*/
	/*   %177 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd2));
	end
	/* encode: %quantl.exit*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd3));
	end
	/* encode: %quantl.exit*/
	/*   %185 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd4));
	end
	/* encode: %quantl.exit*/
	/*   %189 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd5));
	end
	/* encode: %quantl.exit*/
	/*   %194 = load i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		memory_controller_address_b = `TAG_g_ah1_a;
	end
	/* encode: %quantl.exit*/
	/*   %196 = load i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		memory_controller_address_b = `TAG_g_ah2_a;
	end
	/* encode: %quantl.exit*/
	/*   %206 = load i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		memory_controller_address_b = `TAG_g_deth_a;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %99, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		memory_controller_address_b = `TAG_g_rlt2_a;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %143, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		memory_controller_address_b = `TAG_g_plt2_a;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %205, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		memory_controller_address_b = `TAG_g_ih_a;
	end
	/* encode: %212*/
	/*   store i32 %213, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__212_64)) begin
		memory_controller_address_b = `TAG_g_ih_a;
	end
	/* encode: %214*/
	/*   %224 = load i32* %223, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		memory_controller_address_b = encode_214_223;
	end
	/* encode: %214*/
	/*   store i32 %...i2, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		memory_controller_address_b = `TAG_g_nbh_a;
	end
	/* encode: %214*/
	/*   store i32 %235, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_72)) begin
		memory_controller_address_b = `TAG_g_deth_a;
	end
	/* encode: %214*/
	/*   %238 = load i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_75)) begin
		memory_controller_address_b = `TAG_g_ph2_a;
	end
	/* encode: %214*/
	/*   store i32 %193, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_80)) begin
		memory_controller_address_b = `TAG_g_rh2_a;
	end
	/* encode: %214*/
	/*   store i32 %237, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_81)) begin
		memory_controller_address_b = `TAG_g_ph2_a;
	end
	/* encode: %214*/
	/*   store i32 %236, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_82)) begin
		memory_controller_address_b = `TAG_g_ph1_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %8 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %14 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %62 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %68 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %76 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %79 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %87 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %91 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %95 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %100 = load i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %102 = load i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   %108 = load i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %0*/
	/*   store i32 %56, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %44, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %38, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_25)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_26)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_27)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_28)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_29)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_30)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %3, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_31)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_32)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %0*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_33)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %126 = load i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_39)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %ril.0.i = load i32* %ril.0.in.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %ril.0.i, i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_43)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i13, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_46)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   %144 = load i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_50)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_51)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_52)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %177 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %185 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %189 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %194 = load i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %196 = load i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   %206 = load i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %99, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %143, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %205, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %212*/
	/*   store i32 %213, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__212_64)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %214*/
	/*   %224 = load i32* %223, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %214*/
	/*   store i32 %...i2, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %235, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_72)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %214*/
	/*   %238 = load i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_75)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* encode: %214*/
	/*   store i32 %193, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_80)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %237, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_81)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* encode: %214*/
	/*   store i32 %236, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_82)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* encode: %0*/
	/*   store i32 %56, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		memory_controller_in_b = encode_0_56_reg;
	end
	/* encode: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		memory_controller_in_b = encode_0_50_reg;
	end
	/* encode: %0*/
	/*   store i32 %44, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_24)) begin
		memory_controller_in_b = encode_0_44_reg;
	end
	/* encode: %0*/
	/*   store i32 %38, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_25)) begin
		memory_controller_in_b = encode_0_38_reg;
	end
	/* encode: %0*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_26)) begin
		memory_controller_in_b = encode_0_32_reg;
	end
	/* encode: %0*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_27)) begin
		memory_controller_in_b = encode_0_26_reg;
	end
	/* encode: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_28)) begin
		memory_controller_in_b = encode_0_20_reg;
	end
	/* encode: %0*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_29)) begin
		memory_controller_in_b = encode_0_14_reg;
	end
	/* encode: %0*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_30)) begin
		memory_controller_in_b = encode_0_8_reg;
	end
	/* encode: %0*/
	/*   store i32 %3, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_31)) begin
		memory_controller_in_b = encode_0_3_reg;
	end
	/* encode: %0*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_32)) begin
		memory_controller_in_b = arg_xin1;
	end
	/* encode: %0*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_33)) begin
		memory_controller_in_b = arg_xin2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %ril.0.i, i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_43)) begin
		memory_controller_in_b = encode_quantlexit_ril0i_reg;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i13, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_46)) begin
		memory_controller_in_b = encode_quantlexit_i13_reg;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %99, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		memory_controller_in_b = encode_0_99_reg;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %143, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		memory_controller_in_b = encode_quantlexit_143_reg;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %205, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		memory_controller_in_b = encode_quantlexit_205_reg;
	end
	/* encode: %212*/
	/*   store i32 %213, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__212_64)) begin
		memory_controller_in_b = encode_212_213;
	end
	/* encode: %214*/
	/*   store i32 %...i2, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		memory_controller_in_b = encode_214_i2;
	end
	/* encode: %214*/
	/*   store i32 %235, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_72)) begin
		memory_controller_in_b = encode_214_235;
	end
	/* encode: %214*/
	/*   store i32 %193, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_80)) begin
		memory_controller_in_b = encode_quantlexit_193_reg;
	end
	/* encode: %214*/
	/*   store i32 %237, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_81)) begin
		memory_controller_in_b = encode_214_237_reg;
	end
	/* encode: %214*/
	/*   store i32 %236, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_82)) begin
		memory_controller_in_b = encode_214_236_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* encode: %quantl.exit*/
	/*   tail call fastcc void @upzero(i32 %125, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* encode: %214*/
	/*   tail call fastcc void @upzero(i32 %219, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* encode: %0*/
	/*   %3 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %8 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %14 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %44 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %50 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %56 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %62 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %68 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %76 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %79 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %87 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %91 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %95 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %100 = load i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %102 = load i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   %108 = load i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %56, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %44, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %38, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %32, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_26)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %8, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %3, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %xin1, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %0*/
	/*   store i32 %xin2, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__0_33)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %126 = load i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_39)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %ril.0.i = load i32* %ril.0.in.i, align 4*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_42)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %ril.0.i, i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_43)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %...i13, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_46)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %144 = load i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_50)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_51)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_52)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %177 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_53)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %181 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_54)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %185 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_55)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %189 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_56)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %194 = load i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_57)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %196 = load i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_58)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   %206 = load i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_59)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %99, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_60)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %143, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_61)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %quantl.exit*/
	/*   store i32 %205, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB_quantlexit_62)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %212*/
	/*   store i32 %213, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__212_64)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %214*/
	/*   %224 = load i32* %223, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_66)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %214*/
	/*   store i32 %...i2, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_69)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %214*/
	/*   store i32 %235, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_72)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %214*/
	/*   %238 = load i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_75)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %214*/
	/*   store i32 %193, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_80)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %214*/
	/*   store i32 %237, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_81)) begin
		memory_controller_size_b = 2'd2;
	end
	/* encode: %214*/
	/*   store i32 %236, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_encode_BB__214_82)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* encode: %214*/
	/*   ret i32 %265*/
	if ((cur_state == LEGUP_F_encode_BB__214_83)) begin
		return_val <= encode_214_265_reg;
		if (start == 1'b0 && ^(encode_214_265_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__0_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__0_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__0_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__0_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__0_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__0_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__0_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__0_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__0_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__0_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__0_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__0_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__0_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__0_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__0_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__0_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__0_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__0_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__0_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__0_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__0_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__0_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__0_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB__0_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB__0_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB__0_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB__0_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB__0_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB__0_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB__0_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB__0_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB__1_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB__2_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB__2_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB_preheader2i_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB_preheader2i_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB_preheader2i_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB_preheader2i_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB_preheader2i_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB_preheader2i_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB_preheader2i_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB_preheader2i_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB_preheader2i_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_i64exit_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__58_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB__58_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB__58_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB__58_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB__58_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB__58_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB__58_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB__58_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB__58_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB__58_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB__58_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB__58_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB__58_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB__58_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB__58_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB__58_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB__58_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB__58_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB__58_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB__58_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB__58_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB__58_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB__58_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB__58_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB__58_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB__58_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB__58_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB__58_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB__58_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB__58_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB__58_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB__58_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB__58_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB__58_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB__58_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB__58_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB__58_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB__58_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB__58_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB__58_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB__58_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB__58_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB__58_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB__58_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB__58_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB__58_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB__58_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB__58_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB__58_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__58_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__58_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB__58_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB__58_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB__58_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexitpreheader_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB_preheaderpreheader_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB_preheader_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB_preheader_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB__277_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB__280_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB__282_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB__284_142 = 8'd142;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_39 = 8'd39;
parameter [7:0] LEGUP_function_call_42 = 8'd42;
parameter [7:0] LEGUP_function_call_45 = 8'd45;
parameter [7:0] LEGUP_function_call_48 = 8'd48;
parameter [7:0] LEGUP_function_call_53 = 8'd53;
parameter [7:0] LEGUP_function_call_56 = 8'd56;
parameter [7:0] LEGUP_function_call_59 = 8'd59;
parameter [7:0] LEGUP_function_call_62 = 8'd62;
parameter [7:0] LEGUP_function_call_65 = 8'd65;
parameter [7:0] LEGUP_function_call_68 = 8'd68;
parameter [7:0] LEGUP_function_call_71 = 8'd71;
parameter [7:0] LEGUP_function_call_74 = 8'd74;
parameter [7:0] LEGUP_function_call_116 = 8'd116;
parameter [7:0] LEGUP_function_call_129 = 8'd129;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [63:0] main_1_indvar35;
reg [63:0] main_1_indvar35_reg;
reg  main_1_exitcond37;
reg  main_1_exitcond37_reg;
reg [63:0] main_2_3;
reg [63:0] main_2_3_reg;
reg [63:0] main_2_4;
reg [63:0] main_2_4_reg;
reg [31:0] main_2_5;
reg [31:0] main_2_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0_reg;
reg [63:0] main_2_indvarnext36;
reg [63:0] main_2_indvarnext36_reg;
reg [31:0] main_preheader2i_6;
reg [31:0] main_preheader2i_6_reg;
reg [31:0] main_preheader2i_7;
reg [31:0] main_preheader2i_7_reg;
reg [31:0] main_preheader2i_8;
reg [31:0] main_preheader2i_8_reg;
reg [31:0] main_preheader2i_9;
reg [31:0] main_preheader2i_9_reg;
reg [31:0] main_legup_memset_4_i64exit_indvar8;
reg [31:0] main_legup_memset_4_i64exit_indvar8_reg;
reg [31:0] main_legup_memset_4_i64exit_10;
reg [31:0] main_legup_memset_4_i64exit_10_reg;
reg [31:0] main_legup_memset_4_i64exit_11;
reg [31:0] main_legup_memset_4_i64exit_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep11_reg;
reg [31:0] main_legup_memset_4_i64exit_12;
reg [31:0] main_legup_memset_4_i64exit_12_reg;
reg [31:0] main_legup_memset_4_i64exit_13;
reg [31:0] main_legup_memset_4_i64exit_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep12_reg;
reg [31:0] main_legup_memset_4_i64exit_14;
reg [31:0] main_legup_memset_4_i64exit_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep13_reg;
reg [31:0] main_legup_memset_4_i64exit_15;
reg [31:0] main_legup_memset_4_i64exit_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep14_reg;
reg [31:0] main_legup_memset_4_i64exit_16;
reg [31:0] main_legup_memset_4_i64exit_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep15_reg;
reg [31:0] main_legup_memset_4_i64exit_17;
reg [31:0] main_legup_memset_4_i64exit_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep16_reg;
reg [31:0] main_legup_memset_4_i64exit_18;
reg [31:0] main_legup_memset_4_i64exit_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep17_reg;
reg [31:0] main_legup_memset_4_i64exit_19;
reg [31:0] main_legup_memset_4_i64exit_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep18_reg;
reg [31:0] main_legup_memset_4_i64exit_20;
reg [31:0] main_legup_memset_4_i64exit_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep19_reg;
reg [31:0] main_legup_memset_4_i64exit_21;
reg [31:0] main_legup_memset_4_i64exit_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep20_reg;
reg [31:0] main_legup_memset_4_i64exit_22;
reg [31:0] main_legup_memset_4_i64exit_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep21_reg;
reg [31:0] main_legup_memset_4_i64exit_23;
reg [31:0] main_legup_memset_4_i64exit_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep22_reg;
reg [31:0] main_legup_memset_4_i64exit_24;
reg [31:0] main_legup_memset_4_i64exit_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep23_reg;
reg [31:0] main_legup_memset_4_i64exit_25;
reg [31:0] main_legup_memset_4_i64exit_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep24_reg;
reg [31:0] main_legup_memset_4_i64exit_26;
reg [31:0] main_legup_memset_4_i64exit_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep25_reg;
reg [31:0] main_legup_memset_4_i64exit_27;
reg [31:0] main_legup_memset_4_i64exit_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep26_reg;
reg [31:0] main_legup_memset_4_i64exit_28;
reg [31:0] main_legup_memset_4_i64exit_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep27_reg;
reg [31:0] main_legup_memset_4_i64exit_29;
reg [31:0] main_legup_memset_4_i64exit_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep28_reg;
reg [31:0] main_legup_memset_4_i64exit_30;
reg [31:0] main_legup_memset_4_i64exit_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep29_reg;
reg [31:0] main_legup_memset_4_i64exit_31;
reg [31:0] main_legup_memset_4_i64exit_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep30_reg;
reg [31:0] main_legup_memset_4_i64exit_32;
reg [31:0] main_legup_memset_4_i64exit_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep32_reg;
reg [31:0] main_legup_memset_4_i64exit_33;
reg [31:0] main_legup_memset_4_i64exit_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_i64exit_scevgep34_reg;
reg [31:0] main_legup_memset_4_i64exit_34;
reg [31:0] main_legup_memset_4_i64exit_34_reg;
reg [31:0] main_legup_memset_4_i64exit_35;
reg [31:0] main_legup_memset_4_i64exit_35_reg;
reg [31:0] main_legup_memset_4_i64exit_36;
reg [31:0] main_legup_memset_4_i64exit_36_reg;
reg [31:0] main_legup_memset_4_i64exit_37;
reg [31:0] main_legup_memset_4_i64exit_37_reg;
reg [31:0] main_legup_memset_4_i64exit_38;
reg [31:0] main_legup_memset_4_i64exit_38_reg;
reg [31:0] main_legup_memset_4_i64exit_39;
reg [31:0] main_legup_memset_4_i64exit_39_reg;
reg [31:0] main_legup_memset_4_i64exit_40;
reg [31:0] main_legup_memset_4_i64exit_40_reg;
reg [31:0] main_legup_memset_4_i64exit_41;
reg [31:0] main_legup_memset_4_i64exit_41_reg;
reg [31:0] main_legup_memset_4_i64exit_42;
reg [31:0] main_legup_memset_4_i64exit_42_reg;
reg [31:0] main_legup_memset_4_i64exit_43;
reg [31:0] main_legup_memset_4_i64exit_43_reg;
reg [31:0] main_legup_memset_4_i64exit_44;
reg [31:0] main_legup_memset_4_i64exit_44_reg;
reg [31:0] main_legup_memset_4_i64exit_45;
reg [31:0] main_legup_memset_4_i64exit_45_reg;
reg [31:0] main_legup_memset_4_i64exit_46;
reg [31:0] main_legup_memset_4_i64exit_46_reg;
reg [31:0] main_legup_memset_4_i64exit_47;
reg [31:0] main_legup_memset_4_i64exit_47_reg;
reg [31:0] main_legup_memset_4_i64exit_48;
reg [31:0] main_legup_memset_4_i64exit_48_reg;
reg [31:0] main_legup_memset_4_i64exit_49;
reg [31:0] main_legup_memset_4_i64exit_49_reg;
reg [31:0] main_legup_memset_4_i64exit_50;
reg [31:0] main_legup_memset_4_i64exit_50_reg;
reg [31:0] main_legup_memset_4_i64exit_51;
reg [31:0] main_legup_memset_4_i64exit_51_reg;
reg [31:0] main_legup_memset_4_i64exit_52;
reg [31:0] main_legup_memset_4_i64exit_52_reg;
reg [31:0] main_legup_memset_4_i64exit_53;
reg [31:0] main_legup_memset_4_i64exit_53_reg;
reg [31:0] main_legup_memset_4_i64exit_54;
reg [31:0] main_legup_memset_4_i64exit_54_reg;
reg [31:0] main_legup_memset_4_i64exit_55;
reg [31:0] main_legup_memset_4_i64exit_55_reg;
reg [31:0] main_legup_memset_4_i64exit_56;
reg [31:0] main_legup_memset_4_i64exit_56_reg;
reg [31:0] main_legup_memset_4_i64exit_57;
reg [31:0] main_legup_memset_4_i64exit_57_reg;
reg [31:0] main_legup_memset_4_i64exit_indvarnext9;
reg [31:0] main_legup_memset_4_i64exit_indvarnext9_reg;
reg  main_legup_memset_4_i64exit_exitcond10;
reg  main_legup_memset_4_i64exit_exitcond10_reg;
reg [31:0] main_58_indvar;
reg [31:0] main_58_indvar_reg;
reg [31:0] main_58_accumd100;
reg [31:0] main_58_accumd100_reg;
reg [31:0] main_58_accumd90;
reg [31:0] main_58_accumd90_reg;
reg [31:0] main_58_accumd80;
reg [31:0] main_58_accumd80_reg;
reg [31:0] main_58_accumd70;
reg [31:0] main_58_accumd70_reg;
reg [31:0] main_58_accumd60;
reg [31:0] main_58_accumd60_reg;
reg [31:0] main_58_accumd50;
reg [31:0] main_58_accumd50_reg;
reg [31:0] main_58_accumd40;
reg [31:0] main_58_accumd40_reg;
reg [31:0] main_58_accumd30;
reg [31:0] main_58_accumd30_reg;
reg [31:0] main_58_accumd20;
reg [31:0] main_58_accumd20_reg;
reg [31:0] main_58_accumd10;
reg [31:0] main_58_accumd10_reg;
reg [31:0] main_58_accumd00;
reg [31:0] main_58_accumd00_reg;
reg [31:0] main_58_accumc100;
reg [31:0] main_58_accumc100_reg;
reg [31:0] main_58_accumc90;
reg [31:0] main_58_accumc90_reg;
reg [31:0] main_58_accumc80;
reg [31:0] main_58_accumc80_reg;
reg [31:0] main_58_accumc70;
reg [31:0] main_58_accumc70_reg;
reg [31:0] main_58_accumc60;
reg [31:0] main_58_accumc60_reg;
reg [31:0] main_58_accumc50;
reg [31:0] main_58_accumc50_reg;
reg [31:0] main_58_accumc40;
reg [31:0] main_58_accumc40_reg;
reg [31:0] main_58_accumc30;
reg [31:0] main_58_accumc30_reg;
reg [31:0] main_58_accumc20;
reg [31:0] main_58_accumc20_reg;
reg [31:0] main_58_accumc10;
reg [31:0] main_58_accumc10_reg;
reg [31:0] main_58_accumc00;
reg [31:0] main_58_accumc00_reg;
reg [31:0] main_58_dec_ph20;
reg [31:0] main_58_dec_ph20_reg;
reg [31:0] main_58_dec_ph10;
reg [31:0] main_58_dec_ph10_reg;
reg [31:0] main_58_dec_nbh0;
reg [31:0] main_58_dec_nbh0_reg;
reg [31:0] main_58_dec_deth0;
reg [31:0] main_58_dec_deth0_reg;
reg [31:0] main_58_dec_ah20;
reg [31:0] main_58_dec_ah20_reg;
reg [31:0] main_58_dec_rh20;
reg [31:0] main_58_dec_rh20_reg;
reg [31:0] main_58_dec_ah10;
reg [31:0] main_58_dec_ah10_reg;
reg [31:0] main_58_dec_rh10;
reg [31:0] main_58_dec_rh10_reg;
reg [31:0] main_58_dec_plt20;
reg [31:0] main_58_dec_plt20_reg;
reg [31:0] main_58_dec_plt10;
reg [31:0] main_58_dec_plt10_reg;
reg [31:0] main_58_dec_nbl0;
reg [31:0] main_58_dec_nbl0_reg;
reg [31:0] main_58_dec_detl0;
reg [31:0] main_58_dec_detl0_reg;
reg [31:0] main_58_dec_al20;
reg [31:0] main_58_dec_al20_reg;
reg [31:0] main_58_dec_rlt20;
reg [31:0] main_58_dec_rlt20_reg;
reg [31:0] main_58_dec_al10;
reg [31:0] main_58_dec_al10_reg;
reg [31:0] main_58_dec_rlt10;
reg [31:0] main_58_dec_rlt10_reg;
reg [31:0] main_58_i03i;
reg [31:0] main_58_i03i_reg;
reg [31:0] main_58_59;
reg [31:0] main_58_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_scevgep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_scevgep7_reg;
reg [31:0] main_58_60;
reg [31:0] main_58_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_61_reg;
reg [31:0] main_58_62;
reg [31:0] main_58_62_reg;
reg [31:0] main_58_63;
reg [31:0] main_58_63_reg;
reg [31:0] main_58_64;
reg [31:0] main_58_64_reg;
reg [31:0] main_58_65;
reg [31:0] main_58_65_reg;
reg [31:0] main_58_66;
reg [31:0] main_58_66_reg;
reg [31:0] main_58_67;
reg [31:0] main_58_67_reg;
reg [31:0] main_58_68;
reg [31:0] main_58_68_reg;
reg [31:0] main_58_69;
reg [31:0] main_58_69_reg;
reg [31:0] main_58_70;
reg [31:0] main_58_70_reg;
reg [31:0] main_58_71;
reg [31:0] main_58_71_reg;
reg [31:0] main_58_72;
reg [31:0] main_58_72_reg;
reg [31:0] main_58_73;
reg [31:0] main_58_73_reg;
reg [31:0] main_58_74;
reg [31:0] main_58_74_reg;
reg [31:0] main_58_75;
reg [31:0] main_58_75_reg;
reg [31:0] main_58_76;
reg [31:0] main_58_76_reg;
reg [31:0] main_58_77;
reg [31:0] main_58_77_reg;
reg [31:0] main_58_78;
reg [31:0] main_58_78_reg;
reg [31:0] main_58_79;
reg [31:0] main_58_79_reg;
reg [31:0] main_58_80;
reg [31:0] main_58_80_reg;
reg [31:0] main_58_81;
reg [31:0] main_58_81_reg;
reg [31:0] main_58_82;
reg [31:0] main_58_82_reg;
reg [31:0] main_58_83;
reg [31:0] main_58_83_reg;
reg [31:0] main_58_84;
reg [31:0] main_58_84_reg;
reg [31:0] main_58_85;
reg [31:0] main_58_85_reg;
reg [31:0] main_58_86;
reg [31:0] main_58_86_reg;
reg [31:0] main_58_87;
reg [31:0] main_58_87_reg;
reg [31:0] main_58_88;
reg [31:0] main_58_88_reg;
reg [31:0] main_58_89;
reg [31:0] main_58_89_reg;
reg [31:0] main_58_tmpiii;
reg [31:0] main_58_tmpiii_reg;
reg [31:0] main_58_tmp1iii;
reg [31:0] main_58_tmp1iii_reg;
reg [31:0] main_58_90;
reg [31:0] main_58_90_reg;
reg [31:0] main_58_91;
reg [31:0] main_58_91_reg;
reg [31:0] main_58_92;
reg [31:0] main_58_92_reg;
reg [31:0] main_58_93;
reg [31:0] main_58_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_94_reg;
reg [31:0] main_58_95;
reg [31:0] main_58_95_reg;
reg [31:0] main_58_96;
reg [31:0] main_58_96_reg;
reg [31:0] main_58_97;
reg [31:0] main_58_97_reg;
reg [31:0] main_58_98;
reg [31:0] main_58_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_99_reg;
reg [31:0] main_58_100;
reg [31:0] main_58_100_reg;
reg [31:0] main_58_101;
reg [31:0] main_58_101_reg;
reg [31:0] main_58_102;
reg [31:0] main_58_102_reg;
reg [31:0] main_58_103;
reg [31:0] main_58_103_reg;
reg [31:0] main_58_104;
reg [31:0] main_58_104_reg;
reg [31:0] main_58_105;
reg [31:0] main_58_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_106_reg;
reg [31:0] main_58_107;
reg [31:0] main_58_107_reg;
reg [31:0] main_58_108;
reg [31:0] main_58_108_reg;
reg  main_58_109;
reg  main_58_109_reg;
reg [31:0] main_58_i12ii;
reg [31:0] main_58_i12ii_reg;
reg  main_58_110;
reg  main_58_110_reg;
reg [31:0] main_58_i13ii;
reg [31:0] main_58_i13ii_reg;
reg [31:0] main_58_111;
reg [31:0] main_58_111_reg;
reg [31:0] main_58_112;
reg [31:0] main_58_112_reg;
reg [31:0] main_58_113;
reg [31:0] main_58_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_114_reg;
reg [31:0] main_58_115;
reg [31:0] main_58_115_reg;
reg [31:0] main_58_116;
reg [31:0] main_58_116_reg;
reg [31:0] main_58_117;
reg [31:0] main_58_117_reg;
reg [31:0] main_58_118;
reg [31:0] main_58_118_reg;
reg [31:0] main_58_119;
reg [31:0] main_58_119_reg;
reg [31:0] main_58_120;
reg [31:0] main_58_120_reg;
reg [31:0] main_58_121;
reg [31:0] main_58_121_reg;
reg  main_58_122;
reg  main_58_122_reg;
reg [31:0] main_58_123;
reg [31:0] main_58_123_reg;
reg [31:0] main_58_1i8ii;
reg [31:0] main_58_1i8ii_reg;
reg [31:0] main_58_124;
reg [31:0] main_58_124_reg;
reg [31:0] main_58_125;
reg [31:0] main_58_125_reg;
reg [31:0] main_58_126;
reg [31:0] main_58_126_reg;
reg [31:0] main_58_127;
reg [31:0] main_58_127_reg;
reg [31:0] main_58_128;
reg [31:0] main_58_128_reg;
reg [31:0] main_58_129;
reg [31:0] main_58_129_reg;
reg [31:0] main_58_130;
reg [31:0] main_58_130_reg;
reg [31:0] main_58_wd40i9ii;
reg [31:0] main_58_wd40i9ii_reg;
reg [31:0] main_58_131;
reg [31:0] main_58_131_reg;
reg  main_58_132;
reg  main_58_132_reg;
reg [31:0] main_58_i10ii;
reg [31:0] main_58_i10ii_reg;
reg  main_58_133;
reg  main_58_133_reg;
reg [31:0] main_58_i11ii;
reg [31:0] main_58_i11ii_reg;
reg [31:0] main_58_134;
reg [31:0] main_58_134_reg;
reg [31:0] main_58_135;
reg [31:0] main_58_135_reg;
reg [31:0] main_58_136;
reg [31:0] main_58_136_reg;
reg [31:0] main_58_137;
reg [31:0] main_58_137_reg;
reg [31:0] main_58_138;
reg [31:0] main_58_138_reg;
reg [31:0] main_58_apl10i5ii;
reg [31:0] main_58_apl10i5ii_reg;
reg [31:0] main_58_139;
reg [31:0] main_58_139_reg;
reg  main_58_140;
reg  main_58_140_reg;
reg [31:0] main_58_apl10i6ii;
reg [31:0] main_58_apl10i6ii_reg;
reg [31:0] main_58_141;
reg [31:0] main_58_141_reg;
reg  main_58_142;
reg  main_58_142_reg;
reg [31:0] main_58_apl12i7ii;
reg [31:0] main_58_apl12i7ii_reg;
reg [31:0] main_58_143;
reg [31:0] main_58_143_reg;
reg [31:0] main_58_144;
reg [31:0] main_58_144_reg;
reg [31:0] main_58_145;
reg [31:0] main_58_145_reg;
reg [31:0] main_58_146;
reg [31:0] main_58_146_reg;
reg [31:0] main_58_147;
reg [31:0] main_58_147_reg;
reg [31:0] main_58_148;
reg [31:0] main_58_148_reg;
reg [31:0] main_58_149;
reg [31:0] main_58_149_reg;
reg [31:0] main_58_150;
reg [31:0] main_58_150_reg;
reg [31:0] main_58_151;
reg [31:0] main_58_151_reg;
reg [31:0] main_58_152;
reg [31:0] main_58_152_reg;
reg [31:0] main_58_153;
reg [31:0] main_58_153_reg;
reg [31:0] main_58_154;
reg [31:0] main_58_154_reg;
reg [31:0] main_58_155;
reg [31:0] main_58_155_reg;
reg [31:0] main_58_156;
reg [31:0] main_58_156_reg;
reg [31:0] main_58_157;
reg [31:0] main_58_157_reg;
reg [31:0] main_58_158;
reg [31:0] main_58_158_reg;
reg [31:0] main_58_159;
reg [31:0] main_58_159_reg;
reg [31:0] main_58_160;
reg [31:0] main_58_160_reg;
reg [31:0] main_58_161;
reg [31:0] main_58_161_reg;
reg [31:0] main_58_162;
reg [31:0] main_58_162_reg;
reg [31:0] main_58_163;
reg [31:0] main_58_163_reg;
reg [31:0] main_58_164;
reg [31:0] main_58_164_reg;
reg [31:0] main_58_165;
reg [31:0] main_58_165_reg;
reg [31:0] main_58_166;
reg [31:0] main_58_166_reg;
reg [31:0] main_58_167;
reg [31:0] main_58_167_reg;
reg [31:0] main_58_168;
reg [31:0] main_58_168_reg;
reg [31:0] main_58_169;
reg [31:0] main_58_169_reg;
reg [31:0] main_58_tmpi3ii;
reg [31:0] main_58_tmpi3ii_reg;
reg [31:0] main_58_tmp1i4ii;
reg [31:0] main_58_tmp1i4ii_reg;
reg [31:0] main_58_170;
reg [31:0] main_58_170_reg;
reg [31:0] main_58_171;
reg [31:0] main_58_171_reg;
reg [31:0] main_58_172;
reg [31:0] main_58_172_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_173_reg;
reg [31:0] main_58_174;
reg [31:0] main_58_174_reg;
reg [31:0] main_58_175;
reg [31:0] main_58_175_reg;
reg [31:0] main_58_176;
reg [31:0] main_58_176_reg;
reg [31:0] main_58_177;
reg [31:0] main_58_177_reg;
reg [31:0] main_58_178;
reg [31:0] main_58_178_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_179;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_179_reg;
reg [31:0] main_58_180;
reg [31:0] main_58_180_reg;
reg [31:0] main_58_181;
reg [31:0] main_58_181_reg;
reg  main_58_182;
reg  main_58_182_reg;
reg [31:0] main_58_i1ii;
reg [31:0] main_58_i1ii_reg;
reg  main_58_183;
reg  main_58_183_reg;
reg [31:0] main_58_i2ii;
reg [31:0] main_58_i2ii_reg;
reg [31:0] main_58_184;
reg [31:0] main_58_184_reg;
reg [31:0] main_58_185;
reg [31:0] main_58_185_reg;
reg [31:0] main_58_186;
reg [31:0] main_58_186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_187;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_187_reg;
reg [31:0] main_58_188;
reg [31:0] main_58_188_reg;
reg [31:0] main_58_189;
reg [31:0] main_58_189_reg;
reg [31:0] main_58_190;
reg [31:0] main_58_190_reg;
reg [31:0] main_58_191;
reg [31:0] main_58_191_reg;
reg [31:0] main_58_192;
reg [31:0] main_58_192_reg;
reg [31:0] main_58_193;
reg [31:0] main_58_193_reg;
reg [31:0] main_58_194;
reg [31:0] main_58_194_reg;
reg  main_58_195;
reg  main_58_195_reg;
reg [31:0] main_58_196;
reg [31:0] main_58_196_reg;
reg [31:0] main_58_1iii;
reg [31:0] main_58_1iii_reg;
reg [31:0] main_58_197;
reg [31:0] main_58_197_reg;
reg [31:0] main_58_198;
reg [31:0] main_58_198_reg;
reg [31:0] main_58_199;
reg [31:0] main_58_199_reg;
reg [31:0] main_58_200;
reg [31:0] main_58_200_reg;
reg [31:0] main_58_201;
reg [31:0] main_58_201_reg;
reg [31:0] main_58_202;
reg [31:0] main_58_202_reg;
reg [31:0] main_58_203;
reg [31:0] main_58_203_reg;
reg [31:0] main_58_wd40iii;
reg [31:0] main_58_wd40iii_reg;
reg [31:0] main_58_204;
reg [31:0] main_58_204_reg;
reg  main_58_205;
reg  main_58_205_reg;
reg [31:0] main_58_iii;
reg [31:0] main_58_iii_reg;
reg  main_58_206;
reg  main_58_206_reg;
reg [31:0] main_58_iii_var0;
reg [31:0] main_58_iii_var0_reg;
reg [31:0] main_58_207;
reg [31:0] main_58_207_reg;
reg [31:0] main_58_208;
reg [31:0] main_58_208_reg;
reg [31:0] main_58_209;
reg [31:0] main_58_209_reg;
reg [31:0] main_58_210;
reg [31:0] main_58_210_reg;
reg [31:0] main_58_211;
reg [31:0] main_58_211_reg;
reg [31:0] main_58_apl10iii;
reg [31:0] main_58_apl10iii_reg;
reg [31:0] main_58_212;
reg [31:0] main_58_212_reg;
reg  main_58_213;
reg  main_58_213_reg;
reg [31:0] main_58_apl10iii_var1;
reg [31:0] main_58_apl10iii_var1_reg;
reg [31:0] main_58_214;
reg [31:0] main_58_214_reg;
reg  main_58_215;
reg  main_58_215_reg;
reg [31:0] main_58_apl12iii;
reg [31:0] main_58_apl12iii_reg;
reg [31:0] main_58_216;
reg [31:0] main_58_216_reg;
reg [31:0] main_58_217;
reg [31:0] main_58_217_reg;
reg [31:0] main_58_218;
reg [31:0] main_58_218_reg;
reg [31:0] main_58_219;
reg [31:0] main_58_219_reg;
reg [31:0] main_58_220;
reg [31:0] main_58_220_reg;
reg [31:0] main_58_221;
reg [31:0] main_58_221_reg;
reg [31:0] main_58_222;
reg [31:0] main_58_222_reg;
reg [31:0] main_58_223;
reg [31:0] main_58_223_reg;
reg [31:0] main_58_224;
reg [31:0] main_58_224_reg;
reg [31:0] main_58_225;
reg [31:0] main_58_225_reg;
reg [31:0] main_58_226;
reg [31:0] main_58_226_reg;
reg [31:0] main_58_227;
reg [31:0] main_58_227_reg;
reg [31:0] main_58_228;
reg [31:0] main_58_228_reg;
reg [31:0] main_58_229;
reg [31:0] main_58_229_reg;
reg [31:0] main_58_230;
reg [31:0] main_58_230_reg;
reg [31:0] main_58_231;
reg [31:0] main_58_231_reg;
reg [31:0] main_58_232;
reg [31:0] main_58_232_reg;
reg [31:0] main_58_233;
reg [31:0] main_58_233_reg;
reg [31:0] main_58_234;
reg [31:0] main_58_234_reg;
reg [31:0] main_58_235;
reg [31:0] main_58_235_reg;
reg [31:0] main_58_236;
reg [31:0] main_58_236_reg;
reg [31:0] main_58_237;
reg [31:0] main_58_237_reg;
reg [31:0] main_58_238;
reg [31:0] main_58_238_reg;
reg [31:0] main_58_239;
reg [31:0] main_58_239_reg;
reg [31:0] main_58_240;
reg [31:0] main_58_240_reg;
reg [31:0] main_58_241;
reg [31:0] main_58_241_reg;
reg [31:0] main_58_242;
reg [31:0] main_58_242_reg;
reg [31:0] main_58_243;
reg [31:0] main_58_243_reg;
reg [31:0] main_58_244;
reg [31:0] main_58_244_reg;
reg [31:0] main_58_245;
reg [31:0] main_58_245_reg;
reg [31:0] main_58_246;
reg [31:0] main_58_246_reg;
reg [31:0] main_58_247;
reg [31:0] main_58_247_reg;
reg [31:0] main_58_248;
reg [31:0] main_58_248_reg;
reg [31:0] main_58_249;
reg [31:0] main_58_249_reg;
reg [31:0] main_58_250;
reg [31:0] main_58_250_reg;
reg [31:0] main_58_251;
reg [31:0] main_58_251_reg;
reg [31:0] main_58_252;
reg [31:0] main_58_252_reg;
reg [31:0] main_58_253;
reg [31:0] main_58_253_reg;
reg [31:0] main_58_254;
reg [31:0] main_58_254_reg;
reg [31:0] main_58_255;
reg [31:0] main_58_255_reg;
reg [31:0] main_58_256;
reg [31:0] main_58_256_reg;
reg [31:0] main_58_257;
reg [31:0] main_58_257_reg;
reg [31:0] main_58_258;
reg [31:0] main_58_258_reg;
reg [31:0] main_58_259;
reg [31:0] main_58_259_reg;
reg [31:0] main_58_260;
reg [31:0] main_58_260_reg;
reg [31:0] main_58_261;
reg [31:0] main_58_261_reg;
reg [31:0] main_58_262;
reg [31:0] main_58_262_reg;
reg [31:0] main_58_263;
reg [31:0] main_58_263_reg;
reg [31:0] main_58_264;
reg [31:0] main_58_264_reg;
reg [31:0] main_58_265;
reg [31:0] main_58_265_reg;
reg [31:0] main_58_266;
reg [31:0] main_58_266_reg;
reg [31:0] main_58_indvarnext;
reg [31:0] main_58_indvarnext_reg;
reg  main_58_exitcond5;
reg  main_58_exitcond5_reg;
reg [31:0] main_adpcm_mainexit_main_result04;
reg [31:0] main_adpcm_mainexit_main_result04_reg;
reg [31:0] main_adpcm_mainexit_i03;
reg [31:0] main_adpcm_mainexit_i03_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_scevgep4_reg;
reg [31:0] main_adpcm_mainexit_267;
reg [31:0] main_adpcm_mainexit_267_reg;
reg [31:0] main_adpcm_mainexit_268;
reg [31:0] main_adpcm_mainexit_268_reg;
reg  main_adpcm_mainexit_269;
reg  main_adpcm_mainexit_269_reg;
reg [31:0] main_adpcm_mainexit_270;
reg [31:0] main_adpcm_mainexit_270_reg;
reg [31:0] main_adpcm_mainexit_main_result0;
reg [31:0] main_adpcm_mainexit_main_result0_reg;
reg [31:0] main_adpcm_mainexit_271;
reg [31:0] main_adpcm_mainexit_271_reg;
reg  main_adpcm_mainexit_exitcond;
reg  main_adpcm_mainexit_exitcond_reg;
reg [31:0] main_preheader_main_result22;
reg [31:0] main_preheader_main_result22_reg;
reg [31:0] main_preheader_i11;
reg [31:0] main_preheader_i11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_scevgep2_reg;
reg [31:0] main_preheader_272;
reg [31:0] main_preheader_272_reg;
reg [31:0] main_preheader_273;
reg [31:0] main_preheader_273_reg;
reg  main_preheader_274;
reg  main_preheader_274_reg;
reg [31:0] main_preheader_275;
reg [31:0] main_preheader_275_reg;
reg [31:0] main_preheader_main_result2;
reg [31:0] main_preheader_main_result2_reg;
reg [31:0] main_preheader_276;
reg [31:0] main_preheader_276_reg;
reg  main_preheader_exitcond1;
reg  main_preheader_exitcond1_reg;
reg  main_277_279;
reg  main_277_279_reg;
wire [1:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [1:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
reg [5:0] qq6_code6_table_address_a;
reg  qq6_code6_table_write_enable_a;
wire [31:0] qq6_code6_table_in_a;
wire [31:0] qq6_code6_table_out_a;
wire [5:0] qq6_code6_table_address_b;
wire  qq6_code6_table_write_enable_b;
wire [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_b;
wire [4:0] decis_levl_address_a;
wire  decis_levl_write_enable_a;
wire [31:0] decis_levl_in_a;
wire [31:0] decis_levl_out_a;
wire [4:0] decis_levl_address_b;
wire  decis_levl_write_enable_b;
wire [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_b;
wire [2:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [2:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire  xh_address_a;
wire  xh_write_enable_a;
wire [31:0] xh_in_a;
wire [31:0] xh_out_a;
wire  xh_address_b;
wire  xh_write_enable_b;
wire [31:0] xh_in_b;
wire [31:0] xh_out_b;
reg [6:0] test_data_address_a;
reg  test_data_write_enable_a;
wire [31:0] test_data_in_a;
wire [31:0] test_data_out_a;
reg [6:0] test_data_address_b;
reg  test_data_write_enable_b;
wire [31:0] test_data_in_b;
wire [31:0] test_data_out_b;
reg [6:0] test_compressed_address_a;
reg  test_compressed_write_enable_a;
wire [31:0] test_compressed_in_a;
wire [31:0] test_compressed_out_a;
wire [6:0] test_compressed_address_b;
wire  test_compressed_write_enable_b;
wire [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_b;
reg [6:0] test_result_address_a;
reg  test_result_write_enable_a;
wire [31:0] test_result_in_a;
wire [31:0] test_result_out_a;
wire [6:0] test_result_address_b;
wire  test_result_write_enable_b;
wire [31:0] test_result_in_b;
wire [31:0] test_result_out_b;
reg [6:0] compressed_address_a;
reg  compressed_write_enable_a;
reg [31:0] compressed_in_a;
wire [31:0] compressed_out_a;
wire [6:0] compressed_address_b;
wire  compressed_write_enable_b;
wire [31:0] compressed_in_b;
wire [31:0] compressed_out_b;
reg [6:0] result_address_a;
reg  result_write_enable_a;
reg [31:0] result_in_a;
wire [31:0] result_out_a;
reg [6:0] result_address_b;
reg  result_write_enable_b;
reg [31:0] result_in_b;
wire [31:0] result_out_b;
reg  encode_start;
reg [31:0] encode_arg_xin1;
reg [31:0] encode_arg_xin2;
wire  encode_memory_controller_enable_a;
wire  encode_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_memory_controller_out_a;
wire [1:0] encode_memory_controller_size_a;
wire  encode_memory_controller_enable_b;
wire  encode_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_memory_controller_out_b;
wire [1:0] encode_memory_controller_size_b;
reg  encode_memory_controller_waitrequest;
reg  encode_finish_final;
reg  encode_finish_reg;
wire  encode_finish;
wire [31:0] encode_return_val;
reg [31:0] encode_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  upzero_start;
reg [31:0] upzero_arg_dlt;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_dlti;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_bli;
wire  upzero_memory_controller_enable_a;
wire  upzero_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_out_a;
wire [1:0] upzero_memory_controller_size_a;
wire  upzero_memory_controller_enable_b;
wire  upzero_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] upzero_memory_controller_out_b;
wire [1:0] upzero_memory_controller_size_b;
reg  upzero_memory_controller_waitrequest;
reg  upzero_finish_final;
reg  upzero_finish_reg;
wire  upzero_finish;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_58_60_temp_out;
wire [31:0] main_58_60_unused;
reg  lpm_divide_main_58_60_en;
reg [31:0] lpm_divide_main_58_60_out;
reg [31:0] main_signed_divide_32_0;
reg  lpm_mult_main_58_88_en;
reg [31:0] main_58_88_stage0_reg;
reg  lpm_mult_main_58_89_en;
reg [31:0] main_58_89_stage0_reg;
reg  lpm_mult_main_58_104_en;
reg [31:0] main_58_104_stage0_reg;
reg  lpm_mult_main_58_129_en;
reg [31:0] main_58_129_stage0_reg;
reg  lpm_mult_main_58_134_en;
reg [31:0] main_58_134_stage0_reg;
reg  lpm_mult_main_58_168_en;
reg [31:0] main_58_168_stage0_reg;
reg  lpm_mult_main_58_169_en;
reg [31:0] main_58_169_stage0_reg;
reg  lpm_mult_main_58_177_en;
reg [31:0] main_58_177_stage0_reg;
reg  lpm_mult_main_58_202_en;
reg [31:0] main_58_202_stage0_reg;
reg  lpm_mult_main_58_207_en;
reg [31:0] main_58_207_stage0_reg;
reg  lpm_mult_main_58_221_en;
reg [31:0] main_58_221_stage0_reg;
reg  lpm_mult_main_58_223_en;
reg [31:0] main_58_223_stage0_reg;
reg  lpm_mult_main_58_225_en;
reg [31:0] main_58_225_stage0_reg;
reg  lpm_mult_main_58_227_en;
reg [31:0] main_58_227_stage0_reg;
reg  lpm_mult_main_58_231_en;
reg [31:0] main_58_231_stage0_reg;
reg  lpm_mult_main_58_233_en;
reg [31:0] main_58_233_stage0_reg;
reg  lpm_mult_main_58_235_en;
reg [31:0] main_58_235_stage0_reg;
reg  lpm_mult_main_58_237_en;
reg [31:0] main_58_237_stage0_reg;
reg  lpm_mult_main_58_239_en;
reg [31:0] main_58_239_stage0_reg;
reg  lpm_mult_main_58_241_en;
reg [31:0] main_58_241_stage0_reg;
reg  lpm_mult_main_58_243_en;
reg [31:0] main_58_243_stage0_reg;
reg  lpm_mult_main_58_245_en;
reg [31:0] main_58_245_stage0_reg;
reg  lpm_mult_main_58_247_en;
reg [31:0] main_58_247_stage0_reg;
reg  lpm_mult_main_58_249_en;
reg [31:0] main_58_249_stage0_reg;
reg  lpm_mult_main_58_253_en;
reg [31:0] main_58_253_stage0_reg;
reg  lpm_mult_main_58_255_en;
reg [31:0] main_58_255_stage0_reg;
reg  lpm_mult_main_58_257_en;
reg [31:0] main_58_257_stage0_reg;
reg  lpm_mult_main_58_259_en;
reg [31:0] main_58_259_stage0_reg;
reg  lpm_mult_main_58_261_en;
reg [31:0] main_58_261_stage0_reg;
reg  lpm_mult_main_58_263_en;
reg [31:0] main_58_263_stage0_reg;
reg  lpm_mult_main_58_66_en;
reg [31:0] main_58_66_stage0_reg;
reg  lpm_mult_main_58_69_en;
reg [31:0] main_58_69_stage0_reg;
reg  lpm_mult_main_58_73_en;
reg [31:0] main_58_73_stage0_reg;
reg  lpm_mult_main_58_77_en;
reg [31:0] main_58_77_stage0_reg;
reg  lpm_mult_main_58_81_en;
reg [31:0] main_58_81_stage0_reg;
reg  lpm_mult_main_58_85_en;
reg [31:0] main_58_85_stage0_reg;
reg  lpm_mult_main_58_101_en;
reg [31:0] main_58_101_stage0_reg;
reg  lpm_mult_main_58_96_en;
reg [31:0] main_58_96_stage0_reg;
reg  lpm_mult_main_58_121_en;
reg [31:0] main_58_121_stage0_reg;
reg  lpm_mult_main_58_125_en;
reg [31:0] main_58_125_stage0_reg;
reg  lpm_mult_main_58_146_en;
reg [31:0] main_58_146_stage0_reg;
reg  lpm_mult_main_58_149_en;
reg [31:0] main_58_149_stage0_reg;
reg  lpm_mult_main_58_153_en;
reg [31:0] main_58_153_stage0_reg;
reg  lpm_mult_main_58_157_en;
reg [31:0] main_58_157_stage0_reg;
reg  lpm_mult_main_58_161_en;
reg [31:0] main_58_161_stage0_reg;
reg  lpm_mult_main_58_175_en;
reg [31:0] main_58_175_stage0_reg;
reg  lpm_mult_main_58_165_en;
reg [31:0] main_58_165_stage0_reg;
reg  lpm_mult_main_58_194_en;
reg [31:0] main_58_194_stage0_reg;
reg  lpm_mult_main_58_198_en;
reg [31:0] main_58_198_stage0_reg;
reg  lpm_mult_main_58_219_en;
reg [31:0] main_58_219_stage0_reg;
reg  lpm_mult_main_58_220_en;
reg [31:0] main_58_220_stage0_reg;

/*   %60 = sdiv i32 %i.03.i, 2*/
lpm_divide lpm_divide_main_58_60 (
	.quotient (lpm_divide_main_58_60_temp_out),
	.remain (main_58_60_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_58_60_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_58_60.lpm_pipeline = 32,
	lpm_divide_main_58_60.lpm_widthn = 32,
	lpm_divide_main_58_60.lpm_widthd = 32,
	lpm_divide_main_58_60.lpm_drepresentation = "SIGNED",
	lpm_divide_main_58_60.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_58_60.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


encode encode (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (encode_memory_controller_enable_a),
	.memory_controller_address_a (encode_memory_controller_address_a),
	.memory_controller_write_enable_a (encode_memory_controller_write_enable_a),
	.memory_controller_in_a (encode_memory_controller_in_a),
	.memory_controller_size_a (encode_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (encode_memory_controller_enable_b),
	.memory_controller_address_b (encode_memory_controller_address_b),
	.memory_controller_write_enable_b (encode_memory_controller_write_enable_b),
	.memory_controller_in_b (encode_memory_controller_in_b),
	.memory_controller_size_b (encode_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (encode_start),
	.finish (encode_finish),
	.return_val (encode_return_val),
	.arg_xin1 (encode_arg_xin1),
	.arg_xin2 (encode_arg_xin2)
);

defparam
	encode.tag_offset = tag_offset;


upzero upzero (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (upzero_memory_controller_enable_a),
	.memory_controller_address_a (upzero_memory_controller_address_a),
	.memory_controller_write_enable_a (upzero_memory_controller_write_enable_a),
	.memory_controller_in_a (upzero_memory_controller_in_a),
	.memory_controller_size_a (upzero_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (upzero_memory_controller_enable_b),
	.memory_controller_address_b (upzero_memory_controller_address_b),
	.memory_controller_write_enable_b (upzero_memory_controller_write_enable_b),
	.memory_controller_in_b (upzero_memory_controller_in_b),
	.memory_controller_size_b (upzero_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (upzero_start),
	.finish (upzero_finish),
	.arg_dlt (upzero_arg_dlt),
	.arg_dlti (upzero_arg_dlti),
	.arg_bli (upzero_arg_bli)
);

defparam
	upzero.tag_offset = tag_offset;

// Local Rams


// @qq6_code6_table = internal unnamed_addr constant [64 x i32] [i32 -136, i32 -136, i32 -136, i32 -136, i32 -24808, i32 -21904, i32 -19008, i32 -16704, i32 -14984, i32 -13512, i32 -12280, i32 -11192, i3...
rom_dual_port qq6_code6_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq6_code6_table_address_a ),
	.address_b( qq6_code6_table_address_b ),
	.q_a( qq6_code6_table_out_a ),
	.q_b( qq6_code6_table_out_b)
);
defparam qq6_code6_table.width_a = 32;
defparam qq6_code6_table.width_b = 32;
defparam qq6_code6_table.widthad_a = 6;
defparam qq6_code6_table.widthad_b = 6;
defparam qq6_code6_table.numwords_a = 64;
defparam qq6_code6_table.numwords_b = 64;
defparam qq6_code6_table.latency = 1;
defparam qq6_code6_table.init_file = "qq6_code6_table.mif";


// @test_data = internal unnamed_addr constant [100 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 67,...
rom_dual_port test_data (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_data_address_a ),
	.address_b( test_data_address_b ),
	.q_a( test_data_out_a ),
	.q_b( test_data_out_b)
);
defparam test_data.width_a = 32;
defparam test_data.width_b = 32;
defparam test_data.widthad_a = 7;
defparam test_data.widthad_b = 7;
defparam test_data.numwords_a = 100;
defparam test_data.numwords_b = 100;
defparam test_data.latency = 1;
defparam test_data.init_file = "test_data.mif";


// @test_compressed = internal unnamed_addr constant [100 x i32] [i32 253, i32 222, i32 119, i32 186, i32 244, i32 146, i32 32, i32 160, i32 236, i32 237, i32 238, i32 240, i32 241, i32 241, i32 242, i32...
rom_dual_port test_compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_compressed_address_a ),
	.address_b( test_compressed_address_b ),
	.q_a( test_compressed_out_a ),
	.q_b( test_compressed_out_b)
);
defparam test_compressed.width_a = 32;
defparam test_compressed.width_b = 32;
defparam test_compressed.widthad_a = 7;
defparam test_compressed.widthad_b = 7;
defparam test_compressed.numwords_a = 100;
defparam test_compressed.numwords_b = 100;
defparam test_compressed.latency = 1;
defparam test_compressed.init_file = "test_compressed.mif";


// @test_result = internal unnamed_addr constant [100 x i32] [i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 -2, i32 -1, i32 -2, i32 0, ...
rom_dual_port test_result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_result_address_a ),
	.address_b( test_result_address_b ),
	.q_a( test_result_out_a ),
	.q_b( test_result_out_b)
);
defparam test_result.width_a = 32;
defparam test_result.width_b = 32;
defparam test_result.widthad_a = 7;
defparam test_result.widthad_b = 7;
defparam test_result.numwords_a = 100;
defparam test_result.numwords_b = 100;
defparam test_result.latency = 1;
defparam test_result.init_file = "test_result.mif";


// @compressed = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( compressed_address_a ),
	.address_b( compressed_address_b ),
	.wren_a( compressed_write_enable_a ),
	.wren_b( compressed_write_enable_b ),
	.data_a( compressed_in_a ),
	.data_b( compressed_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( compressed_out_a ),
	.q_b( compressed_out_b)
);
defparam compressed.width_a = 32;
defparam compressed.width_b = 32;
defparam compressed.widthad_a = 7;
defparam compressed.widthad_b = 7;
defparam compressed.width_be_a = 1;
defparam compressed.width_be_b = 1;
defparam compressed.numwords_a = 100;
defparam compressed.numwords_b = 100;
defparam compressed.latency = 1;
defparam compressed.init_file = "compressed.mif";


// @result = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( result_address_a ),
	.address_b( result_address_b ),
	.wren_a( result_write_enable_a ),
	.wren_b( result_write_enable_b ),
	.data_a( result_in_a ),
	.data_b( result_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( result_out_a ),
	.q_b( result_out_b)
);
defparam result.width_a = 32;
defparam result.width_b = 32;
defparam result.widthad_a = 7;
defparam result.widthad_b = 7;
defparam result.width_be_a = 1;
defparam result.width_be_b = 1;
defparam result.numwords_a = 100;
defparam result.numwords_b = 100;
defparam result.latency = 1;
defparam result.init_file = "result.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %277*/
	/*   %278 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %.main_result.2) #1*/
	if ((cur_state == LEGUP_F_main_BB__277_139)) begin
		$write("Result: %d ", $signed(main_preheader_main_result2_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) finish <= 0;
	end
	/* main: %280*/
	/*   %281 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__280_140)) begin
		$write("RESULT: PASS ");
	end
	/* main: %282*/
	/*   %283 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__282_141)) begin
		$write("RESULT: FAIL");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_10:
		next_state = LEGUP_F_main_BB__0_11;
LEGUP_F_main_BB__0_11:
		next_state = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state = LEGUP_F_main_BB__0_14;
LEGUP_F_main_BB__0_14:
		next_state = LEGUP_F_main_BB__0_15;
LEGUP_F_main_BB__0_15:
		next_state = LEGUP_F_main_BB__0_16;
LEGUP_F_main_BB__0_16:
		next_state = LEGUP_F_main_BB__0_17;
LEGUP_F_main_BB__0_17:
		next_state = LEGUP_F_main_BB__0_18;
LEGUP_F_main_BB__0_18:
		next_state = LEGUP_F_main_BB__0_19;
LEGUP_F_main_BB__0_19:
		next_state = LEGUP_F_main_BB__0_20;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_20:
		next_state = LEGUP_F_main_BB__0_21;
LEGUP_F_main_BB__0_21:
		next_state = LEGUP_F_main_BB__0_22;
LEGUP_F_main_BB__0_22:
		next_state = LEGUP_F_main_BB__0_23;
LEGUP_F_main_BB__0_23:
		next_state = LEGUP_F_main_BB__0_24;
LEGUP_F_main_BB__0_24:
		next_state = LEGUP_F_main_BB__0_25;
LEGUP_F_main_BB__0_25:
		next_state = LEGUP_F_main_BB__0_26;
LEGUP_F_main_BB__0_26:
		next_state = LEGUP_F_main_BB__0_27;
LEGUP_F_main_BB__0_27:
		next_state = LEGUP_F_main_BB__0_28;
LEGUP_F_main_BB__0_28:
		next_state = LEGUP_F_main_BB__0_29;
LEGUP_F_main_BB__0_29:
		next_state = LEGUP_F_main_BB__0_30;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_30:
		next_state = LEGUP_F_main_BB__0_31;
LEGUP_F_main_BB__0_31:
		next_state = LEGUP_F_main_BB__0_32;
LEGUP_F_main_BB__0_32:
		next_state = LEGUP_F_main_BB__0_33;
LEGUP_F_main_BB__0_33:
		next_state = LEGUP_F_main_BB__1_34;
LEGUP_F_main_BB__0_4:
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_F_main_BB__0_10;
LEGUP_F_main_BB__1_34:
	if ((main_1_exitcond37 == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_35;
	else if ((main_1_exitcond37 == 1'd0))
		next_state = LEGUP_F_main_BB__2_36;
LEGUP_F_main_BB__277_139:
	if ((main_277_279 == 1'd1))
		next_state = LEGUP_F_main_BB__280_140;
	else if ((main_277_279 == 1'd0))
		next_state = LEGUP_F_main_BB__282_141;
LEGUP_F_main_BB__280_140:
		next_state = LEGUP_F_main_BB__284_142;
LEGUP_F_main_BB__282_141:
		next_state = LEGUP_F_main_BB__284_142;
LEGUP_F_main_BB__284_142:
		next_state = LEGUP_0;
LEGUP_F_main_BB__2_36:
		next_state = LEGUP_F_main_BB__2_37;
LEGUP_F_main_BB__2_37:
		next_state = LEGUP_F_main_BB__1_34;
LEGUP_F_main_BB__58_100:
		next_state = LEGUP_F_main_BB__58_101;
LEGUP_F_main_BB__58_101:
		next_state = LEGUP_F_main_BB__58_102;
LEGUP_F_main_BB__58_102:
		next_state = LEGUP_F_main_BB__58_103;
LEGUP_F_main_BB__58_103:
		next_state = LEGUP_F_main_BB__58_104;
LEGUP_F_main_BB__58_104:
		next_state = LEGUP_F_main_BB__58_105;
LEGUP_F_main_BB__58_105:
		next_state = LEGUP_F_main_BB__58_106;
LEGUP_F_main_BB__58_106:
		next_state = LEGUP_F_main_BB__58_107;
LEGUP_F_main_BB__58_107:
		next_state = LEGUP_F_main_BB__58_108;
LEGUP_F_main_BB__58_108:
		next_state = LEGUP_F_main_BB__58_109;
LEGUP_F_main_BB__58_109:
		next_state = LEGUP_F_main_BB__58_110;
LEGUP_F_main_BB__58_110:
		next_state = LEGUP_F_main_BB__58_111;
LEGUP_F_main_BB__58_111:
		next_state = LEGUP_F_main_BB__58_112;
LEGUP_F_main_BB__58_112:
		next_state = LEGUP_F_main_BB__58_113;
LEGUP_F_main_BB__58_113:
		next_state = LEGUP_F_main_BB__58_114;
LEGUP_F_main_BB__58_114:
		next_state = LEGUP_F_main_BB__58_115;
LEGUP_F_main_BB__58_115:
		next_state = LEGUP_function_call_116;
LEGUP_F_main_BB__58_117:
		next_state = LEGUP_F_main_BB__58_118;
LEGUP_F_main_BB__58_118:
		next_state = LEGUP_F_main_BB__58_119;
LEGUP_F_main_BB__58_119:
		next_state = LEGUP_F_main_BB__58_120;
LEGUP_F_main_BB__58_120:
		next_state = LEGUP_F_main_BB__58_121;
LEGUP_F_main_BB__58_121:
		next_state = LEGUP_F_main_BB__58_122;
LEGUP_F_main_BB__58_122:
		next_state = LEGUP_F_main_BB__58_123;
LEGUP_F_main_BB__58_123:
		next_state = LEGUP_F_main_BB__58_124;
LEGUP_F_main_BB__58_124:
		next_state = LEGUP_F_main_BB__58_125;
LEGUP_F_main_BB__58_125:
		next_state = LEGUP_F_main_BB__58_126;
LEGUP_F_main_BB__58_126:
		next_state = LEGUP_F_main_BB__58_127;
LEGUP_F_main_BB__58_127:
		next_state = LEGUP_F_main_BB__58_128;
LEGUP_F_main_BB__58_128:
		next_state = LEGUP_function_call_129;
LEGUP_F_main_BB__58_130:
		next_state = LEGUP_F_main_BB__58_131;
LEGUP_F_main_BB__58_131:
		next_state = LEGUP_F_main_BB__58_132;
LEGUP_F_main_BB__58_132:
	if ((main_58_exitcond5_reg == 1'd1))
		next_state = LEGUP_F_main_BB_adpcm_mainexitpreheader_133;
	else if ((main_58_exitcond5_reg == 1'd0))
		next_state = LEGUP_F_main_BB__58_77;
LEGUP_F_main_BB__58_77:
		next_state = LEGUP_F_main_BB__58_78;
LEGUP_F_main_BB__58_78:
		next_state = LEGUP_F_main_BB__58_79;
LEGUP_F_main_BB__58_79:
		next_state = LEGUP_F_main_BB__58_80;
LEGUP_F_main_BB__58_80:
		next_state = LEGUP_F_main_BB__58_81;
LEGUP_F_main_BB__58_81:
		next_state = LEGUP_F_main_BB__58_82;
LEGUP_F_main_BB__58_82:
		next_state = LEGUP_F_main_BB__58_83;
LEGUP_F_main_BB__58_83:
		next_state = LEGUP_F_main_BB__58_84;
LEGUP_F_main_BB__58_84:
		next_state = LEGUP_F_main_BB__58_85;
LEGUP_F_main_BB__58_85:
		next_state = LEGUP_F_main_BB__58_86;
LEGUP_F_main_BB__58_86:
		next_state = LEGUP_F_main_BB__58_87;
LEGUP_F_main_BB__58_87:
		next_state = LEGUP_F_main_BB__58_88;
LEGUP_F_main_BB__58_88:
		next_state = LEGUP_F_main_BB__58_89;
LEGUP_F_main_BB__58_89:
		next_state = LEGUP_F_main_BB__58_90;
LEGUP_F_main_BB__58_90:
		next_state = LEGUP_F_main_BB__58_91;
LEGUP_F_main_BB__58_91:
		next_state = LEGUP_F_main_BB__58_92;
LEGUP_F_main_BB__58_92:
		next_state = LEGUP_F_main_BB__58_93;
LEGUP_F_main_BB__58_93:
		next_state = LEGUP_F_main_BB__58_94;
LEGUP_F_main_BB__58_94:
		next_state = LEGUP_F_main_BB__58_95;
LEGUP_F_main_BB__58_95:
		next_state = LEGUP_F_main_BB__58_96;
LEGUP_F_main_BB__58_96:
		next_state = LEGUP_F_main_BB__58_97;
LEGUP_F_main_BB__58_97:
		next_state = LEGUP_F_main_BB__58_98;
LEGUP_F_main_BB__58_98:
		next_state = LEGUP_F_main_BB__58_99;
LEGUP_F_main_BB__58_99:
		next_state = LEGUP_F_main_BB__58_100;
LEGUP_F_main_BB_adpcm_mainexit_134:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_135;
LEGUP_F_main_BB_adpcm_mainexit_135:
	if ((main_adpcm_mainexit_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderpreheader_136;
	else if ((main_adpcm_mainexit_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_adpcm_mainexit_134;
LEGUP_F_main_BB_adpcm_mainexitpreheader_133:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_134;
LEGUP_F_main_BB_legup_memset_4_i64exit_51:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_52;
LEGUP_F_main_BB_legup_memset_4_i64exit_52:
		next_state = LEGUP_function_call_53;
LEGUP_F_main_BB_legup_memset_4_i64exit_54:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_55;
LEGUP_F_main_BB_legup_memset_4_i64exit_55:
		next_state = LEGUP_function_call_56;
LEGUP_F_main_BB_legup_memset_4_i64exit_57:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_58;
LEGUP_F_main_BB_legup_memset_4_i64exit_58:
		next_state = LEGUP_function_call_59;
LEGUP_F_main_BB_legup_memset_4_i64exit_60:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_61;
LEGUP_F_main_BB_legup_memset_4_i64exit_61:
		next_state = LEGUP_function_call_62;
LEGUP_F_main_BB_legup_memset_4_i64exit_63:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_64;
LEGUP_F_main_BB_legup_memset_4_i64exit_64:
		next_state = LEGUP_function_call_65;
LEGUP_F_main_BB_legup_memset_4_i64exit_66:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_67;
LEGUP_F_main_BB_legup_memset_4_i64exit_67:
		next_state = LEGUP_function_call_68;
LEGUP_F_main_BB_legup_memset_4_i64exit_69:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_70;
LEGUP_F_main_BB_legup_memset_4_i64exit_70:
		next_state = LEGUP_function_call_71;
LEGUP_F_main_BB_legup_memset_4_i64exit_72:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_73;
LEGUP_F_main_BB_legup_memset_4_i64exit_73:
		next_state = LEGUP_function_call_74;
LEGUP_F_main_BB_legup_memset_4_i64exit_75:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_76;
LEGUP_F_main_BB_legup_memset_4_i64exit_76:
	if ((main_legup_memset_4_i64exit_exitcond10_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2i_38;
	else if ((main_legup_memset_4_i64exit_exitcond10_reg == 1'd0))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_51;
LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_35:
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_51;
LEGUP_F_main_BB_preheader2i_38:
		next_state = LEGUP_function_call_39;
LEGUP_F_main_BB_preheader2i_40:
		next_state = LEGUP_F_main_BB_preheader2i_41;
LEGUP_F_main_BB_preheader2i_41:
		next_state = LEGUP_function_call_42;
LEGUP_F_main_BB_preheader2i_43:
		next_state = LEGUP_F_main_BB_preheader2i_44;
LEGUP_F_main_BB_preheader2i_44:
		next_state = LEGUP_function_call_45;
LEGUP_F_main_BB_preheader2i_46:
		next_state = LEGUP_F_main_BB_preheader2i_47;
LEGUP_F_main_BB_preheader2i_47:
		next_state = LEGUP_function_call_48;
LEGUP_F_main_BB_preheader2i_49:
		next_state = LEGUP_F_main_BB_preheader2i_50;
LEGUP_F_main_BB_preheader2i_50:
		next_state = LEGUP_F_main_BB__58_77;
LEGUP_F_main_BB_preheader_137:
		next_state = LEGUP_F_main_BB_preheader_138;
LEGUP_F_main_BB_preheader_138:
	if ((main_preheader_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB__277_139;
	else if ((main_preheader_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader_137;
LEGUP_F_main_BB_preheaderpreheader_136:
		next_state = LEGUP_F_main_BB_preheader_137;
LEGUP_function_call_116:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__58_117;
LEGUP_function_call_129:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__58_130;
LEGUP_function_call_39:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2i_40;
LEGUP_function_call_42:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2i_43;
LEGUP_function_call_45:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2i_46;
LEGUP_function_call_48:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2i_49;
LEGUP_function_call_53:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_54;
LEGUP_function_call_56:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_57;
LEGUP_function_call_59:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_60;
LEGUP_function_call_62:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_63;
LEGUP_function_call_65:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_66;
LEGUP_function_call_68:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_69;
LEGUP_function_call_71:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_72;
LEGUP_function_call_74:
	if ((encode_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_i64exit_75;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %indvar35 = phi i64 [ %indvar.next36, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar35 = 64'd0;
	end
	/* main: %1*/
	/*   %indvar35 = phi i64 [ %indvar.next36, %2 ], [ 0, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__2_37) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_indvar35 = main_2_indvarnext36_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %indvar35 = phi i64 [ %indvar.next36, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar35_reg <= main_1_indvar35;
		if (start == 1'b0 && ^(main_1_indvar35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar35_reg"); $finish; end
	end
	/* main: %1*/
	/*   %indvar35 = phi i64 [ %indvar.next36, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__2_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar35_reg <= main_1_indvar35;
		if (start == 1'b0 && ^(main_1_indvar35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond37 = icmp eq i64 %indvar35, 24*/
		main_1_exitcond37 = (main_1_indvar35_reg == 64'd24);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond37 = icmp eq i64 %indvar35, 24*/
	if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		main_1_exitcond37_reg <= main_1_exitcond37;
		if (start == 1'b0 && ^(main_1_exitcond37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %3 = shl i64 %indvar35, 2*/
		main_2_3 = (main_1_indvar35_reg <<< (64'd2 % 64'd64));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %3 = shl i64 %indvar35, 2*/
	if ((cur_state == LEGUP_F_main_BB__2_36)) begin
		main_2_3_reg <= main_2_3;
		if (start == 1'b0 && ^(main_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
		main_2_4 = (main_2_3 + `TAG_g_tqmf_a);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %4 = add i64 %3, zext (i32 ptrtoint ([24 x i32]* @tqmf to i32) to i64)*/
	if ((cur_state == LEGUP_F_main_BB__2_36)) begin
		main_2_4_reg <= main_2_4;
		if (start == 1'b0 && ^(main_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %5 = trunc i64 %4 to i32*/
		main_2_5 = main_2_4[31:0];
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %5 = trunc i64 %4 to i32*/
	if ((cur_state == LEGUP_F_main_BB__2_36)) begin
		main_2_5_reg <= main_2_5;
		if (start == 1'b0 && ^(main_2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %s.i.0 = inttoptr i32 %5 to i32**/
		main_2_si0 = main_2_5;
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %s.i.0 = inttoptr i32 %5 to i32**/
	if ((cur_state == LEGUP_F_main_BB__2_36)) begin
		main_2_si0_reg <= main_2_si0;
		if (start == 1'b0 && ^(main_2_si0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_si0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next36 = add i64 %indvar35, 1*/
		main_2_indvarnext36 = (main_1_indvar35_reg + 64'd1);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %indvar.next36 = add i64 %indvar35, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_36)) begin
		main_2_indvarnext36_reg <= main_2_indvarnext36;
		if (start == 1'b0 && ^(main_2_indvarnext36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_indvarnext36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
		main_preheader2i_6 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		main_preheader2i_6_reg <= main_preheader2i_6;
		if (start == 1'b0 && ^(main_preheader2i_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
		main_preheader2i_7 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		main_preheader2i_7_reg <= main_preheader2i_7;
		if (start == 1'b0 && ^(main_preheader2i_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
		main_preheader2i_8 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		main_preheader2i_8_reg <= main_preheader2i_8;
		if (start == 1'b0 && ^(main_preheader2i_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
		main_preheader2i_9 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		main_preheader2i_9_reg <= main_preheader2i_9;
		if (start == 1'b0 && ^(main_preheader2i_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next9, %legup_memset_4_i64.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar8 = 32'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next9, %legup_memset_4_i64.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_76) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memset_4_i64exit_exitcond10_reg == 1'd0))) */ begin
		main_legup_memset_4_i64exit_indvar8 = main_legup_memset_4_i64exit_indvarnext9_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next9, %legup_memset_4_i64.exit ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exitpreheader_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar8_reg <= main_legup_memset_4_i64exit_indvar8;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvar8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvar8_reg"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar8 = phi i32 [ 0, %legup_memset_4_i64.exit.preheader ], [ %indvar.next9, %legup_memset_4_i64.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_76) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memset_4_i64exit_exitcond10_reg == 1'd0))) begin
		main_legup_memset_4_i64exit_indvar8_reg <= main_legup_memset_4_i64exit_indvar8;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvar8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvar8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = shl i32 %indvar8, 3*/
		main_legup_memset_4_i64exit_10 = (main_legup_memset_4_i64exit_indvar8_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %10 = shl i32 %indvar8, 3*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_10_reg <= main_legup_memset_4_i64exit_10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = or i32 %10, 7*/
		main_legup_memset_4_i64exit_11 = (main_legup_memset_4_i64exit_10 | 32'd7);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %11 = or i32 %10, 7*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_11_reg <= main_legup_memset_4_i64exit_11;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep11 = getelementptr [100 x i32]* @compressed, i32 0, i32 %11*/
		main_legup_memset_4_i64exit_scevgep11 = (1'd0 | (4 * main_legup_memset_4_i64exit_11));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep11 = getelementptr [100 x i32]* @compressed, i32 0, i32 %11*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep11_reg <= main_legup_memset_4_i64exit_scevgep11;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = shl i32 %indvar8, 4*/
		main_legup_memset_4_i64exit_12 = (main_legup_memset_4_i64exit_indvar8_reg <<< (32'd4 % 32));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %12 = shl i32 %indvar8, 4*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_12_reg <= main_legup_memset_4_i64exit_12;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = or i32 %12, 15*/
		main_legup_memset_4_i64exit_13 = (main_legup_memset_4_i64exit_12 | 32'd15);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %13 = or i32 %12, 15*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_13_reg <= main_legup_memset_4_i64exit_13;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep12 = getelementptr [100 x i32]* @test_data, i32 0, i32 %13*/
		main_legup_memset_4_i64exit_scevgep12 = (1'd0 | (4 * main_legup_memset_4_i64exit_13));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep12 = getelementptr [100 x i32]* @test_data, i32 0, i32 %13*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep12_reg <= main_legup_memset_4_i64exit_scevgep12;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = or i32 %12, 14*/
		main_legup_memset_4_i64exit_14 = (main_legup_memset_4_i64exit_12 | 32'd14);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %14 = or i32 %12, 14*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_14_reg <= main_legup_memset_4_i64exit_14;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep13 = getelementptr [100 x i32]* @test_data, i32 0, i32 %14*/
		main_legup_memset_4_i64exit_scevgep13 = (1'd0 | (4 * main_legup_memset_4_i64exit_14));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep13 = getelementptr [100 x i32]* @test_data, i32 0, i32 %14*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep13_reg <= main_legup_memset_4_i64exit_scevgep13;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = or i32 %10, 6*/
		main_legup_memset_4_i64exit_15 = (main_legup_memset_4_i64exit_10 | 32'd6);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %15 = or i32 %10, 6*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_15_reg <= main_legup_memset_4_i64exit_15;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep14 = getelementptr [100 x i32]* @compressed, i32 0, i32 %15*/
		main_legup_memset_4_i64exit_scevgep14 = (1'd0 | (4 * main_legup_memset_4_i64exit_15));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep14 = getelementptr [100 x i32]* @compressed, i32 0, i32 %15*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep14_reg <= main_legup_memset_4_i64exit_scevgep14;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = or i32 %12, 13*/
		main_legup_memset_4_i64exit_16 = (main_legup_memset_4_i64exit_12 | 32'd13);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %16 = or i32 %12, 13*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_16_reg <= main_legup_memset_4_i64exit_16;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep15 = getelementptr [100 x i32]* @test_data, i32 0, i32 %16*/
		main_legup_memset_4_i64exit_scevgep15 = (1'd0 | (4 * main_legup_memset_4_i64exit_16));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep15 = getelementptr [100 x i32]* @test_data, i32 0, i32 %16*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep15_reg <= main_legup_memset_4_i64exit_scevgep15;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = or i32 %12, 12*/
		main_legup_memset_4_i64exit_17 = (main_legup_memset_4_i64exit_12 | 32'd12);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %17 = or i32 %12, 12*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_17_reg <= main_legup_memset_4_i64exit_17;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep16 = getelementptr [100 x i32]* @test_data, i32 0, i32 %17*/
		main_legup_memset_4_i64exit_scevgep16 = (1'd0 | (4 * main_legup_memset_4_i64exit_17));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep16 = getelementptr [100 x i32]* @test_data, i32 0, i32 %17*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep16_reg <= main_legup_memset_4_i64exit_scevgep16;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = or i32 %10, 5*/
		main_legup_memset_4_i64exit_18 = (main_legup_memset_4_i64exit_10 | 32'd5);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %18 = or i32 %10, 5*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_18_reg <= main_legup_memset_4_i64exit_18;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep17 = getelementptr [100 x i32]* @compressed, i32 0, i32 %18*/
		main_legup_memset_4_i64exit_scevgep17 = (1'd0 | (4 * main_legup_memset_4_i64exit_18));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep17 = getelementptr [100 x i32]* @compressed, i32 0, i32 %18*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep17_reg <= main_legup_memset_4_i64exit_scevgep17;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = or i32 %12, 11*/
		main_legup_memset_4_i64exit_19 = (main_legup_memset_4_i64exit_12 | 32'd11);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %19 = or i32 %12, 11*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_19_reg <= main_legup_memset_4_i64exit_19;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep18 = getelementptr [100 x i32]* @test_data, i32 0, i32 %19*/
		main_legup_memset_4_i64exit_scevgep18 = (1'd0 | (4 * main_legup_memset_4_i64exit_19));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep18 = getelementptr [100 x i32]* @test_data, i32 0, i32 %19*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep18_reg <= main_legup_memset_4_i64exit_scevgep18;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = or i32 %12, 10*/
		main_legup_memset_4_i64exit_20 = (main_legup_memset_4_i64exit_12 | 32'd10);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %20 = or i32 %12, 10*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_20_reg <= main_legup_memset_4_i64exit_20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep19 = getelementptr [100 x i32]* @test_data, i32 0, i32 %20*/
		main_legup_memset_4_i64exit_scevgep19 = (1'd0 | (4 * main_legup_memset_4_i64exit_20));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep19 = getelementptr [100 x i32]* @test_data, i32 0, i32 %20*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep19_reg <= main_legup_memset_4_i64exit_scevgep19;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = or i32 %10, 4*/
		main_legup_memset_4_i64exit_21 = (main_legup_memset_4_i64exit_10 | 32'd4);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %21 = or i32 %10, 4*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_21_reg <= main_legup_memset_4_i64exit_21;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep20 = getelementptr [100 x i32]* @compressed, i32 0, i32 %21*/
		main_legup_memset_4_i64exit_scevgep20 = (1'd0 | (4 * main_legup_memset_4_i64exit_21));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep20 = getelementptr [100 x i32]* @compressed, i32 0, i32 %21*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep20_reg <= main_legup_memset_4_i64exit_scevgep20;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = or i32 %12, 9*/
		main_legup_memset_4_i64exit_22 = (main_legup_memset_4_i64exit_12 | 32'd9);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %22 = or i32 %12, 9*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_22_reg <= main_legup_memset_4_i64exit_22;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep21 = getelementptr [100 x i32]* @test_data, i32 0, i32 %22*/
		main_legup_memset_4_i64exit_scevgep21 = (1'd0 | (4 * main_legup_memset_4_i64exit_22));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep21 = getelementptr [100 x i32]* @test_data, i32 0, i32 %22*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep21_reg <= main_legup_memset_4_i64exit_scevgep21;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = or i32 %12, 8*/
		main_legup_memset_4_i64exit_23 = (main_legup_memset_4_i64exit_12 | 32'd8);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %23 = or i32 %12, 8*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_23_reg <= main_legup_memset_4_i64exit_23;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep22 = getelementptr [100 x i32]* @test_data, i32 0, i32 %23*/
		main_legup_memset_4_i64exit_scevgep22 = (1'd0 | (4 * main_legup_memset_4_i64exit_23));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep22 = getelementptr [100 x i32]* @test_data, i32 0, i32 %23*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep22_reg <= main_legup_memset_4_i64exit_scevgep22;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = or i32 %10, 3*/
		main_legup_memset_4_i64exit_24 = (main_legup_memset_4_i64exit_10 | 32'd3);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %24 = or i32 %10, 3*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_24_reg <= main_legup_memset_4_i64exit_24;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep23 = getelementptr [100 x i32]* @compressed, i32 0, i32 %24*/
		main_legup_memset_4_i64exit_scevgep23 = (1'd0 | (4 * main_legup_memset_4_i64exit_24));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep23 = getelementptr [100 x i32]* @compressed, i32 0, i32 %24*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep23_reg <= main_legup_memset_4_i64exit_scevgep23;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = or i32 %12, 7*/
		main_legup_memset_4_i64exit_25 = (main_legup_memset_4_i64exit_12 | 32'd7);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %25 = or i32 %12, 7*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_25_reg <= main_legup_memset_4_i64exit_25;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep24 = getelementptr [100 x i32]* @test_data, i32 0, i32 %25*/
		main_legup_memset_4_i64exit_scevgep24 = (1'd0 | (4 * main_legup_memset_4_i64exit_25));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep24 = getelementptr [100 x i32]* @test_data, i32 0, i32 %25*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep24_reg <= main_legup_memset_4_i64exit_scevgep24;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = or i32 %12, 6*/
		main_legup_memset_4_i64exit_26 = (main_legup_memset_4_i64exit_12 | 32'd6);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %26 = or i32 %12, 6*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_26_reg <= main_legup_memset_4_i64exit_26;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep25 = getelementptr [100 x i32]* @test_data, i32 0, i32 %26*/
		main_legup_memset_4_i64exit_scevgep25 = (1'd0 | (4 * main_legup_memset_4_i64exit_26));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep25 = getelementptr [100 x i32]* @test_data, i32 0, i32 %26*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep25_reg <= main_legup_memset_4_i64exit_scevgep25;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = or i32 %10, 2*/
		main_legup_memset_4_i64exit_27 = (main_legup_memset_4_i64exit_10 | 32'd2);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %27 = or i32 %10, 2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_27_reg <= main_legup_memset_4_i64exit_27;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep26 = getelementptr [100 x i32]* @compressed, i32 0, i32 %27*/
		main_legup_memset_4_i64exit_scevgep26 = (1'd0 | (4 * main_legup_memset_4_i64exit_27));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep26 = getelementptr [100 x i32]* @compressed, i32 0, i32 %27*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep26_reg <= main_legup_memset_4_i64exit_scevgep26;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = or i32 %12, 5*/
		main_legup_memset_4_i64exit_28 = (main_legup_memset_4_i64exit_12 | 32'd5);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %28 = or i32 %12, 5*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_28_reg <= main_legup_memset_4_i64exit_28;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep27 = getelementptr [100 x i32]* @test_data, i32 0, i32 %28*/
		main_legup_memset_4_i64exit_scevgep27 = (1'd0 | (4 * main_legup_memset_4_i64exit_28));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep27 = getelementptr [100 x i32]* @test_data, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep27_reg <= main_legup_memset_4_i64exit_scevgep27;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = or i32 %12, 4*/
		main_legup_memset_4_i64exit_29 = (main_legup_memset_4_i64exit_12 | 32'd4);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %29 = or i32 %12, 4*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_29_reg <= main_legup_memset_4_i64exit_29;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep28 = getelementptr [100 x i32]* @test_data, i32 0, i32 %29*/
		main_legup_memset_4_i64exit_scevgep28 = (1'd0 | (4 * main_legup_memset_4_i64exit_29));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep28 = getelementptr [100 x i32]* @test_data, i32 0, i32 %29*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep28_reg <= main_legup_memset_4_i64exit_scevgep28;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = or i32 %10, 1*/
		main_legup_memset_4_i64exit_30 = (main_legup_memset_4_i64exit_10 | 32'd1);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %30 = or i32 %10, 1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_30_reg <= main_legup_memset_4_i64exit_30;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep29 = getelementptr [100 x i32]* @compressed, i32 0, i32 %30*/
		main_legup_memset_4_i64exit_scevgep29 = (1'd0 | (4 * main_legup_memset_4_i64exit_30));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep29 = getelementptr [100 x i32]* @compressed, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep29_reg <= main_legup_memset_4_i64exit_scevgep29;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %31 = or i32 %12, 3*/
		main_legup_memset_4_i64exit_31 = (main_legup_memset_4_i64exit_12 | 32'd3);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %31 = or i32 %12, 3*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_31_reg <= main_legup_memset_4_i64exit_31;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep30 = getelementptr [100 x i32]* @test_data, i32 0, i32 %31*/
		main_legup_memset_4_i64exit_scevgep30 = (1'd0 | (4 * main_legup_memset_4_i64exit_31));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep30 = getelementptr [100 x i32]* @test_data, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep30_reg <= main_legup_memset_4_i64exit_scevgep30;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = or i32 %12, 2*/
		main_legup_memset_4_i64exit_32 = (main_legup_memset_4_i64exit_12 | 32'd2);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %32 = or i32 %12, 2*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_32_reg <= main_legup_memset_4_i64exit_32;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep31 = getelementptr [100 x i32]* @test_data, i32 0, i32 %32*/
		main_legup_memset_4_i64exit_scevgep31 = (1'd0 | (4 * main_legup_memset_4_i64exit_32));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep31 = getelementptr [100 x i32]* @test_data, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep31_reg <= main_legup_memset_4_i64exit_scevgep31;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep32 = getelementptr [100 x i32]* @compressed, i32 0, i32 %10*/
		main_legup_memset_4_i64exit_scevgep32 = (1'd0 | (4 * main_legup_memset_4_i64exit_10));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep32 = getelementptr [100 x i32]* @compressed, i32 0, i32 %10*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep32_reg <= main_legup_memset_4_i64exit_scevgep32;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = or i32 %12, 1*/
		main_legup_memset_4_i64exit_33 = (main_legup_memset_4_i64exit_12 | 32'd1);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %33 = or i32 %12, 1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_33_reg <= main_legup_memset_4_i64exit_33;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep33 = getelementptr [100 x i32]* @test_data, i32 0, i32 %33*/
		main_legup_memset_4_i64exit_scevgep33 = (1'd0 | (4 * main_legup_memset_4_i64exit_33));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep33 = getelementptr [100 x i32]* @test_data, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep33_reg <= main_legup_memset_4_i64exit_scevgep33;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep34 = getelementptr [100 x i32]* @test_data, i32 0, i32 %12*/
		main_legup_memset_4_i64exit_scevgep34 = (1'd0 | (4 * main_legup_memset_4_i64exit_12));
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %scevgep34 = getelementptr [100 x i32]* @test_data, i32 0, i32 %12*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_scevgep34_reg <= main_legup_memset_4_i64exit_scevgep34;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_scevgep34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = load i32* %scevgep34, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_34 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_52)) begin
		main_legup_memset_4_i64exit_34_reg <= main_legup_memset_4_i64exit_34;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = load i32* %scevgep33, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_35 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_52)) begin
		main_legup_memset_4_i64exit_35_reg <= main_legup_memset_4_i64exit_35;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
		main_legup_memset_4_i64exit_36 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		main_legup_memset_4_i64exit_36_reg <= main_legup_memset_4_i64exit_36;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = load i32* %scevgep31, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_37 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_55)) begin
		main_legup_memset_4_i64exit_37_reg <= main_legup_memset_4_i64exit_37;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %38 = load i32* %scevgep30, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_38 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %38 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_55)) begin
		main_legup_memset_4_i64exit_38_reg <= main_legup_memset_4_i64exit_38;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
		main_legup_memset_4_i64exit_39 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		main_legup_memset_4_i64exit_39_reg <= main_legup_memset_4_i64exit_39;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = load i32* %scevgep28, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_40 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_58)) begin
		main_legup_memset_4_i64exit_40_reg <= main_legup_memset_4_i64exit_40;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = load i32* %scevgep27, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_41 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_58)) begin
		main_legup_memset_4_i64exit_41_reg <= main_legup_memset_4_i64exit_41;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
		main_legup_memset_4_i64exit_42 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		main_legup_memset_4_i64exit_42_reg <= main_legup_memset_4_i64exit_42;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = load i32* %scevgep25, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_43 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_61)) begin
		main_legup_memset_4_i64exit_43_reg <= main_legup_memset_4_i64exit_43;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = load i32* %scevgep24, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_44 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_61)) begin
		main_legup_memset_4_i64exit_44_reg <= main_legup_memset_4_i64exit_44;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
		main_legup_memset_4_i64exit_45 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		main_legup_memset_4_i64exit_45_reg <= main_legup_memset_4_i64exit_45;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = load i32* %scevgep22, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_46 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_64)) begin
		main_legup_memset_4_i64exit_46_reg <= main_legup_memset_4_i64exit_46;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = load i32* %scevgep21, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_47 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_64)) begin
		main_legup_memset_4_i64exit_47_reg <= main_legup_memset_4_i64exit_47;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
		main_legup_memset_4_i64exit_48 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		main_legup_memset_4_i64exit_48_reg <= main_legup_memset_4_i64exit_48;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = load i32* %scevgep19, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_49 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_67)) begin
		main_legup_memset_4_i64exit_49_reg <= main_legup_memset_4_i64exit_49;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = load i32* %scevgep18, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_50 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_67)) begin
		main_legup_memset_4_i64exit_50_reg <= main_legup_memset_4_i64exit_50;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
		main_legup_memset_4_i64exit_51 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		main_legup_memset_4_i64exit_51_reg <= main_legup_memset_4_i64exit_51;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = load i32* %scevgep16, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_52 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_70)) begin
		main_legup_memset_4_i64exit_52_reg <= main_legup_memset_4_i64exit_52;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = load i32* %scevgep15, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_53 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_70)) begin
		main_legup_memset_4_i64exit_53_reg <= main_legup_memset_4_i64exit_53;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
		main_legup_memset_4_i64exit_54 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		main_legup_memset_4_i64exit_54_reg <= main_legup_memset_4_i64exit_54;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = load i32* %scevgep13, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_55 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = load i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_73)) begin
		main_legup_memset_4_i64exit_55_reg <= main_legup_memset_4_i64exit_55;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = load i32* %scevgep12, align 4, !tbaa !1*/
		main_legup_memset_4_i64exit_56 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_73)) begin
		main_legup_memset_4_i64exit_56_reg <= main_legup_memset_4_i64exit_56;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
		main_legup_memset_4_i64exit_57 = encode_return_val_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		main_legup_memset_4_i64exit_57_reg <= main_legup_memset_4_i64exit_57;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar.next9 = add i32 %indvar8, 1*/
		main_legup_memset_4_i64exit_indvarnext9 = (main_legup_memset_4_i64exit_indvar8_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %indvar.next9 = add i32 %indvar8, 1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_indvarnext9_reg <= main_legup_memset_4_i64exit_indvarnext9;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_indvarnext9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_indvarnext9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %exitcond10 = icmp eq i32 %indvar.next9, 12*/
		main_legup_memset_4_i64exit_exitcond10 = (main_legup_memset_4_i64exit_indvarnext9 == 32'd12);
end
always @(posedge clk) begin
	/* main: %legup_memset_4_i64.exit*/
	/*   %exitcond10 = icmp eq i32 %indvar.next9, 12*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		main_legup_memset_4_i64exit_exitcond10_reg <= main_legup_memset_4_i64exit_exitcond10;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_exitcond10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_i64exit_exitcond10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %indvar = phi i32 [ %indvar.next, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_indvar = 32'd0;
	end
	/* main: %58*/
	/*   %indvar = phi i32 [ %indvar.next, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_indvar = main_58_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %indvar = phi i32 [ %indvar.next, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_indvar_reg <= main_58_indvar;
		if (start == 1'b0 && ^(main_58_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_indvar_reg"); $finish; end
	end
	/* main: %58*/
	/*   %indvar = phi i32 [ %indvar.next, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_indvar_reg <= main_58_indvar;
		if (start == 1'b0 && ^(main_58_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd100 = 32'd0;
	end
	/* main: %58*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumd100 = main_58_accumd90_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd100_reg <= main_58_accumd100;
		if (start == 1'b0 && ^(main_58_accumd100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd100_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumd100_reg <= main_58_accumd100;
		if (start == 1'b0 && ^(main_58_accumd100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd90 = 32'd0;
	end
	/* main: %58*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumd90 = main_58_accumd80_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd90_reg <= main_58_accumd90;
		if (start == 1'b0 && ^(main_58_accumd90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd90_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumd90_reg <= main_58_accumd90;
		if (start == 1'b0 && ^(main_58_accumd90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd80 = 32'd0;
	end
	/* main: %58*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumd80 = main_58_accumd70_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd80_reg <= main_58_accumd80;
		if (start == 1'b0 && ^(main_58_accumd80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd80_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumd80_reg <= main_58_accumd80;
		if (start == 1'b0 && ^(main_58_accumd80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd70 = 32'd0;
	end
	/* main: %58*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumd70 = main_58_accumd60_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd70_reg <= main_58_accumd70;
		if (start == 1'b0 && ^(main_58_accumd70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd70_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumd70_reg <= main_58_accumd70;
		if (start == 1'b0 && ^(main_58_accumd70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd60 = 32'd0;
	end
	/* main: %58*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumd60 = main_58_accumd50_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd60_reg <= main_58_accumd60;
		if (start == 1'b0 && ^(main_58_accumd60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd60_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumd60_reg <= main_58_accumd60;
		if (start == 1'b0 && ^(main_58_accumd60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd50 = 32'd0;
	end
	/* main: %58*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumd50 = main_58_accumd40_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd50_reg <= main_58_accumd50;
		if (start == 1'b0 && ^(main_58_accumd50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd50_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumd50_reg <= main_58_accumd50;
		if (start == 1'b0 && ^(main_58_accumd50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd40 = 32'd0;
	end
	/* main: %58*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumd40 = main_58_accumd30_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd40_reg <= main_58_accumd40;
		if (start == 1'b0 && ^(main_58_accumd40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd40_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumd40_reg <= main_58_accumd40;
		if (start == 1'b0 && ^(main_58_accumd40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd30 = 32'd0;
	end
	/* main: %58*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumd30 = main_58_accumd20_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd30_reg <= main_58_accumd30;
		if (start == 1'b0 && ^(main_58_accumd30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd30_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumd30_reg <= main_58_accumd30;
		if (start == 1'b0 && ^(main_58_accumd30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd20 = 32'd0;
	end
	/* main: %58*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumd20 = main_58_accumd10_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd20_reg <= main_58_accumd20;
		if (start == 1'b0 && ^(main_58_accumd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd20_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumd20_reg <= main_58_accumd20;
		if (start == 1'b0 && ^(main_58_accumd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd10 = 32'd0;
	end
	/* main: %58*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumd10 = main_58_accumd00_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd10_reg <= main_58_accumd10;
		if (start == 1'b0 && ^(main_58_accumd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd10_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumd10_reg <= main_58_accumd10;
		if (start == 1'b0 && ^(main_58_accumd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumd.0.0 = phi i32 [ %218, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd00 = 32'd0;
	end
	/* main: %58*/
	/*   %accumd.0.0 = phi i32 [ %218, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumd00 = main_58_218_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumd.0.0 = phi i32 [ %218, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumd00_reg <= main_58_accumd00;
		if (start == 1'b0 && ^(main_58_accumd00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd00_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumd.0.0 = phi i32 [ %218, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumd00_reg <= main_58_accumd00;
		if (start == 1'b0 && ^(main_58_accumd00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumd00_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc100 = 32'd0;
	end
	/* main: %58*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumc100 = main_58_accumc90_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc100_reg <= main_58_accumc100;
		if (start == 1'b0 && ^(main_58_accumc100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc100_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumc100_reg <= main_58_accumc100;
		if (start == 1'b0 && ^(main_58_accumc100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc90 = 32'd0;
	end
	/* main: %58*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumc90 = main_58_accumc80_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc90_reg <= main_58_accumc90;
		if (start == 1'b0 && ^(main_58_accumc90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc90_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumc90_reg <= main_58_accumc90;
		if (start == 1'b0 && ^(main_58_accumc90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc80 = 32'd0;
	end
	/* main: %58*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumc80 = main_58_accumc70_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc80_reg <= main_58_accumc80;
		if (start == 1'b0 && ^(main_58_accumc80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc80_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumc80_reg <= main_58_accumc80;
		if (start == 1'b0 && ^(main_58_accumc80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc70 = 32'd0;
	end
	/* main: %58*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumc70 = main_58_accumc60_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc70_reg <= main_58_accumc70;
		if (start == 1'b0 && ^(main_58_accumc70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc70_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumc70_reg <= main_58_accumc70;
		if (start == 1'b0 && ^(main_58_accumc70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc60 = 32'd0;
	end
	/* main: %58*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumc60 = main_58_accumc50_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc60_reg <= main_58_accumc60;
		if (start == 1'b0 && ^(main_58_accumc60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc60_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumc60_reg <= main_58_accumc60;
		if (start == 1'b0 && ^(main_58_accumc60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc50 = 32'd0;
	end
	/* main: %58*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumc50 = main_58_accumc40_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc50_reg <= main_58_accumc50;
		if (start == 1'b0 && ^(main_58_accumc50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc50_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumc50_reg <= main_58_accumc50;
		if (start == 1'b0 && ^(main_58_accumc50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc40 = 32'd0;
	end
	/* main: %58*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumc40 = main_58_accumc30_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc40_reg <= main_58_accumc40;
		if (start == 1'b0 && ^(main_58_accumc40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc40_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumc40_reg <= main_58_accumc40;
		if (start == 1'b0 && ^(main_58_accumc40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc30 = 32'd0;
	end
	/* main: %58*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumc30 = main_58_accumc20_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc30_reg <= main_58_accumc30;
		if (start == 1'b0 && ^(main_58_accumc30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc30_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumc30_reg <= main_58_accumc30;
		if (start == 1'b0 && ^(main_58_accumc30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc20 = 32'd0;
	end
	/* main: %58*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumc20 = main_58_accumc10_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc20_reg <= main_58_accumc20;
		if (start == 1'b0 && ^(main_58_accumc20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc20_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumc20_reg <= main_58_accumc20;
		if (start == 1'b0 && ^(main_58_accumc20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc10 = 32'd0;
	end
	/* main: %58*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumc10 = main_58_accumc00_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc10_reg <= main_58_accumc10;
		if (start == 1'b0 && ^(main_58_accumc10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc10_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumc10_reg <= main_58_accumc10;
		if (start == 1'b0 && ^(main_58_accumc10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %accumc.0.0 = phi i32 [ %217, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc00 = 32'd0;
	end
	/* main: %58*/
	/*   %accumc.0.0 = phi i32 [ %217, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_accumc00 = main_58_217_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %accumc.0.0 = phi i32 [ %217, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_accumc00_reg <= main_58_accumc00;
		if (start == 1'b0 && ^(main_58_accumc00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc00_reg"); $finish; end
	end
	/* main: %58*/
	/*   %accumc.0.0 = phi i32 [ %217, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_accumc00_reg <= main_58_accumc00;
		if (start == 1'b0 && ^(main_58_accumc00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_accumc00_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_ph20 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_ph20 = main_58_dec_ph10_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_ph20_reg <= main_58_dec_ph20;
		if (start == 1'b0 && ^(main_58_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_ph20_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_ph20_reg <= main_58_dec_ph20;
		if (start == 1'b0 && ^(main_58_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_ph20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_ph1.0 = phi i32 [ %192, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_ph10 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_ph1.0 = phi i32 [ %192, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_ph10 = main_58_192_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_ph1.0 = phi i32 [ %192, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_ph10_reg <= main_58_dec_ph10;
		if (start == 1'b0 && ^(main_58_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_ph10_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_ph1.0 = phi i32 [ %192, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_ph10_reg <= main_58_dec_ph10;
		if (start == 1'b0 && ^(main_58_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_ph10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_nbh0 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i.i, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_nbh0 = main_58_i2ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_nbh0_reg <= main_58_dec_nbh0;
		if (start == 1'b0 && ^(main_58_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_nbh0_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_nbh0_reg <= main_58_dec_nbh0;
		if (start == 1'b0 && ^(main_58_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_nbh0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_deth.0 = phi i32 [ %191, %58 ], [ 8, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_deth0 = 32'd8;
	end
	/* main: %58*/
	/*   %dec_deth.0 = phi i32 [ %191, %58 ], [ 8, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_deth0 = main_58_191_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_deth.0 = phi i32 [ %191, %58 ], [ 8, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_deth0_reg <= main_58_dec_deth0;
		if (start == 1'b0 && ^(main_58_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_deth0_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_deth.0 = phi i32 [ %191, %58 ], [ 8, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_deth0_reg <= main_58_dec_deth0;
		if (start == 1'b0 && ^(main_58_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_deth0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_ah20 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i.i, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_ah20 = main_58_iii_var0_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_ah20_reg <= main_58_dec_ah20;
		if (start == 1'b0 && ^(main_58_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_ah20_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_ah20_reg <= main_58_dec_ah20;
		if (start == 1'b0 && ^(main_58_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_ah20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_rh20 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_rh20 = main_58_dec_rh10_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_rh20_reg <= main_58_dec_rh20;
		if (start == 1'b0 && ^(main_58_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_rh20_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_rh20_reg <= main_58_dec_rh20;
		if (start == 1'b0 && ^(main_58_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_rh20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_ah10 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i.i, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_ah10 = main_58_apl12iii;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_ah10_reg <= main_58_dec_ah10;
		if (start == 1'b0 && ^(main_58_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_ah10_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_ah10_reg <= main_58_dec_ah10;
		if (start == 1'b0 && ^(main_58_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_ah10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_rh1.0 = phi i32 [ %216, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_rh10 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_rh1.0 = phi i32 [ %216, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_rh10 = main_58_216_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_rh1.0 = phi i32 [ %216, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_rh10_reg <= main_58_dec_rh10;
		if (start == 1'b0 && ^(main_58_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_rh10_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_rh1.0 = phi i32 [ %216, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_rh10_reg <= main_58_dec_rh10;
		if (start == 1'b0 && ^(main_58_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_rh10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_plt20 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_plt20 = main_58_dec_plt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_plt20_reg <= main_58_dec_plt20;
		if (start == 1'b0 && ^(main_58_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_plt20_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_plt20_reg <= main_58_dec_plt20;
		if (start == 1'b0 && ^(main_58_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_plt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_plt1.0 = phi i32 [ %119, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_plt10 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_plt1.0 = phi i32 [ %119, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_plt10 = main_58_119_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_plt1.0 = phi i32 [ %119, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_plt10_reg <= main_58_dec_plt10;
		if (start == 1'b0 && ^(main_58_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_plt10_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_plt1.0 = phi i32 [ %119, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_plt10_reg <= main_58_dec_plt10;
		if (start == 1'b0 && ^(main_58_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_plt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_nbl0 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i.i, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_nbl0 = main_58_i13ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_nbl0_reg <= main_58_dec_nbl0;
		if (start == 1'b0 && ^(main_58_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_nbl0_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_nbl.0 = phi i32 [ %...i13.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_nbl0_reg <= main_58_dec_nbl0;
		if (start == 1'b0 && ^(main_58_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_nbl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_detl.0 = phi i32 [ %118, %58 ], [ 32, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_detl0 = 32'd32;
	end
	/* main: %58*/
	/*   %dec_detl.0 = phi i32 [ %118, %58 ], [ 32, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_detl0 = main_58_118_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_detl.0 = phi i32 [ %118, %58 ], [ 32, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_detl0_reg <= main_58_dec_detl0;
		if (start == 1'b0 && ^(main_58_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_detl0_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_detl.0 = phi i32 [ %118, %58 ], [ 32, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_detl0_reg <= main_58_dec_detl0;
		if (start == 1'b0 && ^(main_58_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_detl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_al20 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i.i, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_al20 = main_58_i11ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_al20_reg <= main_58_dec_al20;
		if (start == 1'b0 && ^(main_58_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_al20_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_al2.0 = phi i32 [ %...i11.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_al20_reg <= main_58_dec_al20;
		if (start == 1'b0 && ^(main_58_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_al20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_rlt20 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_rlt20 = main_58_dec_rlt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_rlt20_reg <= main_58_dec_rlt20;
		if (start == 1'b0 && ^(main_58_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_rlt20_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_rlt20_reg <= main_58_dec_rlt20;
		if (start == 1'b0 && ^(main_58_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_rlt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_al10 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i.i, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_al10 = main_58_apl12i7ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_al10_reg <= main_58_dec_al10;
		if (start == 1'b0 && ^(main_58_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_al10_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i7.i.i, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_al10_reg <= main_58_dec_al10;
		if (start == 1'b0 && ^(main_58_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_al10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %dec_rlt1.0 = phi i32 [ %143, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_rlt10 = 32'd0;
	end
	/* main: %58*/
	/*   %dec_rlt1.0 = phi i32 [ %143, %58 ], [ 0, %.preheader2.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) */ begin
		main_58_dec_rlt10 = main_58_143_reg;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %dec_rlt1.0 = phi i32 [ %143, %58 ], [ 0, %.preheader2.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_dec_rlt10_reg <= main_58_dec_rlt10;
		if (start == 1'b0 && ^(main_58_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_rlt10_reg"); $finish; end
	end
	/* main: %58*/
	/*   %dec_rlt1.0 = phi i32 [ %143, %58 ], [ 0, %.preheader2.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_132) & (memory_controller_waitrequest == 1'd0)) & (main_58_exitcond5_reg == 1'd0))) begin
		main_58_dec_rlt10_reg <= main_58_dec_rlt10;
		if (start == 1'b0 && ^(main_58_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_dec_rlt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %i.03.i = shl i32 %indvar, 1*/
		main_58_i03i = (main_58_indvar_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %i.03.i = shl i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		main_58_i03i_reg <= main_58_i03i;
		if (start == 1'b0 && ^(main_58_i03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_i03i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %59 = or i32 %i.03.i, 1*/
		main_58_59 = (main_58_i03i | 32'd1);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %59 = or i32 %i.03.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		main_58_59_reg <= main_58_59;
		if (start == 1'b0 && ^(main_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %59*/
		main_58_scevgep6 = (1'd0 | (4 * main_58_59));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %59*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		main_58_scevgep6_reg <= main_58_scevgep6;
		if (start == 1'b0 && ^(main_58_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %scevgep7 = getelementptr [100 x i32]* @result, i32 0, i32 %i.03.i*/
		main_58_scevgep7 = (1'd0 | (4 * main_58_i03i));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %scevgep7 = getelementptr [100 x i32]* @result, i32 0, i32 %i.03.i*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		main_58_scevgep7_reg <= main_58_scevgep7;
		if (start == 1'b0 && ^(main_58_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	main_58_60 = main_signed_divide_32_0;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %60 = sdiv i32 %i.03.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__58_109)) begin
		main_58_60_reg <= main_58_60;
		if (start == 1'b0 && ^(main_58_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_60_reg"); $finish; end
	end
	/* main: %58*/
	/*   %60 = sdiv i32 %i.03.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__58_109)) begin
		main_58_60_reg <= main_58_60;
		if (start == 1'b0 && ^(main_58_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %61 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %60*/
		main_58_61 = (1'd0 | (4 * main_58_60));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %61 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %60*/
	if ((cur_state == LEGUP_F_main_BB__58_109)) begin
		main_58_61_reg <= main_58_61;
		if (start == 1'b0 && ^(main_58_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
		main_58_62 = compressed_out_a;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		main_58_62_reg <= main_58_62;
		if (start == 1'b0 && ^(main_58_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %63 = ashr i32 %62, 6*/
		main_58_63 = ($signed(main_58_62) >>> 32'd6);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %63 = ashr i32 %62, 6*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		main_58_63_reg <= main_58_63;
		if (start == 1'b0 && ^(main_58_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %64 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_58_64 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %64 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_79)) begin
		main_58_64_reg <= main_58_64;
		if (start == 1'b0 && ^(main_58_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %65 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_58_65 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %65 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_79)) begin
		main_58_65_reg <= main_58_65;
		if (start == 1'b0 && ^(main_58_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_65_reg"); $finish; end
	end
end
always @(*) begin
	main_58_66 = main_58_66_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %66 = mul nsw i32 %65, %64*/
	if ((cur_state == LEGUP_F_main_BB__58_80)) begin
		main_58_66_reg <= main_58_66;
		if (start == 1'b0 && ^(main_58_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_66_reg"); $finish; end
	end
	/* main: %58*/
	/*   %66 = mul nsw i32 %65, %64*/
	if ((cur_state == LEGUP_F_main_BB__58_80)) begin
		main_58_66_reg <= main_58_66;
		if (start == 1'b0 && ^(main_58_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %67 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_58_67 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %67 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_80)) begin
		main_58_67_reg <= main_58_67;
		if (start == 1'b0 && ^(main_58_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %68 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_58_68 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %68 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_80)) begin
		main_58_68_reg <= main_58_68;
		if (start == 1'b0 && ^(main_58_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_68_reg"); $finish; end
	end
end
always @(*) begin
	main_58_69 = main_58_69_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %69 = mul nsw i32 %68, %67*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		main_58_69_reg <= main_58_69;
		if (start == 1'b0 && ^(main_58_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_69_reg"); $finish; end
	end
	/* main: %58*/
	/*   %69 = mul nsw i32 %68, %67*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		main_58_69_reg <= main_58_69;
		if (start == 1'b0 && ^(main_58_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %70 = add nsw i32 %69, %66*/
		main_58_70 = (main_58_69 + main_58_66_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %70 = add nsw i32 %69, %66*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		main_58_70_reg <= main_58_70;
		if (start == 1'b0 && ^(main_58_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %71 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_58_71 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %71 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		main_58_71_reg <= main_58_71;
		if (start == 1'b0 && ^(main_58_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %72 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_58_72 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %72 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		main_58_72_reg <= main_58_72;
		if (start == 1'b0 && ^(main_58_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_72_reg"); $finish; end
	end
end
always @(*) begin
	main_58_73 = main_58_73_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %73 = mul nsw i32 %72, %71*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		main_58_73_reg <= main_58_73;
		if (start == 1'b0 && ^(main_58_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_73_reg"); $finish; end
	end
	/* main: %58*/
	/*   %73 = mul nsw i32 %72, %71*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		main_58_73_reg <= main_58_73;
		if (start == 1'b0 && ^(main_58_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %74 = add nsw i32 %70, %73*/
		main_58_74 = (main_58_70_reg + main_58_73);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %74 = add nsw i32 %70, %73*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		main_58_74_reg <= main_58_74;
		if (start == 1'b0 && ^(main_58_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %75 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_58_75 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %75 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		main_58_75_reg <= main_58_75;
		if (start == 1'b0 && ^(main_58_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %76 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_58_76 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %76 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		main_58_76_reg <= main_58_76;
		if (start == 1'b0 && ^(main_58_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_76_reg"); $finish; end
	end
end
always @(*) begin
	main_58_77 = main_58_77_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %77 = mul nsw i32 %76, %75*/
	if ((cur_state == LEGUP_F_main_BB__58_83)) begin
		main_58_77_reg <= main_58_77;
		if (start == 1'b0 && ^(main_58_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_77_reg"); $finish; end
	end
	/* main: %58*/
	/*   %77 = mul nsw i32 %76, %75*/
	if ((cur_state == LEGUP_F_main_BB__58_83)) begin
		main_58_77_reg <= main_58_77;
		if (start == 1'b0 && ^(main_58_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %78 = add nsw i32 %74, %77*/
		main_58_78 = (main_58_74_reg + main_58_77);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %78 = add nsw i32 %74, %77*/
	if ((cur_state == LEGUP_F_main_BB__58_83)) begin
		main_58_78_reg <= main_58_78;
		if (start == 1'b0 && ^(main_58_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %79 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_58_79 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %79 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_83)) begin
		main_58_79_reg <= main_58_79;
		if (start == 1'b0 && ^(main_58_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %80 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_58_80 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %80 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_83)) begin
		main_58_80_reg <= main_58_80;
		if (start == 1'b0 && ^(main_58_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_80_reg"); $finish; end
	end
end
always @(*) begin
	main_58_81 = main_58_81_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %81 = mul nsw i32 %80, %79*/
	if ((cur_state == LEGUP_F_main_BB__58_84)) begin
		main_58_81_reg <= main_58_81;
		if (start == 1'b0 && ^(main_58_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_81_reg"); $finish; end
	end
	/* main: %58*/
	/*   %81 = mul nsw i32 %80, %79*/
	if ((cur_state == LEGUP_F_main_BB__58_84)) begin
		main_58_81_reg <= main_58_81;
		if (start == 1'b0 && ^(main_58_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %82 = add nsw i32 %78, %81*/
		main_58_82 = (main_58_78_reg + main_58_81);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %82 = add nsw i32 %78, %81*/
	if ((cur_state == LEGUP_F_main_BB__58_84)) begin
		main_58_82_reg <= main_58_82;
		if (start == 1'b0 && ^(main_58_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_58_83 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_84)) begin
		main_58_83_reg <= main_58_83;
		if (start == 1'b0 && ^(main_58_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %84 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_58_84 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %84 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_84)) begin
		main_58_84_reg <= main_58_84;
		if (start == 1'b0 && ^(main_58_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_84_reg"); $finish; end
	end
end
always @(*) begin
	main_58_85 = main_58_85_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %85 = mul nsw i32 %84, %83*/
	if ((cur_state == LEGUP_F_main_BB__58_85)) begin
		main_58_85_reg <= main_58_85;
		if (start == 1'b0 && ^(main_58_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_85_reg"); $finish; end
	end
	/* main: %58*/
	/*   %85 = mul nsw i32 %84, %83*/
	if ((cur_state == LEGUP_F_main_BB__58_85)) begin
		main_58_85_reg <= main_58_85;
		if (start == 1'b0 && ^(main_58_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %86 = add nsw i32 %82, %85*/
		main_58_86 = (main_58_82_reg + main_58_85);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %86 = add nsw i32 %82, %85*/
	if ((cur_state == LEGUP_F_main_BB__58_85)) begin
		main_58_86_reg <= main_58_86;
		if (start == 1'b0 && ^(main_58_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %87 = ashr i32 %86, 14*/
		main_58_87 = ($signed(main_58_86) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %87 = ashr i32 %86, 14*/
	if ((cur_state == LEGUP_F_main_BB__58_85)) begin
		main_58_87_reg <= main_58_87;
		if (start == 1'b0 && ^(main_58_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_87_reg"); $finish; end
	end
end
always @(*) begin
	main_58_88 = main_58_88_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %88 = mul i32 %dec_al1.0, %dec_rlt1.0*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_88_reg <= main_58_88;
		if (start == 1'b0 && ^(main_58_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_88_reg"); $finish; end
	end
	/* main: %58*/
	/*   %88 = mul i32 %dec_al1.0, %dec_rlt1.0*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_88_reg <= main_58_88;
		if (start == 1'b0 && ^(main_58_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_88_reg"); $finish; end
	end
end
always @(*) begin
	main_58_89 = main_58_89_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %89 = mul i32 %dec_al2.0, %dec_rlt2.0*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_89_reg <= main_58_89;
		if (start == 1'b0 && ^(main_58_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_89_reg"); $finish; end
	end
	/* main: %58*/
	/*   %89 = mul i32 %dec_al2.0, %dec_rlt2.0*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_89_reg <= main_58_89;
		if (start == 1'b0 && ^(main_58_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %tmp.i.i.i = add i32 %89, %88*/
		main_58_tmpiii = (main_58_89 + main_58_88);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %tmp.i.i.i = add i32 %89, %88*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_tmpiii_reg <= main_58_tmpiii;
		if (start == 1'b0 && ^(main_58_tmpiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_tmpiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %tmp1.i.i.i = shl i32 %tmp.i.i.i, 1*/
		main_58_tmp1iii = (main_58_tmpiii <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %tmp1.i.i.i = shl i32 %tmp.i.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_tmp1iii_reg <= main_58_tmp1iii;
		if (start == 1'b0 && ^(main_58_tmp1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_tmp1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %90 = ashr i32 %tmp1.i.i.i, 15*/
		main_58_90 = ($signed(main_58_tmp1iii) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %90 = ashr i32 %tmp1.i.i.i, 15*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_90_reg <= main_58_90;
		if (start == 1'b0 && ^(main_58_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %91 = add nsw i32 %90, %87*/
		main_58_91 = (main_58_90_reg + main_58_87);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %91 = add nsw i32 %90, %87*/
	if ((cur_state == LEGUP_F_main_BB__58_85)) begin
		main_58_91_reg <= main_58_91;
		if (start == 1'b0 && ^(main_58_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %92 = lshr i32 %62, 2*/
		main_58_92 = (main_58_62 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %92 = lshr i32 %62, 2*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		main_58_92_reg <= main_58_92;
		if (start == 1'b0 && ^(main_58_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %93 = and i32 %92, 15*/
		main_58_93 = (main_58_92 & 32'd15);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %93 = and i32 %92, 15*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		main_58_93_reg <= main_58_93;
		if (start == 1'b0 && ^(main_58_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %94 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %93*/
		main_58_94 = (`TAG_g_qq4_code4_table_a | (4 * main_58_93));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %94 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %93*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		main_58_94_reg <= main_58_94;
		if (start == 1'b0 && ^(main_58_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %95 = load i32* %94, align 4, !tbaa !1*/
		main_58_95 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %95 = load i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_112)) begin
		main_58_95_reg <= main_58_95;
		if (start == 1'b0 && ^(main_58_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_95_reg"); $finish; end
	end
end
always @(*) begin
	main_58_96 = main_58_96_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %96 = mul nsw i32 %95, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB__58_113)) begin
		main_58_96_reg <= main_58_96;
		if (start == 1'b0 && ^(main_58_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_96_reg"); $finish; end
	end
	/* main: %58*/
	/*   %96 = mul nsw i32 %95, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB__58_113)) begin
		main_58_96_reg <= main_58_96;
		if (start == 1'b0 && ^(main_58_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %97 = ashr i32 %96, 15*/
		main_58_97 = ($signed(main_58_96) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %97 = ashr i32 %96, 15*/
	if ((cur_state == LEGUP_F_main_BB__58_113)) begin
		main_58_97_reg <= main_58_97;
		if (start == 1'b0 && ^(main_58_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %98 = load i32* @il, align 4, !tbaa !1*/
		main_58_98 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %98 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_85)) begin
		main_58_98_reg <= main_58_98;
		if (start == 1'b0 && ^(main_58_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %99 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %98*/
		main_58_99 = (1'd0 | (4 * main_58_98));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %99 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %98*/
	if ((cur_state == LEGUP_F_main_BB__58_85)) begin
		main_58_99_reg <= main_58_99;
		if (start == 1'b0 && ^(main_58_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %100 = load i32* %99, align 4, !tbaa !1*/
		main_58_100 = qq6_code6_table_out_a;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %100 = load i32* %99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_86)) begin
		main_58_100_reg <= main_58_100;
		if (start == 1'b0 && ^(main_58_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_100_reg"); $finish; end
	end
end
always @(*) begin
	main_58_101 = main_58_101_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %101 = mul nsw i32 %100, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB__58_87)) begin
		main_58_101_reg <= main_58_101;
		if (start == 1'b0 && ^(main_58_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_101_reg"); $finish; end
	end
	/* main: %58*/
	/*   %101 = mul nsw i32 %100, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB__58_87)) begin
		main_58_101_reg <= main_58_101;
		if (start == 1'b0 && ^(main_58_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %102 = ashr i32 %101, 15*/
		main_58_102 = ($signed(main_58_101) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %102 = ashr i32 %101, 15*/
	if ((cur_state == LEGUP_F_main_BB__58_87)) begin
		main_58_102_reg <= main_58_102;
		if (start == 1'b0 && ^(main_58_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %103 = add nsw i32 %102, %91*/
		main_58_103 = (main_58_102 + main_58_91_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %103 = add nsw i32 %102, %91*/
	if ((cur_state == LEGUP_F_main_BB__58_87)) begin
		main_58_103_reg <= main_58_103;
		if (start == 1'b0 && ^(main_58_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_103_reg"); $finish; end
	end
end
always @(*) begin
	main_58_104 = main_58_104_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %104 = mul nsw i32 %dec_nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_104_reg <= main_58_104;
		if (start == 1'b0 && ^(main_58_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_104_reg"); $finish; end
	end
	/* main: %58*/
	/*   %104 = mul nsw i32 %dec_nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_104_reg <= main_58_104;
		if (start == 1'b0 && ^(main_58_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %105 = ashr i32 %104, 7*/
		main_58_105 = ($signed(main_58_104) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %105 = ashr i32 %104, 7*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_105_reg <= main_58_105;
		if (start == 1'b0 && ^(main_58_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %106 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %93*/
		main_58_106 = (`TAG_g_wl_code_table_a | (4 * main_58_93));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %106 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %93*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		main_58_106_reg <= main_58_106;
		if (start == 1'b0 && ^(main_58_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
		main_58_107 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_112)) begin
		main_58_107_reg <= main_58_107;
		if (start == 1'b0 && ^(main_58_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %108 = add nsw i32 %105, %107*/
		main_58_108 = (main_58_105_reg + main_58_107);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %108 = add nsw i32 %105, %107*/
	if ((cur_state == LEGUP_F_main_BB__58_112)) begin
		main_58_108_reg <= main_58_108;
		if (start == 1'b0 && ^(main_58_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %109 = icmp slt i32 %108, 0*/
		main_58_109 = ($signed(main_58_108) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %109 = icmp slt i32 %108, 0*/
	if ((cur_state == LEGUP_F_main_BB__58_112)) begin
		main_58_109_reg <= main_58_109;
		if (start == 1'b0 && ^(main_58_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %..i12.i.i = select i1 %109, i32 0, i32 %108*/
		main_58_i12ii = (main_58_109 ? 32'd0 : main_58_108);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %..i12.i.i = select i1 %109, i32 0, i32 %108*/
	if ((cur_state == LEGUP_F_main_BB__58_112)) begin
		main_58_i12ii_reg <= main_58_i12ii;
		if (start == 1'b0 && ^(main_58_i12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_i12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %110 = icmp sgt i32 %..i12.i.i, 18432*/
		main_58_110 = ($signed(main_58_i12ii) > $signed(32'd18432));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %110 = icmp sgt i32 %..i12.i.i, 18432*/
	if ((cur_state == LEGUP_F_main_BB__58_112)) begin
		main_58_110_reg <= main_58_110;
		if (start == 1'b0 && ^(main_58_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %...i13.i.i = select i1 %110, i32 18432, i32 %..i12.i.i*/
		main_58_i13ii = (main_58_110 ? 32'd18432 : main_58_i12ii);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %...i13.i.i = select i1 %110, i32 18432, i32 %..i12.i.i*/
	if ((cur_state == LEGUP_F_main_BB__58_112)) begin
		main_58_i13ii_reg <= main_58_i13ii;
		if (start == 1'b0 && ^(main_58_i13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_i13ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %111 = lshr i32 %...i13.i.i, 6*/
		main_58_111 = (main_58_i13ii >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %111 = lshr i32 %...i13.i.i, 6*/
	if ((cur_state == LEGUP_F_main_BB__58_112)) begin
		main_58_111_reg <= main_58_111;
		if (start == 1'b0 && ^(main_58_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %112 = and i32 %111, 31*/
		main_58_112 = (main_58_111 & 32'd31);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %112 = and i32 %111, 31*/
	if ((cur_state == LEGUP_F_main_BB__58_112)) begin
		main_58_112_reg <= main_58_112;
		if (start == 1'b0 && ^(main_58_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %113 = ashr i32 %...i13.i.i, 11*/
		main_58_113 = ($signed(main_58_i13ii) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %113 = ashr i32 %...i13.i.i, 11*/
	if ((cur_state == LEGUP_F_main_BB__58_112)) begin
		main_58_113_reg <= main_58_113;
		if (start == 1'b0 && ^(main_58_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %114 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %112*/
		main_58_114 = (`TAG_g_ilb_table_a | (4 * main_58_112_reg));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %114 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %112*/
	if ((cur_state == LEGUP_F_main_BB__58_113)) begin
		main_58_114_reg <= main_58_114;
		if (start == 1'b0 && ^(main_58_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %115 = load i32* %114, align 4, !tbaa !1*/
		main_58_115 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %115 = load i32* %114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		main_58_115_reg <= main_58_115;
		if (start == 1'b0 && ^(main_58_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %116 = sub i32 9, %113*/
		main_58_116 = (32'd9 - main_58_113);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %116 = sub i32 9, %113*/
	if ((cur_state == LEGUP_F_main_BB__58_112)) begin
		main_58_116_reg <= main_58_116;
		if (start == 1'b0 && ^(main_58_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %117 = ashr i32 %115, %116*/
		main_58_117 = ($signed(main_58_115) >>> main_58_116_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %117 = ashr i32 %115, %116*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		main_58_117_reg <= main_58_117;
		if (start == 1'b0 && ^(main_58_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %118 = shl i32 %117, 3*/
		main_58_118 = (main_58_117 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %118 = shl i32 %117, 3*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		main_58_118_reg <= main_58_118;
		if (start == 1'b0 && ^(main_58_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %119 = add nsw i32 %87, %97*/
		main_58_119 = (main_58_87_reg + main_58_97);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %119 = add nsw i32 %87, %97*/
	if ((cur_state == LEGUP_F_main_BB__58_113)) begin
		main_58_119_reg <= main_58_119;
		if (start == 1'b0 && ^(main_58_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %120 = shl nsw i32 %dec_al1.0, 2*/
		main_58_120 = (main_58_dec_al10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %120 = shl nsw i32 %dec_al1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		main_58_120_reg <= main_58_120;
		if (start == 1'b0 && ^(main_58_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_120_reg"); $finish; end
	end
end
always @(*) begin
	main_58_121 = main_58_121_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %121 = mul nsw i32 %dec_plt1.0, %119*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_121_reg <= main_58_121;
		if (start == 1'b0 && ^(main_58_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_121_reg"); $finish; end
	end
	/* main: %58*/
	/*   %121 = mul nsw i32 %dec_plt1.0, %119*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_121_reg <= main_58_121;
		if (start == 1'b0 && ^(main_58_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %122 = icmp sgt i32 %121, -1*/
		main_58_122 = ($signed(main_58_121) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %122 = icmp sgt i32 %121, -1*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_122_reg <= main_58_122;
		if (start == 1'b0 && ^(main_58_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %123 = sub nsw i32 0, %120*/
		main_58_123 = (32'd0 - main_58_120);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %123 = sub nsw i32 0, %120*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		main_58_123_reg <= main_58_123;
		if (start == 1'b0 && ^(main_58_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %.1.i8.i.i = select i1 %122, i32 %123, i32 %120*/
		main_58_1i8ii = (main_58_122 ? main_58_123_reg : main_58_120_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %.1.i8.i.i = select i1 %122, i32 %123, i32 %120*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_1i8ii_reg <= main_58_1i8ii;
		if (start == 1'b0 && ^(main_58_1i8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_1i8ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %124 = ashr i32 %.1.i8.i.i, 7*/
		main_58_124 = ($signed(main_58_1i8ii) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %124 = ashr i32 %.1.i8.i.i, 7*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_124_reg <= main_58_124;
		if (start == 1'b0 && ^(main_58_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_124_reg"); $finish; end
	end
end
always @(*) begin
	main_58_125 = main_58_125_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %125 = mul nsw i32 %dec_plt2.0, %119*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_125_reg <= main_58_125;
		if (start == 1'b0 && ^(main_58_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_125_reg"); $finish; end
	end
	/* main: %58*/
	/*   %125 = mul nsw i32 %dec_plt2.0, %119*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_125_reg <= main_58_125;
		if (start == 1'b0 && ^(main_58_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %126 = ashr i32 %125, 31*/
		main_58_126 = ($signed(main_58_125) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %126 = ashr i32 %125, 31*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_126_reg <= main_58_126;
		if (start == 1'b0 && ^(main_58_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %127 = and i32 %126, -256*/
		main_58_127 = (main_58_126 & -32'd256);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %127 = and i32 %126, -256*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_127_reg <= main_58_127;
		if (start == 1'b0 && ^(main_58_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %128 = or i32 %127, 128*/
		main_58_128 = (main_58_127 | 32'd128);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %128 = or i32 %127, 128*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_128_reg <= main_58_128;
		if (start == 1'b0 && ^(main_58_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_128_reg"); $finish; end
	end
end
always @(*) begin
	main_58_129 = main_58_129_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %129 = mul nsw i32 %dec_al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_129_reg <= main_58_129;
		if (start == 1'b0 && ^(main_58_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_129_reg"); $finish; end
	end
	/* main: %58*/
	/*   %129 = mul nsw i32 %dec_al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_129_reg <= main_58_129;
		if (start == 1'b0 && ^(main_58_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %130 = ashr i32 %129, 7*/
		main_58_130 = ($signed(main_58_129) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %130 = ashr i32 %129, 7*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_130_reg <= main_58_130;
		if (start == 1'b0 && ^(main_58_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %wd4.0.i9.i.i = add nsw i32 %124, %130*/
		main_58_wd40i9ii = (main_58_124 + main_58_130_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %wd4.0.i9.i.i = add nsw i32 %124, %130*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_wd40i9ii_reg <= main_58_wd40i9ii;
		if (start == 1'b0 && ^(main_58_wd40i9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_wd40i9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %131 = add nsw i32 %wd4.0.i9.i.i, %128*/
		main_58_131 = (main_58_wd40i9ii + main_58_128);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %131 = add nsw i32 %wd4.0.i9.i.i, %128*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_131_reg <= main_58_131;
		if (start == 1'b0 && ^(main_58_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %132 = icmp sgt i32 %131, 12288*/
		main_58_132 = ($signed(main_58_131) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %132 = icmp sgt i32 %131, 12288*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_132_reg <= main_58_132;
		if (start == 1'b0 && ^(main_58_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %..i10.i.i = select i1 %132, i32 12288, i32 %131*/
		main_58_i10ii = (main_58_132 ? 32'd12288 : main_58_131);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %..i10.i.i = select i1 %132, i32 12288, i32 %131*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_i10ii_reg <= main_58_i10ii;
		if (start == 1'b0 && ^(main_58_i10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_i10ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %133 = icmp slt i32 %..i10.i.i, -12288*/
		main_58_133 = ($signed(main_58_i10ii_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %133 = icmp slt i32 %..i10.i.i, -12288*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		main_58_133_reg <= main_58_133;
		if (start == 1'b0 && ^(main_58_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %...i11.i.i = select i1 %133, i32 -12288, i32 %..i10.i.i*/
		main_58_i11ii = (main_58_133 ? -32'd12288 : main_58_i10ii_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %...i11.i.i = select i1 %133, i32 -12288, i32 %..i10.i.i*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		main_58_i11ii_reg <= main_58_i11ii;
		if (start == 1'b0 && ^(main_58_i11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_i11ii_reg"); $finish; end
	end
end
always @(*) begin
	main_58_134 = main_58_134_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %134 = mul nsw i32 %dec_al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_134_reg <= main_58_134;
		if (start == 1'b0 && ^(main_58_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_134_reg"); $finish; end
	end
	/* main: %58*/
	/*   %134 = mul nsw i32 %dec_al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_134_reg <= main_58_134;
		if (start == 1'b0 && ^(main_58_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %135 = ashr i32 %134, 8*/
		main_58_135 = ($signed(main_58_134) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %135 = ashr i32 %134, 8*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_135_reg <= main_58_135;
		if (start == 1'b0 && ^(main_58_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %136 = ashr i32 %121, 31*/
		main_58_136 = ($signed(main_58_121) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %136 = ashr i32 %121, 31*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_136_reg <= main_58_136;
		if (start == 1'b0 && ^(main_58_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %137 = and i32 %136, -384*/
		main_58_137 = (main_58_136 & -32'd384);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %137 = and i32 %136, -384*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_137_reg <= main_58_137;
		if (start == 1'b0 && ^(main_58_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %138 = add nsw i32 %135, 192*/
		main_58_138 = (main_58_135 + 32'd192);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %138 = add nsw i32 %135, 192*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_138_reg <= main_58_138;
		if (start == 1'b0 && ^(main_58_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %apl1.0.i5.i.i = add nsw i32 %138, %137*/
		main_58_apl10i5ii = (main_58_138_reg + main_58_137);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %apl1.0.i5.i.i = add nsw i32 %138, %137*/
	if ((cur_state == LEGUP_F_main_BB__58_114)) begin
		main_58_apl10i5ii_reg <= main_58_apl10i5ii;
		if (start == 1'b0 && ^(main_58_apl10i5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_apl10i5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %139 = sub nsw i32 15360, %...i11.i.i*/
		main_58_139 = (32'd15360 - main_58_i11ii);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %139 = sub nsw i32 15360, %...i11.i.i*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		main_58_139_reg <= main_58_139;
		if (start == 1'b0 && ^(main_58_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %140 = icmp sgt i32 %apl1.0.i5.i.i, %139*/
		main_58_140 = ($signed(main_58_apl10i5ii_reg) > $signed(main_58_139));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %140 = icmp sgt i32 %apl1.0.i5.i.i, %139*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		main_58_140_reg <= main_58_140;
		if (start == 1'b0 && ^(main_58_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %.apl1.0.i6.i.i = select i1 %140, i32 %139, i32 %apl1.0.i5.i.i*/
		main_58_apl10i6ii = (main_58_140 ? main_58_139 : main_58_apl10i5ii_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %.apl1.0.i6.i.i = select i1 %140, i32 %139, i32 %apl1.0.i5.i.i*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		main_58_apl10i6ii_reg <= main_58_apl10i6ii;
		if (start == 1'b0 && ^(main_58_apl10i6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_apl10i6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %141 = sub nsw i32 0, %139*/
		main_58_141 = (32'd0 - main_58_139);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %141 = sub nsw i32 0, %139*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		main_58_141_reg <= main_58_141;
		if (start == 1'b0 && ^(main_58_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %142 = icmp slt i32 %.apl1.0.i6.i.i, %141*/
		main_58_142 = ($signed(main_58_apl10i6ii_reg) < $signed(main_58_141_reg));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %142 = icmp slt i32 %.apl1.0.i6.i.i, %141*/
	if ((cur_state == LEGUP_F_main_BB__58_117)) begin
		main_58_142_reg <= main_58_142;
		if (start == 1'b0 && ^(main_58_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %apl1.2.i7.i.i = select i1 %142, i32 %141, i32 %.apl1.0.i6.i.i*/
		main_58_apl12i7ii = (main_58_142 ? main_58_141_reg : main_58_apl10i6ii_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %apl1.2.i7.i.i = select i1 %142, i32 %141, i32 %.apl1.0.i6.i.i*/
	if ((cur_state == LEGUP_F_main_BB__58_117)) begin
		main_58_apl12i7ii_reg <= main_58_apl12i7ii;
		if (start == 1'b0 && ^(main_58_apl12i7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_apl12i7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %143 = add nsw i32 %97, %91*/
		main_58_143 = (main_58_97 + main_58_91_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %143 = add nsw i32 %97, %91*/
	if ((cur_state == LEGUP_F_main_BB__58_113)) begin
		main_58_143_reg <= main_58_143;
		if (start == 1'b0 && ^(main_58_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %144 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_58_144 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %144 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_120)) begin
		main_58_144_reg <= main_58_144;
		if (start == 1'b0 && ^(main_58_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %145 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_58_145 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %145 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_122)) begin
		main_58_145_reg <= main_58_145;
		if (start == 1'b0 && ^(main_58_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_145_reg"); $finish; end
	end
end
always @(*) begin
	main_58_146 = main_58_146_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %146 = mul nsw i32 %145, %144*/
	if ((cur_state == LEGUP_F_main_BB__58_123)) begin
		main_58_146_reg <= main_58_146;
		if (start == 1'b0 && ^(main_58_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_146_reg"); $finish; end
	end
	/* main: %58*/
	/*   %146 = mul nsw i32 %145, %144*/
	if ((cur_state == LEGUP_F_main_BB__58_123)) begin
		main_58_146_reg <= main_58_146;
		if (start == 1'b0 && ^(main_58_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %147 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_58_147 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %147 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		main_58_147_reg <= main_58_147;
		if (start == 1'b0 && ^(main_58_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %148 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_58_148 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %148 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_123)) begin
		main_58_148_reg <= main_58_148;
		if (start == 1'b0 && ^(main_58_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_148_reg"); $finish; end
	end
end
always @(*) begin
	main_58_149 = main_58_149_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %149 = mul nsw i32 %148, %147*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		main_58_149_reg <= main_58_149;
		if (start == 1'b0 && ^(main_58_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_149_reg"); $finish; end
	end
	/* main: %58*/
	/*   %149 = mul nsw i32 %148, %147*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		main_58_149_reg <= main_58_149;
		if (start == 1'b0 && ^(main_58_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %150 = add nsw i32 %149, %146*/
		main_58_150 = (main_58_149 + main_58_146_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %150 = add nsw i32 %149, %146*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		main_58_150_reg <= main_58_150;
		if (start == 1'b0 && ^(main_58_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %151 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_58_151 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %151 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_122)) begin
		main_58_151_reg <= main_58_151;
		if (start == 1'b0 && ^(main_58_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %152 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_58_152 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %152 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		main_58_152_reg <= main_58_152;
		if (start == 1'b0 && ^(main_58_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_152_reg"); $finish; end
	end
end
always @(*) begin
	main_58_153 = main_58_153_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %153 = mul nsw i32 %152, %151*/
	if ((cur_state == LEGUP_F_main_BB__58_125)) begin
		main_58_153_reg <= main_58_153;
		if (start == 1'b0 && ^(main_58_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_153_reg"); $finish; end
	end
	/* main: %58*/
	/*   %153 = mul nsw i32 %152, %151*/
	if ((cur_state == LEGUP_F_main_BB__58_125)) begin
		main_58_153_reg <= main_58_153;
		if (start == 1'b0 && ^(main_58_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %154 = add nsw i32 %150, %153*/
		main_58_154 = (main_58_150_reg + main_58_153);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %154 = add nsw i32 %150, %153*/
	if ((cur_state == LEGUP_F_main_BB__58_125)) begin
		main_58_154_reg <= main_58_154;
		if (start == 1'b0 && ^(main_58_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %155 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_58_155 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %155 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_123)) begin
		main_58_155_reg <= main_58_155;
		if (start == 1'b0 && ^(main_58_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %156 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_58_156 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %156 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_125)) begin
		main_58_156_reg <= main_58_156;
		if (start == 1'b0 && ^(main_58_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_156_reg"); $finish; end
	end
end
always @(*) begin
	main_58_157 = main_58_157_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %157 = mul nsw i32 %156, %155*/
	if ((cur_state == LEGUP_F_main_BB__58_126)) begin
		main_58_157_reg <= main_58_157;
		if (start == 1'b0 && ^(main_58_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_157_reg"); $finish; end
	end
	/* main: %58*/
	/*   %157 = mul nsw i32 %156, %155*/
	if ((cur_state == LEGUP_F_main_BB__58_126)) begin
		main_58_157_reg <= main_58_157;
		if (start == 1'b0 && ^(main_58_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %158 = add nsw i32 %154, %157*/
		main_58_158 = (main_58_154_reg + main_58_157);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %158 = add nsw i32 %154, %157*/
	if ((cur_state == LEGUP_F_main_BB__58_126)) begin
		main_58_158_reg <= main_58_158;
		if (start == 1'b0 && ^(main_58_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %159 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_58_159 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %159 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		main_58_159_reg <= main_58_159;
		if (start == 1'b0 && ^(main_58_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_58_160 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_126)) begin
		main_58_160_reg <= main_58_160;
		if (start == 1'b0 && ^(main_58_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_160_reg"); $finish; end
	end
end
always @(*) begin
	main_58_161 = main_58_161_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %161 = mul nsw i32 %160, %159*/
	if ((cur_state == LEGUP_F_main_BB__58_127)) begin
		main_58_161_reg <= main_58_161;
		if (start == 1'b0 && ^(main_58_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_161_reg"); $finish; end
	end
	/* main: %58*/
	/*   %161 = mul nsw i32 %160, %159*/
	if ((cur_state == LEGUP_F_main_BB__58_127)) begin
		main_58_161_reg <= main_58_161;
		if (start == 1'b0 && ^(main_58_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %162 = add nsw i32 %158, %161*/
		main_58_162 = (main_58_158_reg + main_58_161);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %162 = add nsw i32 %158, %161*/
	if ((cur_state == LEGUP_F_main_BB__58_127)) begin
		main_58_162_reg <= main_58_162;
		if (start == 1'b0 && ^(main_58_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_58_163 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_125)) begin
		main_58_163_reg <= main_58_163;
		if (start == 1'b0 && ^(main_58_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_58_164 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_127)) begin
		main_58_164_reg <= main_58_164;
		if (start == 1'b0 && ^(main_58_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_164_reg"); $finish; end
	end
end
always @(*) begin
	main_58_165 = main_58_165_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %165 = mul nsw i32 %164, %163*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		main_58_165_reg <= main_58_165;
		if (start == 1'b0 && ^(main_58_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_165_reg"); $finish; end
	end
	/* main: %58*/
	/*   %165 = mul nsw i32 %164, %163*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		main_58_165_reg <= main_58_165;
		if (start == 1'b0 && ^(main_58_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %166 = add nsw i32 %162, %165*/
		main_58_166 = (main_58_162_reg + main_58_165);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %166 = add nsw i32 %162, %165*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		main_58_166_reg <= main_58_166;
		if (start == 1'b0 && ^(main_58_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %167 = ashr i32 %166, 14*/
		main_58_167 = ($signed(main_58_166) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %167 = ashr i32 %166, 14*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		main_58_167_reg <= main_58_167;
		if (start == 1'b0 && ^(main_58_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_167_reg"); $finish; end
	end
end
always @(*) begin
	main_58_168 = main_58_168_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %168 = mul i32 %dec_ah1.0, %dec_rh1.0*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_168_reg <= main_58_168;
		if (start == 1'b0 && ^(main_58_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_168_reg"); $finish; end
	end
	/* main: %58*/
	/*   %168 = mul i32 %dec_ah1.0, %dec_rh1.0*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_168_reg <= main_58_168;
		if (start == 1'b0 && ^(main_58_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_168_reg"); $finish; end
	end
end
always @(*) begin
	main_58_169 = main_58_169_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %169 = mul i32 %dec_ah2.0, %dec_rh2.0*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_169_reg <= main_58_169;
		if (start == 1'b0 && ^(main_58_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_169_reg"); $finish; end
	end
	/* main: %58*/
	/*   %169 = mul i32 %dec_ah2.0, %dec_rh2.0*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_169_reg <= main_58_169;
		if (start == 1'b0 && ^(main_58_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %tmp.i3.i.i = add i32 %169, %168*/
		main_58_tmpi3ii = (main_58_169 + main_58_168);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %tmp.i3.i.i = add i32 %169, %168*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_tmpi3ii_reg <= main_58_tmpi3ii;
		if (start == 1'b0 && ^(main_58_tmpi3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_tmpi3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %tmp1.i4.i.i = shl i32 %tmp.i3.i.i, 1*/
		main_58_tmp1i4ii = (main_58_tmpi3ii <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %tmp1.i4.i.i = shl i32 %tmp.i3.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_tmp1i4ii_reg <= main_58_tmp1i4ii;
		if (start == 1'b0 && ^(main_58_tmp1i4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_tmp1i4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %170 = ashr i32 %tmp1.i4.i.i, 15*/
		main_58_170 = ($signed(main_58_tmp1i4ii) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %170 = ashr i32 %tmp1.i4.i.i, 15*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_170_reg <= main_58_170;
		if (start == 1'b0 && ^(main_58_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %171 = add nsw i32 %170, %167*/
		main_58_171 = (main_58_170_reg + main_58_167);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %171 = add nsw i32 %170, %167*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		main_58_171_reg <= main_58_171;
		if (start == 1'b0 && ^(main_58_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %172 = load i32* @ih, align 4, !tbaa !1*/
		main_58_172 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %172 = load i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_119)) begin
		main_58_172_reg <= main_58_172;
		if (start == 1'b0 && ^(main_58_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %173 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %172*/
		main_58_173 = (`TAG_g_qq2_code2_table_a | (4 * main_58_172));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %173 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %172*/
	if ((cur_state == LEGUP_F_main_BB__58_119)) begin
		main_58_173_reg <= main_58_173;
		if (start == 1'b0 && ^(main_58_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
		main_58_174 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_126)) begin
		main_58_174_reg <= main_58_174;
		if (start == 1'b0 && ^(main_58_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_174_reg"); $finish; end
	end
end
always @(*) begin
	main_58_175 = main_58_175_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %175 = mul nsw i32 %174, %dec_deth.0*/
	if ((cur_state == LEGUP_F_main_BB__58_127)) begin
		main_58_175_reg <= main_58_175;
		if (start == 1'b0 && ^(main_58_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_175_reg"); $finish; end
	end
	/* main: %58*/
	/*   %175 = mul nsw i32 %174, %dec_deth.0*/
	if ((cur_state == LEGUP_F_main_BB__58_127)) begin
		main_58_175_reg <= main_58_175;
		if (start == 1'b0 && ^(main_58_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %176 = ashr i32 %175, 15*/
		main_58_176 = ($signed(main_58_175) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %176 = ashr i32 %175, 15*/
	if ((cur_state == LEGUP_F_main_BB__58_127)) begin
		main_58_176_reg <= main_58_176;
		if (start == 1'b0 && ^(main_58_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_176_reg"); $finish; end
	end
end
always @(*) begin
	main_58_177 = main_58_177_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %177 = mul nsw i32 %dec_nbh.0, 127*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_177_reg <= main_58_177;
		if (start == 1'b0 && ^(main_58_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_177_reg"); $finish; end
	end
	/* main: %58*/
	/*   %177 = mul nsw i32 %dec_nbh.0, 127*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_177_reg <= main_58_177;
		if (start == 1'b0 && ^(main_58_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %178 = ashr i32 %177, 7*/
		main_58_178 = ($signed(main_58_177) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %178 = ashr i32 %177, 7*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_178_reg <= main_58_178;
		if (start == 1'b0 && ^(main_58_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %179 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %172*/
		main_58_179 = (`TAG_g_wh_code_table_a | (4 * main_58_172));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %179 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %172*/
	if ((cur_state == LEGUP_F_main_BB__58_119)) begin
		main_58_179_reg <= main_58_179;
		if (start == 1'b0 && ^(main_58_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %180 = load i32* %179, align 4, !tbaa !1*/
		main_58_180 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %180 = load i32* %179, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		main_58_180_reg <= main_58_180;
		if (start == 1'b0 && ^(main_58_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %181 = add nsw i32 %178, %180*/
		main_58_181 = (main_58_178_reg + main_58_180);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %181 = add nsw i32 %178, %180*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		main_58_181_reg <= main_58_181;
		if (start == 1'b0 && ^(main_58_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %182 = icmp slt i32 %181, 0*/
		main_58_182 = ($signed(main_58_181) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %182 = icmp slt i32 %181, 0*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		main_58_182_reg <= main_58_182;
		if (start == 1'b0 && ^(main_58_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %..i1.i.i = select i1 %182, i32 0, i32 %181*/
		main_58_i1ii = (main_58_182 ? 32'd0 : main_58_181);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %..i1.i.i = select i1 %182, i32 0, i32 %181*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		main_58_i1ii_reg <= main_58_i1ii;
		if (start == 1'b0 && ^(main_58_i1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_i1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %183 = icmp sgt i32 %..i1.i.i, 22528*/
		main_58_183 = ($signed(main_58_i1ii) > $signed(32'd22528));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %183 = icmp sgt i32 %..i1.i.i, 22528*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		main_58_183_reg <= main_58_183;
		if (start == 1'b0 && ^(main_58_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %...i2.i.i = select i1 %183, i32 22528, i32 %..i1.i.i*/
		main_58_i2ii = (main_58_183 ? 32'd22528 : main_58_i1ii);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %...i2.i.i = select i1 %183, i32 22528, i32 %..i1.i.i*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		main_58_i2ii_reg <= main_58_i2ii;
		if (start == 1'b0 && ^(main_58_i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_i2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %184 = lshr i32 %...i2.i.i, 6*/
		main_58_184 = (main_58_i2ii >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %184 = lshr i32 %...i2.i.i, 6*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		main_58_184_reg <= main_58_184;
		if (start == 1'b0 && ^(main_58_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %185 = and i32 %184, 31*/
		main_58_185 = (main_58_184 & 32'd31);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %185 = and i32 %184, 31*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		main_58_185_reg <= main_58_185;
		if (start == 1'b0 && ^(main_58_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %186 = ashr i32 %...i2.i.i, 11*/
		main_58_186 = ($signed(main_58_i2ii) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %186 = ashr i32 %...i2.i.i, 11*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		main_58_186_reg <= main_58_186;
		if (start == 1'b0 && ^(main_58_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %187 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %185*/
		main_58_187 = (`TAG_g_ilb_table_a | (4 * main_58_185_reg));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %187 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %185*/
	if ((cur_state == LEGUP_F_main_BB__58_122)) begin
		main_58_187_reg <= main_58_187;
		if (start == 1'b0 && ^(main_58_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %188 = load i32* %187, align 4, !tbaa !1*/
		main_58_188 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %188 = load i32* %187, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		main_58_188_reg <= main_58_188;
		if (start == 1'b0 && ^(main_58_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %189 = sub i32 11, %186*/
		main_58_189 = (32'd11 - main_58_186);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %189 = sub i32 11, %186*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		main_58_189_reg <= main_58_189;
		if (start == 1'b0 && ^(main_58_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %190 = ashr i32 %188, %189*/
		main_58_190 = ($signed(main_58_188) >>> main_58_189_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %190 = ashr i32 %188, %189*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		main_58_190_reg <= main_58_190;
		if (start == 1'b0 && ^(main_58_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %191 = shl i32 %190, 3*/
		main_58_191 = (main_58_190 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %191 = shl i32 %190, 3*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		main_58_191_reg <= main_58_191;
		if (start == 1'b0 && ^(main_58_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %192 = add nsw i32 %167, %176*/
		main_58_192 = (main_58_167 + main_58_176_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %192 = add nsw i32 %167, %176*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		main_58_192_reg <= main_58_192;
		if (start == 1'b0 && ^(main_58_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %193 = shl nsw i32 %dec_ah1.0, 2*/
		main_58_193 = (main_58_dec_ah10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %193 = shl nsw i32 %dec_ah1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		main_58_193_reg <= main_58_193;
		if (start == 1'b0 && ^(main_58_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_193_reg"); $finish; end
	end
end
always @(*) begin
	main_58_194 = main_58_194_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %194 = mul nsw i32 %dec_ph1.0, %192*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_194_reg <= main_58_194;
		if (start == 1'b0 && ^(main_58_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_194_reg"); $finish; end
	end
	/* main: %58*/
	/*   %194 = mul nsw i32 %dec_ph1.0, %192*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_194_reg <= main_58_194;
		if (start == 1'b0 && ^(main_58_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %195 = icmp sgt i32 %194, -1*/
		main_58_195 = ($signed(main_58_194) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %195 = icmp sgt i32 %194, -1*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_195_reg <= main_58_195;
		if (start == 1'b0 && ^(main_58_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %196 = sub nsw i32 0, %193*/
		main_58_196 = (32'd0 - main_58_193);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %196 = sub nsw i32 0, %193*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		main_58_196_reg <= main_58_196;
		if (start == 1'b0 && ^(main_58_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %.1.i.i.i = select i1 %195, i32 %196, i32 %193*/
		main_58_1iii = (main_58_195 ? main_58_196_reg : main_58_193_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %.1.i.i.i = select i1 %195, i32 %196, i32 %193*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_1iii_reg <= main_58_1iii;
		if (start == 1'b0 && ^(main_58_1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %197 = ashr i32 %.1.i.i.i, 7*/
		main_58_197 = ($signed(main_58_1iii) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %197 = ashr i32 %.1.i.i.i, 7*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_197_reg <= main_58_197;
		if (start == 1'b0 && ^(main_58_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_197_reg"); $finish; end
	end
end
always @(*) begin
	main_58_198 = main_58_198_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %198 = mul nsw i32 %dec_ph2.0, %192*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_198_reg <= main_58_198;
		if (start == 1'b0 && ^(main_58_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_198_reg"); $finish; end
	end
	/* main: %58*/
	/*   %198 = mul nsw i32 %dec_ph2.0, %192*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_198_reg <= main_58_198;
		if (start == 1'b0 && ^(main_58_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %199 = ashr i32 %198, 31*/
		main_58_199 = ($signed(main_58_198) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %199 = ashr i32 %198, 31*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_199_reg <= main_58_199;
		if (start == 1'b0 && ^(main_58_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %200 = and i32 %199, -256*/
		main_58_200 = (main_58_199 & -32'd256);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %200 = and i32 %199, -256*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_200_reg <= main_58_200;
		if (start == 1'b0 && ^(main_58_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %201 = or i32 %200, 128*/
		main_58_201 = (main_58_200 | 32'd128);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %201 = or i32 %200, 128*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_201_reg <= main_58_201;
		if (start == 1'b0 && ^(main_58_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_201_reg"); $finish; end
	end
end
always @(*) begin
	main_58_202 = main_58_202_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %202 = mul nsw i32 %dec_ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_202_reg <= main_58_202;
		if (start == 1'b0 && ^(main_58_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_202_reg"); $finish; end
	end
	/* main: %58*/
	/*   %202 = mul nsw i32 %dec_ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_202_reg <= main_58_202;
		if (start == 1'b0 && ^(main_58_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %203 = ashr i32 %202, 7*/
		main_58_203 = ($signed(main_58_202) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %203 = ashr i32 %202, 7*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_203_reg <= main_58_203;
		if (start == 1'b0 && ^(main_58_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %wd4.0.i.i.i = add nsw i32 %197, %203*/
		main_58_wd40iii = (main_58_197 + main_58_203_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %wd4.0.i.i.i = add nsw i32 %197, %203*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_wd40iii_reg <= main_58_wd40iii;
		if (start == 1'b0 && ^(main_58_wd40iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_wd40iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %204 = add nsw i32 %wd4.0.i.i.i, %201*/
		main_58_204 = (main_58_wd40iii + main_58_201);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %204 = add nsw i32 %wd4.0.i.i.i, %201*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_204_reg <= main_58_204;
		if (start == 1'b0 && ^(main_58_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %205 = icmp sgt i32 %204, 12288*/
		main_58_205 = ($signed(main_58_204) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %205 = icmp sgt i32 %204, 12288*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_205_reg <= main_58_205;
		if (start == 1'b0 && ^(main_58_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %..i.i.i = select i1 %205, i32 12288, i32 %204*/
		main_58_iii = (main_58_205 ? 32'd12288 : main_58_204);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %..i.i.i = select i1 %205, i32 12288, i32 %204*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_iii_reg <= main_58_iii;
		if (start == 1'b0 && ^(main_58_iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %206 = icmp slt i32 %..i.i.i, -12288*/
		main_58_206 = ($signed(main_58_iii_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %206 = icmp slt i32 %..i.i.i, -12288*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_206_reg <= main_58_206;
		if (start == 1'b0 && ^(main_58_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %...i.i.i = select i1 %206, i32 -12288, i32 %..i.i.i*/
		main_58_iii_var0 = (main_58_206 ? -32'd12288 : main_58_iii_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %...i.i.i = select i1 %206, i32 -12288, i32 %..i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_iii_var0_reg <= main_58_iii_var0;
		if (start == 1'b0 && ^(main_58_iii_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_iii_var0_reg"); $finish; end
	end
end
always @(*) begin
	main_58_207 = main_58_207_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %207 = mul nsw i32 %dec_ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_207_reg <= main_58_207;
		if (start == 1'b0 && ^(main_58_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_207_reg"); $finish; end
	end
	/* main: %58*/
	/*   %207 = mul nsw i32 %dec_ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_207_reg <= main_58_207;
		if (start == 1'b0 && ^(main_58_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %208 = ashr i32 %207, 8*/
		main_58_208 = ($signed(main_58_207) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %208 = ashr i32 %207, 8*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_208_reg <= main_58_208;
		if (start == 1'b0 && ^(main_58_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %209 = ashr i32 %194, 31*/
		main_58_209 = ($signed(main_58_194) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %209 = ashr i32 %194, 31*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_209_reg <= main_58_209;
		if (start == 1'b0 && ^(main_58_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %210 = and i32 %209, -384*/
		main_58_210 = (main_58_209 & -32'd384);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %210 = and i32 %209, -384*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_210_reg <= main_58_210;
		if (start == 1'b0 && ^(main_58_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %211 = add nsw i32 %208, 192*/
		main_58_211 = (main_58_208 + 32'd192);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %211 = add nsw i32 %208, 192*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_211_reg <= main_58_211;
		if (start == 1'b0 && ^(main_58_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %apl1.0.i.i.i = add nsw i32 %211, %210*/
		main_58_apl10iii = (main_58_211_reg + main_58_210);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %apl1.0.i.i.i = add nsw i32 %211, %210*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_apl10iii_reg <= main_58_apl10iii;
		if (start == 1'b0 && ^(main_58_apl10iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_apl10iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %212 = sub nsw i32 15360, %...i.i.i*/
		main_58_212 = (32'd15360 - main_58_iii_var0);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %212 = sub nsw i32 15360, %...i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_212_reg <= main_58_212;
		if (start == 1'b0 && ^(main_58_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %213 = icmp sgt i32 %apl1.0.i.i.i, %212*/
		main_58_213 = ($signed(main_58_apl10iii_reg) > $signed(main_58_212));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %213 = icmp sgt i32 %apl1.0.i.i.i, %212*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_213_reg <= main_58_213;
		if (start == 1'b0 && ^(main_58_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %.apl1.0.i.i.i = select i1 %213, i32 %212, i32 %apl1.0.i.i.i*/
		main_58_apl10iii_var1 = (main_58_213 ? main_58_212 : main_58_apl10iii_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %.apl1.0.i.i.i = select i1 %213, i32 %212, i32 %apl1.0.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_apl10iii_var1_reg <= main_58_apl10iii_var1;
		if (start == 1'b0 && ^(main_58_apl10iii_var1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_apl10iii_var1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %214 = sub nsw i32 0, %212*/
		main_58_214 = (32'd0 - main_58_212);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %214 = sub nsw i32 0, %212*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_214_reg <= main_58_214;
		if (start == 1'b0 && ^(main_58_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %215 = icmp slt i32 %.apl1.0.i.i.i, %214*/
		main_58_215 = ($signed(main_58_apl10iii_var1_reg) < $signed(main_58_214_reg));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %215 = icmp slt i32 %.apl1.0.i.i.i, %214*/
	if ((cur_state == LEGUP_F_main_BB__58_132)) begin
		main_58_215_reg <= main_58_215;
		if (start == 1'b0 && ^(main_58_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %apl1.2.i.i.i = select i1 %215, i32 %214, i32 %.apl1.0.i.i.i*/
		main_58_apl12iii = (main_58_215 ? main_58_214_reg : main_58_apl10iii_var1_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %apl1.2.i.i.i = select i1 %215, i32 %214, i32 %.apl1.0.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__58_132)) begin
		main_58_apl12iii_reg <= main_58_apl12iii;
		if (start == 1'b0 && ^(main_58_apl12iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_apl12iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %216 = add nsw i32 %176, %171*/
		main_58_216 = (main_58_176_reg + main_58_171);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %216 = add nsw i32 %176, %171*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		main_58_216_reg <= main_58_216;
		if (start == 1'b0 && ^(main_58_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %217 = sub nsw i32 %103, %216*/
		main_58_217 = (main_58_103_reg - main_58_216);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %217 = sub nsw i32 %103, %216*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		main_58_217_reg <= main_58_217;
		if (start == 1'b0 && ^(main_58_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %218 = add nsw i32 %216, %103*/
		main_58_218 = (main_58_216 + main_58_103_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %218 = add nsw i32 %216, %103*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		main_58_218_reg <= main_58_218;
		if (start == 1'b0 && ^(main_58_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_218_reg"); $finish; end
	end
end
always @(*) begin
	main_58_219 = main_58_219_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %219 = mul nsw i32 %217, 12*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_219_reg <= main_58_219;
		if (start == 1'b0 && ^(main_58_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_219_reg"); $finish; end
	end
	/* main: %58*/
	/*   %219 = mul nsw i32 %217, 12*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_219_reg <= main_58_219;
		if (start == 1'b0 && ^(main_58_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_219_reg"); $finish; end
	end
end
always @(*) begin
	main_58_220 = main_58_220_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %220 = mul nsw i32 %218, -44*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_220_reg <= main_58_220;
		if (start == 1'b0 && ^(main_58_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_220_reg"); $finish; end
	end
	/* main: %58*/
	/*   %220 = mul nsw i32 %218, -44*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_220_reg <= main_58_220;
		if (start == 1'b0 && ^(main_58_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_220_reg"); $finish; end
	end
end
always @(*) begin
	main_58_221 = main_58_221_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %221 = mul nsw i32 %accumc.0.0, -44*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_221_reg <= main_58_221;
		if (start == 1'b0 && ^(main_58_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_221_reg"); $finish; end
	end
	/* main: %58*/
	/*   %221 = mul nsw i32 %accumc.0.0, -44*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_221_reg <= main_58_221;
		if (start == 1'b0 && ^(main_58_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %222 = add nsw i32 %221, %219*/
		main_58_222 = (main_58_221_reg + main_58_219);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %222 = add nsw i32 %221, %219*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_222_reg <= main_58_222;
		if (start == 1'b0 && ^(main_58_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_222_reg"); $finish; end
	end
end
always @(*) begin
	main_58_223 = main_58_223_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %223 = mul nsw i32 %accumd.0.0, 212*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_223_reg <= main_58_223;
		if (start == 1'b0 && ^(main_58_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_223_reg"); $finish; end
	end
	/* main: %58*/
	/*   %223 = mul nsw i32 %accumd.0.0, 212*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_223_reg <= main_58_223;
		if (start == 1'b0 && ^(main_58_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %224 = add nsw i32 %223, %220*/
		main_58_224 = (main_58_223_reg + main_58_220);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %224 = add nsw i32 %223, %220*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_224_reg <= main_58_224;
		if (start == 1'b0 && ^(main_58_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_224_reg"); $finish; end
	end
end
always @(*) begin
	main_58_225 = main_58_225_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %225 = mul nsw i32 %accumc.1.0, 48*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_225_reg <= main_58_225;
		if (start == 1'b0 && ^(main_58_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_225_reg"); $finish; end
	end
	/* main: %58*/
	/*   %225 = mul nsw i32 %accumc.1.0, 48*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_225_reg <= main_58_225;
		if (start == 1'b0 && ^(main_58_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %226 = add nsw i32 %225, %222*/
		main_58_226 = (main_58_225_reg + main_58_222);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %226 = add nsw i32 %225, %222*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_226_reg <= main_58_226;
		if (start == 1'b0 && ^(main_58_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_226_reg"); $finish; end
	end
end
always @(*) begin
	main_58_227 = main_58_227_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %227 = mul nsw i32 %accumd.1.0, -624*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_227_reg <= main_58_227;
		if (start == 1'b0 && ^(main_58_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_227_reg"); $finish; end
	end
	/* main: %58*/
	/*   %227 = mul nsw i32 %accumd.1.0, -624*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_227_reg <= main_58_227;
		if (start == 1'b0 && ^(main_58_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %228 = add nsw i32 %227, %224*/
		main_58_228 = (main_58_227_reg + main_58_224);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %228 = add nsw i32 %227, %224*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_228_reg <= main_58_228;
		if (start == 1'b0 && ^(main_58_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %229 = shl nsw i32 %accumc.2.0, 7*/
		main_58_229 = (main_58_accumc20_reg <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %229 = shl nsw i32 %accumc.2.0, 7*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		main_58_229_reg <= main_58_229;
		if (start == 1'b0 && ^(main_58_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %230 = add nsw i32 %229, %226*/
		main_58_230 = (main_58_229_reg + main_58_226);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %230 = add nsw i32 %229, %226*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_230_reg <= main_58_230;
		if (start == 1'b0 && ^(main_58_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_230_reg"); $finish; end
	end
end
always @(*) begin
	main_58_231 = main_58_231_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %231 = mul nsw i32 %accumd.2.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_231_reg <= main_58_231;
		if (start == 1'b0 && ^(main_58_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_231_reg"); $finish; end
	end
	/* main: %58*/
	/*   %231 = mul nsw i32 %accumd.2.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_231_reg <= main_58_231;
		if (start == 1'b0 && ^(main_58_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %232 = add nsw i32 %231, %228*/
		main_58_232 = (main_58_231_reg + main_58_228);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %232 = add nsw i32 %231, %228*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_232_reg <= main_58_232;
		if (start == 1'b0 && ^(main_58_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_232_reg"); $finish; end
	end
end
always @(*) begin
	main_58_233 = main_58_233_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %233 = mul nsw i32 %accumc.3.0, -840*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_233_reg <= main_58_233;
		if (start == 1'b0 && ^(main_58_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_233_reg"); $finish; end
	end
	/* main: %58*/
	/*   %233 = mul nsw i32 %accumc.3.0, -840*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_233_reg <= main_58_233;
		if (start == 1'b0 && ^(main_58_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %234 = add nsw i32 %233, %230*/
		main_58_234 = (main_58_233_reg + main_58_230);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %234 = add nsw i32 %233, %230*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_234_reg <= main_58_234;
		if (start == 1'b0 && ^(main_58_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_234_reg"); $finish; end
	end
end
always @(*) begin
	main_58_235 = main_58_235_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %235 = mul nsw i32 %accumd.3.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_235_reg <= main_58_235;
		if (start == 1'b0 && ^(main_58_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_235_reg"); $finish; end
	end
	/* main: %58*/
	/*   %235 = mul nsw i32 %accumd.3.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_235_reg <= main_58_235;
		if (start == 1'b0 && ^(main_58_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %236 = add nsw i32 %235, %232*/
		main_58_236 = (main_58_235_reg + main_58_232);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %236 = add nsw i32 %235, %232*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_236_reg <= main_58_236;
		if (start == 1'b0 && ^(main_58_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_236_reg"); $finish; end
	end
end
always @(*) begin
	main_58_237 = main_58_237_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %237 = mul nsw i32 %accumc.4.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_237_reg <= main_58_237;
		if (start == 1'b0 && ^(main_58_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_237_reg"); $finish; end
	end
	/* main: %58*/
	/*   %237 = mul nsw i32 %accumc.4.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_237_reg <= main_58_237;
		if (start == 1'b0 && ^(main_58_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %238 = add nsw i32 %237, %234*/
		main_58_238 = (main_58_237_reg + main_58_234);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %238 = add nsw i32 %237, %234*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_238_reg <= main_58_238;
		if (start == 1'b0 && ^(main_58_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_238_reg"); $finish; end
	end
end
always @(*) begin
	main_58_239 = main_58_239_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %239 = mul nsw i32 %accumd.4.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_239_reg <= main_58_239;
		if (start == 1'b0 && ^(main_58_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_239_reg"); $finish; end
	end
	/* main: %58*/
	/*   %239 = mul nsw i32 %accumd.4.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_239_reg <= main_58_239;
		if (start == 1'b0 && ^(main_58_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %240 = add nsw i32 %239, %236*/
		main_58_240 = (main_58_239_reg + main_58_236);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %240 = add nsw i32 %239, %236*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_240_reg <= main_58_240;
		if (start == 1'b0 && ^(main_58_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_240_reg"); $finish; end
	end
end
always @(*) begin
	main_58_241 = main_58_241_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %241 = mul nsw i32 %accumc.5.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_241_reg <= main_58_241;
		if (start == 1'b0 && ^(main_58_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_241_reg"); $finish; end
	end
	/* main: %58*/
	/*   %241 = mul nsw i32 %accumc.5.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_241_reg <= main_58_241;
		if (start == 1'b0 && ^(main_58_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %242 = add nsw i32 %241, %238*/
		main_58_242 = (main_58_241_reg + main_58_238);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %242 = add nsw i32 %241, %238*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_242_reg <= main_58_242;
		if (start == 1'b0 && ^(main_58_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_242_reg"); $finish; end
	end
end
always @(*) begin
	main_58_243 = main_58_243_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %243 = mul nsw i32 %accumd.5.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_243_reg <= main_58_243;
		if (start == 1'b0 && ^(main_58_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_243_reg"); $finish; end
	end
	/* main: %58*/
	/*   %243 = mul nsw i32 %accumd.5.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_243_reg <= main_58_243;
		if (start == 1'b0 && ^(main_58_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %244 = add nsw i32 %243, %240*/
		main_58_244 = (main_58_243_reg + main_58_240);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %244 = add nsw i32 %243, %240*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_244_reg <= main_58_244;
		if (start == 1'b0 && ^(main_58_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_244_reg"); $finish; end
	end
end
always @(*) begin
	main_58_245 = main_58_245_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %245 = mul nsw i32 %accumc.6.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_245_reg <= main_58_245;
		if (start == 1'b0 && ^(main_58_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_245_reg"); $finish; end
	end
	/* main: %58*/
	/*   %245 = mul nsw i32 %accumc.6.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_245_reg <= main_58_245;
		if (start == 1'b0 && ^(main_58_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %246 = add nsw i32 %245, %242*/
		main_58_246 = (main_58_245_reg + main_58_242);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %246 = add nsw i32 %245, %242*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_246_reg <= main_58_246;
		if (start == 1'b0 && ^(main_58_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_246_reg"); $finish; end
	end
end
always @(*) begin
	main_58_247 = main_58_247_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %247 = mul nsw i32 %accumd.6.0, -840*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_247_reg <= main_58_247;
		if (start == 1'b0 && ^(main_58_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_247_reg"); $finish; end
	end
	/* main: %58*/
	/*   %247 = mul nsw i32 %accumd.6.0, -840*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_247_reg <= main_58_247;
		if (start == 1'b0 && ^(main_58_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %248 = add nsw i32 %247, %244*/
		main_58_248 = (main_58_247_reg + main_58_244);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %248 = add nsw i32 %247, %244*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_248_reg <= main_58_248;
		if (start == 1'b0 && ^(main_58_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_248_reg"); $finish; end
	end
end
always @(*) begin
	main_58_249 = main_58_249_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %249 = mul nsw i32 %accumc.7.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_249_reg <= main_58_249;
		if (start == 1'b0 && ^(main_58_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_249_reg"); $finish; end
	end
	/* main: %58*/
	/*   %249 = mul nsw i32 %accumc.7.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_249_reg <= main_58_249;
		if (start == 1'b0 && ^(main_58_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %250 = add nsw i32 %249, %246*/
		main_58_250 = (main_58_249_reg + main_58_246);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %250 = add nsw i32 %249, %246*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_250_reg <= main_58_250;
		if (start == 1'b0 && ^(main_58_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %251 = shl nsw i32 %accumd.7.0, 7*/
		main_58_251 = (main_58_accumd70_reg <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %251 = shl nsw i32 %accumd.7.0, 7*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		main_58_251_reg <= main_58_251;
		if (start == 1'b0 && ^(main_58_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %252 = add nsw i32 %251, %248*/
		main_58_252 = (main_58_251_reg + main_58_248);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %252 = add nsw i32 %251, %248*/
	if ((cur_state == LEGUP_F_main_BB__58_130)) begin
		main_58_252_reg <= main_58_252;
		if (start == 1'b0 && ^(main_58_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_252_reg"); $finish; end
	end
end
always @(*) begin
	main_58_253 = main_58_253_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %253 = mul nsw i32 %accumc.8.0, -624*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_253_reg <= main_58_253;
		if (start == 1'b0 && ^(main_58_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_253_reg"); $finish; end
	end
	/* main: %58*/
	/*   %253 = mul nsw i32 %accumc.8.0, -624*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_253_reg <= main_58_253;
		if (start == 1'b0 && ^(main_58_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %254 = add nsw i32 %253, %250*/
		main_58_254 = (main_58_253_reg + main_58_250_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %254 = add nsw i32 %253, %250*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_254_reg <= main_58_254;
		if (start == 1'b0 && ^(main_58_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_254_reg"); $finish; end
	end
end
always @(*) begin
	main_58_255 = main_58_255_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %255 = mul nsw i32 %accumd.8.0, 48*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_255_reg <= main_58_255;
		if (start == 1'b0 && ^(main_58_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_255_reg"); $finish; end
	end
	/* main: %58*/
	/*   %255 = mul nsw i32 %accumd.8.0, 48*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_255_reg <= main_58_255;
		if (start == 1'b0 && ^(main_58_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %256 = add nsw i32 %255, %252*/
		main_58_256 = (main_58_255_reg + main_58_252_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %256 = add nsw i32 %255, %252*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_256_reg <= main_58_256;
		if (start == 1'b0 && ^(main_58_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_256_reg"); $finish; end
	end
end
always @(*) begin
	main_58_257 = main_58_257_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %257 = mul nsw i32 %accumc.9.0, 212*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_257_reg <= main_58_257;
		if (start == 1'b0 && ^(main_58_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_257_reg"); $finish; end
	end
	/* main: %58*/
	/*   %257 = mul nsw i32 %accumc.9.0, 212*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_257_reg <= main_58_257;
		if (start == 1'b0 && ^(main_58_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %258 = add nsw i32 %257, %254*/
		main_58_258 = (main_58_257_reg + main_58_254);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %258 = add nsw i32 %257, %254*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_258_reg <= main_58_258;
		if (start == 1'b0 && ^(main_58_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_258_reg"); $finish; end
	end
end
always @(*) begin
	main_58_259 = main_58_259_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %259 = mul nsw i32 %accumd.9.0, -44*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_259_reg <= main_58_259;
		if (start == 1'b0 && ^(main_58_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_259_reg"); $finish; end
	end
	/* main: %58*/
	/*   %259 = mul nsw i32 %accumd.9.0, -44*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_259_reg <= main_58_259;
		if (start == 1'b0 && ^(main_58_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %260 = add nsw i32 %259, %256*/
		main_58_260 = (main_58_259_reg + main_58_256);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %260 = add nsw i32 %259, %256*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_260_reg <= main_58_260;
		if (start == 1'b0 && ^(main_58_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_260_reg"); $finish; end
	end
end
always @(*) begin
	main_58_261 = main_58_261_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %261 = mul nsw i32 %accumc.10.0, -44*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_261_reg <= main_58_261;
		if (start == 1'b0 && ^(main_58_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_261_reg"); $finish; end
	end
	/* main: %58*/
	/*   %261 = mul nsw i32 %accumc.10.0, -44*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_261_reg <= main_58_261;
		if (start == 1'b0 && ^(main_58_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %262 = add nsw i32 %261, %258*/
		main_58_262 = (main_58_261_reg + main_58_258);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %262 = add nsw i32 %261, %258*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_262_reg <= main_58_262;
		if (start == 1'b0 && ^(main_58_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_262_reg"); $finish; end
	end
end
always @(*) begin
	main_58_263 = main_58_263_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %263 = mul nsw i32 %accumd.10.0, 12*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_263_reg <= main_58_263;
		if (start == 1'b0 && ^(main_58_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_263_reg"); $finish; end
	end
	/* main: %58*/
	/*   %263 = mul nsw i32 %accumd.10.0, 12*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		main_58_263_reg <= main_58_263;
		if (start == 1'b0 && ^(main_58_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %264 = add nsw i32 %263, %260*/
		main_58_264 = (main_58_263_reg + main_58_260);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %264 = add nsw i32 %263, %260*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_264_reg <= main_58_264;
		if (start == 1'b0 && ^(main_58_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %265 = ashr i32 %262, 14*/
		main_58_265 = ($signed(main_58_262) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %265 = ashr i32 %262, 14*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_265_reg <= main_58_265;
		if (start == 1'b0 && ^(main_58_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %266 = ashr i32 %264, 14*/
		main_58_266 = ($signed(main_58_264) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %266 = ashr i32 %264, 14*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		main_58_266_reg <= main_58_266;
		if (start == 1'b0 && ^(main_58_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_58_indvarnext = (main_58_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		main_58_indvarnext_reg <= main_58_indvarnext;
		if (start == 1'b0 && ^(main_58_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %exitcond5 = icmp eq i32 %indvar.next, 50*/
		main_58_exitcond5 = (main_58_indvarnext == 32'd50);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %exitcond5 = icmp eq i32 %indvar.next, 50*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		main_58_exitcond5_reg <= main_58_exitcond5;
		if (start == 1'b0 && ^(main_58_exitcond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_exitcond5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_135) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) */ begin
		main_adpcm_mainexit_main_result04 = main_adpcm_mainexit_main_result0;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg <= main_adpcm_mainexit_main_result04;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_135) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) begin
		main_adpcm_mainexit_main_result04_reg <= main_adpcm_mainexit_main_result04;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %271, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %271, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_135) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) */ begin
		main_adpcm_mainexit_i03 = main_adpcm_mainexit_271_reg;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %271, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_i03_reg <= main_adpcm_mainexit_i03;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %271, %adpcm_main.exit ], [ 0, %adpcm_main.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_135) & (memory_controller_waitrequest == 1'd0)) & (main_adpcm_mainexit_exitcond_reg == 1'd0))) begin
		main_adpcm_mainexit_i03_reg <= main_adpcm_mainexit_i03;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep3 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep3 = (1'd0 | (4 * main_adpcm_mainexit_i03_reg));
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep3 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %i.03*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_134)) begin
		main_adpcm_mainexit_scevgep3_reg <= main_adpcm_mainexit_scevgep3;
		if (start == 1'b0 && ^(main_adpcm_mainexit_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep4 = getelementptr [100 x i32]* @compressed, i32 0, i32 %i.03*/
		main_adpcm_mainexit_scevgep4 = (1'd0 | (4 * main_adpcm_mainexit_i03_reg));
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %scevgep4 = getelementptr [100 x i32]* @compressed, i32 0, i32 %i.03*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_134)) begin
		main_adpcm_mainexit_scevgep4_reg <= main_adpcm_mainexit_scevgep4;
		if (start == 1'b0 && ^(main_adpcm_mainexit_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %267 = load i32* %scevgep4, align 4, !tbaa !1*/
		main_adpcm_mainexit_267 = compressed_out_a;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %267 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_135)) begin
		main_adpcm_mainexit_267_reg <= main_adpcm_mainexit_267;
		if (start == 1'b0 && ^(main_adpcm_mainexit_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %268 = load i32* %scevgep3, align 4, !tbaa !1*/
		main_adpcm_mainexit_268 = test_compressed_out_a;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %268 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_135)) begin
		main_adpcm_mainexit_268_reg <= main_adpcm_mainexit_268;
		if (start == 1'b0 && ^(main_adpcm_mainexit_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %269 = icmp eq i32 %267, %268*/
		main_adpcm_mainexit_269 = (main_adpcm_mainexit_267 == main_adpcm_mainexit_268);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %269 = icmp eq i32 %267, %268*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_135)) begin
		main_adpcm_mainexit_269_reg <= main_adpcm_mainexit_269;
		if (start == 1'b0 && ^(main_adpcm_mainexit_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %270 = zext i1 %269 to i32*/
		main_adpcm_mainexit_270 = main_adpcm_mainexit_269;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %270 = zext i1 %269 to i32*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_135)) begin
		main_adpcm_mainexit_270_reg <= main_adpcm_mainexit_270;
		if (start == 1'b0 && ^(main_adpcm_mainexit_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %270, %main_result.04*/
		main_adpcm_mainexit_main_result0 = (main_adpcm_mainexit_270 + main_adpcm_mainexit_main_result04_reg);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %270, %main_result.04*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_135)) begin
		main_adpcm_mainexit_main_result0_reg <= main_adpcm_mainexit_main_result0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %271 = add nsw i32 %i.03, 1*/
		main_adpcm_mainexit_271 = (main_adpcm_mainexit_i03_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %271 = add nsw i32 %i.03, 1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_134)) begin
		main_adpcm_mainexit_271_reg <= main_adpcm_mainexit_271;
		if (start == 1'b0 && ^(main_adpcm_mainexit_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %271, 50*/
		main_adpcm_mainexit_exitcond = (main_adpcm_mainexit_271 == 32'd50);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %271, 50*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_134)) begin
		main_adpcm_mainexit_exitcond_reg <= main_adpcm_mainexit_exitcond;
		if (start == 1'b0 && ^(main_adpcm_mainexit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_136) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22 = main_adpcm_mainexit_main_result0_reg;
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader_138) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg == 1'd0))) */ begin
		main_preheader_main_result22 = main_preheader_main_result2;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_136) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result22_reg <= main_preheader_main_result22;
		if (start == 1'b0 && ^(main_preheader_main_result22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_138) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg == 1'd0))) begin
		main_preheader_main_result22_reg <= main_preheader_main_result22;
		if (start == 1'b0 && ^(main_preheader_main_result22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %276, %.preheader ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_136) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %276, %.preheader ], [ 0, %.preheader.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader_138) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg == 1'd0))) */ begin
		main_preheader_i11 = main_preheader_276_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %276, %.preheader ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_136) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i11_reg <= main_preheader_i11;
		if (start == 1'b0 && ^(main_preheader_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %276, %.preheader ], [ 0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_138) & (memory_controller_waitrequest == 1'd0)) & (main_preheader_exitcond1_reg == 1'd0))) begin
		main_preheader_i11_reg <= main_preheader_i11;
		if (start == 1'b0 && ^(main_preheader_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %i.11*/
		main_preheader_scevgep = (1'd0 | (4 * main_preheader_i11_reg));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %i.11*/
	if ((cur_state == LEGUP_F_main_BB_preheader_137)) begin
		main_preheader_scevgep_reg <= main_preheader_scevgep;
		if (start == 1'b0 && ^(main_preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %scevgep2 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11*/
		main_preheader_scevgep2 = (1'd0 | (4 * main_preheader_i11_reg));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %scevgep2 = getelementptr [100 x i32]* @result, i32 0, i32 %i.11*/
	if ((cur_state == LEGUP_F_main_BB_preheader_137)) begin
		main_preheader_scevgep2_reg <= main_preheader_scevgep2;
		if (start == 1'b0 && ^(main_preheader_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %272 = load i32* %scevgep2, align 4, !tbaa !1*/
		main_preheader_272 = result_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %272 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_138)) begin
		main_preheader_272_reg <= main_preheader_272;
		if (start == 1'b0 && ^(main_preheader_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %273 = load i32* %scevgep, align 4, !tbaa !1*/
		main_preheader_273 = test_result_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %273 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_138)) begin
		main_preheader_273_reg <= main_preheader_273;
		if (start == 1'b0 && ^(main_preheader_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %274 = icmp eq i32 %272, %273*/
		main_preheader_274 = (main_preheader_272 == main_preheader_273);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %274 = icmp eq i32 %272, %273*/
	if ((cur_state == LEGUP_F_main_BB_preheader_138)) begin
		main_preheader_274_reg <= main_preheader_274;
		if (start == 1'b0 && ^(main_preheader_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %275 = zext i1 %274 to i32*/
		main_preheader_275 = main_preheader_274;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %275 = zext i1 %274 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_138)) begin
		main_preheader_275_reg <= main_preheader_275;
		if (start == 1'b0 && ^(main_preheader_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %275, %main_result.22*/
		main_preheader_main_result2 = (main_preheader_275 + main_preheader_main_result22_reg);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %275, %main_result.22*/
	if ((cur_state == LEGUP_F_main_BB_preheader_138)) begin
		main_preheader_main_result2_reg <= main_preheader_main_result2;
		if (start == 1'b0 && ^(main_preheader_main_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %276 = add nsw i32 %i.11, 1*/
		main_preheader_276 = (main_preheader_i11_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %276 = add nsw i32 %i.11, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_137)) begin
		main_preheader_276_reg <= main_preheader_276;
		if (start == 1'b0 && ^(main_preheader_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %276, 100*/
		main_preheader_exitcond1 = (main_preheader_276 == 32'd100);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %exitcond1 = icmp eq i32 %276, 100*/
	if ((cur_state == LEGUP_F_main_BB_preheader_137)) begin
		main_preheader_exitcond1_reg <= main_preheader_exitcond1;
		if (start == 1'b0 && ^(main_preheader_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %279 = icmp eq i32 %.main_result.2, 150*/
		main_277_279 = (main_preheader_main_result2_reg == 32'd150);
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %279 = icmp eq i32 %.main_result.2, 150*/
	if ((cur_state == LEGUP_F_main_BB__277_139)) begin
		main_277_279_reg <= main_277_279;
		if (start == 1'b0 && ^(main_277_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_279_reg"); $finish; end
	end
end
always @(*) begin
	qq6_code6_table_address_a = 1'd0;
	/* main: %58*/
	/*   %100 = load i32* %99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_85)) begin
		qq6_code6_table_address_a = (main_58_99 >>> 3'd2);
	end
end
always @(*) begin
	qq6_code6_table_write_enable_a = 1'd0;
	/* main: %58*/
	/*   %100 = load i32* %99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_85)) begin
		qq6_code6_table_write_enable_a = 1'd0;
	end
end
always @(*) begin
	test_data_address_a = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		test_data_address_a = (main_legup_memset_4_i64exit_scevgep34 >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_54)) begin
		test_data_address_a = (main_legup_memset_4_i64exit_scevgep31_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_57)) begin
		test_data_address_a = (main_legup_memset_4_i64exit_scevgep28_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_60)) begin
		test_data_address_a = (main_legup_memset_4_i64exit_scevgep25_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_63)) begin
		test_data_address_a = (main_legup_memset_4_i64exit_scevgep22_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_66)) begin
		test_data_address_a = (main_legup_memset_4_i64exit_scevgep19_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_69)) begin
		test_data_address_a = (main_legup_memset_4_i64exit_scevgep16_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = load i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_72)) begin
		test_data_address_a = (main_legup_memset_4_i64exit_scevgep13_reg >>> 3'd2);
	end
end
always @(*) begin
	test_data_write_enable_a = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %34 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %37 = load i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_54)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %40 = load i32* %scevgep28, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_57)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %43 = load i32* %scevgep25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_60)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %46 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_63)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %49 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_66)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %52 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_69)) begin
		test_data_write_enable_a = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %55 = load i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_72)) begin
		test_data_write_enable_a = 1'd0;
	end
end
always @(*) begin
	test_data_address_b = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		test_data_address_b = (main_legup_memset_4_i64exit_scevgep33 >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %38 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_54)) begin
		test_data_address_b = (main_legup_memset_4_i64exit_scevgep30_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_57)) begin
		test_data_address_b = (main_legup_memset_4_i64exit_scevgep27_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_60)) begin
		test_data_address_b = (main_legup_memset_4_i64exit_scevgep24_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_63)) begin
		test_data_address_b = (main_legup_memset_4_i64exit_scevgep21_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_66)) begin
		test_data_address_b = (main_legup_memset_4_i64exit_scevgep18_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_69)) begin
		test_data_address_b = (main_legup_memset_4_i64exit_scevgep15_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_72)) begin
		test_data_address_b = (main_legup_memset_4_i64exit_scevgep12_reg >>> 3'd2);
	end
end
always @(*) begin
	test_data_write_enable_b = 1'd0;
	/* main: %legup_memset_4_i64.exit*/
	/*   %35 = load i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_51)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %38 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_54)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %41 = load i32* %scevgep27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_57)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %44 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_60)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %47 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_63)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %50 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_66)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %53 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_69)) begin
		test_data_write_enable_b = 1'd0;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %56 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_72)) begin
		test_data_write_enable_b = 1'd0;
	end
end
always @(*) begin
	test_compressed_address_a = 1'd0;
	/* main: %adpcm_main.exit*/
	/*   %268 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_134)) begin
		test_compressed_address_a = (main_adpcm_mainexit_scevgep3 >>> 3'd2);
	end
end
always @(*) begin
	test_compressed_write_enable_a = 1'd0;
	/* main: %adpcm_main.exit*/
	/*   %268 = load i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_134)) begin
		test_compressed_write_enable_a = 1'd0;
	end
end
always @(*) begin
	test_result_address_a = 1'd0;
	/* main: %.preheader*/
	/*   %273 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_137)) begin
		test_result_address_a = (main_preheader_scevgep >>> 3'd2);
	end
end
always @(*) begin
	test_result_write_enable_a = 1'd0;
	/* main: %.preheader*/
	/*   %273 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_137)) begin
		test_result_write_enable_a = 1'd0;
	end
end
always @(*) begin
	compressed_address_a = 1'd0;
	/* main: %.preheader2.i*/
	/*   store i32 %6, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 96), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_40)) begin
		compressed_address_a = ((1'd0 | (4 * 32'd96)) >>> 3'd2);
	end
	/* main: %.preheader2.i*/
	/*   store i32 %7, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 97), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_43)) begin
		compressed_address_a = ((1'd0 | (4 * 32'd97)) >>> 3'd2);
	end
	/* main: %.preheader2.i*/
	/*   store i32 %8, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 98), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_46)) begin
		compressed_address_a = ((1'd0 | (4 * 32'd98)) >>> 3'd2);
	end
	/* main: %.preheader2.i*/
	/*   store i32 %9, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 99), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_49)) begin
		compressed_address_a = ((1'd0 | (4 * 32'd99)) >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %36, i32* %scevgep32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_54)) begin
		compressed_address_a = (main_legup_memset_4_i64exit_scevgep32_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %39, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_57)) begin
		compressed_address_a = (main_legup_memset_4_i64exit_scevgep29_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %42, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_60)) begin
		compressed_address_a = (main_legup_memset_4_i64exit_scevgep26_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %45, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_63)) begin
		compressed_address_a = (main_legup_memset_4_i64exit_scevgep23_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %48, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_66)) begin
		compressed_address_a = (main_legup_memset_4_i64exit_scevgep20_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %51, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_69)) begin
		compressed_address_a = (main_legup_memset_4_i64exit_scevgep17_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %54, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_72)) begin
		compressed_address_a = (main_legup_memset_4_i64exit_scevgep14_reg >>> 3'd2);
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %57, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_75)) begin
		compressed_address_a = (main_legup_memset_4_i64exit_scevgep11_reg >>> 3'd2);
	end
	/* main: %58*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_109)) begin
		compressed_address_a = (main_58_61 >>> 3'd2);
	end
	/* main: %adpcm_main.exit*/
	/*   %267 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_134)) begin
		compressed_address_a = (main_adpcm_mainexit_scevgep4 >>> 3'd2);
	end
end
always @(*) begin
	compressed_write_enable_a = 1'd0;
	/* main: %.preheader2.i*/
	/*   store i32 %6, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 96), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_40)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %.preheader2.i*/
	/*   store i32 %7, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 97), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_43)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %.preheader2.i*/
	/*   store i32 %8, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 98), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_46)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %.preheader2.i*/
	/*   store i32 %9, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 99), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_49)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %36, i32* %scevgep32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_54)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %39, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_57)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %42, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_60)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %45, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_63)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %48, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_66)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %51, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_69)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %54, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_72)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %57, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_75)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %62 = load i32* %61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_109)) begin
		compressed_write_enable_a = 1'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %267 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_134)) begin
		compressed_write_enable_a = 1'd0;
	end
end
always @(*) begin
	compressed_in_a = 1'd0;
	/* main: %.preheader2.i*/
	/*   store i32 %6, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 96), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_40)) begin
		compressed_in_a = main_preheader2i_6_reg;
	end
	/* main: %.preheader2.i*/
	/*   store i32 %7, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 97), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_43)) begin
		compressed_in_a = main_preheader2i_7_reg;
	end
	/* main: %.preheader2.i*/
	/*   store i32 %8, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 98), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_46)) begin
		compressed_in_a = main_preheader2i_8_reg;
	end
	/* main: %.preheader2.i*/
	/*   store i32 %9, i32* getelementptr inbounds ([100 x i32]* @compressed, i32 0, i32 99), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_49)) begin
		compressed_in_a = main_preheader2i_9_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %36, i32* %scevgep32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_54)) begin
		compressed_in_a = main_legup_memset_4_i64exit_36_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %39, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_57)) begin
		compressed_in_a = main_legup_memset_4_i64exit_39_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %42, i32* %scevgep26, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_60)) begin
		compressed_in_a = main_legup_memset_4_i64exit_42_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %45, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_63)) begin
		compressed_in_a = main_legup_memset_4_i64exit_45_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %48, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_66)) begin
		compressed_in_a = main_legup_memset_4_i64exit_48_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %51, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_69)) begin
		compressed_in_a = main_legup_memset_4_i64exit_51_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %54, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_72)) begin
		compressed_in_a = main_legup_memset_4_i64exit_54_reg;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   store i32 %57, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_75)) begin
		compressed_in_a = main_legup_memset_4_i64exit_57_reg;
	end
end
always @(*) begin
	result_address_a = 1'd0;
	/* main: %58*/
	/*   store i32 %265, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		result_address_a = (main_58_scevgep7_reg >>> 3'd2);
	end
	/* main: %.preheader*/
	/*   %272 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_137)) begin
		result_address_a = (main_preheader_scevgep2 >>> 3'd2);
	end
end
always @(*) begin
	result_write_enable_a = 1'd0;
	/* main: %58*/
	/*   store i32 %265, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		result_write_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %272 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_137)) begin
		result_write_enable_a = 1'd0;
	end
end
always @(*) begin
	result_in_a = 1'd0;
	/* main: %58*/
	/*   store i32 %265, i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		result_in_a = main_58_265;
	end
end
always @(*) begin
	result_address_b = 1'd0;
	/* main: %58*/
	/*   store i32 %266, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		result_address_b = (main_58_scevgep6_reg >>> 3'd2);
	end
end
always @(*) begin
	result_write_enable_b = 1'd0;
	/* main: %58*/
	/*   store i32 %266, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		result_write_enable_b = 1'd1;
	end
end
always @(*) begin
	result_in_b = 1'd0;
	/* main: %58*/
	/*   store i32 %266, i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_131)) begin
		result_in_b = main_58_266;
	end
end
always @(posedge clk) begin
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_38)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_39)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_41)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_42)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_44)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_45)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_47)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_48)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_52)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_53)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_55)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_56)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_58)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_59)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_61)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_62)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_64)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_65)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_67)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_68)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_70)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_71)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_73)) begin
		encode_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_74)) begin
		encode_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_38)) begin
		encode_arg_xin1 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_41)) begin
		encode_arg_xin1 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_44)) begin
		encode_arg_xin1 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_47)) begin
		encode_arg_xin1 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_52)) begin
		encode_arg_xin1 <= main_legup_memset_4_i64exit_34;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_55)) begin
		encode_arg_xin1 <= main_legup_memset_4_i64exit_37;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_58)) begin
		encode_arg_xin1 <= main_legup_memset_4_i64exit_40;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_61)) begin
		encode_arg_xin1 <= main_legup_memset_4_i64exit_43;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_64)) begin
		encode_arg_xin1 <= main_legup_memset_4_i64exit_46;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_67)) begin
		encode_arg_xin1 <= main_legup_memset_4_i64exit_49;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_70)) begin
		encode_arg_xin1 <= main_legup_memset_4_i64exit_52;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_73)) begin
		encode_arg_xin1 <= main_legup_memset_4_i64exit_55;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin1"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_38)) begin
		encode_arg_xin2 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_41)) begin
		encode_arg_xin2 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_44)) begin
		encode_arg_xin2 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i_47)) begin
		encode_arg_xin2 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_52)) begin
		encode_arg_xin2 <= main_legup_memset_4_i64exit_35;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_55)) begin
		encode_arg_xin2 <= main_legup_memset_4_i64exit_38;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_58)) begin
		encode_arg_xin2 <= main_legup_memset_4_i64exit_41;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_61)) begin
		encode_arg_xin2 <= main_legup_memset_4_i64exit_44;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_64)) begin
		encode_arg_xin2 <= main_legup_memset_4_i64exit_47;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_67)) begin
		encode_arg_xin2 <= main_legup_memset_4_i64exit_50;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_70)) begin
		encode_arg_xin2 <= main_legup_memset_4_i64exit_53;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_73)) begin
		encode_arg_xin2 <= main_legup_memset_4_i64exit_56;
		if (start == 1'b0 && ^(main_legup_memset_4_i64exit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_arg_xin2"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	else if ((cur_state == LEGUP_function_call_42)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	else if ((cur_state == LEGUP_function_call_45)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	else if ((cur_state == LEGUP_function_call_48)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	else if ((cur_state == LEGUP_function_call_53)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	else if ((cur_state == LEGUP_function_call_56)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	else if ((cur_state == LEGUP_function_call_59)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	else if ((cur_state == LEGUP_function_call_62)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	else if ((cur_state == LEGUP_function_call_65)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	else if ((cur_state == LEGUP_function_call_68)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	else if ((cur_state == LEGUP_function_call_71)) begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	else /* if ((cur_state == LEGUP_function_call_74)) */ begin
		encode_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	else if ((cur_state == LEGUP_function_call_42)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	else if ((cur_state == LEGUP_function_call_45)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	else if ((cur_state == LEGUP_function_call_48)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	else if ((cur_state == LEGUP_function_call_53)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	else if ((cur_state == LEGUP_function_call_56)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	else if ((cur_state == LEGUP_function_call_59)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	else if ((cur_state == LEGUP_function_call_62)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	else if ((cur_state == LEGUP_function_call_65)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	else if ((cur_state == LEGUP_function_call_68)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	else if ((cur_state == LEGUP_function_call_71)) begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	else /* if ((cur_state == LEGUP_function_call_74)) */ begin
		encode_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	encode_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	encode_finish_final = encode_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_preheader2i_38))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheader2i_41))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheader2i_44))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheader2i_47))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_52))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_55))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_58))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_61))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_64))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_67))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_70))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_73))) begin
		encode_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_preheader2i_38))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheader2i_41))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheader2i_44))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheader2i_47))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_52))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_55))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_58))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_61))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_64))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_67))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_70))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_legup_memset_4_i64exit_73))) begin
		encode_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
	if (encode_finish) begin
		encode_return_val_reg <= encode_return_val;
		if (start == 1'b0 && ^(encode_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		legup_function_call = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		legup_function_call = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		legup_function_call = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		legup_function_call = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		legup_function_call = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		legup_function_call = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		legup_function_call = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		legup_function_call = 1'd1;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		legup_function_call = 1'd1;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		legup_function_call = 1'd1;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_116)) begin
		upzero_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_129)) begin
		upzero_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		upzero_arg_dlt <= main_58_97_reg;
		if (start == 1'b0 && ^(main_58_97_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		upzero_arg_dlt <= main_58_176_reg;
		if (start == 1'b0 && ^(main_58_176_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		upzero_arg_dlti <= `TAG_g_dec_del_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		upzero_arg_dlti <= `TAG_g_dec_del_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__58_115)) begin
		upzero_arg_bli <= `TAG_g_dec_del_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__58_128)) begin
		upzero_arg_bli <= `TAG_g_dec_del_bph_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		upzero_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else /* if ((cur_state == LEGUP_function_call_129)) */ begin
		upzero_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		upzero_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	else /* if ((cur_state == LEGUP_function_call_129)) */ begin
		upzero_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	upzero_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	upzero_finish_final = upzero_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__58_115))) begin
		upzero_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__58_128))) begin
		upzero_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %60 = sdiv i32 %i.03.i, 2*/
		main_signed_divide_32_0_op0 = main_58_i03i;
end
always @(*) begin
	/* main: %58*/
	/*   %60 = sdiv i32 %i.03.i, 2*/
if (reset) begin main_signed_divide_32_0_op1 = 0; end
		main_signed_divide_32_0_op1 = 32'd2;
end
always @(*) begin
	lpm_divide_main_58_60_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_58_60_out = lpm_divide_main_58_60_temp_out;
end
always @(*) begin
	main_signed_divide_32_0 = lpm_divide_main_58_60_out;
end
always @(*) begin
	lpm_mult_main_58_88_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %88 = mul i32 %dec_al1.0, %dec_rlt1.0*/
	if ((lpm_mult_main_58_88_en == 1'd1)) begin
		main_58_88_stage0_reg <= (main_58_dec_al10_reg * main_58_dec_rlt10_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_89_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %89 = mul i32 %dec_al2.0, %dec_rlt2.0*/
	if ((lpm_mult_main_58_89_en == 1'd1)) begin
		main_58_89_stage0_reg <= (main_58_dec_al20_reg * main_58_dec_rlt20_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_104_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %104 = mul nsw i32 %dec_nbl.0, 127*/
	if ((lpm_mult_main_58_104_en == 1'd1)) begin
		main_58_104_stage0_reg <= (main_58_dec_nbl0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_58_129_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %129 = mul nsw i32 %dec_al2.0, 127*/
	if ((lpm_mult_main_58_129_en == 1'd1)) begin
		main_58_129_stage0_reg <= (main_58_dec_al20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_58_134_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %134 = mul nsw i32 %dec_al1.0, 255*/
	if ((lpm_mult_main_58_134_en == 1'd1)) begin
		main_58_134_stage0_reg <= (main_58_dec_al10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_58_168_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %168 = mul i32 %dec_ah1.0, %dec_rh1.0*/
	if ((lpm_mult_main_58_168_en == 1'd1)) begin
		main_58_168_stage0_reg <= (main_58_dec_ah10_reg * main_58_dec_rh10_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_169_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %169 = mul i32 %dec_ah2.0, %dec_rh2.0*/
	if ((lpm_mult_main_58_169_en == 1'd1)) begin
		main_58_169_stage0_reg <= (main_58_dec_ah20_reg * main_58_dec_rh20_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_177_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %177 = mul nsw i32 %dec_nbh.0, 127*/
	if ((lpm_mult_main_58_177_en == 1'd1)) begin
		main_58_177_stage0_reg <= (main_58_dec_nbh0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_58_202_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %202 = mul nsw i32 %dec_ah2.0, 127*/
	if ((lpm_mult_main_58_202_en == 1'd1)) begin
		main_58_202_stage0_reg <= (main_58_dec_ah20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_58_207_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %207 = mul nsw i32 %dec_ah1.0, 255*/
	if ((lpm_mult_main_58_207_en == 1'd1)) begin
		main_58_207_stage0_reg <= (main_58_dec_ah10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_58_221_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %221 = mul nsw i32 %accumc.0.0, -44*/
	if ((lpm_mult_main_58_221_en == 1'd1)) begin
		main_58_221_stage0_reg <= (main_58_accumc00_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_58_223_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %223 = mul nsw i32 %accumd.0.0, 212*/
	if ((lpm_mult_main_58_223_en == 1'd1)) begin
		main_58_223_stage0_reg <= (main_58_accumd00_reg * 32'd212);
	end
end
always @(*) begin
	lpm_mult_main_58_225_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %225 = mul nsw i32 %accumc.1.0, 48*/
	if ((lpm_mult_main_58_225_en == 1'd1)) begin
		main_58_225_stage0_reg <= (main_58_accumc10_reg * 32'd48);
	end
end
always @(*) begin
	lpm_mult_main_58_227_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %227 = mul nsw i32 %accumd.1.0, -624*/
	if ((lpm_mult_main_58_227_en == 1'd1)) begin
		main_58_227_stage0_reg <= (main_58_accumd10_reg * -32'd624);
	end
end
always @(*) begin
	lpm_mult_main_58_231_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %231 = mul nsw i32 %accumd.2.0, 1448*/
	if ((lpm_mult_main_58_231_en == 1'd1)) begin
		main_58_231_stage0_reg <= (main_58_accumd20_reg * 32'd1448);
	end
end
always @(*) begin
	lpm_mult_main_58_233_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %233 = mul nsw i32 %accumc.3.0, -840*/
	if ((lpm_mult_main_58_233_en == 1'd1)) begin
		main_58_233_stage0_reg <= (main_58_accumc30_reg * -32'd840);
	end
end
always @(*) begin
	lpm_mult_main_58_235_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %235 = mul nsw i32 %accumd.3.0, -3220*/
	if ((lpm_mult_main_58_235_en == 1'd1)) begin
		main_58_235_stage0_reg <= (main_58_accumd30_reg * -32'd3220);
	end
end
always @(*) begin
	lpm_mult_main_58_237_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %237 = mul nsw i32 %accumc.4.0, 3804*/
	if ((lpm_mult_main_58_237_en == 1'd1)) begin
		main_58_237_stage0_reg <= (main_58_accumc40_reg * 32'd3804);
	end
end
always @(*) begin
	lpm_mult_main_58_239_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %239 = mul nsw i32 %accumd.4.0, 15504*/
	if ((lpm_mult_main_58_239_en == 1'd1)) begin
		main_58_239_stage0_reg <= (main_58_accumd40_reg * 32'd15504);
	end
end
always @(*) begin
	lpm_mult_main_58_241_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %241 = mul nsw i32 %accumc.5.0, 15504*/
	if ((lpm_mult_main_58_241_en == 1'd1)) begin
		main_58_241_stage0_reg <= (main_58_accumc50_reg * 32'd15504);
	end
end
always @(*) begin
	lpm_mult_main_58_243_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %243 = mul nsw i32 %accumd.5.0, 3804*/
	if ((lpm_mult_main_58_243_en == 1'd1)) begin
		main_58_243_stage0_reg <= (main_58_accumd50_reg * 32'd3804);
	end
end
always @(*) begin
	lpm_mult_main_58_245_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %245 = mul nsw i32 %accumc.6.0, -3220*/
	if ((lpm_mult_main_58_245_en == 1'd1)) begin
		main_58_245_stage0_reg <= (main_58_accumc60_reg * -32'd3220);
	end
end
always @(*) begin
	lpm_mult_main_58_247_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %247 = mul nsw i32 %accumd.6.0, -840*/
	if ((lpm_mult_main_58_247_en == 1'd1)) begin
		main_58_247_stage0_reg <= (main_58_accumd60_reg * -32'd840);
	end
end
always @(*) begin
	lpm_mult_main_58_249_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %249 = mul nsw i32 %accumc.7.0, 1448*/
	if ((lpm_mult_main_58_249_en == 1'd1)) begin
		main_58_249_stage0_reg <= (main_58_accumc70_reg * 32'd1448);
	end
end
always @(*) begin
	lpm_mult_main_58_253_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %253 = mul nsw i32 %accumc.8.0, -624*/
	if ((lpm_mult_main_58_253_en == 1'd1)) begin
		main_58_253_stage0_reg <= (main_58_accumc80_reg * -32'd624);
	end
end
always @(*) begin
	lpm_mult_main_58_255_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %255 = mul nsw i32 %accumd.8.0, 48*/
	if ((lpm_mult_main_58_255_en == 1'd1)) begin
		main_58_255_stage0_reg <= (main_58_accumd80_reg * 32'd48);
	end
end
always @(*) begin
	lpm_mult_main_58_257_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %257 = mul nsw i32 %accumc.9.0, 212*/
	if ((lpm_mult_main_58_257_en == 1'd1)) begin
		main_58_257_stage0_reg <= (main_58_accumc90_reg * 32'd212);
	end
end
always @(*) begin
	lpm_mult_main_58_259_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %259 = mul nsw i32 %accumd.9.0, -44*/
	if ((lpm_mult_main_58_259_en == 1'd1)) begin
		main_58_259_stage0_reg <= (main_58_accumd90_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_58_261_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %261 = mul nsw i32 %accumc.10.0, -44*/
	if ((lpm_mult_main_58_261_en == 1'd1)) begin
		main_58_261_stage0_reg <= (main_58_accumc100_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_58_263_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %263 = mul nsw i32 %accumd.10.0, 12*/
	if ((lpm_mult_main_58_263_en == 1'd1)) begin
		main_58_263_stage0_reg <= (main_58_accumd100_reg * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_58_66_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %66 = mul nsw i32 %65, %64*/
	if ((lpm_mult_main_58_66_en == 1'd1)) begin
		main_58_66_stage0_reg <= (main_58_65 * main_58_64);
	end
end
always @(*) begin
	lpm_mult_main_58_69_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %69 = mul nsw i32 %68, %67*/
	if ((lpm_mult_main_58_69_en == 1'd1)) begin
		main_58_69_stage0_reg <= (main_58_68 * main_58_67);
	end
end
always @(*) begin
	lpm_mult_main_58_73_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %73 = mul nsw i32 %72, %71*/
	if ((lpm_mult_main_58_73_en == 1'd1)) begin
		main_58_73_stage0_reg <= (main_58_72 * main_58_71);
	end
end
always @(*) begin
	lpm_mult_main_58_77_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %77 = mul nsw i32 %76, %75*/
	if ((lpm_mult_main_58_77_en == 1'd1)) begin
		main_58_77_stage0_reg <= (main_58_76 * main_58_75);
	end
end
always @(*) begin
	lpm_mult_main_58_81_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %81 = mul nsw i32 %80, %79*/
	if ((lpm_mult_main_58_81_en == 1'd1)) begin
		main_58_81_stage0_reg <= (main_58_80 * main_58_79);
	end
end
always @(*) begin
	lpm_mult_main_58_85_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %85 = mul nsw i32 %84, %83*/
	if ((lpm_mult_main_58_85_en == 1'd1)) begin
		main_58_85_stage0_reg <= (main_58_84 * main_58_83);
	end
end
always @(*) begin
	lpm_mult_main_58_101_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %101 = mul nsw i32 %100, %dec_detl.0*/
	if ((lpm_mult_main_58_101_en == 1'd1)) begin
		main_58_101_stage0_reg <= (main_58_100 * main_58_dec_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_96_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %96 = mul nsw i32 %95, %dec_detl.0*/
	if ((lpm_mult_main_58_96_en == 1'd1)) begin
		main_58_96_stage0_reg <= (main_58_95 * main_58_dec_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_121_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %121 = mul nsw i32 %dec_plt1.0, %119*/
	if ((lpm_mult_main_58_121_en == 1'd1)) begin
		main_58_121_stage0_reg <= (main_58_dec_plt10_reg * main_58_119);
	end
end
always @(*) begin
	lpm_mult_main_58_125_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %125 = mul nsw i32 %dec_plt2.0, %119*/
	if ((lpm_mult_main_58_125_en == 1'd1)) begin
		main_58_125_stage0_reg <= (main_58_dec_plt20_reg * main_58_119);
	end
end
always @(*) begin
	lpm_mult_main_58_146_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %146 = mul nsw i32 %145, %144*/
	if ((lpm_mult_main_58_146_en == 1'd1)) begin
		main_58_146_stage0_reg <= (main_58_145 * main_58_144_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_149_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %149 = mul nsw i32 %148, %147*/
	if ((lpm_mult_main_58_149_en == 1'd1)) begin
		main_58_149_stage0_reg <= (main_58_148 * main_58_147_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_153_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %153 = mul nsw i32 %152, %151*/
	if ((lpm_mult_main_58_153_en == 1'd1)) begin
		main_58_153_stage0_reg <= (main_58_152 * main_58_151_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_157_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %157 = mul nsw i32 %156, %155*/
	if ((lpm_mult_main_58_157_en == 1'd1)) begin
		main_58_157_stage0_reg <= (main_58_156 * main_58_155_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_161_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %161 = mul nsw i32 %160, %159*/
	if ((lpm_mult_main_58_161_en == 1'd1)) begin
		main_58_161_stage0_reg <= (main_58_160 * main_58_159_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_175_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %175 = mul nsw i32 %174, %dec_deth.0*/
	if ((lpm_mult_main_58_175_en == 1'd1)) begin
		main_58_175_stage0_reg <= (main_58_174 * main_58_dec_deth0_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_165_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %165 = mul nsw i32 %164, %163*/
	if ((lpm_mult_main_58_165_en == 1'd1)) begin
		main_58_165_stage0_reg <= (main_58_164 * main_58_163_reg);
	end
end
always @(*) begin
	lpm_mult_main_58_194_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %194 = mul nsw i32 %dec_ph1.0, %192*/
	if ((lpm_mult_main_58_194_en == 1'd1)) begin
		main_58_194_stage0_reg <= (main_58_dec_ph10_reg * main_58_192);
	end
end
always @(*) begin
	lpm_mult_main_58_198_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %198 = mul nsw i32 %dec_ph2.0, %192*/
	if ((lpm_mult_main_58_198_en == 1'd1)) begin
		main_58_198_stage0_reg <= (main_58_dec_ph20_reg * main_58_192);
	end
end
always @(*) begin
	lpm_mult_main_58_219_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %219 = mul nsw i32 %217, 12*/
	if ((lpm_mult_main_58_219_en == 1'd1)) begin
		main_58_219_stage0_reg <= (main_58_217 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_58_220_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %220 = mul nsw i32 %218, -44*/
	if ((lpm_mult_main_58_220_en == 1'd1)) begin
		main_58_220_stage0_reg <= (main_58_218 * -32'd44);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %284*/
	/*   ret i32 %.main_result.2*/
	if ((cur_state == LEGUP_F_main_BB__284_142)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_enable_a = encode_memory_controller_enable_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_enable_a = upzero_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %64 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %67 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %71 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_79)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %75 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_80)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %79 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %95 = load i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %115 = load i32* %114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_113)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %147 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_119)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %145 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_120)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %148 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %152 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_122)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %156 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_123)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_125)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %188 = load i32* %187, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_126)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_detl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = `TAG_g_rlt2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_a = `TAG_g_plt2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_a = `TAG_g_al2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_a = `TAG_g_nbl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_a = `TAG_g_rh1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = `TAG_g_ph1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_a = `TAG_g_ah1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_a = `TAG_g_delay_dltx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_a = `TAG_g_dec_del_dltx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_address_a = `TAG_g_dec_del_bpl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_26)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_27)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_28)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_29)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_30)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_31)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_32)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd5));
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_36)) begin
		memory_controller_address_a = main_2_si0;
	end
	/* main: %58*/
	/*   %64 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		memory_controller_address_a = `TAG_g_dec_del_bpl_a;
	end
	/* main: %58*/
	/*   %67 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd1));
	end
	/* main: %58*/
	/*   %71 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_79)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd2));
	end
	/* main: %58*/
	/*   %75 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_80)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd3));
	end
	/* main: %58*/
	/*   %79 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd4));
	end
	/* main: %58*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd5));
	end
	/* main: %58*/
	/*   %95 = load i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		memory_controller_address_a = main_58_94;
	end
	/* main: %58*/
	/*   %115 = load i32* %114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_113)) begin
		memory_controller_address_a = main_58_114;
	end
	/* main: %58*/
	/*   %147 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_119)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd1));
	end
	/* main: %58*/
	/*   %145 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_120)) begin
		memory_controller_address_a = `TAG_g_dec_del_dhx_a;
	end
	/* main: %58*/
	/*   %148 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dhx_a | (4 * 32'd1));
	end
	/* main: %58*/
	/*   %152 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_122)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dhx_a | (4 * 32'd2));
	end
	/* main: %58*/
	/*   %156 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_123)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dhx_a | (4 * 32'd3));
	end
	/* main: %58*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dhx_a | (4 * 32'd4));
	end
	/* main: %58*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_125)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dhx_a | (4 * 32'd5));
	end
	/* main: %58*/
	/*   %188 = load i32* %187, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_126)) begin
		memory_controller_address_a = main_58_187_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_write_enable_a = encode_memory_controller_write_enable_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_write_enable_a = upzero_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_26)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_27)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_28)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_29)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_30)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_31)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_32)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_36)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %58*/
	/*   %64 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %67 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %71 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_79)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %75 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_80)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %79 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %95 = load i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %115 = load i32* %114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_113)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %147 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_119)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %145 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_120)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %148 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %152 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_122)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %156 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_123)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_125)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %188 = load i32* %187, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_126)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd32;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_26)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_27)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_28)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_29)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_30)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_31)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_32)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_36)) begin
		memory_controller_in_a = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_size_a[1:0] = encode_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_size_a[1:0] = upzero_memory_controller_size_a;
	end
	/* main: %0*/
	/*   store i32 32, i32* @detl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbl, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %64 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %67 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %71 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_79)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %75 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_80)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %79 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %83 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %95 = load i32* %94, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %115 = load i32* %114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_113)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %147 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_119)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %145 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_120)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %148 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %152 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_122)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %156 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_123)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %160 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %164 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_125)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %58*/
	/*   %188 = load i32* %187, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_126)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_enable_b = encode_memory_controller_enable_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_enable_b = upzero_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %65 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %68 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %72 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_79)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %76 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_80)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %80 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %84 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %98 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_83)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   store i32 %63, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_111)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %172 = load i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_117)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %144 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_118)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %180 = load i32* %179, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_119)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %151 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_120)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %155 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %159 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_122)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_123)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_memory_controller_address_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = upzero_memory_controller_address_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_deth_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_b = `TAG_g_rlt1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_b = `TAG_g_plt1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_b = `TAG_g_al1_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_b = `TAG_g_rh2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_b = `TAG_g_ph2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_b = `TAG_g_ah2_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_b = `TAG_g_nbh_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_b = `TAG_g_dec_del_dhx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_address_b = `TAG_g_delay_bph_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_address_b = `TAG_g_dec_del_bph_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_26)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_27)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_28)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_29)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_30)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_31)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_32)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd5));
	end
	/* main: %58*/
	/*   %65 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		memory_controller_address_b = `TAG_g_dec_del_dltx_a;
	end
	/* main: %58*/
	/*   %68 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd1));
	end
	/* main: %58*/
	/*   %72 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_79)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd2));
	end
	/* main: %58*/
	/*   %76 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_80)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd3));
	end
	/* main: %58*/
	/*   %80 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd4));
	end
	/* main: %58*/
	/*   %84 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd5));
	end
	/* main: %58*/
	/*   %98 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_83)) begin
		memory_controller_address_b = `TAG_g_il_a;
	end
	/* main: %58*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		memory_controller_address_b = main_58_106;
	end
	/* main: %58*/
	/*   store i32 %63, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_111)) begin
		memory_controller_address_b = `TAG_g_ih_a;
	end
	/* main: %58*/
	/*   %172 = load i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_117)) begin
		memory_controller_address_b = `TAG_g_ih_a;
	end
	/* main: %58*/
	/*   %144 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_118)) begin
		memory_controller_address_b = `TAG_g_dec_del_bph_a;
	end
	/* main: %58*/
	/*   %180 = load i32* %179, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_119)) begin
		memory_controller_address_b = main_58_179;
	end
	/* main: %58*/
	/*   %151 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_120)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd2));
	end
	/* main: %58*/
	/*   %155 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd3));
	end
	/* main: %58*/
	/*   %159 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_122)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd4));
	end
	/* main: %58*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_123)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd5));
	end
	/* main: %58*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		memory_controller_address_b = main_58_173_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_write_enable_b = encode_memory_controller_write_enable_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_write_enable_b = upzero_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_26)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_27)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_28)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_29)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_30)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_31)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_32)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %65 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %68 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %72 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_79)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %76 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_80)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %80 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %84 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %98 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_83)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   store i32 %63, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_111)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %58*/
	/*   %172 = load i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_117)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %144 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_118)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %180 = load i32* %179, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_119)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %151 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_120)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %155 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %159 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_122)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_123)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_memory_controller_in_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = upzero_memory_controller_in_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd8;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_26)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_27)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_28)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_29)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_30)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_31)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_32)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %58*/
	/*   store i32 %63, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_111)) begin
		memory_controller_in_b = main_58_63_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %.preheader2.i*/
	/*   %6 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %.preheader2.i*/
	/*   %7 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %.preheader2.i*/
	/*   %8 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %.preheader2.i*/
	/*   %9 = tail call fastcc i32 @encode(i32 undef, i32 undef) #1*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %36 = tail call fastcc i32 @encode(i32 %34, i32 %35) #1*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %39 = tail call fastcc i32 @encode(i32 %37, i32 %38) #1*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %42 = tail call fastcc i32 @encode(i32 %40, i32 %41) #1*/
	if ((cur_state == LEGUP_function_call_59)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %45 = tail call fastcc i32 @encode(i32 %43, i32 %44) #1*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %48 = tail call fastcc i32 @encode(i32 %46, i32 %47) #1*/
	if ((cur_state == LEGUP_function_call_65)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %51 = tail call fastcc i32 @encode(i32 %49, i32 %50) #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %54 = tail call fastcc i32 @encode(i32 %52, i32 %53) #1*/
	if ((cur_state == LEGUP_function_call_71)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	/* main: %legup_memset_4_i64.exit*/
	/*   %57 = tail call fastcc i32 @encode(i32 %55, i32 %56) #1*/
	if ((cur_state == LEGUP_function_call_74)) begin
		memory_controller_size_b[1:0] = encode_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %97, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_116)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %58*/
	/*   tail call fastcc void @upzero(i32 %176, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_size_b[1:0] = upzero_memory_controller_size_b;
	end
	/* main: %0*/
	/*   store i32 8, i32* @deth, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rlt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @plt1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @al1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @rh2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ph2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ah2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @nbh, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_26)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %65 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_77)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %68 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_78)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %72 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_79)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %76 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_80)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %80 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_81)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %84 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_82)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %98 = load i32* @il, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_83)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_110)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   store i32 %63, i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_111)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %172 = load i32* @ih, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_117)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %144 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_118)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %180 = load i32* %179, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_119)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %151 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_120)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %155 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_121)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %159 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_122)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %163 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_123)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %58*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_124)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %284*/
	/*   ret i32 %.main_result.2*/
	if ((cur_state == LEGUP_F_main_BB__284_142)) begin
		return_val <= main_preheader_main_result2_reg;
		if (start == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
