--abs_divider DEN_REPRESENTATION="SIGNED" LPM_PIPELINE=32 MAXIMIZE_SPEED=5 NUM_REPRESENTATION="SIGNED" SKIP_BITS=0 WIDTH_D=32 WIDTH_N=32 clk_en clock denominator numerator quotient remainder
--VERSION_BEGIN 15.0 cbx_cycloneii 2015:04:15:19:11:39:SJ cbx_lpm_abs 2015:04:15:19:11:39:SJ cbx_lpm_add_sub 2015:04:15:19:11:39:SJ cbx_lpm_divide 2015:04:15:19:11:39:SJ cbx_mgl 2015:04:15:20:18:26:SJ cbx_stratix 2015:04:15:19:11:39:SJ cbx_stratixii 2015:04:15:19:11:39:SJ cbx_util_mgl 2015:04:15:19:11:39:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION alt_u_div_5ag (clk_en, clock, denominator[31..0], numerator[31..0])
RETURNS ( quotient[31..0], remainder[31..0]);
FUNCTION lpm_abs_4p9 (data[31..0])
RETURNS ( overflow, result[31..0]);

--synthesis_resources = lut 688 reg 4160 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to DFF_diff_signs} POWER_UP_LEVEL=HIGH";

SUBDESIGN abs_divider_hkh
( 
	clk_en	:	input;
	clock	:	input;
	denominator[31..0]	:	input;
	numerator[31..0]	:	input;
	quotient[31..0]	:	output;
	remainder[31..0]	:	output;
) 
VARIABLE 
	divider : alt_u_div_5ag;
	DFF_diff_signs[31..0] : dffe
		WITH (
			power_up = "high"
		);
	DFF_num_sign[31..0] : dffe;
	my_abs_den : lpm_abs_4p9;
	my_abs_num : lpm_abs_4p9;
	compl_add_quot_result_int[32..0]	:	WIRE;
	compl_add_quot_cin	:	WIRE;
	compl_add_quot_dataa[31..0]	:	WIRE;
	compl_add_quot_datab[31..0]	:	WIRE;
	compl_add_quot_result[31..0]	:	WIRE;
	compl_add_rem_result_int[32..0]	:	WIRE;
	compl_add_rem_cin	:	WIRE;
	compl_add_rem_dataa[31..0]	:	WIRE;
	compl_add_rem_datab[31..0]	:	WIRE;
	compl_add_rem_result[31..0]	:	WIRE;
	aclr	: NODE;
	dff_num_sign_q_out	: WIRE;
	diff_signs	: WIRE;
	gnd_wire	: WIRE;
	neg_quot[31..0]	: WIRE;
	neg_rem[31..0]	: WIRE;
	norm_den[31..0]	: WIRE;
	norm_num[31..0]	: WIRE;
	num_sign	: WIRE;
	protect_quotient[31..0]	: WIRE;
	protect_remainder[31..0]	: WIRE;
	vcc_wire	: WIRE;

BEGIN 
	divider.clk_en = clk_en;
	divider.clock = clock;
	divider.denominator[] = norm_den[];
	divider.numerator[] = norm_num[];
	DFF_diff_signs[].clk = clock;
	DFF_diff_signs[].d = ( ( diff_signs, DFF_diff_signs[31..1].q));
	DFF_diff_signs[].ena = clk_en;
	DFF_diff_signs[].prn = (! aclr);
	DFF_num_sign[].clk = clock;
	DFF_num_sign[].clrn = (! aclr);
	DFF_num_sign[].d = ( ( num_sign, DFF_num_sign[31..1].q));
	DFF_num_sign[].ena = clk_en;
	my_abs_den.data[] = denominator[];
	my_abs_num.data[] = numerator[];
	compl_add_quot_result_int[] = (compl_add_quot_dataa[], compl_add_quot_cin) + (compl_add_quot_datab[], compl_add_quot_cin);
	compl_add_quot_result[] = compl_add_quot_result_int[32..1];
	compl_add_quot_cin = vcc_wire;
	compl_add_quot_dataa[] = (! protect_quotient[]);
	compl_add_quot_datab[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	compl_add_rem_result_int[] = (compl_add_rem_dataa[], compl_add_rem_cin) + (compl_add_rem_datab[], compl_add_rem_cin);
	compl_add_rem_result[] = compl_add_rem_result_int[32..1];
	compl_add_rem_cin = vcc_wire;
	compl_add_rem_dataa[] = (! protect_remainder[]);
	compl_add_rem_datab[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	aclr = GND;
	dff_num_sign_q_out = DFF_num_sign[0..0].q;
	diff_signs = (numerator[31..31] $ denominator[31..31]);
	gnd_wire = B"0";
	neg_quot[] = compl_add_quot_result[];
	neg_rem[] = compl_add_rem_result[];
	norm_den[] = my_abs_den.result[];
	norm_num[] = my_abs_num.result[];
	num_sign = numerator[31..31];
	protect_quotient[] = divider.quotient[];
	protect_remainder[] = divider.remainder[];
	quotient[] = ((protect_quotient[] & (! DFF_diff_signs[0..0].q)) # (neg_quot[] & DFF_diff_signs[0..0].q));
	remainder[] = ((protect_remainder[] & (! dff_num_sign_q_out)) # (neg_rem[] & dff_num_sign_q_out));
	vcc_wire = B"1";
END;
--VALID FILE
