//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 15:38:57 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 5
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @float_exception_flags = internal unnamed_addr global i32 0, align 4
`define TAG_g_float_exception_flags `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_float_exception_flags_a {`TAG_g_float_exception_flags, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [0:0] ram_32_address_a;
reg [0:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @float_exception_flags = internal unnamed_addr global i32 0, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 1;
defparam ram_32.widthad_b = 1;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 1;
defparam ram_32.numwords_b = 1;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 2);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	ram_32_address_a = memory_controller_address_a [1-1+2:2] & {1{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 2);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	ram_32_address_b = memory_controller_address_b [1-1+2:2] & {1{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module roundAndPackFloat64
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_zSign,
	arg_zExp,
	arg_zSig
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__4_2 = 5'd2;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__6_3 = 5'd3;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__8_4 = 5'd4;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_5 = 5'd5;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_6 = 5'd6;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_7 = 5'd7;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_8 = 5'd8;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__17_9 = 5'd9;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__19_10 = 5'd10;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__21_11 = 5'd11;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__31_12 = 5'd12;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__34_13 = 5'd13;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread1_14 = 5'd14;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread1_15 = 5'd15;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread1_16 = 5'd16;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread1_17 = 5'd17;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread_18 = 5'd18;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_19 = 5'd19;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_20 = 5'd20;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21 = 5'd21;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_22 = 5'd22;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_23 = 5'd23;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread6_24 = 5'd24;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__57_25 = 5'd25;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [63:0] return_val;
input [31:0] arg_zSign;
input [31:0] arg_zExp;
input [63:0] arg_zSig;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] roundAndPackFloat64_0_zSigtr;
reg [31:0] roundAndPackFloat64_0_zSigtr_reg;
reg [31:0] roundAndPackFloat64_0_1;
reg [31:0] roundAndPackFloat64_0_1_reg;
reg [31:0] roundAndPackFloat64_0_2;
reg [31:0] roundAndPackFloat64_0_2_reg;
reg  roundAndPackFloat64_0_3;
reg  roundAndPackFloat64_0_3_reg;
reg  roundAndPackFloat64_4_5;
reg  roundAndPackFloat64_4_5_reg;
reg  roundAndPackFloat64_6_7;
reg  roundAndPackFloat64_6_7_reg;
reg [63:0] roundAndPackFloat64_8_9;
reg [63:0] roundAndPackFloat64_8_9_reg;
reg  roundAndPackFloat64_8_10;
reg  roundAndPackFloat64_8_10_reg;
reg [31:0] roundAndPackFloat64_11_12;
reg [31:0] roundAndPackFloat64_11_12_reg;
reg [31:0] roundAndPackFloat64_11_13;
reg [31:0] roundAndPackFloat64_11_13_reg;
reg [63:0] roundAndPackFloat64_11_14;
reg [63:0] roundAndPackFloat64_11_14_reg;
reg [63:0] roundAndPackFloat64_11_15;
reg [63:0] roundAndPackFloat64_11_15_reg;
reg [63:0] roundAndPackFloat64_11_16;
reg [63:0] roundAndPackFloat64_11_16_reg;
reg  roundAndPackFloat64_17_18;
reg  roundAndPackFloat64_17_18_reg;
reg  roundAndPackFloat64_19_20;
reg  roundAndPackFloat64_19_20_reg;
reg [31:0] roundAndPackFloat64_21_22;
reg [31:0] roundAndPackFloat64_21_22_reg;
reg [63:0] roundAndPackFloat64_21_23;
reg [63:0] roundAndPackFloat64_21_23_reg;
reg [63:0] roundAndPackFloat64_21_24;
reg [63:0] roundAndPackFloat64_21_24_reg;
reg [31:0] roundAndPackFloat64_21_25;
reg [31:0] roundAndPackFloat64_21_25_reg;
reg [63:0] roundAndPackFloat64_21_26;
reg [63:0] roundAndPackFloat64_21_26_reg;
reg [63:0] roundAndPackFloat64_21_27;
reg [63:0] roundAndPackFloat64_21_27_reg;
reg  roundAndPackFloat64_21_28;
reg  roundAndPackFloat64_21_28_reg;
reg [63:0] roundAndPackFloat64_21_29;
reg [63:0] roundAndPackFloat64_21_29_reg;
reg [63:0] roundAndPackFloat64_21_30;
reg [63:0] roundAndPackFloat64_21_30_reg;
reg  roundAndPackFloat64_31_32;
reg  roundAndPackFloat64_31_32_reg;
reg [63:0] roundAndPackFloat64_31_33;
reg [63:0] roundAndPackFloat64_31_33_reg;
reg [63:0] roundAndPackFloat64_34_z1i;
reg [63:0] roundAndPackFloat64_34_z1i_reg;
reg [31:0] roundAndPackFloat64_34_z1itr;
reg [31:0] roundAndPackFloat64_34_z1itr_reg;
reg [31:0] roundAndPackFloat64_34_35;
reg [31:0] roundAndPackFloat64_34_35_reg;
reg  roundAndPackFloat64_34_36;
reg  roundAndPackFloat64_34_36_reg;
reg [31:0] roundAndPackFloat64_thread1_37;
reg [31:0] roundAndPackFloat64_thread1_37_reg;
reg [31:0] roundAndPackFloat64_thread1_38;
reg [31:0] roundAndPackFloat64_thread1_38_reg;
reg [31:0] roundAndPackFloat64_thread_1;
reg [31:0] roundAndPackFloat64_thread_1_reg;
reg  roundAndPackFloat64_thread_39;
reg  roundAndPackFloat64_thread_39_reg;
reg [31:0] roundAndPackFloat64_thread_crit_edge_pre;
reg [31:0] roundAndPackFloat64_thread_crit_edge_pre_reg;
reg [31:0] roundAndPackFloat64_40_41;
reg [31:0] roundAndPackFloat64_40_41_reg;
reg [63:0] roundAndPackFloat64_40_013;
reg [63:0] roundAndPackFloat64_40_013_reg;
reg [31:0] roundAndPackFloat64_40_roundBits15;
reg [31:0] roundAndPackFloat64_40_roundBits15_reg;
reg [31:0] roundAndPackFloat64_40_13;
reg [31:0] roundAndPackFloat64_40_13_reg;
reg [31:0] roundAndPackFloat64_40_42;
reg [31:0] roundAndPackFloat64_40_42_reg;
reg [63:0] roundAndPackFloat64_thread6_114;
reg [63:0] roundAndPackFloat64_thread6_114_reg;
reg [31:0] roundAndPackFloat64_thread6_roundBits14;
reg [31:0] roundAndPackFloat64_thread6_roundBits14_reg;
reg [31:0] roundAndPackFloat64_thread6_12;
reg [31:0] roundAndPackFloat64_thread6_12_reg;
reg [63:0] roundAndPackFloat64_thread6_43;
reg [63:0] roundAndPackFloat64_thread6_43_reg;
reg [63:0] roundAndPackFloat64_thread6_44;
reg [63:0] roundAndPackFloat64_thread6_44_reg;
reg  roundAndPackFloat64_thread6_45;
reg  roundAndPackFloat64_thread6_45_reg;
reg [31:0] roundAndPackFloat64_thread6_46;
reg [31:0] roundAndPackFloat64_thread6_46_reg;
reg [31:0] roundAndPackFloat64_thread6_47;
reg [31:0] roundAndPackFloat64_thread6_47_reg;
reg [63:0] roundAndPackFloat64_thread6_48;
reg [63:0] roundAndPackFloat64_thread6_48_reg;
reg [63:0] roundAndPackFloat64_thread6_49;
reg [63:0] roundAndPackFloat64_thread6_49_reg;
reg  roundAndPackFloat64_thread6_50;
reg  roundAndPackFloat64_thread6_50_reg;
reg [63:0] roundAndPackFloat64_thread6_51;
reg [63:0] roundAndPackFloat64_thread6_51_reg;
reg [63:0] roundAndPackFloat64_thread6_52;
reg [63:0] roundAndPackFloat64_thread6_52_reg;
reg [63:0] roundAndPackFloat64_thread6_53;
reg [63:0] roundAndPackFloat64_thread6_53_reg;
reg [63:0] roundAndPackFloat64_thread6_op;
reg [63:0] roundAndPackFloat64_thread6_op_reg;
reg [63:0] roundAndPackFloat64_thread6_54;
reg [63:0] roundAndPackFloat64_thread6_54_reg;
reg [63:0] roundAndPackFloat64_thread6_55;
reg [63:0] roundAndPackFloat64_thread6_55_reg;
reg [63:0] roundAndPackFloat64_thread6_56;
reg [63:0] roundAndPackFloat64_thread6_56_reg;
reg [63:0] roundAndPackFloat64_57_0;
reg [63:0] roundAndPackFloat64_57_0_reg;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [5:0] a_input_address_a;
wire  a_input_write_enable_a;
wire [63:0] a_input_in_a;
wire [63:0] a_input_out_a;
wire [5:0] a_input_address_b;
wire  a_input_write_enable_b;
wire [63:0] a_input_in_b;
wire [63:0] a_input_out_b;
wire [5:0] b_input_address_a;
wire  b_input_write_enable_a;
wire [63:0] b_input_in_a;
wire [63:0] b_input_out_a;
wire [5:0] b_input_address_b;
wire  b_input_write_enable_b;
wire [63:0] b_input_in_b;
wire [63:0] b_input_out_b;
wire [5:0] z_output_address_a;
wire  z_output_write_enable_a;
wire [63:0] z_output_in_a;
wire [63:0] z_output_out_a;
wire [5:0] z_output_address_b;
wire  z_output_write_enable_b;
wire [63:0] z_output_in_b;
wire [63:0] z_output_out_b;
wire [7:0] countLeadingZeros32countLeadingZerosHigh_address_a;
wire  countLeadingZeros32countLeadingZerosHigh_write_enable_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_a;
wire [7:0] countLeadingZeros32countLeadingZerosHigh_address_b;
wire  countLeadingZeros32countLeadingZerosHigh_write_enable_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_b;

// Local Rams


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__0_1;
LEGUP_F_roundAndPackFloat64_BB__0_1:
	if ((roundAndPackFloat64_0_3 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__4_2;
	else if ((roundAndPackFloat64_0_3 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__11_5:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_6;
LEGUP_F_roundAndPackFloat64_BB__11_6:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_7;
LEGUP_F_roundAndPackFloat64_BB__11_7:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_8;
LEGUP_F_roundAndPackFloat64_BB__11_8:
		next_state = LEGUP_F_roundAndPackFloat64_BB__57_25;
LEGUP_F_roundAndPackFloat64_BB__17_9:
	if ((roundAndPackFloat64_17_18 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__19_10;
	else if ((roundAndPackFloat64_17_18 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__19_10:
	if ((roundAndPackFloat64_19_20 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__21_11;
	else if ((roundAndPackFloat64_19_20 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__31_12;
LEGUP_F_roundAndPackFloat64_BB__21_11:
		next_state = LEGUP_F_roundAndPackFloat64_BB__34_13;
LEGUP_F_roundAndPackFloat64_BB__31_12:
		next_state = LEGUP_F_roundAndPackFloat64_BB__34_13;
LEGUP_F_roundAndPackFloat64_BB__34_13:
	if ((roundAndPackFloat64_34_36 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_24;
	else if ((roundAndPackFloat64_34_36 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread1_14;
LEGUP_F_roundAndPackFloat64_BB__40_22:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_23;
LEGUP_F_roundAndPackFloat64_BB__40_23:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_24;
LEGUP_F_roundAndPackFloat64_BB__4_2:
	if ((roundAndPackFloat64_4_5 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_5;
	else if ((roundAndPackFloat64_4_5 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__6_3;
LEGUP_F_roundAndPackFloat64_BB__57_25:
		next_state = LEGUP_0;
LEGUP_F_roundAndPackFloat64_BB__6_3:
	if ((roundAndPackFloat64_6_7 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__8_4;
	else if ((roundAndPackFloat64_6_7 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__17_9;
LEGUP_F_roundAndPackFloat64_BB__8_4:
	if ((roundAndPackFloat64_8_10 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_5;
	else if ((roundAndPackFloat64_8_10 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB_thread1_14:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread1_15;
LEGUP_F_roundAndPackFloat64_BB_thread1_15:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread1_16;
LEGUP_F_roundAndPackFloat64_BB_thread1_16:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread1_17;
LEGUP_F_roundAndPackFloat64_BB_thread1_17:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_22;
LEGUP_F_roundAndPackFloat64_BB_thread6_24:
		next_state = LEGUP_F_roundAndPackFloat64_BB__57_25;
LEGUP_F_roundAndPackFloat64_BB_thread_18:
	if ((roundAndPackFloat64_thread_39 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_24;
	else if ((roundAndPackFloat64_thread_39 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_19;
LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_19:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_20;
LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_20:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21;
LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_22;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %zSig.tr = trunc i64 %zSig to i32*/
		roundAndPackFloat64_0_zSigtr = arg_zSig[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %zSig.tr = trunc i64 %zSig to i32*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_zSigtr_reg <= roundAndPackFloat64_0_zSigtr;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_zSigtr) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_zSigtr_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %1 = and i32 %zSig.tr, 1023*/
		roundAndPackFloat64_0_1 = (roundAndPackFloat64_0_zSigtr & 32'd1023);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %1 = and i32 %zSig.tr, 1023*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_1_reg <= roundAndPackFloat64_0_1;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %2 = and i32 %zExp, 65535*/
		roundAndPackFloat64_0_2 = (arg_zExp & 32'd65535);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %2 = and i32 %zExp, 65535*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_2_reg <= roundAndPackFloat64_0_2;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %3 = icmp ugt i32 %2, 2044*/
		roundAndPackFloat64_0_3 = (roundAndPackFloat64_0_2 > 32'd2044);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %3 = icmp ugt i32 %2, 2044*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_3_reg <= roundAndPackFloat64_0_3;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %4*/
	/*   %5 = icmp sgt i32 %zExp, 2045*/
		roundAndPackFloat64_4_5 = ($signed(arg_zExp) > $signed(32'd2045));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %4*/
	/*   %5 = icmp sgt i32 %zExp, 2045*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__4_2)) begin
		roundAndPackFloat64_4_5_reg <= roundAndPackFloat64_4_5;
		if (start == 1'b0 && ^(roundAndPackFloat64_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_4_5_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %6*/
	/*   %7 = icmp eq i32 %zExp, 2045*/
		roundAndPackFloat64_6_7 = (arg_zExp == 32'd2045);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %6*/
	/*   %7 = icmp eq i32 %zExp, 2045*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__6_3)) begin
		roundAndPackFloat64_6_7_reg <= roundAndPackFloat64_6_7;
		if (start == 1'b0 && ^(roundAndPackFloat64_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %8*/
	/*   %9 = add i64 %zSig, 512*/
		roundAndPackFloat64_8_9 = (arg_zSig + 64'd512);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %8*/
	/*   %9 = add i64 %zSig, 512*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4)) begin
		roundAndPackFloat64_8_9_reg <= roundAndPackFloat64_8_9;
		if (start == 1'b0 && ^(roundAndPackFloat64_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_8_9_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %8*/
	/*   %10 = icmp slt i64 %9, 0*/
		roundAndPackFloat64_8_10 = ($signed(roundAndPackFloat64_8_9) < $signed(64'd0));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %8*/
	/*   %10 = icmp slt i64 %9, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4)) begin
		roundAndPackFloat64_8_10_reg <= roundAndPackFloat64_8_10;
		if (start == 1'b0 && ^(roundAndPackFloat64_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_8_10_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4*/
		roundAndPackFloat64_11_12 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		roundAndPackFloat64_11_12_reg <= roundAndPackFloat64_11_12;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %13 = or i32 %12, 9*/
		roundAndPackFloat64_11_13 = (roundAndPackFloat64_11_12 | 32'd9);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %13 = or i32 %12, 9*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		roundAndPackFloat64_11_13_reg <= roundAndPackFloat64_11_13;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_13_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %14 = zext i32 %zSign to i64*/
		roundAndPackFloat64_11_14 = arg_zSign;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %14 = zext i32 %zSign to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_14_reg <= roundAndPackFloat64_11_14;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_14_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %15 = shl i64 %14, 63*/
		roundAndPackFloat64_11_15 = (roundAndPackFloat64_11_14 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %15 = shl i64 %14, 63*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_15_reg <= roundAndPackFloat64_11_15;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_15_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %16 = or i64 %15, 9218868437227405312*/
		roundAndPackFloat64_11_16 = (roundAndPackFloat64_11_15 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %16 = or i64 %15, 9218868437227405312*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_16_reg <= roundAndPackFloat64_11_16;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_16_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %17*/
	/*   %18 = icmp slt i32 %zExp, 0*/
		roundAndPackFloat64_17_18 = ($signed(arg_zExp) < $signed(32'd0));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %17*/
	/*   %18 = icmp slt i32 %zExp, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9)) begin
		roundAndPackFloat64_17_18_reg <= roundAndPackFloat64_17_18;
		if (start == 1'b0 && ^(roundAndPackFloat64_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_17_18_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %19*/
	/*   %20 = icmp sgt i32 %zExp, -64*/
		roundAndPackFloat64_19_20 = ($signed(arg_zExp) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %19*/
	/*   %20 = icmp sgt i32 %zExp, -64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__19_10)) begin
		roundAndPackFloat64_19_20_reg <= roundAndPackFloat64_19_20;
		if (start == 1'b0 && ^(roundAndPackFloat64_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_19_20_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %22 = sub nsw i32 0, %zExp*/
		roundAndPackFloat64_21_22 = (32'd0 - arg_zExp);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %22 = sub nsw i32 0, %zExp*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_22_reg <= roundAndPackFloat64_21_22;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_22_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %23 = zext i32 %22 to i64*/
		roundAndPackFloat64_21_23 = roundAndPackFloat64_21_22;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %23 = zext i32 %22 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_23_reg <= roundAndPackFloat64_21_23;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_23_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %24 = lshr i64 %zSig, %23*/
		roundAndPackFloat64_21_24 = (arg_zSig >>> (roundAndPackFloat64_21_23 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %24 = lshr i64 %zSig, %23*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_24_reg <= roundAndPackFloat64_21_24;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_24_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %25 = and i32 %zExp, 63*/
		roundAndPackFloat64_21_25 = (arg_zExp & 32'd63);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %25 = and i32 %zExp, 63*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_25_reg <= roundAndPackFloat64_21_25;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_25_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %26 = zext i32 %25 to i64*/
		roundAndPackFloat64_21_26 = roundAndPackFloat64_21_25;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %26 = zext i32 %25 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_26_reg <= roundAndPackFloat64_21_26;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_26_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %27 = shl i64 %zSig, %26*/
		roundAndPackFloat64_21_27 = (arg_zSig <<< (roundAndPackFloat64_21_26 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %27 = shl i64 %zSig, %26*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_27_reg <= roundAndPackFloat64_21_27;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_27_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %28 = icmp ne i64 %27, 0*/
		roundAndPackFloat64_21_28 = (roundAndPackFloat64_21_27 != 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %28 = icmp ne i64 %27, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_28_reg <= roundAndPackFloat64_21_28;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_28_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %29 = zext i1 %28 to i64*/
		roundAndPackFloat64_21_29 = roundAndPackFloat64_21_28;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %29 = zext i1 %28 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_29_reg <= roundAndPackFloat64_21_29;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_29_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %30 = or i64 %24, %29*/
		roundAndPackFloat64_21_30 = (roundAndPackFloat64_21_24 | roundAndPackFloat64_21_29);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %30 = or i64 %24, %29*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_30_reg <= roundAndPackFloat64_21_30;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_30_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %31*/
	/*   %32 = icmp ne i64 %zSig, 0*/
		roundAndPackFloat64_31_32 = (arg_zSig != 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %31*/
	/*   %32 = icmp ne i64 %zSig, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12)) begin
		roundAndPackFloat64_31_32_reg <= roundAndPackFloat64_31_32;
		if (start == 1'b0 && ^(roundAndPackFloat64_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_31_32_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %31*/
	/*   %33 = zext i1 %32 to i64*/
		roundAndPackFloat64_31_33 = roundAndPackFloat64_31_32;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %31*/
	/*   %33 = zext i1 %32 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12)) begin
		roundAndPackFloat64_31_33_reg <= roundAndPackFloat64_31_33;
		if (start == 1'b0 && ^(roundAndPackFloat64_31_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_31_33_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %34*/
	/*   %z.1.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_34_z1i = roundAndPackFloat64_21_30;
	end
	/* roundAndPackFloat64: %34*/
	/*   %z.1.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_34_z1i = roundAndPackFloat64_31_33;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %34*/
	/*   %z.1.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_34_z1i_reg <= roundAndPackFloat64_34_z1i;
		if (start == 1'b0 && ^(roundAndPackFloat64_34_z1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_34_z1i_reg"); $finish; end
	end
	/* roundAndPackFloat64: %34*/
	/*   %z.1.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_34_z1i_reg <= roundAndPackFloat64_34_z1i;
		if (start == 1'b0 && ^(roundAndPackFloat64_34_z1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_34_z1i_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %34*/
	/*   %z.1.i.tr = trunc i64 %z.1.i to i32*/
		roundAndPackFloat64_34_z1itr = roundAndPackFloat64_34_z1i_reg[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %34*/
	/*   %z.1.i.tr = trunc i64 %z.1.i to i32*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__34_13)) begin
		roundAndPackFloat64_34_z1itr_reg <= roundAndPackFloat64_34_z1itr;
		if (start == 1'b0 && ^(roundAndPackFloat64_34_z1itr) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_34_z1itr_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %34*/
	/*   %35 = and i32 %z.1.i.tr, 1023*/
		roundAndPackFloat64_34_35 = (roundAndPackFloat64_34_z1itr & 32'd1023);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %34*/
	/*   %35 = and i32 %z.1.i.tr, 1023*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__34_13)) begin
		roundAndPackFloat64_34_35_reg <= roundAndPackFloat64_34_35;
		if (start == 1'b0 && ^(roundAndPackFloat64_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_34_35_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %34*/
	/*   %36 = icmp eq i32 %35, 0*/
		roundAndPackFloat64_34_36 = (roundAndPackFloat64_34_35 == 32'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %34*/
	/*   %36 = icmp eq i32 %35, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__34_13)) begin
		roundAndPackFloat64_34_36_reg <= roundAndPackFloat64_34_36;
		if (start == 1'b0 && ^(roundAndPackFloat64_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_34_36_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread1*/
	/*   %37 = load i32* @float_exception_flags, align 4*/
		roundAndPackFloat64_thread1_37 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread1*/
	/*   %37 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_16)) begin
		roundAndPackFloat64_thread1_37_reg <= roundAndPackFloat64_thread1_37;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread1_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread1_37_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread1*/
	/*   %38 = or i32 %37, 4*/
		roundAndPackFloat64_thread1_38 = (roundAndPackFloat64_thread1_37 | 32'd4);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread1*/
	/*   %38 = or i32 %37, 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_16)) begin
		roundAndPackFloat64_thread1_38_reg <= roundAndPackFloat64_thread1_38;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread1_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread1_38_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %.1 = phi i32 [ %zExp, %0 ], [ %zExp, %17 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_1 = arg_zExp;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.1 = phi i32 [ %zExp, %0 ], [ %zExp, %17 ], [ 2045, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_1 = 32'd2045;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.1 = phi i32 [ %zExp, %0 ], [ %zExp, %17 ], [ 2045, %8 ]*/
	else /* if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) */ begin
		roundAndPackFloat64_thread_1 = arg_zExp;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %.1 = phi i32 [ %zExp, %0 ], [ %zExp, %17 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_1_reg <= roundAndPackFloat64_thread_1;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_1_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.1 = phi i32 [ %zExp, %0 ], [ %zExp, %17 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_1_reg <= roundAndPackFloat64_thread_1;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_1_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.1 = phi i32 [ %zExp, %0 ], [ %zExp, %17 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_1_reg <= roundAndPackFloat64_thread_1;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_1_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %39 = icmp eq i32 %1, 0*/
		roundAndPackFloat64_thread_39 = (roundAndPackFloat64_0_1_reg == 32'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %39 = icmp eq i32 %1, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18)) begin
		roundAndPackFloat64_thread_39_reg <= roundAndPackFloat64_thread_39;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_39_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread._crit_edge*/
	/*   %.pre = load i32* @float_exception_flags, align 4*/
		roundAndPackFloat64_thread_crit_edge_pre = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread._crit_edge*/
	/*   %.pre = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21)) begin
		roundAndPackFloat64_thread_crit_edge_pre_reg <= roundAndPackFloat64_thread_crit_edge_pre;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_crit_edge_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_crit_edge_pre_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %41 = phi i32 [ %.pre, %.thread._crit_edge ], [ %38, %.thread1 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_40_41 = roundAndPackFloat64_thread1_38_reg;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = phi i32 [ %.pre, %.thread._crit_edge ], [ %38, %.thread1 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_40_41 = roundAndPackFloat64_thread_crit_edge_pre;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %40*/
	/*   %41 = phi i32 [ %.pre, %.thread._crit_edge ], [ %38, %.thread1 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_40_41_reg <= roundAndPackFloat64_40_41;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_41_reg"); $finish; end
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = phi i32 [ %.pre, %.thread._crit_edge ], [ %38, %.thread1 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_40_41_reg <= roundAndPackFloat64_40_41;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_41_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %.013 = phi i64 [ %zSig, %.thread._crit_edge ], [ %z.1.i, %.thread1 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_40_013 = roundAndPackFloat64_34_z1i_reg;
	end
	/* roundAndPackFloat64: %40*/
	/*   %.013 = phi i64 [ %zSig, %.thread._crit_edge ], [ %z.1.i, %.thread1 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_40_013 = arg_zSig;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %40*/
	/*   %.013 = phi i64 [ %zSig, %.thread._crit_edge ], [ %z.1.i, %.thread1 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_40_013_reg <= roundAndPackFloat64_40_013;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_013) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_013_reg"); $finish; end
	end
	/* roundAndPackFloat64: %40*/
	/*   %.013 = phi i64 [ %zSig, %.thread._crit_edge ], [ %z.1.i, %.thread1 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_40_013_reg <= roundAndPackFloat64_40_013;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_013) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_013_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %roundBits.15 = phi i32 [ %1, %.thread._crit_edge ], [ %35, %.thread1 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_40_roundBits15 = roundAndPackFloat64_34_35_reg;
	end
	/* roundAndPackFloat64: %40*/
	/*   %roundBits.15 = phi i32 [ %1, %.thread._crit_edge ], [ %35, %.thread1 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_40_roundBits15 = roundAndPackFloat64_0_1_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %40*/
	/*   %roundBits.15 = phi i32 [ %1, %.thread._crit_edge ], [ %35, %.thread1 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_40_roundBits15_reg <= roundAndPackFloat64_40_roundBits15;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_roundBits15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_roundBits15_reg"); $finish; end
	end
	/* roundAndPackFloat64: %40*/
	/*   %roundBits.15 = phi i32 [ %1, %.thread._crit_edge ], [ %35, %.thread1 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_40_roundBits15_reg <= roundAndPackFloat64_40_roundBits15;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_roundBits15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_roundBits15_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %.13 = phi i32 [ %.1, %.thread._crit_edge ], [ 0, %.thread1 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_40_13 = 32'd0;
	end
	/* roundAndPackFloat64: %40*/
	/*   %.13 = phi i32 [ %.1, %.thread._crit_edge ], [ 0, %.thread1 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_40_13 = roundAndPackFloat64_thread_1_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %40*/
	/*   %.13 = phi i32 [ %.1, %.thread._crit_edge ], [ 0, %.thread1 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_40_13_reg <= roundAndPackFloat64_40_13;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_13_reg"); $finish; end
	end
	/* roundAndPackFloat64: %40*/
	/*   %.13 = phi i32 [ %.1, %.thread._crit_edge ], [ 0, %.thread1 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_40_13_reg <= roundAndPackFloat64_40_13;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_13_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %42 = or i32 %41, 1*/
		roundAndPackFloat64_40_42 = (roundAndPackFloat64_40_41_reg | 32'd1);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %40*/
	/*   %42 = or i32 %41, 1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22)) begin
		roundAndPackFloat64_40_42_reg <= roundAndPackFloat64_40_42;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_42_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.114 = phi i64 [ %.013, %40 ], [ %zSig, %.thread ], [ %z.1.i, %34 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__34_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_34_36 == 1'd1))) begin
		roundAndPackFloat64_thread6_114 = roundAndPackFloat64_34_z1i_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.114 = phi i64 [ %.013, %40 ], [ %zSig, %.thread ], [ %z.1.i, %34 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_114 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.114 = phi i64 [ %.013, %40 ], [ %zSig, %.thread ], [ %z.1.i, %34 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_23) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_114 = roundAndPackFloat64_40_013_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.114 = phi i64 [ %.013, %40 ], [ %zSig, %.thread ], [ %z.1.i, %34 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__34_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_34_36 == 1'd1))) begin
		roundAndPackFloat64_thread6_114_reg <= roundAndPackFloat64_thread6_114;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_114_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.114 = phi i64 [ %.013, %40 ], [ %zSig, %.thread ], [ %z.1.i, %34 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_114_reg <= roundAndPackFloat64_thread6_114;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_114_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.114 = phi i64 [ %.013, %40 ], [ %zSig, %.thread ], [ %z.1.i, %34 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_23) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_114_reg <= roundAndPackFloat64_thread6_114;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_114_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.14 = phi i32 [ %roundBits.15, %40 ], [ 0, %.thread ], [ 0, %34 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__34_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_34_36 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits14 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.14 = phi i32 [ %roundBits.15, %40 ], [ 0, %.thread ], [ 0, %34 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits14 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.14 = phi i32 [ %roundBits.15, %40 ], [ 0, %.thread ], [ 0, %34 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_23) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_roundBits14 = roundAndPackFloat64_40_roundBits15_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.14 = phi i32 [ %roundBits.15, %40 ], [ 0, %.thread ], [ 0, %34 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__34_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_34_36 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits14_reg <= roundAndPackFloat64_thread6_roundBits14;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits14_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.14 = phi i32 [ %roundBits.15, %40 ], [ 0, %.thread ], [ 0, %34 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits14_reg <= roundAndPackFloat64_thread6_roundBits14;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits14_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.14 = phi i32 [ %roundBits.15, %40 ], [ 0, %.thread ], [ 0, %34 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_23) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_roundBits14_reg <= roundAndPackFloat64_thread6_roundBits14;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits14_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.12 = phi i32 [ %.13, %40 ], [ %.1, %.thread ], [ 0, %34 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__34_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_34_36 == 1'd1))) begin
		roundAndPackFloat64_thread6_12 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.12 = phi i32 [ %.13, %40 ], [ %.1, %.thread ], [ 0, %34 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_12 = roundAndPackFloat64_thread_1_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.12 = phi i32 [ %.13, %40 ], [ %.1, %.thread ], [ 0, %34 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_23) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_12 = roundAndPackFloat64_40_13_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.12 = phi i32 [ %.13, %40 ], [ %.1, %.thread ], [ 0, %34 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__34_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_34_36 == 1'd1))) begin
		roundAndPackFloat64_thread6_12_reg <= roundAndPackFloat64_thread6_12;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_12_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.12 = phi i32 [ %.13, %40 ], [ %.1, %.thread ], [ 0, %34 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_12_reg <= roundAndPackFloat64_thread6_12;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_12_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.12 = phi i32 [ %.13, %40 ], [ %.1, %.thread ], [ 0, %34 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_23) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_12_reg <= roundAndPackFloat64_thread6_12;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_12_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %43 = add i64 %.114, 512*/
		roundAndPackFloat64_thread6_43 = (roundAndPackFloat64_thread6_114_reg + 64'd512);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %43 = add i64 %.114, 512*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_43_reg <= roundAndPackFloat64_thread6_43;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_43_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %44 = lshr i64 %43, 10*/
		roundAndPackFloat64_thread6_44 = (roundAndPackFloat64_thread6_43 >>> (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %44 = lshr i64 %43, 10*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_44_reg <= roundAndPackFloat64_thread6_44;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_44_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %45 = icmp eq i32 %roundBits.14, 512*/
		roundAndPackFloat64_thread6_45 = (roundAndPackFloat64_thread6_roundBits14_reg == 32'd512);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %45 = icmp eq i32 %roundBits.14, 512*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_45_reg <= roundAndPackFloat64_thread6_45;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_45_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %46 = zext i1 %45 to i32*/
		roundAndPackFloat64_thread6_46 = roundAndPackFloat64_thread6_45;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %46 = zext i1 %45 to i32*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_46_reg <= roundAndPackFloat64_thread6_46;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_46_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %47 = xor i32 %46, -1*/
		roundAndPackFloat64_thread6_47 = (roundAndPackFloat64_thread6_46 ^ -32'd1);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %47 = xor i32 %46, -1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_47_reg <= roundAndPackFloat64_thread6_47;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_47_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %48 = sext i32 %47 to i64*/
		roundAndPackFloat64_thread6_48 = $signed(roundAndPackFloat64_thread6_47);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %48 = sext i32 %47 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_48_reg <= roundAndPackFloat64_thread6_48;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_48_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %49 = and i64 %44, %48*/
		roundAndPackFloat64_thread6_49 = (roundAndPackFloat64_thread6_44 & roundAndPackFloat64_thread6_48);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %49 = and i64 %44, %48*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_49_reg <= roundAndPackFloat64_thread6_49;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_49_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %50 = icmp eq i64 %49, 0*/
		roundAndPackFloat64_thread6_50 = (roundAndPackFloat64_thread6_49 == 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %50 = icmp eq i64 %49, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_50_reg <= roundAndPackFloat64_thread6_50;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_50_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %51 = zext i32 %zSign to i64*/
		roundAndPackFloat64_thread6_51 = arg_zSign;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %51 = zext i32 %zSign to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_51_reg <= roundAndPackFloat64_thread6_51;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_51_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %52 = shl i64 %51, 63*/
		roundAndPackFloat64_thread6_52 = (roundAndPackFloat64_thread6_51 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %52 = shl i64 %51, 63*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_52_reg <= roundAndPackFloat64_thread6_52;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_52_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %53 = zext i32 %.12 to i64*/
		roundAndPackFloat64_thread6_53 = roundAndPackFloat64_thread6_12_reg;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %53 = zext i32 %.12 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_53_reg <= roundAndPackFloat64_thread6_53;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_53_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.op = shl i64 %53, 52*/
		roundAndPackFloat64_thread6_op = (roundAndPackFloat64_thread6_53 <<< (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.op = shl i64 %53, 52*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_op_reg <= roundAndPackFloat64_thread6_op;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_op) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_op_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %54 = select i1 %50, i64 0, i64 %.op*/
		roundAndPackFloat64_thread6_54 = (roundAndPackFloat64_thread6_50 ? 64'd0 : roundAndPackFloat64_thread6_op);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %54 = select i1 %50, i64 0, i64 %.op*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_54_reg <= roundAndPackFloat64_thread6_54;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_54_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %55 = add i64 %52, %54*/
		roundAndPackFloat64_thread6_55 = (roundAndPackFloat64_thread6_52 + roundAndPackFloat64_thread6_54);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %55 = add i64 %52, %54*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_55_reg <= roundAndPackFloat64_thread6_55;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_55_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %56 = add i64 %55, %49*/
		roundAndPackFloat64_thread6_56 = (roundAndPackFloat64_thread6_55 + roundAndPackFloat64_thread6_49);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %56 = add i64 %55, %49*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24)) begin
		roundAndPackFloat64_thread6_56_reg <= roundAndPackFloat64_thread6_56;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_56_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_8) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0 = roundAndPackFloat64_11_16_reg;
	end
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_57_0 = roundAndPackFloat64_thread6_56;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_8) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0_reg <= roundAndPackFloat64_57_0;
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_57_0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_24) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0_reg <= roundAndPackFloat64_57_0;
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_57_0_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* roundAndPackFloat64: %57*/
	/*   ret i64 %.0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__57_25)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %.thread1*/
	/*   %37 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %.thread1*/
	/*   store i32 %38, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %.thread._crit_edge*/
	/*   %.pre = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %.thread1*/
	/*   %37 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_14)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %.thread1*/
	/*   store i32 %38, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_16)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %.thread._crit_edge*/
	/*   %.pre = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_19)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %.thread1*/
	/*   %37 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %.thread1*/
	/*   store i32 %38, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %.thread._crit_edge*/
	/*   %.pre = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_in_a = roundAndPackFloat64_11_13;
	end
	/* roundAndPackFloat64: %.thread1*/
	/*   store i32 %38, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_16)) begin
		memory_controller_in_a = roundAndPackFloat64_thread1_38;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22)) begin
		memory_controller_in_a = roundAndPackFloat64_40_42;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %.thread1*/
	/*   %37 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %.thread1*/
	/*   store i32 %38, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread1_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %.thread._crit_edge*/
	/*   %.pre = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* roundAndPackFloat64: %57*/
	/*   ret i64 %.0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__57_25)) begin
		return_val <= roundAndPackFloat64_57_0_reg;
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB__1_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__3_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB__3_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB__18_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB__22_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB__24_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB__28_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB__33_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB__35_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB__45_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB__48_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB__50_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB__52_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB__56_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB__59_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB__65_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB__67_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB__76_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB__79_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB__80_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB__85_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB__90_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexit6ii_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexit6ii_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexit6ii_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB__98_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB__98_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB__100_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB__104_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB__106_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB__108_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB__110_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB__111_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB__116_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB__116_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB__116_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB__116_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB__119_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB__120_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB__122_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB__124_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB__128_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB__133_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB__139_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB__141_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB__150_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexit3ii_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB__154_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB__157_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB__161_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB__166_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB__168_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB__178_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB_shift64RightJammingexitii_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB__182_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB__184_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB__192_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74 = 7'd74;
parameter [6:0] LEGUP_F_main_BB_addFloat64Sigsexiti_75 = 7'd75;
parameter [6:0] LEGUP_F_main_BB_addFloat64Sigsexiti_76 = 7'd76;
parameter [6:0] LEGUP_F_main_BB__211_77 = 7'd77;
parameter [6:0] LEGUP_F_main_BB__214_78 = 7'd78;
parameter [6:0] LEGUP_F_main_BB__216_79 = 7'd79;
parameter [6:0] LEGUP_F_main_BB__218_80 = 7'd80;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [6:0] LEGUP_function_call_33 = 7'd33;
parameter [6:0] LEGUP_function_call_73 = 7'd73;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] main_1_main_result0;
reg [31:0] main_1_main_result0_reg;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg;
reg  main_1_exitcond1;
reg  main_1_exitcond1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep2_reg;
reg [63:0] main_3_4;
reg [63:0] main_3_4_reg;
reg [63:0] main_3_5;
reg [63:0] main_3_5_reg;
reg [63:0] main_3_6;
reg [63:0] main_3_6_reg;
reg [31:0] main_3_7;
reg [31:0] main_3_7_reg;
reg [63:0] main_3_8;
reg [63:0] main_3_8_reg;
reg [31:0] main_3_9;
reg [31:0] main_3_9_reg;
reg  main_3_10;
reg  main_3_10_reg;
reg [63:0] main_3_11;
reg [63:0] main_3_11_reg;
reg [63:0] main_3_12;
reg [63:0] main_3_12_reg;
reg [31:0] main_3_tr;
reg [31:0] main_3_tr_reg;
reg [31:0] main_3_13;
reg [31:0] main_3_13_reg;
reg [63:0] main_3_14;
reg [63:0] main_3_14_reg;
reg [63:0] main_3_15;
reg [63:0] main_3_15_reg;
reg [31:0] main_3_tr1;
reg [31:0] main_3_tr1_reg;
reg [31:0] main_3_16;
reg [31:0] main_3_16_reg;
reg [31:0] main_3_17;
reg [31:0] main_3_17_reg;
reg [63:0] main_18_19;
reg [63:0] main_18_19_reg;
reg [63:0] main_18_20;
reg [63:0] main_18_20_reg;
reg  main_18_21;
reg  main_18_21_reg;
reg  main_22_23;
reg  main_22_23_reg;
reg  main_24_25;
reg  main_24_25_reg;
reg [62:0] main_float64_is_signaling_nanexit1i7i3i_26;
reg [62:0] main_float64_is_signaling_nanexit1i7i3i_26_reg;
reg  main_float64_is_signaling_nanexit1i7i3i_27;
reg  main_float64_is_signaling_nanexit1i7i3i_27_reg;
reg [63:0] main_float64_is_signaling_nanexit1i7i3i_v;
reg [63:0] main_float64_is_signaling_nanexit1i7i3i_v_reg;
reg [63:0] main_float64_is_signaling_nanexit1i7i3i_;
reg [63:0] main_float64_is_signaling_nanexit1i7i3i__reg;
reg  main_28_29;
reg  main_28_29_reg;
reg [63:0] main_28_30;
reg [63:0] main_28_30_reg;
reg [63:0] main_28_bSigi2i0;
reg [63:0] main_28_bSigi2i0_reg;
reg [31:0] main_28_31;
reg [31:0] main_28_31_reg;
reg [31:0] main_28_expDiff0i6i;
reg [31:0] main_28_expDiff0i6i_reg;
reg  main_28_32;
reg  main_28_32_reg;
reg  main_33_34;
reg  main_33_34_reg;
reg [63:0] main_35_36;
reg [63:0] main_35_36_reg;
reg [63:0] main_35_37;
reg [63:0] main_35_37_reg;
reg [31:0] main_35_38;
reg [31:0] main_35_38_reg;
reg [31:0] main_35_39;
reg [31:0] main_35_39_reg;
reg [63:0] main_35_40;
reg [63:0] main_35_40_reg;
reg [63:0] main_35_41;
reg [63:0] main_35_41_reg;
reg  main_35_42;
reg  main_35_42_reg;
reg [63:0] main_35_43;
reg [63:0] main_35_43_reg;
reg [63:0] main_35_44;
reg [63:0] main_35_44_reg;
reg  main_45_46;
reg  main_45_46_reg;
reg [63:0] main_45_47;
reg [63:0] main_45_47_reg;
reg  main_48_49;
reg  main_48_49_reg;
reg  main_50_51;
reg  main_50_51_reg;
reg  main_52_53;
reg  main_52_53_reg;
reg [62:0] main_float64_is_signaling_nanexit1i1ii_54;
reg [62:0] main_float64_is_signaling_nanexit1i1ii_54_reg;
reg  main_float64_is_signaling_nanexit1i1ii_55;
reg  main_float64_is_signaling_nanexit1i1ii_55_reg;
reg [63:0] main_float64_is_signaling_nanexit1i1ii_42v;
reg [63:0] main_float64_is_signaling_nanexit1i1ii_42v_reg;
reg [63:0] main_float64_is_signaling_nanexit1i1ii_42;
reg [63:0] main_float64_is_signaling_nanexit1i1ii_42_reg;
reg [63:0] main_56_57;
reg [63:0] main_56_57_reg;
reg [63:0] main_56_58;
reg [63:0] main_56_58_reg;
reg  main_59_60;
reg  main_59_60_reg;
reg [63:0] main_59_61;
reg [63:0] main_59_61_reg;
reg [63:0] main_59_aSigi1i0;
reg [63:0] main_59_aSigi1i0_reg;
reg [31:0] main_59_62;
reg [31:0] main_59_62_reg;
reg [31:0] main_59_expDiff1i7i;
reg [31:0] main_59_expDiff1i7i_reg;
reg [31:0] main_59_63;
reg [31:0] main_59_63_reg;
reg  main_59_64;
reg  main_59_64_reg;
reg  main_65_66;
reg  main_65_66_reg;
reg [63:0] main_67_68;
reg [63:0] main_67_68_reg;
reg [63:0] main_67_69;
reg [63:0] main_67_69_reg;
reg [31:0] main_67_70;
reg [31:0] main_67_70_reg;
reg [63:0] main_67_71;
reg [63:0] main_67_71_reg;
reg [63:0] main_67_72;
reg [63:0] main_67_72_reg;
reg  main_67_73;
reg  main_67_73_reg;
reg [63:0] main_67_74;
reg [63:0] main_67_74_reg;
reg [63:0] main_67_75;
reg [63:0] main_67_75_reg;
reg  main_76_77;
reg  main_76_77_reg;
reg [63:0] main_76_78;
reg [63:0] main_76_78_reg;
reg [63:0] main_80_81;
reg [63:0] main_80_81_reg;
reg  main_80_82;
reg  main_80_82_reg;
reg [62:0] main_float64_is_signaling_nanexit1ii11i_83;
reg [62:0] main_float64_is_signaling_nanexit1ii11i_83_reg;
reg  main_float64_is_signaling_nanexit1ii11i_84;
reg  main_float64_is_signaling_nanexit1ii11i_84_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii11i_45v;
reg [63:0] main_float64_is_signaling_nanexit1ii11i_45v_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii11i_45;
reg [63:0] main_float64_is_signaling_nanexit1ii11i_45_reg;
reg [63:0] main_85_86;
reg [63:0] main_85_86_reg;
reg [63:0] main_85_87;
reg [63:0] main_85_87_reg;
reg [63:0] main_85_88;
reg [63:0] main_85_88_reg;
reg [63:0] main_85_89;
reg [63:0] main_85_89_reg;
reg [63:0] main_90_91;
reg [63:0] main_90_91_reg;
reg [63:0] main_90_92;
reg [63:0] main_90_92_reg;
reg [63:0] main_shift64RightJammingexit6ii_aSigi1i1;
reg [63:0] main_shift64RightJammingexit6ii_aSigi1i1_reg;
reg [63:0] main_shift64RightJammingexit6ii_bSigi2i1;
reg [63:0] main_shift64RightJammingexit6ii_bSigi2i1_reg;
reg [31:0] main_shift64RightJammingexit6ii_zExp0i14i;
reg [31:0] main_shift64RightJammingexit6ii_zExp0i14i_reg;
reg [63:0] main_shift64RightJammingexit6ii_93;
reg [63:0] main_shift64RightJammingexit6ii_93_reg;
reg [63:0] main_shift64RightJammingexit6ii_94;
reg [63:0] main_shift64RightJammingexit6ii_94_reg;
reg [63:0] main_shift64RightJammingexit6ii_95;
reg [63:0] main_shift64RightJammingexit6ii_95_reg;
reg  main_shift64RightJammingexit6ii_96;
reg  main_shift64RightJammingexit6ii_96_reg;
reg  main_shift64RightJammingexit6ii_not;
reg  main_shift64RightJammingexit6ii_not_reg;
reg [31:0] main_shift64RightJammingexit6ii_97;
reg [31:0] main_shift64RightJammingexit6ii_97_reg;
reg [31:0] main_shift64RightJammingexit6ii_zExp0i14i_var0;
reg [31:0] main_shift64RightJammingexit6ii_zExp0i14i_var0_reg;
reg [63:0] main_shift64RightJammingexit6ii_46;
reg [63:0] main_shift64RightJammingexit6ii_46_reg;
reg [31:0] main_98_zExp2ii;
reg [31:0] main_98_zExp2ii_reg;
reg [63:0] main_98_zSig1ii;
reg [63:0] main_98_zSig1ii_reg;
reg [63:0] main_98_99;
reg [63:0] main_98_99_reg;
reg [63:0] main_100_101;
reg [63:0] main_100_101_reg;
reg [63:0] main_100_102;
reg [63:0] main_100_102_reg;
reg  main_100_103;
reg  main_100_103_reg;
reg  main_104_105;
reg  main_104_105_reg;
reg  main_106_107;
reg  main_106_107_reg;
reg  main_108_109;
reg  main_108_109_reg;
reg [63:0] main_111_112;
reg [63:0] main_111_112_reg;
reg  main_111_113;
reg  main_111_113_reg;
reg [62:0] main_float64_is_signaling_nanexit1i7ii_114;
reg [62:0] main_float64_is_signaling_nanexit1i7ii_114_reg;
reg  main_float64_is_signaling_nanexit1i7ii_115;
reg  main_float64_is_signaling_nanexit1i7ii_115_reg;
reg [63:0] main_float64_is_signaling_nanexit1i7ii_49v;
reg [63:0] main_float64_is_signaling_nanexit1i7ii_49v_reg;
reg [63:0] main_float64_is_signaling_nanexit1i7ii_49;
reg [63:0] main_float64_is_signaling_nanexit1i7ii_49_reg;
reg [31:0] main_116_117;
reg [31:0] main_116_117_reg;
reg [31:0] main_116_118;
reg [31:0] main_116_118_reg;
reg [31:0] main_120_bExp0ii;
reg [31:0] main_120_bExp0ii_reg;
reg [31:0] main_120_aExp0ii;
reg [31:0] main_120_aExp0ii_reg;
reg  main_120_121;
reg  main_120_121_reg;
reg  main_122_123;
reg  main_122_123_reg;
reg  main_124_125;
reg  main_124_125_reg;
reg [62:0] main_float64_is_signaling_nanexit1i4ii_126;
reg [62:0] main_float64_is_signaling_nanexit1i4ii_126_reg;
reg  main_float64_is_signaling_nanexit1i4ii_127;
reg  main_float64_is_signaling_nanexit1i4ii_127_reg;
reg [63:0] main_float64_is_signaling_nanexit1i4ii_52v;
reg [63:0] main_float64_is_signaling_nanexit1i4ii_52v_reg;
reg [63:0] main_float64_is_signaling_nanexit1i4ii_52;
reg [63:0] main_float64_is_signaling_nanexit1i4ii_52_reg;
reg [31:0] main_128_129;
reg [31:0] main_128_129_reg;
reg [63:0] main_128_130;
reg [63:0] main_128_130_reg;
reg [63:0] main_128_131;
reg [63:0] main_128_131_reg;
reg [63:0] main_128_132;
reg [63:0] main_128_132_reg;
reg  main_133_134;
reg  main_133_134_reg;
reg [63:0] main_133_135;
reg [63:0] main_133_135_reg;
reg [63:0] main_133_aSigii0;
reg [63:0] main_133_aSigii0_reg;
reg [31:0] main_133_136;
reg [31:0] main_133_136_reg;
reg [31:0] main_133_expDiff0ii;
reg [31:0] main_133_expDiff0ii_reg;
reg [31:0] main_133_137;
reg [31:0] main_133_137_reg;
reg  main_133_138;
reg  main_133_138_reg;
reg  main_139_140;
reg  main_139_140_reg;
reg [63:0] main_141_142;
reg [63:0] main_141_142_reg;
reg [63:0] main_141_143;
reg [63:0] main_141_143_reg;
reg [31:0] main_141_144;
reg [31:0] main_141_144_reg;
reg [63:0] main_141_145;
reg [63:0] main_141_145_reg;
reg [63:0] main_141_146;
reg [63:0] main_141_146_reg;
reg  main_141_147;
reg  main_141_147_reg;
reg [63:0] main_141_148;
reg [63:0] main_141_148_reg;
reg [63:0] main_141_149;
reg [63:0] main_141_149_reg;
reg  main_150_151;
reg  main_150_151_reg;
reg [63:0] main_150_152;
reg [63:0] main_150_152_reg;
reg [63:0] main_shift64RightJammingexit3ii_z1i2ii;
reg [63:0] main_shift64RightJammingexit3ii_z1i2ii_reg;
reg [63:0] main_shift64RightJammingexit3ii_153;
reg [63:0] main_shift64RightJammingexit3ii_153_reg;
reg [63:0] main_154_aSigii1;
reg [63:0] main_154_aSigii1_reg;
reg [63:0] main_154_bSigii0;
reg [63:0] main_154_bSigii0_reg;
reg [31:0] main_154_bExp1ii;
reg [31:0] main_154_bExp1ii_reg;
reg [63:0] main_154_155;
reg [63:0] main_154_155_reg;
reg [31:0] main_154_156;
reg [31:0] main_154_156_reg;
reg  main_157_158;
reg  main_157_158_reg;
reg [62:0] main_float64_is_signaling_nanexit1iii_159;
reg [62:0] main_float64_is_signaling_nanexit1iii_159_reg;
reg  main_float64_is_signaling_nanexit1iii_160;
reg  main_float64_is_signaling_nanexit1iii_160_reg;
reg [63:0] main_float64_is_signaling_nanexit1iii_55v;
reg [63:0] main_float64_is_signaling_nanexit1iii_55v_reg;
reg [63:0] main_float64_is_signaling_nanexit1iii_55;
reg [63:0] main_float64_is_signaling_nanexit1iii_55_reg;
reg  main_161_162;
reg  main_161_162_reg;
reg [63:0] main_161_163;
reg [63:0] main_161_163_reg;
reg [63:0] main_161_bSigii1;
reg [63:0] main_161_bSigii1_reg;
reg [31:0] main_161_164;
reg [31:0] main_161_164_reg;
reg [31:0] main_161_expDiff1ii;
reg [31:0] main_161_expDiff1ii_reg;
reg  main_161_165;
reg  main_161_165_reg;
reg  main_166_167;
reg  main_166_167_reg;
reg [63:0] main_168_169;
reg [63:0] main_168_169_reg;
reg [63:0] main_168_170;
reg [63:0] main_168_170_reg;
reg [31:0] main_168_171;
reg [31:0] main_168_171_reg;
reg [31:0] main_168_172;
reg [31:0] main_168_172_reg;
reg [63:0] main_168_173;
reg [63:0] main_168_173_reg;
reg [63:0] main_168_174;
reg [63:0] main_168_174_reg;
reg  main_168_175;
reg  main_168_175_reg;
reg [63:0] main_168_176;
reg [63:0] main_168_176_reg;
reg [63:0] main_168_177;
reg [63:0] main_168_177_reg;
reg  main_178_179;
reg  main_178_179_reg;
reg [63:0] main_178_180;
reg [63:0] main_178_180_reg;
reg [63:0] main_shift64RightJammingexitii_z1iii;
reg [63:0] main_shift64RightJammingexitii_z1iii_reg;
reg [63:0] main_shift64RightJammingexitii_181;
reg [63:0] main_shift64RightJammingexitii_181_reg;
reg [63:0] main_182_aSigii2;
reg [63:0] main_182_aSigii2_reg;
reg [63:0] main_182_bSigii2;
reg [63:0] main_182_bSigii2_reg;
reg [31:0] main_182_aExp1ii;
reg [31:0] main_182_aExp1ii_reg;
reg [63:0] main_182_183;
reg [63:0] main_182_183_reg;
reg [31:0] main_184_zExp0ii;
reg [31:0] main_184_zExp0ii_reg;
reg [31:0] main_184_01ii;
reg [31:0] main_184_01ii_reg;
reg [63:0] main_184_zSig0ii;
reg [63:0] main_184_zSig0ii_reg;
reg [31:0] main_184_185;
reg [31:0] main_184_185_reg;
reg  main_184_186;
reg  main_184_186_reg;
reg [63:0] main_184_187;
reg [63:0] main_184_187_reg;
reg [31:0] main_184_56;
reg [31:0] main_184_56_reg;
reg [63:0] main_184_zSig0ii_var1;
reg [63:0] main_184_zSig0ii_var1_reg;
reg [31:0] main_184_188;
reg [31:0] main_184_188_reg;
reg  main_184_189;
reg  main_184_189_reg;
reg [31:0] main_184_190;
reg [31:0] main_184_190_reg;
reg [31:0] main_184_shiftCount0iiiii;
reg [31:0] main_184_shiftCount0iiiii_reg;
reg [31:0] main_184_0iiiii;
reg [31:0] main_184_0iiiii_reg;
reg  main_184_191;
reg  main_184_191_reg;
reg [31:0] main_192_193;
reg [31:0] main_192_193_reg;
reg [31:0] main_192_194;
reg [31:0] main_192_194_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_1iiiii;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_1iiiii_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_195;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_195_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeRoundAndPackFloat64exitii_196;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeRoundAndPackFloat64exitii_196_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_197;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_197_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_198;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_198_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_199;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_199_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_200;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_200_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_201;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_201_reg;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_202;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_202_reg;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_203;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_203_reg;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_204;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_204_reg;
reg [63:0] main_addFloat64Sigsexiti_0i;
reg [63:0] main_addFloat64Sigsexiti_0i_reg;
reg [63:0] main_addFloat64Sigsexiti_205;
reg [63:0] main_addFloat64Sigsexiti_205_reg;
reg  main_addFloat64Sigsexiti_206;
reg  main_addFloat64Sigsexiti_206_reg;
reg [31:0] main_addFloat64Sigsexiti_207;
reg [31:0] main_addFloat64Sigsexiti_207_reg;
reg [31:0] main_addFloat64Sigsexiti_208;
reg [31:0] main_addFloat64Sigsexiti_208_reg;
reg [31:0] main_addFloat64Sigsexiti_210;
reg [31:0] main_addFloat64Sigsexiti_210_reg;
reg  main_211_213;
reg  main_211_213_reg;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [5:0] a_input_address_a;
reg  a_input_write_enable_a;
wire [63:0] a_input_in_a;
wire [63:0] a_input_out_a;
wire [5:0] a_input_address_b;
wire  a_input_write_enable_b;
wire [63:0] a_input_in_b;
wire [63:0] a_input_out_b;
reg [5:0] b_input_address_a;
reg  b_input_write_enable_a;
wire [63:0] b_input_in_a;
wire [63:0] b_input_out_a;
wire [5:0] b_input_address_b;
wire  b_input_write_enable_b;
wire [63:0] b_input_in_b;
wire [63:0] b_input_out_b;
reg [5:0] z_output_address_a;
reg  z_output_write_enable_a;
wire [63:0] z_output_in_a;
wire [63:0] z_output_out_a;
wire [5:0] z_output_address_b;
wire  z_output_write_enable_b;
wire [63:0] z_output_in_b;
wire [63:0] z_output_out_b;
reg [7:0] countLeadingZeros32countLeadingZerosHigh_address_a;
reg  countLeadingZeros32countLeadingZerosHigh_write_enable_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_a;
wire [7:0] countLeadingZeros32countLeadingZerosHigh_address_b;
wire  countLeadingZeros32countLeadingZerosHigh_write_enable_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_b;
reg  roundAndPackFloat64_start;
reg [31:0] roundAndPackFloat64_arg_zSign;
reg [31:0] roundAndPackFloat64_arg_zExp;
reg [63:0] roundAndPackFloat64_arg_zSig;
wire  roundAndPackFloat64_memory_controller_enable_a;
wire  roundAndPackFloat64_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] roundAndPackFloat64_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_out_a;
wire [1:0] roundAndPackFloat64_memory_controller_size_a;
wire  roundAndPackFloat64_memory_controller_enable_b;
wire  roundAndPackFloat64_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] roundAndPackFloat64_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_out_b;
wire [1:0] roundAndPackFloat64_memory_controller_size_b;
reg  roundAndPackFloat64_memory_controller_waitrequest;
reg  roundAndPackFloat64_finish_final;
reg  roundAndPackFloat64_finish_reg;
wire  roundAndPackFloat64_finish;
wire [63:0] roundAndPackFloat64_return_val;
reg [63:0] roundAndPackFloat64_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;


roundAndPackFloat64 roundAndPackFloat64 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (roundAndPackFloat64_memory_controller_enable_a),
	.memory_controller_address_a (roundAndPackFloat64_memory_controller_address_a),
	.memory_controller_write_enable_a (roundAndPackFloat64_memory_controller_write_enable_a),
	.memory_controller_in_a (roundAndPackFloat64_memory_controller_in_a),
	.memory_controller_size_a (roundAndPackFloat64_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (roundAndPackFloat64_memory_controller_enable_b),
	.memory_controller_address_b (roundAndPackFloat64_memory_controller_address_b),
	.memory_controller_write_enable_b (roundAndPackFloat64_memory_controller_write_enable_b),
	.memory_controller_in_b (roundAndPackFloat64_memory_controller_in_b),
	.memory_controller_size_b (roundAndPackFloat64_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (roundAndPackFloat64_start),
	.finish (roundAndPackFloat64_finish),
	.return_val (roundAndPackFloat64_return_val),
	.arg_zSign (roundAndPackFloat64_arg_zSign),
	.arg_zExp (roundAndPackFloat64_arg_zExp),
	.arg_zSig (roundAndPackFloat64_arg_zSig)
);

defparam
	roundAndPackFloat64.tag_offset = tag_offset;

// Local Rams


// @a_input = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4611686018427387904, i64 4607182418800017408, i64 46071824188000174...
rom_dual_port a_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( a_input_address_a ),
	.address_b( a_input_address_b ),
	.q_a( a_input_out_a ),
	.q_b( a_input_out_b)
);
defparam a_input.width_a = 64;
defparam a_input.width_b = 64;
defparam a_input.widthad_a = 6;
defparam a_input.widthad_b = 6;
defparam a_input.numwords_a = 46;
defparam a_input.numwords_b = 46;
defparam a_input.latency = 1;
defparam a_input.init_file = "a_input.mif";


// @b_input = internal unnamed_addr constant [46 x i64] [i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656, i64 9221120237041090560, i64 9218868437227405312, i64 4611686018...
rom_dual_port b_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( b_input_address_a ),
	.address_b( b_input_address_b ),
	.q_a( b_input_out_a ),
	.q_b( b_input_out_b)
);
defparam b_input.width_a = 64;
defparam b_input.width_b = 64;
defparam b_input.widthad_a = 6;
defparam b_input.widthad_b = 6;
defparam b_input.numwords_a = 46;
defparam b_input.numwords_b = 46;
defparam b_input.latency = 1;
defparam b_input.init_file = "b_input.mif";


// @z_output = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4615063718147915776, i64 9221120237041090560, i64 9218868437227405...
rom_dual_port z_output (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( z_output_address_a ),
	.address_b( z_output_address_b ),
	.q_a( z_output_out_a ),
	.q_b( z_output_out_b)
);
defparam z_output.width_a = 64;
defparam z_output.width_b = 64;
defparam z_output.widthad_a = 6;
defparam z_output.widthad_b = 6;
defparam z_output.numwords_a = 46;
defparam z_output.numwords_b = 46;
defparam z_output.latency = 1;
defparam z_output.init_file = "z_output.mif";


// @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4,...
rom_dual_port countLeadingZeros32countLeadingZerosHigh (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( countLeadingZeros32countLeadingZerosHigh_address_a ),
	.address_b( countLeadingZeros32countLeadingZerosHigh_address_b ),
	.q_a( countLeadingZeros32countLeadingZerosHigh_out_a ),
	.q_b( countLeadingZeros32countLeadingZerosHigh_out_b)
);
defparam countLeadingZeros32countLeadingZerosHigh.width_a = 32;
defparam countLeadingZeros32countLeadingZerosHigh.width_b = 32;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_a = 8;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_b = 8;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_a = 256;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_b = 256;
defparam countLeadingZeros32countLeadingZerosHigh.latency = 1;
defparam countLeadingZeros32countLeadingZerosHigh.init_file = "countLeadingZeros32countLeadingZerosHigh.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %209 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([65 x i8]* @.str, i32 0, i32 0), i64 %4, i64 %5, i64 %205, i64 %.0.i) #2*/
	if ((cur_state == LEGUP_F_main_BB_addFloat64Sigsexiti_76)) begin
		$write("a_input=%0x b_input=%0x expected=%0x output=%0x\n", $signed(main_3_4_reg), $signed(main_3_5_reg), $signed(main_addFloat64Sigsexiti_205), $signed(main_addFloat64Sigsexiti_0i_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_3_4_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_3_5_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_addFloat64Sigsexiti_205) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_addFloat64Sigsexiti_0i_reg) === 1'bX) finish <= 0;
	end
	/* main: %211*/
	/*   %212 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %main_result.0) #2*/
	if ((cur_state == LEGUP_F_main_BB__211_77)) begin
		$write("Result: %d\n", $signed(main_1_main_result0_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_main_result0_reg) === 1'bX) finish <= 0;
	end
	/* main: %214*/
	/*   %215 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__214_78)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %216*/
	/*   %217 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__216_79)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__100_35:
	if ((main_100_103 == 1'd1))
		next_state = LEGUP_F_main_BB__104_36;
	else if ((main_100_103 == 1'd0))
		next_state = LEGUP_F_main_BB__106_37;
LEGUP_F_main_BB__104_36:
	if ((main_104_105 == 1'd1))
		next_state = LEGUP_F_main_BB__157_60;
	else if ((main_104_105 == 1'd0))
		next_state = LEGUP_F_main_BB__161_63;
LEGUP_F_main_BB__106_37:
	if ((main_106_107 == 1'd1))
		next_state = LEGUP_F_main_BB__108_38;
	else if ((main_106_107 == 1'd0))
		next_state = LEGUP_F_main_BB__110_39;
LEGUP_F_main_BB__108_38:
	if ((main_108_109 == 1'd1))
		next_state = LEGUP_F_main_BB__124_50;
	else if ((main_108_109 == 1'd0))
		next_state = LEGUP_F_main_BB__133_54;
LEGUP_F_main_BB__110_39:
	if ((main_3_13_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__111_40;
	else if ((main_3_13_reg == 32'd0))
		next_state = LEGUP_F_main_BB__119_47;
	else if ((main_3_13_reg != 32'd2047) && (main_3_13_reg != 32'd0))
		next_state = LEGUP_F_main_BB__120_48;
LEGUP_F_main_BB__111_40:
	if ((main_111_113 == 1'd1))
		next_state = LEGUP_F_main_BB__116_43;
	else if ((main_111_113 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_41;
LEGUP_F_main_BB__116_43:
		next_state = LEGUP_F_main_BB__116_44;
LEGUP_F_main_BB__116_44:
		next_state = LEGUP_F_main_BB__116_45;
LEGUP_F_main_BB__116_45:
		next_state = LEGUP_F_main_BB__116_46;
LEGUP_F_main_BB__116_46:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB__119_47:
		next_state = LEGUP_F_main_BB__120_48;
LEGUP_F_main_BB__120_48:
	if ((main_120_121 == 1'd1))
		next_state = LEGUP_F_main_BB__182_68;
	else if ((main_120_121 == 1'd0))
		next_state = LEGUP_F_main_BB__122_49;
LEGUP_F_main_BB__122_49:
	if ((main_122_123 == 1'd1))
		next_state = LEGUP_F_main_BB__154_59;
	else if ((main_122_123 == 1'd0))
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB__124_50:
	if ((main_124_125 == 1'd1))
		next_state = LEGUP_F_main_BB__128_53;
	else if ((main_124_125 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51;
LEGUP_F_main_BB__128_53:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB__133_54:
	if ((main_133_138 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3ii_58;
	else if ((main_133_138 == 1'd0))
		next_state = LEGUP_F_main_BB__139_55;
LEGUP_F_main_BB__139_55:
	if ((main_139_140 == 1'd1))
		next_state = LEGUP_F_main_BB__141_56;
	else if ((main_139_140 == 1'd0))
		next_state = LEGUP_F_main_BB__150_57;
LEGUP_F_main_BB__141_56:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3ii_58;
LEGUP_F_main_BB__150_57:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3ii_58;
LEGUP_F_main_BB__154_59:
		next_state = LEGUP_F_main_BB__184_69;
LEGUP_F_main_BB__157_60:
	if ((main_157_158 == 1'd1))
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
	else if ((main_157_158 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61;
LEGUP_F_main_BB__161_63:
	if ((main_161_165 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_67;
	else if ((main_161_165 == 1'd0))
		next_state = LEGUP_F_main_BB__166_64;
LEGUP_F_main_BB__166_64:
	if ((main_166_167 == 1'd1))
		next_state = LEGUP_F_main_BB__168_65;
	else if ((main_166_167 == 1'd0))
		next_state = LEGUP_F_main_BB__178_66;
LEGUP_F_main_BB__168_65:
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_67;
LEGUP_F_main_BB__178_66:
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_67;
LEGUP_F_main_BB__182_68:
		next_state = LEGUP_F_main_BB__184_69;
LEGUP_F_main_BB__184_69:
	if ((main_184_191 == 1'd1))
		next_state = LEGUP_F_main_BB__192_70;
	else if ((main_184_191 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71;
LEGUP_F_main_BB__18_4:
	if ((main_18_21 == 1'd1))
		next_state = LEGUP_F_main_BB__22_5;
	else if ((main_18_21 == 1'd0))
		next_state = LEGUP_F_main_BB__48_13;
LEGUP_F_main_BB__192_70:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71;
LEGUP_F_main_BB__1_1:
	if ((main_1_exitcond1 == 1'd1))
		next_state = LEGUP_F_main_BB__211_77;
	else if ((main_1_exitcond1 == 1'd0))
		next_state = LEGUP_F_main_BB__3_2;
LEGUP_F_main_BB__211_77:
	if ((main_211_213 == 1'd1))
		next_state = LEGUP_F_main_BB__214_78;
	else if ((main_211_213 == 1'd0))
		next_state = LEGUP_F_main_BB__216_79;
LEGUP_F_main_BB__214_78:
		next_state = LEGUP_F_main_BB__218_80;
LEGUP_F_main_BB__216_79:
		next_state = LEGUP_F_main_BB__218_80;
LEGUP_F_main_BB__218_80:
		next_state = LEGUP_0;
LEGUP_F_main_BB__22_5:
	if ((main_22_23 == 1'd1))
		next_state = LEGUP_F_main_BB__24_6;
	else if ((main_22_23 == 1'd0))
		next_state = LEGUP_F_main_BB__28_9;
LEGUP_F_main_BB__24_6:
	if ((main_24_25 == 1'd1))
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
	else if ((main_24_25 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_7;
LEGUP_F_main_BB__28_9:
	if ((main_28_32 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit6ii_29;
	else if ((main_28_32 == 1'd0))
		next_state = LEGUP_F_main_BB__33_10;
LEGUP_F_main_BB__33_10:
	if ((main_33_34 == 1'd1))
		next_state = LEGUP_F_main_BB__35_11;
	else if ((main_33_34 == 1'd0))
		next_state = LEGUP_F_main_BB__45_12;
LEGUP_F_main_BB__35_11:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit6ii_29;
LEGUP_F_main_BB__3_2:
		next_state = LEGUP_F_main_BB__3_3;
LEGUP_F_main_BB__3_3:
	if ((main_3_10 == 1'd1))
		next_state = LEGUP_F_main_BB__18_4;
	else if ((main_3_10 == 1'd0))
		next_state = LEGUP_F_main_BB__100_35;
LEGUP_F_main_BB__45_12:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit6ii_29;
LEGUP_F_main_BB__48_13:
	if ((main_48_49 == 1'd1))
		next_state = LEGUP_F_main_BB__50_14;
	else if ((main_48_49 == 1'd0))
		next_state = LEGUP_F_main_BB__79_23;
LEGUP_F_main_BB__50_14:
	if ((main_50_51 == 1'd1))
		next_state = LEGUP_F_main_BB__52_15;
	else if ((main_50_51 == 1'd0))
		next_state = LEGUP_F_main_BB__59_19;
LEGUP_F_main_BB__52_15:
	if ((main_52_53 == 1'd1))
		next_state = LEGUP_F_main_BB__56_18;
	else if ((main_52_53 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16;
LEGUP_F_main_BB__56_18:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB__59_19:
	if ((main_59_64 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit6ii_29;
	else if ((main_59_64 == 1'd0))
		next_state = LEGUP_F_main_BB__65_20;
LEGUP_F_main_BB__65_20:
	if ((main_65_66 == 1'd1))
		next_state = LEGUP_F_main_BB__67_21;
	else if ((main_65_66 == 1'd0))
		next_state = LEGUP_F_main_BB__76_22;
LEGUP_F_main_BB__67_21:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit6ii_29;
LEGUP_F_main_BB__76_22:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit6ii_29;
LEGUP_F_main_BB__79_23:
	if ((main_3_13_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__80_24;
	else if ((main_3_13_reg == 32'd0))
		next_state = LEGUP_F_main_BB__85_27;
	else if ((main_3_13_reg != 32'd2047) && (main_3_13_reg != 32'd0))
		next_state = LEGUP_F_main_BB__90_28;
LEGUP_F_main_BB__80_24:
	if ((main_80_82 == 1'd1))
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
	else if ((main_80_82 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_25;
LEGUP_F_main_BB__85_27:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB__90_28:
		next_state = LEGUP_F_main_BB__98_32;
LEGUP_F_main_BB__98_32:
		next_state = LEGUP_function_call_33;
LEGUP_F_main_BB__98_34:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB_addFloat64Sigsexiti_75:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_76;
LEGUP_F_main_BB_addFloat64Sigsexiti_76:
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_52;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_52:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_7:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_8;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_8:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_41:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_42;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_42:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_25:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_26;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_26:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62;
LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72:
		next_state = LEGUP_function_call_73;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74:
		next_state = LEGUP_F_main_BB_addFloat64Sigsexiti_75;
LEGUP_F_main_BB_shift64RightJammingexit3ii_58:
		next_state = LEGUP_F_main_BB__154_59;
LEGUP_F_main_BB_shift64RightJammingexit6ii_29:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit6ii_30;
LEGUP_F_main_BB_shift64RightJammingexit6ii_30:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit6ii_31;
LEGUP_F_main_BB_shift64RightJammingexit6ii_31:
		next_state = LEGUP_F_main_BB__98_32;
LEGUP_F_main_BB_shift64RightJammingexitii_67:
		next_state = LEGUP_F_main_BB__182_68;
LEGUP_function_call_33:
	if ((roundAndPackFloat64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__98_34;
LEGUP_function_call_73:
	if ((roundAndPackFloat64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %main_result.0 = phi i32 [ 0, %0 ], [ %208, %addFloat64Sigs.exit.i ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result0 = 32'd0;
	end
	/* main: %1*/
	/*   %main_result.0 = phi i32 [ 0, %0 ], [ %208, %addFloat64Sigs.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_addFloat64Sigsexiti_76) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_main_result0 = main_addFloat64Sigsexiti_208;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %main_result.0 = phi i32 [ 0, %0 ], [ %208, %addFloat64Sigs.exit.i ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result0_reg <= main_1_main_result0;
		if (start == 1'b0 && ^(main_1_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result0_reg"); $finish; end
	end
	/* main: %1*/
	/*   %main_result.0 = phi i32 [ 0, %0 ], [ %208, %addFloat64Sigs.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_addFloat64Sigsexiti_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_main_result0_reg <= main_1_main_result0;
		if (start == 1'b0 && ^(main_1_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %210, %addFloat64Sigs.exit.i ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2 = 32'd0;
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %210, %addFloat64Sigs.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_addFloat64Sigsexiti_76) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_2 = main_addFloat64Sigsexiti_210_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %210, %addFloat64Sigs.exit.i ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %210, %addFloat64Sigs.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_addFloat64Sigsexiti_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [46 x i64]* @z_output, i32 0, i32 %2*/
		main_1_scevgep = (1'd0 | (8 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [46 x i64]* @z_output, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep_reg <= main_1_scevgep;
		if (start == 1'b0 && ^(main_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond1 = icmp eq i32 %2, 46*/
		main_1_exitcond1 = (main_1_2_reg == 32'd46);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond1 = icmp eq i32 %2, 46*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_exitcond1_reg <= main_1_exitcond1;
		if (start == 1'b0 && ^(main_1_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep3 = getelementptr [46 x i64]* @a_input, i32 0, i32 %2*/
		main_3_scevgep3 = (1'd0 | (8 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep3 = getelementptr [46 x i64]* @a_input, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__3_2)) begin
		main_3_scevgep3_reg <= main_3_scevgep3;
		if (start == 1'b0 && ^(main_3_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep2 = getelementptr [46 x i64]* @b_input, i32 0, i32 %2*/
		main_3_scevgep2 = (1'd0 | (8 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep2 = getelementptr [46 x i64]* @b_input, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__3_2)) begin
		main_3_scevgep2_reg <= main_3_scevgep2;
		if (start == 1'b0 && ^(main_3_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %4 = load i64* %scevgep3, align 8*/
		main_3_4 = a_input_out_a;
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %4 = load i64* %scevgep3, align 8*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_4_reg <= main_3_4;
		if (start == 1'b0 && ^(main_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %5 = load i64* %scevgep2, align 8*/
		main_3_5 = b_input_out_a;
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %5 = load i64* %scevgep2, align 8*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_5_reg <= main_3_5;
		if (start == 1'b0 && ^(main_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %6 = lshr i64 %4, 63*/
		main_3_6 = (main_3_4 >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %6 = lshr i64 %4, 63*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_6_reg <= main_3_6;
		if (start == 1'b0 && ^(main_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %7 = trunc i64 %6 to i32*/
		main_3_7 = main_3_6[31:0];
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %7 = trunc i64 %6 to i32*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_7_reg <= main_3_7;
		if (start == 1'b0 && ^(main_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %8 = lshr i64 %5, 63*/
		main_3_8 = (main_3_5 >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %8 = lshr i64 %5, 63*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_8_reg <= main_3_8;
		if (start == 1'b0 && ^(main_3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %9 = trunc i64 %8 to i32*/
		main_3_9 = main_3_8[31:0];
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %9 = trunc i64 %8 to i32*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_9_reg <= main_3_9;
		if (start == 1'b0 && ^(main_3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %10 = icmp eq i32 %7, %9*/
		main_3_10 = (main_3_7 == main_3_9);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %10 = icmp eq i32 %7, %9*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_10_reg <= main_3_10;
		if (start == 1'b0 && ^(main_3_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %11 = and i64 %4, 4503599627370495*/
		main_3_11 = (main_3_4 & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %11 = and i64 %4, 4503599627370495*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_11_reg <= main_3_11;
		if (start == 1'b0 && ^(main_3_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %12 = lshr i64 %4, 52*/
		main_3_12 = (main_3_4 >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %12 = lshr i64 %4, 52*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_12_reg <= main_3_12;
		if (start == 1'b0 && ^(main_3_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %.tr = trunc i64 %12 to i32*/
		main_3_tr = main_3_12[31:0];
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %.tr = trunc i64 %12 to i32*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_tr_reg <= main_3_tr;
		if (start == 1'b0 && ^(main_3_tr) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_tr_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %13 = and i32 %.tr, 2047*/
		main_3_13 = (main_3_tr & 32'd2047);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %13 = and i32 %.tr, 2047*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_13_reg <= main_3_13;
		if (start == 1'b0 && ^(main_3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %14 = and i64 %5, 4503599627370495*/
		main_3_14 = (main_3_5 & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %14 = and i64 %5, 4503599627370495*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_14_reg <= main_3_14;
		if (start == 1'b0 && ^(main_3_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %15 = lshr i64 %5, 52*/
		main_3_15 = (main_3_5 >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %15 = lshr i64 %5, 52*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_15_reg <= main_3_15;
		if (start == 1'b0 && ^(main_3_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %.tr1 = trunc i64 %15 to i32*/
		main_3_tr1 = main_3_15[31:0];
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %.tr1 = trunc i64 %15 to i32*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_tr1_reg <= main_3_tr1;
		if (start == 1'b0 && ^(main_3_tr1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_tr1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %16 = and i32 %.tr1, 2047*/
		main_3_16 = (main_3_tr1 & 32'd2047);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %16 = and i32 %.tr1, 2047*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_16_reg <= main_3_16;
		if (start == 1'b0 && ^(main_3_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %17 = sub nsw i32 %13, %16*/
		main_3_17 = (main_3_13 - main_3_16);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %17 = sub nsw i32 %13, %16*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_17_reg <= main_3_17;
		if (start == 1'b0 && ^(main_3_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %19 = shl nuw nsw i64 %11, 9*/
		main_18_19 = (main_3_11_reg <<< (64'd9 % 64'd64));
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %19 = shl nuw nsw i64 %11, 9*/
	if ((cur_state == LEGUP_F_main_BB__18_4)) begin
		main_18_19_reg <= main_18_19;
		if (start == 1'b0 && ^(main_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %20 = shl nuw nsw i64 %14, 9*/
		main_18_20 = (main_3_14_reg <<< (64'd9 % 64'd64));
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %20 = shl nuw nsw i64 %14, 9*/
	if ((cur_state == LEGUP_F_main_BB__18_4)) begin
		main_18_20_reg <= main_18_20;
		if (start == 1'b0 && ^(main_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %21 = icmp sgt i32 %17, 0*/
		main_18_21 = ($signed(main_3_17_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %21 = icmp sgt i32 %17, 0*/
	if ((cur_state == LEGUP_F_main_BB__18_4)) begin
		main_18_21_reg <= main_18_21;
		if (start == 1'b0 && ^(main_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %22*/
	/*   %23 = icmp eq i32 %13, 2047*/
		main_22_23 = (main_3_13_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %22*/
	/*   %23 = icmp eq i32 %13, 2047*/
	if ((cur_state == LEGUP_F_main_BB__22_5)) begin
		main_22_23_reg <= main_22_23;
		if (start == 1'b0 && ^(main_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %24*/
	/*   %25 = icmp eq i64 %11, 0*/
		main_24_25 = (main_3_11_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %24*/
	/*   %25 = icmp eq i64 %11, 0*/
	if ((cur_state == LEGUP_F_main_BB__24_6)) begin
		main_24_25_reg <= main_24_25;
		if (start == 1'b0 && ^(main_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i3.i*/
	/*   %26 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i7i3i_26 = main_3_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i3.i*/
	/*   %26 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_7)) begin
		main_float64_is_signaling_nanexit1i7i3i_26_reg <= main_float64_is_signaling_nanexit1i7i3i_26;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i7i3i_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i7i3i_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i3.i*/
	/*   %27 = icmp ugt i63 %26, -4503599627370496*/
		main_float64_is_signaling_nanexit1i7i3i_27 = (main_float64_is_signaling_nanexit1i7i3i_26 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i3.i*/
	/*   %27 = icmp ugt i63 %26, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_7)) begin
		main_float64_is_signaling_nanexit1i7i3i_27_reg <= main_float64_is_signaling_nanexit1i7i3i_27;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i7i3i_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i7i3i_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i3.i*/
	/*   %..v = select i1 %27, i64 %5, i64 %4*/
		main_float64_is_signaling_nanexit1i7i3i_v = (main_float64_is_signaling_nanexit1i7i3i_27_reg ? main_3_5_reg : main_3_4_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i3.i*/
	/*   %..v = select i1 %27, i64 %5, i64 %4*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_8)) begin
		main_float64_is_signaling_nanexit1i7i3i_v_reg <= main_float64_is_signaling_nanexit1i7i3i_v;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i7i3i_v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i7i3i_v_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i3.i*/
	/*   %. = or i64 %..v, 2251799813685248*/
		main_float64_is_signaling_nanexit1i7i3i_ = (main_float64_is_signaling_nanexit1i7i3i_v | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i3.i*/
	/*   %. = or i64 %..v, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_8)) begin
		main_float64_is_signaling_nanexit1i7i3i__reg <= main_float64_is_signaling_nanexit1i7i3i_;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i7i3i_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i7i3i__reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %29 = icmp eq i32 %16, 0*/
		main_28_29 = (main_3_16_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %29 = icmp eq i32 %16, 0*/
	if ((cur_state == LEGUP_F_main_BB__28_9)) begin
		main_28_29_reg <= main_28_29;
		if (start == 1'b0 && ^(main_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %30 = or i64 %20, 2305843009213693952*/
		main_28_30 = (main_18_20_reg | 64'd2305843009213693952);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %30 = or i64 %20, 2305843009213693952*/
	if ((cur_state == LEGUP_F_main_BB__28_9)) begin
		main_28_30_reg <= main_28_30;
		if (start == 1'b0 && ^(main_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %bSig.i2.i.0 = select i1 %29, i64 %20, i64 %30*/
		main_28_bSigi2i0 = (main_28_29 ? main_18_20_reg : main_28_30);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %bSig.i2.i.0 = select i1 %29, i64 %20, i64 %30*/
	if ((cur_state == LEGUP_F_main_BB__28_9)) begin
		main_28_bSigi2i0_reg <= main_28_bSigi2i0;
		if (start == 1'b0 && ^(main_28_bSigi2i0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_bSigi2i0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %31 = sext i1 %29 to i32*/
		main_28_31 = $signed(main_28_29);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %31 = sext i1 %29 to i32*/
	if ((cur_state == LEGUP_F_main_BB__28_9)) begin
		main_28_31_reg <= main_28_31;
		if (start == 1'b0 && ^(main_28_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %expDiff.0.i6.i = add nsw i32 %17, %31*/
		main_28_expDiff0i6i = (main_3_17_reg + main_28_31);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %expDiff.0.i6.i = add nsw i32 %17, %31*/
	if ((cur_state == LEGUP_F_main_BB__28_9)) begin
		main_28_expDiff0i6i_reg <= main_28_expDiff0i6i;
		if (start == 1'b0 && ^(main_28_expDiff0i6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_expDiff0i6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %32 = icmp eq i32 %expDiff.0.i6.i, 0*/
		main_28_32 = (main_28_expDiff0i6i == 32'd0);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %32 = icmp eq i32 %expDiff.0.i6.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__28_9)) begin
		main_28_32_reg <= main_28_32;
		if (start == 1'b0 && ^(main_28_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %34 = icmp slt i32 %expDiff.0.i6.i, 64*/
		main_33_34 = ($signed(main_28_expDiff0i6i_reg) < $signed(32'd64));
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %34 = icmp slt i32 %expDiff.0.i6.i, 64*/
	if ((cur_state == LEGUP_F_main_BB__33_10)) begin
		main_33_34_reg <= main_33_34;
		if (start == 1'b0 && ^(main_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %36 = zext i32 %expDiff.0.i6.i to i64*/
		main_35_36 = main_28_expDiff0i6i_reg;
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %36 = zext i32 %expDiff.0.i6.i to i64*/
	if ((cur_state == LEGUP_F_main_BB__35_11)) begin
		main_35_36_reg <= main_35_36;
		if (start == 1'b0 && ^(main_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %37 = lshr i64 %bSig.i2.i.0, %36*/
		main_35_37 = (main_28_bSigi2i0_reg >>> (main_35_36 % 64'd64));
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %37 = lshr i64 %bSig.i2.i.0, %36*/
	if ((cur_state == LEGUP_F_main_BB__35_11)) begin
		main_35_37_reg <= main_35_37;
		if (start == 1'b0 && ^(main_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %38 = sub nsw i32 0, %expDiff.0.i6.i*/
		main_35_38 = (32'd0 - main_28_expDiff0i6i_reg);
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %38 = sub nsw i32 0, %expDiff.0.i6.i*/
	if ((cur_state == LEGUP_F_main_BB__35_11)) begin
		main_35_38_reg <= main_35_38;
		if (start == 1'b0 && ^(main_35_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %39 = and i32 %38, 63*/
		main_35_39 = (main_35_38 & 32'd63);
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %39 = and i32 %38, 63*/
	if ((cur_state == LEGUP_F_main_BB__35_11)) begin
		main_35_39_reg <= main_35_39;
		if (start == 1'b0 && ^(main_35_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %40 = zext i32 %39 to i64*/
		main_35_40 = main_35_39;
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %40 = zext i32 %39 to i64*/
	if ((cur_state == LEGUP_F_main_BB__35_11)) begin
		main_35_40_reg <= main_35_40;
		if (start == 1'b0 && ^(main_35_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %41 = shl i64 %bSig.i2.i.0, %40*/
		main_35_41 = (main_28_bSigi2i0_reg <<< (main_35_40 % 64'd64));
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %41 = shl i64 %bSig.i2.i.0, %40*/
	if ((cur_state == LEGUP_F_main_BB__35_11)) begin
		main_35_41_reg <= main_35_41;
		if (start == 1'b0 && ^(main_35_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %42 = icmp ne i64 %41, 0*/
		main_35_42 = (main_35_41 != 64'd0);
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %42 = icmp ne i64 %41, 0*/
	if ((cur_state == LEGUP_F_main_BB__35_11)) begin
		main_35_42_reg <= main_35_42;
		if (start == 1'b0 && ^(main_35_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %43 = zext i1 %42 to i64*/
		main_35_43 = main_35_42;
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %43 = zext i1 %42 to i64*/
	if ((cur_state == LEGUP_F_main_BB__35_11)) begin
		main_35_43_reg <= main_35_43;
		if (start == 1'b0 && ^(main_35_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %44 = or i64 %37, %43*/
		main_35_44 = (main_35_37 | main_35_43);
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %44 = or i64 %37, %43*/
	if ((cur_state == LEGUP_F_main_BB__35_11)) begin
		main_35_44_reg <= main_35_44;
		if (start == 1'b0 && ^(main_35_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %45*/
	/*   %46 = icmp ne i64 %bSig.i2.i.0, 0*/
		main_45_46 = (main_28_bSigi2i0_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %46 = icmp ne i64 %bSig.i2.i.0, 0*/
	if ((cur_state == LEGUP_F_main_BB__45_12)) begin
		main_45_46_reg <= main_45_46;
		if (start == 1'b0 && ^(main_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %45*/
	/*   %47 = zext i1 %46 to i64*/
		main_45_47 = main_45_46;
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %47 = zext i1 %46 to i64*/
	if ((cur_state == LEGUP_F_main_BB__45_12)) begin
		main_45_47_reg <= main_45_47;
		if (start == 1'b0 && ^(main_45_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %48*/
	/*   %49 = icmp slt i32 %17, 0*/
		main_48_49 = ($signed(main_3_17_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %48*/
	/*   %49 = icmp slt i32 %17, 0*/
	if ((cur_state == LEGUP_F_main_BB__48_13)) begin
		main_48_49_reg <= main_48_49;
		if (start == 1'b0 && ^(main_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_48_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %51 = icmp eq i32 %16, 2047*/
		main_50_51 = (main_3_16_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %51 = icmp eq i32 %16, 2047*/
	if ((cur_state == LEGUP_F_main_BB__50_14)) begin
		main_50_51_reg <= main_50_51;
		if (start == 1'b0 && ^(main_50_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %53 = icmp eq i64 %14, 0*/
		main_52_53 = (main_3_14_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %53 = icmp eq i64 %14, 0*/
	if ((cur_state == LEGUP_F_main_BB__52_15)) begin
		main_52_53_reg <= main_52_53;
		if (start == 1'b0 && ^(main_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %54 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i1ii_54 = main_3_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %54 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16)) begin
		main_float64_is_signaling_nanexit1i1ii_54_reg <= main_float64_is_signaling_nanexit1i1ii_54;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1ii_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1ii_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %55 = icmp ugt i63 %54, -4503599627370496*/
		main_float64_is_signaling_nanexit1i1ii_55 = (main_float64_is_signaling_nanexit1i1ii_54 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %55 = icmp ugt i63 %54, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16)) begin
		main_float64_is_signaling_nanexit1i1ii_55_reg <= main_float64_is_signaling_nanexit1i1ii_55;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1ii_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1ii_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %.42.v = select i1 %55, i64 %5, i64 %4*/
		main_float64_is_signaling_nanexit1i1ii_42v = (main_float64_is_signaling_nanexit1i1ii_55_reg ? main_3_5_reg : main_3_4_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %.42.v = select i1 %55, i64 %5, i64 %4*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17)) begin
		main_float64_is_signaling_nanexit1i1ii_42v_reg <= main_float64_is_signaling_nanexit1i1ii_42v;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1ii_42v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1ii_42v_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %.42 = or i64 %.42.v, 2251799813685248*/
		main_float64_is_signaling_nanexit1i1ii_42 = (main_float64_is_signaling_nanexit1i1ii_42v | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %.42 = or i64 %.42.v, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17)) begin
		main_float64_is_signaling_nanexit1i1ii_42_reg <= main_float64_is_signaling_nanexit1i1ii_42;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1ii_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1ii_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %57 = shl nuw i64 %6, 63*/
		main_56_57 = (main_3_6_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %57 = shl nuw i64 %6, 63*/
	if ((cur_state == LEGUP_F_main_BB__56_18)) begin
		main_56_57_reg <= main_56_57;
		if (start == 1'b0 && ^(main_56_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %58 = or i64 %57, 9218868437227405312*/
		main_56_58 = (main_56_57 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %58 = or i64 %57, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__56_18)) begin
		main_56_58_reg <= main_56_58;
		if (start == 1'b0 && ^(main_56_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %59*/
	/*   %60 = icmp eq i32 %13, 0*/
		main_59_60 = (main_3_13_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %60 = icmp eq i32 %13, 0*/
	if ((cur_state == LEGUP_F_main_BB__59_19)) begin
		main_59_60_reg <= main_59_60;
		if (start == 1'b0 && ^(main_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %59*/
	/*   %61 = or i64 %19, 2305843009213693952*/
		main_59_61 = (main_18_19_reg | 64'd2305843009213693952);
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %61 = or i64 %19, 2305843009213693952*/
	if ((cur_state == LEGUP_F_main_BB__59_19)) begin
		main_59_61_reg <= main_59_61;
		if (start == 1'b0 && ^(main_59_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %59*/
	/*   %aSig.i1.i.0 = select i1 %60, i64 %19, i64 %61*/
		main_59_aSigi1i0 = (main_59_60 ? main_18_19_reg : main_59_61);
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %aSig.i1.i.0 = select i1 %60, i64 %19, i64 %61*/
	if ((cur_state == LEGUP_F_main_BB__59_19)) begin
		main_59_aSigi1i0_reg <= main_59_aSigi1i0;
		if (start == 1'b0 && ^(main_59_aSigi1i0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_aSigi1i0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %59*/
	/*   %62 = zext i1 %60 to i32*/
		main_59_62 = main_59_60;
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %62 = zext i1 %60 to i32*/
	if ((cur_state == LEGUP_F_main_BB__59_19)) begin
		main_59_62_reg <= main_59_62;
		if (start == 1'b0 && ^(main_59_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %59*/
	/*   %expDiff.1.i7.i = add nsw i32 %17, %62*/
		main_59_expDiff1i7i = (main_3_17_reg + main_59_62);
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %expDiff.1.i7.i = add nsw i32 %17, %62*/
	if ((cur_state == LEGUP_F_main_BB__59_19)) begin
		main_59_expDiff1i7i_reg <= main_59_expDiff1i7i;
		if (start == 1'b0 && ^(main_59_expDiff1i7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_expDiff1i7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %59*/
	/*   %63 = sub nsw i32 0, %expDiff.1.i7.i*/
		main_59_63 = (32'd0 - main_59_expDiff1i7i);
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %63 = sub nsw i32 0, %expDiff.1.i7.i*/
	if ((cur_state == LEGUP_F_main_BB__59_19)) begin
		main_59_63_reg <= main_59_63;
		if (start == 1'b0 && ^(main_59_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %59*/
	/*   %64 = icmp eq i32 %expDiff.1.i7.i, 0*/
		main_59_64 = (main_59_expDiff1i7i == 32'd0);
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %64 = icmp eq i32 %expDiff.1.i7.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__59_19)) begin
		main_59_64_reg <= main_59_64;
		if (start == 1'b0 && ^(main_59_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %65*/
	/*   %66 = icmp sgt i32 %expDiff.1.i7.i, -64*/
		main_65_66 = ($signed(main_59_expDiff1i7i_reg) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* main: %65*/
	/*   %66 = icmp sgt i32 %expDiff.1.i7.i, -64*/
	if ((cur_state == LEGUP_F_main_BB__65_20)) begin
		main_65_66_reg <= main_65_66;
		if (start == 1'b0 && ^(main_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_65_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %68 = zext i32 %63 to i64*/
		main_67_68 = main_59_63_reg;
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %68 = zext i32 %63 to i64*/
	if ((cur_state == LEGUP_F_main_BB__67_21)) begin
		main_67_68_reg <= main_67_68;
		if (start == 1'b0 && ^(main_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %69 = lshr i64 %aSig.i1.i.0, %68*/
		main_67_69 = (main_59_aSigi1i0_reg >>> (main_67_68 % 64'd64));
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %69 = lshr i64 %aSig.i1.i.0, %68*/
	if ((cur_state == LEGUP_F_main_BB__67_21)) begin
		main_67_69_reg <= main_67_69;
		if (start == 1'b0 && ^(main_67_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %70 = and i32 %expDiff.1.i7.i, 63*/
		main_67_70 = (main_59_expDiff1i7i_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %70 = and i32 %expDiff.1.i7.i, 63*/
	if ((cur_state == LEGUP_F_main_BB__67_21)) begin
		main_67_70_reg <= main_67_70;
		if (start == 1'b0 && ^(main_67_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %71 = zext i32 %70 to i64*/
		main_67_71 = main_67_70;
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %71 = zext i32 %70 to i64*/
	if ((cur_state == LEGUP_F_main_BB__67_21)) begin
		main_67_71_reg <= main_67_71;
		if (start == 1'b0 && ^(main_67_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %72 = shl i64 %aSig.i1.i.0, %71*/
		main_67_72 = (main_59_aSigi1i0_reg <<< (main_67_71 % 64'd64));
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %72 = shl i64 %aSig.i1.i.0, %71*/
	if ((cur_state == LEGUP_F_main_BB__67_21)) begin
		main_67_72_reg <= main_67_72;
		if (start == 1'b0 && ^(main_67_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %73 = icmp ne i64 %72, 0*/
		main_67_73 = (main_67_72 != 64'd0);
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %73 = icmp ne i64 %72, 0*/
	if ((cur_state == LEGUP_F_main_BB__67_21)) begin
		main_67_73_reg <= main_67_73;
		if (start == 1'b0 && ^(main_67_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %74 = zext i1 %73 to i64*/
		main_67_74 = main_67_73;
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %74 = zext i1 %73 to i64*/
	if ((cur_state == LEGUP_F_main_BB__67_21)) begin
		main_67_74_reg <= main_67_74;
		if (start == 1'b0 && ^(main_67_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %75 = or i64 %69, %74*/
		main_67_75 = (main_67_69 | main_67_74);
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %75 = or i64 %69, %74*/
	if ((cur_state == LEGUP_F_main_BB__67_21)) begin
		main_67_75_reg <= main_67_75;
		if (start == 1'b0 && ^(main_67_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %77 = icmp ne i64 %aSig.i1.i.0, 0*/
		main_76_77 = (main_59_aSigi1i0_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %77 = icmp ne i64 %aSig.i1.i.0, 0*/
	if ((cur_state == LEGUP_F_main_BB__76_22)) begin
		main_76_77_reg <= main_76_77;
		if (start == 1'b0 && ^(main_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %78 = zext i1 %77 to i64*/
		main_76_78 = main_76_77;
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %78 = zext i1 %77 to i64*/
	if ((cur_state == LEGUP_F_main_BB__76_22)) begin
		main_76_78_reg <= main_76_78;
		if (start == 1'b0 && ^(main_76_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %81 = or i64 %19, %20*/
		main_80_81 = (main_18_19_reg | main_18_20_reg);
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %81 = or i64 %19, %20*/
	if ((cur_state == LEGUP_F_main_BB__80_24)) begin
		main_80_81_reg <= main_80_81;
		if (start == 1'b0 && ^(main_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %82 = icmp eq i64 %81, 0*/
		main_80_82 = (main_80_81 == 64'd0);
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %82 = icmp eq i64 %81, 0*/
	if ((cur_state == LEGUP_F_main_BB__80_24)) begin
		main_80_82_reg <= main_80_82;
		if (start == 1'b0 && ^(main_80_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i11.i*/
	/*   %83 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1ii11i_83 = main_3_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i11.i*/
	/*   %83 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_25)) begin
		main_float64_is_signaling_nanexit1ii11i_83_reg <= main_float64_is_signaling_nanexit1ii11i_83;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii11i_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii11i_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i11.i*/
	/*   %84 = icmp ugt i63 %83, -4503599627370496*/
		main_float64_is_signaling_nanexit1ii11i_84 = (main_float64_is_signaling_nanexit1ii11i_83 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i11.i*/
	/*   %84 = icmp ugt i63 %83, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_25)) begin
		main_float64_is_signaling_nanexit1ii11i_84_reg <= main_float64_is_signaling_nanexit1ii11i_84;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii11i_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii11i_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i11.i*/
	/*   %.45.v = select i1 %84, i64 %5, i64 %4*/
		main_float64_is_signaling_nanexit1ii11i_45v = (main_float64_is_signaling_nanexit1ii11i_84_reg ? main_3_5_reg : main_3_4_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i11.i*/
	/*   %.45.v = select i1 %84, i64 %5, i64 %4*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_26)) begin
		main_float64_is_signaling_nanexit1ii11i_45v_reg <= main_float64_is_signaling_nanexit1ii11i_45v;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii11i_45v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii11i_45v_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i11.i*/
	/*   %.45 = or i64 %.45.v, 2251799813685248*/
		main_float64_is_signaling_nanexit1ii11i_45 = (main_float64_is_signaling_nanexit1ii11i_45v | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i11.i*/
	/*   %.45 = or i64 %.45.v, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_26)) begin
		main_float64_is_signaling_nanexit1ii11i_45_reg <= main_float64_is_signaling_nanexit1ii11i_45;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii11i_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii11i_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %85*/
	/*   %86 = add nuw nsw i64 %19, %20*/
		main_85_86 = (main_18_19_reg + main_18_20_reg);
end
always @(posedge clk) begin
	/* main: %85*/
	/*   %86 = add nuw nsw i64 %19, %20*/
	if ((cur_state == LEGUP_F_main_BB__85_27)) begin
		main_85_86_reg <= main_85_86;
		if (start == 1'b0 && ^(main_85_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_85_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %85*/
	/*   %87 = lshr exact i64 %86, 9*/
		main_85_87 = (main_85_86 >>> (64'd9 % 64'd64));
end
always @(posedge clk) begin
	/* main: %85*/
	/*   %87 = lshr exact i64 %86, 9*/
	if ((cur_state == LEGUP_F_main_BB__85_27)) begin
		main_85_87_reg <= main_85_87;
		if (start == 1'b0 && ^(main_85_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_85_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %85*/
	/*   %88 = shl nuw i64 %6, 63*/
		main_85_88 = (main_3_6_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %85*/
	/*   %88 = shl nuw i64 %6, 63*/
	if ((cur_state == LEGUP_F_main_BB__85_27)) begin
		main_85_88_reg <= main_85_88;
		if (start == 1'b0 && ^(main_85_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_85_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %85*/
	/*   %89 = or i64 %88, %87*/
		main_85_89 = (main_85_88 | main_85_87);
end
always @(posedge clk) begin
	/* main: %85*/
	/*   %89 = or i64 %88, %87*/
	if ((cur_state == LEGUP_F_main_BB__85_27)) begin
		main_85_89_reg <= main_85_89;
		if (start == 1'b0 && ^(main_85_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_85_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %91 = or i64 %19, 4611686018427387904*/
		main_90_91 = (main_18_19_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %91 = or i64 %19, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__90_28)) begin
		main_90_91_reg <= main_90_91;
		if (start == 1'b0 && ^(main_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %92 = add nuw i64 %91, %20*/
		main_90_92 = (main_90_91 + main_18_20_reg);
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %92 = add nuw i64 %91, %20*/
	if ((cur_state == LEGUP_F_main_BB__90_28)) begin
		main_90_92_reg <= main_90_92;
		if (start == 1'b0 && ^(main_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ]*/
	if ((((cur_state == LEGUP_F_main_BB__28_9) & (memory_controller_waitrequest == 1'd0)) & (main_28_32 == 1'd1))) begin
		main_shift64RightJammingexit6ii_aSigi1i1 = main_18_19_reg;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ]*/
	else if (((cur_state == LEGUP_F_main_BB__35_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_aSigi1i1 = main_18_19_reg;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ]*/
	else if (((cur_state == LEGUP_F_main_BB__45_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_aSigi1i1 = main_18_19_reg;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__59_19) & (memory_controller_waitrequest == 1'd0)) & (main_59_64 == 1'd1))) begin
		main_shift64RightJammingexit6ii_aSigi1i1 = main_59_aSigi1i0;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ]*/
	else if (((cur_state == LEGUP_F_main_BB__67_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_aSigi1i1 = main_67_75;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__76_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit6ii_aSigi1i1 = main_76_78;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ]*/
	if ((((cur_state == LEGUP_F_main_BB__28_9) & (memory_controller_waitrequest == 1'd0)) & (main_28_32 == 1'd1))) begin
		main_shift64RightJammingexit6ii_aSigi1i1_reg <= main_shift64RightJammingexit6ii_aSigi1i1;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_aSigi1i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_aSigi1i1_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB__35_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_aSigi1i1_reg <= main_shift64RightJammingexit6ii_aSigi1i1;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_aSigi1i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_aSigi1i1_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_aSigi1i1_reg <= main_shift64RightJammingexit6ii_aSigi1i1;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_aSigi1i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_aSigi1i1_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ]*/
	if ((((cur_state == LEGUP_F_main_BB__59_19) & (memory_controller_waitrequest == 1'd0)) & (main_59_64 == 1'd1))) begin
		main_shift64RightJammingexit6ii_aSigi1i1_reg <= main_shift64RightJammingexit6ii_aSigi1i1;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_aSigi1i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_aSigi1i1_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB__67_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_aSigi1i1_reg <= main_shift64RightJammingexit6ii_aSigi1i1;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_aSigi1i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_aSigi1i1_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB__76_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_aSigi1i1_reg <= main_shift64RightJammingexit6ii_aSigi1i1;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_aSigi1i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_aSigi1i1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ]*/
	if ((((cur_state == LEGUP_F_main_BB__28_9) & (memory_controller_waitrequest == 1'd0)) & (main_28_32 == 1'd1))) begin
		main_shift64RightJammingexit6ii_bSigi2i1 = main_28_bSigi2i0;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ]*/
	else if (((cur_state == LEGUP_F_main_BB__35_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_bSigi2i1 = main_35_44;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ]*/
	else if (((cur_state == LEGUP_F_main_BB__45_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_bSigi2i1 = main_45_47;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__59_19) & (memory_controller_waitrequest == 1'd0)) & (main_59_64 == 1'd1))) begin
		main_shift64RightJammingexit6ii_bSigi2i1 = main_18_20_reg;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ]*/
	else if (((cur_state == LEGUP_F_main_BB__67_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_bSigi2i1 = main_18_20_reg;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__76_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit6ii_bSigi2i1 = main_18_20_reg;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ]*/
	if ((((cur_state == LEGUP_F_main_BB__28_9) & (memory_controller_waitrequest == 1'd0)) & (main_28_32 == 1'd1))) begin
		main_shift64RightJammingexit6ii_bSigi2i1_reg <= main_shift64RightJammingexit6ii_bSigi2i1;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_bSigi2i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_bSigi2i1_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB__35_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_bSigi2i1_reg <= main_shift64RightJammingexit6ii_bSigi2i1;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_bSigi2i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_bSigi2i1_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_bSigi2i1_reg <= main_shift64RightJammingexit6ii_bSigi2i1;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_bSigi2i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_bSigi2i1_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ]*/
	if ((((cur_state == LEGUP_F_main_BB__59_19) & (memory_controller_waitrequest == 1'd0)) & (main_59_64 == 1'd1))) begin
		main_shift64RightJammingexit6ii_bSigi2i1_reg <= main_shift64RightJammingexit6ii_bSigi2i1;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_bSigi2i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_bSigi2i1_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB__67_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_bSigi2i1_reg <= main_shift64RightJammingexit6ii_bSigi2i1;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_bSigi2i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_bSigi2i1_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB__76_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_bSigi2i1_reg <= main_shift64RightJammingexit6ii_bSigi2i1;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_bSigi2i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_bSigi2i1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ]*/
	if ((((cur_state == LEGUP_F_main_BB__28_9) & (memory_controller_waitrequest == 1'd0)) & (main_28_32 == 1'd1))) begin
		main_shift64RightJammingexit6ii_zExp0i14i = main_3_13_reg;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ]*/
	else if (((cur_state == LEGUP_F_main_BB__35_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_zExp0i14i = main_3_13_reg;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ]*/
	else if (((cur_state == LEGUP_F_main_BB__45_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_zExp0i14i = main_3_13_reg;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__59_19) & (memory_controller_waitrequest == 1'd0)) & (main_59_64 == 1'd1))) begin
		main_shift64RightJammingexit6ii_zExp0i14i = main_3_16_reg;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ]*/
	else if (((cur_state == LEGUP_F_main_BB__67_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_zExp0i14i = main_3_16_reg;
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__76_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit6ii_zExp0i14i = main_3_16_reg;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ]*/
	if ((((cur_state == LEGUP_F_main_BB__28_9) & (memory_controller_waitrequest == 1'd0)) & (main_28_32 == 1'd1))) begin
		main_shift64RightJammingexit6ii_zExp0i14i_reg <= main_shift64RightJammingexit6ii_zExp0i14i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_zExp0i14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_zExp0i14i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB__35_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_zExp0i14i_reg <= main_shift64RightJammingexit6ii_zExp0i14i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_zExp0i14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_zExp0i14i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_zExp0i14i_reg <= main_shift64RightJammingexit6ii_zExp0i14i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_zExp0i14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_zExp0i14i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ]*/
	if ((((cur_state == LEGUP_F_main_BB__59_19) & (memory_controller_waitrequest == 1'd0)) & (main_59_64 == 1'd1))) begin
		main_shift64RightJammingexit6ii_zExp0i14i_reg <= main_shift64RightJammingexit6ii_zExp0i14i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_zExp0i14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_zExp0i14i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB__67_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_zExp0i14i_reg <= main_shift64RightJammingexit6ii_zExp0i14i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_zExp0i14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_zExp0i14i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ]*/
	if (((cur_state == LEGUP_F_main_BB__76_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit6ii_zExp0i14i_reg <= main_shift64RightJammingexit6ii_zExp0i14i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_zExp0i14i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_zExp0i14i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %93 = or i64 %aSig.i1.i.1, 2305843009213693952*/
		main_shift64RightJammingexit6ii_93 = (main_shift64RightJammingexit6ii_aSigi1i1_reg | 64'd2305843009213693952);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %93 = or i64 %aSig.i1.i.1, 2305843009213693952*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit6ii_29)) begin
		main_shift64RightJammingexit6ii_93_reg <= main_shift64RightJammingexit6ii_93;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %94 = add i64 %93, %bSig.i2.i.1*/
		main_shift64RightJammingexit6ii_94 = (main_shift64RightJammingexit6ii_93 + main_shift64RightJammingexit6ii_bSigi2i1_reg);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %94 = add i64 %93, %bSig.i2.i.1*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit6ii_29)) begin
		main_shift64RightJammingexit6ii_94_reg <= main_shift64RightJammingexit6ii_94;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %95 = shl i64 %94, 1*/
		main_shift64RightJammingexit6ii_95 = (main_shift64RightJammingexit6ii_94 <<< (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %95 = shl i64 %94, 1*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit6ii_29)) begin
		main_shift64RightJammingexit6ii_95_reg <= main_shift64RightJammingexit6ii_95;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %96 = icmp slt i64 %95, 0*/
		main_shift64RightJammingexit6ii_96 = ($signed(main_shift64RightJammingexit6ii_95) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %96 = icmp slt i64 %95, 0*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit6ii_29)) begin
		main_shift64RightJammingexit6ii_96_reg <= main_shift64RightJammingexit6ii_96;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %not. = xor i1 %96, true*/
		main_shift64RightJammingexit6ii_not = (main_shift64RightJammingexit6ii_96_reg ^ 1'd1);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %not. = xor i1 %96, true*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit6ii_30)) begin
		main_shift64RightJammingexit6ii_not_reg <= main_shift64RightJammingexit6ii_not;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_not) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_not_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %97 = sext i1 %not. to i32*/
		main_shift64RightJammingexit6ii_97 = $signed(main_shift64RightJammingexit6ii_not);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %97 = sext i1 %not. to i32*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit6ii_30)) begin
		main_shift64RightJammingexit6ii_97_reg <= main_shift64RightJammingexit6ii_97;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i. = add nsw i32 %zExp.0.i14.i, %97*/
		main_shift64RightJammingexit6ii_zExp0i14i_var0 = (main_shift64RightJammingexit6ii_zExp0i14i_reg + main_shift64RightJammingexit6ii_97_reg);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %zExp.0.i14.i. = add nsw i32 %zExp.0.i14.i, %97*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit6ii_31)) begin
		main_shift64RightJammingexit6ii_zExp0i14i_var0_reg <= main_shift64RightJammingexit6ii_zExp0i14i_var0;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_zExp0i14i_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_zExp0i14i_var0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %.46 = select i1 %96, i64 %94, i64 %95*/
		main_shift64RightJammingexit6ii_46 = (main_shift64RightJammingexit6ii_96 ? main_shift64RightJammingexit6ii_94 : main_shift64RightJammingexit6ii_95);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit6.i.i*/
	/*   %.46 = select i1 %96, i64 %94, i64 %95*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit6ii_29)) begin
		main_shift64RightJammingexit6ii_46_reg <= main_shift64RightJammingexit6ii_46;
		if (start == 1'b0 && ^(main_shift64RightJammingexit6ii_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit6ii_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %zExp.2.i.i = phi i32 [ %13, %90 ], [ %zExp.0.i14.i., %shift64RightJamming.exit6.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__90_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_98_zExp2ii = main_3_13_reg;
	end
	/* main: %98*/
	/*   %zExp.2.i.i = phi i32 [ %13, %90 ], [ %zExp.0.i14.i., %shift64RightJamming.exit6.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit6ii_31) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_98_zExp2ii = main_shift64RightJammingexit6ii_zExp0i14i_var0;
	end
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %zExp.2.i.i = phi i32 [ %13, %90 ], [ %zExp.0.i14.i., %shift64RightJamming.exit6.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__90_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_98_zExp2ii_reg <= main_98_zExp2ii;
		if (start == 1'b0 && ^(main_98_zExp2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_zExp2ii_reg"); $finish; end
	end
	/* main: %98*/
	/*   %zExp.2.i.i = phi i32 [ %13, %90 ], [ %zExp.0.i14.i., %shift64RightJamming.exit6.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit6ii_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_98_zExp2ii_reg <= main_98_zExp2ii;
		if (start == 1'b0 && ^(main_98_zExp2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_zExp2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %zSig.1.i.i = phi i64 [ %92, %90 ], [ %.46, %shift64RightJamming.exit6.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__90_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_98_zSig1ii = main_90_92;
	end
	/* main: %98*/
	/*   %zSig.1.i.i = phi i64 [ %92, %90 ], [ %.46, %shift64RightJamming.exit6.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit6ii_31) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_98_zSig1ii = main_shift64RightJammingexit6ii_46_reg;
	end
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %zSig.1.i.i = phi i64 [ %92, %90 ], [ %.46, %shift64RightJamming.exit6.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__90_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_98_zSig1ii_reg <= main_98_zSig1ii;
		if (start == 1'b0 && ^(main_98_zSig1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_zSig1ii_reg"); $finish; end
	end
	/* main: %98*/
	/*   %zSig.1.i.i = phi i64 [ %92, %90 ], [ %.46, %shift64RightJamming.exit6.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit6ii_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_98_zSig1ii_reg <= main_98_zSig1ii;
		if (start == 1'b0 && ^(main_98_zSig1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_zSig1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
		main_98_99 = roundAndPackFloat64_return_val_reg;
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		main_98_99_reg <= main_98_99;
		if (start == 1'b0 && ^(main_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %101 = shl nuw nsw i64 %11, 10*/
		main_100_101 = (main_3_11_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %101 = shl nuw nsw i64 %11, 10*/
	if ((cur_state == LEGUP_F_main_BB__100_35)) begin
		main_100_101_reg <= main_100_101;
		if (start == 1'b0 && ^(main_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %102 = shl nuw nsw i64 %14, 10*/
		main_100_102 = (main_3_14_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %102 = shl nuw nsw i64 %14, 10*/
	if ((cur_state == LEGUP_F_main_BB__100_35)) begin
		main_100_102_reg <= main_100_102;
		if (start == 1'b0 && ^(main_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %103 = icmp sgt i32 %17, 0*/
		main_100_103 = ($signed(main_3_17_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %103 = icmp sgt i32 %17, 0*/
	if ((cur_state == LEGUP_F_main_BB__100_35)) begin
		main_100_103_reg <= main_100_103;
		if (start == 1'b0 && ^(main_100_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %105 = icmp eq i32 %13, 2047*/
		main_104_105 = (main_3_13_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %105 = icmp eq i32 %13, 2047*/
	if ((cur_state == LEGUP_F_main_BB__104_36)) begin
		main_104_105_reg <= main_104_105;
		if (start == 1'b0 && ^(main_104_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %106*/
	/*   %107 = icmp slt i32 %17, 0*/
		main_106_107 = ($signed(main_3_17_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %106*/
	/*   %107 = icmp slt i32 %17, 0*/
	if ((cur_state == LEGUP_F_main_BB__106_37)) begin
		main_106_107_reg <= main_106_107;
		if (start == 1'b0 && ^(main_106_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_106_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %108*/
	/*   %109 = icmp eq i32 %16, 2047*/
		main_108_109 = (main_3_16_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %108*/
	/*   %109 = icmp eq i32 %16, 2047*/
	if ((cur_state == LEGUP_F_main_BB__108_38)) begin
		main_108_109_reg <= main_108_109;
		if (start == 1'b0 && ^(main_108_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_108_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %111*/
	/*   %112 = or i64 %101, %102*/
		main_111_112 = (main_100_101_reg | main_100_102_reg);
end
always @(posedge clk) begin
	/* main: %111*/
	/*   %112 = or i64 %101, %102*/
	if ((cur_state == LEGUP_F_main_BB__111_40)) begin
		main_111_112_reg <= main_111_112;
		if (start == 1'b0 && ^(main_111_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_111_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %111*/
	/*   %113 = icmp eq i64 %112, 0*/
		main_111_113 = (main_111_112 == 64'd0);
end
always @(posedge clk) begin
	/* main: %111*/
	/*   %113 = icmp eq i64 %112, 0*/
	if ((cur_state == LEGUP_F_main_BB__111_40)) begin
		main_111_113_reg <= main_111_113;
		if (start == 1'b0 && ^(main_111_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_111_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i.i*/
	/*   %114 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i7ii_114 = main_3_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i.i*/
	/*   %114 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_41)) begin
		main_float64_is_signaling_nanexit1i7ii_114_reg <= main_float64_is_signaling_nanexit1i7ii_114;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i7ii_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i7ii_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i.i*/
	/*   %115 = icmp ugt i63 %114, -4503599627370496*/
		main_float64_is_signaling_nanexit1i7ii_115 = (main_float64_is_signaling_nanexit1i7ii_114 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i.i*/
	/*   %115 = icmp ugt i63 %114, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_41)) begin
		main_float64_is_signaling_nanexit1i7ii_115_reg <= main_float64_is_signaling_nanexit1i7ii_115;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i7ii_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i7ii_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i.i*/
	/*   %.49.v = select i1 %115, i64 %5, i64 %4*/
		main_float64_is_signaling_nanexit1i7ii_49v = (main_float64_is_signaling_nanexit1i7ii_115_reg ? main_3_5_reg : main_3_4_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i.i*/
	/*   %.49.v = select i1 %115, i64 %5, i64 %4*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_42)) begin
		main_float64_is_signaling_nanexit1i7ii_49v_reg <= main_float64_is_signaling_nanexit1i7ii_49v;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i7ii_49v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i7ii_49v_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i.i*/
	/*   %.49 = or i64 %.49.v, 2251799813685248*/
		main_float64_is_signaling_nanexit1i7ii_49 = (main_float64_is_signaling_nanexit1i7ii_49v | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i7.i.i*/
	/*   %.49 = or i64 %.49.v, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_42)) begin
		main_float64_is_signaling_nanexit1i7ii_49_reg <= main_float64_is_signaling_nanexit1i7ii_49;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i7ii_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i7ii_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %116*/
	/*   %117 = load i32* @float_exception_flags, align 4*/
		main_116_117 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %116*/
	/*   %117 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_45)) begin
		main_116_117_reg <= main_116_117;
		if (start == 1'b0 && ^(main_116_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %116*/
	/*   %118 = or i32 %117, 16*/
		main_116_118 = (main_116_117 | 32'd16);
end
always @(posedge clk) begin
	/* main: %116*/
	/*   %118 = or i32 %117, 16*/
	if ((cur_state == LEGUP_F_main_BB__116_45)) begin
		main_116_118_reg <= main_116_118;
		if (start == 1'b0 && ^(main_116_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %bExp.0.i.i = phi i32 [ 1, %119 ], [ %16, %110 ]*/
	if (((((cur_state == LEGUP_F_main_BB__110_39) & (memory_controller_waitrequest == 1'd0)) & (main_3_13_reg != 32'd2047)) & (main_3_13_reg != 32'd0))) begin
		main_120_bExp0ii = main_3_16_reg;
	end
	/* main: %120*/
	/*   %bExp.0.i.i = phi i32 [ 1, %119 ], [ %16, %110 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__119_47) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_120_bExp0ii = 32'd1;
	end
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %bExp.0.i.i = phi i32 [ 1, %119 ], [ %16, %110 ]*/
	if (((((cur_state == LEGUP_F_main_BB__110_39) & (memory_controller_waitrequest == 1'd0)) & (main_3_13_reg != 32'd2047)) & (main_3_13_reg != 32'd0))) begin
		main_120_bExp0ii_reg <= main_120_bExp0ii;
		if (start == 1'b0 && ^(main_120_bExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_bExp0ii_reg"); $finish; end
	end
	/* main: %120*/
	/*   %bExp.0.i.i = phi i32 [ 1, %119 ], [ %16, %110 ]*/
	if (((cur_state == LEGUP_F_main_BB__119_47) & (memory_controller_waitrequest == 1'd0))) begin
		main_120_bExp0ii_reg <= main_120_bExp0ii;
		if (start == 1'b0 && ^(main_120_bExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_bExp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %aExp.0.i.i = phi i32 [ 1, %119 ], [ %13, %110 ]*/
	if (((((cur_state == LEGUP_F_main_BB__110_39) & (memory_controller_waitrequest == 1'd0)) & (main_3_13_reg != 32'd2047)) & (main_3_13_reg != 32'd0))) begin
		main_120_aExp0ii = main_3_13_reg;
	end
	/* main: %120*/
	/*   %aExp.0.i.i = phi i32 [ 1, %119 ], [ %13, %110 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__119_47) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_120_aExp0ii = 32'd1;
	end
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %aExp.0.i.i = phi i32 [ 1, %119 ], [ %13, %110 ]*/
	if (((((cur_state == LEGUP_F_main_BB__110_39) & (memory_controller_waitrequest == 1'd0)) & (main_3_13_reg != 32'd2047)) & (main_3_13_reg != 32'd0))) begin
		main_120_aExp0ii_reg <= main_120_aExp0ii;
		if (start == 1'b0 && ^(main_120_aExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_aExp0ii_reg"); $finish; end
	end
	/* main: %120*/
	/*   %aExp.0.i.i = phi i32 [ 1, %119 ], [ %13, %110 ]*/
	if (((cur_state == LEGUP_F_main_BB__119_47) & (memory_controller_waitrequest == 1'd0))) begin
		main_120_aExp0ii_reg <= main_120_aExp0ii;
		if (start == 1'b0 && ^(main_120_aExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_aExp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %121 = icmp ult i64 %102, %101*/
		main_120_121 = (main_100_102_reg < main_100_101_reg);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %121 = icmp ult i64 %102, %101*/
	if ((cur_state == LEGUP_F_main_BB__120_48)) begin
		main_120_121_reg <= main_120_121;
		if (start == 1'b0 && ^(main_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %122*/
	/*   %123 = icmp ult i64 %101, %102*/
		main_122_123 = (main_100_101_reg < main_100_102_reg);
end
always @(posedge clk) begin
	/* main: %122*/
	/*   %123 = icmp ult i64 %101, %102*/
	if ((cur_state == LEGUP_F_main_BB__122_49)) begin
		main_122_123_reg <= main_122_123;
		if (start == 1'b0 && ^(main_122_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_122_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %124*/
	/*   %125 = icmp eq i64 %14, 0*/
		main_124_125 = (main_3_14_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %124*/
	/*   %125 = icmp eq i64 %14, 0*/
	if ((cur_state == LEGUP_F_main_BB__124_50)) begin
		main_124_125_reg <= main_124_125;
		if (start == 1'b0 && ^(main_124_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_124_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %126 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i4ii_126 = main_3_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %126 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51)) begin
		main_float64_is_signaling_nanexit1i4ii_126_reg <= main_float64_is_signaling_nanexit1i4ii_126;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4ii_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4ii_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %127 = icmp ugt i63 %126, -4503599627370496*/
		main_float64_is_signaling_nanexit1i4ii_127 = (main_float64_is_signaling_nanexit1i4ii_126 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %127 = icmp ugt i63 %126, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51)) begin
		main_float64_is_signaling_nanexit1i4ii_127_reg <= main_float64_is_signaling_nanexit1i4ii_127;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4ii_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4ii_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %.52.v = select i1 %127, i64 %5, i64 %4*/
		main_float64_is_signaling_nanexit1i4ii_52v = (main_float64_is_signaling_nanexit1i4ii_127_reg ? main_3_5_reg : main_3_4_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %.52.v = select i1 %127, i64 %5, i64 %4*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_52)) begin
		main_float64_is_signaling_nanexit1i4ii_52v_reg <= main_float64_is_signaling_nanexit1i4ii_52v;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4ii_52v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4ii_52v_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %.52 = or i64 %.52.v, 2251799813685248*/
		main_float64_is_signaling_nanexit1i4ii_52 = (main_float64_is_signaling_nanexit1i4ii_52v | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %.52 = or i64 %.52.v, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_52)) begin
		main_float64_is_signaling_nanexit1i4ii_52_reg <= main_float64_is_signaling_nanexit1i4ii_52;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4ii_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4ii_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %128*/
	/*   %129 = xor i32 %7, 1*/
		main_128_129 = (main_3_7_reg ^ 32'd1);
end
always @(posedge clk) begin
	/* main: %128*/
	/*   %129 = xor i32 %7, 1*/
	if ((cur_state == LEGUP_F_main_BB__128_53)) begin
		main_128_129_reg <= main_128_129;
		if (start == 1'b0 && ^(main_128_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_128_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %128*/
	/*   %130 = zext i32 %129 to i64*/
		main_128_130 = main_128_129;
end
always @(posedge clk) begin
	/* main: %128*/
	/*   %130 = zext i32 %129 to i64*/
	if ((cur_state == LEGUP_F_main_BB__128_53)) begin
		main_128_130_reg <= main_128_130;
		if (start == 1'b0 && ^(main_128_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_128_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %128*/
	/*   %131 = shl nuw i64 %130, 63*/
		main_128_131 = (main_128_130 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %128*/
	/*   %131 = shl nuw i64 %130, 63*/
	if ((cur_state == LEGUP_F_main_BB__128_53)) begin
		main_128_131_reg <= main_128_131;
		if (start == 1'b0 && ^(main_128_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_128_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %128*/
	/*   %132 = or i64 %131, 9218868437227405312*/
		main_128_132 = (main_128_131 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %128*/
	/*   %132 = or i64 %131, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__128_53)) begin
		main_128_132_reg <= main_128_132;
		if (start == 1'b0 && ^(main_128_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_128_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %133*/
	/*   %134 = icmp eq i32 %13, 0*/
		main_133_134 = (main_3_13_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %133*/
	/*   %134 = icmp eq i32 %13, 0*/
	if ((cur_state == LEGUP_F_main_BB__133_54)) begin
		main_133_134_reg <= main_133_134;
		if (start == 1'b0 && ^(main_133_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_133_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %133*/
	/*   %135 = or i64 %101, 4611686018427387904*/
		main_133_135 = (main_100_101_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %133*/
	/*   %135 = or i64 %101, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__133_54)) begin
		main_133_135_reg <= main_133_135;
		if (start == 1'b0 && ^(main_133_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_133_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %133*/
	/*   %aSig.i.i.0 = select i1 %134, i64 %101, i64 %135*/
		main_133_aSigii0 = (main_133_134 ? main_100_101_reg : main_133_135);
end
always @(posedge clk) begin
	/* main: %133*/
	/*   %aSig.i.i.0 = select i1 %134, i64 %101, i64 %135*/
	if ((cur_state == LEGUP_F_main_BB__133_54)) begin
		main_133_aSigii0_reg <= main_133_aSigii0;
		if (start == 1'b0 && ^(main_133_aSigii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_133_aSigii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %133*/
	/*   %136 = zext i1 %134 to i32*/
		main_133_136 = main_133_134;
end
always @(posedge clk) begin
	/* main: %133*/
	/*   %136 = zext i1 %134 to i32*/
	if ((cur_state == LEGUP_F_main_BB__133_54)) begin
		main_133_136_reg <= main_133_136;
		if (start == 1'b0 && ^(main_133_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_133_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %133*/
	/*   %expDiff.0.i.i = add nsw i32 %17, %136*/
		main_133_expDiff0ii = (main_3_17_reg + main_133_136);
end
always @(posedge clk) begin
	/* main: %133*/
	/*   %expDiff.0.i.i = add nsw i32 %17, %136*/
	if ((cur_state == LEGUP_F_main_BB__133_54)) begin
		main_133_expDiff0ii_reg <= main_133_expDiff0ii;
		if (start == 1'b0 && ^(main_133_expDiff0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_133_expDiff0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %133*/
	/*   %137 = sub nsw i32 0, %expDiff.0.i.i*/
		main_133_137 = (32'd0 - main_133_expDiff0ii);
end
always @(posedge clk) begin
	/* main: %133*/
	/*   %137 = sub nsw i32 0, %expDiff.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB__133_54)) begin
		main_133_137_reg <= main_133_137;
		if (start == 1'b0 && ^(main_133_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_133_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %133*/
	/*   %138 = icmp eq i32 %expDiff.0.i.i, 0*/
		main_133_138 = (main_133_expDiff0ii == 32'd0);
end
always @(posedge clk) begin
	/* main: %133*/
	/*   %138 = icmp eq i32 %expDiff.0.i.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__133_54)) begin
		main_133_138_reg <= main_133_138;
		if (start == 1'b0 && ^(main_133_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_133_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %139*/
	/*   %140 = icmp sgt i32 %expDiff.0.i.i, -64*/
		main_139_140 = ($signed(main_133_expDiff0ii_reg) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* main: %139*/
	/*   %140 = icmp sgt i32 %expDiff.0.i.i, -64*/
	if ((cur_state == LEGUP_F_main_BB__139_55)) begin
		main_139_140_reg <= main_139_140;
		if (start == 1'b0 && ^(main_139_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_139_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %141*/
	/*   %142 = zext i32 %137 to i64*/
		main_141_142 = main_133_137_reg;
end
always @(posedge clk) begin
	/* main: %141*/
	/*   %142 = zext i32 %137 to i64*/
	if ((cur_state == LEGUP_F_main_BB__141_56)) begin
		main_141_142_reg <= main_141_142;
		if (start == 1'b0 && ^(main_141_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %141*/
	/*   %143 = lshr i64 %aSig.i.i.0, %142*/
		main_141_143 = (main_133_aSigii0_reg >>> (main_141_142 % 64'd64));
end
always @(posedge clk) begin
	/* main: %141*/
	/*   %143 = lshr i64 %aSig.i.i.0, %142*/
	if ((cur_state == LEGUP_F_main_BB__141_56)) begin
		main_141_143_reg <= main_141_143;
		if (start == 1'b0 && ^(main_141_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %141*/
	/*   %144 = and i32 %expDiff.0.i.i, 63*/
		main_141_144 = (main_133_expDiff0ii_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %141*/
	/*   %144 = and i32 %expDiff.0.i.i, 63*/
	if ((cur_state == LEGUP_F_main_BB__141_56)) begin
		main_141_144_reg <= main_141_144;
		if (start == 1'b0 && ^(main_141_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %141*/
	/*   %145 = zext i32 %144 to i64*/
		main_141_145 = main_141_144;
end
always @(posedge clk) begin
	/* main: %141*/
	/*   %145 = zext i32 %144 to i64*/
	if ((cur_state == LEGUP_F_main_BB__141_56)) begin
		main_141_145_reg <= main_141_145;
		if (start == 1'b0 && ^(main_141_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %141*/
	/*   %146 = shl i64 %aSig.i.i.0, %145*/
		main_141_146 = (main_133_aSigii0_reg <<< (main_141_145 % 64'd64));
end
always @(posedge clk) begin
	/* main: %141*/
	/*   %146 = shl i64 %aSig.i.i.0, %145*/
	if ((cur_state == LEGUP_F_main_BB__141_56)) begin
		main_141_146_reg <= main_141_146;
		if (start == 1'b0 && ^(main_141_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %141*/
	/*   %147 = icmp ne i64 %146, 0*/
		main_141_147 = (main_141_146 != 64'd0);
end
always @(posedge clk) begin
	/* main: %141*/
	/*   %147 = icmp ne i64 %146, 0*/
	if ((cur_state == LEGUP_F_main_BB__141_56)) begin
		main_141_147_reg <= main_141_147;
		if (start == 1'b0 && ^(main_141_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %141*/
	/*   %148 = zext i1 %147 to i64*/
		main_141_148 = main_141_147;
end
always @(posedge clk) begin
	/* main: %141*/
	/*   %148 = zext i1 %147 to i64*/
	if ((cur_state == LEGUP_F_main_BB__141_56)) begin
		main_141_148_reg <= main_141_148;
		if (start == 1'b0 && ^(main_141_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %141*/
	/*   %149 = or i64 %143, %148*/
		main_141_149 = (main_141_143 | main_141_148);
end
always @(posedge clk) begin
	/* main: %141*/
	/*   %149 = or i64 %143, %148*/
	if ((cur_state == LEGUP_F_main_BB__141_56)) begin
		main_141_149_reg <= main_141_149;
		if (start == 1'b0 && ^(main_141_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_141_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %150*/
	/*   %151 = icmp ne i64 %aSig.i.i.0, 0*/
		main_150_151 = (main_133_aSigii0_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %150*/
	/*   %151 = icmp ne i64 %aSig.i.i.0, 0*/
	if ((cur_state == LEGUP_F_main_BB__150_57)) begin
		main_150_151_reg <= main_150_151;
		if (start == 1'b0 && ^(main_150_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_150_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %150*/
	/*   %152 = zext i1 %151 to i64*/
		main_150_152 = main_150_151;
end
always @(posedge clk) begin
	/* main: %150*/
	/*   %152 = zext i1 %151 to i64*/
	if ((cur_state == LEGUP_F_main_BB__150_57)) begin
		main_150_152_reg <= main_150_152;
		if (start == 1'b0 && ^(main_150_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_150_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.1.i2.i.i = phi i64 [ %aSig.i.i.0, %133 ], [ %149, %141 ], [ %152, %150 ]*/
	if ((((cur_state == LEGUP_F_main_BB__133_54) & (memory_controller_waitrequest == 1'd0)) & (main_133_138 == 1'd1))) begin
		main_shift64RightJammingexit3ii_z1i2ii = main_133_aSigii0;
	end
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.1.i2.i.i = phi i64 [ %aSig.i.i.0, %133 ], [ %149, %141 ], [ %152, %150 ]*/
	else if (((cur_state == LEGUP_F_main_BB__141_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3ii_z1i2ii = main_141_149;
	end
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.1.i2.i.i = phi i64 [ %aSig.i.i.0, %133 ], [ %149, %141 ], [ %152, %150 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__150_57) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit3ii_z1i2ii = main_150_152;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.1.i2.i.i = phi i64 [ %aSig.i.i.0, %133 ], [ %149, %141 ], [ %152, %150 ]*/
	if ((((cur_state == LEGUP_F_main_BB__133_54) & (memory_controller_waitrequest == 1'd0)) & (main_133_138 == 1'd1))) begin
		main_shift64RightJammingexit3ii_z1i2ii_reg <= main_shift64RightJammingexit3ii_z1i2ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3ii_z1i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3ii_z1i2ii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.1.i2.i.i = phi i64 [ %aSig.i.i.0, %133 ], [ %149, %141 ], [ %152, %150 ]*/
	if (((cur_state == LEGUP_F_main_BB__141_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3ii_z1i2ii_reg <= main_shift64RightJammingexit3ii_z1i2ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3ii_z1i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3ii_z1i2ii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.1.i2.i.i = phi i64 [ %aSig.i.i.0, %133 ], [ %149, %141 ], [ %152, %150 ]*/
	if (((cur_state == LEGUP_F_main_BB__150_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3ii_z1i2ii_reg <= main_shift64RightJammingexit3ii_z1i2ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3ii_z1i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3ii_z1i2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %153 = or i64 %102, 4611686018427387904*/
		main_shift64RightJammingexit3ii_153 = (main_100_102_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %153 = or i64 %102, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_58)) begin
		main_shift64RightJammingexit3ii_153_reg <= main_shift64RightJammingexit3ii_153;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3ii_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3ii_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %154*/
	/*   %aSig.i.i.1 = phi i64 [ %z.1.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %101, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_49) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd1))) begin
		main_154_aSigii1 = main_100_101_reg;
	end
	/* main: %154*/
	/*   %aSig.i.i.1 = phi i64 [ %z.1.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %101, %122 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_58) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_154_aSigii1 = main_shift64RightJammingexit3ii_z1i2ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %154*/
	/*   %aSig.i.i.1 = phi i64 [ %z.1.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %101, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_49) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd1))) begin
		main_154_aSigii1_reg <= main_154_aSigii1;
		if (start == 1'b0 && ^(main_154_aSigii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_aSigii1_reg"); $finish; end
	end
	/* main: %154*/
	/*   %aSig.i.i.1 = phi i64 [ %z.1.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %101, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_154_aSigii1_reg <= main_154_aSigii1;
		if (start == 1'b0 && ^(main_154_aSigii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_aSigii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %154*/
	/*   %bSig.i.i.0 = phi i64 [ %153, %shift64RightJamming.exit3.i.i ], [ %102, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_49) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd1))) begin
		main_154_bSigii0 = main_100_102_reg;
	end
	/* main: %154*/
	/*   %bSig.i.i.0 = phi i64 [ %153, %shift64RightJamming.exit3.i.i ], [ %102, %122 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_58) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_154_bSigii0 = main_shift64RightJammingexit3ii_153;
	end
end
always @(posedge clk) begin
	/* main: %154*/
	/*   %bSig.i.i.0 = phi i64 [ %153, %shift64RightJamming.exit3.i.i ], [ %102, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_49) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd1))) begin
		main_154_bSigii0_reg <= main_154_bSigii0;
		if (start == 1'b0 && ^(main_154_bSigii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_bSigii0_reg"); $finish; end
	end
	/* main: %154*/
	/*   %bSig.i.i.0 = phi i64 [ %153, %shift64RightJamming.exit3.i.i ], [ %102, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_154_bSigii0_reg <= main_154_bSigii0;
		if (start == 1'b0 && ^(main_154_bSigii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_bSigii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %154*/
	/*   %bExp.1.i.i = phi i32 [ %16, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_49) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd1))) begin
		main_154_bExp1ii = main_120_bExp0ii_reg;
	end
	/* main: %154*/
	/*   %bExp.1.i.i = phi i32 [ %16, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %122 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_58) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_154_bExp1ii = main_3_16_reg;
	end
end
always @(posedge clk) begin
	/* main: %154*/
	/*   %bExp.1.i.i = phi i32 [ %16, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %122 ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_49) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd1))) begin
		main_154_bExp1ii_reg <= main_154_bExp1ii;
		if (start == 1'b0 && ^(main_154_bExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_bExp1ii_reg"); $finish; end
	end
	/* main: %154*/
	/*   %bExp.1.i.i = phi i32 [ %16, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %122 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_154_bExp1ii_reg <= main_154_bExp1ii;
		if (start == 1'b0 && ^(main_154_bExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_bExp1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %154*/
	/*   %155 = sub i64 %bSig.i.i.0, %aSig.i.i.1*/
		main_154_155 = (main_154_bSigii0_reg - main_154_aSigii1_reg);
end
always @(posedge clk) begin
	/* main: %154*/
	/*   %155 = sub i64 %bSig.i.i.0, %aSig.i.i.1*/
	if ((cur_state == LEGUP_F_main_BB__154_59)) begin
		main_154_155_reg <= main_154_155;
		if (start == 1'b0 && ^(main_154_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %154*/
	/*   %156 = xor i32 %7, 1*/
		main_154_156 = (main_3_7_reg ^ 32'd1);
end
always @(posedge clk) begin
	/* main: %154*/
	/*   %156 = xor i32 %7, 1*/
	if ((cur_state == LEGUP_F_main_BB__154_59)) begin
		main_154_156_reg <= main_154_156;
		if (start == 1'b0 && ^(main_154_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %158 = icmp eq i64 %11, 0*/
		main_157_158 = (main_3_11_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %158 = icmp eq i64 %11, 0*/
	if ((cur_state == LEGUP_F_main_BB__157_60)) begin
		main_157_158_reg <= main_157_158;
		if (start == 1'b0 && ^(main_157_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %159 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1iii_159 = main_3_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %159 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61)) begin
		main_float64_is_signaling_nanexit1iii_159_reg <= main_float64_is_signaling_nanexit1iii_159;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %160 = icmp ugt i63 %159, -4503599627370496*/
		main_float64_is_signaling_nanexit1iii_160 = (main_float64_is_signaling_nanexit1iii_159 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %160 = icmp ugt i63 %159, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61)) begin
		main_float64_is_signaling_nanexit1iii_160_reg <= main_float64_is_signaling_nanexit1iii_160;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %.55.v = select i1 %160, i64 %5, i64 %4*/
		main_float64_is_signaling_nanexit1iii_55v = (main_float64_is_signaling_nanexit1iii_160_reg ? main_3_5_reg : main_3_4_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %.55.v = select i1 %160, i64 %5, i64 %4*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62)) begin
		main_float64_is_signaling_nanexit1iii_55v_reg <= main_float64_is_signaling_nanexit1iii_55v;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_55v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_55v_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %.55 = or i64 %.55.v, 2251799813685248*/
		main_float64_is_signaling_nanexit1iii_55 = (main_float64_is_signaling_nanexit1iii_55v | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %.55 = or i64 %.55.v, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62)) begin
		main_float64_is_signaling_nanexit1iii_55_reg <= main_float64_is_signaling_nanexit1iii_55;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %162 = icmp eq i32 %16, 0*/
		main_161_162 = (main_3_16_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %161*/
	/*   %162 = icmp eq i32 %16, 0*/
	if ((cur_state == LEGUP_F_main_BB__161_63)) begin
		main_161_162_reg <= main_161_162;
		if (start == 1'b0 && ^(main_161_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %163 = or i64 %102, 4611686018427387904*/
		main_161_163 = (main_100_102_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %161*/
	/*   %163 = or i64 %102, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__161_63)) begin
		main_161_163_reg <= main_161_163;
		if (start == 1'b0 && ^(main_161_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %bSig.i.i.1 = select i1 %162, i64 %102, i64 %163*/
		main_161_bSigii1 = (main_161_162 ? main_100_102_reg : main_161_163);
end
always @(posedge clk) begin
	/* main: %161*/
	/*   %bSig.i.i.1 = select i1 %162, i64 %102, i64 %163*/
	if ((cur_state == LEGUP_F_main_BB__161_63)) begin
		main_161_bSigii1_reg <= main_161_bSigii1;
		if (start == 1'b0 && ^(main_161_bSigii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_bSigii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %164 = sext i1 %162 to i32*/
		main_161_164 = $signed(main_161_162);
end
always @(posedge clk) begin
	/* main: %161*/
	/*   %164 = sext i1 %162 to i32*/
	if ((cur_state == LEGUP_F_main_BB__161_63)) begin
		main_161_164_reg <= main_161_164;
		if (start == 1'b0 && ^(main_161_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %expDiff.1.i.i = add nsw i32 %17, %164*/
		main_161_expDiff1ii = (main_3_17_reg + main_161_164);
end
always @(posedge clk) begin
	/* main: %161*/
	/*   %expDiff.1.i.i = add nsw i32 %17, %164*/
	if ((cur_state == LEGUP_F_main_BB__161_63)) begin
		main_161_expDiff1ii_reg <= main_161_expDiff1ii;
		if (start == 1'b0 && ^(main_161_expDiff1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_expDiff1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %165 = icmp eq i32 %expDiff.1.i.i, 0*/
		main_161_165 = (main_161_expDiff1ii == 32'd0);
end
always @(posedge clk) begin
	/* main: %161*/
	/*   %165 = icmp eq i32 %expDiff.1.i.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__161_63)) begin
		main_161_165_reg <= main_161_165;
		if (start == 1'b0 && ^(main_161_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %167 = icmp slt i32 %expDiff.1.i.i, 64*/
		main_166_167 = ($signed(main_161_expDiff1ii_reg) < $signed(32'd64));
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %167 = icmp slt i32 %expDiff.1.i.i, 64*/
	if ((cur_state == LEGUP_F_main_BB__166_64)) begin
		main_166_167_reg <= main_166_167;
		if (start == 1'b0 && ^(main_166_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %169 = zext i32 %expDiff.1.i.i to i64*/
		main_168_169 = main_161_expDiff1ii_reg;
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %169 = zext i32 %expDiff.1.i.i to i64*/
	if ((cur_state == LEGUP_F_main_BB__168_65)) begin
		main_168_169_reg <= main_168_169;
		if (start == 1'b0 && ^(main_168_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %170 = lshr i64 %bSig.i.i.1, %169*/
		main_168_170 = (main_161_bSigii1_reg >>> (main_168_169 % 64'd64));
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %170 = lshr i64 %bSig.i.i.1, %169*/
	if ((cur_state == LEGUP_F_main_BB__168_65)) begin
		main_168_170_reg <= main_168_170;
		if (start == 1'b0 && ^(main_168_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %171 = sub nsw i32 0, %expDiff.1.i.i*/
		main_168_171 = (32'd0 - main_161_expDiff1ii_reg);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %171 = sub nsw i32 0, %expDiff.1.i.i*/
	if ((cur_state == LEGUP_F_main_BB__168_65)) begin
		main_168_171_reg <= main_168_171;
		if (start == 1'b0 && ^(main_168_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %172 = and i32 %171, 63*/
		main_168_172 = (main_168_171 & 32'd63);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %172 = and i32 %171, 63*/
	if ((cur_state == LEGUP_F_main_BB__168_65)) begin
		main_168_172_reg <= main_168_172;
		if (start == 1'b0 && ^(main_168_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %173 = zext i32 %172 to i64*/
		main_168_173 = main_168_172;
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %173 = zext i32 %172 to i64*/
	if ((cur_state == LEGUP_F_main_BB__168_65)) begin
		main_168_173_reg <= main_168_173;
		if (start == 1'b0 && ^(main_168_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %174 = shl i64 %bSig.i.i.1, %173*/
		main_168_174 = (main_161_bSigii1_reg <<< (main_168_173 % 64'd64));
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %174 = shl i64 %bSig.i.i.1, %173*/
	if ((cur_state == LEGUP_F_main_BB__168_65)) begin
		main_168_174_reg <= main_168_174;
		if (start == 1'b0 && ^(main_168_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %175 = icmp ne i64 %174, 0*/
		main_168_175 = (main_168_174 != 64'd0);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %175 = icmp ne i64 %174, 0*/
	if ((cur_state == LEGUP_F_main_BB__168_65)) begin
		main_168_175_reg <= main_168_175;
		if (start == 1'b0 && ^(main_168_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %176 = zext i1 %175 to i64*/
		main_168_176 = main_168_175;
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %176 = zext i1 %175 to i64*/
	if ((cur_state == LEGUP_F_main_BB__168_65)) begin
		main_168_176_reg <= main_168_176;
		if (start == 1'b0 && ^(main_168_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %168*/
	/*   %177 = or i64 %170, %176*/
		main_168_177 = (main_168_170 | main_168_176);
end
always @(posedge clk) begin
	/* main: %168*/
	/*   %177 = or i64 %170, %176*/
	if ((cur_state == LEGUP_F_main_BB__168_65)) begin
		main_168_177_reg <= main_168_177;
		if (start == 1'b0 && ^(main_168_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_168_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %178*/
	/*   %179 = icmp ne i64 %bSig.i.i.1, 0*/
		main_178_179 = (main_161_bSigii1_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %178*/
	/*   %179 = icmp ne i64 %bSig.i.i.1, 0*/
	if ((cur_state == LEGUP_F_main_BB__178_66)) begin
		main_178_179_reg <= main_178_179;
		if (start == 1'b0 && ^(main_178_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %178*/
	/*   %180 = zext i1 %179 to i64*/
		main_178_180 = main_178_179;
end
always @(posedge clk) begin
	/* main: %178*/
	/*   %180 = zext i1 %179 to i64*/
	if ((cur_state == LEGUP_F_main_BB__178_66)) begin
		main_178_180_reg <= main_178_180;
		if (start == 1'b0 && ^(main_178_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.1.i.i.i = phi i64 [ %bSig.i.i.1, %161 ], [ %177, %168 ], [ %180, %178 ]*/
	if ((((cur_state == LEGUP_F_main_BB__161_63) & (memory_controller_waitrequest == 1'd0)) & (main_161_165 == 1'd1))) begin
		main_shift64RightJammingexitii_z1iii = main_161_bSigii1;
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.1.i.i.i = phi i64 [ %bSig.i.i.1, %161 ], [ %177, %168 ], [ %180, %178 ]*/
	else if (((cur_state == LEGUP_F_main_BB__168_65) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z1iii = main_168_177;
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.1.i.i.i = phi i64 [ %bSig.i.i.1, %161 ], [ %177, %168 ], [ %180, %178 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__178_66) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexitii_z1iii = main_178_180;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.1.i.i.i = phi i64 [ %bSig.i.i.1, %161 ], [ %177, %168 ], [ %180, %178 ]*/
	if ((((cur_state == LEGUP_F_main_BB__161_63) & (memory_controller_waitrequest == 1'd0)) & (main_161_165 == 1'd1))) begin
		main_shift64RightJammingexitii_z1iii_reg <= main_shift64RightJammingexitii_z1iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z1iii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.1.i.i.i = phi i64 [ %bSig.i.i.1, %161 ], [ %177, %168 ], [ %180, %178 ]*/
	if (((cur_state == LEGUP_F_main_BB__168_65) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z1iii_reg <= main_shift64RightJammingexitii_z1iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z1iii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.1.i.i.i = phi i64 [ %bSig.i.i.1, %161 ], [ %177, %168 ], [ %180, %178 ]*/
	if (((cur_state == LEGUP_F_main_BB__178_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z1iii_reg <= main_shift64RightJammingexitii_z1iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %181 = or i64 %101, 4611686018427387904*/
		main_shift64RightJammingexitii_181 = (main_100_101_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %181 = or i64 %101, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67)) begin
		main_shift64RightJammingexitii_181_reg <= main_shift64RightJammingexitii_181;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %182*/
	/*   %aSig.i.i.2 = phi i64 [ %181, %shift64RightJamming.exit.i.i ], [ %101, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_48) & (memory_controller_waitrequest == 1'd0)) & (main_120_121 == 1'd1))) begin
		main_182_aSigii2 = main_100_101_reg;
	end
	/* main: %182*/
	/*   %aSig.i.i.2 = phi i64 [ %181, %shift64RightJamming.exit.i.i ], [ %101, %120 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_182_aSigii2 = main_shift64RightJammingexitii_181;
	end
end
always @(posedge clk) begin
	/* main: %182*/
	/*   %aSig.i.i.2 = phi i64 [ %181, %shift64RightJamming.exit.i.i ], [ %101, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_48) & (memory_controller_waitrequest == 1'd0)) & (main_120_121 == 1'd1))) begin
		main_182_aSigii2_reg <= main_182_aSigii2;
		if (start == 1'b0 && ^(main_182_aSigii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_182_aSigii2_reg"); $finish; end
	end
	/* main: %182*/
	/*   %aSig.i.i.2 = phi i64 [ %181, %shift64RightJamming.exit.i.i ], [ %101, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_182_aSigii2_reg <= main_182_aSigii2;
		if (start == 1'b0 && ^(main_182_aSigii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_182_aSigii2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %182*/
	/*   %bSig.i.i.2 = phi i64 [ %z.1.i.i.i, %shift64RightJamming.exit.i.i ], [ %102, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_48) & (memory_controller_waitrequest == 1'd0)) & (main_120_121 == 1'd1))) begin
		main_182_bSigii2 = main_100_102_reg;
	end
	/* main: %182*/
	/*   %bSig.i.i.2 = phi i64 [ %z.1.i.i.i, %shift64RightJamming.exit.i.i ], [ %102, %120 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_182_bSigii2 = main_shift64RightJammingexitii_z1iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %182*/
	/*   %bSig.i.i.2 = phi i64 [ %z.1.i.i.i, %shift64RightJamming.exit.i.i ], [ %102, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_48) & (memory_controller_waitrequest == 1'd0)) & (main_120_121 == 1'd1))) begin
		main_182_bSigii2_reg <= main_182_bSigii2;
		if (start == 1'b0 && ^(main_182_bSigii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_182_bSigii2_reg"); $finish; end
	end
	/* main: %182*/
	/*   %bSig.i.i.2 = phi i64 [ %z.1.i.i.i, %shift64RightJamming.exit.i.i ], [ %102, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_182_bSigii2_reg <= main_182_bSigii2;
		if (start == 1'b0 && ^(main_182_bSigii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_182_bSigii2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %182*/
	/*   %aExp.1.i.i = phi i32 [ %13, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_48) & (memory_controller_waitrequest == 1'd0)) & (main_120_121 == 1'd1))) begin
		main_182_aExp1ii = main_120_aExp0ii_reg;
	end
	/* main: %182*/
	/*   %aExp.1.i.i = phi i32 [ %13, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %120 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_182_aExp1ii = main_3_13_reg;
	end
end
always @(posedge clk) begin
	/* main: %182*/
	/*   %aExp.1.i.i = phi i32 [ %13, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__120_48) & (memory_controller_waitrequest == 1'd0)) & (main_120_121 == 1'd1))) begin
		main_182_aExp1ii_reg <= main_182_aExp1ii;
		if (start == 1'b0 && ^(main_182_aExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_182_aExp1ii_reg"); $finish; end
	end
	/* main: %182*/
	/*   %aExp.1.i.i = phi i32 [ %13, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_182_aExp1ii_reg <= main_182_aExp1ii;
		if (start == 1'b0 && ^(main_182_aExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_182_aExp1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %182*/
	/*   %183 = sub i64 %aSig.i.i.2, %bSig.i.i.2*/
		main_182_183 = (main_182_aSigii2_reg - main_182_bSigii2_reg);
end
always @(posedge clk) begin
	/* main: %182*/
	/*   %183 = sub i64 %aSig.i.i.2, %bSig.i.i.2*/
	if ((cur_state == LEGUP_F_main_BB__182_68)) begin
		main_182_183_reg <= main_182_183;
		if (start == 1'b0 && ^(main_182_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_182_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %182 ], [ %bExp.1.i.i, %154 ]*/
	if (((cur_state == LEGUP_F_main_BB__154_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_184_zExp0ii = main_154_bExp1ii_reg;
	end
	/* main: %184*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %182 ], [ %bExp.1.i.i, %154 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__182_68) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_184_zExp0ii = main_182_aExp1ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %182 ], [ %bExp.1.i.i, %154 ]*/
	if (((cur_state == LEGUP_F_main_BB__154_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_184_zExp0ii_reg <= main_184_zExp0ii;
		if (start == 1'b0 && ^(main_184_zExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_zExp0ii_reg"); $finish; end
	end
	/* main: %184*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %182 ], [ %bExp.1.i.i, %154 ]*/
	if (((cur_state == LEGUP_F_main_BB__182_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_184_zExp0ii_reg <= main_184_zExp0ii;
		if (start == 1'b0 && ^(main_184_zExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_zExp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %.01.i.i = phi i32 [ %7, %182 ], [ %156, %154 ]*/
	if (((cur_state == LEGUP_F_main_BB__154_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_184_01ii = main_154_156;
	end
	/* main: %184*/
	/*   %.01.i.i = phi i32 [ %7, %182 ], [ %156, %154 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__182_68) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_184_01ii = main_3_7_reg;
	end
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %.01.i.i = phi i32 [ %7, %182 ], [ %156, %154 ]*/
	if (((cur_state == LEGUP_F_main_BB__154_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_184_01ii_reg <= main_184_01ii;
		if (start == 1'b0 && ^(main_184_01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_01ii_reg"); $finish; end
	end
	/* main: %184*/
	/*   %.01.i.i = phi i32 [ %7, %182 ], [ %156, %154 ]*/
	if (((cur_state == LEGUP_F_main_BB__182_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_184_01ii_reg <= main_184_01ii;
		if (start == 1'b0 && ^(main_184_01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_01ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %zSig.0.i.i = phi i64 [ %183, %182 ], [ %155, %154 ]*/
	if (((cur_state == LEGUP_F_main_BB__154_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_184_zSig0ii = main_154_155;
	end
	/* main: %184*/
	/*   %zSig.0.i.i = phi i64 [ %183, %182 ], [ %155, %154 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__182_68) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_184_zSig0ii = main_182_183;
	end
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %zSig.0.i.i = phi i64 [ %183, %182 ], [ %155, %154 ]*/
	if (((cur_state == LEGUP_F_main_BB__154_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_184_zSig0ii_reg <= main_184_zSig0ii;
		if (start == 1'b0 && ^(main_184_zSig0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_zSig0ii_reg"); $finish; end
	end
	/* main: %184*/
	/*   %zSig.0.i.i = phi i64 [ %183, %182 ], [ %155, %154 ]*/
	if (((cur_state == LEGUP_F_main_BB__182_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_184_zSig0ii_reg <= main_184_zSig0ii;
		if (start == 1'b0 && ^(main_184_zSig0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_zSig0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %185 = add nsw i32 %zExp.0.i.i, -1*/
		main_184_185 = (main_184_zExp0ii_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %185 = add nsw i32 %zExp.0.i.i, -1*/
	if ((cur_state == LEGUP_F_main_BB__184_69)) begin
		main_184_185_reg <= main_184_185;
		if (start == 1'b0 && ^(main_184_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %186 = icmp ult i64 %zSig.0.i.i, 4294967296*/
		main_184_186 = (main_184_zSig0ii_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %186 = icmp ult i64 %zSig.0.i.i, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__184_69)) begin
		main_184_186_reg <= main_184_186;
		if (start == 1'b0 && ^(main_184_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %187 = lshr i64 %zSig.0.i.i, 32*/
		main_184_187 = (main_184_zSig0ii_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %187 = lshr i64 %zSig.0.i.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__184_69)) begin
		main_184_187_reg <= main_184_187;
		if (start == 1'b0 && ^(main_184_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %.56 = select i1 %186, i32 32, i32 0*/
		main_184_56 = (main_184_186 ? 32'd32 : 32'd0);
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %.56 = select i1 %186, i32 32, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__184_69)) begin
		main_184_56_reg <= main_184_56;
		if (start == 1'b0 && ^(main_184_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %zSig.0.i.i. = select i1 %186, i64 %zSig.0.i.i, i64 %187*/
		main_184_zSig0ii_var1 = (main_184_186 ? main_184_zSig0ii_reg : main_184_187);
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %zSig.0.i.i. = select i1 %186, i64 %zSig.0.i.i, i64 %187*/
	if ((cur_state == LEGUP_F_main_BB__184_69)) begin
		main_184_zSig0ii_var1_reg <= main_184_zSig0ii_var1;
		if (start == 1'b0 && ^(main_184_zSig0ii_var1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_zSig0ii_var1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %188 = trunc i64 %zSig.0.i.i. to i32*/
		main_184_188 = main_184_zSig0ii_var1[31:0];
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %188 = trunc i64 %zSig.0.i.i. to i32*/
	if ((cur_state == LEGUP_F_main_BB__184_69)) begin
		main_184_188_reg <= main_184_188;
		if (start == 1'b0 && ^(main_184_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %189 = icmp ult i32 %188, 65536*/
		main_184_189 = (main_184_188 < 32'd65536);
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %189 = icmp ult i32 %188, 65536*/
	if ((cur_state == LEGUP_F_main_BB__184_69)) begin
		main_184_189_reg <= main_184_189;
		if (start == 1'b0 && ^(main_184_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %190 = shl i32 %188, 16*/
		main_184_190 = (main_184_188 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %190 = shl i32 %188, 16*/
	if ((cur_state == LEGUP_F_main_BB__184_69)) begin
		main_184_190_reg <= main_184_190;
		if (start == 1'b0 && ^(main_184_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %shiftCount.0.i.i.i.i.i = select i1 %189, i32 16, i32 0*/
		main_184_shiftCount0iiiii = (main_184_189 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %shiftCount.0.i.i.i.i.i = select i1 %189, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__184_69)) begin
		main_184_shiftCount0iiiii_reg <= main_184_shiftCount0iiiii;
		if (start == 1'b0 && ^(main_184_shiftCount0iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_shiftCount0iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %.0.i.i.i.i.i = select i1 %189, i32 %190, i32 %188*/
		main_184_0iiiii = (main_184_189 ? main_184_190 : main_184_188);
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %.0.i.i.i.i.i = select i1 %189, i32 %190, i32 %188*/
	if ((cur_state == LEGUP_F_main_BB__184_69)) begin
		main_184_0iiiii_reg <= main_184_0iiiii;
		if (start == 1'b0 && ^(main_184_0iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_0iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %191 = icmp ult i32 %.0.i.i.i.i.i, 16777216*/
		main_184_191 = (main_184_0iiiii < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %191 = icmp ult i32 %.0.i.i.i.i.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__184_69)) begin
		main_184_191_reg <= main_184_191;
		if (start == 1'b0 && ^(main_184_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %192*/
	/*   %193 = or i32 %shiftCount.0.i.i.i.i.i, 8*/
		main_192_193 = (main_184_shiftCount0iiiii_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %192*/
	/*   %193 = or i32 %shiftCount.0.i.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__192_70)) begin
		main_192_193_reg <= main_192_193;
		if (start == 1'b0 && ^(main_192_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_192_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %192*/
	/*   %194 = shl i32 %.0.i.i.i.i.i, 8*/
		main_192_194 = (main_184_0iiiii_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %192*/
	/*   %194 = shl i32 %.0.i.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__192_70)) begin
		main_192_194_reg <= main_192_194;
		if (start == 1'b0 && ^(main_192_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_192_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %193, %192 ], [ %shiftCount.0.i.i.i.i.i, %184 ]*/
	if ((((cur_state == LEGUP_F_main_BB__184_69) & (memory_controller_waitrequest == 1'd0)) & (main_184_191 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii = main_184_shiftCount0iiiii;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %193, %192 ], [ %shiftCount.0.i.i.i.i.i, %184 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__192_70) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii = main_192_193;
	end
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %193, %192 ], [ %shiftCount.0.i.i.i.i.i, %184 ]*/
	if ((((cur_state == LEGUP_F_main_BB__184_69) & (memory_controller_waitrequest == 1'd0)) & (main_184_191 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg <= main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %193, %192 ], [ %shiftCount.0.i.i.i.i.i, %184 ]*/
	if (((cur_state == LEGUP_F_main_BB__192_70) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg <= main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %194, %192 ], [ %.0.i.i.i.i.i, %184 ]*/
	if ((((cur_state == LEGUP_F_main_BB__184_69) & (memory_controller_waitrequest == 1'd0)) & (main_184_191 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_1iiiii = main_184_0iiiii;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %194, %192 ], [ %.0.i.i.i.i.i, %184 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__192_70) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeRoundAndPackFloat64exitii_1iiiii = main_192_194;
	end
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %194, %192 ], [ %.0.i.i.i.i.i, %184 ]*/
	if ((((cur_state == LEGUP_F_main_BB__184_69) & (memory_controller_waitrequest == 1'd0)) & (main_184_191 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_1iiiii_reg <= main_normalizeRoundAndPackFloat64exitii_1iiiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_1iiiii_reg"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %194, %192 ], [ %.0.i.i.i.i.i, %184 ]*/
	if (((cur_state == LEGUP_F_main_BB__192_70) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_1iiiii_reg <= main_normalizeRoundAndPackFloat64exitii_1iiiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_1iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %195 = lshr i32 %.1.i.i.i.i.i, 24*/
		main_normalizeRoundAndPackFloat64exitii_195 = (main_normalizeRoundAndPackFloat64exitii_1iiiii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %195 = lshr i32 %.1.i.i.i.i.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71)) begin
		main_normalizeRoundAndPackFloat64exitii_195_reg <= main_normalizeRoundAndPackFloat64exitii_195;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %196 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %195*/
		main_normalizeRoundAndPackFloat64exitii_196 = (1'd0 | (4 * main_normalizeRoundAndPackFloat64exitii_195));
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %196 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %195*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71)) begin
		main_normalizeRoundAndPackFloat64exitii_196_reg <= main_normalizeRoundAndPackFloat64exitii_196;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %197 = load i32* %196, align 4*/
		main_normalizeRoundAndPackFloat64exitii_197 = countLeadingZeros32countLeadingZerosHigh_out_a;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %197 = load i32* %196, align 4*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		main_normalizeRoundAndPackFloat64exitii_197_reg <= main_normalizeRoundAndPackFloat64exitii_197;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %198 = add nsw i32 %shiftCount.1.i.i.i.i.i, %197*/
		main_normalizeRoundAndPackFloat64exitii_198 = (main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg + main_normalizeRoundAndPackFloat64exitii_197);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %198 = add nsw i32 %shiftCount.1.i.i.i.i.i, %197*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		main_normalizeRoundAndPackFloat64exitii_198_reg <= main_normalizeRoundAndPackFloat64exitii_198;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %199 = add nsw i32 %.56, %198*/
		main_normalizeRoundAndPackFloat64exitii_199 = (main_184_56_reg + main_normalizeRoundAndPackFloat64exitii_198);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %199 = add nsw i32 %.56, %198*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		main_normalizeRoundAndPackFloat64exitii_199_reg <= main_normalizeRoundAndPackFloat64exitii_199;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %200 = add nsw i32 %199, -1*/
		main_normalizeRoundAndPackFloat64exitii_200 = (main_normalizeRoundAndPackFloat64exitii_199 + -32'd1);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %200 = add nsw i32 %199, -1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		main_normalizeRoundAndPackFloat64exitii_200_reg <= main_normalizeRoundAndPackFloat64exitii_200;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %201 = sub nsw i32 %185, %200*/
		main_normalizeRoundAndPackFloat64exitii_201 = (main_184_185_reg - main_normalizeRoundAndPackFloat64exitii_200);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %201 = sub nsw i32 %185, %200*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		main_normalizeRoundAndPackFloat64exitii_201_reg <= main_normalizeRoundAndPackFloat64exitii_201;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %202 = zext i32 %200 to i64*/
		main_normalizeRoundAndPackFloat64exitii_202 = main_normalizeRoundAndPackFloat64exitii_200;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %202 = zext i32 %200 to i64*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		main_normalizeRoundAndPackFloat64exitii_202_reg <= main_normalizeRoundAndPackFloat64exitii_202;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %203 = shl i64 %zSig.0.i.i, %202*/
		main_normalizeRoundAndPackFloat64exitii_203 = (main_184_zSig0ii_reg <<< (main_normalizeRoundAndPackFloat64exitii_202 % 64'd64));
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %203 = shl i64 %zSig.0.i.i, %202*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		main_normalizeRoundAndPackFloat64exitii_203_reg <= main_normalizeRoundAndPackFloat64exitii_203;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
		main_normalizeRoundAndPackFloat64exitii_204 = roundAndPackFloat64_return_val_reg;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		main_normalizeRoundAndPackFloat64exitii_204_reg <= main_normalizeRoundAndPackFloat64exitii_204;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__24_6) & (memory_controller_waitrequest == 1'd0)) & (main_24_25 == 1'd1))) begin
		main_addFloat64Sigsexiti_0i = main_3_4_reg;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i = main_float64_is_signaling_nanexit1i7i3i_;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i = main_float64_is_signaling_nanexit1i1ii_42;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__56_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i = main_56_58;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__80_24) & (memory_controller_waitrequest == 1'd0)) & (main_80_82 == 1'd1))) begin
		main_addFloat64Sigsexiti_0i = main_3_4_reg;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i = main_float64_is_signaling_nanexit1ii11i_45;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__85_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i = main_85_89;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__98_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i = main_98_99_reg;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i = main_float64_is_signaling_nanexit1i7ii_49;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__116_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i = 64'd9223372036854775807;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__122_49) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd0))) begin
		main_addFloat64Sigsexiti_0i = 64'd0;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i = main_float64_is_signaling_nanexit1i4ii_52;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__128_53) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i = main_128_132;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__157_60) & (memory_controller_waitrequest == 1'd0)) & (main_157_158 == 1'd1))) begin
		main_addFloat64Sigsexiti_0i = main_3_4_reg;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i = main_float64_is_signaling_nanexit1iii_55;
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_addFloat64Sigsexiti_0i = main_normalizeRoundAndPackFloat64exitii_204_reg;
	end
end
always @(posedge clk) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__24_6) & (memory_controller_waitrequest == 1'd0)) & (main_24_25 == 1'd1))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__56_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__80_24) & (memory_controller_waitrequest == 1'd0)) & (main_80_82 == 1'd1))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__85_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__98_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__116_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__122_49) & (memory_controller_waitrequest == 1'd0)) & (main_122_123 == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__128_53) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__157_60) & (memory_controller_waitrequest == 1'd0)) & (main_157_158 == 1'd1))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
	/* main: %addFloat64Sigs.exit.i*/
	/*   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74) & (memory_controller_waitrequest == 1'd0))) begin
		main_addFloat64Sigsexiti_0i_reg <= main_addFloat64Sigsexiti_0i;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %205 = load i64* %scevgep, align 8*/
		main_addFloat64Sigsexiti_205 = z_output_out_a;
end
always @(posedge clk) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %205 = load i64* %scevgep, align 8*/
	if ((cur_state == LEGUP_F_main_BB_addFloat64Sigsexiti_76)) begin
		main_addFloat64Sigsexiti_205_reg <= main_addFloat64Sigsexiti_205;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %206 = icmp eq i64 %.0.i, %205*/
		main_addFloat64Sigsexiti_206 = (main_addFloat64Sigsexiti_0i_reg == main_addFloat64Sigsexiti_205);
end
always @(posedge clk) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %206 = icmp eq i64 %.0.i, %205*/
	if ((cur_state == LEGUP_F_main_BB_addFloat64Sigsexiti_76)) begin
		main_addFloat64Sigsexiti_206_reg <= main_addFloat64Sigsexiti_206;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %207 = zext i1 %206 to i32*/
		main_addFloat64Sigsexiti_207 = main_addFloat64Sigsexiti_206;
end
always @(posedge clk) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %207 = zext i1 %206 to i32*/
	if ((cur_state == LEGUP_F_main_BB_addFloat64Sigsexiti_76)) begin
		main_addFloat64Sigsexiti_207_reg <= main_addFloat64Sigsexiti_207;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %208 = add nsw i32 %main_result.0, %207*/
		main_addFloat64Sigsexiti_208 = (main_1_main_result0_reg + main_addFloat64Sigsexiti_207);
end
always @(posedge clk) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %208 = add nsw i32 %main_result.0, %207*/
	if ((cur_state == LEGUP_F_main_BB_addFloat64Sigsexiti_76)) begin
		main_addFloat64Sigsexiti_208_reg <= main_addFloat64Sigsexiti_208;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %210 = add nsw i32 %2, 1*/
		main_addFloat64Sigsexiti_210 = (main_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %addFloat64Sigs.exit.i*/
	/*   %210 = add nsw i32 %2, 1*/
	if ((cur_state == LEGUP_F_main_BB_addFloat64Sigsexiti_75)) begin
		main_addFloat64Sigsexiti_210_reg <= main_addFloat64Sigsexiti_210;
		if (start == 1'b0 && ^(main_addFloat64Sigsexiti_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_addFloat64Sigsexiti_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %211*/
	/*   %213 = icmp eq i32 %main_result.0, 46*/
		main_211_213 = (main_1_main_result0_reg == 32'd46);
end
always @(posedge clk) begin
	/* main: %211*/
	/*   %213 = icmp eq i32 %main_result.0, 46*/
	if ((cur_state == LEGUP_F_main_BB__211_77)) begin
		main_211_213_reg <= main_211_213;
		if (start == 1'b0 && ^(main_211_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_211_213_reg"); $finish; end
	end
end
always @(*) begin
	a_input_address_a = 1'd0;
	/* main: %3*/
	/*   %4 = load i64* %scevgep3, align 8*/
	if ((cur_state == LEGUP_F_main_BB__3_2)) begin
		a_input_address_a = (main_3_scevgep3 >>> 3'd3);
	end
end
always @(*) begin
	a_input_write_enable_a = 1'd0;
	/* main: %3*/
	/*   %4 = load i64* %scevgep3, align 8*/
	if ((cur_state == LEGUP_F_main_BB__3_2)) begin
		a_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	b_input_address_a = 1'd0;
	/* main: %3*/
	/*   %5 = load i64* %scevgep2, align 8*/
	if ((cur_state == LEGUP_F_main_BB__3_2)) begin
		b_input_address_a = (main_3_scevgep2 >>> 3'd3);
	end
end
always @(*) begin
	b_input_write_enable_a = 1'd0;
	/* main: %3*/
	/*   %5 = load i64* %scevgep2, align 8*/
	if ((cur_state == LEGUP_F_main_BB__3_2)) begin
		b_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	z_output_address_a = 1'd0;
	/* main: %addFloat64Sigs.exit.i*/
	/*   %205 = load i64* %scevgep, align 8*/
	if ((cur_state == LEGUP_F_main_BB_addFloat64Sigsexiti_75)) begin
		z_output_address_a = (main_1_scevgep_reg >>> 3'd3);
	end
end
always @(*) begin
	z_output_write_enable_a = 1'd0;
	/* main: %addFloat64Sigs.exit.i*/
	/*   %205 = load i64* %scevgep, align 8*/
	if ((cur_state == LEGUP_F_main_BB_addFloat64Sigsexiti_75)) begin
		z_output_write_enable_a = 1'd0;
	end
end
always @(*) begin
	countLeadingZeros32countLeadingZerosHigh_address_a = 1'd0;
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %197 = load i32* %196, align 4*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71)) begin
		countLeadingZeros32countLeadingZerosHigh_address_a = (main_normalizeRoundAndPackFloat64exitii_196 >>> 3'd2);
	end
end
always @(*) begin
	countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %197 = load i32* %196, align 4*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71)) begin
		countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__98_32)) begin
		roundAndPackFloat64_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_33)) begin
		roundAndPackFloat64_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		roundAndPackFloat64_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_73)) begin
		roundAndPackFloat64_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__98_32)) begin
		roundAndPackFloat64_arg_zSign <= main_3_7_reg;
		if (start == 1'b0 && ^(main_3_7_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSign"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		roundAndPackFloat64_arg_zSign <= main_184_01ii_reg;
		if (start == 1'b0 && ^(main_184_01ii_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSign"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__98_32)) begin
		roundAndPackFloat64_arg_zExp <= main_98_zExp2ii_reg;
		if (start == 1'b0 && ^(main_98_zExp2ii_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zExp"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		roundAndPackFloat64_arg_zExp <= main_normalizeRoundAndPackFloat64exitii_201;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zExp"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__98_32)) begin
		roundAndPackFloat64_arg_zSig <= main_98_zSig1ii_reg;
		if (start == 1'b0 && ^(main_98_zSig1ii_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSig"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)) begin
		roundAndPackFloat64_arg_zSig <= main_normalizeRoundAndPackFloat64exitii_203;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSig"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		roundAndPackFloat64_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	else /* if ((cur_state == LEGUP_function_call_73)) */ begin
		roundAndPackFloat64_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		roundAndPackFloat64_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	else /* if ((cur_state == LEGUP_function_call_73)) */ begin
		roundAndPackFloat64_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	roundAndPackFloat64_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	roundAndPackFloat64_finish_final = roundAndPackFloat64_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__98_32))) begin
		roundAndPackFloat64_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72))) begin
		roundAndPackFloat64_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__98_32))) begin
		roundAndPackFloat64_return_val_reg <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_return_val_reg <= roundAndPackFloat64_return_val;
		if (start == 1'b0 && ^(roundAndPackFloat64_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72))) begin
		roundAndPackFloat64_return_val_reg <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_return_val_reg <= roundAndPackFloat64_return_val;
		if (start == 1'b0 && ^(roundAndPackFloat64_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		legup_function_call = 1'd1;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %218*/
	/*   ret i32 %main_result.0*/
	if ((cur_state == LEGUP_F_main_BB__218_80)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %116*/
	/*   %117 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %116*/
	/*   store i32 %118, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_45)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %116*/
	/*   %117 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_43)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %116*/
	/*   store i32 %118, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_45)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %116*/
	/*   %117 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_43)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %116*/
	/*   store i32 %118, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_45)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %116*/
	/*   store i32 %118, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_45)) begin
		memory_controller_in_a = main_116_118;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %116*/
	/*   %117 = load i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %116*/
	/*   store i32 %118, i32* @float_exception_flags, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_45)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* main: %98*/
	/*   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %218*/
	/*   ret i32 %main_result.0*/
	if ((cur_state == LEGUP_F_main_BB__218_80)) begin
		return_val <= main_1_main_result0_reg;
		if (start == 1'b0 && ^(main_1_main_result0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
