//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 15:38:57 2017
//----------------------------------------------------------------------------//

Target Family: CycloneV
Clock period constraint: 2.000000e+01ns
Start Function: roundAndPackFloat64
state: LEGUP_0
   Transition: if (start): LEGUP_F_roundAndPackFloat64_BB__0_1 default: LEGUP_0
state: LEGUP_F_roundAndPackFloat64_BB__0_1
   %zSig.tr = trunc i64 %zSig to i32 (endState: LEGUP_F_roundAndPackFloat64_BB__0_1)
   %1 = and i32 %zSig.tr, 1023 (endState: LEGUP_F_roundAndPackFloat64_BB__0_1)
   %2 = and i32 %zExp, 65535 (endState: LEGUP_F_roundAndPackFloat64_BB__0_1)
   %3 = icmp ugt i32 %2, 2044 (endState: LEGUP_F_roundAndPackFloat64_BB__0_1)
   br i1 %3, label %4, label %.thread
   Transition: if (%3): LEGUP_F_roundAndPackFloat64_BB__4_2 default: LEGUP_F_roundAndPackFloat64_BB_thread_18
state: LEGUP_F_roundAndPackFloat64_BB__4_2
   %5 = icmp sgt i32 %zExp, 2045 (endState: LEGUP_F_roundAndPackFloat64_BB__4_2)
   br i1 %5, label %11, label %6
   Transition: if (%5): LEGUP_F_roundAndPackFloat64_BB__11_5 default: LEGUP_F_roundAndPackFloat64_BB__6_3
state: LEGUP_F_roundAndPackFloat64_BB__6_3
   %7 = icmp eq i32 %zExp, 2045 (endState: LEGUP_F_roundAndPackFloat64_BB__6_3)
   br i1 %7, label %8, label %17
   Transition: if (%7): LEGUP_F_roundAndPackFloat64_BB__8_4 default: LEGUP_F_roundAndPackFloat64_BB__17_9
state: LEGUP_F_roundAndPackFloat64_BB__8_4
   %9 = add i64 %zSig, 512 (endState: LEGUP_F_roundAndPackFloat64_BB__8_4)
   %10 = icmp slt i64 %9, 0 (endState: LEGUP_F_roundAndPackFloat64_BB__8_4)
   br i1 %10, label %11, label %.thread
   Transition: if (%10): LEGUP_F_roundAndPackFloat64_BB__11_5 default: LEGUP_F_roundAndPackFloat64_BB_thread_18
state: LEGUP_F_roundAndPackFloat64_BB__11_5
   %12 = load i32* @float_exception_flags, align 4 (endState: LEGUP_F_roundAndPackFloat64_BB__11_7)
   %14 = zext i32 %zSign to i64 (endState: LEGUP_F_roundAndPackFloat64_BB__11_5)
   %15 = shl i64 %14, 63 (endState: LEGUP_F_roundAndPackFloat64_BB__11_5)
   %16 = or i64 %15, 9218868437227405312 (endState: LEGUP_F_roundAndPackFloat64_BB__11_5)
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__11_6
state: LEGUP_F_roundAndPackFloat64_BB__11_6
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__11_7
state: LEGUP_F_roundAndPackFloat64_BB__11_7
   %13 = or i32 %12, 9 (endState: LEGUP_F_roundAndPackFloat64_BB__11_7)
   store i32 %13, i32* @float_exception_flags, align 4 (endState: LEGUP_F_roundAndPackFloat64_BB__11_8)
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__11_8
state: LEGUP_F_roundAndPackFloat64_BB__11_8
   br label %57
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__57_25
state: LEGUP_F_roundAndPackFloat64_BB__17_9
   %18 = icmp slt i32 %zExp, 0 (endState: LEGUP_F_roundAndPackFloat64_BB__17_9)
   br i1 %18, label %19, label %.thread
   Transition: if (%18): LEGUP_F_roundAndPackFloat64_BB__19_10 default: LEGUP_F_roundAndPackFloat64_BB_thread_18
state: LEGUP_F_roundAndPackFloat64_BB__19_10
   %20 = icmp sgt i32 %zExp, -64 (endState: LEGUP_F_roundAndPackFloat64_BB__19_10)
   br i1 %20, label %21, label %31
   Transition: if (%20): LEGUP_F_roundAndPackFloat64_BB__21_11 default: LEGUP_F_roundAndPackFloat64_BB__31_12
state: LEGUP_F_roundAndPackFloat64_BB__21_11
   %22 = sub nsw i32 0, %zExp (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %23 = zext i32 %22 to i64 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %24 = lshr i64 %zSig, %23 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %25 = and i32 %zExp, 63 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %26 = zext i32 %25 to i64 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %27 = shl i64 %zSig, %26 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %28 = icmp ne i64 %27, 0 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %29 = zext i1 %28 to i64 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   %30 = or i64 %24, %29 (endState: LEGUP_F_roundAndPackFloat64_BB__21_11)
   br label %34
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__34_13
state: LEGUP_F_roundAndPackFloat64_BB__31_12
   %32 = icmp ne i64 %zSig, 0 (endState: LEGUP_F_roundAndPackFloat64_BB__31_12)
   %33 = zext i1 %32 to i64 (endState: LEGUP_F_roundAndPackFloat64_BB__31_12)
   br label %34
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__34_13
state: LEGUP_F_roundAndPackFloat64_BB__34_13
   %z.1.i = phi i64 [ %30, %21 ], [ %33, %31 ] (endState: LEGUP_F_roundAndPackFloat64_BB__34_13)
   %z.1.i.tr = trunc i64 %z.1.i to i32 (endState: LEGUP_F_roundAndPackFloat64_BB__34_13)
   %35 = and i32 %z.1.i.tr, 1023 (endState: LEGUP_F_roundAndPackFloat64_BB__34_13)
   %36 = icmp eq i32 %35, 0 (endState: LEGUP_F_roundAndPackFloat64_BB__34_13)
   br i1 %36, label %.thread6, label %.thread1
   Transition: if (%36): LEGUP_F_roundAndPackFloat64_BB_thread6_24 default: LEGUP_F_roundAndPackFloat64_BB_thread1_14
state: LEGUP_F_roundAndPackFloat64_BB_thread1_14
   %37 = load i32* @float_exception_flags, align 4 (endState: LEGUP_F_roundAndPackFloat64_BB_thread1_16)
   Transition: default: LEGUP_F_roundAndPackFloat64_BB_thread1_15
state: LEGUP_F_roundAndPackFloat64_BB_thread1_15
   Transition: default: LEGUP_F_roundAndPackFloat64_BB_thread1_16
state: LEGUP_F_roundAndPackFloat64_BB_thread1_16
   %38 = or i32 %37, 4 (endState: LEGUP_F_roundAndPackFloat64_BB_thread1_16)
   store i32 %38, i32* @float_exception_flags, align 4 (endState: LEGUP_F_roundAndPackFloat64_BB_thread1_17)
   Transition: default: LEGUP_F_roundAndPackFloat64_BB_thread1_17
state: LEGUP_F_roundAndPackFloat64_BB_thread1_17
   br label %40
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__40_22
state: LEGUP_F_roundAndPackFloat64_BB_thread_18
   %.1 = phi i32 [ %zExp, %0 ], [ %zExp, %17 ], [ 2045, %8 ] (endState: LEGUP_F_roundAndPackFloat64_BB_thread_18)
   %39 = icmp eq i32 %1, 0 (endState: LEGUP_F_roundAndPackFloat64_BB_thread_18)
   br i1 %39, label %.thread6, label %.thread._crit_edge
   Transition: if (%39): LEGUP_F_roundAndPackFloat64_BB_thread6_24 default: LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_19
state: LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_19
   %.pre = load i32* @float_exception_flags, align 4 (endState: LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21)
   Transition: default: LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_20
state: LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_20
   Transition: default: LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21
state: LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge_21
   br label %40
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__40_22
state: LEGUP_F_roundAndPackFloat64_BB__40_22
   %41 = phi i32 [ %.pre, %.thread._crit_edge ], [ %38, %.thread1 ] (endState: LEGUP_F_roundAndPackFloat64_BB__40_22)
   %.013 = phi i64 [ %zSig, %.thread._crit_edge ], [ %z.1.i, %.thread1 ] (endState: LEGUP_F_roundAndPackFloat64_BB__40_22)
   %roundBits.15 = phi i32 [ %1, %.thread._crit_edge ], [ %35, %.thread1 ] (endState: LEGUP_F_roundAndPackFloat64_BB__40_22)
   %.13 = phi i32 [ %.1, %.thread._crit_edge ], [ 0, %.thread1 ] (endState: LEGUP_F_roundAndPackFloat64_BB__40_22)
   %42 = or i32 %41, 1 (endState: LEGUP_F_roundAndPackFloat64_BB__40_22)
   store i32 %42, i32* @float_exception_flags, align 4 (endState: LEGUP_F_roundAndPackFloat64_BB__40_23)
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__40_23
state: LEGUP_F_roundAndPackFloat64_BB__40_23
   br label %.thread6
   Transition: default: LEGUP_F_roundAndPackFloat64_BB_thread6_24
state: LEGUP_F_roundAndPackFloat64_BB_thread6_24
   %.114 = phi i64 [ %.013, %40 ], [ %zSig, %.thread ], [ %z.1.i, %34 ] (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %roundBits.14 = phi i32 [ %roundBits.15, %40 ], [ 0, %.thread ], [ 0, %34 ] (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %.12 = phi i32 [ %.13, %40 ], [ %.1, %.thread ], [ 0, %34 ] (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %43 = add i64 %.114, 512 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %44 = lshr i64 %43, 10 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %45 = icmp eq i32 %roundBits.14, 512 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %46 = zext i1 %45 to i32 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %47 = xor i32 %46, -1 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %48 = sext i32 %47 to i64 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %49 = and i64 %44, %48 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %50 = icmp eq i64 %49, 0 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %51 = zext i32 %zSign to i64 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %52 = shl i64 %51, 63 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %53 = zext i32 %.12 to i64 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %.op = shl i64 %53, 52 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %54 = select i1 %50, i64 0, i64 %.op (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %55 = add i64 %52, %54 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   %56 = add i64 %55, %49 (endState: LEGUP_F_roundAndPackFloat64_BB_thread6_24)
   br label %57
   Transition: default: LEGUP_F_roundAndPackFloat64_BB__57_25
state: LEGUP_F_roundAndPackFloat64_BB__57_25
   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ] (endState: LEGUP_F_roundAndPackFloat64_BB__57_25)
   ret i64 %.0
   Transition: default: LEGUP_0

Basic Block: %0 Num States: 1
Basic Block: %4 Num States: 1
Basic Block: %6 Num States: 1
Basic Block: %8 Num States: 1
Basic Block: %11 Num States: 4
Basic Block: %17 Num States: 1
Basic Block: %19 Num States: 1
Basic Block: %21 Num States: 1
Basic Block: %31 Num States: 1
Basic Block: %34 Num States: 1
Basic Block: %.thread1 Num States: 4
Basic Block: %.thread Num States: 1
Basic Block: %.thread._crit_edge Num States: 3
Basic Block: %40 Num States: 2
Basic Block: %.thread6 Num States: 1
Basic Block: %57 Num States: 1
End Function: roundAndPackFloat64
--------------------------------------------------------------------------------

Target Family: CycloneV
Clock period constraint: 2.000000e+01ns
Start Function: main
state: LEGUP_0
   br label %1
   Transition: if (start): LEGUP_F_main_BB__1_1 default: LEGUP_0
state: LEGUP_F_main_BB__1_1
   %main_result.0 = phi i32 [ 0, %0 ], [ %208, %addFloat64Sigs.exit.i ] (endState: LEGUP_F_main_BB__1_1)
   %2 = phi i32 [ 0, %0 ], [ %210, %addFloat64Sigs.exit.i ] (endState: LEGUP_F_main_BB__1_1)
   %scevgep = getelementptr [46 x i64]* @z_output, i32 0, i32 %2 (endState: LEGUP_F_main_BB__1_1)
   %exitcond1 = icmp eq i32 %2, 46 (endState: LEGUP_F_main_BB__1_1)
   br i1 %exitcond1, label %211, label %3
   Transition: if (%exitcond1): LEGUP_F_main_BB__211_77 default: LEGUP_F_main_BB__3_2
state: LEGUP_F_main_BB__3_2
   %scevgep3 = getelementptr [46 x i64]* @a_input, i32 0, i32 %2 (endState: LEGUP_F_main_BB__3_2)
   %scevgep2 = getelementptr [46 x i64]* @b_input, i32 0, i32 %2 (endState: LEGUP_F_main_BB__3_2)
   %4 = load i64* %scevgep3, align 8 (endState: LEGUP_F_main_BB__3_3)
   %5 = load i64* %scevgep2, align 8 (endState: LEGUP_F_main_BB__3_3)
   Transition: default: LEGUP_F_main_BB__3_3
state: LEGUP_F_main_BB__3_3
   %6 = lshr i64 %4, 63 (endState: LEGUP_F_main_BB__3_3)
   %7 = trunc i64 %6 to i32 (endState: LEGUP_F_main_BB__3_3)
   %8 = lshr i64 %5, 63 (endState: LEGUP_F_main_BB__3_3)
   %9 = trunc i64 %8 to i32 (endState: LEGUP_F_main_BB__3_3)
   %10 = icmp eq i32 %7, %9 (endState: LEGUP_F_main_BB__3_3)
   %11 = and i64 %4, 4503599627370495 (endState: LEGUP_F_main_BB__3_3)
   %12 = lshr i64 %4, 52 (endState: LEGUP_F_main_BB__3_3)
   %.tr = trunc i64 %12 to i32 (endState: LEGUP_F_main_BB__3_3)
   %13 = and i32 %.tr, 2047 (endState: LEGUP_F_main_BB__3_3)
   %14 = and i64 %5, 4503599627370495 (endState: LEGUP_F_main_BB__3_3)
   %15 = lshr i64 %5, 52 (endState: LEGUP_F_main_BB__3_3)
   %.tr1 = trunc i64 %15 to i32 (endState: LEGUP_F_main_BB__3_3)
   %16 = and i32 %.tr1, 2047 (endState: LEGUP_F_main_BB__3_3)
   %17 = sub nsw i32 %13, %16 (endState: LEGUP_F_main_BB__3_3)
   br i1 %10, label %18, label %100
   Transition: if (%10): LEGUP_F_main_BB__18_4 default: LEGUP_F_main_BB__100_35
state: LEGUP_F_main_BB__18_4
   %19 = shl nuw nsw i64 %11, 9 (endState: LEGUP_F_main_BB__18_4)
   %20 = shl nuw nsw i64 %14, 9 (endState: LEGUP_F_main_BB__18_4)
   %21 = icmp sgt i32 %17, 0 (endState: LEGUP_F_main_BB__18_4)
   br i1 %21, label %22, label %48
   Transition: if (%21): LEGUP_F_main_BB__22_5 default: LEGUP_F_main_BB__48_13
state: LEGUP_F_main_BB__22_5
   %23 = icmp eq i32 %13, 2047 (endState: LEGUP_F_main_BB__22_5)
   br i1 %23, label %24, label %28
   Transition: if (%23): LEGUP_F_main_BB__24_6 default: LEGUP_F_main_BB__28_9
state: LEGUP_F_main_BB__24_6
   %25 = icmp eq i64 %11, 0 (endState: LEGUP_F_main_BB__24_6)
   br i1 %25, label %addFloat64Sigs.exit.i, label %float64_is_signaling_nan.exit1.i7.i3.i
   Transition: if (%25): LEGUP_F_main_BB_addFloat64Sigsexiti_75 default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_7
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_7
   %26 = trunc i64 %5 to i63 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_7)
   %27 = icmp ugt i63 %26, -4503599627370496 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_7)
   Transition: default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_8
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_8
   %..v = select i1 %27, i64 %5, i64 %4 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_8)
   %. = or i64 %..v, 2251799813685248 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7i3i_8)
   br label %addFloat64Sigs.exit.i
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB__28_9
   %29 = icmp eq i32 %16, 0 (endState: LEGUP_F_main_BB__28_9)
   %30 = or i64 %20, 2305843009213693952 (endState: LEGUP_F_main_BB__28_9)
   %bSig.i2.i.0 = select i1 %29, i64 %20, i64 %30 (endState: LEGUP_F_main_BB__28_9)
   %31 = sext i1 %29 to i32 (endState: LEGUP_F_main_BB__28_9)
   %expDiff.0.i6.i = add nsw i32 %17, %31 (endState: LEGUP_F_main_BB__28_9)
   %32 = icmp eq i32 %expDiff.0.i6.i, 0 (endState: LEGUP_F_main_BB__28_9)
   br i1 %32, label %shift64RightJamming.exit6.i.i, label %33
   Transition: if (%32): LEGUP_F_main_BB_shift64RightJammingexit6ii_29 default: LEGUP_F_main_BB__33_10
state: LEGUP_F_main_BB__33_10
   %34 = icmp slt i32 %expDiff.0.i6.i, 64 (endState: LEGUP_F_main_BB__33_10)
   br i1 %34, label %35, label %45
   Transition: if (%34): LEGUP_F_main_BB__35_11 default: LEGUP_F_main_BB__45_12
state: LEGUP_F_main_BB__35_11
   %36 = zext i32 %expDiff.0.i6.i to i64 (endState: LEGUP_F_main_BB__35_11)
   %37 = lshr i64 %bSig.i2.i.0, %36 (endState: LEGUP_F_main_BB__35_11)
   %38 = sub nsw i32 0, %expDiff.0.i6.i (endState: LEGUP_F_main_BB__35_11)
   %39 = and i32 %38, 63 (endState: LEGUP_F_main_BB__35_11)
   %40 = zext i32 %39 to i64 (endState: LEGUP_F_main_BB__35_11)
   %41 = shl i64 %bSig.i2.i.0, %40 (endState: LEGUP_F_main_BB__35_11)
   %42 = icmp ne i64 %41, 0 (endState: LEGUP_F_main_BB__35_11)
   %43 = zext i1 %42 to i64 (endState: LEGUP_F_main_BB__35_11)
   %44 = or i64 %37, %43 (endState: LEGUP_F_main_BB__35_11)
   br label %shift64RightJamming.exit6.i.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit6ii_29
state: LEGUP_F_main_BB__45_12
   %46 = icmp ne i64 %bSig.i2.i.0, 0 (endState: LEGUP_F_main_BB__45_12)
   %47 = zext i1 %46 to i64 (endState: LEGUP_F_main_BB__45_12)
   br label %shift64RightJamming.exit6.i.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit6ii_29
state: LEGUP_F_main_BB__48_13
   %49 = icmp slt i32 %17, 0 (endState: LEGUP_F_main_BB__48_13)
   br i1 %49, label %50, label %79
   Transition: if (%49): LEGUP_F_main_BB__50_14 default: LEGUP_F_main_BB__79_23
state: LEGUP_F_main_BB__50_14
   %51 = icmp eq i32 %16, 2047 (endState: LEGUP_F_main_BB__50_14)
   br i1 %51, label %52, label %59
   Transition: if (%51): LEGUP_F_main_BB__52_15 default: LEGUP_F_main_BB__59_19
state: LEGUP_F_main_BB__52_15
   %53 = icmp eq i64 %14, 0 (endState: LEGUP_F_main_BB__52_15)
   br i1 %53, label %56, label %float64_is_signaling_nan.exit1.i1.i.i
   Transition: if (%53): LEGUP_F_main_BB__56_18 default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16
   %54 = trunc i64 %5 to i63 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16)
   %55 = icmp ugt i63 %54, -4503599627370496 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_16)
   Transition: default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17
   %.42.v = select i1 %55, i64 %5, i64 %4 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17)
   %.42 = or i64 %.42.v, 2251799813685248 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_17)
   br label %addFloat64Sigs.exit.i
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB__56_18
   %57 = shl nuw i64 %6, 63 (endState: LEGUP_F_main_BB__56_18)
   %58 = or i64 %57, 9218868437227405312 (endState: LEGUP_F_main_BB__56_18)
   br label %addFloat64Sigs.exit.i
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB__59_19
   %60 = icmp eq i32 %13, 0 (endState: LEGUP_F_main_BB__59_19)
   %61 = or i64 %19, 2305843009213693952 (endState: LEGUP_F_main_BB__59_19)
   %aSig.i1.i.0 = select i1 %60, i64 %19, i64 %61 (endState: LEGUP_F_main_BB__59_19)
   %62 = zext i1 %60 to i32 (endState: LEGUP_F_main_BB__59_19)
   %expDiff.1.i7.i = add nsw i32 %17, %62 (endState: LEGUP_F_main_BB__59_19)
   %63 = sub nsw i32 0, %expDiff.1.i7.i (endState: LEGUP_F_main_BB__59_19)
   %64 = icmp eq i32 %expDiff.1.i7.i, 0 (endState: LEGUP_F_main_BB__59_19)
   br i1 %64, label %shift64RightJamming.exit6.i.i, label %65
   Transition: if (%64): LEGUP_F_main_BB_shift64RightJammingexit6ii_29 default: LEGUP_F_main_BB__65_20
state: LEGUP_F_main_BB__65_20
   %66 = icmp sgt i32 %expDiff.1.i7.i, -64 (endState: LEGUP_F_main_BB__65_20)
   br i1 %66, label %67, label %76
   Transition: if (%66): LEGUP_F_main_BB__67_21 default: LEGUP_F_main_BB__76_22
state: LEGUP_F_main_BB__67_21
   %68 = zext i32 %63 to i64 (endState: LEGUP_F_main_BB__67_21)
   %69 = lshr i64 %aSig.i1.i.0, %68 (endState: LEGUP_F_main_BB__67_21)
   %70 = and i32 %expDiff.1.i7.i, 63 (endState: LEGUP_F_main_BB__67_21)
   %71 = zext i32 %70 to i64 (endState: LEGUP_F_main_BB__67_21)
   %72 = shl i64 %aSig.i1.i.0, %71 (endState: LEGUP_F_main_BB__67_21)
   %73 = icmp ne i64 %72, 0 (endState: LEGUP_F_main_BB__67_21)
   %74 = zext i1 %73 to i64 (endState: LEGUP_F_main_BB__67_21)
   %75 = or i64 %69, %74 (endState: LEGUP_F_main_BB__67_21)
   br label %shift64RightJamming.exit6.i.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit6ii_29
state: LEGUP_F_main_BB__76_22
   %77 = icmp ne i64 %aSig.i1.i.0, 0 (endState: LEGUP_F_main_BB__76_22)
   %78 = zext i1 %77 to i64 (endState: LEGUP_F_main_BB__76_22)
   br label %shift64RightJamming.exit6.i.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit6ii_29
state: LEGUP_F_main_BB__79_23
   switch i32 %13, label %90 [
    i32 2047, label %80
    i32 0, label %85
  ]
   Transition: switch (%13) 2047: LEGUP_F_main_BB__80_24 0: LEGUP_F_main_BB__85_27 default: LEGUP_F_main_BB__90_28
state: LEGUP_F_main_BB__80_24
   %81 = or i64 %19, %20 (endState: LEGUP_F_main_BB__80_24)
   %82 = icmp eq i64 %81, 0 (endState: LEGUP_F_main_BB__80_24)
   br i1 %82, label %addFloat64Sigs.exit.i, label %float64_is_signaling_nan.exit1.i.i11.i
   Transition: if (%82): LEGUP_F_main_BB_addFloat64Sigsexiti_75 default: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_25
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_25
   %83 = trunc i64 %5 to i63 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_25)
   %84 = icmp ugt i63 %83, -4503599627370496 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_25)
   Transition: default: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_26
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_26
   %.45.v = select i1 %84, i64 %5, i64 %4 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_26)
   %.45 = or i64 %.45.v, 2251799813685248 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1ii11i_26)
   br label %addFloat64Sigs.exit.i
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB__85_27
   %86 = add nuw nsw i64 %19, %20 (endState: LEGUP_F_main_BB__85_27)
   %87 = lshr exact i64 %86, 9 (endState: LEGUP_F_main_BB__85_27)
   %88 = shl nuw i64 %6, 63 (endState: LEGUP_F_main_BB__85_27)
   %89 = or i64 %88, %87 (endState: LEGUP_F_main_BB__85_27)
   br label %addFloat64Sigs.exit.i
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB__90_28
   %91 = or i64 %19, 4611686018427387904 (endState: LEGUP_F_main_BB__90_28)
   %92 = add nuw i64 %91, %20 (endState: LEGUP_F_main_BB__90_28)
   br label %98
   Transition: default: LEGUP_F_main_BB__98_32
state: LEGUP_F_main_BB_shift64RightJammingexit6ii_29
   %aSig.i1.i.1 = phi i64 [ %19, %35 ], [ %19, %45 ], [ %19, %28 ], [ %aSig.i1.i.0, %59 ], [ %75, %67 ], [ %78, %76 ] (endState: LEGUP_F_main_BB_shift64RightJammingexit6ii_29)
   %bSig.i2.i.1 = phi i64 [ %44, %35 ], [ %47, %45 ], [ %bSig.i2.i.0, %28 ], [ %20, %59 ], [ %20, %67 ], [ %20, %76 ] (endState: LEGUP_F_main_BB_shift64RightJammingexit6ii_29)
   %zExp.0.i14.i = phi i32 [ %13, %35 ], [ %13, %45 ], [ %13, %28 ], [ %16, %59 ], [ %16, %67 ], [ %16, %76 ] (endState: LEGUP_F_main_BB_shift64RightJammingexit6ii_29)
   %93 = or i64 %aSig.i1.i.1, 2305843009213693952 (endState: LEGUP_F_main_BB_shift64RightJammingexit6ii_29)
   %94 = add i64 %93, %bSig.i2.i.1 (endState: LEGUP_F_main_BB_shift64RightJammingexit6ii_29)
   %95 = shl i64 %94, 1 (endState: LEGUP_F_main_BB_shift64RightJammingexit6ii_29)
   %96 = icmp slt i64 %95, 0 (endState: LEGUP_F_main_BB_shift64RightJammingexit6ii_29)
   %.46 = select i1 %96, i64 %94, i64 %95 (endState: LEGUP_F_main_BB_shift64RightJammingexit6ii_29)
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit6ii_30
state: LEGUP_F_main_BB_shift64RightJammingexit6ii_30
   %not. = xor i1 %96, true (endState: LEGUP_F_main_BB_shift64RightJammingexit6ii_30)
   %97 = sext i1 %not. to i32 (endState: LEGUP_F_main_BB_shift64RightJammingexit6ii_30)
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit6ii_31
state: LEGUP_F_main_BB_shift64RightJammingexit6ii_31
   %zExp.0.i14.i. = add nsw i32 %zExp.0.i14.i, %97 (endState: LEGUP_F_main_BB_shift64RightJammingexit6ii_31)
   br label %98
   Transition: default: LEGUP_F_main_BB__98_32
state: LEGUP_F_main_BB__98_32
   %zExp.2.i.i = phi i32 [ %13, %90 ], [ %zExp.0.i14.i., %shift64RightJamming.exit6.i.i ] (endState: LEGUP_F_main_BB__98_32)
   %zSig.1.i.i = phi i64 [ %92, %90 ], [ %.46, %shift64RightJamming.exit6.i.i ] (endState: LEGUP_F_main_BB__98_32)
   Transition: default: LEGUP_function_call_33
state: LEGUP_function_call_33
   %99 = call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.2.i.i, i64 %zSig.1.i.i) #1 (endState: LEGUP_function_call_33)
   Transition: if (roundAndPackFloat64_finish_final): LEGUP_F_main_BB__98_34 default: LEGUP_function_call_33
state: LEGUP_F_main_BB__98_34
   br label %addFloat64Sigs.exit.i
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB__100_35
   %101 = shl nuw nsw i64 %11, 10 (endState: LEGUP_F_main_BB__100_35)
   %102 = shl nuw nsw i64 %14, 10 (endState: LEGUP_F_main_BB__100_35)
   %103 = icmp sgt i32 %17, 0 (endState: LEGUP_F_main_BB__100_35)
   br i1 %103, label %104, label %106
   Transition: if (%103): LEGUP_F_main_BB__104_36 default: LEGUP_F_main_BB__106_37
state: LEGUP_F_main_BB__104_36
   %105 = icmp eq i32 %13, 2047 (endState: LEGUP_F_main_BB__104_36)
   br i1 %105, label %157, label %161
   Transition: if (%105): LEGUP_F_main_BB__157_60 default: LEGUP_F_main_BB__161_63
state: LEGUP_F_main_BB__106_37
   %107 = icmp slt i32 %17, 0 (endState: LEGUP_F_main_BB__106_37)
   br i1 %107, label %108, label %110
   Transition: if (%107): LEGUP_F_main_BB__108_38 default: LEGUP_F_main_BB__110_39
state: LEGUP_F_main_BB__108_38
   %109 = icmp eq i32 %16, 2047 (endState: LEGUP_F_main_BB__108_38)
   br i1 %109, label %124, label %133
   Transition: if (%109): LEGUP_F_main_BB__124_50 default: LEGUP_F_main_BB__133_54
state: LEGUP_F_main_BB__110_39
   switch i32 %13, label %120 [
    i32 2047, label %111
    i32 0, label %119
  ]
   Transition: switch (%13) 2047: LEGUP_F_main_BB__111_40 0: LEGUP_F_main_BB__119_47 default: LEGUP_F_main_BB__120_48
state: LEGUP_F_main_BB__111_40
   %112 = or i64 %101, %102 (endState: LEGUP_F_main_BB__111_40)
   %113 = icmp eq i64 %112, 0 (endState: LEGUP_F_main_BB__111_40)
   br i1 %113, label %116, label %float64_is_signaling_nan.exit1.i7.i.i
   Transition: if (%113): LEGUP_F_main_BB__116_43 default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_41
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_41
   %114 = trunc i64 %5 to i63 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_41)
   %115 = icmp ugt i63 %114, -4503599627370496 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_41)
   Transition: default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_42
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_42
   %.49.v = select i1 %115, i64 %5, i64 %4 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_42)
   %.49 = or i64 %.49.v, 2251799813685248 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i7ii_42)
   br label %addFloat64Sigs.exit.i
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB__116_43
   %117 = load i32* @float_exception_flags, align 4 (endState: LEGUP_F_main_BB__116_45)
   Transition: default: LEGUP_F_main_BB__116_44
state: LEGUP_F_main_BB__116_44
   Transition: default: LEGUP_F_main_BB__116_45
state: LEGUP_F_main_BB__116_45
   %118 = or i32 %117, 16 (endState: LEGUP_F_main_BB__116_45)
   store i32 %118, i32* @float_exception_flags, align 4 (endState: LEGUP_F_main_BB__116_46)
   Transition: default: LEGUP_F_main_BB__116_46
state: LEGUP_F_main_BB__116_46
   br label %addFloat64Sigs.exit.i
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB__119_47
   br label %120
   Transition: default: LEGUP_F_main_BB__120_48
state: LEGUP_F_main_BB__120_48
   %bExp.0.i.i = phi i32 [ 1, %119 ], [ %16, %110 ] (endState: LEGUP_F_main_BB__120_48)
   %aExp.0.i.i = phi i32 [ 1, %119 ], [ %13, %110 ] (endState: LEGUP_F_main_BB__120_48)
   %121 = icmp ult i64 %102, %101 (endState: LEGUP_F_main_BB__120_48)
   br i1 %121, label %182, label %122
   Transition: if (%121): LEGUP_F_main_BB__182_68 default: LEGUP_F_main_BB__122_49
state: LEGUP_F_main_BB__122_49
   %123 = icmp ult i64 %101, %102 (endState: LEGUP_F_main_BB__122_49)
   br i1 %123, label %154, label %addFloat64Sigs.exit.i
   Transition: if (%123): LEGUP_F_main_BB__154_59 default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB__124_50
   %125 = icmp eq i64 %14, 0 (endState: LEGUP_F_main_BB__124_50)
   br i1 %125, label %128, label %float64_is_signaling_nan.exit1.i4.i.i
   Transition: if (%125): LEGUP_F_main_BB__128_53 default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51
   %126 = trunc i64 %5 to i63 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51)
   %127 = icmp ugt i63 %126, -4503599627370496 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_51)
   Transition: default: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_52
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_52
   %.52.v = select i1 %127, i64 %5, i64 %4 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_52)
   %.52 = or i64 %.52.v, 2251799813685248 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_52)
   br label %addFloat64Sigs.exit.i
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB__128_53
   %129 = xor i32 %7, 1 (endState: LEGUP_F_main_BB__128_53)
   %130 = zext i32 %129 to i64 (endState: LEGUP_F_main_BB__128_53)
   %131 = shl nuw i64 %130, 63 (endState: LEGUP_F_main_BB__128_53)
   %132 = or i64 %131, 9218868437227405312 (endState: LEGUP_F_main_BB__128_53)
   br label %addFloat64Sigs.exit.i
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB__133_54
   %134 = icmp eq i32 %13, 0 (endState: LEGUP_F_main_BB__133_54)
   %135 = or i64 %101, 4611686018427387904 (endState: LEGUP_F_main_BB__133_54)
   %aSig.i.i.0 = select i1 %134, i64 %101, i64 %135 (endState: LEGUP_F_main_BB__133_54)
   %136 = zext i1 %134 to i32 (endState: LEGUP_F_main_BB__133_54)
   %expDiff.0.i.i = add nsw i32 %17, %136 (endState: LEGUP_F_main_BB__133_54)
   %137 = sub nsw i32 0, %expDiff.0.i.i (endState: LEGUP_F_main_BB__133_54)
   %138 = icmp eq i32 %expDiff.0.i.i, 0 (endState: LEGUP_F_main_BB__133_54)
   br i1 %138, label %shift64RightJamming.exit3.i.i, label %139
   Transition: if (%138): LEGUP_F_main_BB_shift64RightJammingexit3ii_58 default: LEGUP_F_main_BB__139_55
state: LEGUP_F_main_BB__139_55
   %140 = icmp sgt i32 %expDiff.0.i.i, -64 (endState: LEGUP_F_main_BB__139_55)
   br i1 %140, label %141, label %150
   Transition: if (%140): LEGUP_F_main_BB__141_56 default: LEGUP_F_main_BB__150_57
state: LEGUP_F_main_BB__141_56
   %142 = zext i32 %137 to i64 (endState: LEGUP_F_main_BB__141_56)
   %143 = lshr i64 %aSig.i.i.0, %142 (endState: LEGUP_F_main_BB__141_56)
   %144 = and i32 %expDiff.0.i.i, 63 (endState: LEGUP_F_main_BB__141_56)
   %145 = zext i32 %144 to i64 (endState: LEGUP_F_main_BB__141_56)
   %146 = shl i64 %aSig.i.i.0, %145 (endState: LEGUP_F_main_BB__141_56)
   %147 = icmp ne i64 %146, 0 (endState: LEGUP_F_main_BB__141_56)
   %148 = zext i1 %147 to i64 (endState: LEGUP_F_main_BB__141_56)
   %149 = or i64 %143, %148 (endState: LEGUP_F_main_BB__141_56)
   br label %shift64RightJamming.exit3.i.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit3ii_58
state: LEGUP_F_main_BB__150_57
   %151 = icmp ne i64 %aSig.i.i.0, 0 (endState: LEGUP_F_main_BB__150_57)
   %152 = zext i1 %151 to i64 (endState: LEGUP_F_main_BB__150_57)
   br label %shift64RightJamming.exit3.i.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexit3ii_58
state: LEGUP_F_main_BB_shift64RightJammingexit3ii_58
   %z.1.i2.i.i = phi i64 [ %aSig.i.i.0, %133 ], [ %149, %141 ], [ %152, %150 ] (endState: LEGUP_F_main_BB_shift64RightJammingexit3ii_58)
   %153 = or i64 %102, 4611686018427387904 (endState: LEGUP_F_main_BB_shift64RightJammingexit3ii_58)
   br label %154
   Transition: default: LEGUP_F_main_BB__154_59
state: LEGUP_F_main_BB__154_59
   %aSig.i.i.1 = phi i64 [ %z.1.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %101, %122 ] (endState: LEGUP_F_main_BB__154_59)
   %bSig.i.i.0 = phi i64 [ %153, %shift64RightJamming.exit3.i.i ], [ %102, %122 ] (endState: LEGUP_F_main_BB__154_59)
   %bExp.1.i.i = phi i32 [ %16, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %122 ] (endState: LEGUP_F_main_BB__154_59)
   %155 = sub i64 %bSig.i.i.0, %aSig.i.i.1 (endState: LEGUP_F_main_BB__154_59)
   %156 = xor i32 %7, 1 (endState: LEGUP_F_main_BB__154_59)
   br label %184
   Transition: default: LEGUP_F_main_BB__184_69
state: LEGUP_F_main_BB__157_60
   %158 = icmp eq i64 %11, 0 (endState: LEGUP_F_main_BB__157_60)
   br i1 %158, label %addFloat64Sigs.exit.i, label %float64_is_signaling_nan.exit1.i.i.i
   Transition: if (%158): LEGUP_F_main_BB_addFloat64Sigsexiti_75 default: LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61
   %159 = trunc i64 %5 to i63 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61)
   %160 = icmp ugt i63 %159, -4503599627370496 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_61)
   Transition: default: LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62
state: LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62
   %.55.v = select i1 %160, i64 %5, i64 %4 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62)
   %.55 = or i64 %.55.v, 2251799813685248 (endState: LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_62)
   br label %addFloat64Sigs.exit.i
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB__161_63
   %162 = icmp eq i32 %16, 0 (endState: LEGUP_F_main_BB__161_63)
   %163 = or i64 %102, 4611686018427387904 (endState: LEGUP_F_main_BB__161_63)
   %bSig.i.i.1 = select i1 %162, i64 %102, i64 %163 (endState: LEGUP_F_main_BB__161_63)
   %164 = sext i1 %162 to i32 (endState: LEGUP_F_main_BB__161_63)
   %expDiff.1.i.i = add nsw i32 %17, %164 (endState: LEGUP_F_main_BB__161_63)
   %165 = icmp eq i32 %expDiff.1.i.i, 0 (endState: LEGUP_F_main_BB__161_63)
   br i1 %165, label %shift64RightJamming.exit.i.i, label %166
   Transition: if (%165): LEGUP_F_main_BB_shift64RightJammingexitii_67 default: LEGUP_F_main_BB__166_64
state: LEGUP_F_main_BB__166_64
   %167 = icmp slt i32 %expDiff.1.i.i, 64 (endState: LEGUP_F_main_BB__166_64)
   br i1 %167, label %168, label %178
   Transition: if (%167): LEGUP_F_main_BB__168_65 default: LEGUP_F_main_BB__178_66
state: LEGUP_F_main_BB__168_65
   %169 = zext i32 %expDiff.1.i.i to i64 (endState: LEGUP_F_main_BB__168_65)
   %170 = lshr i64 %bSig.i.i.1, %169 (endState: LEGUP_F_main_BB__168_65)
   %171 = sub nsw i32 0, %expDiff.1.i.i (endState: LEGUP_F_main_BB__168_65)
   %172 = and i32 %171, 63 (endState: LEGUP_F_main_BB__168_65)
   %173 = zext i32 %172 to i64 (endState: LEGUP_F_main_BB__168_65)
   %174 = shl i64 %bSig.i.i.1, %173 (endState: LEGUP_F_main_BB__168_65)
   %175 = icmp ne i64 %174, 0 (endState: LEGUP_F_main_BB__168_65)
   %176 = zext i1 %175 to i64 (endState: LEGUP_F_main_BB__168_65)
   %177 = or i64 %170, %176 (endState: LEGUP_F_main_BB__168_65)
   br label %shift64RightJamming.exit.i.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexitii_67
state: LEGUP_F_main_BB__178_66
   %179 = icmp ne i64 %bSig.i.i.1, 0 (endState: LEGUP_F_main_BB__178_66)
   %180 = zext i1 %179 to i64 (endState: LEGUP_F_main_BB__178_66)
   br label %shift64RightJamming.exit.i.i
   Transition: default: LEGUP_F_main_BB_shift64RightJammingexitii_67
state: LEGUP_F_main_BB_shift64RightJammingexitii_67
   %z.1.i.i.i = phi i64 [ %bSig.i.i.1, %161 ], [ %177, %168 ], [ %180, %178 ] (endState: LEGUP_F_main_BB_shift64RightJammingexitii_67)
   %181 = or i64 %101, 4611686018427387904 (endState: LEGUP_F_main_BB_shift64RightJammingexitii_67)
   br label %182
   Transition: default: LEGUP_F_main_BB__182_68
state: LEGUP_F_main_BB__182_68
   %aSig.i.i.2 = phi i64 [ %181, %shift64RightJamming.exit.i.i ], [ %101, %120 ] (endState: LEGUP_F_main_BB__182_68)
   %bSig.i.i.2 = phi i64 [ %z.1.i.i.i, %shift64RightJamming.exit.i.i ], [ %102, %120 ] (endState: LEGUP_F_main_BB__182_68)
   %aExp.1.i.i = phi i32 [ %13, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %120 ] (endState: LEGUP_F_main_BB__182_68)
   %183 = sub i64 %aSig.i.i.2, %bSig.i.i.2 (endState: LEGUP_F_main_BB__182_68)
   br label %184
   Transition: default: LEGUP_F_main_BB__184_69
state: LEGUP_F_main_BB__184_69
   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %182 ], [ %bExp.1.i.i, %154 ] (endState: LEGUP_F_main_BB__184_69)
   %.01.i.i = phi i32 [ %7, %182 ], [ %156, %154 ] (endState: LEGUP_F_main_BB__184_69)
   %zSig.0.i.i = phi i64 [ %183, %182 ], [ %155, %154 ] (endState: LEGUP_F_main_BB__184_69)
   %185 = add nsw i32 %zExp.0.i.i, -1 (endState: LEGUP_F_main_BB__184_69)
   %186 = icmp ult i64 %zSig.0.i.i, 4294967296 (endState: LEGUP_F_main_BB__184_69)
   %187 = lshr i64 %zSig.0.i.i, 32 (endState: LEGUP_F_main_BB__184_69)
   %.56 = select i1 %186, i32 32, i32 0 (endState: LEGUP_F_main_BB__184_69)
   %zSig.0.i.i. = select i1 %186, i64 %zSig.0.i.i, i64 %187 (endState: LEGUP_F_main_BB__184_69)
   %188 = trunc i64 %zSig.0.i.i. to i32 (endState: LEGUP_F_main_BB__184_69)
   %189 = icmp ult i32 %188, 65536 (endState: LEGUP_F_main_BB__184_69)
   %190 = shl i32 %188, 16 (endState: LEGUP_F_main_BB__184_69)
   %shiftCount.0.i.i.i.i.i = select i1 %189, i32 16, i32 0 (endState: LEGUP_F_main_BB__184_69)
   %.0.i.i.i.i.i = select i1 %189, i32 %190, i32 %188 (endState: LEGUP_F_main_BB__184_69)
   %191 = icmp ult i32 %.0.i.i.i.i.i, 16777216 (endState: LEGUP_F_main_BB__184_69)
   br i1 %191, label %192, label %normalizeRoundAndPackFloat64.exit.i.i
   Transition: if (%191): LEGUP_F_main_BB__192_70 default: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71
state: LEGUP_F_main_BB__192_70
   %193 = or i32 %shiftCount.0.i.i.i.i.i, 8 (endState: LEGUP_F_main_BB__192_70)
   %194 = shl i32 %.0.i.i.i.i.i, 8 (endState: LEGUP_F_main_BB__192_70)
   br label %normalizeRoundAndPackFloat64.exit.i.i
   Transition: default: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71
state: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71
   %shiftCount.1.i.i.i.i.i = phi i32 [ %193, %192 ], [ %shiftCount.0.i.i.i.i.i, %184 ] (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71)
   %.1.i.i.i.i.i = phi i32 [ %194, %192 ], [ %.0.i.i.i.i.i, %184 ] (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71)
   %195 = lshr i32 %.1.i.i.i.i.i, 24 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71)
   %196 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %195 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_71)
   %197 = load i32* %196, align 4 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)
   Transition: default: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72
state: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72
   %198 = add nsw i32 %shiftCount.1.i.i.i.i.i, %197 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)
   %199 = add nsw i32 %.56, %198 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)
   %200 = add nsw i32 %199, -1 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)
   %201 = sub nsw i32 %185, %200 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)
   %202 = zext i32 %200 to i64 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)
   %203 = shl i64 %zSig.0.i.i, %202 (endState: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_72)
   Transition: default: LEGUP_function_call_73
state: LEGUP_function_call_73
   %204 = call fastcc i64 @roundAndPackFloat64(i32 %.01.i.i, i32 %201, i64 %203) #1 (endState: LEGUP_function_call_73)
   Transition: if (roundAndPackFloat64_finish_final): LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74 default: LEGUP_function_call_73
state: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_74
   br label %addFloat64Sigs.exit.i
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_75
state: LEGUP_F_main_BB_addFloat64Sigsexiti_75
   %.0.i = phi i64 [ %99, %98 ], [ %58, %56 ], [ %89, %85 ], [ %4, %24 ], [ %4, %80 ], [ %204, %normalizeRoundAndPackFloat64.exit.i.i ], [ %132, %128 ], [ 9223372036854775807, %116 ], [ 0, %122 ], [ %4, %157 ], [ %., %float64_is_signaling_nan.exit1.i7.i3.i ], [ %.42, %float64_is_signaling_nan.exit1.i1.i.i ], [ %.45, %float64_is_signaling_nan.exit1.i.i11.i ], [ %.49, %float64_is_signaling_nan.exit1.i7.i.i ], [ %.52, %float64_is_signaling_nan.exit1.i4.i.i ], [ %.55, %float64_is_signaling_nan.exit1.i.i.i ] (endState: LEGUP_F_main_BB_addFloat64Sigsexiti_75)
   %205 = load i64* %scevgep, align 8 (endState: LEGUP_F_main_BB_addFloat64Sigsexiti_76)
   %210 = add nsw i32 %2, 1 (endState: LEGUP_F_main_BB_addFloat64Sigsexiti_75)
   Transition: default: LEGUP_F_main_BB_addFloat64Sigsexiti_76
state: LEGUP_F_main_BB_addFloat64Sigsexiti_76
   %206 = icmp eq i64 %.0.i, %205 (endState: LEGUP_F_main_BB_addFloat64Sigsexiti_76)
   %207 = zext i1 %206 to i32 (endState: LEGUP_F_main_BB_addFloat64Sigsexiti_76)
   %208 = add nsw i32 %main_result.0, %207 (endState: LEGUP_F_main_BB_addFloat64Sigsexiti_76)
   %209 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([65 x i8]* @.str, i32 0, i32 0), i64 %4, i64 %5, i64 %205, i64 %.0.i) #2 (endState: LEGUP_F_main_BB_addFloat64Sigsexiti_76)
   br label %1
   Transition: default: LEGUP_F_main_BB__1_1
state: LEGUP_F_main_BB__211_77
   %212 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %main_result.0) #2 (endState: LEGUP_F_main_BB__211_77)
   %213 = icmp eq i32 %main_result.0, 46 (endState: LEGUP_F_main_BB__211_77)
   br i1 %213, label %214, label %216
   Transition: if (%213): LEGUP_F_main_BB__214_78 default: LEGUP_F_main_BB__216_79
state: LEGUP_F_main_BB__214_78
   %215 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #2 (endState: LEGUP_F_main_BB__214_78)
   br label %218
   Transition: default: LEGUP_F_main_BB__218_80
state: LEGUP_F_main_BB__216_79
   %217 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #2 (endState: LEGUP_F_main_BB__216_79)
   br label %218
   Transition: default: LEGUP_F_main_BB__218_80
state: LEGUP_F_main_BB__218_80
   ret i32 %main_result.0
   Transition: default: LEGUP_0

Basic Block: %0 Num States: 1
Basic Block: %1 Num States: 1
Basic Block: %3 Num States: 2
Basic Block: %18 Num States: 1
Basic Block: %22 Num States: 1
Basic Block: %24 Num States: 1
Basic Block: %float64_is_signaling_nan.exit1.i7.i3.i Num States: 2
Basic Block: %28 Num States: 1
Basic Block: %33 Num States: 1
Basic Block: %35 Num States: 1
Basic Block: %45 Num States: 1
Basic Block: %48 Num States: 1
Basic Block: %50 Num States: 1
Basic Block: %52 Num States: 1
Basic Block: %float64_is_signaling_nan.exit1.i1.i.i Num States: 2
Basic Block: %56 Num States: 1
Basic Block: %59 Num States: 1
Basic Block: %65 Num States: 1
Basic Block: %67 Num States: 1
Basic Block: %76 Num States: 1
Basic Block: %79 Num States: 1
Basic Block: %80 Num States: 1
Basic Block: %float64_is_signaling_nan.exit1.i.i11.i Num States: 2
Basic Block: %85 Num States: 1
Basic Block: %90 Num States: 1
Basic Block: %shift64RightJamming.exit6.i.i Num States: 3
Basic Block: %98 Num States: 3
Basic Block: %100 Num States: 1
Basic Block: %104 Num States: 1
Basic Block: %106 Num States: 1
Basic Block: %108 Num States: 1
Basic Block: %110 Num States: 1
Basic Block: %111 Num States: 1
Basic Block: %float64_is_signaling_nan.exit1.i7.i.i Num States: 2
Basic Block: %116 Num States: 4
Basic Block: %119 Num States: 1
Basic Block: %120 Num States: 1
Basic Block: %122 Num States: 1
Basic Block: %124 Num States: 1
Basic Block: %float64_is_signaling_nan.exit1.i4.i.i Num States: 2
Basic Block: %128 Num States: 1
Basic Block: %133 Num States: 1
Basic Block: %139 Num States: 1
Basic Block: %141 Num States: 1
Basic Block: %150 Num States: 1
Basic Block: %shift64RightJamming.exit3.i.i Num States: 1
Basic Block: %154 Num States: 1
Basic Block: %157 Num States: 1
Basic Block: %float64_is_signaling_nan.exit1.i.i.i Num States: 2
Basic Block: %161 Num States: 1
Basic Block: %166 Num States: 1
Basic Block: %168 Num States: 1
Basic Block: %178 Num States: 1
Basic Block: %shift64RightJamming.exit.i.i Num States: 1
Basic Block: %182 Num States: 1
Basic Block: %184 Num States: 1
Basic Block: %192 Num States: 1
Basic Block: %normalizeRoundAndPackFloat64.exit.i.i Num States: 4
Basic Block: %addFloat64Sigs.exit.i Num States: 2
Basic Block: %211 Num States: 1
Basic Block: %214 Num States: 1
Basic Block: %216 Num States: 1
Basic Block: %218 Num States: 1
End Function: main
--------------------------------------------------------------------------------

