//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 15:38:57 2017
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: roundAndPackFloat64
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
a_input_local_mem_dual_port   1                             
b_input_local_mem_dual_port   1                             
countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port1                             
mem_dual_port                 1                             
z_output_local_mem_dual_port  1                             

Running Bipartite Weighted Matching on function: roundAndPackFloat64
State: LEGUP_F_roundAndPackFloat64_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  %12 = load i32* @float_excep... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  %12 = load i32* @float_excep... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %12 = load i32* @float_excep... (idx: 0) -> roundAndPackFloat64_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_roundAndPackFloat64_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %13, i32* @float_e... can share an output register with another operation already assigned to roundAndPackFloat64_mem_dual_port_0
                                                  roundAndPackFloat64_mem_dual_port_0
  store i32 %13, i32* @float_e... (idx: 0)        5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  store i32 %13, i32* @float_e... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %13, i32* @float_e... (idx: 0) -> roundAndPackFloat64_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_roundAndPackFloat64_BB_thread1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %37 = load i32* @float_excep... can share an output register with another operation already assigned to roundAndPackFloat64_mem_dual_port_0
                                                  roundAndPackFloat64_mem_dual_port_0
  %37 = load i32* @float_excep... (idx: 0)        -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  %37 = load i32* @float_excep... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %37 = load i32* @float_excep... (idx: 0) -> roundAndPackFloat64_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_roundAndPackFloat64_BB_thread1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %38, i32* @float_e... can share an output register with another operation already assigned to roundAndPackFloat64_mem_dual_port_0
                                                  roundAndPackFloat64_mem_dual_port_0
  store i32 %38, i32* @float_e... (idx: 0)        6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  store i32 %38, i32* @float_e... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %38, i32* @float_e... (idx: 0) -> roundAndPackFloat64_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_roundAndPackFloat64_BB_thread_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre = load i32* @float_exc... can share an output register with another operation already assigned to roundAndPackFloat64_mem_dual_port_0
                                                  roundAndPackFloat64_mem_dual_port_0
  %.pre = load i32* @float_exc... (idx: 0)        -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  %.pre = load i32* @float_exc... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre = load i32* @float_exc... (idx: 0) -> roundAndPackFloat64_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_roundAndPackFloat64_BB__40
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %42, i32* @float_e... can share an output register with another operation already assigned to roundAndPackFloat64_mem_dual_port_0
                                                  roundAndPackFloat64_mem_dual_port_0
  store i32 %42, i32* @float_e... (idx: 0)        7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  store i32 %42, i32* @float_e... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %42, i32* @float_e... (idx: 0) -> roundAndPackFloat64_mem_dual_port_0 (mux inputs: 3)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__3
Binding functional unit type: a_input_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_a_input_local_mem_dual_port_0
  %4 = load i64* %scevgep3, al... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_a_input_local_mem_dual_port_0
  %4 = load i64* %scevgep3, al... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = load i64* %scevgep3, al... (idx: 0) -> main_a_input_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__3
Binding functional unit type: b_input_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_b_input_local_mem_dual_port_0
  %5 = load i64* %scevgep2, al... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_b_input_local_mem_dual_port_0
  %5 = load i64* %scevgep2, al... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %5 = load i64* %scevgep2, al... (idx: 0) -> main_b_input_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__116
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  %117 = load i32* @float_exce... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %117 = load i32* @float_exce... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %117 = load i32* @float_exce... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__116
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %118, i32* @float_... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %118, i32* @float_... (idx: 0)        5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %118, i32* @float_... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %118, i32* @float_... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii
Binding functional unit type: countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port_0
  %197 = load i32* %196, align... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port_0
  %197 = load i32* %196, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %197 = load i32* %196, align... (idx: 0) -> main_countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_addFloat64Sigsexiti
Binding functional unit type: z_output_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_z_output_local_mem_dual_port_0
  %205 = load i64* %scevgep, a... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_z_output_local_mem_dual_port_0
  %205 = load i64* %scevgep, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %205 = load i64* %scevgep, a... (idx: 0) -> main_z_output_local_mem_dual_port_0 (mux inputs: 1)

