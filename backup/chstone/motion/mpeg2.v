//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 15:57:45 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 14
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @inRdbfr = internal unnamed_addr constant [2048 x i8] c"\00hx0H \A0\C0\C0@8\F8\F8X\88\E0\C8\D0\B0H`(\B8\A0  x\A8@ H\B8\D8\F0\00\D8\C0@p0\A0\98(\B0  \F8\C8h\18\D8\F0\80\B0H\E8\F0\B80x0\C0@\A8\A0\80\A0\...
`define TAG_g_inRdbfr `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_inRdbfr_a {`TAG_g_inRdbfr, 23'd0}
// @ld_Bfr = internal unnamed_addr global i32 0, align 4
`define TAG_g_ld_Bfr `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_ld_Bfr_a {`TAG_g_ld_Bfr, 23'd4}
// @ld_Incnt = internal unnamed_addr global i32 0, align 4
`define TAG_g_ld_Incnt `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_ld_Incnt_a {`TAG_g_ld_Incnt, 23'd8}
// @ld_Rdbfr = internal global [2048 x i8] zeroinitializer, align 1
`define TAG_g_ld_Rdbfr `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ld_Rdbfr_a {`TAG_g_ld_Rdbfr, 23'd0}
// @ld_Rdptr = internal unnamed_addr global i8* null, align 4
`define TAG_g_ld_Rdptr `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_ld_Rdptr_a {`TAG_g_ld_Rdptr, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [10:0] rom_8_address_a;
reg [10:0] rom_8_address_b;
reg rom_8_write_enable_a;
reg rom_8_write_enable_b;
reg [7:0] rom_8_in_a;
reg [7:0] rom_8_in_b;
wire [7:0] rom_8_out_a;
wire [7:0] rom_8_out_b;

// @inRdbfr = internal unnamed_addr constant [2048 x i8] c"\00hx0H \A0\C0\C0@8\F8\F8X\88\E0\C8\D0\B0H`(\B8\A0  x\A8@ H\B8\D8\F0\00\D8\C0@p0\A0\98(\B0  \F8\C8h\18\D8\F0\80\B0H\E8\F0\B80x0\C0@\A8\A0\80\A0\...
rom_dual_port rom_8 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_8_address_a ),
	.address_b( rom_8_address_b ),
	.q_a( rom_8_out_a ),
	.q_b( rom_8_out_b)
);
defparam rom_8.width_a = 8;
defparam rom_8.width_b = 8;
defparam rom_8.widthad_a = 11;
defparam rom_8.widthad_b = 11;
defparam rom_8.numwords_a = 2048;
defparam rom_8.numwords_b = 2048;
defparam rom_8.latency = ram_latency;
defparam rom_8.init_file = "rom_8.mif";

reg [10:0] ram_8_address_a;
reg [10:0] ram_8_address_b;
reg ram_8_write_enable_a;
reg ram_8_write_enable_b;
reg [7:0] ram_8_in_a;
reg [7:0] ram_8_in_b;
wire [7:0] ram_8_out_a;
wire [7:0] ram_8_out_b;

// @ld_Rdbfr = internal global [2048 x i8] zeroinitializer, align 1
ram_dual_port ram_8 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_8_address_a ),
	.address_b( ram_8_address_b ),
	.wren_a( ram_8_write_enable_a ),
	.wren_b( ram_8_write_enable_b ),
	.data_a( ram_8_in_a ),
	.data_b( ram_8_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_8_out_a ),
	.q_b( ram_8_out_b)
);
defparam ram_8.width_a = 8;
defparam ram_8.width_b = 8;
defparam ram_8.widthad_a = 11;
defparam ram_8.widthad_b = 11;
defparam ram_8.width_be_a = 1;
defparam ram_8.width_be_b = 1;
defparam ram_8.numwords_a = 2048;
defparam ram_8.numwords_b = 2048;
defparam ram_8.latency = ram_latency;
defparam ram_8.init_file = "ram_8.mif";

reg [1:0] ram_32_address_a;
reg [1:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @ld_Rdptr = internal unnamed_addr global i8* null, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 2;
defparam ram_32.widthad_b = 2;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 3;
defparam ram_32.numwords_b = 3;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_8_a;
assign select_rom_8_a = (tag_a == 2);
reg [ram_latency:0] select_rom_8_reg_a;
wire [7:0] memory_controller_rom_8_out_a;
assign memory_controller_rom_8_out_a = {8{ select_rom_8_reg_a[ram_latency]}} & rom_8_out_a;

wire select_ram_8_a;
assign select_ram_8_a = (tag_a == 3);
reg [ram_latency:0] select_ram_8_reg_a;
wire [7:0] memory_controller_ram_8_out_a;
assign memory_controller_ram_8_out_a = {8{ select_ram_8_reg_a[ram_latency]}} & ram_8_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 4);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	rom_8_address_a = memory_controller_address_a [11-1+0:0] & {11{select_rom_8_a}};
	rom_8_write_enable_a = memory_controller_write_enable_a & select_rom_8_a;
	rom_8_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	ram_8_address_a = memory_controller_address_a [11-1+0:0] & {11{select_ram_8_a}};
	ram_8_write_enable_a = memory_controller_write_enable_a & select_ram_8_a;
	ram_8_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	ram_32_address_a = memory_controller_address_a [2-1+2:2] & {2{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_8_out_a | memory_controller_ram_8_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_8_reg_a[j+1] <= select_rom_8_reg_a[j];
select_ram_8_reg_a[j+1] <= select_ram_8_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_rom_8_reg_a[0] <= select_rom_8_a;
select_ram_8_reg_a[0] <= select_ram_8_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_8_b;
assign select_rom_8_b = (tag_b == 2);
reg [ram_latency:0] select_rom_8_reg_b;
wire [7:0] memory_controller_rom_8_out_b;
assign memory_controller_rom_8_out_b = {8{ select_rom_8_reg_b[ram_latency]}} & rom_8_out_b;

wire select_ram_8_b;
assign select_ram_8_b = (tag_b == 3);
reg [ram_latency:0] select_ram_8_reg_b;
wire [7:0] memory_controller_ram_8_out_b;
assign memory_controller_ram_8_out_b = {8{ select_ram_8_reg_b[ram_latency]}} & ram_8_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 4);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	rom_8_address_b = memory_controller_address_b [11-1+0:0] & {11{select_rom_8_b}};
	rom_8_write_enable_b = memory_controller_write_enable_b & select_rom_8_b;
	rom_8_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	ram_8_address_b = memory_controller_address_b [11-1+0:0] & {11{select_ram_8_b}};
	ram_8_write_enable_b = memory_controller_write_enable_b & select_ram_8_b;
	ram_8_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	ram_32_address_b = memory_controller_address_b [2-1+2:2] & {2{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_8_out_b | memory_controller_ram_8_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_8_reg_b[j+1] <= select_rom_8_reg_b[j];
select_ram_8_reg_b[j+1] <= select_ram_8_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_rom_8_reg_b[0] <= select_rom_8_b;
select_ram_8_reg_b[0] <= select_ram_8_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module Get_motion_code
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_Get_motion_code_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_Get_motion_code_BB__0_2 = 8'd2;
parameter [7:0] LEGUP_F_Get_motion_code_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_Get_motion_code_BB__0_4 = 8'd4;
parameter [7:0] LEGUP_F_Get_motion_code_BB__6_5 = 8'd5;
parameter [7:0] LEGUP_F_Get_motion_code_BB__6_6 = 8'd6;
parameter [7:0] LEGUP_F_Get_motion_code_BB__6_7 = 8'd7;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader2ipreheader_8 = 8'd8;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderipreheader_9 = 8'd9;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi_10 = 8'd10;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi_11 = 8'd11;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi_12 = 8'd12;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader2i_13 = 8'd13;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader2i_14 = 8'd14;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1ipreheader_15 = 8'd15;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i_16 = 8'd16;
parameter [7:0] LEGUP_F_Get_motion_code_BB__33_17 = 8'd17;
parameter [7:0] LEGUP_F_Get_motion_code_BB__33_18 = 8'd18;
parameter [7:0] LEGUP_F_Get_motion_code_BB__33_19 = 8'd19;
parameter [7:0] LEGUP_F_Get_motion_code_BB__33_20 = 8'd20;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiiloopexit_21 = 8'd21;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_22 = 8'd22;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_23 = 8'd23;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24 = 8'd24;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti_25 = 8'd25;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti_26 = 8'd26;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3iloopexit_27 = 8'd27;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i_28 = 8'd28;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i_29 = 8'd29;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i_30 = 8'd30;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bitsexit_31 = 8'd31;
parameter [7:0] LEGUP_F_Get_motion_code_BB__45_32 = 8'd32;
parameter [7:0] LEGUP_F_Get_motion_code_BB__48_33 = 8'd33;
parameter [7:0] LEGUP_F_Get_motion_code_BB__48_34 = 8'd34;
parameter [7:0] LEGUP_F_Get_motion_code_BB__48_35 = 8'd35;
parameter [7:0] LEGUP_F_Get_motion_code_BB__56_36 = 8'd36;
parameter [7:0] LEGUP_F_Get_motion_code_BB__56_37 = 8'd37;
parameter [7:0] LEGUP_F_Get_motion_code_BB__56_38 = 8'd38;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader22preheader_39 = 8'd39;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader_40 = 8'd40;
parameter [7:0] LEGUP_F_Get_motion_code_BB__74_41 = 8'd41;
parameter [7:0] LEGUP_F_Get_motion_code_BB__74_42 = 8'd42;
parameter [7:0] LEGUP_F_Get_motion_code_BB__74_43 = 8'd43;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader22_44 = 8'd44;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader22_45 = 8'd45;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader21preheader_46 = 8'd46;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader21_47 = 8'd47;
parameter [7:0] LEGUP_F_Get_motion_code_BB__91_48 = 8'd48;
parameter [7:0] LEGUP_F_Get_motion_code_BB__91_49 = 8'd49;
parameter [7:0] LEGUP_F_Get_motion_code_BB__91_50 = 8'd50;
parameter [7:0] LEGUP_F_Get_motion_code_BB__91_51 = 8'd51;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiloopexit_52 = 8'd52;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_53 = 8'd53;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_54 = 8'd54;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55 = 8'd55;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit_56 = 8'd56;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit_57 = 8'd57;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit23_58 = 8'd58;
parameter [7:0] LEGUP_F_Get_motion_code_BB__100_59 = 8'd59;
parameter [7:0] LEGUP_F_Get_motion_code_BB__100_60 = 8'd60;
parameter [7:0] LEGUP_F_Get_motion_code_BB__100_61 = 8'd61;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62 = 8'd62;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_63 = 8'd63;
parameter [7:0] LEGUP_F_Get_motion_code_BB__106_64 = 8'd64;
parameter [7:0] LEGUP_F_Get_motion_code_BB__106_65 = 8'd65;
parameter [7:0] LEGUP_F_Get_motion_code_BB__106_66 = 8'd66;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader2i46preheader_67 = 8'd67;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi43preheader_68 = 8'd68;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi43_69 = 8'd69;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi43_70 = 8'd70;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi43_71 = 8'd71;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader2i46_72 = 8'd72;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader2i46_73 = 8'd73;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i50preheader_74 = 8'd74;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i50_75 = 8'd75;
parameter [7:0] LEGUP_F_Get_motion_code_BB__133_76 = 8'd76;
parameter [7:0] LEGUP_F_Get_motion_code_BB__133_77 = 8'd77;
parameter [7:0] LEGUP_F_Get_motion_code_BB__133_78 = 8'd78;
parameter [7:0] LEGUP_F_Get_motion_code_BB__133_79 = 8'd79;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52loopexit_80 = 8'd80;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_81 = 8'd81;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_82 = 8'd82;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83 = 8'd83;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti54_84 = 8'd84;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti54_85 = 8'd85;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i55loopexit_86 = 8'd86;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i55_87 = 8'd87;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i55_88 = 8'd88;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i55_89 = 8'd89;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_90 = 8'd90;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_91 = 8'd91;
parameter [7:0] LEGUP_F_Get_motion_code_BB__147_92 = 8'd92;
parameter [7:0] LEGUP_F_Get_motion_code_BB__149_93 = 8'd93;
parameter [7:0] LEGUP_F_Get_motion_code_BB__149_94 = 8'd94;
parameter [7:0] LEGUP_F_Get_motion_code_BB__149_95 = 8'd95;
parameter [7:0] LEGUP_F_Get_motion_code_BB__157_96 = 8'd96;
parameter [7:0] LEGUP_F_Get_motion_code_BB__157_97 = 8'd97;
parameter [7:0] LEGUP_F_Get_motion_code_BB__157_98 = 8'd98;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader27preheader_99 = 8'd99;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader24_100 = 8'd100;
parameter [7:0] LEGUP_F_Get_motion_code_BB__175_101 = 8'd101;
parameter [7:0] LEGUP_F_Get_motion_code_BB__175_102 = 8'd102;
parameter [7:0] LEGUP_F_Get_motion_code_BB__175_103 = 8'd103;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader27_104 = 8'd104;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader27_105 = 8'd105;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader26preheader_106 = 8'd106;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader26_107 = 8'd107;
parameter [7:0] LEGUP_F_Get_motion_code_BB__192_108 = 8'd108;
parameter [7:0] LEGUP_F_Get_motion_code_BB__192_109 = 8'd109;
parameter [7:0] LEGUP_F_Get_motion_code_BB__192_110 = 8'd110;
parameter [7:0] LEGUP_F_Get_motion_code_BB__192_111 = 8'd111;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14loopexit_112 = 8'd112;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_113 = 8'd113;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_114 = 8'd114;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115 = 8'd115;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit25_116 = 8'd116;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit25_117 = 8'd117;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit28_118 = 8'd118;
parameter [7:0] LEGUP_F_Get_motion_code_BB__201_119 = 8'd119;
parameter [7:0] LEGUP_F_Get_motion_code_BB__201_120 = 8'd120;
parameter [7:0] LEGUP_F_Get_motion_code_BB__201_121 = 8'd121;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122 = 8'd122;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_123 = 8'd123;
parameter [7:0] LEGUP_F_Get_motion_code_BB__207_124 = 8'd124;
parameter [7:0] LEGUP_F_Get_motion_code_BB__207_125 = 8'd125;
parameter [7:0] LEGUP_F_Get_motion_code_BB__207_126 = 8'd126;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader2i28preheader_127 = 8'd127;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi25preheader_128 = 8'd128;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi25_129 = 8'd129;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi25_130 = 8'd130;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi25_131 = 8'd131;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader2i28_132 = 8'd132;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader2i28_133 = 8'd133;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i32preheader_134 = 8'd134;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i32_135 = 8'd135;
parameter [7:0] LEGUP_F_Get_motion_code_BB__234_136 = 8'd136;
parameter [7:0] LEGUP_F_Get_motion_code_BB__234_137 = 8'd137;
parameter [7:0] LEGUP_F_Get_motion_code_BB__234_138 = 8'd138;
parameter [7:0] LEGUP_F_Get_motion_code_BB__234_139 = 8'd139;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34loopexit_140 = 8'd140;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_141 = 8'd141;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_142 = 8'd142;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143 = 8'd143;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti36_144 = 8'd144;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti36_145 = 8'd145;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i37loopexit_146 = 8'd146;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i37_147 = 8'd147;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i37_148 = 8'd148;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i37_149 = 8'd149;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_150 = 8'd150;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_151 = 8'd151;
parameter [7:0] LEGUP_F_Get_motion_code_BB__248_152 = 8'd152;
parameter [7:0] LEGUP_F_Get_motion_code_BB__251_153 = 8'd153;
parameter [7:0] LEGUP_F_Get_motion_code_BB__251_154 = 8'd154;
parameter [7:0] LEGUP_F_Get_motion_code_BB__251_155 = 8'd155;
parameter [7:0] LEGUP_F_Get_motion_code_BB__258_156 = 8'd156;
parameter [7:0] LEGUP_F_Get_motion_code_BB__258_157 = 8'd157;
parameter [7:0] LEGUP_F_Get_motion_code_BB__258_158 = 8'd158;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader32preheader_159 = 8'd159;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader29_160 = 8'd160;
parameter [7:0] LEGUP_F_Get_motion_code_BB__276_161 = 8'd161;
parameter [7:0] LEGUP_F_Get_motion_code_BB__276_162 = 8'd162;
parameter [7:0] LEGUP_F_Get_motion_code_BB__276_163 = 8'd163;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader32_164 = 8'd164;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader32_165 = 8'd165;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader31preheader_166 = 8'd166;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader31_167 = 8'd167;
parameter [7:0] LEGUP_F_Get_motion_code_BB__293_168 = 8'd168;
parameter [7:0] LEGUP_F_Get_motion_code_BB__293_169 = 8'd169;
parameter [7:0] LEGUP_F_Get_motion_code_BB__293_170 = 8'd170;
parameter [7:0] LEGUP_F_Get_motion_code_BB__293_171 = 8'd171;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6loopexit_172 = 8'd172;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_173 = 8'd173;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_174 = 8'd174;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175 = 8'd175;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit30_176 = 8'd176;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit30_177 = 8'd177;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit33_178 = 8'd178;
parameter [7:0] LEGUP_F_Get_motion_code_BB__302_179 = 8'd179;
parameter [7:0] LEGUP_F_Get_motion_code_BB__302_180 = 8'd180;
parameter [7:0] LEGUP_F_Get_motion_code_BB__302_181 = 8'd181;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182 = 8'd182;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_183 = 8'd183;
parameter [7:0] LEGUP_F_Get_motion_code_BB__308_184 = 8'd184;
parameter [7:0] LEGUP_F_Get_motion_code_BB__308_185 = 8'd185;
parameter [7:0] LEGUP_F_Get_motion_code_BB__308_186 = 8'd186;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader2i10preheader_187 = 8'd187;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi7preheader_188 = 8'd188;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi7_189 = 8'd189;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi7_190 = 8'd190;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi7_191 = 8'd191;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader2i10_192 = 8'd192;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader2i10_193 = 8'd193;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i14preheader_194 = 8'd194;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i14_195 = 8'd195;
parameter [7:0] LEGUP_F_Get_motion_code_BB__335_196 = 8'd196;
parameter [7:0] LEGUP_F_Get_motion_code_BB__335_197 = 8'd197;
parameter [7:0] LEGUP_F_Get_motion_code_BB__335_198 = 8'd198;
parameter [7:0] LEGUP_F_Get_motion_code_BB__335_199 = 8'd199;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16loopexit_200 = 8'd200;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_201 = 8'd201;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_202 = 8'd202;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203 = 8'd203;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti18_204 = 8'd204;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti18_205 = 8'd205;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i19loopexit_206 = 8'd206;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i19_207 = 8'd207;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i19_208 = 8'd208;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit3i19_209 = 8'd209;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_210 = 8'd210;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_211 = 8'd211;
parameter [7:0] LEGUP_F_Get_motion_code_BB__349_212 = 8'd212;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] Get_motion_code_0_1;
reg [31:0] Get_motion_code_0_1_reg;
reg [31:0] Get_motion_code_0_2;
reg [31:0] Get_motion_code_0_2_reg;
reg [31:0] Get_motion_code_0_3;
reg [31:0] Get_motion_code_0_3_reg;
reg [31:0] Get_motion_code_0_4;
reg [31:0] Get_motion_code_0_4_reg;
reg  Get_motion_code_0_5;
reg  Get_motion_code_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_6_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_6_7_reg;
reg  Get_motion_code_6_8;
reg  Get_motion_code_6_8_reg;
reg [31:0] Get_motion_code_6_9;
reg [31:0] Get_motion_code_6_9_reg;
reg [31:0] Get_motion_code_6_10;
reg [31:0] Get_motion_code_6_10_reg;
reg [31:0] Get_motion_code_6_11;
reg [31:0] Get_motion_code_6_11_reg;
reg [31:0] Get_motion_code_6_12;
reg [31:0] Get_motion_code_6_12_reg;
reg [31:0] Get_motion_code_preheader2ipreheader_13;
reg [31:0] Get_motion_code_preheader2ipreheader_13_reg;
reg [31:0] Get_motion_code_preheader2ipreheader_14;
reg [31:0] Get_motion_code_preheader2ipreheader_14_reg;
reg [31:0] Get_motion_code_preheaderipreheader_15;
reg [31:0] Get_motion_code_preheaderipreheader_15_reg;
reg [31:0] Get_motion_code_preheaderipreheader_16;
reg [31:0] Get_motion_code_preheaderipreheader_16_reg;
reg [31:0] Get_motion_code_preheaderi_indvar66;
reg [31:0] Get_motion_code_preheaderi_indvar66_reg;
reg [31:0] Get_motion_code_preheaderi_17;
reg [31:0] Get_motion_code_preheaderi_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi_scevgep68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi_scevgep68_reg;
reg [31:0] Get_motion_code_preheaderi_18;
reg [31:0] Get_motion_code_preheaderi_18_reg;
reg [31:0] Get_motion_code_preheaderi_19;
reg [31:0] Get_motion_code_preheaderi_19_reg;
reg [31:0] Get_motion_code_preheaderi_20;
reg [31:0] Get_motion_code_preheaderi_20_reg;
reg [31:0] Get_motion_code_preheaderi_21;
reg [31:0] Get_motion_code_preheaderi_21_reg;
reg [7:0] Get_motion_code_preheaderi_22;
reg [7:0] Get_motion_code_preheaderi_22_reg;
reg [31:0] Get_motion_code_preheaderi_23;
reg [31:0] Get_motion_code_preheaderi_23_reg;
reg [31:0] Get_motion_code_preheaderi_24;
reg [31:0] Get_motion_code_preheaderi_24_reg;
reg [31:0] Get_motion_code_preheaderi_25;
reg [31:0] Get_motion_code_preheaderi_25_reg;
reg  Get_motion_code_preheaderi_26;
reg  Get_motion_code_preheaderi_26_reg;
reg [31:0] Get_motion_code_preheaderi_indvarnext67;
reg [31:0] Get_motion_code_preheaderi_indvarnext67_reg;
reg [31:0] Get_motion_code_preheader2i_indvar74;
reg [31:0] Get_motion_code_preheader2i_indvar74_reg;
reg [31:0] Get_motion_code_preheader2i_27;
reg [31:0] Get_motion_code_preheader2i_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader2i_pr8i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader2i_pr8i_reg;
reg [31:0] Get_motion_code_preheader2i_28;
reg [31:0] Get_motion_code_preheader2i_28_reg;
reg [31:0] Get_motion_code_preheader2i_29;
reg [31:0] Get_motion_code_preheader2i_29_reg;
reg [31:0] Get_motion_code_preheader2i_30;
reg [31:0] Get_motion_code_preheader2i_30_reg;
reg [31:0] Get_motion_code_preheader2i_31;
reg [31:0] Get_motion_code_preheader2i_31_reg;
reg  Get_motion_code_preheader2i_32;
reg  Get_motion_code_preheader2i_32_reg;
reg [31:0] Get_motion_code_preheader1i_indvar69;
reg [31:0] Get_motion_code_preheader1i_indvar69_reg;
reg  Get_motion_code_preheader1i_exitcond71;
reg  Get_motion_code_preheader1i_exitcond71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_33_p20iiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_33_p20iiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_33_p10iiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_33_p10iiii_reg;
reg [7:0] Get_motion_code_33_34;
reg [7:0] Get_motion_code_33_34_reg;
reg [31:0] Get_motion_code_33_indvarnext70;
reg [31:0] Get_motion_code_33_indvarnext70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii_pr9i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii_pr9i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii_35_reg;
reg [7:0] Get_motion_code_Fill_Bufferexitii_36;
reg [7:0] Get_motion_code_Fill_Bufferexitii_36_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii_37;
reg [31:0] Get_motion_code_Fill_Bufferexitii_37_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii_38;
reg [31:0] Get_motion_code_Fill_Bufferexitii_38_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii_39;
reg [31:0] Get_motion_code_Fill_Bufferexitii_39_reg;
reg  Get_motion_code_Fill_Bufferexitii_40;
reg  Get_motion_code_Fill_Bufferexitii_40_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii_indvarnext75;
reg [31:0] Get_motion_code_Fill_Bufferexitii_indvarnext75_reg;
reg [31:0] Get_motion_code_loopexiti_41;
reg [31:0] Get_motion_code_loopexiti_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti_scevgepi;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti_scevgepi_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit3i_storemerge1i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit3i_storemerge1i_reg;
reg [31:0] Get_motion_code_loopexit3i_storemergei;
reg [31:0] Get_motion_code_loopexit3i_storemergei_reg;
reg [31:0] Get_motion_code_loopexit3i_Incnt2ii;
reg [31:0] Get_motion_code_loopexit3i_Incnt2ii_reg;
reg [31:0] Get_motion_code_Get_Bitsexit_42;
reg [31:0] Get_motion_code_Get_Bitsexit_42_reg;
reg [31:0] Get_motion_code_Get_Bitsexit_43;
reg [31:0] Get_motion_code_Get_Bitsexit_43_reg;
reg  Get_motion_code_Get_Bitsexit_44;
reg  Get_motion_code_Get_Bitsexit_44_reg;
reg [31:0] Get_motion_code_45_46;
reg [31:0] Get_motion_code_45_46_reg;
reg  Get_motion_code_45_47;
reg  Get_motion_code_45_47_reg;
reg [31:0] Get_motion_code_48_49;
reg [31:0] Get_motion_code_48_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_48_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_48_50_reg;
reg [7:0] Get_motion_code_48_51;
reg [7:0] Get_motion_code_48_51_reg;
reg [31:0] Get_motion_code_48_52;
reg [31:0] Get_motion_code_48_52_reg;
reg [31:0] Get_motion_code_48_53;
reg [31:0] Get_motion_code_48_53_reg;
reg [31:0] Get_motion_code_48_54;
reg [31:0] Get_motion_code_48_54_reg;
reg  Get_motion_code_48_55;
reg  Get_motion_code_48_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_56_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_56_57_reg;
reg  Get_motion_code_56_58;
reg  Get_motion_code_56_58_reg;
reg [31:0] Get_motion_code_56_59;
reg [31:0] Get_motion_code_56_59_reg;
reg [31:0] Get_motion_code_56_60;
reg [31:0] Get_motion_code_56_60_reg;
reg [31:0] Get_motion_code_preheader22preheader_61;
reg [31:0] Get_motion_code_preheader22preheader_61_reg;
reg [31:0] Get_motion_code_preheader22preheader_62;
reg [31:0] Get_motion_code_preheader22preheader_62_reg;
reg [31:0] Get_motion_code_preheader22preheader_63;
reg [31:0] Get_motion_code_preheader22preheader_63_reg;
reg [31:0] Get_motion_code_preheader22preheader_64;
reg [31:0] Get_motion_code_preheader22preheader_64_reg;
reg [31:0] Get_motion_code_preheader22preheader_65;
reg [31:0] Get_motion_code_preheader22preheader_65_reg;
reg [31:0] Get_motion_code_preheader22preheader_66;
reg [31:0] Get_motion_code_preheader22preheader_66_reg;
reg [31:0] Get_motion_code_preheader_67;
reg [31:0] Get_motion_code_preheader_67_reg;
reg [31:0] Get_motion_code_preheader_68;
reg [31:0] Get_motion_code_preheader_68_reg;
reg [31:0] Get_motion_code_preheader_69;
reg [31:0] Get_motion_code_preheader_69_reg;
reg [31:0] Get_motion_code_preheader_70;
reg [31:0] Get_motion_code_preheader_70_reg;
reg [31:0] Get_motion_code_preheader_71;
reg [31:0] Get_motion_code_preheader_71_reg;
reg [31:0] Get_motion_code_preheader_72;
reg [31:0] Get_motion_code_preheader_72_reg;
reg [31:0] Get_motion_code_preheader_73;
reg [31:0] Get_motion_code_preheader_73_reg;
reg [31:0] Get_motion_code_74_indvar17;
reg [31:0] Get_motion_code_74_indvar17_reg;
reg [31:0] Get_motion_code_74_75;
reg [31:0] Get_motion_code_74_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_74_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_74_scevgep19_reg;
reg [31:0] Get_motion_code_74_76;
reg [31:0] Get_motion_code_74_76_reg;
reg [31:0] Get_motion_code_74_77;
reg [31:0] Get_motion_code_74_77_reg;
reg [31:0] Get_motion_code_74_78;
reg [31:0] Get_motion_code_74_78_reg;
reg [31:0] Get_motion_code_74_79;
reg [31:0] Get_motion_code_74_79_reg;
reg [7:0] Get_motion_code_74_80;
reg [7:0] Get_motion_code_74_80_reg;
reg [31:0] Get_motion_code_74_81;
reg [31:0] Get_motion_code_74_81_reg;
reg [31:0] Get_motion_code_74_82;
reg [31:0] Get_motion_code_74_82_reg;
reg [31:0] Get_motion_code_74_83;
reg [31:0] Get_motion_code_74_83_reg;
reg  Get_motion_code_74_84;
reg  Get_motion_code_74_84_reg;
reg [31:0] Get_motion_code_74_indvarnext18;
reg [31:0] Get_motion_code_74_indvarnext18_reg;
reg [31:0] Get_motion_code_preheader22_indvar25;
reg [31:0] Get_motion_code_preheader22_indvar25_reg;
reg [31:0] Get_motion_code_preheader22_85;
reg [31:0] Get_motion_code_preheader22_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader22_pr42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader22_pr42_reg;
reg [31:0] Get_motion_code_preheader22_86;
reg [31:0] Get_motion_code_preheader22_86_reg;
reg [31:0] Get_motion_code_preheader22_87;
reg [31:0] Get_motion_code_preheader22_87_reg;
reg [31:0] Get_motion_code_preheader22_88;
reg [31:0] Get_motion_code_preheader22_88_reg;
reg [31:0] Get_motion_code_preheader22_89;
reg [31:0] Get_motion_code_preheader22_89_reg;
reg  Get_motion_code_preheader22_90;
reg  Get_motion_code_preheader22_90_reg;
reg [31:0] Get_motion_code_preheader21_indvar20;
reg [31:0] Get_motion_code_preheader21_indvar20_reg;
reg  Get_motion_code_preheader21_exitcond22;
reg  Get_motion_code_preheader21_exitcond22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_91_p20iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_91_p20iii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_91_p10iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_91_p10iii_reg;
reg [7:0] Get_motion_code_91_92;
reg [7:0] Get_motion_code_91_92_reg;
reg [31:0] Get_motion_code_91_indvarnext21;
reg [31:0] Get_motion_code_91_indvarnext21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti_pr43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti_pr43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti_93_reg;
reg [7:0] Get_motion_code_Fill_Bufferexiti_94;
reg [7:0] Get_motion_code_Fill_Bufferexiti_94_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti_95;
reg [31:0] Get_motion_code_Fill_Bufferexiti_95_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti_96;
reg [31:0] Get_motion_code_Fill_Bufferexiti_96_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti_97;
reg [31:0] Get_motion_code_Fill_Bufferexiti_97_reg;
reg  Get_motion_code_Fill_Bufferexiti_98;
reg  Get_motion_code_Fill_Bufferexiti_98_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti_indvarnext26;
reg [31:0] Get_motion_code_Fill_Bufferexiti_indvarnext26_reg;
reg [31:0] Get_motion_code_loopexit_99;
reg [31:0] Get_motion_code_loopexit_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_100_storemerge5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_100_storemerge5_reg;
reg [31:0] Get_motion_code_100_storemerge4;
reg [31:0] Get_motion_code_100_storemerge4_reg;
reg [31:0] Get_motion_code_100_pn5;
reg [31:0] Get_motion_code_100_pn5_reg;
reg [31:0] Get_motion_code_100_pn2in;
reg [31:0] Get_motion_code_100_pn2in_reg;
reg [31:0] Get_motion_code_100_pn2;
reg [31:0] Get_motion_code_100_pn2_reg;
reg [31:0] Get_motion_code_100_Incnt2i;
reg [31:0] Get_motion_code_100_Incnt2i_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit_101;
reg [31:0] Get_motion_code_Flush_Bufferexit_101_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit_102;
reg [31:0] Get_motion_code_Flush_Bufferexit_102_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit_103;
reg [31:0] Get_motion_code_Flush_Bufferexit_103_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit_104;
reg [31:0] Get_motion_code_Flush_Bufferexit_104_reg;
reg  Get_motion_code_Flush_Bufferexit_105;
reg  Get_motion_code_Flush_Bufferexit_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_106_107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_106_107_reg;
reg  Get_motion_code_106_108;
reg  Get_motion_code_106_108_reg;
reg [31:0] Get_motion_code_106_109;
reg [31:0] Get_motion_code_106_109_reg;
reg [31:0] Get_motion_code_106_110;
reg [31:0] Get_motion_code_106_110_reg;
reg [31:0] Get_motion_code_106_111;
reg [31:0] Get_motion_code_106_111_reg;
reg [31:0] Get_motion_code_106_112;
reg [31:0] Get_motion_code_106_112_reg;
reg [31:0] Get_motion_code_preheader2i46preheader_113;
reg [31:0] Get_motion_code_preheader2i46preheader_113_reg;
reg [31:0] Get_motion_code_preheader2i46preheader_114;
reg [31:0] Get_motion_code_preheader2i46preheader_114_reg;
reg [31:0] Get_motion_code_preheaderi43preheader_115;
reg [31:0] Get_motion_code_preheaderi43preheader_115_reg;
reg [31:0] Get_motion_code_preheaderi43preheader_116;
reg [31:0] Get_motion_code_preheaderi43preheader_116_reg;
reg [31:0] Get_motion_code_preheaderi43_indvar;
reg [31:0] Get_motion_code_preheaderi43_indvar_reg;
reg [31:0] Get_motion_code_preheaderi43_117;
reg [31:0] Get_motion_code_preheaderi43_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi43_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi43_scevgep9_reg;
reg [31:0] Get_motion_code_preheaderi43_118;
reg [31:0] Get_motion_code_preheaderi43_118_reg;
reg [31:0] Get_motion_code_preheaderi43_119;
reg [31:0] Get_motion_code_preheaderi43_119_reg;
reg [31:0] Get_motion_code_preheaderi43_120;
reg [31:0] Get_motion_code_preheaderi43_120_reg;
reg [31:0] Get_motion_code_preheaderi43_121;
reg [31:0] Get_motion_code_preheaderi43_121_reg;
reg [7:0] Get_motion_code_preheaderi43_122;
reg [7:0] Get_motion_code_preheaderi43_122_reg;
reg [31:0] Get_motion_code_preheaderi43_123;
reg [31:0] Get_motion_code_preheaderi43_123_reg;
reg [31:0] Get_motion_code_preheaderi43_124;
reg [31:0] Get_motion_code_preheaderi43_124_reg;
reg [31:0] Get_motion_code_preheaderi43_125;
reg [31:0] Get_motion_code_preheaderi43_125_reg;
reg  Get_motion_code_preheaderi43_126;
reg  Get_motion_code_preheaderi43_126_reg;
reg [31:0] Get_motion_code_preheaderi43_indvarnext;
reg [31:0] Get_motion_code_preheaderi43_indvarnext_reg;
reg [31:0] Get_motion_code_preheader2i46_indvar15;
reg [31:0] Get_motion_code_preheader2i46_indvar15_reg;
reg [31:0] Get_motion_code_preheader2i46_127;
reg [31:0] Get_motion_code_preheader2i46_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader2i46_pr8i44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader2i46_pr8i44_reg;
reg [31:0] Get_motion_code_preheader2i46_128;
reg [31:0] Get_motion_code_preheader2i46_128_reg;
reg [31:0] Get_motion_code_preheader2i46_129;
reg [31:0] Get_motion_code_preheader2i46_129_reg;
reg [31:0] Get_motion_code_preheader2i46_130;
reg [31:0] Get_motion_code_preheader2i46_130_reg;
reg [31:0] Get_motion_code_preheader2i46_131;
reg [31:0] Get_motion_code_preheader2i46_131_reg;
reg  Get_motion_code_preheader2i46_132;
reg  Get_motion_code_preheader2i46_132_reg;
reg [31:0] Get_motion_code_preheader1i50_indvar10;
reg [31:0] Get_motion_code_preheader1i50_indvar10_reg;
reg  Get_motion_code_preheader1i50_exitcond12;
reg  Get_motion_code_preheader1i50_exitcond12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_133_p20iiii48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_133_p20iiii48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_133_p10iiii47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_133_p10iiii47_reg;
reg [7:0] Get_motion_code_133_134;
reg [7:0] Get_motion_code_133_134_reg;
reg [31:0] Get_motion_code_133_indvarnext11;
reg [31:0] Get_motion_code_133_indvarnext11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii52_pr9i51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii52_pr9i51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii52_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii52_135_reg;
reg [7:0] Get_motion_code_Fill_Bufferexitii52_136;
reg [7:0] Get_motion_code_Fill_Bufferexitii52_136_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii52_137;
reg [31:0] Get_motion_code_Fill_Bufferexitii52_137_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii52_138;
reg [31:0] Get_motion_code_Fill_Bufferexitii52_138_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii52_139;
reg [31:0] Get_motion_code_Fill_Bufferexitii52_139_reg;
reg  Get_motion_code_Fill_Bufferexitii52_140;
reg  Get_motion_code_Fill_Bufferexitii52_140_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii52_indvarnext16;
reg [31:0] Get_motion_code_Fill_Bufferexitii52_indvarnext16_reg;
reg [31:0] Get_motion_code_loopexiti54_141;
reg [31:0] Get_motion_code_loopexiti54_141_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti54_scevgepi53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti54_scevgepi53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit3i55_storemerge1i56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit3i55_storemerge1i56_reg;
reg [31:0] Get_motion_code_loopexit3i55_storemergei57;
reg [31:0] Get_motion_code_loopexit3i55_storemergei57_reg;
reg [31:0] Get_motion_code_loopexit3i55_Incnt2ii58;
reg [31:0] Get_motion_code_loopexit3i55_Incnt2ii58_reg;
reg  Get_motion_code_Get_Bitsexit59_142;
reg  Get_motion_code_Get_Bitsexit59_142_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Get_Bitsexit59_143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Get_Bitsexit59_143_reg;
reg [7:0] Get_motion_code_Get_Bitsexit59_144;
reg [7:0] Get_motion_code_Get_Bitsexit59_144_reg;
reg [31:0] Get_motion_code_Get_Bitsexit59_145;
reg [31:0] Get_motion_code_Get_Bitsexit59_145_reg;
reg [31:0] Get_motion_code_Get_Bitsexit59_146;
reg [31:0] Get_motion_code_Get_Bitsexit59_146_reg;
reg [31:0] Get_motion_code_Get_Bitsexit59_;
reg [31:0] Get_motion_code_Get_Bitsexit59__reg;
reg  Get_motion_code_147_148;
reg  Get_motion_code_147_148_reg;
reg [31:0] Get_motion_code_149_150;
reg [31:0] Get_motion_code_149_150_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_149_151;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_149_151_reg;
reg [7:0] Get_motion_code_149_152;
reg [7:0] Get_motion_code_149_152_reg;
reg [31:0] Get_motion_code_149_153;
reg [31:0] Get_motion_code_149_153_reg;
reg [31:0] Get_motion_code_149_154;
reg [31:0] Get_motion_code_149_154_reg;
reg [31:0] Get_motion_code_149_155;
reg [31:0] Get_motion_code_149_155_reg;
reg  Get_motion_code_149_156;
reg  Get_motion_code_149_156_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_157_158;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_157_158_reg;
reg  Get_motion_code_157_159;
reg  Get_motion_code_157_159_reg;
reg [31:0] Get_motion_code_157_160;
reg [31:0] Get_motion_code_157_160_reg;
reg [31:0] Get_motion_code_157_161;
reg [31:0] Get_motion_code_157_161_reg;
reg [31:0] Get_motion_code_preheader27preheader_162;
reg [31:0] Get_motion_code_preheader27preheader_162_reg;
reg [31:0] Get_motion_code_preheader27preheader_163;
reg [31:0] Get_motion_code_preheader27preheader_163_reg;
reg [31:0] Get_motion_code_preheader27preheader_164;
reg [31:0] Get_motion_code_preheader27preheader_164_reg;
reg [31:0] Get_motion_code_preheader27preheader_165;
reg [31:0] Get_motion_code_preheader27preheader_165_reg;
reg [31:0] Get_motion_code_preheader27preheader_166;
reg [31:0] Get_motion_code_preheader27preheader_166_reg;
reg [31:0] Get_motion_code_preheader27preheader_167;
reg [31:0] Get_motion_code_preheader27preheader_167_reg;
reg [31:0] Get_motion_code_preheader24_168;
reg [31:0] Get_motion_code_preheader24_168_reg;
reg [31:0] Get_motion_code_preheader24_169;
reg [31:0] Get_motion_code_preheader24_169_reg;
reg [31:0] Get_motion_code_preheader24_170;
reg [31:0] Get_motion_code_preheader24_170_reg;
reg [31:0] Get_motion_code_preheader24_171;
reg [31:0] Get_motion_code_preheader24_171_reg;
reg [31:0] Get_motion_code_preheader24_172;
reg [31:0] Get_motion_code_preheader24_172_reg;
reg [31:0] Get_motion_code_preheader24_173;
reg [31:0] Get_motion_code_preheader24_173_reg;
reg [31:0] Get_motion_code_preheader24_174;
reg [31:0] Get_motion_code_preheader24_174_reg;
reg [31:0] Get_motion_code_175_indvar36;
reg [31:0] Get_motion_code_175_indvar36_reg;
reg [31:0] Get_motion_code_175_176;
reg [31:0] Get_motion_code_175_176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_175_scevgep38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_175_scevgep38_reg;
reg [31:0] Get_motion_code_175_177;
reg [31:0] Get_motion_code_175_177_reg;
reg [31:0] Get_motion_code_175_178;
reg [31:0] Get_motion_code_175_178_reg;
reg [31:0] Get_motion_code_175_179;
reg [31:0] Get_motion_code_175_179_reg;
reg [31:0] Get_motion_code_175_180;
reg [31:0] Get_motion_code_175_180_reg;
reg [7:0] Get_motion_code_175_181;
reg [7:0] Get_motion_code_175_181_reg;
reg [31:0] Get_motion_code_175_182;
reg [31:0] Get_motion_code_175_182_reg;
reg [31:0] Get_motion_code_175_183;
reg [31:0] Get_motion_code_175_183_reg;
reg [31:0] Get_motion_code_175_184;
reg [31:0] Get_motion_code_175_184_reg;
reg  Get_motion_code_175_185;
reg  Get_motion_code_175_185_reg;
reg [31:0] Get_motion_code_175_indvarnext37;
reg [31:0] Get_motion_code_175_indvarnext37_reg;
reg [31:0] Get_motion_code_preheader27_indvar44;
reg [31:0] Get_motion_code_preheader27_indvar44_reg;
reg [31:0] Get_motion_code_preheader27_186;
reg [31:0] Get_motion_code_preheader27_186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader27_pr1852;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader27_pr1852_reg;
reg [31:0] Get_motion_code_preheader27_187;
reg [31:0] Get_motion_code_preheader27_187_reg;
reg [31:0] Get_motion_code_preheader27_188;
reg [31:0] Get_motion_code_preheader27_188_reg;
reg [31:0] Get_motion_code_preheader27_189;
reg [31:0] Get_motion_code_preheader27_189_reg;
reg [31:0] Get_motion_code_preheader27_190;
reg [31:0] Get_motion_code_preheader27_190_reg;
reg  Get_motion_code_preheader27_191;
reg  Get_motion_code_preheader27_191_reg;
reg [31:0] Get_motion_code_preheader26_indvar39;
reg [31:0] Get_motion_code_preheader26_indvar39_reg;
reg  Get_motion_code_preheader26_exitcond41;
reg  Get_motion_code_preheader26_exitcond41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_192_p20iii12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_192_p20iii12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_192_p10iii11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_192_p10iii11_reg;
reg [7:0] Get_motion_code_192_193;
reg [7:0] Get_motion_code_192_193_reg;
reg [31:0] Get_motion_code_192_indvarnext40;
reg [31:0] Get_motion_code_192_indvarnext40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti14_pr1853;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti14_pr1853_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti14_194;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti14_194_reg;
reg [7:0] Get_motion_code_Fill_Bufferexiti14_195;
reg [7:0] Get_motion_code_Fill_Bufferexiti14_195_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti14_196;
reg [31:0] Get_motion_code_Fill_Bufferexiti14_196_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti14_197;
reg [31:0] Get_motion_code_Fill_Bufferexiti14_197_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti14_198;
reg [31:0] Get_motion_code_Fill_Bufferexiti14_198_reg;
reg  Get_motion_code_Fill_Bufferexiti14_199;
reg  Get_motion_code_Fill_Bufferexiti14_199_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti14_indvarnext45;
reg [31:0] Get_motion_code_Fill_Bufferexiti14_indvarnext45_reg;
reg [31:0] Get_motion_code_loopexit25_200;
reg [31:0] Get_motion_code_loopexit25_200_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit25_scevgep84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit25_scevgep84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_201_storemerge3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_201_storemerge3_reg;
reg [31:0] Get_motion_code_201_storemerge2;
reg [31:0] Get_motion_code_201_storemerge2_reg;
reg [31:0] Get_motion_code_201_pn4;
reg [31:0] Get_motion_code_201_pn4_reg;
reg [31:0] Get_motion_code_201_pn1in;
reg [31:0] Get_motion_code_201_pn1in_reg;
reg [31:0] Get_motion_code_201_pn1;
reg [31:0] Get_motion_code_201_pn1_reg;
reg [31:0] Get_motion_code_201_Incnt2i15;
reg [31:0] Get_motion_code_201_Incnt2i15_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit16_202;
reg [31:0] Get_motion_code_Flush_Bufferexit16_202_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit16_203;
reg [31:0] Get_motion_code_Flush_Bufferexit16_203_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit16_204;
reg [31:0] Get_motion_code_Flush_Bufferexit16_204_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit16_205;
reg [31:0] Get_motion_code_Flush_Bufferexit16_205_reg;
reg  Get_motion_code_Flush_Bufferexit16_206;
reg  Get_motion_code_Flush_Bufferexit16_206_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_207_208;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_207_208_reg;
reg  Get_motion_code_207_209;
reg  Get_motion_code_207_209_reg;
reg [31:0] Get_motion_code_207_210;
reg [31:0] Get_motion_code_207_210_reg;
reg [31:0] Get_motion_code_207_211;
reg [31:0] Get_motion_code_207_211_reg;
reg [31:0] Get_motion_code_207_212;
reg [31:0] Get_motion_code_207_212_reg;
reg [31:0] Get_motion_code_207_213;
reg [31:0] Get_motion_code_207_213_reg;
reg [31:0] Get_motion_code_preheader2i28preheader_214;
reg [31:0] Get_motion_code_preheader2i28preheader_214_reg;
reg [31:0] Get_motion_code_preheader2i28preheader_215;
reg [31:0] Get_motion_code_preheader2i28preheader_215_reg;
reg [31:0] Get_motion_code_preheaderi25preheader_216;
reg [31:0] Get_motion_code_preheaderi25preheader_216_reg;
reg [31:0] Get_motion_code_preheaderi25preheader_217;
reg [31:0] Get_motion_code_preheaderi25preheader_217_reg;
reg [31:0] Get_motion_code_preheaderi25_indvar27;
reg [31:0] Get_motion_code_preheaderi25_indvar27_reg;
reg [31:0] Get_motion_code_preheaderi25_218;
reg [31:0] Get_motion_code_preheaderi25_218_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi25_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi25_scevgep29_reg;
reg [31:0] Get_motion_code_preheaderi25_219;
reg [31:0] Get_motion_code_preheaderi25_219_reg;
reg [31:0] Get_motion_code_preheaderi25_220;
reg [31:0] Get_motion_code_preheaderi25_220_reg;
reg [31:0] Get_motion_code_preheaderi25_221;
reg [31:0] Get_motion_code_preheaderi25_221_reg;
reg [31:0] Get_motion_code_preheaderi25_222;
reg [31:0] Get_motion_code_preheaderi25_222_reg;
reg [7:0] Get_motion_code_preheaderi25_223;
reg [7:0] Get_motion_code_preheaderi25_223_reg;
reg [31:0] Get_motion_code_preheaderi25_224;
reg [31:0] Get_motion_code_preheaderi25_224_reg;
reg [31:0] Get_motion_code_preheaderi25_225;
reg [31:0] Get_motion_code_preheaderi25_225_reg;
reg [31:0] Get_motion_code_preheaderi25_226;
reg [31:0] Get_motion_code_preheaderi25_226_reg;
reg  Get_motion_code_preheaderi25_227;
reg  Get_motion_code_preheaderi25_227_reg;
reg [31:0] Get_motion_code_preheaderi25_indvarnext28;
reg [31:0] Get_motion_code_preheaderi25_indvarnext28_reg;
reg [31:0] Get_motion_code_preheader2i28_indvar34;
reg [31:0] Get_motion_code_preheader2i28_indvar34_reg;
reg [31:0] Get_motion_code_preheader2i28_228;
reg [31:0] Get_motion_code_preheader2i28_228_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader2i28_pr8i26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader2i28_pr8i26_reg;
reg [31:0] Get_motion_code_preheader2i28_229;
reg [31:0] Get_motion_code_preheader2i28_229_reg;
reg [31:0] Get_motion_code_preheader2i28_230;
reg [31:0] Get_motion_code_preheader2i28_230_reg;
reg [31:0] Get_motion_code_preheader2i28_231;
reg [31:0] Get_motion_code_preheader2i28_231_reg;
reg [31:0] Get_motion_code_preheader2i28_232;
reg [31:0] Get_motion_code_preheader2i28_232_reg;
reg  Get_motion_code_preheader2i28_233;
reg  Get_motion_code_preheader2i28_233_reg;
reg [31:0] Get_motion_code_preheader1i32_indvar30;
reg [31:0] Get_motion_code_preheader1i32_indvar30_reg;
reg  Get_motion_code_preheader1i32_exitcond;
reg  Get_motion_code_preheader1i32_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_234_p20iiii30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_234_p20iiii30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_234_p10iiii29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_234_p10iiii29_reg;
reg [7:0] Get_motion_code_234_235;
reg [7:0] Get_motion_code_234_235_reg;
reg [31:0] Get_motion_code_234_indvarnext31;
reg [31:0] Get_motion_code_234_indvarnext31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii34_pr9i33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii34_pr9i33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii34_236;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii34_236_reg;
reg [7:0] Get_motion_code_Fill_Bufferexitii34_237;
reg [7:0] Get_motion_code_Fill_Bufferexitii34_237_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii34_238;
reg [31:0] Get_motion_code_Fill_Bufferexitii34_238_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii34_239;
reg [31:0] Get_motion_code_Fill_Bufferexitii34_239_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii34_240;
reg [31:0] Get_motion_code_Fill_Bufferexitii34_240_reg;
reg  Get_motion_code_Fill_Bufferexitii34_241;
reg  Get_motion_code_Fill_Bufferexitii34_241_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii34_indvarnext35;
reg [31:0] Get_motion_code_Fill_Bufferexitii34_indvarnext35_reg;
reg [31:0] Get_motion_code_loopexiti36_242;
reg [31:0] Get_motion_code_loopexiti36_242_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti36_scevgepi35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti36_scevgepi35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit3i37_storemerge1i38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit3i37_storemerge1i38_reg;
reg [31:0] Get_motion_code_loopexit3i37_storemergei39;
reg [31:0] Get_motion_code_loopexit3i37_storemergei39_reg;
reg [31:0] Get_motion_code_loopexit3i37_Incnt2ii40;
reg [31:0] Get_motion_code_loopexit3i37_Incnt2ii40_reg;
reg  Get_motion_code_Get_Bitsexit41_243;
reg  Get_motion_code_Get_Bitsexit41_243_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Get_Bitsexit41_244;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Get_Bitsexit41_244_reg;
reg [7:0] Get_motion_code_Get_Bitsexit41_245;
reg [7:0] Get_motion_code_Get_Bitsexit41_245_reg;
reg [31:0] Get_motion_code_Get_Bitsexit41_246;
reg [31:0] Get_motion_code_Get_Bitsexit41_246_reg;
reg [31:0] Get_motion_code_Get_Bitsexit41_247;
reg [31:0] Get_motion_code_Get_Bitsexit41_247_reg;
reg [31:0] Get_motion_code_Get_Bitsexit41_88;
reg [31:0] Get_motion_code_Get_Bitsexit41_88_reg;
reg [31:0] Get_motion_code_248_249;
reg [31:0] Get_motion_code_248_249_reg;
reg  Get_motion_code_248_250;
reg  Get_motion_code_248_250_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_251_252;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_251_252_reg;
reg [7:0] Get_motion_code_251_253;
reg [7:0] Get_motion_code_251_253_reg;
reg [31:0] Get_motion_code_251_254;
reg [31:0] Get_motion_code_251_254_reg;
reg [31:0] Get_motion_code_251_255;
reg [31:0] Get_motion_code_251_255_reg;
reg [31:0] Get_motion_code_251_256;
reg [31:0] Get_motion_code_251_256_reg;
reg  Get_motion_code_251_257;
reg  Get_motion_code_251_257_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_258_259;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_258_259_reg;
reg  Get_motion_code_258_260;
reg  Get_motion_code_258_260_reg;
reg [31:0] Get_motion_code_258_261;
reg [31:0] Get_motion_code_258_261_reg;
reg [31:0] Get_motion_code_258_262;
reg [31:0] Get_motion_code_258_262_reg;
reg [31:0] Get_motion_code_preheader32preheader_263;
reg [31:0] Get_motion_code_preheader32preheader_263_reg;
reg [31:0] Get_motion_code_preheader32preheader_264;
reg [31:0] Get_motion_code_preheader32preheader_264_reg;
reg [31:0] Get_motion_code_preheader32preheader_265;
reg [31:0] Get_motion_code_preheader32preheader_265_reg;
reg [31:0] Get_motion_code_preheader32preheader_266;
reg [31:0] Get_motion_code_preheader32preheader_266_reg;
reg [31:0] Get_motion_code_preheader32preheader_267;
reg [31:0] Get_motion_code_preheader32preheader_267_reg;
reg [31:0] Get_motion_code_preheader32preheader_268;
reg [31:0] Get_motion_code_preheader32preheader_268_reg;
reg [31:0] Get_motion_code_preheader29_269;
reg [31:0] Get_motion_code_preheader29_269_reg;
reg [31:0] Get_motion_code_preheader29_270;
reg [31:0] Get_motion_code_preheader29_270_reg;
reg [31:0] Get_motion_code_preheader29_271;
reg [31:0] Get_motion_code_preheader29_271_reg;
reg [31:0] Get_motion_code_preheader29_272;
reg [31:0] Get_motion_code_preheader29_272_reg;
reg [31:0] Get_motion_code_preheader29_273;
reg [31:0] Get_motion_code_preheader29_273_reg;
reg [31:0] Get_motion_code_preheader29_274;
reg [31:0] Get_motion_code_preheader29_274_reg;
reg [31:0] Get_motion_code_preheader29_275;
reg [31:0] Get_motion_code_preheader29_275_reg;
reg [31:0] Get_motion_code_276_indvar56;
reg [31:0] Get_motion_code_276_indvar56_reg;
reg [31:0] Get_motion_code_276_277;
reg [31:0] Get_motion_code_276_277_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_276_scevgep58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_276_scevgep58_reg;
reg [31:0] Get_motion_code_276_278;
reg [31:0] Get_motion_code_276_278_reg;
reg [31:0] Get_motion_code_276_279;
reg [31:0] Get_motion_code_276_279_reg;
reg [31:0] Get_motion_code_276_280;
reg [31:0] Get_motion_code_276_280_reg;
reg [31:0] Get_motion_code_276_281;
reg [31:0] Get_motion_code_276_281_reg;
reg [7:0] Get_motion_code_276_282;
reg [7:0] Get_motion_code_276_282_reg;
reg [31:0] Get_motion_code_276_283;
reg [31:0] Get_motion_code_276_283_reg;
reg [31:0] Get_motion_code_276_284;
reg [31:0] Get_motion_code_276_284_reg;
reg [31:0] Get_motion_code_276_285;
reg [31:0] Get_motion_code_276_285_reg;
reg  Get_motion_code_276_286;
reg  Get_motion_code_276_286_reg;
reg [31:0] Get_motion_code_276_indvarnext57;
reg [31:0] Get_motion_code_276_indvarnext57_reg;
reg [31:0] Get_motion_code_preheader32_indvar64;
reg [31:0] Get_motion_code_preheader32_indvar64_reg;
reg [31:0] Get_motion_code_preheader32_287;
reg [31:0] Get_motion_code_preheader32_287_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader32_pr2062;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader32_pr2062_reg;
reg [31:0] Get_motion_code_preheader32_288;
reg [31:0] Get_motion_code_preheader32_288_reg;
reg [31:0] Get_motion_code_preheader32_289;
reg [31:0] Get_motion_code_preheader32_289_reg;
reg [31:0] Get_motion_code_preheader32_290;
reg [31:0] Get_motion_code_preheader32_290_reg;
reg [31:0] Get_motion_code_preheader32_291;
reg [31:0] Get_motion_code_preheader32_291_reg;
reg  Get_motion_code_preheader32_292;
reg  Get_motion_code_preheader32_292_reg;
reg [31:0] Get_motion_code_preheader31_indvar59;
reg [31:0] Get_motion_code_preheader31_indvar59_reg;
reg  Get_motion_code_preheader31_exitcond61;
reg  Get_motion_code_preheader31_exitcond61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_293_p20iii4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_293_p20iii4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_293_p10iii3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_293_p10iii3_reg;
reg [7:0] Get_motion_code_293_294;
reg [7:0] Get_motion_code_293_294_reg;
reg [31:0] Get_motion_code_293_indvarnext60;
reg [31:0] Get_motion_code_293_indvarnext60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti6_pr2063;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti6_pr2063_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti6_295;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti6_295_reg;
reg [7:0] Get_motion_code_Fill_Bufferexiti6_296;
reg [7:0] Get_motion_code_Fill_Bufferexiti6_296_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti6_297;
reg [31:0] Get_motion_code_Fill_Bufferexiti6_297_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti6_298;
reg [31:0] Get_motion_code_Fill_Bufferexiti6_298_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti6_299;
reg [31:0] Get_motion_code_Fill_Bufferexiti6_299_reg;
reg  Get_motion_code_Fill_Bufferexiti6_300;
reg  Get_motion_code_Fill_Bufferexiti6_300_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti6_indvarnext65;
reg [31:0] Get_motion_code_Fill_Bufferexiti6_indvarnext65_reg;
reg [31:0] Get_motion_code_loopexit30_301;
reg [31:0] Get_motion_code_loopexit30_301_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit30_scevgep86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit30_scevgep86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_302_storemerge1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_302_storemerge1_reg;
reg [31:0] Get_motion_code_302_storemerge;
reg [31:0] Get_motion_code_302_storemerge_reg;
reg [31:0] Get_motion_code_302_pn3;
reg [31:0] Get_motion_code_302_pn3_reg;
reg [31:0] Get_motion_code_302_pnin;
reg [31:0] Get_motion_code_302_pnin_reg;
reg [31:0] Get_motion_code_302_pn;
reg [31:0] Get_motion_code_302_pn_reg;
reg [31:0] Get_motion_code_302_Incnt2i7;
reg [31:0] Get_motion_code_302_Incnt2i7_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit8_303;
reg [31:0] Get_motion_code_Flush_Bufferexit8_303_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit8_304;
reg [31:0] Get_motion_code_Flush_Bufferexit8_304_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit8_305;
reg [31:0] Get_motion_code_Flush_Bufferexit8_305_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit8_306;
reg [31:0] Get_motion_code_Flush_Bufferexit8_306_reg;
reg  Get_motion_code_Flush_Bufferexit8_307;
reg  Get_motion_code_Flush_Bufferexit8_307_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_308_309;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_308_309_reg;
reg  Get_motion_code_308_310;
reg  Get_motion_code_308_310_reg;
reg [31:0] Get_motion_code_308_311;
reg [31:0] Get_motion_code_308_311_reg;
reg [31:0] Get_motion_code_308_312;
reg [31:0] Get_motion_code_308_312_reg;
reg [31:0] Get_motion_code_308_313;
reg [31:0] Get_motion_code_308_313_reg;
reg [31:0] Get_motion_code_308_314;
reg [31:0] Get_motion_code_308_314_reg;
reg [31:0] Get_motion_code_preheader2i10preheader_315;
reg [31:0] Get_motion_code_preheader2i10preheader_315_reg;
reg [31:0] Get_motion_code_preheader2i10preheader_316;
reg [31:0] Get_motion_code_preheader2i10preheader_316_reg;
reg [31:0] Get_motion_code_preheaderi7preheader_317;
reg [31:0] Get_motion_code_preheaderi7preheader_317_reg;
reg [31:0] Get_motion_code_preheaderi7preheader_318;
reg [31:0] Get_motion_code_preheaderi7preheader_318_reg;
reg [31:0] Get_motion_code_preheaderi7_indvar46;
reg [31:0] Get_motion_code_preheaderi7_indvar46_reg;
reg [31:0] Get_motion_code_preheaderi7_319;
reg [31:0] Get_motion_code_preheaderi7_319_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi7_scevgep48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi7_scevgep48_reg;
reg [31:0] Get_motion_code_preheaderi7_320;
reg [31:0] Get_motion_code_preheaderi7_320_reg;
reg [31:0] Get_motion_code_preheaderi7_321;
reg [31:0] Get_motion_code_preheaderi7_321_reg;
reg [31:0] Get_motion_code_preheaderi7_322;
reg [31:0] Get_motion_code_preheaderi7_322_reg;
reg [31:0] Get_motion_code_preheaderi7_323;
reg [31:0] Get_motion_code_preheaderi7_323_reg;
reg [7:0] Get_motion_code_preheaderi7_324;
reg [7:0] Get_motion_code_preheaderi7_324_reg;
reg [31:0] Get_motion_code_preheaderi7_325;
reg [31:0] Get_motion_code_preheaderi7_325_reg;
reg [31:0] Get_motion_code_preheaderi7_326;
reg [31:0] Get_motion_code_preheaderi7_326_reg;
reg [31:0] Get_motion_code_preheaderi7_327;
reg [31:0] Get_motion_code_preheaderi7_327_reg;
reg  Get_motion_code_preheaderi7_328;
reg  Get_motion_code_preheaderi7_328_reg;
reg [31:0] Get_motion_code_preheaderi7_indvarnext47;
reg [31:0] Get_motion_code_preheaderi7_indvarnext47_reg;
reg [31:0] Get_motion_code_preheader2i10_indvar54;
reg [31:0] Get_motion_code_preheader2i10_indvar54_reg;
reg [31:0] Get_motion_code_preheader2i10_329;
reg [31:0] Get_motion_code_preheader2i10_329_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader2i10_pr8i8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader2i10_pr8i8_reg;
reg [31:0] Get_motion_code_preheader2i10_330;
reg [31:0] Get_motion_code_preheader2i10_330_reg;
reg [31:0] Get_motion_code_preheader2i10_331;
reg [31:0] Get_motion_code_preheader2i10_331_reg;
reg [31:0] Get_motion_code_preheader2i10_332;
reg [31:0] Get_motion_code_preheader2i10_332_reg;
reg [31:0] Get_motion_code_preheader2i10_333;
reg [31:0] Get_motion_code_preheader2i10_333_reg;
reg  Get_motion_code_preheader2i10_334;
reg  Get_motion_code_preheader2i10_334_reg;
reg [31:0] Get_motion_code_preheader1i14_indvar49;
reg [31:0] Get_motion_code_preheader1i14_indvar49_reg;
reg  Get_motion_code_preheader1i14_exitcond51;
reg  Get_motion_code_preheader1i14_exitcond51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_335_p20iiii12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_335_p20iiii12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_335_p10iiii11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_335_p10iiii11_reg;
reg [7:0] Get_motion_code_335_336;
reg [7:0] Get_motion_code_335_336_reg;
reg [31:0] Get_motion_code_335_indvarnext50;
reg [31:0] Get_motion_code_335_indvarnext50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii16_pr9i15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii16_pr9i15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii16_337;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitii16_337_reg;
reg [7:0] Get_motion_code_Fill_Bufferexitii16_338;
reg [7:0] Get_motion_code_Fill_Bufferexitii16_338_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii16_339;
reg [31:0] Get_motion_code_Fill_Bufferexitii16_339_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii16_340;
reg [31:0] Get_motion_code_Fill_Bufferexitii16_340_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii16_341;
reg [31:0] Get_motion_code_Fill_Bufferexitii16_341_reg;
reg  Get_motion_code_Fill_Bufferexitii16_342;
reg  Get_motion_code_Fill_Bufferexitii16_342_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitii16_indvarnext55;
reg [31:0] Get_motion_code_Fill_Bufferexitii16_indvarnext55_reg;
reg [31:0] Get_motion_code_loopexiti18_343;
reg [31:0] Get_motion_code_loopexiti18_343_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti18_scevgepi17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti18_scevgepi17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit3i19_storemerge1i20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexit3i19_storemerge1i20_reg;
reg [31:0] Get_motion_code_loopexit3i19_storemergei21;
reg [31:0] Get_motion_code_loopexit3i19_storemergei21_reg;
reg [31:0] Get_motion_code_loopexit3i19_Incnt2ii22;
reg [31:0] Get_motion_code_loopexit3i19_Incnt2ii22_reg;
reg  Get_motion_code_Get_Bitsexit23_344;
reg  Get_motion_code_Get_Bitsexit23_344_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Get_Bitsexit23_345;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Get_Bitsexit23_345_reg;
reg [7:0] Get_motion_code_Get_Bitsexit23_346;
reg [7:0] Get_motion_code_Get_Bitsexit23_346_reg;
reg [31:0] Get_motion_code_Get_Bitsexit23_347;
reg [31:0] Get_motion_code_Get_Bitsexit23_347_reg;
reg [31:0] Get_motion_code_Get_Bitsexit23_348;
reg [31:0] Get_motion_code_Get_Bitsexit23_348_reg;
reg [31:0] Get_motion_code_Get_Bitsexit23_89;
reg [31:0] Get_motion_code_Get_Bitsexit23_89_reg;
reg [31:0] Get_motion_code_349_0;
reg [31:0] Get_motion_code_349_0_reg;
wire [10:0] rom_8_address_a;
wire  rom_8_write_enable_a;
wire [7:0] rom_8_in_a;
wire [7:0] rom_8_out_a;
wire [10:0] rom_8_address_b;
wire  rom_8_write_enable_b;
wire [7:0] rom_8_in_b;
wire [7:0] rom_8_out_b;
wire [2:0] inPMV_address_a;
wire  inPMV_write_enable_a;
wire [31:0] inPMV_in_a;
wire [31:0] inPMV_out_a;
wire [2:0] inPMV_address_b;
wire  inPMV_write_enable_b;
wire [31:0] inPMV_in_b;
wire [31:0] inPMV_out_b;
wire [1:0] inmvfs_address_a;
wire  inmvfs_write_enable_a;
wire [31:0] inmvfs_in_a;
wire [31:0] inmvfs_out_a;
wire [1:0] inmvfs_address_b;
wire  inmvfs_write_enable_b;
wire [31:0] inmvfs_in_b;
wire [31:0] inmvfs_out_b;
wire [2:0] outPMV_address_a;
wire  outPMV_write_enable_a;
wire [31:0] outPMV_in_a;
wire [31:0] outPMV_out_a;
wire [2:0] outPMV_address_b;
wire  outPMV_write_enable_b;
wire [31:0] outPMV_in_b;
wire [31:0] outPMV_out_b;
wire [1:0] outmvfs_address_a;
wire  outmvfs_write_enable_a;
wire [31:0] outmvfs_in_a;
wire [31:0] outmvfs_out_a;
wire [1:0] outmvfs_address_b;
wire  outmvfs_write_enable_b;
wire [31:0] outmvfs_in_b;
wire [31:0] outmvfs_out_b;
wire [10:0] ram_8_address_a;
wire  ram_8_write_enable_a;
wire [7:0] ram_8_in_a;
wire [7:0] ram_8_out_a;
wire [10:0] ram_8_address_b;
wire  ram_8_write_enable_b;
wire [7:0] ram_8_in_b;
wire [7:0] ram_8_out_b;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [3:0] MVtab0_address_a;
reg  MVtab0_write_enable_a;
wire [7:0] MVtab0_in_a;
wire [7:0] MVtab0_out_a;
wire [3:0] MVtab0_address_b;
wire  MVtab0_write_enable_b;
wire [7:0] MVtab0_in_b;
wire [7:0] MVtab0_out_b;
reg [3:0] MVtab1_address_a;
reg  MVtab1_write_enable_a;
wire [7:0] MVtab1_in_a;
wire [7:0] MVtab1_out_a;
wire [3:0] MVtab1_address_b;
wire  MVtab1_write_enable_b;
wire [7:0] MVtab1_in_b;
wire [7:0] MVtab1_out_b;
reg [4:0] MVtab2_address_a;
reg  MVtab2_write_enable_a;
wire [7:0] MVtab2_in_a;
wire [7:0] MVtab2_out_a;
wire [4:0] MVtab2_address_b;
wire  MVtab2_write_enable_b;
wire [7:0] MVtab2_in_b;
wire [7:0] MVtab2_out_b;
wire [2:0] main_0_PMV_address_a;
wire  main_0_PMV_write_enable_a;
wire [31:0] main_0_PMV_in_a;
wire [31:0] main_0_PMV_out_a;
wire [2:0] main_0_PMV_address_b;
wire  main_0_PMV_write_enable_b;
wire [31:0] main_0_PMV_in_b;
wire [31:0] main_0_PMV_out_b;
wire [1:0] main_0_motion_vertical_field_select_address_a;
wire  main_0_motion_vertical_field_select_write_enable_a;
wire [31:0] main_0_motion_vertical_field_select_in_a;
wire [31:0] main_0_motion_vertical_field_select_out_a;
wire [1:0] main_0_motion_vertical_field_select_address_b;
wire  main_0_motion_vertical_field_select_write_enable_b;
wire [31:0] main_0_motion_vertical_field_select_in_b;
wire [31:0] main_0_motion_vertical_field_select_out_b;
reg  lpm_mult_Get_motion_code_preheaderi_20_en;
reg [31:0] Get_motion_code_preheaderi_20_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader2i_30_en;
reg [31:0] Get_motion_code_preheader2i_30_stage0_reg;
reg  lpm_mult_Get_motion_code_74_78_en;
reg [31:0] Get_motion_code_74_78_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader22_88_en;
reg [31:0] Get_motion_code_preheader22_88_stage0_reg;
reg  lpm_mult_Get_motion_code_preheaderi43_120_en;
reg [31:0] Get_motion_code_preheaderi43_120_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader2i46_130_en;
reg [31:0] Get_motion_code_preheader2i46_130_stage0_reg;
reg  lpm_mult_Get_motion_code_175_179_en;
reg [31:0] Get_motion_code_175_179_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader27_189_en;
reg [31:0] Get_motion_code_preheader27_189_stage0_reg;
reg  lpm_mult_Get_motion_code_preheaderi25_221_en;
reg [31:0] Get_motion_code_preheaderi25_221_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader2i28_231_en;
reg [31:0] Get_motion_code_preheader2i28_231_stage0_reg;
reg  lpm_mult_Get_motion_code_276_280_en;
reg [31:0] Get_motion_code_276_280_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader32_290_en;
reg [31:0] Get_motion_code_preheader32_290_stage0_reg;
reg  lpm_mult_Get_motion_code_preheaderi7_322_en;
reg [31:0] Get_motion_code_preheaderi7_322_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader2i10_332_en;
reg [31:0] Get_motion_code_preheader2i10_332_stage0_reg;

// Local Rams


// @MVtab0 = internal unnamed_addr constant [8 x [2 x i8]] [[2 x i8] c"\FF\00", [2 x i8] c"\03\03", [2 x i8] c"\02\02", [2 x i8] c"\02\02", [2 x i8] c"\01\01", [2 x i8] c"\01\01", [2 x i8] c"\01\01", [2 ...
rom_dual_port MVtab0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( MVtab0_address_a ),
	.address_b( MVtab0_address_b ),
	.q_a( MVtab0_out_a ),
	.q_b( MVtab0_out_b)
);
defparam MVtab0.width_a = 8;
defparam MVtab0.width_b = 8;
defparam MVtab0.widthad_a = 4;
defparam MVtab0.widthad_b = 4;
defparam MVtab0.numwords_a = 16;
defparam MVtab0.numwords_b = 16;
defparam MVtab0.latency = 1;
defparam MVtab0.init_file = "MVtab0.mif";


// @MVtab1 = internal unnamed_addr constant [8 x [2 x i8]] [[2 x i8] c"\FF\00", [2 x i8] c"\FF\00", [2 x i8] c"\FF\00", [2 x i8] c"\07\06", [2 x i8] c"\06\06", [2 x i8] c"\05\06", [2 x i8] c"\04\05", [2 ...
rom_dual_port MVtab1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( MVtab1_address_a ),
	.address_b( MVtab1_address_b ),
	.q_a( MVtab1_out_a ),
	.q_b( MVtab1_out_b)
);
defparam MVtab1.width_a = 8;
defparam MVtab1.width_b = 8;
defparam MVtab1.widthad_a = 4;
defparam MVtab1.widthad_b = 4;
defparam MVtab1.numwords_a = 16;
defparam MVtab1.numwords_b = 16;
defparam MVtab1.latency = 1;
defparam MVtab1.init_file = "MVtab1.mif";


// @MVtab2 = internal unnamed_addr constant [12 x [2 x i8]] [[2 x i8] c"\10\09", [2 x i8] c"\0F\09", [2 x i8] c"\0E\09", [2 x i8] c"\0D\09", [2 x i8] c"\0C\09", [2 x i8] c"\0B\09", [2 x i8] c"\0A\08", [2...
rom_dual_port MVtab2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( MVtab2_address_a ),
	.address_b( MVtab2_address_b ),
	.q_a( MVtab2_out_a ),
	.q_b( MVtab2_out_b)
);
defparam MVtab2.width_a = 8;
defparam MVtab2.width_b = 8;
defparam MVtab2.widthad_a = 5;
defparam MVtab2.widthad_b = 5;
defparam MVtab2.numwords_a = 24;
defparam MVtab2.numwords_b = 24;
defparam MVtab2.latency = 1;
defparam MVtab2.init_file = "MVtab2.mif";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__0_1;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_113:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_114;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_114:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115:
	if ((Get_motion_code_Fill_Bufferexiti14_199_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader27_104;
	else if ((Get_motion_code_Fill_Bufferexiti14_199_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit28_118;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14loopexit_112:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_113;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_173:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_174;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_174:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175:
	if ((Get_motion_code_Fill_Bufferexiti6_300_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader32_164;
	else if ((Get_motion_code_Fill_Bufferexiti6_300_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit33_178;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6loopexit_172:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_173;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_53:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_54;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_54:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55:
	if ((Get_motion_code_Fill_Bufferexiti_98_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader22_44;
	else if ((Get_motion_code_Fill_Bufferexiti_98_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit23_58;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_201:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_202;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_202:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203:
	if ((Get_motion_code_Fill_Bufferexitii16_342_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i10_192;
	else if ((Get_motion_code_Fill_Bufferexitii16_342_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i19loopexit_206;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16loopexit_200:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_201;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_141:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_142;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_142:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143:
	if ((Get_motion_code_Fill_Bufferexitii34_241_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i28_132;
	else if ((Get_motion_code_Fill_Bufferexitii34_241_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i37loopexit_146;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34loopexit_140:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_141;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_81:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_82;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_82:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83:
	if ((Get_motion_code_Fill_Bufferexitii52_140_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i46_72;
	else if ((Get_motion_code_Fill_Bufferexitii52_140_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i55loopexit_86;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52loopexit_80:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_81;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_22:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_23;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_23:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24:
	if ((Get_motion_code_Fill_Bufferexitii_40_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i_13;
	else if ((Get_motion_code_Fill_Bufferexitii_40_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3iloopexit_27;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiiloopexit_21:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_22;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiloopexit_52:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_53;
LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122:
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_123;
LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_123:
	if ((Get_motion_code_Flush_Bufferexit16_206_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__207_124;
	else if ((Get_motion_code_Flush_Bufferexit16_206_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_150;
LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182:
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_183;
LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_183:
	if ((Get_motion_code_Flush_Bufferexit8_307_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__308_184;
	else if ((Get_motion_code_Flush_Bufferexit8_307_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_210;
LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62:
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_63;
LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_63:
	if ((Get_motion_code_Flush_Bufferexit_105_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__106_64;
	else if ((Get_motion_code_Flush_Bufferexit_105_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_90;
LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_210:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_211;
LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_211:
		next_state = LEGUP_F_Get_motion_code_BB__349_212;
LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_150:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_151;
LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_151:
		next_state = LEGUP_F_Get_motion_code_BB__349_212;
LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_90:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_91;
LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_91:
		next_state = LEGUP_0;
LEGUP_F_Get_motion_code_BB_Get_Bitsexit_31:
	if ((Get_motion_code_Get_Bitsexit_44 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__45_32;
	else if ((Get_motion_code_Get_Bitsexit_44 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__349_212;
LEGUP_F_Get_motion_code_BB__0_1:
		next_state = LEGUP_F_Get_motion_code_BB__0_2;
LEGUP_F_Get_motion_code_BB__0_2:
		next_state = LEGUP_F_Get_motion_code_BB__0_3;
LEGUP_F_Get_motion_code_BB__0_3:
		next_state = LEGUP_F_Get_motion_code_BB__0_4;
LEGUP_F_Get_motion_code_BB__0_4:
	if ((Get_motion_code_0_5_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__6_5;
	else if ((Get_motion_code_0_5_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bitsexit_31;
LEGUP_F_Get_motion_code_BB__100_59:
		next_state = LEGUP_F_Get_motion_code_BB__100_60;
LEGUP_F_Get_motion_code_BB__100_60:
		next_state = LEGUP_F_Get_motion_code_BB__100_61;
LEGUP_F_Get_motion_code_BB__100_61:
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62;
LEGUP_F_Get_motion_code_BB__106_64:
		next_state = LEGUP_F_Get_motion_code_BB__106_65;
LEGUP_F_Get_motion_code_BB__106_65:
		next_state = LEGUP_F_Get_motion_code_BB__106_66;
LEGUP_F_Get_motion_code_BB__106_66:
	if ((Get_motion_code_106_108 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi43preheader_68;
	else if ((Get_motion_code_106_108 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i46preheader_67;
LEGUP_F_Get_motion_code_BB__133_76:
		next_state = LEGUP_F_Get_motion_code_BB__133_77;
LEGUP_F_Get_motion_code_BB__133_77:
		next_state = LEGUP_F_Get_motion_code_BB__133_78;
LEGUP_F_Get_motion_code_BB__133_78:
		next_state = LEGUP_F_Get_motion_code_BB__133_79;
LEGUP_F_Get_motion_code_BB__133_79:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i50_75;
LEGUP_F_Get_motion_code_BB__147_92:
	if ((Get_motion_code_147_148 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__149_93;
	else if ((Get_motion_code_147_148 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__248_152;
LEGUP_F_Get_motion_code_BB__149_93:
		next_state = LEGUP_F_Get_motion_code_BB__149_94;
LEGUP_F_Get_motion_code_BB__149_94:
		next_state = LEGUP_F_Get_motion_code_BB__149_95;
LEGUP_F_Get_motion_code_BB__149_95:
	if ((Get_motion_code_149_156_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__157_96;
	else if ((Get_motion_code_149_156_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122;
LEGUP_F_Get_motion_code_BB__157_96:
		next_state = LEGUP_F_Get_motion_code_BB__157_97;
LEGUP_F_Get_motion_code_BB__157_97:
		next_state = LEGUP_F_Get_motion_code_BB__157_98;
LEGUP_F_Get_motion_code_BB__157_98:
	if ((Get_motion_code_157_159 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader24_100;
	else if ((Get_motion_code_157_159 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader27preheader_99;
LEGUP_F_Get_motion_code_BB__175_101:
		next_state = LEGUP_F_Get_motion_code_BB__175_102;
LEGUP_F_Get_motion_code_BB__175_102:
		next_state = LEGUP_F_Get_motion_code_BB__175_103;
LEGUP_F_Get_motion_code_BB__175_103:
	if ((Get_motion_code_175_185_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__175_101;
	else if ((Get_motion_code_175_185_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit25_116;
LEGUP_F_Get_motion_code_BB__192_108:
		next_state = LEGUP_F_Get_motion_code_BB__192_109;
LEGUP_F_Get_motion_code_BB__192_109:
		next_state = LEGUP_F_Get_motion_code_BB__192_110;
LEGUP_F_Get_motion_code_BB__192_110:
		next_state = LEGUP_F_Get_motion_code_BB__192_111;
LEGUP_F_Get_motion_code_BB__192_111:
		next_state = LEGUP_F_Get_motion_code_BB_preheader26_107;
LEGUP_F_Get_motion_code_BB__201_119:
		next_state = LEGUP_F_Get_motion_code_BB__201_120;
LEGUP_F_Get_motion_code_BB__201_120:
		next_state = LEGUP_F_Get_motion_code_BB__201_121;
LEGUP_F_Get_motion_code_BB__201_121:
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122;
LEGUP_F_Get_motion_code_BB__207_124:
		next_state = LEGUP_F_Get_motion_code_BB__207_125;
LEGUP_F_Get_motion_code_BB__207_125:
		next_state = LEGUP_F_Get_motion_code_BB__207_126;
LEGUP_F_Get_motion_code_BB__207_126:
	if ((Get_motion_code_207_209 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi25preheader_128;
	else if ((Get_motion_code_207_209 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i28preheader_127;
LEGUP_F_Get_motion_code_BB__234_136:
		next_state = LEGUP_F_Get_motion_code_BB__234_137;
LEGUP_F_Get_motion_code_BB__234_137:
		next_state = LEGUP_F_Get_motion_code_BB__234_138;
LEGUP_F_Get_motion_code_BB__234_138:
		next_state = LEGUP_F_Get_motion_code_BB__234_139;
LEGUP_F_Get_motion_code_BB__234_139:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i32_135;
LEGUP_F_Get_motion_code_BB__248_152:
	if ((Get_motion_code_248_250 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__349_212;
	else if ((Get_motion_code_248_250 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__251_153;
LEGUP_F_Get_motion_code_BB__251_153:
		next_state = LEGUP_F_Get_motion_code_BB__251_154;
LEGUP_F_Get_motion_code_BB__251_154:
		next_state = LEGUP_F_Get_motion_code_BB__251_155;
LEGUP_F_Get_motion_code_BB__251_155:
	if ((Get_motion_code_251_257_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__258_156;
	else if ((Get_motion_code_251_257_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182;
LEGUP_F_Get_motion_code_BB__258_156:
		next_state = LEGUP_F_Get_motion_code_BB__258_157;
LEGUP_F_Get_motion_code_BB__258_157:
		next_state = LEGUP_F_Get_motion_code_BB__258_158;
LEGUP_F_Get_motion_code_BB__258_158:
	if ((Get_motion_code_258_260 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader29_160;
	else if ((Get_motion_code_258_260 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader32preheader_159;
LEGUP_F_Get_motion_code_BB__276_161:
		next_state = LEGUP_F_Get_motion_code_BB__276_162;
LEGUP_F_Get_motion_code_BB__276_162:
		next_state = LEGUP_F_Get_motion_code_BB__276_163;
LEGUP_F_Get_motion_code_BB__276_163:
	if ((Get_motion_code_276_286_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__276_161;
	else if ((Get_motion_code_276_286_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit30_176;
LEGUP_F_Get_motion_code_BB__293_168:
		next_state = LEGUP_F_Get_motion_code_BB__293_169;
LEGUP_F_Get_motion_code_BB__293_169:
		next_state = LEGUP_F_Get_motion_code_BB__293_170;
LEGUP_F_Get_motion_code_BB__293_170:
		next_state = LEGUP_F_Get_motion_code_BB__293_171;
LEGUP_F_Get_motion_code_BB__293_171:
		next_state = LEGUP_F_Get_motion_code_BB_preheader31_167;
LEGUP_F_Get_motion_code_BB__302_179:
		next_state = LEGUP_F_Get_motion_code_BB__302_180;
LEGUP_F_Get_motion_code_BB__302_180:
		next_state = LEGUP_F_Get_motion_code_BB__302_181;
LEGUP_F_Get_motion_code_BB__302_181:
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182;
LEGUP_F_Get_motion_code_BB__308_184:
		next_state = LEGUP_F_Get_motion_code_BB__308_185;
LEGUP_F_Get_motion_code_BB__308_185:
		next_state = LEGUP_F_Get_motion_code_BB__308_186;
LEGUP_F_Get_motion_code_BB__308_186:
	if ((Get_motion_code_308_310 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi7preheader_188;
	else if ((Get_motion_code_308_310 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i10preheader_187;
LEGUP_F_Get_motion_code_BB__335_196:
		next_state = LEGUP_F_Get_motion_code_BB__335_197;
LEGUP_F_Get_motion_code_BB__335_197:
		next_state = LEGUP_F_Get_motion_code_BB__335_198;
LEGUP_F_Get_motion_code_BB__335_198:
		next_state = LEGUP_F_Get_motion_code_BB__335_199;
LEGUP_F_Get_motion_code_BB__335_199:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i14_195;
LEGUP_F_Get_motion_code_BB__33_17:
		next_state = LEGUP_F_Get_motion_code_BB__33_18;
LEGUP_F_Get_motion_code_BB__33_18:
		next_state = LEGUP_F_Get_motion_code_BB__33_19;
LEGUP_F_Get_motion_code_BB__33_19:
		next_state = LEGUP_F_Get_motion_code_BB__33_20;
LEGUP_F_Get_motion_code_BB__33_20:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i_16;
LEGUP_F_Get_motion_code_BB__349_212:
		next_state = LEGUP_0;
LEGUP_F_Get_motion_code_BB__45_32:
	if ((Get_motion_code_45_47 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__48_33;
	else if ((Get_motion_code_45_47 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__147_92;
LEGUP_F_Get_motion_code_BB__48_33:
		next_state = LEGUP_F_Get_motion_code_BB__48_34;
LEGUP_F_Get_motion_code_BB__48_34:
		next_state = LEGUP_F_Get_motion_code_BB__48_35;
LEGUP_F_Get_motion_code_BB__48_35:
	if ((Get_motion_code_48_55_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__56_36;
	else if ((Get_motion_code_48_55_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62;
LEGUP_F_Get_motion_code_BB__56_36:
		next_state = LEGUP_F_Get_motion_code_BB__56_37;
LEGUP_F_Get_motion_code_BB__56_37:
		next_state = LEGUP_F_Get_motion_code_BB__56_38;
LEGUP_F_Get_motion_code_BB__56_38:
	if ((Get_motion_code_56_58 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader_40;
	else if ((Get_motion_code_56_58 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader22preheader_39;
LEGUP_F_Get_motion_code_BB__6_5:
		next_state = LEGUP_F_Get_motion_code_BB__6_6;
LEGUP_F_Get_motion_code_BB__6_6:
		next_state = LEGUP_F_Get_motion_code_BB__6_7;
LEGUP_F_Get_motion_code_BB__6_7:
	if ((Get_motion_code_6_8 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderipreheader_9;
	else if ((Get_motion_code_6_8 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader2ipreheader_8;
LEGUP_F_Get_motion_code_BB__74_41:
		next_state = LEGUP_F_Get_motion_code_BB__74_42;
LEGUP_F_Get_motion_code_BB__74_42:
		next_state = LEGUP_F_Get_motion_code_BB__74_43;
LEGUP_F_Get_motion_code_BB__74_43:
	if ((Get_motion_code_74_84_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__74_41;
	else if ((Get_motion_code_74_84_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit_56;
LEGUP_F_Get_motion_code_BB__91_48:
		next_state = LEGUP_F_Get_motion_code_BB__91_49;
LEGUP_F_Get_motion_code_BB__91_49:
		next_state = LEGUP_F_Get_motion_code_BB__91_50;
LEGUP_F_Get_motion_code_BB__91_50:
		next_state = LEGUP_F_Get_motion_code_BB__91_51;
LEGUP_F_Get_motion_code_BB__91_51:
		next_state = LEGUP_F_Get_motion_code_BB_preheader21_47;
LEGUP_F_Get_motion_code_BB_loopexit23_58:
		next_state = LEGUP_F_Get_motion_code_BB__100_59;
LEGUP_F_Get_motion_code_BB_loopexit25_116:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit25_117;
LEGUP_F_Get_motion_code_BB_loopexit25_117:
		next_state = LEGUP_F_Get_motion_code_BB__201_119;
LEGUP_F_Get_motion_code_BB_loopexit28_118:
		next_state = LEGUP_F_Get_motion_code_BB__201_119;
LEGUP_F_Get_motion_code_BB_loopexit30_176:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit30_177;
LEGUP_F_Get_motion_code_BB_loopexit30_177:
		next_state = LEGUP_F_Get_motion_code_BB__302_179;
LEGUP_F_Get_motion_code_BB_loopexit33_178:
		next_state = LEGUP_F_Get_motion_code_BB__302_179;
LEGUP_F_Get_motion_code_BB_loopexit3i19_207:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i19_208;
LEGUP_F_Get_motion_code_BB_loopexit3i19_208:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i19_209;
LEGUP_F_Get_motion_code_BB_loopexit3i19_209:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_210;
LEGUP_F_Get_motion_code_BB_loopexit3i19loopexit_206:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i19_207;
LEGUP_F_Get_motion_code_BB_loopexit3i37_147:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i37_148;
LEGUP_F_Get_motion_code_BB_loopexit3i37_148:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i37_149;
LEGUP_F_Get_motion_code_BB_loopexit3i37_149:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_150;
LEGUP_F_Get_motion_code_BB_loopexit3i37loopexit_146:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i37_147;
LEGUP_F_Get_motion_code_BB_loopexit3i55_87:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i55_88;
LEGUP_F_Get_motion_code_BB_loopexit3i55_88:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i55_89;
LEGUP_F_Get_motion_code_BB_loopexit3i55_89:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_90;
LEGUP_F_Get_motion_code_BB_loopexit3i55loopexit_86:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i55_87;
LEGUP_F_Get_motion_code_BB_loopexit3i_28:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i_29;
LEGUP_F_Get_motion_code_BB_loopexit3i_29:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i_30;
LEGUP_F_Get_motion_code_BB_loopexit3i_30:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bitsexit_31;
LEGUP_F_Get_motion_code_BB_loopexit3iloopexit_27:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i_28;
LEGUP_F_Get_motion_code_BB_loopexit_56:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit_57;
LEGUP_F_Get_motion_code_BB_loopexit_57:
		next_state = LEGUP_F_Get_motion_code_BB__100_59;
LEGUP_F_Get_motion_code_BB_loopexiti18_204:
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti18_205;
LEGUP_F_Get_motion_code_BB_loopexiti18_205:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i19_207;
LEGUP_F_Get_motion_code_BB_loopexiti36_144:
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti36_145;
LEGUP_F_Get_motion_code_BB_loopexiti36_145:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i37_147;
LEGUP_F_Get_motion_code_BB_loopexiti54_84:
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti54_85;
LEGUP_F_Get_motion_code_BB_loopexiti54_85:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i55_87;
LEGUP_F_Get_motion_code_BB_loopexiti_25:
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti_26;
LEGUP_F_Get_motion_code_BB_loopexiti_26:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit3i_28;
LEGUP_F_Get_motion_code_BB_preheader1i14_195:
	if ((Get_motion_code_preheader1i14_exitcond51 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16loopexit_200;
	else if ((Get_motion_code_preheader1i14_exitcond51 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__335_196;
LEGUP_F_Get_motion_code_BB_preheader1i14preheader_194:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i14_195;
LEGUP_F_Get_motion_code_BB_preheader1i32_135:
	if ((Get_motion_code_preheader1i32_exitcond == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34loopexit_140;
	else if ((Get_motion_code_preheader1i32_exitcond == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__234_136;
LEGUP_F_Get_motion_code_BB_preheader1i32preheader_134:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i32_135;
LEGUP_F_Get_motion_code_BB_preheader1i50_75:
	if ((Get_motion_code_preheader1i50_exitcond12 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52loopexit_80;
	else if ((Get_motion_code_preheader1i50_exitcond12 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__133_76;
LEGUP_F_Get_motion_code_BB_preheader1i50preheader_74:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i50_75;
LEGUP_F_Get_motion_code_BB_preheader1i_16:
	if ((Get_motion_code_preheader1i_exitcond71 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiiloopexit_21;
	else if ((Get_motion_code_preheader1i_exitcond71 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__33_17;
LEGUP_F_Get_motion_code_BB_preheader1ipreheader_15:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i_16;
LEGUP_F_Get_motion_code_BB_preheader21_47:
	if ((Get_motion_code_preheader21_exitcond22 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiloopexit_52;
	else if ((Get_motion_code_preheader21_exitcond22 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__91_48;
LEGUP_F_Get_motion_code_BB_preheader21preheader_46:
		next_state = LEGUP_F_Get_motion_code_BB_preheader21_47;
LEGUP_F_Get_motion_code_BB_preheader22_44:
		next_state = LEGUP_F_Get_motion_code_BB_preheader22_45;
LEGUP_F_Get_motion_code_BB_preheader22_45:
	if ((Get_motion_code_preheader22_90_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_53;
	else if ((Get_motion_code_preheader22_90_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader21preheader_46;
LEGUP_F_Get_motion_code_BB_preheader22preheader_39:
		next_state = LEGUP_F_Get_motion_code_BB_preheader22_44;
LEGUP_F_Get_motion_code_BB_preheader24_100:
		next_state = LEGUP_F_Get_motion_code_BB__175_101;
LEGUP_F_Get_motion_code_BB_preheader26_107:
	if ((Get_motion_code_preheader26_exitcond41 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14loopexit_112;
	else if ((Get_motion_code_preheader26_exitcond41 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__192_108;
LEGUP_F_Get_motion_code_BB_preheader26preheader_106:
		next_state = LEGUP_F_Get_motion_code_BB_preheader26_107;
LEGUP_F_Get_motion_code_BB_preheader27_104:
		next_state = LEGUP_F_Get_motion_code_BB_preheader27_105;
LEGUP_F_Get_motion_code_BB_preheader27_105:
	if ((Get_motion_code_preheader27_191_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_113;
	else if ((Get_motion_code_preheader27_191_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader26preheader_106;
LEGUP_F_Get_motion_code_BB_preheader27preheader_99:
		next_state = LEGUP_F_Get_motion_code_BB_preheader27_104;
LEGUP_F_Get_motion_code_BB_preheader29_160:
		next_state = LEGUP_F_Get_motion_code_BB__276_161;
LEGUP_F_Get_motion_code_BB_preheader2i10_192:
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i10_193;
LEGUP_F_Get_motion_code_BB_preheader2i10_193:
	if ((Get_motion_code_preheader2i10_334_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_201;
	else if ((Get_motion_code_preheader2i10_334_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i14preheader_194;
LEGUP_F_Get_motion_code_BB_preheader2i10preheader_187:
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i10_192;
LEGUP_F_Get_motion_code_BB_preheader2i28_132:
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i28_133;
LEGUP_F_Get_motion_code_BB_preheader2i28_133:
	if ((Get_motion_code_preheader2i28_233_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_141;
	else if ((Get_motion_code_preheader2i28_233_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i32preheader_134;
LEGUP_F_Get_motion_code_BB_preheader2i28preheader_127:
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i28_132;
LEGUP_F_Get_motion_code_BB_preheader2i46_72:
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i46_73;
LEGUP_F_Get_motion_code_BB_preheader2i46_73:
	if ((Get_motion_code_preheader2i46_132_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_81;
	else if ((Get_motion_code_preheader2i46_132_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i50preheader_74;
LEGUP_F_Get_motion_code_BB_preheader2i46preheader_67:
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i46_72;
LEGUP_F_Get_motion_code_BB_preheader2i_13:
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i_14;
LEGUP_F_Get_motion_code_BB_preheader2i_14:
	if ((Get_motion_code_preheader2i_32_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_22;
	else if ((Get_motion_code_preheader2i_32_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1ipreheader_15;
LEGUP_F_Get_motion_code_BB_preheader2ipreheader_8:
		next_state = LEGUP_F_Get_motion_code_BB_preheader2i_13;
LEGUP_F_Get_motion_code_BB_preheader31_167:
	if ((Get_motion_code_preheader31_exitcond61 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6loopexit_172;
	else if ((Get_motion_code_preheader31_exitcond61 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__293_168;
LEGUP_F_Get_motion_code_BB_preheader31preheader_166:
		next_state = LEGUP_F_Get_motion_code_BB_preheader31_167;
LEGUP_F_Get_motion_code_BB_preheader32_164:
		next_state = LEGUP_F_Get_motion_code_BB_preheader32_165;
LEGUP_F_Get_motion_code_BB_preheader32_165:
	if ((Get_motion_code_preheader32_292_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_173;
	else if ((Get_motion_code_preheader32_292_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader31preheader_166;
LEGUP_F_Get_motion_code_BB_preheader32preheader_159:
		next_state = LEGUP_F_Get_motion_code_BB_preheader32_164;
LEGUP_F_Get_motion_code_BB_preheader_40:
		next_state = LEGUP_F_Get_motion_code_BB__74_41;
LEGUP_F_Get_motion_code_BB_preheaderi25_129:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi25_130;
LEGUP_F_Get_motion_code_BB_preheaderi25_130:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi25_131;
LEGUP_F_Get_motion_code_BB_preheaderi25_131:
	if ((Get_motion_code_preheaderi25_227_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi25_129;
	else if ((Get_motion_code_preheaderi25_227_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti36_144;
LEGUP_F_Get_motion_code_BB_preheaderi25preheader_128:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi25_129;
LEGUP_F_Get_motion_code_BB_preheaderi43_69:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi43_70;
LEGUP_F_Get_motion_code_BB_preheaderi43_70:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi43_71;
LEGUP_F_Get_motion_code_BB_preheaderi43_71:
	if ((Get_motion_code_preheaderi43_126_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi43_69;
	else if ((Get_motion_code_preheaderi43_126_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti54_84;
LEGUP_F_Get_motion_code_BB_preheaderi43preheader_68:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi43_69;
LEGUP_F_Get_motion_code_BB_preheaderi7_189:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi7_190;
LEGUP_F_Get_motion_code_BB_preheaderi7_190:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi7_191;
LEGUP_F_Get_motion_code_BB_preheaderi7_191:
	if ((Get_motion_code_preheaderi7_328_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi7_189;
	else if ((Get_motion_code_preheaderi7_328_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti18_204;
LEGUP_F_Get_motion_code_BB_preheaderi7preheader_188:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi7_189;
LEGUP_F_Get_motion_code_BB_preheaderi_10:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi_11;
LEGUP_F_Get_motion_code_BB_preheaderi_11:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi_12;
LEGUP_F_Get_motion_code_BB_preheaderi_12:
	if ((Get_motion_code_preheaderi_26_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi_10;
	else if ((Get_motion_code_preheaderi_26_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti_25;
LEGUP_F_Get_motion_code_BB_preheaderipreheader_9:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* Get_motion_code: %0*/
	/*   %1 = load i32* @ld_Bfr, align 4*/
		Get_motion_code_0_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %0*/
	/*   %1 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		Get_motion_code_0_1_reg <= Get_motion_code_0_1;
		if (start == 1'b0 && ^(Get_motion_code_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %0*/
	/*   %2 = shl i32 %1, 1*/
		Get_motion_code_0_2 = (Get_motion_code_0_1 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %0*/
	/*   %2 = shl i32 %1, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		Get_motion_code_0_2_reg <= Get_motion_code_0_2;
		if (start == 1'b0 && ^(Get_motion_code_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %0*/
	/*   %3 = load i32* @ld_Incnt, align 4*/
		Get_motion_code_0_3 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %0*/
	/*   %3 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		Get_motion_code_0_3_reg <= Get_motion_code_0_3;
		if (start == 1'b0 && ^(Get_motion_code_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %0*/
	/*   %4 = add nsw i32 %3, -1*/
		Get_motion_code_0_4 = (Get_motion_code_0_3 + -32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %0*/
	/*   %4 = add nsw i32 %3, -1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		Get_motion_code_0_4_reg <= Get_motion_code_0_4;
		if (start == 1'b0 && ^(Get_motion_code_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %0*/
	/*   %5 = icmp slt i32 %3, 26*/
		Get_motion_code_0_5 = ($signed(Get_motion_code_0_3) < $signed(32'd26));
end
always @(posedge clk) begin
	/* Get_motion_code: %0*/
	/*   %5 = icmp slt i32 %3, 26*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		Get_motion_code_0_5_reg <= Get_motion_code_0_5;
		if (start == 1'b0 && ^(Get_motion_code_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %6*/
	/*   %7 = load i8** @ld_Rdptr, align 4*/
		Get_motion_code_6_7 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %6*/
	/*   %7 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_7)) begin
		Get_motion_code_6_7_reg <= Get_motion_code_6_7;
		if (start == 1'b0 && ^(Get_motion_code_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %6*/
	/*   %8 = icmp ult i8* %7, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_6_8 = (Get_motion_code_6_7 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %6*/
	/*   %8 = icmp ult i8* %7, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_7)) begin
		Get_motion_code_6_8_reg <= Get_motion_code_6_8;
		if (start == 1'b0 && ^(Get_motion_code_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_6_8_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %6*/
	/*   %9 = sub i32 25, %3*/
		Get_motion_code_6_9 = (32'd25 - Get_motion_code_0_3_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %6*/
	/*   %9 = sub i32 25, %3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		Get_motion_code_6_9_reg <= Get_motion_code_6_9;
		if (start == 1'b0 && ^(Get_motion_code_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_6_9_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %6*/
	/*   %10 = lshr i32 %9, 3*/
		Get_motion_code_6_10 = (Get_motion_code_6_9 >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %6*/
	/*   %10 = lshr i32 %9, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		Get_motion_code_6_10_reg <= Get_motion_code_6_10;
		if (start == 1'b0 && ^(Get_motion_code_6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_6_10_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %6*/
	/*   %11 = shl nuw i32 %10, 3*/
		Get_motion_code_6_11 = (Get_motion_code_6_10 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %6*/
	/*   %11 = shl nuw i32 %10, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		Get_motion_code_6_11_reg <= Get_motion_code_6_11;
		if (start == 1'b0 && ^(Get_motion_code_6_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_6_11_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %6*/
	/*   %12 = add i32 %3, %11*/
		Get_motion_code_6_12 = (Get_motion_code_0_3_reg + Get_motion_code_6_11);
end
always @(posedge clk) begin
	/* Get_motion_code: %6*/
	/*   %12 = add i32 %3, %11*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		Get_motion_code_6_12_reg <= Get_motion_code_6_12;
		if (start == 1'b0 && ^(Get_motion_code_6_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_6_12_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i.preheader*/
	/*   %13 = add i32 %3, 7*/
		Get_motion_code_preheader2ipreheader_13 = (Get_motion_code_0_3_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i.preheader*/
	/*   %13 = add i32 %3, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2ipreheader_8)) begin
		Get_motion_code_preheader2ipreheader_13_reg <= Get_motion_code_preheader2ipreheader_13;
		if (start == 1'b0 && ^(Get_motion_code_preheader2ipreheader_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2ipreheader_13_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i.preheader*/
	/*   %14 = sub i32 25, %3*/
		Get_motion_code_preheader2ipreheader_14 = (32'd25 - Get_motion_code_0_3_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i.preheader*/
	/*   %14 = sub i32 25, %3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2ipreheader_8)) begin
		Get_motion_code_preheader2ipreheader_14_reg <= Get_motion_code_preheader2ipreheader_14;
		if (start == 1'b0 && ^(Get_motion_code_preheader2ipreheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2ipreheader_14_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %15 = add i32 %3, 7*/
		Get_motion_code_preheaderipreheader_15 = (Get_motion_code_0_3_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %15 = add i32 %3, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_9)) begin
		Get_motion_code_preheaderipreheader_15_reg <= Get_motion_code_preheaderipreheader_15;
		if (start == 1'b0 && ^(Get_motion_code_preheaderipreheader_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderipreheader_15_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %16 = sub i32 25, %3*/
		Get_motion_code_preheaderipreheader_16 = (32'd25 - Get_motion_code_0_3_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %16 = sub i32 25, %3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_9)) begin
		Get_motion_code_preheaderipreheader_16_reg <= Get_motion_code_preheaderipreheader_16;
		if (start == 1'b0 && ^(Get_motion_code_preheaderipreheader_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderipreheader_16_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %indvar66 = phi i32 [ 0, %.preheader.i.preheader ], [ %indvar.next67, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_9) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi_indvar66 = 32'd0;
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %indvar66 = phi i32 [ 0, %.preheader.i.preheader ], [ %indvar.next67, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_12) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi_26_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi_indvar66 = Get_motion_code_preheaderi_indvarnext67_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %indvar66 = phi i32 [ 0, %.preheader.i.preheader ], [ %indvar.next67, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_9) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi_indvar66_reg <= Get_motion_code_preheaderi_indvar66;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_indvar66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_indvar66_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %indvar66 = phi i32 [ 0, %.preheader.i.preheader ], [ %indvar.next67, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_12) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi_26_reg == 1'd1))) begin
		Get_motion_code_preheaderi_indvar66_reg <= Get_motion_code_preheaderi_indvar66;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_indvar66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_indvar66_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %17 = phi i32 [ %2, %.preheader.i.preheader ], [ %25, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_9) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi_17 = Get_motion_code_0_2_reg;
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %17 = phi i32 [ %2, %.preheader.i.preheader ], [ %25, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_12) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi_26_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi_17 = Get_motion_code_preheaderi_25;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %17 = phi i32 [ %2, %.preheader.i.preheader ], [ %25, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_9) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi_17_reg <= Get_motion_code_preheaderi_17;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_17_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %17 = phi i32 [ %2, %.preheader.i.preheader ], [ %25, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_12) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi_26_reg == 1'd1))) begin
		Get_motion_code_preheaderi_17_reg <= Get_motion_code_preheaderi_17;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_17_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %scevgep68 = getelementptr i8* %7, i32 %indvar66*/
		Get_motion_code_preheaderi_scevgep68 = (Get_motion_code_6_7_reg + (1 * Get_motion_code_preheaderi_indvar66_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %scevgep68 = getelementptr i8* %7, i32 %indvar66*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_10)) begin
		Get_motion_code_preheaderi_scevgep68_reg <= Get_motion_code_preheaderi_scevgep68;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_scevgep68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_scevgep68_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %18 = shl i32 %indvar66, 3*/
		Get_motion_code_preheaderi_18 = (Get_motion_code_preheaderi_indvar66_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %18 = shl i32 %indvar66, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_10)) begin
		Get_motion_code_preheaderi_18_reg <= Get_motion_code_preheaderi_18;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_18_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %19 = add i32 %15, %18*/
		Get_motion_code_preheaderi_19 = (Get_motion_code_preheaderipreheader_15_reg + Get_motion_code_preheaderi_18);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %19 = add i32 %15, %18*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_10)) begin
		Get_motion_code_preheaderi_19_reg <= Get_motion_code_preheaderi_19;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_19_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheaderi_20 = Get_motion_code_preheaderi_20_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %20 = mul i32 %indvar66, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_11)) begin
		Get_motion_code_preheaderi_20_reg <= Get_motion_code_preheaderi_20;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_20_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %20 = mul i32 %indvar66, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_11)) begin
		Get_motion_code_preheaderi_20_reg <= Get_motion_code_preheaderi_20;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_20_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %21 = add i32 %16, %20*/
		Get_motion_code_preheaderi_21 = (Get_motion_code_preheaderipreheader_16_reg + Get_motion_code_preheaderi_20);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %21 = add i32 %16, %20*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_11)) begin
		Get_motion_code_preheaderi_21_reg <= Get_motion_code_preheaderi_21;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_21_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %22 = load i8* %scevgep68, align 1*/
		Get_motion_code_preheaderi_22 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %22 = load i8* %scevgep68, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_12)) begin
		Get_motion_code_preheaderi_22_reg <= Get_motion_code_preheaderi_22;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_22_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %23 = zext i8 %22 to i32*/
		Get_motion_code_preheaderi_23 = Get_motion_code_preheaderi_22;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %23 = zext i8 %22 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_12)) begin
		Get_motion_code_preheaderi_23_reg <= Get_motion_code_preheaderi_23;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_23_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %24 = shl i32 %23, %21*/
		Get_motion_code_preheaderi_24 = (Get_motion_code_preheaderi_23 <<< (Get_motion_code_preheaderi_21_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %24 = shl i32 %23, %21*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_12)) begin
		Get_motion_code_preheaderi_24_reg <= Get_motion_code_preheaderi_24;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_24_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %25 = or i32 %17, %24*/
		Get_motion_code_preheaderi_25 = (Get_motion_code_preheaderi_17_reg | Get_motion_code_preheaderi_24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %25 = or i32 %17, %24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_12)) begin
		Get_motion_code_preheaderi_25_reg <= Get_motion_code_preheaderi_25;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_25_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %26 = icmp slt i32 %19, 25*/
		Get_motion_code_preheaderi_26 = ($signed(Get_motion_code_preheaderi_19) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %26 = icmp slt i32 %19, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_10)) begin
		Get_motion_code_preheaderi_26_reg <= Get_motion_code_preheaderi_26;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_26_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %indvar.next67 = add i32 %indvar66, 1*/
		Get_motion_code_preheaderi_indvarnext67 = (Get_motion_code_preheaderi_indvar66_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %indvar.next67 = add i32 %indvar66, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_10)) begin
		Get_motion_code_preheaderi_indvarnext67_reg <= Get_motion_code_preheaderi_indvarnext67;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_indvarnext67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_indvarnext67_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %indvar74 = phi i32 [ 0, %.preheader2.i.preheader ], [ %indvar.next75, %Fill_Buffer.exit.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2ipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i_indvar74 = 32'd0;
	end
	/* Get_motion_code: %.preheader2.i*/
	/*   %indvar74 = phi i32 [ 0, %.preheader2.i.preheader ], [ %indvar.next75, %Fill_Buffer.exit.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii_40_reg == 1'd1))) */ begin
		Get_motion_code_preheader2i_indvar74 = Get_motion_code_Fill_Bufferexitii_indvarnext75_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %indvar74 = phi i32 [ 0, %.preheader2.i.preheader ], [ %indvar.next75, %Fill_Buffer.exit.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2ipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i_indvar74_reg <= Get_motion_code_preheader2i_indvar74;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i_indvar74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i_indvar74_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i*/
	/*   %indvar74 = phi i32 [ 0, %.preheader2.i.preheader ], [ %indvar.next75, %Fill_Buffer.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii_40_reg == 1'd1))) begin
		Get_motion_code_preheader2i_indvar74_reg <= Get_motion_code_preheader2i_indvar74;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i_indvar74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i_indvar74_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %27 = phi i32 [ %2, %.preheader2.i.preheader ], [ %39, %Fill_Buffer.exit.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2ipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i_27 = Get_motion_code_0_2_reg;
	end
	/* Get_motion_code: %.preheader2.i*/
	/*   %27 = phi i32 [ %2, %.preheader2.i.preheader ], [ %39, %Fill_Buffer.exit.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii_40_reg == 1'd1))) */ begin
		Get_motion_code_preheader2i_27 = Get_motion_code_Fill_Bufferexitii_39;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %27 = phi i32 [ %2, %.preheader2.i.preheader ], [ %39, %Fill_Buffer.exit.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2ipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i_27_reg <= Get_motion_code_preheader2i_27;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i_27_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i*/
	/*   %27 = phi i32 [ %2, %.preheader2.i.preheader ], [ %39, %Fill_Buffer.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii_40_reg == 1'd1))) begin
		Get_motion_code_preheader2i_27_reg <= Get_motion_code_preheader2i_27;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i_27_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %.pr8.i = phi i8* [ %7, %.preheader2.i.preheader ], [ %35, %Fill_Buffer.exit.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2ipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i_pr8i = Get_motion_code_6_7_reg;
	end
	/* Get_motion_code: %.preheader2.i*/
	/*   %.pr8.i = phi i8* [ %7, %.preheader2.i.preheader ], [ %35, %Fill_Buffer.exit.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii_40_reg == 1'd1))) */ begin
		Get_motion_code_preheader2i_pr8i = Get_motion_code_Fill_Bufferexitii_35_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %.pr8.i = phi i8* [ %7, %.preheader2.i.preheader ], [ %35, %Fill_Buffer.exit.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2ipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i_pr8i_reg <= Get_motion_code_preheader2i_pr8i;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i_pr8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i_pr8i_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i*/
	/*   %.pr8.i = phi i8* [ %7, %.preheader2.i.preheader ], [ %35, %Fill_Buffer.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii_40_reg == 1'd1))) begin
		Get_motion_code_preheader2i_pr8i_reg <= Get_motion_code_preheader2i_pr8i;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i_pr8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i_pr8i_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %28 = shl i32 %indvar74, 3*/
		Get_motion_code_preheader2i_28 = (Get_motion_code_preheader2i_indvar74_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %28 = shl i32 %indvar74, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i_13)) begin
		Get_motion_code_preheader2i_28_reg <= Get_motion_code_preheader2i_28;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i_28_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %29 = add i32 %13, %28*/
		Get_motion_code_preheader2i_29 = (Get_motion_code_preheader2ipreheader_13_reg + Get_motion_code_preheader2i_28);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %29 = add i32 %13, %28*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i_13)) begin
		Get_motion_code_preheader2i_29_reg <= Get_motion_code_preheader2i_29;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i_29_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader2i_30 = Get_motion_code_preheader2i_30_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %30 = mul i32 %indvar74, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i_14)) begin
		Get_motion_code_preheader2i_30_reg <= Get_motion_code_preheader2i_30;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i_30_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i*/
	/*   %30 = mul i32 %indvar74, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i_14)) begin
		Get_motion_code_preheader2i_30_reg <= Get_motion_code_preheader2i_30;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i_30_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %31 = add i32 %14, %30*/
		Get_motion_code_preheader2i_31 = (Get_motion_code_preheader2ipreheader_14_reg + Get_motion_code_preheader2i_30);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %31 = add i32 %14, %30*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i_14)) begin
		Get_motion_code_preheader2i_31_reg <= Get_motion_code_preheader2i_31;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i_31_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %32 = icmp ult i8* %.pr8.i, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader2i_32 = (Get_motion_code_preheader2i_pr8i_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %32 = icmp ult i8* %.pr8.i, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i_13)) begin
		Get_motion_code_preheader2i_32_reg <= Get_motion_code_preheader2i_32;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i_32_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %indvar69 = phi i32 [ 0, %.preheader1.i.preheader ], [ %indvar.next70, %33 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_15) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i_indvar69 = 32'd0;
	end
	/* Get_motion_code: %.preheader1.i*/
	/*   %indvar69 = phi i32 [ 0, %.preheader1.i.preheader ], [ %indvar.next70, %33 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__33_20) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_preheader1i_indvar69 = Get_motion_code_33_indvarnext70_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %indvar69 = phi i32 [ 0, %.preheader1.i.preheader ], [ %indvar.next70, %33 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_15) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i_indvar69_reg <= Get_motion_code_preheader1i_indvar69;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_indvar69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_indvar69_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i*/
	/*   %indvar69 = phi i32 [ 0, %.preheader1.i.preheader ], [ %indvar.next70, %33 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__33_20) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i_indvar69_reg <= Get_motion_code_preheader1i_indvar69;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_indvar69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_indvar69_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %exitcond71 = icmp eq i32 %indvar69, 2048*/
		Get_motion_code_preheader1i_exitcond71 = (Get_motion_code_preheader1i_indvar69_reg == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %exitcond71 = icmp eq i32 %indvar69, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i_16)) begin
		Get_motion_code_preheader1i_exitcond71_reg <= Get_motion_code_preheader1i_exitcond71;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_exitcond71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_exitcond71_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %33*/
	/*   %p2.0.i.i.i.i = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar69*/
		Get_motion_code_33_p20iiii = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_preheader1i_indvar69_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %33*/
	/*   %p2.0.i.i.i.i = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar69*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_17)) begin
		Get_motion_code_33_p20iiii_reg <= Get_motion_code_33_p20iiii;
		if (start == 1'b0 && ^(Get_motion_code_33_p20iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_33_p20iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %33*/
	/*   %p1.0.i.i.i.i = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar69*/
		Get_motion_code_33_p10iiii = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_preheader1i_indvar69_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %33*/
	/*   %p1.0.i.i.i.i = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar69*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_17)) begin
		Get_motion_code_33_p10iiii_reg <= Get_motion_code_33_p10iiii;
		if (start == 1'b0 && ^(Get_motion_code_33_p10iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_33_p10iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %33*/
	/*   %34 = load i8* %p2.0.i.i.i.i, align 1*/
		Get_motion_code_33_34 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %33*/
	/*   %34 = load i8* %p2.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_19)) begin
		Get_motion_code_33_34_reg <= Get_motion_code_33_34;
		if (start == 1'b0 && ^(Get_motion_code_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_33_34_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %33*/
	/*   %indvar.next70 = add i32 %indvar69, 1*/
		Get_motion_code_33_indvarnext70 = (Get_motion_code_preheader1i_indvar69_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %33*/
	/*   %indvar.next70 = add i32 %indvar69, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_17)) begin
		Get_motion_code_33_indvarnext70_reg <= Get_motion_code_33_indvarnext70;
		if (start == 1'b0 && ^(Get_motion_code_33_indvarnext70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_33_indvarnext70_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %.pr9.i = phi i8* [ %.pr8.i, %.preheader2.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i_14) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader2i_32_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitii_pr9i = Get_motion_code_preheader2i_pr8i_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %.pr9.i = phi i8* [ %.pr8.i, %.preheader2.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiiloopexit_21) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexitii_pr9i = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %.pr9.i = phi i8* [ %.pr8.i, %.preheader2.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i_14) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader2i_32_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitii_pr9i_reg <= Get_motion_code_Fill_Bufferexitii_pr9i;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii_pr9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii_pr9i_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %.pr9.i = phi i8* [ %.pr8.i, %.preheader2.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiiloopexit_21) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexitii_pr9i_reg <= Get_motion_code_Fill_Bufferexitii_pr9i;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii_pr9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii_pr9i_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %35 = getelementptr inbounds i8* %.pr9.i, i32 1*/
		Get_motion_code_Fill_Bufferexitii_35 = (Get_motion_code_Fill_Bufferexitii_pr9i_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %35 = getelementptr inbounds i8* %.pr9.i, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_22)) begin
		Get_motion_code_Fill_Bufferexitii_35_reg <= Get_motion_code_Fill_Bufferexitii_35;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii_35_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %36 = load i8* %.pr9.i, align 1*/
		Get_motion_code_Fill_Bufferexitii_36 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %36 = load i8* %.pr9.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24)) begin
		Get_motion_code_Fill_Bufferexitii_36_reg <= Get_motion_code_Fill_Bufferexitii_36;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii_36_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %37 = zext i8 %36 to i32*/
		Get_motion_code_Fill_Bufferexitii_37 = Get_motion_code_Fill_Bufferexitii_36;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %37 = zext i8 %36 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24)) begin
		Get_motion_code_Fill_Bufferexitii_37_reg <= Get_motion_code_Fill_Bufferexitii_37;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii_37_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %38 = shl i32 %37, %31*/
		Get_motion_code_Fill_Bufferexitii_38 = (Get_motion_code_Fill_Bufferexitii_37 <<< (Get_motion_code_preheader2i_31_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %38 = shl i32 %37, %31*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24)) begin
		Get_motion_code_Fill_Bufferexitii_38_reg <= Get_motion_code_Fill_Bufferexitii_38;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii_38_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %39 = or i32 %27, %38*/
		Get_motion_code_Fill_Bufferexitii_39 = (Get_motion_code_preheader2i_27_reg | Get_motion_code_Fill_Bufferexitii_38);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %39 = or i32 %27, %38*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_24)) begin
		Get_motion_code_Fill_Bufferexitii_39_reg <= Get_motion_code_Fill_Bufferexitii_39;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii_39_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %40 = icmp slt i32 %29, 25*/
		Get_motion_code_Fill_Bufferexitii_40 = ($signed(Get_motion_code_preheader2i_29_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %40 = icmp slt i32 %29, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_22)) begin
		Get_motion_code_Fill_Bufferexitii_40_reg <= Get_motion_code_Fill_Bufferexitii_40;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii_40_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %indvar.next75 = add i32 %indvar74, 1*/
		Get_motion_code_Fill_Bufferexitii_indvarnext75 = (Get_motion_code_preheader2i_indvar74_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %indvar.next75 = add i32 %indvar74, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_22)) begin
		Get_motion_code_Fill_Bufferexitii_indvarnext75_reg <= Get_motion_code_Fill_Bufferexitii_indvarnext75;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii_indvarnext75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii_indvarnext75_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %41 = add nuw nsw i32 %10, 1*/
		Get_motion_code_loopexiti_41 = (Get_motion_code_6_10_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %41 = add nuw nsw i32 %10, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_25)) begin
		Get_motion_code_loopexiti_41_reg <= Get_motion_code_loopexiti_41;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti_41_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %scevgep.i = getelementptr i8* %7, i32 %41*/
		Get_motion_code_loopexiti_scevgepi = (Get_motion_code_6_7_reg + (1 * Get_motion_code_loopexiti_41_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %scevgep.i = getelementptr i8* %7, i32 %41*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_26)) begin
		Get_motion_code_loopexiti_scevgepi_reg <= Get_motion_code_loopexiti_scevgepi;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti_scevgepi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti_scevgepi_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit3.i*/
	/*   %storemerge1.i = phi i8* [ %scevgep.i, %.loopexit.i ], [ %35, %.loopexit3.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_26) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i_storemerge1i = Get_motion_code_loopexiti_scevgepi;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   %storemerge1.i = phi i8* [ %scevgep.i, %.loopexit.i ], [ %35, %.loopexit3.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3iloopexit_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit3i_storemerge1i = Get_motion_code_Fill_Bufferexitii_35_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit3.i*/
	/*   %storemerge1.i = phi i8* [ %scevgep.i, %.loopexit.i ], [ %35, %.loopexit3.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_26) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i_storemerge1i_reg <= Get_motion_code_loopexit3i_storemerge1i;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i_storemerge1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i_storemerge1i_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   %storemerge1.i = phi i8* [ %scevgep.i, %.loopexit.i ], [ %35, %.loopexit3.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3iloopexit_27) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i_storemerge1i_reg <= Get_motion_code_loopexit3i_storemerge1i;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i_storemerge1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i_storemerge1i_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit3.i*/
	/*   %storemerge.i = phi i32 [ %25, %.loopexit.i ], [ %39, %.loopexit3.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_26) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i_storemergei = Get_motion_code_preheaderi_25_reg;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   %storemerge.i = phi i32 [ %25, %.loopexit.i ], [ %39, %.loopexit3.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3iloopexit_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit3i_storemergei = Get_motion_code_Fill_Bufferexitii_39_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit3.i*/
	/*   %storemerge.i = phi i32 [ %25, %.loopexit.i ], [ %39, %.loopexit3.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_26) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i_storemergei_reg <= Get_motion_code_loopexit3i_storemergei;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i_storemergei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i_storemergei_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   %storemerge.i = phi i32 [ %25, %.loopexit.i ], [ %39, %.loopexit3.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3iloopexit_27) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i_storemergei_reg <= Get_motion_code_loopexit3i_storemergei;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i_storemergei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i_storemergei_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit3.i*/
	/*   %Incnt.2.i.i = add i32 %12, 7*/
		Get_motion_code_loopexit3i_Incnt2ii = (Get_motion_code_6_12_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit3.i*/
	/*   %Incnt.2.i.i = add i32 %12, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_28)) begin
		Get_motion_code_loopexit3i_Incnt2ii_reg <= Get_motion_code_loopexit3i_Incnt2ii;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i_Incnt2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i_Incnt2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit*/
	/*   %42 = phi i32 [ %4, %0 ], [ %Incnt.2.i.i, %.loopexit3.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__0_4) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_0_5_reg == 1'd0))) begin
		Get_motion_code_Get_Bitsexit_42 = Get_motion_code_0_4_reg;
	end
	/* Get_motion_code: %Get_Bits.exit*/
	/*   %42 = phi i32 [ %4, %0 ], [ %Incnt.2.i.i, %.loopexit3.i ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_30) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Get_Bitsexit_42 = Get_motion_code_loopexit3i_Incnt2ii_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit*/
	/*   %42 = phi i32 [ %4, %0 ], [ %Incnt.2.i.i, %.loopexit3.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__0_4) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_0_5_reg == 1'd0))) begin
		Get_motion_code_Get_Bitsexit_42_reg <= Get_motion_code_Get_Bitsexit_42;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit_42_reg"); $finish; end
	end
	/* Get_motion_code: %Get_Bits.exit*/
	/*   %42 = phi i32 [ %4, %0 ], [ %Incnt.2.i.i, %.loopexit3.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_30) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Get_Bitsexit_42_reg <= Get_motion_code_Get_Bitsexit_42;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit_42_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit*/
	/*   %43 = phi i32 [ %2, %0 ], [ %storemerge.i, %.loopexit3.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__0_4) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_0_5_reg == 1'd0))) begin
		Get_motion_code_Get_Bitsexit_43 = Get_motion_code_0_2_reg;
	end
	/* Get_motion_code: %Get_Bits.exit*/
	/*   %43 = phi i32 [ %2, %0 ], [ %storemerge.i, %.loopexit3.i ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_30) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Get_Bitsexit_43 = Get_motion_code_loopexit3i_storemergei_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit*/
	/*   %43 = phi i32 [ %2, %0 ], [ %storemerge.i, %.loopexit3.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__0_4) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_0_5_reg == 1'd0))) begin
		Get_motion_code_Get_Bitsexit_43_reg <= Get_motion_code_Get_Bitsexit_43;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit_43_reg"); $finish; end
	end
	/* Get_motion_code: %Get_Bits.exit*/
	/*   %43 = phi i32 [ %2, %0 ], [ %storemerge.i, %.loopexit3.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_30) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Get_Bitsexit_43_reg <= Get_motion_code_Get_Bitsexit_43;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit_43_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit*/
	/*   %44 = icmp sgt i32 %1, -1*/
		Get_motion_code_Get_Bitsexit_44 = ($signed(Get_motion_code_0_1_reg) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit*/
	/*   %44 = icmp sgt i32 %1, -1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit_31)) begin
		Get_motion_code_Get_Bitsexit_44_reg <= Get_motion_code_Get_Bitsexit_44;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit_44_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %45*/
	/*   %46 = lshr i32 %43, 23*/
		Get_motion_code_45_46 = (Get_motion_code_Get_Bitsexit_43_reg >>> (32'd23 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %45*/
	/*   %46 = lshr i32 %43, 23*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__45_32)) begin
		Get_motion_code_45_46_reg <= Get_motion_code_45_46;
		if (start == 1'b0 && ^(Get_motion_code_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_45_46_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %45*/
	/*   %47 = icmp ugt i32 %43, 536870911*/
		Get_motion_code_45_47 = (Get_motion_code_Get_Bitsexit_43_reg > 32'd536870911);
end
always @(posedge clk) begin
	/* Get_motion_code: %45*/
	/*   %47 = icmp ugt i32 %43, 536870911*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__45_32)) begin
		Get_motion_code_45_47_reg <= Get_motion_code_45_47;
		if (start == 1'b0 && ^(Get_motion_code_45_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_45_47_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %48*/
	/*   %49 = lshr i32 %43, 29*/
		Get_motion_code_48_49 = (Get_motion_code_Get_Bitsexit_43_reg >>> (32'd29 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %48*/
	/*   %49 = lshr i32 %43, 29*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_33)) begin
		Get_motion_code_48_49_reg <= Get_motion_code_48_49;
		if (start == 1'b0 && ^(Get_motion_code_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_48_49_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %48*/
	/*   %50 = getelementptr inbounds [8 x [2 x i8]]* @MVtab0, i32 0, i32 %49, i32 1*/
		Get_motion_code_48_50 = (1'd0 | ((2 * Get_motion_code_48_49) + (1 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %48*/
	/*   %50 = getelementptr inbounds [8 x [2 x i8]]* @MVtab0, i32 0, i32 %49, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_33)) begin
		Get_motion_code_48_50_reg <= Get_motion_code_48_50;
		if (start == 1'b0 && ^(Get_motion_code_48_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_48_50_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %48*/
	/*   %51 = load i8* %50, align 1*/
		Get_motion_code_48_51 = MVtab0_out_a;
end
always @(posedge clk) begin
	/* Get_motion_code: %48*/
	/*   %51 = load i8* %50, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		Get_motion_code_48_51_reg <= Get_motion_code_48_51;
		if (start == 1'b0 && ^(Get_motion_code_48_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_48_51_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %48*/
	/*   %52 = sext i8 %51 to i32*/
		Get_motion_code_48_52 = $signed(Get_motion_code_48_51);
end
always @(posedge clk) begin
	/* Get_motion_code: %48*/
	/*   %52 = sext i8 %51 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		Get_motion_code_48_52_reg <= Get_motion_code_48_52;
		if (start == 1'b0 && ^(Get_motion_code_48_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_48_52_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %48*/
	/*   %53 = shl i32 %43, %52*/
		Get_motion_code_48_53 = (Get_motion_code_Get_Bitsexit_43_reg <<< (Get_motion_code_48_52 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %48*/
	/*   %53 = shl i32 %43, %52*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		Get_motion_code_48_53_reg <= Get_motion_code_48_53;
		if (start == 1'b0 && ^(Get_motion_code_48_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_48_53_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %48*/
	/*   %54 = sub nsw i32 %42, %52*/
		Get_motion_code_48_54 = (Get_motion_code_Get_Bitsexit_42_reg - Get_motion_code_48_52);
end
always @(posedge clk) begin
	/* Get_motion_code: %48*/
	/*   %54 = sub nsw i32 %42, %52*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		Get_motion_code_48_54_reg <= Get_motion_code_48_54;
		if (start == 1'b0 && ^(Get_motion_code_48_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_48_54_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %48*/
	/*   %55 = icmp slt i32 %54, 25*/
		Get_motion_code_48_55 = ($signed(Get_motion_code_48_54) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %48*/
	/*   %55 = icmp slt i32 %54, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		Get_motion_code_48_55_reg <= Get_motion_code_48_55;
		if (start == 1'b0 && ^(Get_motion_code_48_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_48_55_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %56*/
	/*   %57 = load i8** @ld_Rdptr, align 4*/
		Get_motion_code_56_57 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %56*/
	/*   %57 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__56_38)) begin
		Get_motion_code_56_57_reg <= Get_motion_code_56_57;
		if (start == 1'b0 && ^(Get_motion_code_56_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_56_57_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %56*/
	/*   %58 = icmp ult i8* %57, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_56_58 = (Get_motion_code_56_57 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %56*/
	/*   %58 = icmp ult i8* %57, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__56_38)) begin
		Get_motion_code_56_58_reg <= Get_motion_code_56_58;
		if (start == 1'b0 && ^(Get_motion_code_56_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_56_58_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %56*/
	/*   %59 = add nsw i32 %52, 24*/
		Get_motion_code_56_59 = (Get_motion_code_48_52_reg + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %56*/
	/*   %59 = add nsw i32 %52, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__56_36)) begin
		Get_motion_code_56_59_reg <= Get_motion_code_56_59;
		if (start == 1'b0 && ^(Get_motion_code_56_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_56_59_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %56*/
	/*   %60 = sub i32 %59, %42*/
		Get_motion_code_56_60 = (Get_motion_code_56_59 - Get_motion_code_Get_Bitsexit_42_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %56*/
	/*   %60 = sub i32 %59, %42*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__56_36)) begin
		Get_motion_code_56_60_reg <= Get_motion_code_56_60;
		if (start == 1'b0 && ^(Get_motion_code_56_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_56_60_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22.preheader*/
	/*   %61 = and i32 %60, -8*/
		Get_motion_code_preheader22preheader_61 = (Get_motion_code_56_60_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22.preheader*/
	/*   %61 = and i32 %60, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader22preheader_39)) begin
		Get_motion_code_preheader22preheader_61_reg <= Get_motion_code_preheader22preheader_61;
		if (start == 1'b0 && ^(Get_motion_code_preheader22preheader_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22preheader_61_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22.preheader*/
	/*   %62 = add i32 %42, 8*/
		Get_motion_code_preheader22preheader_62 = (Get_motion_code_Get_Bitsexit_42_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22.preheader*/
	/*   %62 = add i32 %42, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader22preheader_39)) begin
		Get_motion_code_preheader22preheader_62_reg <= Get_motion_code_preheader22preheader_62;
		if (start == 1'b0 && ^(Get_motion_code_preheader22preheader_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22preheader_62_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22.preheader*/
	/*   %63 = sext i8 %51 to i32*/
		Get_motion_code_preheader22preheader_63 = $signed(Get_motion_code_48_51_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22.preheader*/
	/*   %63 = sext i8 %51 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader22preheader_39)) begin
		Get_motion_code_preheader22preheader_63_reg <= Get_motion_code_preheader22preheader_63;
		if (start == 1'b0 && ^(Get_motion_code_preheader22preheader_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22preheader_63_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22.preheader*/
	/*   %64 = sub i32 %62, %63*/
		Get_motion_code_preheader22preheader_64 = (Get_motion_code_preheader22preheader_62 - Get_motion_code_preheader22preheader_63);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22.preheader*/
	/*   %64 = sub i32 %62, %63*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader22preheader_39)) begin
		Get_motion_code_preheader22preheader_64_reg <= Get_motion_code_preheader22preheader_64;
		if (start == 1'b0 && ^(Get_motion_code_preheader22preheader_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22preheader_64_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22.preheader*/
	/*   %65 = add nsw i32 %63, 24*/
		Get_motion_code_preheader22preheader_65 = (Get_motion_code_preheader22preheader_63 + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22.preheader*/
	/*   %65 = add nsw i32 %63, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader22preheader_39)) begin
		Get_motion_code_preheader22preheader_65_reg <= Get_motion_code_preheader22preheader_65;
		if (start == 1'b0 && ^(Get_motion_code_preheader22preheader_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22preheader_65_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22.preheader*/
	/*   %66 = sub i32 %65, %42*/
		Get_motion_code_preheader22preheader_66 = (Get_motion_code_preheader22preheader_65 - Get_motion_code_Get_Bitsexit_42_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22.preheader*/
	/*   %66 = sub i32 %65, %42*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader22preheader_39)) begin
		Get_motion_code_preheader22preheader_66_reg <= Get_motion_code_preheader22preheader_66;
		if (start == 1'b0 && ^(Get_motion_code_preheader22preheader_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22preheader_66_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader*/
	/*   %67 = lshr i32 %60, 3*/
		Get_motion_code_preheader_67 = (Get_motion_code_56_60_reg >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader*/
	/*   %67 = lshr i32 %60, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader_40)) begin
		Get_motion_code_preheader_67_reg <= Get_motion_code_preheader_67;
		if (start == 1'b0 && ^(Get_motion_code_preheader_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader_67_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader*/
	/*   %68 = shl nuw i32 %67, 3*/
		Get_motion_code_preheader_68 = (Get_motion_code_preheader_67 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader*/
	/*   %68 = shl nuw i32 %67, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader_40)) begin
		Get_motion_code_preheader_68_reg <= Get_motion_code_preheader_68;
		if (start == 1'b0 && ^(Get_motion_code_preheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader_68_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader*/
	/*   %69 = add i32 %42, 8*/
		Get_motion_code_preheader_69 = (Get_motion_code_Get_Bitsexit_42_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader*/
	/*   %69 = add i32 %42, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader_40)) begin
		Get_motion_code_preheader_69_reg <= Get_motion_code_preheader_69;
		if (start == 1'b0 && ^(Get_motion_code_preheader_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader_69_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader*/
	/*   %70 = sext i8 %51 to i32*/
		Get_motion_code_preheader_70 = $signed(Get_motion_code_48_51_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader*/
	/*   %70 = sext i8 %51 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader_40)) begin
		Get_motion_code_preheader_70_reg <= Get_motion_code_preheader_70;
		if (start == 1'b0 && ^(Get_motion_code_preheader_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader_70_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader*/
	/*   %71 = sub i32 %69, %70*/
		Get_motion_code_preheader_71 = (Get_motion_code_preheader_69 - Get_motion_code_preheader_70);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader*/
	/*   %71 = sub i32 %69, %70*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader_40)) begin
		Get_motion_code_preheader_71_reg <= Get_motion_code_preheader_71;
		if (start == 1'b0 && ^(Get_motion_code_preheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader_71_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader*/
	/*   %72 = add nsw i32 %70, 24*/
		Get_motion_code_preheader_72 = (Get_motion_code_preheader_70 + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader*/
	/*   %72 = add nsw i32 %70, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader_40)) begin
		Get_motion_code_preheader_72_reg <= Get_motion_code_preheader_72;
		if (start == 1'b0 && ^(Get_motion_code_preheader_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader_72_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader*/
	/*   %73 = sub i32 %72, %42*/
		Get_motion_code_preheader_73 = (Get_motion_code_preheader_72 - Get_motion_code_Get_Bitsexit_42_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader*/
	/*   %73 = sub i32 %72, %42*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader_40)) begin
		Get_motion_code_preheader_73_reg <= Get_motion_code_preheader_73;
		if (start == 1'b0 && ^(Get_motion_code_preheader_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader_73_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %74*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %74 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader_40) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_74_indvar17 = 32'd0;
	end
	/* Get_motion_code: %74*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %74 ], [ 0, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB__74_43) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_74_84_reg == 1'd1))) */ begin
		Get_motion_code_74_indvar17 = Get_motion_code_74_indvarnext18_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %74 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader_40) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_74_indvar17_reg <= Get_motion_code_74_indvar17;
		if (start == 1'b0 && ^(Get_motion_code_74_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_indvar17_reg"); $finish; end
	end
	/* Get_motion_code: %74*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %74 ], [ 0, %.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__74_43) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_74_84_reg == 1'd1))) begin
		Get_motion_code_74_indvar17_reg <= Get_motion_code_74_indvar17;
		if (start == 1'b0 && ^(Get_motion_code_74_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_indvar17_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %74*/
	/*   %75 = phi i32 [ %83, %74 ], [ %53, %.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader_40) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_74_75 = Get_motion_code_48_53_reg;
	end
	/* Get_motion_code: %74*/
	/*   %75 = phi i32 [ %83, %74 ], [ %53, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB__74_43) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_74_84_reg == 1'd1))) */ begin
		Get_motion_code_74_75 = Get_motion_code_74_83;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %75 = phi i32 [ %83, %74 ], [ %53, %.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader_40) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_74_75_reg <= Get_motion_code_74_75;
		if (start == 1'b0 && ^(Get_motion_code_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_75_reg"); $finish; end
	end
	/* Get_motion_code: %74*/
	/*   %75 = phi i32 [ %83, %74 ], [ %53, %.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__74_43) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_74_84_reg == 1'd1))) begin
		Get_motion_code_74_75_reg <= Get_motion_code_74_75;
		if (start == 1'b0 && ^(Get_motion_code_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_75_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %74*/
	/*   %scevgep19 = getelementptr i8* %57, i32 %indvar17*/
		Get_motion_code_74_scevgep19 = (Get_motion_code_56_57_reg + (1 * Get_motion_code_74_indvar17_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %scevgep19 = getelementptr i8* %57, i32 %indvar17*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_41)) begin
		Get_motion_code_74_scevgep19_reg <= Get_motion_code_74_scevgep19;
		if (start == 1'b0 && ^(Get_motion_code_74_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_scevgep19_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %74*/
	/*   %76 = shl i32 %indvar17, 3*/
		Get_motion_code_74_76 = (Get_motion_code_74_indvar17_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %76 = shl i32 %indvar17, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_41)) begin
		Get_motion_code_74_76_reg <= Get_motion_code_74_76;
		if (start == 1'b0 && ^(Get_motion_code_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_76_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %74*/
	/*   %77 = add i32 %71, %76*/
		Get_motion_code_74_77 = (Get_motion_code_preheader_71_reg + Get_motion_code_74_76);
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %77 = add i32 %71, %76*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_41)) begin
		Get_motion_code_74_77_reg <= Get_motion_code_74_77;
		if (start == 1'b0 && ^(Get_motion_code_74_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_77_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_74_78 = Get_motion_code_74_78_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %78 = mul i32 %indvar17, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_42)) begin
		Get_motion_code_74_78_reg <= Get_motion_code_74_78;
		if (start == 1'b0 && ^(Get_motion_code_74_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_78_reg"); $finish; end
	end
	/* Get_motion_code: %74*/
	/*   %78 = mul i32 %indvar17, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_42)) begin
		Get_motion_code_74_78_reg <= Get_motion_code_74_78;
		if (start == 1'b0 && ^(Get_motion_code_74_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_78_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %74*/
	/*   %79 = add i32 %73, %78*/
		Get_motion_code_74_79 = (Get_motion_code_preheader_73_reg + Get_motion_code_74_78);
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %79 = add i32 %73, %78*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_42)) begin
		Get_motion_code_74_79_reg <= Get_motion_code_74_79;
		if (start == 1'b0 && ^(Get_motion_code_74_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_79_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %74*/
	/*   %80 = load i8* %scevgep19, align 1*/
		Get_motion_code_74_80 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %80 = load i8* %scevgep19, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_43)) begin
		Get_motion_code_74_80_reg <= Get_motion_code_74_80;
		if (start == 1'b0 && ^(Get_motion_code_74_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_80_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %74*/
	/*   %81 = zext i8 %80 to i32*/
		Get_motion_code_74_81 = Get_motion_code_74_80;
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %81 = zext i8 %80 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_43)) begin
		Get_motion_code_74_81_reg <= Get_motion_code_74_81;
		if (start == 1'b0 && ^(Get_motion_code_74_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_81_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %74*/
	/*   %82 = shl i32 %81, %79*/
		Get_motion_code_74_82 = (Get_motion_code_74_81 <<< (Get_motion_code_74_79_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %82 = shl i32 %81, %79*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_43)) begin
		Get_motion_code_74_82_reg <= Get_motion_code_74_82;
		if (start == 1'b0 && ^(Get_motion_code_74_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_82_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %74*/
	/*   %83 = or i32 %75, %82*/
		Get_motion_code_74_83 = (Get_motion_code_74_75_reg | Get_motion_code_74_82);
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %83 = or i32 %75, %82*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_43)) begin
		Get_motion_code_74_83_reg <= Get_motion_code_74_83;
		if (start == 1'b0 && ^(Get_motion_code_74_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_83_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %74*/
	/*   %84 = icmp slt i32 %77, 25*/
		Get_motion_code_74_84 = ($signed(Get_motion_code_74_77) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %84 = icmp slt i32 %77, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_41)) begin
		Get_motion_code_74_84_reg <= Get_motion_code_74_84;
		if (start == 1'b0 && ^(Get_motion_code_74_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_84_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %74*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
		Get_motion_code_74_indvarnext18 = (Get_motion_code_74_indvar17_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_41)) begin
		Get_motion_code_74_indvarnext18_reg <= Get_motion_code_74_indvarnext18;
		if (start == 1'b0 && ^(Get_motion_code_74_indvarnext18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_74_indvarnext18_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22*/
	/*   %indvar25 = phi i32 [ %indvar.next26, %Fill_Buffer.exit.i ], [ 0, %.preheader22.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader22preheader_39) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader22_indvar25 = 32'd0;
	end
	/* Get_motion_code: %.preheader22*/
	/*   %indvar25 = phi i32 [ %indvar.next26, %Fill_Buffer.exit.i ], [ 0, %.preheader22.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti_98_reg == 1'd1))) */ begin
		Get_motion_code_preheader22_indvar25 = Get_motion_code_Fill_Bufferexiti_indvarnext26_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22*/
	/*   %indvar25 = phi i32 [ %indvar.next26, %Fill_Buffer.exit.i ], [ 0, %.preheader22.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader22preheader_39) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader22_indvar25_reg <= Get_motion_code_preheader22_indvar25;
		if (start == 1'b0 && ^(Get_motion_code_preheader22_indvar25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22_indvar25_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader22*/
	/*   %indvar25 = phi i32 [ %indvar.next26, %Fill_Buffer.exit.i ], [ 0, %.preheader22.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti_98_reg == 1'd1))) begin
		Get_motion_code_preheader22_indvar25_reg <= Get_motion_code_preheader22_indvar25;
		if (start == 1'b0 && ^(Get_motion_code_preheader22_indvar25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22_indvar25_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22*/
	/*   %85 = phi i32 [ %97, %Fill_Buffer.exit.i ], [ %53, %.preheader22.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader22preheader_39) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader22_85 = Get_motion_code_48_53_reg;
	end
	/* Get_motion_code: %.preheader22*/
	/*   %85 = phi i32 [ %97, %Fill_Buffer.exit.i ], [ %53, %.preheader22.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti_98_reg == 1'd1))) */ begin
		Get_motion_code_preheader22_85 = Get_motion_code_Fill_Bufferexiti_97;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22*/
	/*   %85 = phi i32 [ %97, %Fill_Buffer.exit.i ], [ %53, %.preheader22.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader22preheader_39) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader22_85_reg <= Get_motion_code_preheader22_85;
		if (start == 1'b0 && ^(Get_motion_code_preheader22_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22_85_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader22*/
	/*   %85 = phi i32 [ %97, %Fill_Buffer.exit.i ], [ %53, %.preheader22.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti_98_reg == 1'd1))) begin
		Get_motion_code_preheader22_85_reg <= Get_motion_code_preheader22_85;
		if (start == 1'b0 && ^(Get_motion_code_preheader22_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22_85_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22*/
	/*   %.pr42 = phi i8* [ %93, %Fill_Buffer.exit.i ], [ %57, %.preheader22.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader22preheader_39) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader22_pr42 = Get_motion_code_56_57_reg;
	end
	/* Get_motion_code: %.preheader22*/
	/*   %.pr42 = phi i8* [ %93, %Fill_Buffer.exit.i ], [ %57, %.preheader22.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti_98_reg == 1'd1))) */ begin
		Get_motion_code_preheader22_pr42 = Get_motion_code_Fill_Bufferexiti_93_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22*/
	/*   %.pr42 = phi i8* [ %93, %Fill_Buffer.exit.i ], [ %57, %.preheader22.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader22preheader_39) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader22_pr42_reg <= Get_motion_code_preheader22_pr42;
		if (start == 1'b0 && ^(Get_motion_code_preheader22_pr42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22_pr42_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader22*/
	/*   %.pr42 = phi i8* [ %93, %Fill_Buffer.exit.i ], [ %57, %.preheader22.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti_98_reg == 1'd1))) begin
		Get_motion_code_preheader22_pr42_reg <= Get_motion_code_preheader22_pr42;
		if (start == 1'b0 && ^(Get_motion_code_preheader22_pr42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22_pr42_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22*/
	/*   %86 = shl i32 %indvar25, 3*/
		Get_motion_code_preheader22_86 = (Get_motion_code_preheader22_indvar25_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22*/
	/*   %86 = shl i32 %indvar25, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader22_44)) begin
		Get_motion_code_preheader22_86_reg <= Get_motion_code_preheader22_86;
		if (start == 1'b0 && ^(Get_motion_code_preheader22_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22_86_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22*/
	/*   %87 = add i32 %64, %86*/
		Get_motion_code_preheader22_87 = (Get_motion_code_preheader22preheader_64_reg + Get_motion_code_preheader22_86);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22*/
	/*   %87 = add i32 %64, %86*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader22_44)) begin
		Get_motion_code_preheader22_87_reg <= Get_motion_code_preheader22_87;
		if (start == 1'b0 && ^(Get_motion_code_preheader22_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22_87_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader22_88 = Get_motion_code_preheader22_88_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22*/
	/*   %88 = mul i32 %indvar25, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader22_45)) begin
		Get_motion_code_preheader22_88_reg <= Get_motion_code_preheader22_88;
		if (start == 1'b0 && ^(Get_motion_code_preheader22_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22_88_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader22*/
	/*   %88 = mul i32 %indvar25, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader22_45)) begin
		Get_motion_code_preheader22_88_reg <= Get_motion_code_preheader22_88;
		if (start == 1'b0 && ^(Get_motion_code_preheader22_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22_88_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22*/
	/*   %89 = add i32 %66, %88*/
		Get_motion_code_preheader22_89 = (Get_motion_code_preheader22preheader_66_reg + Get_motion_code_preheader22_88);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22*/
	/*   %89 = add i32 %66, %88*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader22_45)) begin
		Get_motion_code_preheader22_89_reg <= Get_motion_code_preheader22_89;
		if (start == 1'b0 && ^(Get_motion_code_preheader22_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22_89_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader22*/
	/*   %90 = icmp ult i8* %.pr42, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader22_90 = (Get_motion_code_preheader22_pr42_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22*/
	/*   %90 = icmp ult i8* %.pr42, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader22_44)) begin
		Get_motion_code_preheader22_90_reg <= Get_motion_code_preheader22_90;
		if (start == 1'b0 && ^(Get_motion_code_preheader22_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader22_90_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader21*/
	/*   %indvar20 = phi i32 [ 0, %.preheader21.preheader ], [ %indvar.next21, %91 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader21preheader_46) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader21_indvar20 = 32'd0;
	end
	/* Get_motion_code: %.preheader21*/
	/*   %indvar20 = phi i32 [ 0, %.preheader21.preheader ], [ %indvar.next21, %91 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__91_51) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_preheader21_indvar20 = Get_motion_code_91_indvarnext21_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader21*/
	/*   %indvar20 = phi i32 [ 0, %.preheader21.preheader ], [ %indvar.next21, %91 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader21preheader_46) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader21_indvar20_reg <= Get_motion_code_preheader21_indvar20;
		if (start == 1'b0 && ^(Get_motion_code_preheader21_indvar20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader21_indvar20_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader21*/
	/*   %indvar20 = phi i32 [ 0, %.preheader21.preheader ], [ %indvar.next21, %91 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__91_51) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader21_indvar20_reg <= Get_motion_code_preheader21_indvar20;
		if (start == 1'b0 && ^(Get_motion_code_preheader21_indvar20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader21_indvar20_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader21*/
	/*   %exitcond22 = icmp eq i32 %indvar20, 2048*/
		Get_motion_code_preheader21_exitcond22 = (Get_motion_code_preheader21_indvar20_reg == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader21*/
	/*   %exitcond22 = icmp eq i32 %indvar20, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader21_47)) begin
		Get_motion_code_preheader21_exitcond22_reg <= Get_motion_code_preheader21_exitcond22;
		if (start == 1'b0 && ^(Get_motion_code_preheader21_exitcond22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader21_exitcond22_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %91*/
	/*   %p2.0.i.i.i = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar20*/
		Get_motion_code_91_p20iii = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_preheader21_indvar20_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %91*/
	/*   %p2.0.i.i.i = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar20*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_48)) begin
		Get_motion_code_91_p20iii_reg <= Get_motion_code_91_p20iii;
		if (start == 1'b0 && ^(Get_motion_code_91_p20iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_91_p20iii_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %91*/
	/*   %p1.0.i.i.i = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar20*/
		Get_motion_code_91_p10iii = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_preheader21_indvar20_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %91*/
	/*   %p1.0.i.i.i = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar20*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_48)) begin
		Get_motion_code_91_p10iii_reg <= Get_motion_code_91_p10iii;
		if (start == 1'b0 && ^(Get_motion_code_91_p10iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_91_p10iii_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %91*/
	/*   %92 = load i8* %p2.0.i.i.i, align 1*/
		Get_motion_code_91_92 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %91*/
	/*   %92 = load i8* %p2.0.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_50)) begin
		Get_motion_code_91_92_reg <= Get_motion_code_91_92;
		if (start == 1'b0 && ^(Get_motion_code_91_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_91_92_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %91*/
	/*   %indvar.next21 = add i32 %indvar20, 1*/
		Get_motion_code_91_indvarnext21 = (Get_motion_code_preheader21_indvar20_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %91*/
	/*   %indvar.next21 = add i32 %indvar20, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_48)) begin
		Get_motion_code_91_indvarnext21_reg <= Get_motion_code_91_indvarnext21;
		if (start == 1'b0 && ^(Get_motion_code_91_indvarnext21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_91_indvarnext21_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %.pr43 = phi i8* [ %.pr42, %.preheader22 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader22_45) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader22_90_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexiti_pr43 = Get_motion_code_preheader22_pr42_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %.pr43 = phi i8* [ %.pr42, %.preheader22 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiloopexit_52) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexiti_pr43 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %.pr43 = phi i8* [ %.pr42, %.preheader22 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader22_45) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader22_90_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexiti_pr43_reg <= Get_motion_code_Fill_Bufferexiti_pr43;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_pr43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_pr43_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %.pr43 = phi i8* [ %.pr42, %.preheader22 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiloopexit_52) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexiti_pr43_reg <= Get_motion_code_Fill_Bufferexiti_pr43;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_pr43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_pr43_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %93 = getelementptr inbounds i8* %.pr43, i32 1*/
		Get_motion_code_Fill_Bufferexiti_93 = (Get_motion_code_Fill_Bufferexiti_pr43_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %93 = getelementptr inbounds i8* %.pr43, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_53)) begin
		Get_motion_code_Fill_Bufferexiti_93_reg <= Get_motion_code_Fill_Bufferexiti_93;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_93_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %94 = load i8* %.pr43, align 1*/
		Get_motion_code_Fill_Bufferexiti_94 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %94 = load i8* %.pr43, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55)) begin
		Get_motion_code_Fill_Bufferexiti_94_reg <= Get_motion_code_Fill_Bufferexiti_94;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_94_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %95 = zext i8 %94 to i32*/
		Get_motion_code_Fill_Bufferexiti_95 = Get_motion_code_Fill_Bufferexiti_94;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %95 = zext i8 %94 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55)) begin
		Get_motion_code_Fill_Bufferexiti_95_reg <= Get_motion_code_Fill_Bufferexiti_95;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_95_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %96 = shl i32 %95, %89*/
		Get_motion_code_Fill_Bufferexiti_96 = (Get_motion_code_Fill_Bufferexiti_95 <<< (Get_motion_code_preheader22_89_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %96 = shl i32 %95, %89*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55)) begin
		Get_motion_code_Fill_Bufferexiti_96_reg <= Get_motion_code_Fill_Bufferexiti_96;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_96_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %97 = or i32 %85, %96*/
		Get_motion_code_Fill_Bufferexiti_97 = (Get_motion_code_preheader22_85_reg | Get_motion_code_Fill_Bufferexiti_96);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %97 = or i32 %85, %96*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_55)) begin
		Get_motion_code_Fill_Bufferexiti_97_reg <= Get_motion_code_Fill_Bufferexiti_97;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_97_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %98 = icmp slt i32 %87, 25*/
		Get_motion_code_Fill_Bufferexiti_98 = ($signed(Get_motion_code_preheader22_87_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %98 = icmp slt i32 %87, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_53)) begin
		Get_motion_code_Fill_Bufferexiti_98_reg <= Get_motion_code_Fill_Bufferexiti_98;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_98_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %indvar.next26 = add i32 %indvar25, 1*/
		Get_motion_code_Fill_Bufferexiti_indvarnext26 = (Get_motion_code_preheader22_indvar25_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %indvar.next26 = add i32 %indvar25, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_53)) begin
		Get_motion_code_Fill_Bufferexiti_indvarnext26_reg <= Get_motion_code_Fill_Bufferexiti_indvarnext26;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_indvarnext26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_indvarnext26_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit*/
	/*   %99 = add nuw nsw i32 %67, 1*/
		Get_motion_code_loopexit_99 = (Get_motion_code_preheader_67_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit*/
	/*   %99 = add nuw nsw i32 %67, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit_56)) begin
		Get_motion_code_loopexit_99_reg <= Get_motion_code_loopexit_99;
		if (start == 1'b0 && ^(Get_motion_code_loopexit_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit_99_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit*/
	/*   %scevgep = getelementptr i8* %57, i32 %99*/
		Get_motion_code_loopexit_scevgep = (Get_motion_code_56_57_reg + (1 * Get_motion_code_loopexit_99_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit*/
	/*   %scevgep = getelementptr i8* %57, i32 %99*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit_57)) begin
		Get_motion_code_loopexit_scevgep_reg <= Get_motion_code_loopexit_scevgep;
		if (start == 1'b0 && ^(Get_motion_code_loopexit_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %100*/
	/*   %storemerge5 = phi i8* [ %scevgep, %.loopexit ], [ %93, %.loopexit23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit_57) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_100_storemerge5 = Get_motion_code_loopexit_scevgep;
	end
	/* Get_motion_code: %100*/
	/*   %storemerge5 = phi i8* [ %scevgep, %.loopexit ], [ %93, %.loopexit23 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit23_58) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_100_storemerge5 = Get_motion_code_Fill_Bufferexiti_93_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %100*/
	/*   %storemerge5 = phi i8* [ %scevgep, %.loopexit ], [ %93, %.loopexit23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit_57) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_100_storemerge5_reg <= Get_motion_code_100_storemerge5;
		if (start == 1'b0 && ^(Get_motion_code_100_storemerge5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_100_storemerge5_reg"); $finish; end
	end
	/* Get_motion_code: %100*/
	/*   %storemerge5 = phi i8* [ %scevgep, %.loopexit ], [ %93, %.loopexit23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit23_58) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_100_storemerge5_reg <= Get_motion_code_100_storemerge5;
		if (start == 1'b0 && ^(Get_motion_code_100_storemerge5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_100_storemerge5_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %100*/
	/*   %storemerge4 = phi i32 [ %83, %.loopexit ], [ %97, %.loopexit23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit_57) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_100_storemerge4 = Get_motion_code_74_83_reg;
	end
	/* Get_motion_code: %100*/
	/*   %storemerge4 = phi i32 [ %83, %.loopexit ], [ %97, %.loopexit23 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit23_58) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_100_storemerge4 = Get_motion_code_Fill_Bufferexiti_97_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %100*/
	/*   %storemerge4 = phi i32 [ %83, %.loopexit ], [ %97, %.loopexit23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit_57) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_100_storemerge4_reg <= Get_motion_code_100_storemerge4;
		if (start == 1'b0 && ^(Get_motion_code_100_storemerge4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_100_storemerge4_reg"); $finish; end
	end
	/* Get_motion_code: %100*/
	/*   %storemerge4 = phi i32 [ %83, %.loopexit ], [ %97, %.loopexit23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit23_58) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_100_storemerge4_reg <= Get_motion_code_100_storemerge4;
		if (start == 1'b0 && ^(Get_motion_code_100_storemerge4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_100_storemerge4_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %100*/
	/*   %.pn5 = phi i32 [ %68, %.loopexit ], [ %61, %.loopexit23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit_57) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_100_pn5 = Get_motion_code_preheader_68_reg;
	end
	/* Get_motion_code: %100*/
	/*   %.pn5 = phi i32 [ %68, %.loopexit ], [ %61, %.loopexit23 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit23_58) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_100_pn5 = Get_motion_code_preheader22preheader_61_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %100*/
	/*   %.pn5 = phi i32 [ %68, %.loopexit ], [ %61, %.loopexit23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit_57) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_100_pn5_reg <= Get_motion_code_100_pn5;
		if (start == 1'b0 && ^(Get_motion_code_100_pn5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_100_pn5_reg"); $finish; end
	end
	/* Get_motion_code: %100*/
	/*   %.pn5 = phi i32 [ %68, %.loopexit ], [ %61, %.loopexit23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit23_58) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_100_pn5_reg <= Get_motion_code_100_pn5;
		if (start == 1'b0 && ^(Get_motion_code_100_pn5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_100_pn5_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %100*/
	/*   %.pn2.in = add i32 %42, %.pn5*/
		Get_motion_code_100_pn2in = (Get_motion_code_Get_Bitsexit_42_reg + Get_motion_code_100_pn5_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %100*/
	/*   %.pn2.in = add i32 %42, %.pn5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		Get_motion_code_100_pn2in_reg <= Get_motion_code_100_pn2in;
		if (start == 1'b0 && ^(Get_motion_code_100_pn2in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_100_pn2in_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %100*/
	/*   %.pn2 = add i32 %.pn2.in, 8*/
		Get_motion_code_100_pn2 = (Get_motion_code_100_pn2in + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %100*/
	/*   %.pn2 = add i32 %.pn2.in, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		Get_motion_code_100_pn2_reg <= Get_motion_code_100_pn2;
		if (start == 1'b0 && ^(Get_motion_code_100_pn2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_100_pn2_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %100*/
	/*   %Incnt.2.i = sub i32 %.pn2, %52*/
		Get_motion_code_100_Incnt2i = (Get_motion_code_100_pn2 - Get_motion_code_48_52_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %100*/
	/*   %Incnt.2.i = sub i32 %.pn2, %52*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		Get_motion_code_100_Incnt2i_reg <= Get_motion_code_100_Incnt2i;
		if (start == 1'b0 && ^(Get_motion_code_100_Incnt2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_100_Incnt2i_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %101 = phi i32 [ %Incnt.2.i, %100 ], [ %54, %48 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__48_35) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_48_55_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit_101 = Get_motion_code_48_54_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %101 = phi i32 [ %Incnt.2.i, %100 ], [ %54, %48 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__100_61) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Flush_Bufferexit_101 = Get_motion_code_100_Incnt2i_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %101 = phi i32 [ %Incnt.2.i, %100 ], [ %54, %48 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__48_35) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_48_55_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit_101_reg <= Get_motion_code_Flush_Bufferexit_101;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_101_reg"); $finish; end
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %101 = phi i32 [ %Incnt.2.i, %100 ], [ %54, %48 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__100_61) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit_101_reg <= Get_motion_code_Flush_Bufferexit_101;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_101_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %102 = phi i32 [ %storemerge4, %100 ], [ %53, %48 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__48_35) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_48_55_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit_102 = Get_motion_code_48_53_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %102 = phi i32 [ %storemerge4, %100 ], [ %53, %48 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__100_61) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Flush_Bufferexit_102 = Get_motion_code_100_storemerge4_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %102 = phi i32 [ %storemerge4, %100 ], [ %53, %48 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__48_35) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_48_55_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit_102_reg <= Get_motion_code_Flush_Bufferexit_102;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_102_reg"); $finish; end
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %102 = phi i32 [ %storemerge4, %100 ], [ %53, %48 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__100_61) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit_102_reg <= Get_motion_code_Flush_Bufferexit_102;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_102_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %103 = shl i32 %102, 1*/
		Get_motion_code_Flush_Bufferexit_103 = (Get_motion_code_Flush_Bufferexit_102_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %103 = shl i32 %102, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		Get_motion_code_Flush_Bufferexit_103_reg <= Get_motion_code_Flush_Bufferexit_103;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_103_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %104 = add nsw i32 %101, -1*/
		Get_motion_code_Flush_Bufferexit_104 = (Get_motion_code_Flush_Bufferexit_101_reg + -32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %104 = add nsw i32 %101, -1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		Get_motion_code_Flush_Bufferexit_104_reg <= Get_motion_code_Flush_Bufferexit_104;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_104_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %105 = icmp slt i32 %101, 26*/
		Get_motion_code_Flush_Bufferexit_105 = ($signed(Get_motion_code_Flush_Bufferexit_101_reg) < $signed(32'd26));
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %105 = icmp slt i32 %101, 26*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		Get_motion_code_Flush_Bufferexit_105_reg <= Get_motion_code_Flush_Bufferexit_105;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_105_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %106*/
	/*   %107 = load i8** @ld_Rdptr, align 4*/
		Get_motion_code_106_107 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %106*/
	/*   %107 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__106_66)) begin
		Get_motion_code_106_107_reg <= Get_motion_code_106_107;
		if (start == 1'b0 && ^(Get_motion_code_106_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_106_107_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %106*/
	/*   %108 = icmp ult i8* %107, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_106_108 = (Get_motion_code_106_107 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %106*/
	/*   %108 = icmp ult i8* %107, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__106_66)) begin
		Get_motion_code_106_108_reg <= Get_motion_code_106_108;
		if (start == 1'b0 && ^(Get_motion_code_106_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_106_108_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %106*/
	/*   %109 = sub i32 25, %101*/
		Get_motion_code_106_109 = (32'd25 - Get_motion_code_Flush_Bufferexit_101_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %106*/
	/*   %109 = sub i32 25, %101*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__106_64)) begin
		Get_motion_code_106_109_reg <= Get_motion_code_106_109;
		if (start == 1'b0 && ^(Get_motion_code_106_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_106_109_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %106*/
	/*   %110 = lshr i32 %109, 3*/
		Get_motion_code_106_110 = (Get_motion_code_106_109 >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %106*/
	/*   %110 = lshr i32 %109, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__106_64)) begin
		Get_motion_code_106_110_reg <= Get_motion_code_106_110;
		if (start == 1'b0 && ^(Get_motion_code_106_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_106_110_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %106*/
	/*   %111 = shl nuw i32 %110, 3*/
		Get_motion_code_106_111 = (Get_motion_code_106_110 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %106*/
	/*   %111 = shl nuw i32 %110, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__106_64)) begin
		Get_motion_code_106_111_reg <= Get_motion_code_106_111;
		if (start == 1'b0 && ^(Get_motion_code_106_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_106_111_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %106*/
	/*   %112 = add i32 %101, %111*/
		Get_motion_code_106_112 = (Get_motion_code_Flush_Bufferexit_101_reg + Get_motion_code_106_111);
end
always @(posedge clk) begin
	/* Get_motion_code: %106*/
	/*   %112 = add i32 %101, %111*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__106_64)) begin
		Get_motion_code_106_112_reg <= Get_motion_code_106_112;
		if (start == 1'b0 && ^(Get_motion_code_106_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_106_112_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i46.preheader*/
	/*   %113 = add i32 %101, 7*/
		Get_motion_code_preheader2i46preheader_113 = (Get_motion_code_Flush_Bufferexit_101_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i46.preheader*/
	/*   %113 = add i32 %101, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46preheader_67)) begin
		Get_motion_code_preheader2i46preheader_113_reg <= Get_motion_code_preheader2i46preheader_113;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46preheader_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46preheader_113_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i46.preheader*/
	/*   %114 = sub i32 25, %101*/
		Get_motion_code_preheader2i46preheader_114 = (32'd25 - Get_motion_code_Flush_Bufferexit_101_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i46.preheader*/
	/*   %114 = sub i32 25, %101*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46preheader_67)) begin
		Get_motion_code_preheader2i46preheader_114_reg <= Get_motion_code_preheader2i46preheader_114;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46preheader_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46preheader_114_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43.preheader*/
	/*   %115 = add i32 %101, 7*/
		Get_motion_code_preheaderi43preheader_115 = (Get_motion_code_Flush_Bufferexit_101_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43.preheader*/
	/*   %115 = add i32 %101, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43preheader_68)) begin
		Get_motion_code_preheaderi43preheader_115_reg <= Get_motion_code_preheaderi43preheader_115;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43preheader_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43preheader_115_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43.preheader*/
	/*   %116 = sub i32 25, %101*/
		Get_motion_code_preheaderi43preheader_116 = (32'd25 - Get_motion_code_Flush_Bufferexit_101_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43.preheader*/
	/*   %116 = sub i32 25, %101*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43preheader_68)) begin
		Get_motion_code_preheaderi43preheader_116_reg <= Get_motion_code_preheaderi43preheader_116;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43preheader_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43preheader_116_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %indvar = phi i32 [ 0, %.preheader.i43.preheader ], [ %indvar.next, %.preheader.i43 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43preheader_68) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi43_indvar = 32'd0;
	end
	/* Get_motion_code: %.preheader.i43*/
	/*   %indvar = phi i32 [ 0, %.preheader.i43.preheader ], [ %indvar.next, %.preheader.i43 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_71) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi43_126_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi43_indvar = Get_motion_code_preheaderi43_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %indvar = phi i32 [ 0, %.preheader.i43.preheader ], [ %indvar.next, %.preheader.i43 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43preheader_68) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi43_indvar_reg <= Get_motion_code_preheaderi43_indvar;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_indvar_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i43*/
	/*   %indvar = phi i32 [ 0, %.preheader.i43.preheader ], [ %indvar.next, %.preheader.i43 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_71) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi43_126_reg == 1'd1))) begin
		Get_motion_code_preheaderi43_indvar_reg <= Get_motion_code_preheaderi43_indvar;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %117 = phi i32 [ %103, %.preheader.i43.preheader ], [ %125, %.preheader.i43 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43preheader_68) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi43_117 = Get_motion_code_Flush_Bufferexit_103_reg;
	end
	/* Get_motion_code: %.preheader.i43*/
	/*   %117 = phi i32 [ %103, %.preheader.i43.preheader ], [ %125, %.preheader.i43 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_71) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi43_126_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi43_117 = Get_motion_code_preheaderi43_125;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %117 = phi i32 [ %103, %.preheader.i43.preheader ], [ %125, %.preheader.i43 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43preheader_68) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi43_117_reg <= Get_motion_code_preheaderi43_117;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_117_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i43*/
	/*   %117 = phi i32 [ %103, %.preheader.i43.preheader ], [ %125, %.preheader.i43 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_71) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi43_126_reg == 1'd1))) begin
		Get_motion_code_preheaderi43_117_reg <= Get_motion_code_preheaderi43_117;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_117_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %scevgep9 = getelementptr i8* %107, i32 %indvar*/
		Get_motion_code_preheaderi43_scevgep9 = (Get_motion_code_106_107_reg + (1 * Get_motion_code_preheaderi43_indvar_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %scevgep9 = getelementptr i8* %107, i32 %indvar*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_69)) begin
		Get_motion_code_preheaderi43_scevgep9_reg <= Get_motion_code_preheaderi43_scevgep9;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_scevgep9_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %118 = shl i32 %indvar, 3*/
		Get_motion_code_preheaderi43_118 = (Get_motion_code_preheaderi43_indvar_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %118 = shl i32 %indvar, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_69)) begin
		Get_motion_code_preheaderi43_118_reg <= Get_motion_code_preheaderi43_118;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_118_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %119 = add i32 %115, %118*/
		Get_motion_code_preheaderi43_119 = (Get_motion_code_preheaderi43preheader_115_reg + Get_motion_code_preheaderi43_118);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %119 = add i32 %115, %118*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_69)) begin
		Get_motion_code_preheaderi43_119_reg <= Get_motion_code_preheaderi43_119;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_119_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheaderi43_120 = Get_motion_code_preheaderi43_120_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %120 = mul i32 %indvar, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_70)) begin
		Get_motion_code_preheaderi43_120_reg <= Get_motion_code_preheaderi43_120;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_120_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i43*/
	/*   %120 = mul i32 %indvar, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_70)) begin
		Get_motion_code_preheaderi43_120_reg <= Get_motion_code_preheaderi43_120;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_120_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %121 = add i32 %116, %120*/
		Get_motion_code_preheaderi43_121 = (Get_motion_code_preheaderi43preheader_116_reg + Get_motion_code_preheaderi43_120);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %121 = add i32 %116, %120*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_70)) begin
		Get_motion_code_preheaderi43_121_reg <= Get_motion_code_preheaderi43_121;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_121_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %122 = load i8* %scevgep9, align 1*/
		Get_motion_code_preheaderi43_122 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %122 = load i8* %scevgep9, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_71)) begin
		Get_motion_code_preheaderi43_122_reg <= Get_motion_code_preheaderi43_122;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_122_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %123 = zext i8 %122 to i32*/
		Get_motion_code_preheaderi43_123 = Get_motion_code_preheaderi43_122;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %123 = zext i8 %122 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_71)) begin
		Get_motion_code_preheaderi43_123_reg <= Get_motion_code_preheaderi43_123;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_123_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %124 = shl i32 %123, %121*/
		Get_motion_code_preheaderi43_124 = (Get_motion_code_preheaderi43_123 <<< (Get_motion_code_preheaderi43_121_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %124 = shl i32 %123, %121*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_71)) begin
		Get_motion_code_preheaderi43_124_reg <= Get_motion_code_preheaderi43_124;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_124_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %125 = or i32 %117, %124*/
		Get_motion_code_preheaderi43_125 = (Get_motion_code_preheaderi43_117_reg | Get_motion_code_preheaderi43_124);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %125 = or i32 %117, %124*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_71)) begin
		Get_motion_code_preheaderi43_125_reg <= Get_motion_code_preheaderi43_125;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_125_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %126 = icmp slt i32 %119, 25*/
		Get_motion_code_preheaderi43_126 = ($signed(Get_motion_code_preheaderi43_119) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %126 = icmp slt i32 %119, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_69)) begin
		Get_motion_code_preheaderi43_126_reg <= Get_motion_code_preheaderi43_126;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_126_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %indvar.next = add i32 %indvar, 1*/
		Get_motion_code_preheaderi43_indvarnext = (Get_motion_code_preheaderi43_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_69)) begin
		Get_motion_code_preheaderi43_indvarnext_reg <= Get_motion_code_preheaderi43_indvarnext;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi43_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi43_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %indvar15 = phi i32 [ 0, %.preheader2.i46.preheader ], [ %indvar.next16, %Fill_Buffer.exit.i.i52 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46preheader_67) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i46_indvar15 = 32'd0;
	end
	/* Get_motion_code: %.preheader2.i46*/
	/*   %indvar15 = phi i32 [ 0, %.preheader2.i46.preheader ], [ %indvar.next16, %Fill_Buffer.exit.i.i52 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii52_140_reg == 1'd1))) */ begin
		Get_motion_code_preheader2i46_indvar15 = Get_motion_code_Fill_Bufferexitii52_indvarnext16_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %indvar15 = phi i32 [ 0, %.preheader2.i46.preheader ], [ %indvar.next16, %Fill_Buffer.exit.i.i52 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46preheader_67) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i46_indvar15_reg <= Get_motion_code_preheader2i46_indvar15;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46_indvar15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46_indvar15_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i46*/
	/*   %indvar15 = phi i32 [ 0, %.preheader2.i46.preheader ], [ %indvar.next16, %Fill_Buffer.exit.i.i52 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii52_140_reg == 1'd1))) begin
		Get_motion_code_preheader2i46_indvar15_reg <= Get_motion_code_preheader2i46_indvar15;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46_indvar15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46_indvar15_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %127 = phi i32 [ %103, %.preheader2.i46.preheader ], [ %139, %Fill_Buffer.exit.i.i52 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46preheader_67) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i46_127 = Get_motion_code_Flush_Bufferexit_103_reg;
	end
	/* Get_motion_code: %.preheader2.i46*/
	/*   %127 = phi i32 [ %103, %.preheader2.i46.preheader ], [ %139, %Fill_Buffer.exit.i.i52 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii52_140_reg == 1'd1))) */ begin
		Get_motion_code_preheader2i46_127 = Get_motion_code_Fill_Bufferexitii52_139;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %127 = phi i32 [ %103, %.preheader2.i46.preheader ], [ %139, %Fill_Buffer.exit.i.i52 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46preheader_67) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i46_127_reg <= Get_motion_code_preheader2i46_127;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46_127_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i46*/
	/*   %127 = phi i32 [ %103, %.preheader2.i46.preheader ], [ %139, %Fill_Buffer.exit.i.i52 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii52_140_reg == 1'd1))) begin
		Get_motion_code_preheader2i46_127_reg <= Get_motion_code_preheader2i46_127;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46_127_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %.pr8.i44 = phi i8* [ %107, %.preheader2.i46.preheader ], [ %135, %Fill_Buffer.exit.i.i52 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46preheader_67) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i46_pr8i44 = Get_motion_code_106_107_reg;
	end
	/* Get_motion_code: %.preheader2.i46*/
	/*   %.pr8.i44 = phi i8* [ %107, %.preheader2.i46.preheader ], [ %135, %Fill_Buffer.exit.i.i52 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii52_140_reg == 1'd1))) */ begin
		Get_motion_code_preheader2i46_pr8i44 = Get_motion_code_Fill_Bufferexitii52_135_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %.pr8.i44 = phi i8* [ %107, %.preheader2.i46.preheader ], [ %135, %Fill_Buffer.exit.i.i52 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46preheader_67) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i46_pr8i44_reg <= Get_motion_code_preheader2i46_pr8i44;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46_pr8i44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46_pr8i44_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i46*/
	/*   %.pr8.i44 = phi i8* [ %107, %.preheader2.i46.preheader ], [ %135, %Fill_Buffer.exit.i.i52 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii52_140_reg == 1'd1))) begin
		Get_motion_code_preheader2i46_pr8i44_reg <= Get_motion_code_preheader2i46_pr8i44;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46_pr8i44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46_pr8i44_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %128 = shl i32 %indvar15, 3*/
		Get_motion_code_preheader2i46_128 = (Get_motion_code_preheader2i46_indvar15_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %128 = shl i32 %indvar15, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46_72)) begin
		Get_motion_code_preheader2i46_128_reg <= Get_motion_code_preheader2i46_128;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46_128_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %129 = add i32 %113, %128*/
		Get_motion_code_preheader2i46_129 = (Get_motion_code_preheader2i46preheader_113_reg + Get_motion_code_preheader2i46_128);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %129 = add i32 %113, %128*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46_72)) begin
		Get_motion_code_preheader2i46_129_reg <= Get_motion_code_preheader2i46_129;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46_129_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader2i46_130 = Get_motion_code_preheader2i46_130_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %130 = mul i32 %indvar15, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46_73)) begin
		Get_motion_code_preheader2i46_130_reg <= Get_motion_code_preheader2i46_130;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46_130_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i46*/
	/*   %130 = mul i32 %indvar15, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46_73)) begin
		Get_motion_code_preheader2i46_130_reg <= Get_motion_code_preheader2i46_130;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46_130_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %131 = add i32 %114, %130*/
		Get_motion_code_preheader2i46_131 = (Get_motion_code_preheader2i46preheader_114_reg + Get_motion_code_preheader2i46_130);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %131 = add i32 %114, %130*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46_73)) begin
		Get_motion_code_preheader2i46_131_reg <= Get_motion_code_preheader2i46_131;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46_131_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %132 = icmp ult i8* %.pr8.i44, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader2i46_132 = (Get_motion_code_preheader2i46_pr8i44_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %132 = icmp ult i8* %.pr8.i44, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46_72)) begin
		Get_motion_code_preheader2i46_132_reg <= Get_motion_code_preheader2i46_132;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i46_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i46_132_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i50*/
	/*   %indvar10 = phi i32 [ 0, %.preheader1.i50.preheader ], [ %indvar.next11, %133 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i50preheader_74) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i50_indvar10 = 32'd0;
	end
	/* Get_motion_code: %.preheader1.i50*/
	/*   %indvar10 = phi i32 [ 0, %.preheader1.i50.preheader ], [ %indvar.next11, %133 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__133_79) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_preheader1i50_indvar10 = Get_motion_code_133_indvarnext11_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i50*/
	/*   %indvar10 = phi i32 [ 0, %.preheader1.i50.preheader ], [ %indvar.next11, %133 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i50preheader_74) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i50_indvar10_reg <= Get_motion_code_preheader1i50_indvar10;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i50_indvar10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i50_indvar10_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i50*/
	/*   %indvar10 = phi i32 [ 0, %.preheader1.i50.preheader ], [ %indvar.next11, %133 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__133_79) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i50_indvar10_reg <= Get_motion_code_preheader1i50_indvar10;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i50_indvar10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i50_indvar10_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i50*/
	/*   %exitcond12 = icmp eq i32 %indvar10, 2048*/
		Get_motion_code_preheader1i50_exitcond12 = (Get_motion_code_preheader1i50_indvar10_reg == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i50*/
	/*   %exitcond12 = icmp eq i32 %indvar10, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i50_75)) begin
		Get_motion_code_preheader1i50_exitcond12_reg <= Get_motion_code_preheader1i50_exitcond12;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i50_exitcond12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i50_exitcond12_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %133*/
	/*   %p2.0.i.i.i.i48 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar10*/
		Get_motion_code_133_p20iiii48 = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_preheader1i50_indvar10_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %133*/
	/*   %p2.0.i.i.i.i48 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar10*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_76)) begin
		Get_motion_code_133_p20iiii48_reg <= Get_motion_code_133_p20iiii48;
		if (start == 1'b0 && ^(Get_motion_code_133_p20iiii48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_133_p20iiii48_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %133*/
	/*   %p1.0.i.i.i.i47 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar10*/
		Get_motion_code_133_p10iiii47 = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_preheader1i50_indvar10_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %133*/
	/*   %p1.0.i.i.i.i47 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar10*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_76)) begin
		Get_motion_code_133_p10iiii47_reg <= Get_motion_code_133_p10iiii47;
		if (start == 1'b0 && ^(Get_motion_code_133_p10iiii47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_133_p10iiii47_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %133*/
	/*   %134 = load i8* %p2.0.i.i.i.i48, align 1*/
		Get_motion_code_133_134 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %133*/
	/*   %134 = load i8* %p2.0.i.i.i.i48, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_78)) begin
		Get_motion_code_133_134_reg <= Get_motion_code_133_134;
		if (start == 1'b0 && ^(Get_motion_code_133_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_133_134_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %133*/
	/*   %indvar.next11 = add i32 %indvar10, 1*/
		Get_motion_code_133_indvarnext11 = (Get_motion_code_preheader1i50_indvar10_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %133*/
	/*   %indvar.next11 = add i32 %indvar10, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_76)) begin
		Get_motion_code_133_indvarnext11_reg <= Get_motion_code_133_indvarnext11;
		if (start == 1'b0 && ^(Get_motion_code_133_indvarnext11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_133_indvarnext11_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %.pr9.i51 = phi i8* [ %.pr8.i44, %.preheader2.i46 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i52.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46_73) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader2i46_132_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitii52_pr9i51 = Get_motion_code_preheader2i46_pr8i44_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %.pr9.i51 = phi i8* [ %.pr8.i44, %.preheader2.i46 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i52.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52loopexit_80) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexitii52_pr9i51 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %.pr9.i51 = phi i8* [ %.pr8.i44, %.preheader2.i46 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i52.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i46_73) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader2i46_132_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitii52_pr9i51_reg <= Get_motion_code_Fill_Bufferexitii52_pr9i51;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii52_pr9i51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii52_pr9i51_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %.pr9.i51 = phi i8* [ %.pr8.i44, %.preheader2.i46 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i52.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52loopexit_80) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexitii52_pr9i51_reg <= Get_motion_code_Fill_Bufferexitii52_pr9i51;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii52_pr9i51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii52_pr9i51_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %135 = getelementptr inbounds i8* %.pr9.i51, i32 1*/
		Get_motion_code_Fill_Bufferexitii52_135 = (Get_motion_code_Fill_Bufferexitii52_pr9i51_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %135 = getelementptr inbounds i8* %.pr9.i51, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_81)) begin
		Get_motion_code_Fill_Bufferexitii52_135_reg <= Get_motion_code_Fill_Bufferexitii52_135;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii52_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii52_135_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %136 = load i8* %.pr9.i51, align 1*/
		Get_motion_code_Fill_Bufferexitii52_136 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %136 = load i8* %.pr9.i51, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83)) begin
		Get_motion_code_Fill_Bufferexitii52_136_reg <= Get_motion_code_Fill_Bufferexitii52_136;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii52_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii52_136_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %137 = zext i8 %136 to i32*/
		Get_motion_code_Fill_Bufferexitii52_137 = Get_motion_code_Fill_Bufferexitii52_136;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %137 = zext i8 %136 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83)) begin
		Get_motion_code_Fill_Bufferexitii52_137_reg <= Get_motion_code_Fill_Bufferexitii52_137;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii52_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii52_137_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %138 = shl i32 %137, %131*/
		Get_motion_code_Fill_Bufferexitii52_138 = (Get_motion_code_Fill_Bufferexitii52_137 <<< (Get_motion_code_preheader2i46_131_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %138 = shl i32 %137, %131*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83)) begin
		Get_motion_code_Fill_Bufferexitii52_138_reg <= Get_motion_code_Fill_Bufferexitii52_138;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii52_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii52_138_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %139 = or i32 %127, %138*/
		Get_motion_code_Fill_Bufferexitii52_139 = (Get_motion_code_preheader2i46_127_reg | Get_motion_code_Fill_Bufferexitii52_138);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %139 = or i32 %127, %138*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_83)) begin
		Get_motion_code_Fill_Bufferexitii52_139_reg <= Get_motion_code_Fill_Bufferexitii52_139;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii52_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii52_139_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %140 = icmp slt i32 %129, 25*/
		Get_motion_code_Fill_Bufferexitii52_140 = ($signed(Get_motion_code_preheader2i46_129_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %140 = icmp slt i32 %129, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_81)) begin
		Get_motion_code_Fill_Bufferexitii52_140_reg <= Get_motion_code_Fill_Bufferexitii52_140;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii52_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii52_140_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %indvar.next16 = add i32 %indvar15, 1*/
		Get_motion_code_Fill_Bufferexitii52_indvarnext16 = (Get_motion_code_preheader2i46_indvar15_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %indvar.next16 = add i32 %indvar15, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_81)) begin
		Get_motion_code_Fill_Bufferexitii52_indvarnext16_reg <= Get_motion_code_Fill_Bufferexitii52_indvarnext16;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii52_indvarnext16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii52_indvarnext16_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i54*/
	/*   %141 = add nuw nsw i32 %110, 1*/
		Get_motion_code_loopexiti54_141 = (Get_motion_code_106_110_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i54*/
	/*   %141 = add nuw nsw i32 %110, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti54_84)) begin
		Get_motion_code_loopexiti54_141_reg <= Get_motion_code_loopexiti54_141;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti54_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti54_141_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i54*/
	/*   %scevgep.i53 = getelementptr i8* %107, i32 %141*/
		Get_motion_code_loopexiti54_scevgepi53 = (Get_motion_code_106_107_reg + (1 * Get_motion_code_loopexiti54_141_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i54*/
	/*   %scevgep.i53 = getelementptr i8* %107, i32 %141*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti54_85)) begin
		Get_motion_code_loopexiti54_scevgepi53_reg <= Get_motion_code_loopexiti54_scevgepi53;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti54_scevgepi53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti54_scevgepi53_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit3.i55*/
	/*   %storemerge1.i56 = phi i8* [ %scevgep.i53, %.loopexit.i54 ], [ %135, %.loopexit3.i55.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti54_85) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i55_storemerge1i56 = Get_motion_code_loopexiti54_scevgepi53;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   %storemerge1.i56 = phi i8* [ %scevgep.i53, %.loopexit.i54 ], [ %135, %.loopexit3.i55.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55loopexit_86) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit3i55_storemerge1i56 = Get_motion_code_Fill_Bufferexitii52_135_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit3.i55*/
	/*   %storemerge1.i56 = phi i8* [ %scevgep.i53, %.loopexit.i54 ], [ %135, %.loopexit3.i55.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti54_85) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i55_storemerge1i56_reg <= Get_motion_code_loopexit3i55_storemerge1i56;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i55_storemerge1i56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i55_storemerge1i56_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   %storemerge1.i56 = phi i8* [ %scevgep.i53, %.loopexit.i54 ], [ %135, %.loopexit3.i55.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55loopexit_86) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i55_storemerge1i56_reg <= Get_motion_code_loopexit3i55_storemerge1i56;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i55_storemerge1i56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i55_storemerge1i56_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit3.i55*/
	/*   %storemerge.i57 = phi i32 [ %125, %.loopexit.i54 ], [ %139, %.loopexit3.i55.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti54_85) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i55_storemergei57 = Get_motion_code_preheaderi43_125_reg;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   %storemerge.i57 = phi i32 [ %125, %.loopexit.i54 ], [ %139, %.loopexit3.i55.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55loopexit_86) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit3i55_storemergei57 = Get_motion_code_Fill_Bufferexitii52_139_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit3.i55*/
	/*   %storemerge.i57 = phi i32 [ %125, %.loopexit.i54 ], [ %139, %.loopexit3.i55.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti54_85) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i55_storemergei57_reg <= Get_motion_code_loopexit3i55_storemergei57;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i55_storemergei57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i55_storemergei57_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   %storemerge.i57 = phi i32 [ %125, %.loopexit.i54 ], [ %139, %.loopexit3.i55.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55loopexit_86) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i55_storemergei57_reg <= Get_motion_code_loopexit3i55_storemergei57;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i55_storemergei57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i55_storemergei57_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit3.i55*/
	/*   %Incnt.2.i.i58 = add i32 %112, 7*/
		Get_motion_code_loopexit3i55_Incnt2ii58 = (Get_motion_code_106_112_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit3.i55*/
	/*   %Incnt.2.i.i58 = add i32 %112, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_87)) begin
		Get_motion_code_loopexit3i55_Incnt2ii58_reg <= Get_motion_code_loopexit3i55_Incnt2ii58;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i55_Incnt2ii58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i55_Incnt2ii58_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %142 = icmp slt i32 %102, 0*/
		Get_motion_code_Get_Bitsexit59_142 = ($signed(Get_motion_code_Flush_Bufferexit_102_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %142 = icmp slt i32 %102, 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_90)) begin
		Get_motion_code_Get_Bitsexit59_142_reg <= Get_motion_code_Get_Bitsexit59_142;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit59_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit59_142_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %143 = getelementptr inbounds [8 x [2 x i8]]* @MVtab0, i32 0, i32 %49, i32 0*/
		Get_motion_code_Get_Bitsexit59_143 = (1'd0 | (2 * Get_motion_code_48_49_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %143 = getelementptr inbounds [8 x [2 x i8]]* @MVtab0, i32 0, i32 %49, i32 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_90)) begin
		Get_motion_code_Get_Bitsexit59_143_reg <= Get_motion_code_Get_Bitsexit59_143;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit59_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit59_143_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %144 = load i8* %143, align 1*/
		Get_motion_code_Get_Bitsexit59_144 = MVtab0_out_a;
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %144 = load i8* %143, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_91)) begin
		Get_motion_code_Get_Bitsexit59_144_reg <= Get_motion_code_Get_Bitsexit59_144;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit59_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit59_144_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %145 = sext i8 %144 to i32*/
		Get_motion_code_Get_Bitsexit59_145 = $signed(Get_motion_code_Get_Bitsexit59_144);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %145 = sext i8 %144 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_91)) begin
		Get_motion_code_Get_Bitsexit59_145_reg <= Get_motion_code_Get_Bitsexit59_145;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit59_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit59_145_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %146 = sub nsw i32 0, %145*/
		Get_motion_code_Get_Bitsexit59_146 = (32'd0 - Get_motion_code_Get_Bitsexit59_145);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %146 = sub nsw i32 0, %145*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_91)) begin
		Get_motion_code_Get_Bitsexit59_146_reg <= Get_motion_code_Get_Bitsexit59_146;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit59_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit59_146_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %. = select i1 %142, i32 %146, i32 %145*/
		Get_motion_code_Get_Bitsexit59_ = (Get_motion_code_Get_Bitsexit59_142_reg ? Get_motion_code_Get_Bitsexit59_146 : Get_motion_code_Get_Bitsexit59_145);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %. = select i1 %142, i32 %146, i32 %145*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_91)) begin
		Get_motion_code_Get_Bitsexit59__reg <= Get_motion_code_Get_Bitsexit59_;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit59_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit59__reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %147*/
	/*   %148 = icmp ugt i32 %43, 201326591*/
		Get_motion_code_147_148 = (Get_motion_code_Get_Bitsexit_43_reg > 32'd201326591);
end
always @(posedge clk) begin
	/* Get_motion_code: %147*/
	/*   %148 = icmp ugt i32 %43, 201326591*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__147_92)) begin
		Get_motion_code_147_148_reg <= Get_motion_code_147_148;
		if (start == 1'b0 && ^(Get_motion_code_147_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_147_148_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %149*/
	/*   %150 = lshr i32 %43, 26*/
		Get_motion_code_149_150 = (Get_motion_code_Get_Bitsexit_43_reg >>> (32'd26 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %149*/
	/*   %150 = lshr i32 %43, 26*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_93)) begin
		Get_motion_code_149_150_reg <= Get_motion_code_149_150;
		if (start == 1'b0 && ^(Get_motion_code_149_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_149_150_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %149*/
	/*   %151 = getelementptr inbounds [8 x [2 x i8]]* @MVtab1, i32 0, i32 %150, i32 1*/
		Get_motion_code_149_151 = (1'd0 | ((2 * Get_motion_code_149_150) + (1 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %149*/
	/*   %151 = getelementptr inbounds [8 x [2 x i8]]* @MVtab1, i32 0, i32 %150, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_93)) begin
		Get_motion_code_149_151_reg <= Get_motion_code_149_151;
		if (start == 1'b0 && ^(Get_motion_code_149_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_149_151_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %149*/
	/*   %152 = load i8* %151, align 1*/
		Get_motion_code_149_152 = MVtab1_out_a;
end
always @(posedge clk) begin
	/* Get_motion_code: %149*/
	/*   %152 = load i8* %151, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		Get_motion_code_149_152_reg <= Get_motion_code_149_152;
		if (start == 1'b0 && ^(Get_motion_code_149_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_149_152_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %149*/
	/*   %153 = sext i8 %152 to i32*/
		Get_motion_code_149_153 = $signed(Get_motion_code_149_152);
end
always @(posedge clk) begin
	/* Get_motion_code: %149*/
	/*   %153 = sext i8 %152 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		Get_motion_code_149_153_reg <= Get_motion_code_149_153;
		if (start == 1'b0 && ^(Get_motion_code_149_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_149_153_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %149*/
	/*   %154 = shl i32 %43, %153*/
		Get_motion_code_149_154 = (Get_motion_code_Get_Bitsexit_43_reg <<< (Get_motion_code_149_153 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %149*/
	/*   %154 = shl i32 %43, %153*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		Get_motion_code_149_154_reg <= Get_motion_code_149_154;
		if (start == 1'b0 && ^(Get_motion_code_149_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_149_154_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %149*/
	/*   %155 = sub nsw i32 %42, %153*/
		Get_motion_code_149_155 = (Get_motion_code_Get_Bitsexit_42_reg - Get_motion_code_149_153);
end
always @(posedge clk) begin
	/* Get_motion_code: %149*/
	/*   %155 = sub nsw i32 %42, %153*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		Get_motion_code_149_155_reg <= Get_motion_code_149_155;
		if (start == 1'b0 && ^(Get_motion_code_149_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_149_155_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %149*/
	/*   %156 = icmp slt i32 %155, 25*/
		Get_motion_code_149_156 = ($signed(Get_motion_code_149_155) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %149*/
	/*   %156 = icmp slt i32 %155, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		Get_motion_code_149_156_reg <= Get_motion_code_149_156;
		if (start == 1'b0 && ^(Get_motion_code_149_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_149_156_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %157*/
	/*   %158 = load i8** @ld_Rdptr, align 4*/
		Get_motion_code_157_158 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %157*/
	/*   %158 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__157_98)) begin
		Get_motion_code_157_158_reg <= Get_motion_code_157_158;
		if (start == 1'b0 && ^(Get_motion_code_157_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_157_158_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %157*/
	/*   %159 = icmp ult i8* %158, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_157_159 = (Get_motion_code_157_158 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %157*/
	/*   %159 = icmp ult i8* %158, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__157_98)) begin
		Get_motion_code_157_159_reg <= Get_motion_code_157_159;
		if (start == 1'b0 && ^(Get_motion_code_157_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_157_159_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %157*/
	/*   %160 = add nsw i32 %153, 24*/
		Get_motion_code_157_160 = (Get_motion_code_149_153_reg + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %157*/
	/*   %160 = add nsw i32 %153, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__157_96)) begin
		Get_motion_code_157_160_reg <= Get_motion_code_157_160;
		if (start == 1'b0 && ^(Get_motion_code_157_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_157_160_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %157*/
	/*   %161 = sub i32 %160, %42*/
		Get_motion_code_157_161 = (Get_motion_code_157_160 - Get_motion_code_Get_Bitsexit_42_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %157*/
	/*   %161 = sub i32 %160, %42*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__157_96)) begin
		Get_motion_code_157_161_reg <= Get_motion_code_157_161;
		if (start == 1'b0 && ^(Get_motion_code_157_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_157_161_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27.preheader*/
	/*   %162 = and i32 %161, -8*/
		Get_motion_code_preheader27preheader_162 = (Get_motion_code_157_161_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27.preheader*/
	/*   %162 = and i32 %161, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader27preheader_99)) begin
		Get_motion_code_preheader27preheader_162_reg <= Get_motion_code_preheader27preheader_162;
		if (start == 1'b0 && ^(Get_motion_code_preheader27preheader_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27preheader_162_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27.preheader*/
	/*   %163 = add i32 %42, 8*/
		Get_motion_code_preheader27preheader_163 = (Get_motion_code_Get_Bitsexit_42_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27.preheader*/
	/*   %163 = add i32 %42, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader27preheader_99)) begin
		Get_motion_code_preheader27preheader_163_reg <= Get_motion_code_preheader27preheader_163;
		if (start == 1'b0 && ^(Get_motion_code_preheader27preheader_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27preheader_163_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27.preheader*/
	/*   %164 = sext i8 %152 to i32*/
		Get_motion_code_preheader27preheader_164 = $signed(Get_motion_code_149_152_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27.preheader*/
	/*   %164 = sext i8 %152 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader27preheader_99)) begin
		Get_motion_code_preheader27preheader_164_reg <= Get_motion_code_preheader27preheader_164;
		if (start == 1'b0 && ^(Get_motion_code_preheader27preheader_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27preheader_164_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27.preheader*/
	/*   %165 = sub i32 %163, %164*/
		Get_motion_code_preheader27preheader_165 = (Get_motion_code_preheader27preheader_163 - Get_motion_code_preheader27preheader_164);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27.preheader*/
	/*   %165 = sub i32 %163, %164*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader27preheader_99)) begin
		Get_motion_code_preheader27preheader_165_reg <= Get_motion_code_preheader27preheader_165;
		if (start == 1'b0 && ^(Get_motion_code_preheader27preheader_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27preheader_165_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27.preheader*/
	/*   %166 = add nsw i32 %164, 24*/
		Get_motion_code_preheader27preheader_166 = (Get_motion_code_preheader27preheader_164 + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27.preheader*/
	/*   %166 = add nsw i32 %164, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader27preheader_99)) begin
		Get_motion_code_preheader27preheader_166_reg <= Get_motion_code_preheader27preheader_166;
		if (start == 1'b0 && ^(Get_motion_code_preheader27preheader_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27preheader_166_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27.preheader*/
	/*   %167 = sub i32 %166, %42*/
		Get_motion_code_preheader27preheader_167 = (Get_motion_code_preheader27preheader_166 - Get_motion_code_Get_Bitsexit_42_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27.preheader*/
	/*   %167 = sub i32 %166, %42*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader27preheader_99)) begin
		Get_motion_code_preheader27preheader_167_reg <= Get_motion_code_preheader27preheader_167;
		if (start == 1'b0 && ^(Get_motion_code_preheader27preheader_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27preheader_167_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader24*/
	/*   %168 = lshr i32 %161, 3*/
		Get_motion_code_preheader24_168 = (Get_motion_code_157_161_reg >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader24*/
	/*   %168 = lshr i32 %161, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader24_100)) begin
		Get_motion_code_preheader24_168_reg <= Get_motion_code_preheader24_168;
		if (start == 1'b0 && ^(Get_motion_code_preheader24_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader24_168_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader24*/
	/*   %169 = shl nuw i32 %168, 3*/
		Get_motion_code_preheader24_169 = (Get_motion_code_preheader24_168 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader24*/
	/*   %169 = shl nuw i32 %168, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader24_100)) begin
		Get_motion_code_preheader24_169_reg <= Get_motion_code_preheader24_169;
		if (start == 1'b0 && ^(Get_motion_code_preheader24_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader24_169_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader24*/
	/*   %170 = add i32 %42, 8*/
		Get_motion_code_preheader24_170 = (Get_motion_code_Get_Bitsexit_42_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader24*/
	/*   %170 = add i32 %42, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader24_100)) begin
		Get_motion_code_preheader24_170_reg <= Get_motion_code_preheader24_170;
		if (start == 1'b0 && ^(Get_motion_code_preheader24_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader24_170_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader24*/
	/*   %171 = sext i8 %152 to i32*/
		Get_motion_code_preheader24_171 = $signed(Get_motion_code_149_152_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader24*/
	/*   %171 = sext i8 %152 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader24_100)) begin
		Get_motion_code_preheader24_171_reg <= Get_motion_code_preheader24_171;
		if (start == 1'b0 && ^(Get_motion_code_preheader24_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader24_171_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader24*/
	/*   %172 = sub i32 %170, %171*/
		Get_motion_code_preheader24_172 = (Get_motion_code_preheader24_170 - Get_motion_code_preheader24_171);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader24*/
	/*   %172 = sub i32 %170, %171*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader24_100)) begin
		Get_motion_code_preheader24_172_reg <= Get_motion_code_preheader24_172;
		if (start == 1'b0 && ^(Get_motion_code_preheader24_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader24_172_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader24*/
	/*   %173 = add nsw i32 %171, 24*/
		Get_motion_code_preheader24_173 = (Get_motion_code_preheader24_171 + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader24*/
	/*   %173 = add nsw i32 %171, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader24_100)) begin
		Get_motion_code_preheader24_173_reg <= Get_motion_code_preheader24_173;
		if (start == 1'b0 && ^(Get_motion_code_preheader24_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader24_173_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader24*/
	/*   %174 = sub i32 %173, %42*/
		Get_motion_code_preheader24_174 = (Get_motion_code_preheader24_173 - Get_motion_code_Get_Bitsexit_42_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader24*/
	/*   %174 = sub i32 %173, %42*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader24_100)) begin
		Get_motion_code_preheader24_174_reg <= Get_motion_code_preheader24_174;
		if (start == 1'b0 && ^(Get_motion_code_preheader24_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader24_174_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %175*/
	/*   %indvar36 = phi i32 [ %indvar.next37, %175 ], [ 0, %.preheader24 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader24_100) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_175_indvar36 = 32'd0;
	end
	/* Get_motion_code: %175*/
	/*   %indvar36 = phi i32 [ %indvar.next37, %175 ], [ 0, %.preheader24 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB__175_103) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_175_185_reg == 1'd1))) */ begin
		Get_motion_code_175_indvar36 = Get_motion_code_175_indvarnext37_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %indvar36 = phi i32 [ %indvar.next37, %175 ], [ 0, %.preheader24 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader24_100) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_175_indvar36_reg <= Get_motion_code_175_indvar36;
		if (start == 1'b0 && ^(Get_motion_code_175_indvar36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_indvar36_reg"); $finish; end
	end
	/* Get_motion_code: %175*/
	/*   %indvar36 = phi i32 [ %indvar.next37, %175 ], [ 0, %.preheader24 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__175_103) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_175_185_reg == 1'd1))) begin
		Get_motion_code_175_indvar36_reg <= Get_motion_code_175_indvar36;
		if (start == 1'b0 && ^(Get_motion_code_175_indvar36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_indvar36_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %175*/
	/*   %176 = phi i32 [ %184, %175 ], [ %154, %.preheader24 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader24_100) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_175_176 = Get_motion_code_149_154_reg;
	end
	/* Get_motion_code: %175*/
	/*   %176 = phi i32 [ %184, %175 ], [ %154, %.preheader24 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB__175_103) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_175_185_reg == 1'd1))) */ begin
		Get_motion_code_175_176 = Get_motion_code_175_184;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %176 = phi i32 [ %184, %175 ], [ %154, %.preheader24 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader24_100) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_175_176_reg <= Get_motion_code_175_176;
		if (start == 1'b0 && ^(Get_motion_code_175_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_176_reg"); $finish; end
	end
	/* Get_motion_code: %175*/
	/*   %176 = phi i32 [ %184, %175 ], [ %154, %.preheader24 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__175_103) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_175_185_reg == 1'd1))) begin
		Get_motion_code_175_176_reg <= Get_motion_code_175_176;
		if (start == 1'b0 && ^(Get_motion_code_175_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_176_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %175*/
	/*   %scevgep38 = getelementptr i8* %158, i32 %indvar36*/
		Get_motion_code_175_scevgep38 = (Get_motion_code_157_158_reg + (1 * Get_motion_code_175_indvar36_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %scevgep38 = getelementptr i8* %158, i32 %indvar36*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_101)) begin
		Get_motion_code_175_scevgep38_reg <= Get_motion_code_175_scevgep38;
		if (start == 1'b0 && ^(Get_motion_code_175_scevgep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_scevgep38_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %175*/
	/*   %177 = shl i32 %indvar36, 3*/
		Get_motion_code_175_177 = (Get_motion_code_175_indvar36_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %177 = shl i32 %indvar36, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_101)) begin
		Get_motion_code_175_177_reg <= Get_motion_code_175_177;
		if (start == 1'b0 && ^(Get_motion_code_175_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_177_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %175*/
	/*   %178 = add i32 %172, %177*/
		Get_motion_code_175_178 = (Get_motion_code_preheader24_172_reg + Get_motion_code_175_177);
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %178 = add i32 %172, %177*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_101)) begin
		Get_motion_code_175_178_reg <= Get_motion_code_175_178;
		if (start == 1'b0 && ^(Get_motion_code_175_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_178_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_175_179 = Get_motion_code_175_179_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %179 = mul i32 %indvar36, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_102)) begin
		Get_motion_code_175_179_reg <= Get_motion_code_175_179;
		if (start == 1'b0 && ^(Get_motion_code_175_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_179_reg"); $finish; end
	end
	/* Get_motion_code: %175*/
	/*   %179 = mul i32 %indvar36, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_102)) begin
		Get_motion_code_175_179_reg <= Get_motion_code_175_179;
		if (start == 1'b0 && ^(Get_motion_code_175_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_179_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %175*/
	/*   %180 = add i32 %174, %179*/
		Get_motion_code_175_180 = (Get_motion_code_preheader24_174_reg + Get_motion_code_175_179);
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %180 = add i32 %174, %179*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_102)) begin
		Get_motion_code_175_180_reg <= Get_motion_code_175_180;
		if (start == 1'b0 && ^(Get_motion_code_175_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_180_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %175*/
	/*   %181 = load i8* %scevgep38, align 1*/
		Get_motion_code_175_181 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %181 = load i8* %scevgep38, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_103)) begin
		Get_motion_code_175_181_reg <= Get_motion_code_175_181;
		if (start == 1'b0 && ^(Get_motion_code_175_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_181_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %175*/
	/*   %182 = zext i8 %181 to i32*/
		Get_motion_code_175_182 = Get_motion_code_175_181;
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %182 = zext i8 %181 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_103)) begin
		Get_motion_code_175_182_reg <= Get_motion_code_175_182;
		if (start == 1'b0 && ^(Get_motion_code_175_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_182_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %175*/
	/*   %183 = shl i32 %182, %180*/
		Get_motion_code_175_183 = (Get_motion_code_175_182 <<< (Get_motion_code_175_180_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %183 = shl i32 %182, %180*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_103)) begin
		Get_motion_code_175_183_reg <= Get_motion_code_175_183;
		if (start == 1'b0 && ^(Get_motion_code_175_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_183_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %175*/
	/*   %184 = or i32 %176, %183*/
		Get_motion_code_175_184 = (Get_motion_code_175_176_reg | Get_motion_code_175_183);
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %184 = or i32 %176, %183*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_103)) begin
		Get_motion_code_175_184_reg <= Get_motion_code_175_184;
		if (start == 1'b0 && ^(Get_motion_code_175_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_184_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %175*/
	/*   %185 = icmp slt i32 %178, 25*/
		Get_motion_code_175_185 = ($signed(Get_motion_code_175_178) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %185 = icmp slt i32 %178, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_101)) begin
		Get_motion_code_175_185_reg <= Get_motion_code_175_185;
		if (start == 1'b0 && ^(Get_motion_code_175_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_185_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %175*/
	/*   %indvar.next37 = add i32 %indvar36, 1*/
		Get_motion_code_175_indvarnext37 = (Get_motion_code_175_indvar36_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %indvar.next37 = add i32 %indvar36, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_101)) begin
		Get_motion_code_175_indvarnext37_reg <= Get_motion_code_175_indvarnext37;
		if (start == 1'b0 && ^(Get_motion_code_175_indvarnext37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_175_indvarnext37_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27*/
	/*   %indvar44 = phi i32 [ %indvar.next45, %Fill_Buffer.exit.i14 ], [ 0, %.preheader27.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader27preheader_99) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader27_indvar44 = 32'd0;
	end
	/* Get_motion_code: %.preheader27*/
	/*   %indvar44 = phi i32 [ %indvar.next45, %Fill_Buffer.exit.i14 ], [ 0, %.preheader27.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti14_199_reg == 1'd1))) */ begin
		Get_motion_code_preheader27_indvar44 = Get_motion_code_Fill_Bufferexiti14_indvarnext45_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27*/
	/*   %indvar44 = phi i32 [ %indvar.next45, %Fill_Buffer.exit.i14 ], [ 0, %.preheader27.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader27preheader_99) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader27_indvar44_reg <= Get_motion_code_preheader27_indvar44;
		if (start == 1'b0 && ^(Get_motion_code_preheader27_indvar44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27_indvar44_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader27*/
	/*   %indvar44 = phi i32 [ %indvar.next45, %Fill_Buffer.exit.i14 ], [ 0, %.preheader27.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti14_199_reg == 1'd1))) begin
		Get_motion_code_preheader27_indvar44_reg <= Get_motion_code_preheader27_indvar44;
		if (start == 1'b0 && ^(Get_motion_code_preheader27_indvar44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27_indvar44_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27*/
	/*   %186 = phi i32 [ %198, %Fill_Buffer.exit.i14 ], [ %154, %.preheader27.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader27preheader_99) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader27_186 = Get_motion_code_149_154_reg;
	end
	/* Get_motion_code: %.preheader27*/
	/*   %186 = phi i32 [ %198, %Fill_Buffer.exit.i14 ], [ %154, %.preheader27.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti14_199_reg == 1'd1))) */ begin
		Get_motion_code_preheader27_186 = Get_motion_code_Fill_Bufferexiti14_198;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27*/
	/*   %186 = phi i32 [ %198, %Fill_Buffer.exit.i14 ], [ %154, %.preheader27.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader27preheader_99) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader27_186_reg <= Get_motion_code_preheader27_186;
		if (start == 1'b0 && ^(Get_motion_code_preheader27_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27_186_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader27*/
	/*   %186 = phi i32 [ %198, %Fill_Buffer.exit.i14 ], [ %154, %.preheader27.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti14_199_reg == 1'd1))) begin
		Get_motion_code_preheader27_186_reg <= Get_motion_code_preheader27_186;
		if (start == 1'b0 && ^(Get_motion_code_preheader27_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27_186_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27*/
	/*   %.pr1852 = phi i8* [ %194, %Fill_Buffer.exit.i14 ], [ %158, %.preheader27.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader27preheader_99) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader27_pr1852 = Get_motion_code_157_158_reg;
	end
	/* Get_motion_code: %.preheader27*/
	/*   %.pr1852 = phi i8* [ %194, %Fill_Buffer.exit.i14 ], [ %158, %.preheader27.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti14_199_reg == 1'd1))) */ begin
		Get_motion_code_preheader27_pr1852 = Get_motion_code_Fill_Bufferexiti14_194_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27*/
	/*   %.pr1852 = phi i8* [ %194, %Fill_Buffer.exit.i14 ], [ %158, %.preheader27.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader27preheader_99) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader27_pr1852_reg <= Get_motion_code_preheader27_pr1852;
		if (start == 1'b0 && ^(Get_motion_code_preheader27_pr1852) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27_pr1852_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader27*/
	/*   %.pr1852 = phi i8* [ %194, %Fill_Buffer.exit.i14 ], [ %158, %.preheader27.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti14_199_reg == 1'd1))) begin
		Get_motion_code_preheader27_pr1852_reg <= Get_motion_code_preheader27_pr1852;
		if (start == 1'b0 && ^(Get_motion_code_preheader27_pr1852) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27_pr1852_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27*/
	/*   %187 = shl i32 %indvar44, 3*/
		Get_motion_code_preheader27_187 = (Get_motion_code_preheader27_indvar44_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27*/
	/*   %187 = shl i32 %indvar44, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader27_104)) begin
		Get_motion_code_preheader27_187_reg <= Get_motion_code_preheader27_187;
		if (start == 1'b0 && ^(Get_motion_code_preheader27_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27_187_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27*/
	/*   %188 = add i32 %165, %187*/
		Get_motion_code_preheader27_188 = (Get_motion_code_preheader27preheader_165_reg + Get_motion_code_preheader27_187);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27*/
	/*   %188 = add i32 %165, %187*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader27_104)) begin
		Get_motion_code_preheader27_188_reg <= Get_motion_code_preheader27_188;
		if (start == 1'b0 && ^(Get_motion_code_preheader27_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27_188_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader27_189 = Get_motion_code_preheader27_189_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27*/
	/*   %189 = mul i32 %indvar44, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader27_105)) begin
		Get_motion_code_preheader27_189_reg <= Get_motion_code_preheader27_189;
		if (start == 1'b0 && ^(Get_motion_code_preheader27_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27_189_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader27*/
	/*   %189 = mul i32 %indvar44, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader27_105)) begin
		Get_motion_code_preheader27_189_reg <= Get_motion_code_preheader27_189;
		if (start == 1'b0 && ^(Get_motion_code_preheader27_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27_189_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27*/
	/*   %190 = add i32 %167, %189*/
		Get_motion_code_preheader27_190 = (Get_motion_code_preheader27preheader_167_reg + Get_motion_code_preheader27_189);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27*/
	/*   %190 = add i32 %167, %189*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader27_105)) begin
		Get_motion_code_preheader27_190_reg <= Get_motion_code_preheader27_190;
		if (start == 1'b0 && ^(Get_motion_code_preheader27_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27_190_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader27*/
	/*   %191 = icmp ult i8* %.pr1852, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader27_191 = (Get_motion_code_preheader27_pr1852_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27*/
	/*   %191 = icmp ult i8* %.pr1852, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader27_104)) begin
		Get_motion_code_preheader27_191_reg <= Get_motion_code_preheader27_191;
		if (start == 1'b0 && ^(Get_motion_code_preheader27_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader27_191_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader26*/
	/*   %indvar39 = phi i32 [ 0, %.preheader26.preheader ], [ %indvar.next40, %192 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader26preheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader26_indvar39 = 32'd0;
	end
	/* Get_motion_code: %.preheader26*/
	/*   %indvar39 = phi i32 [ 0, %.preheader26.preheader ], [ %indvar.next40, %192 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__192_111) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_preheader26_indvar39 = Get_motion_code_192_indvarnext40_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader26*/
	/*   %indvar39 = phi i32 [ 0, %.preheader26.preheader ], [ %indvar.next40, %192 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader26preheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader26_indvar39_reg <= Get_motion_code_preheader26_indvar39;
		if (start == 1'b0 && ^(Get_motion_code_preheader26_indvar39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader26_indvar39_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader26*/
	/*   %indvar39 = phi i32 [ 0, %.preheader26.preheader ], [ %indvar.next40, %192 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__192_111) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader26_indvar39_reg <= Get_motion_code_preheader26_indvar39;
		if (start == 1'b0 && ^(Get_motion_code_preheader26_indvar39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader26_indvar39_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader26*/
	/*   %exitcond41 = icmp eq i32 %indvar39, 2048*/
		Get_motion_code_preheader26_exitcond41 = (Get_motion_code_preheader26_indvar39_reg == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader26*/
	/*   %exitcond41 = icmp eq i32 %indvar39, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader26_107)) begin
		Get_motion_code_preheader26_exitcond41_reg <= Get_motion_code_preheader26_exitcond41;
		if (start == 1'b0 && ^(Get_motion_code_preheader26_exitcond41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader26_exitcond41_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %192*/
	/*   %p2.0.i.i.i12 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar39*/
		Get_motion_code_192_p20iii12 = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_preheader26_indvar39_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %192*/
	/*   %p2.0.i.i.i12 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar39*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_108)) begin
		Get_motion_code_192_p20iii12_reg <= Get_motion_code_192_p20iii12;
		if (start == 1'b0 && ^(Get_motion_code_192_p20iii12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_192_p20iii12_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %192*/
	/*   %p1.0.i.i.i11 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar39*/
		Get_motion_code_192_p10iii11 = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_preheader26_indvar39_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %192*/
	/*   %p1.0.i.i.i11 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar39*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_108)) begin
		Get_motion_code_192_p10iii11_reg <= Get_motion_code_192_p10iii11;
		if (start == 1'b0 && ^(Get_motion_code_192_p10iii11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_192_p10iii11_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %192*/
	/*   %193 = load i8* %p2.0.i.i.i12, align 1*/
		Get_motion_code_192_193 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %192*/
	/*   %193 = load i8* %p2.0.i.i.i12, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_110)) begin
		Get_motion_code_192_193_reg <= Get_motion_code_192_193;
		if (start == 1'b0 && ^(Get_motion_code_192_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_192_193_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %192*/
	/*   %indvar.next40 = add i32 %indvar39, 1*/
		Get_motion_code_192_indvarnext40 = (Get_motion_code_preheader26_indvar39_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %192*/
	/*   %indvar.next40 = add i32 %indvar39, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_108)) begin
		Get_motion_code_192_indvarnext40_reg <= Get_motion_code_192_indvarnext40;
		if (start == 1'b0 && ^(Get_motion_code_192_indvarnext40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_192_indvarnext40_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %.pr1853 = phi i8* [ %.pr1852, %.preheader27 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i14.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader27_105) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader27_191_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexiti14_pr1853 = Get_motion_code_preheader27_pr1852_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %.pr1853 = phi i8* [ %.pr1852, %.preheader27 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i14.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14loopexit_112) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexiti14_pr1853 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %.pr1853 = phi i8* [ %.pr1852, %.preheader27 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i14.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader27_105) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader27_191_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexiti14_pr1853_reg <= Get_motion_code_Fill_Bufferexiti14_pr1853;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti14_pr1853) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti14_pr1853_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %.pr1853 = phi i8* [ %.pr1852, %.preheader27 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i14.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14loopexit_112) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexiti14_pr1853_reg <= Get_motion_code_Fill_Bufferexiti14_pr1853;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti14_pr1853) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti14_pr1853_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %194 = getelementptr inbounds i8* %.pr1853, i32 1*/
		Get_motion_code_Fill_Bufferexiti14_194 = (Get_motion_code_Fill_Bufferexiti14_pr1853_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %194 = getelementptr inbounds i8* %.pr1853, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_113)) begin
		Get_motion_code_Fill_Bufferexiti14_194_reg <= Get_motion_code_Fill_Bufferexiti14_194;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti14_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti14_194_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %195 = load i8* %.pr1853, align 1*/
		Get_motion_code_Fill_Bufferexiti14_195 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %195 = load i8* %.pr1853, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115)) begin
		Get_motion_code_Fill_Bufferexiti14_195_reg <= Get_motion_code_Fill_Bufferexiti14_195;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti14_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti14_195_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %196 = zext i8 %195 to i32*/
		Get_motion_code_Fill_Bufferexiti14_196 = Get_motion_code_Fill_Bufferexiti14_195;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %196 = zext i8 %195 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115)) begin
		Get_motion_code_Fill_Bufferexiti14_196_reg <= Get_motion_code_Fill_Bufferexiti14_196;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti14_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti14_196_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %197 = shl i32 %196, %190*/
		Get_motion_code_Fill_Bufferexiti14_197 = (Get_motion_code_Fill_Bufferexiti14_196 <<< (Get_motion_code_preheader27_190_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %197 = shl i32 %196, %190*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115)) begin
		Get_motion_code_Fill_Bufferexiti14_197_reg <= Get_motion_code_Fill_Bufferexiti14_197;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti14_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti14_197_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %198 = or i32 %186, %197*/
		Get_motion_code_Fill_Bufferexiti14_198 = (Get_motion_code_preheader27_186_reg | Get_motion_code_Fill_Bufferexiti14_197);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %198 = or i32 %186, %197*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_115)) begin
		Get_motion_code_Fill_Bufferexiti14_198_reg <= Get_motion_code_Fill_Bufferexiti14_198;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti14_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti14_198_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %199 = icmp slt i32 %188, 25*/
		Get_motion_code_Fill_Bufferexiti14_199 = ($signed(Get_motion_code_preheader27_188_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %199 = icmp slt i32 %188, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_113)) begin
		Get_motion_code_Fill_Bufferexiti14_199_reg <= Get_motion_code_Fill_Bufferexiti14_199;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti14_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti14_199_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %indvar.next45 = add i32 %indvar44, 1*/
		Get_motion_code_Fill_Bufferexiti14_indvarnext45 = (Get_motion_code_preheader27_indvar44_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %indvar.next45 = add i32 %indvar44, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_113)) begin
		Get_motion_code_Fill_Bufferexiti14_indvarnext45_reg <= Get_motion_code_Fill_Bufferexiti14_indvarnext45;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti14_indvarnext45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti14_indvarnext45_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit25*/
	/*   %200 = add nuw nsw i32 %168, 1*/
		Get_motion_code_loopexit25_200 = (Get_motion_code_preheader24_168_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit25*/
	/*   %200 = add nuw nsw i32 %168, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit25_116)) begin
		Get_motion_code_loopexit25_200_reg <= Get_motion_code_loopexit25_200;
		if (start == 1'b0 && ^(Get_motion_code_loopexit25_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit25_200_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit25*/
	/*   %scevgep84 = getelementptr i8* %158, i32 %200*/
		Get_motion_code_loopexit25_scevgep84 = (Get_motion_code_157_158_reg + (1 * Get_motion_code_loopexit25_200_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit25*/
	/*   %scevgep84 = getelementptr i8* %158, i32 %200*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit25_117)) begin
		Get_motion_code_loopexit25_scevgep84_reg <= Get_motion_code_loopexit25_scevgep84;
		if (start == 1'b0 && ^(Get_motion_code_loopexit25_scevgep84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit25_scevgep84_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %201*/
	/*   %storemerge3 = phi i8* [ %scevgep84, %.loopexit25 ], [ %194, %.loopexit28 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit25_117) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_201_storemerge3 = Get_motion_code_loopexit25_scevgep84;
	end
	/* Get_motion_code: %201*/
	/*   %storemerge3 = phi i8* [ %scevgep84, %.loopexit25 ], [ %194, %.loopexit28 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit28_118) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_201_storemerge3 = Get_motion_code_Fill_Bufferexiti14_194_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %201*/
	/*   %storemerge3 = phi i8* [ %scevgep84, %.loopexit25 ], [ %194, %.loopexit28 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit25_117) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_201_storemerge3_reg <= Get_motion_code_201_storemerge3;
		if (start == 1'b0 && ^(Get_motion_code_201_storemerge3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_201_storemerge3_reg"); $finish; end
	end
	/* Get_motion_code: %201*/
	/*   %storemerge3 = phi i8* [ %scevgep84, %.loopexit25 ], [ %194, %.loopexit28 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit28_118) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_201_storemerge3_reg <= Get_motion_code_201_storemerge3;
		if (start == 1'b0 && ^(Get_motion_code_201_storemerge3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_201_storemerge3_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %201*/
	/*   %storemerge2 = phi i32 [ %184, %.loopexit25 ], [ %198, %.loopexit28 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit25_117) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_201_storemerge2 = Get_motion_code_175_184_reg;
	end
	/* Get_motion_code: %201*/
	/*   %storemerge2 = phi i32 [ %184, %.loopexit25 ], [ %198, %.loopexit28 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit28_118) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_201_storemerge2 = Get_motion_code_Fill_Bufferexiti14_198_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %201*/
	/*   %storemerge2 = phi i32 [ %184, %.loopexit25 ], [ %198, %.loopexit28 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit25_117) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_201_storemerge2_reg <= Get_motion_code_201_storemerge2;
		if (start == 1'b0 && ^(Get_motion_code_201_storemerge2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_201_storemerge2_reg"); $finish; end
	end
	/* Get_motion_code: %201*/
	/*   %storemerge2 = phi i32 [ %184, %.loopexit25 ], [ %198, %.loopexit28 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit28_118) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_201_storemerge2_reg <= Get_motion_code_201_storemerge2;
		if (start == 1'b0 && ^(Get_motion_code_201_storemerge2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_201_storemerge2_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %201*/
	/*   %.pn4 = phi i32 [ %169, %.loopexit25 ], [ %162, %.loopexit28 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit25_117) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_201_pn4 = Get_motion_code_preheader24_169_reg;
	end
	/* Get_motion_code: %201*/
	/*   %.pn4 = phi i32 [ %169, %.loopexit25 ], [ %162, %.loopexit28 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit28_118) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_201_pn4 = Get_motion_code_preheader27preheader_162_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %201*/
	/*   %.pn4 = phi i32 [ %169, %.loopexit25 ], [ %162, %.loopexit28 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit25_117) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_201_pn4_reg <= Get_motion_code_201_pn4;
		if (start == 1'b0 && ^(Get_motion_code_201_pn4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_201_pn4_reg"); $finish; end
	end
	/* Get_motion_code: %201*/
	/*   %.pn4 = phi i32 [ %169, %.loopexit25 ], [ %162, %.loopexit28 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit28_118) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_201_pn4_reg <= Get_motion_code_201_pn4;
		if (start == 1'b0 && ^(Get_motion_code_201_pn4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_201_pn4_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %201*/
	/*   %.pn1.in = add i32 %42, %.pn4*/
		Get_motion_code_201_pn1in = (Get_motion_code_Get_Bitsexit_42_reg + Get_motion_code_201_pn4_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %201*/
	/*   %.pn1.in = add i32 %42, %.pn4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		Get_motion_code_201_pn1in_reg <= Get_motion_code_201_pn1in;
		if (start == 1'b0 && ^(Get_motion_code_201_pn1in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_201_pn1in_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %201*/
	/*   %.pn1 = add i32 %.pn1.in, 8*/
		Get_motion_code_201_pn1 = (Get_motion_code_201_pn1in + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %201*/
	/*   %.pn1 = add i32 %.pn1.in, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		Get_motion_code_201_pn1_reg <= Get_motion_code_201_pn1;
		if (start == 1'b0 && ^(Get_motion_code_201_pn1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_201_pn1_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %201*/
	/*   %Incnt.2.i15 = sub i32 %.pn1, %153*/
		Get_motion_code_201_Incnt2i15 = (Get_motion_code_201_pn1 - Get_motion_code_149_153_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %201*/
	/*   %Incnt.2.i15 = sub i32 %.pn1, %153*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		Get_motion_code_201_Incnt2i15_reg <= Get_motion_code_201_Incnt2i15;
		if (start == 1'b0 && ^(Get_motion_code_201_Incnt2i15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_201_Incnt2i15_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %202 = phi i32 [ %Incnt.2.i15, %201 ], [ %155, %149 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__149_95) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_149_156_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit16_202 = Get_motion_code_149_155_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %202 = phi i32 [ %Incnt.2.i15, %201 ], [ %155, %149 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__201_121) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Flush_Bufferexit16_202 = Get_motion_code_201_Incnt2i15_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %202 = phi i32 [ %Incnt.2.i15, %201 ], [ %155, %149 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__149_95) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_149_156_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit16_202_reg <= Get_motion_code_Flush_Bufferexit16_202;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit16_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit16_202_reg"); $finish; end
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %202 = phi i32 [ %Incnt.2.i15, %201 ], [ %155, %149 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__201_121) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit16_202_reg <= Get_motion_code_Flush_Bufferexit16_202;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit16_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit16_202_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %203 = phi i32 [ %storemerge2, %201 ], [ %154, %149 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__149_95) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_149_156_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit16_203 = Get_motion_code_149_154_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %203 = phi i32 [ %storemerge2, %201 ], [ %154, %149 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__201_121) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Flush_Bufferexit16_203 = Get_motion_code_201_storemerge2_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %203 = phi i32 [ %storemerge2, %201 ], [ %154, %149 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__149_95) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_149_156_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit16_203_reg <= Get_motion_code_Flush_Bufferexit16_203;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit16_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit16_203_reg"); $finish; end
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %203 = phi i32 [ %storemerge2, %201 ], [ %154, %149 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__201_121) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit16_203_reg <= Get_motion_code_Flush_Bufferexit16_203;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit16_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit16_203_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %204 = shl i32 %203, 1*/
		Get_motion_code_Flush_Bufferexit16_204 = (Get_motion_code_Flush_Bufferexit16_203_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %204 = shl i32 %203, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		Get_motion_code_Flush_Bufferexit16_204_reg <= Get_motion_code_Flush_Bufferexit16_204;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit16_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit16_204_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %205 = add nsw i32 %202, -1*/
		Get_motion_code_Flush_Bufferexit16_205 = (Get_motion_code_Flush_Bufferexit16_202_reg + -32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %205 = add nsw i32 %202, -1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		Get_motion_code_Flush_Bufferexit16_205_reg <= Get_motion_code_Flush_Bufferexit16_205;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit16_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit16_205_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %206 = icmp slt i32 %202, 26*/
		Get_motion_code_Flush_Bufferexit16_206 = ($signed(Get_motion_code_Flush_Bufferexit16_202_reg) < $signed(32'd26));
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   %206 = icmp slt i32 %202, 26*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		Get_motion_code_Flush_Bufferexit16_206_reg <= Get_motion_code_Flush_Bufferexit16_206;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit16_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit16_206_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %207*/
	/*   %208 = load i8** @ld_Rdptr, align 4*/
		Get_motion_code_207_208 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %207*/
	/*   %208 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__207_126)) begin
		Get_motion_code_207_208_reg <= Get_motion_code_207_208;
		if (start == 1'b0 && ^(Get_motion_code_207_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_207_208_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %207*/
	/*   %209 = icmp ult i8* %208, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_207_209 = (Get_motion_code_207_208 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %207*/
	/*   %209 = icmp ult i8* %208, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__207_126)) begin
		Get_motion_code_207_209_reg <= Get_motion_code_207_209;
		if (start == 1'b0 && ^(Get_motion_code_207_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_207_209_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %207*/
	/*   %210 = sub i32 25, %202*/
		Get_motion_code_207_210 = (32'd25 - Get_motion_code_Flush_Bufferexit16_202_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %207*/
	/*   %210 = sub i32 25, %202*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__207_124)) begin
		Get_motion_code_207_210_reg <= Get_motion_code_207_210;
		if (start == 1'b0 && ^(Get_motion_code_207_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_207_210_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %207*/
	/*   %211 = lshr i32 %210, 3*/
		Get_motion_code_207_211 = (Get_motion_code_207_210 >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %207*/
	/*   %211 = lshr i32 %210, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__207_124)) begin
		Get_motion_code_207_211_reg <= Get_motion_code_207_211;
		if (start == 1'b0 && ^(Get_motion_code_207_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_207_211_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %207*/
	/*   %212 = shl nuw i32 %211, 3*/
		Get_motion_code_207_212 = (Get_motion_code_207_211 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %207*/
	/*   %212 = shl nuw i32 %211, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__207_124)) begin
		Get_motion_code_207_212_reg <= Get_motion_code_207_212;
		if (start == 1'b0 && ^(Get_motion_code_207_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_207_212_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %207*/
	/*   %213 = add i32 %202, %212*/
		Get_motion_code_207_213 = (Get_motion_code_Flush_Bufferexit16_202_reg + Get_motion_code_207_212);
end
always @(posedge clk) begin
	/* Get_motion_code: %207*/
	/*   %213 = add i32 %202, %212*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__207_124)) begin
		Get_motion_code_207_213_reg <= Get_motion_code_207_213;
		if (start == 1'b0 && ^(Get_motion_code_207_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_207_213_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i28.preheader*/
	/*   %214 = add i32 %202, 7*/
		Get_motion_code_preheader2i28preheader_214 = (Get_motion_code_Flush_Bufferexit16_202_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i28.preheader*/
	/*   %214 = add i32 %202, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28preheader_127)) begin
		Get_motion_code_preheader2i28preheader_214_reg <= Get_motion_code_preheader2i28preheader_214;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28preheader_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28preheader_214_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i28.preheader*/
	/*   %215 = sub i32 25, %202*/
		Get_motion_code_preheader2i28preheader_215 = (32'd25 - Get_motion_code_Flush_Bufferexit16_202_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i28.preheader*/
	/*   %215 = sub i32 25, %202*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28preheader_127)) begin
		Get_motion_code_preheader2i28preheader_215_reg <= Get_motion_code_preheader2i28preheader_215;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28preheader_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28preheader_215_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25.preheader*/
	/*   %216 = add i32 %202, 7*/
		Get_motion_code_preheaderi25preheader_216 = (Get_motion_code_Flush_Bufferexit16_202_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25.preheader*/
	/*   %216 = add i32 %202, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25preheader_128)) begin
		Get_motion_code_preheaderi25preheader_216_reg <= Get_motion_code_preheaderi25preheader_216;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25preheader_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25preheader_216_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25.preheader*/
	/*   %217 = sub i32 25, %202*/
		Get_motion_code_preheaderi25preheader_217 = (32'd25 - Get_motion_code_Flush_Bufferexit16_202_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25.preheader*/
	/*   %217 = sub i32 25, %202*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25preheader_128)) begin
		Get_motion_code_preheaderi25preheader_217_reg <= Get_motion_code_preheaderi25preheader_217;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25preheader_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25preheader_217_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %indvar27 = phi i32 [ 0, %.preheader.i25.preheader ], [ %indvar.next28, %.preheader.i25 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25preheader_128) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi25_indvar27 = 32'd0;
	end
	/* Get_motion_code: %.preheader.i25*/
	/*   %indvar27 = phi i32 [ 0, %.preheader.i25.preheader ], [ %indvar.next28, %.preheader.i25 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_131) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi25_227_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi25_indvar27 = Get_motion_code_preheaderi25_indvarnext28_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %indvar27 = phi i32 [ 0, %.preheader.i25.preheader ], [ %indvar.next28, %.preheader.i25 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25preheader_128) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi25_indvar27_reg <= Get_motion_code_preheaderi25_indvar27;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_indvar27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_indvar27_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i25*/
	/*   %indvar27 = phi i32 [ 0, %.preheader.i25.preheader ], [ %indvar.next28, %.preheader.i25 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_131) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi25_227_reg == 1'd1))) begin
		Get_motion_code_preheaderi25_indvar27_reg <= Get_motion_code_preheaderi25_indvar27;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_indvar27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_indvar27_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %218 = phi i32 [ %204, %.preheader.i25.preheader ], [ %226, %.preheader.i25 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25preheader_128) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi25_218 = Get_motion_code_Flush_Bufferexit16_204_reg;
	end
	/* Get_motion_code: %.preheader.i25*/
	/*   %218 = phi i32 [ %204, %.preheader.i25.preheader ], [ %226, %.preheader.i25 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_131) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi25_227_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi25_218 = Get_motion_code_preheaderi25_226;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %218 = phi i32 [ %204, %.preheader.i25.preheader ], [ %226, %.preheader.i25 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25preheader_128) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi25_218_reg <= Get_motion_code_preheaderi25_218;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_218_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i25*/
	/*   %218 = phi i32 [ %204, %.preheader.i25.preheader ], [ %226, %.preheader.i25 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_131) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi25_227_reg == 1'd1))) begin
		Get_motion_code_preheaderi25_218_reg <= Get_motion_code_preheaderi25_218;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_218_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %scevgep29 = getelementptr i8* %208, i32 %indvar27*/
		Get_motion_code_preheaderi25_scevgep29 = (Get_motion_code_207_208_reg + (1 * Get_motion_code_preheaderi25_indvar27_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %scevgep29 = getelementptr i8* %208, i32 %indvar27*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_129)) begin
		Get_motion_code_preheaderi25_scevgep29_reg <= Get_motion_code_preheaderi25_scevgep29;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_scevgep29_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %219 = shl i32 %indvar27, 3*/
		Get_motion_code_preheaderi25_219 = (Get_motion_code_preheaderi25_indvar27_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %219 = shl i32 %indvar27, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_129)) begin
		Get_motion_code_preheaderi25_219_reg <= Get_motion_code_preheaderi25_219;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_219_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %220 = add i32 %216, %219*/
		Get_motion_code_preheaderi25_220 = (Get_motion_code_preheaderi25preheader_216_reg + Get_motion_code_preheaderi25_219);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %220 = add i32 %216, %219*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_129)) begin
		Get_motion_code_preheaderi25_220_reg <= Get_motion_code_preheaderi25_220;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_220_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheaderi25_221 = Get_motion_code_preheaderi25_221_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %221 = mul i32 %indvar27, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_130)) begin
		Get_motion_code_preheaderi25_221_reg <= Get_motion_code_preheaderi25_221;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_221_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i25*/
	/*   %221 = mul i32 %indvar27, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_130)) begin
		Get_motion_code_preheaderi25_221_reg <= Get_motion_code_preheaderi25_221;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_221_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %222 = add i32 %217, %221*/
		Get_motion_code_preheaderi25_222 = (Get_motion_code_preheaderi25preheader_217_reg + Get_motion_code_preheaderi25_221);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %222 = add i32 %217, %221*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_130)) begin
		Get_motion_code_preheaderi25_222_reg <= Get_motion_code_preheaderi25_222;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_222_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %223 = load i8* %scevgep29, align 1*/
		Get_motion_code_preheaderi25_223 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %223 = load i8* %scevgep29, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_131)) begin
		Get_motion_code_preheaderi25_223_reg <= Get_motion_code_preheaderi25_223;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_223_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %224 = zext i8 %223 to i32*/
		Get_motion_code_preheaderi25_224 = Get_motion_code_preheaderi25_223;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %224 = zext i8 %223 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_131)) begin
		Get_motion_code_preheaderi25_224_reg <= Get_motion_code_preheaderi25_224;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_224_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %225 = shl i32 %224, %222*/
		Get_motion_code_preheaderi25_225 = (Get_motion_code_preheaderi25_224 <<< (Get_motion_code_preheaderi25_222_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %225 = shl i32 %224, %222*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_131)) begin
		Get_motion_code_preheaderi25_225_reg <= Get_motion_code_preheaderi25_225;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_225_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %226 = or i32 %218, %225*/
		Get_motion_code_preheaderi25_226 = (Get_motion_code_preheaderi25_218_reg | Get_motion_code_preheaderi25_225);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %226 = or i32 %218, %225*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_131)) begin
		Get_motion_code_preheaderi25_226_reg <= Get_motion_code_preheaderi25_226;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_226_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %227 = icmp slt i32 %220, 25*/
		Get_motion_code_preheaderi25_227 = ($signed(Get_motion_code_preheaderi25_220) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %227 = icmp slt i32 %220, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_129)) begin
		Get_motion_code_preheaderi25_227_reg <= Get_motion_code_preheaderi25_227;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_227_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %indvar.next28 = add i32 %indvar27, 1*/
		Get_motion_code_preheaderi25_indvarnext28 = (Get_motion_code_preheaderi25_indvar27_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %indvar.next28 = add i32 %indvar27, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_129)) begin
		Get_motion_code_preheaderi25_indvarnext28_reg <= Get_motion_code_preheaderi25_indvarnext28;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi25_indvarnext28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi25_indvarnext28_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %indvar34 = phi i32 [ 0, %.preheader2.i28.preheader ], [ %indvar.next35, %Fill_Buffer.exit.i.i34 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28preheader_127) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i28_indvar34 = 32'd0;
	end
	/* Get_motion_code: %.preheader2.i28*/
	/*   %indvar34 = phi i32 [ 0, %.preheader2.i28.preheader ], [ %indvar.next35, %Fill_Buffer.exit.i.i34 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii34_241_reg == 1'd1))) */ begin
		Get_motion_code_preheader2i28_indvar34 = Get_motion_code_Fill_Bufferexitii34_indvarnext35_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %indvar34 = phi i32 [ 0, %.preheader2.i28.preheader ], [ %indvar.next35, %Fill_Buffer.exit.i.i34 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28preheader_127) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i28_indvar34_reg <= Get_motion_code_preheader2i28_indvar34;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28_indvar34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28_indvar34_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i28*/
	/*   %indvar34 = phi i32 [ 0, %.preheader2.i28.preheader ], [ %indvar.next35, %Fill_Buffer.exit.i.i34 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii34_241_reg == 1'd1))) begin
		Get_motion_code_preheader2i28_indvar34_reg <= Get_motion_code_preheader2i28_indvar34;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28_indvar34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28_indvar34_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %228 = phi i32 [ %204, %.preheader2.i28.preheader ], [ %240, %Fill_Buffer.exit.i.i34 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28preheader_127) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i28_228 = Get_motion_code_Flush_Bufferexit16_204_reg;
	end
	/* Get_motion_code: %.preheader2.i28*/
	/*   %228 = phi i32 [ %204, %.preheader2.i28.preheader ], [ %240, %Fill_Buffer.exit.i.i34 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii34_241_reg == 1'd1))) */ begin
		Get_motion_code_preheader2i28_228 = Get_motion_code_Fill_Bufferexitii34_240;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %228 = phi i32 [ %204, %.preheader2.i28.preheader ], [ %240, %Fill_Buffer.exit.i.i34 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28preheader_127) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i28_228_reg <= Get_motion_code_preheader2i28_228;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28_228_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i28*/
	/*   %228 = phi i32 [ %204, %.preheader2.i28.preheader ], [ %240, %Fill_Buffer.exit.i.i34 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii34_241_reg == 1'd1))) begin
		Get_motion_code_preheader2i28_228_reg <= Get_motion_code_preheader2i28_228;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28_228_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %.pr8.i26 = phi i8* [ %208, %.preheader2.i28.preheader ], [ %236, %Fill_Buffer.exit.i.i34 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28preheader_127) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i28_pr8i26 = Get_motion_code_207_208_reg;
	end
	/* Get_motion_code: %.preheader2.i28*/
	/*   %.pr8.i26 = phi i8* [ %208, %.preheader2.i28.preheader ], [ %236, %Fill_Buffer.exit.i.i34 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii34_241_reg == 1'd1))) */ begin
		Get_motion_code_preheader2i28_pr8i26 = Get_motion_code_Fill_Bufferexitii34_236_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %.pr8.i26 = phi i8* [ %208, %.preheader2.i28.preheader ], [ %236, %Fill_Buffer.exit.i.i34 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28preheader_127) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i28_pr8i26_reg <= Get_motion_code_preheader2i28_pr8i26;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28_pr8i26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28_pr8i26_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i28*/
	/*   %.pr8.i26 = phi i8* [ %208, %.preheader2.i28.preheader ], [ %236, %Fill_Buffer.exit.i.i34 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii34_241_reg == 1'd1))) begin
		Get_motion_code_preheader2i28_pr8i26_reg <= Get_motion_code_preheader2i28_pr8i26;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28_pr8i26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28_pr8i26_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %229 = shl i32 %indvar34, 3*/
		Get_motion_code_preheader2i28_229 = (Get_motion_code_preheader2i28_indvar34_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %229 = shl i32 %indvar34, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28_132)) begin
		Get_motion_code_preheader2i28_229_reg <= Get_motion_code_preheader2i28_229;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28_229_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %230 = add i32 %214, %229*/
		Get_motion_code_preheader2i28_230 = (Get_motion_code_preheader2i28preheader_214_reg + Get_motion_code_preheader2i28_229);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %230 = add i32 %214, %229*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28_132)) begin
		Get_motion_code_preheader2i28_230_reg <= Get_motion_code_preheader2i28_230;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28_230_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader2i28_231 = Get_motion_code_preheader2i28_231_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %231 = mul i32 %indvar34, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28_133)) begin
		Get_motion_code_preheader2i28_231_reg <= Get_motion_code_preheader2i28_231;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28_231_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i28*/
	/*   %231 = mul i32 %indvar34, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28_133)) begin
		Get_motion_code_preheader2i28_231_reg <= Get_motion_code_preheader2i28_231;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28_231_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %232 = add i32 %215, %231*/
		Get_motion_code_preheader2i28_232 = (Get_motion_code_preheader2i28preheader_215_reg + Get_motion_code_preheader2i28_231);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %232 = add i32 %215, %231*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28_133)) begin
		Get_motion_code_preheader2i28_232_reg <= Get_motion_code_preheader2i28_232;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28_232_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %233 = icmp ult i8* %.pr8.i26, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader2i28_233 = (Get_motion_code_preheader2i28_pr8i26_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %233 = icmp ult i8* %.pr8.i26, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28_132)) begin
		Get_motion_code_preheader2i28_233_reg <= Get_motion_code_preheader2i28_233;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i28_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i28_233_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i32*/
	/*   %indvar30 = phi i32 [ 0, %.preheader1.i32.preheader ], [ %indvar.next31, %234 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i32preheader_134) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i32_indvar30 = 32'd0;
	end
	/* Get_motion_code: %.preheader1.i32*/
	/*   %indvar30 = phi i32 [ 0, %.preheader1.i32.preheader ], [ %indvar.next31, %234 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__234_139) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_preheader1i32_indvar30 = Get_motion_code_234_indvarnext31_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i32*/
	/*   %indvar30 = phi i32 [ 0, %.preheader1.i32.preheader ], [ %indvar.next31, %234 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i32preheader_134) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i32_indvar30_reg <= Get_motion_code_preheader1i32_indvar30;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i32_indvar30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i32_indvar30_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i32*/
	/*   %indvar30 = phi i32 [ 0, %.preheader1.i32.preheader ], [ %indvar.next31, %234 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__234_139) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i32_indvar30_reg <= Get_motion_code_preheader1i32_indvar30;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i32_indvar30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i32_indvar30_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i32*/
	/*   %exitcond = icmp eq i32 %indvar30, 2048*/
		Get_motion_code_preheader1i32_exitcond = (Get_motion_code_preheader1i32_indvar30_reg == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i32*/
	/*   %exitcond = icmp eq i32 %indvar30, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i32_135)) begin
		Get_motion_code_preheader1i32_exitcond_reg <= Get_motion_code_preheader1i32_exitcond;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i32_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i32_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %234*/
	/*   %p2.0.i.i.i.i30 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar30*/
		Get_motion_code_234_p20iiii30 = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_preheader1i32_indvar30_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %234*/
	/*   %p2.0.i.i.i.i30 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar30*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_136)) begin
		Get_motion_code_234_p20iiii30_reg <= Get_motion_code_234_p20iiii30;
		if (start == 1'b0 && ^(Get_motion_code_234_p20iiii30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_234_p20iiii30_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %234*/
	/*   %p1.0.i.i.i.i29 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar30*/
		Get_motion_code_234_p10iiii29 = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_preheader1i32_indvar30_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %234*/
	/*   %p1.0.i.i.i.i29 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar30*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_136)) begin
		Get_motion_code_234_p10iiii29_reg <= Get_motion_code_234_p10iiii29;
		if (start == 1'b0 && ^(Get_motion_code_234_p10iiii29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_234_p10iiii29_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %234*/
	/*   %235 = load i8* %p2.0.i.i.i.i30, align 1*/
		Get_motion_code_234_235 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %234*/
	/*   %235 = load i8* %p2.0.i.i.i.i30, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_138)) begin
		Get_motion_code_234_235_reg <= Get_motion_code_234_235;
		if (start == 1'b0 && ^(Get_motion_code_234_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_234_235_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %234*/
	/*   %indvar.next31 = add i32 %indvar30, 1*/
		Get_motion_code_234_indvarnext31 = (Get_motion_code_preheader1i32_indvar30_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %234*/
	/*   %indvar.next31 = add i32 %indvar30, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_136)) begin
		Get_motion_code_234_indvarnext31_reg <= Get_motion_code_234_indvarnext31;
		if (start == 1'b0 && ^(Get_motion_code_234_indvarnext31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_234_indvarnext31_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %.pr9.i33 = phi i8* [ %.pr8.i26, %.preheader2.i28 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i34.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28_133) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader2i28_233_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitii34_pr9i33 = Get_motion_code_preheader2i28_pr8i26_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %.pr9.i33 = phi i8* [ %.pr8.i26, %.preheader2.i28 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i34.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34loopexit_140) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexitii34_pr9i33 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %.pr9.i33 = phi i8* [ %.pr8.i26, %.preheader2.i28 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i34.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i28_133) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader2i28_233_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitii34_pr9i33_reg <= Get_motion_code_Fill_Bufferexitii34_pr9i33;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii34_pr9i33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii34_pr9i33_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %.pr9.i33 = phi i8* [ %.pr8.i26, %.preheader2.i28 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i34.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34loopexit_140) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexitii34_pr9i33_reg <= Get_motion_code_Fill_Bufferexitii34_pr9i33;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii34_pr9i33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii34_pr9i33_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %236 = getelementptr inbounds i8* %.pr9.i33, i32 1*/
		Get_motion_code_Fill_Bufferexitii34_236 = (Get_motion_code_Fill_Bufferexitii34_pr9i33_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %236 = getelementptr inbounds i8* %.pr9.i33, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_141)) begin
		Get_motion_code_Fill_Bufferexitii34_236_reg <= Get_motion_code_Fill_Bufferexitii34_236;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii34_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii34_236_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %237 = load i8* %.pr9.i33, align 1*/
		Get_motion_code_Fill_Bufferexitii34_237 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %237 = load i8* %.pr9.i33, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143)) begin
		Get_motion_code_Fill_Bufferexitii34_237_reg <= Get_motion_code_Fill_Bufferexitii34_237;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii34_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii34_237_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %238 = zext i8 %237 to i32*/
		Get_motion_code_Fill_Bufferexitii34_238 = Get_motion_code_Fill_Bufferexitii34_237;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %238 = zext i8 %237 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143)) begin
		Get_motion_code_Fill_Bufferexitii34_238_reg <= Get_motion_code_Fill_Bufferexitii34_238;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii34_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii34_238_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %239 = shl i32 %238, %232*/
		Get_motion_code_Fill_Bufferexitii34_239 = (Get_motion_code_Fill_Bufferexitii34_238 <<< (Get_motion_code_preheader2i28_232_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %239 = shl i32 %238, %232*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143)) begin
		Get_motion_code_Fill_Bufferexitii34_239_reg <= Get_motion_code_Fill_Bufferexitii34_239;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii34_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii34_239_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %240 = or i32 %228, %239*/
		Get_motion_code_Fill_Bufferexitii34_240 = (Get_motion_code_preheader2i28_228_reg | Get_motion_code_Fill_Bufferexitii34_239);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %240 = or i32 %228, %239*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_143)) begin
		Get_motion_code_Fill_Bufferexitii34_240_reg <= Get_motion_code_Fill_Bufferexitii34_240;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii34_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii34_240_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %241 = icmp slt i32 %230, 25*/
		Get_motion_code_Fill_Bufferexitii34_241 = ($signed(Get_motion_code_preheader2i28_230_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %241 = icmp slt i32 %230, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_141)) begin
		Get_motion_code_Fill_Bufferexitii34_241_reg <= Get_motion_code_Fill_Bufferexitii34_241;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii34_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii34_241_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %indvar.next35 = add i32 %indvar34, 1*/
		Get_motion_code_Fill_Bufferexitii34_indvarnext35 = (Get_motion_code_preheader2i28_indvar34_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %indvar.next35 = add i32 %indvar34, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_141)) begin
		Get_motion_code_Fill_Bufferexitii34_indvarnext35_reg <= Get_motion_code_Fill_Bufferexitii34_indvarnext35;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii34_indvarnext35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii34_indvarnext35_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i36*/
	/*   %242 = add nuw nsw i32 %211, 1*/
		Get_motion_code_loopexiti36_242 = (Get_motion_code_207_211_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i36*/
	/*   %242 = add nuw nsw i32 %211, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti36_144)) begin
		Get_motion_code_loopexiti36_242_reg <= Get_motion_code_loopexiti36_242;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti36_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti36_242_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i36*/
	/*   %scevgep.i35 = getelementptr i8* %208, i32 %242*/
		Get_motion_code_loopexiti36_scevgepi35 = (Get_motion_code_207_208_reg + (1 * Get_motion_code_loopexiti36_242_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i36*/
	/*   %scevgep.i35 = getelementptr i8* %208, i32 %242*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti36_145)) begin
		Get_motion_code_loopexiti36_scevgepi35_reg <= Get_motion_code_loopexiti36_scevgepi35;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti36_scevgepi35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti36_scevgepi35_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit3.i37*/
	/*   %storemerge1.i38 = phi i8* [ %scevgep.i35, %.loopexit.i36 ], [ %236, %.loopexit3.i37.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti36_145) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i37_storemerge1i38 = Get_motion_code_loopexiti36_scevgepi35;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   %storemerge1.i38 = phi i8* [ %scevgep.i35, %.loopexit.i36 ], [ %236, %.loopexit3.i37.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37loopexit_146) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit3i37_storemerge1i38 = Get_motion_code_Fill_Bufferexitii34_236_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit3.i37*/
	/*   %storemerge1.i38 = phi i8* [ %scevgep.i35, %.loopexit.i36 ], [ %236, %.loopexit3.i37.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti36_145) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i37_storemerge1i38_reg <= Get_motion_code_loopexit3i37_storemerge1i38;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i37_storemerge1i38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i37_storemerge1i38_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   %storemerge1.i38 = phi i8* [ %scevgep.i35, %.loopexit.i36 ], [ %236, %.loopexit3.i37.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37loopexit_146) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i37_storemerge1i38_reg <= Get_motion_code_loopexit3i37_storemerge1i38;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i37_storemerge1i38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i37_storemerge1i38_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit3.i37*/
	/*   %storemerge.i39 = phi i32 [ %226, %.loopexit.i36 ], [ %240, %.loopexit3.i37.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti36_145) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i37_storemergei39 = Get_motion_code_preheaderi25_226_reg;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   %storemerge.i39 = phi i32 [ %226, %.loopexit.i36 ], [ %240, %.loopexit3.i37.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37loopexit_146) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit3i37_storemergei39 = Get_motion_code_Fill_Bufferexitii34_240_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit3.i37*/
	/*   %storemerge.i39 = phi i32 [ %226, %.loopexit.i36 ], [ %240, %.loopexit3.i37.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti36_145) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i37_storemergei39_reg <= Get_motion_code_loopexit3i37_storemergei39;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i37_storemergei39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i37_storemergei39_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   %storemerge.i39 = phi i32 [ %226, %.loopexit.i36 ], [ %240, %.loopexit3.i37.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37loopexit_146) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i37_storemergei39_reg <= Get_motion_code_loopexit3i37_storemergei39;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i37_storemergei39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i37_storemergei39_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit3.i37*/
	/*   %Incnt.2.i.i40 = add i32 %213, 7*/
		Get_motion_code_loopexit3i37_Incnt2ii40 = (Get_motion_code_207_213_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit3.i37*/
	/*   %Incnt.2.i.i40 = add i32 %213, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_147)) begin
		Get_motion_code_loopexit3i37_Incnt2ii40_reg <= Get_motion_code_loopexit3i37_Incnt2ii40;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i37_Incnt2ii40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i37_Incnt2ii40_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %243 = icmp slt i32 %203, 0*/
		Get_motion_code_Get_Bitsexit41_243 = ($signed(Get_motion_code_Flush_Bufferexit16_203_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %243 = icmp slt i32 %203, 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_150)) begin
		Get_motion_code_Get_Bitsexit41_243_reg <= Get_motion_code_Get_Bitsexit41_243;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit41_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit41_243_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %244 = getelementptr inbounds [8 x [2 x i8]]* @MVtab1, i32 0, i32 %150, i32 0*/
		Get_motion_code_Get_Bitsexit41_244 = (1'd0 | (2 * Get_motion_code_149_150_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %244 = getelementptr inbounds [8 x [2 x i8]]* @MVtab1, i32 0, i32 %150, i32 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_150)) begin
		Get_motion_code_Get_Bitsexit41_244_reg <= Get_motion_code_Get_Bitsexit41_244;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit41_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit41_244_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %245 = load i8* %244, align 1*/
		Get_motion_code_Get_Bitsexit41_245 = MVtab1_out_a;
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %245 = load i8* %244, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_151)) begin
		Get_motion_code_Get_Bitsexit41_245_reg <= Get_motion_code_Get_Bitsexit41_245;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit41_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit41_245_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %246 = sext i8 %245 to i32*/
		Get_motion_code_Get_Bitsexit41_246 = $signed(Get_motion_code_Get_Bitsexit41_245);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %246 = sext i8 %245 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_151)) begin
		Get_motion_code_Get_Bitsexit41_246_reg <= Get_motion_code_Get_Bitsexit41_246;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit41_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit41_246_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %247 = sub nsw i32 0, %246*/
		Get_motion_code_Get_Bitsexit41_247 = (32'd0 - Get_motion_code_Get_Bitsexit41_246);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %247 = sub nsw i32 0, %246*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_151)) begin
		Get_motion_code_Get_Bitsexit41_247_reg <= Get_motion_code_Get_Bitsexit41_247;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit41_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit41_247_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %.88 = select i1 %243, i32 %247, i32 %246*/
		Get_motion_code_Get_Bitsexit41_88 = (Get_motion_code_Get_Bitsexit41_243_reg ? Get_motion_code_Get_Bitsexit41_247 : Get_motion_code_Get_Bitsexit41_246);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %.88 = select i1 %243, i32 %247, i32 %246*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_151)) begin
		Get_motion_code_Get_Bitsexit41_88_reg <= Get_motion_code_Get_Bitsexit41_88;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit41_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit41_88_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %248*/
	/*   %249 = add nsw i32 %46, -12*/
		Get_motion_code_248_249 = (Get_motion_code_45_46_reg + -32'd12);
end
always @(posedge clk) begin
	/* Get_motion_code: %248*/
	/*   %249 = add nsw i32 %46, -12*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__248_152)) begin
		Get_motion_code_248_249_reg <= Get_motion_code_248_249;
		if (start == 1'b0 && ^(Get_motion_code_248_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_248_249_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %248*/
	/*   %250 = icmp slt i32 %249, 0*/
		Get_motion_code_248_250 = ($signed(Get_motion_code_248_249) < $signed(32'd0));
end
always @(posedge clk) begin
	/* Get_motion_code: %248*/
	/*   %250 = icmp slt i32 %249, 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__248_152)) begin
		Get_motion_code_248_250_reg <= Get_motion_code_248_250;
		if (start == 1'b0 && ^(Get_motion_code_248_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_248_250_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %251*/
	/*   %252 = getelementptr inbounds [12 x [2 x i8]]* @MVtab2, i32 0, i32 %249, i32 1*/
		Get_motion_code_251_252 = (1'd0 | ((2 * Get_motion_code_248_249_reg) + (1 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %251*/
	/*   %252 = getelementptr inbounds [12 x [2 x i8]]* @MVtab2, i32 0, i32 %249, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_153)) begin
		Get_motion_code_251_252_reg <= Get_motion_code_251_252;
		if (start == 1'b0 && ^(Get_motion_code_251_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_251_252_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %251*/
	/*   %253 = load i8* %252, align 1*/
		Get_motion_code_251_253 = MVtab2_out_a;
end
always @(posedge clk) begin
	/* Get_motion_code: %251*/
	/*   %253 = load i8* %252, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		Get_motion_code_251_253_reg <= Get_motion_code_251_253;
		if (start == 1'b0 && ^(Get_motion_code_251_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_251_253_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %251*/
	/*   %254 = sext i8 %253 to i32*/
		Get_motion_code_251_254 = $signed(Get_motion_code_251_253);
end
always @(posedge clk) begin
	/* Get_motion_code: %251*/
	/*   %254 = sext i8 %253 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		Get_motion_code_251_254_reg <= Get_motion_code_251_254;
		if (start == 1'b0 && ^(Get_motion_code_251_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_251_254_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %251*/
	/*   %255 = shl i32 %43, %254*/
		Get_motion_code_251_255 = (Get_motion_code_Get_Bitsexit_43_reg <<< (Get_motion_code_251_254 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %251*/
	/*   %255 = shl i32 %43, %254*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		Get_motion_code_251_255_reg <= Get_motion_code_251_255;
		if (start == 1'b0 && ^(Get_motion_code_251_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_251_255_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %251*/
	/*   %256 = sub nsw i32 %42, %254*/
		Get_motion_code_251_256 = (Get_motion_code_Get_Bitsexit_42_reg - Get_motion_code_251_254);
end
always @(posedge clk) begin
	/* Get_motion_code: %251*/
	/*   %256 = sub nsw i32 %42, %254*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		Get_motion_code_251_256_reg <= Get_motion_code_251_256;
		if (start == 1'b0 && ^(Get_motion_code_251_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_251_256_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %251*/
	/*   %257 = icmp slt i32 %256, 25*/
		Get_motion_code_251_257 = ($signed(Get_motion_code_251_256) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %251*/
	/*   %257 = icmp slt i32 %256, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		Get_motion_code_251_257_reg <= Get_motion_code_251_257;
		if (start == 1'b0 && ^(Get_motion_code_251_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_251_257_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %258*/
	/*   %259 = load i8** @ld_Rdptr, align 4*/
		Get_motion_code_258_259 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %258*/
	/*   %259 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__258_158)) begin
		Get_motion_code_258_259_reg <= Get_motion_code_258_259;
		if (start == 1'b0 && ^(Get_motion_code_258_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_258_259_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %258*/
	/*   %260 = icmp ult i8* %259, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_258_260 = (Get_motion_code_258_259 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %258*/
	/*   %260 = icmp ult i8* %259, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__258_158)) begin
		Get_motion_code_258_260_reg <= Get_motion_code_258_260;
		if (start == 1'b0 && ^(Get_motion_code_258_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_258_260_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %258*/
	/*   %261 = add nsw i32 %254, 24*/
		Get_motion_code_258_261 = (Get_motion_code_251_254_reg + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %258*/
	/*   %261 = add nsw i32 %254, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__258_156)) begin
		Get_motion_code_258_261_reg <= Get_motion_code_258_261;
		if (start == 1'b0 && ^(Get_motion_code_258_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_258_261_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %258*/
	/*   %262 = sub i32 %261, %42*/
		Get_motion_code_258_262 = (Get_motion_code_258_261 - Get_motion_code_Get_Bitsexit_42_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %258*/
	/*   %262 = sub i32 %261, %42*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__258_156)) begin
		Get_motion_code_258_262_reg <= Get_motion_code_258_262;
		if (start == 1'b0 && ^(Get_motion_code_258_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_258_262_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32.preheader*/
	/*   %263 = and i32 %262, -8*/
		Get_motion_code_preheader32preheader_263 = (Get_motion_code_258_262_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32.preheader*/
	/*   %263 = and i32 %262, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader32preheader_159)) begin
		Get_motion_code_preheader32preheader_263_reg <= Get_motion_code_preheader32preheader_263;
		if (start == 1'b0 && ^(Get_motion_code_preheader32preheader_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32preheader_263_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32.preheader*/
	/*   %264 = add i32 %42, 8*/
		Get_motion_code_preheader32preheader_264 = (Get_motion_code_Get_Bitsexit_42_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32.preheader*/
	/*   %264 = add i32 %42, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader32preheader_159)) begin
		Get_motion_code_preheader32preheader_264_reg <= Get_motion_code_preheader32preheader_264;
		if (start == 1'b0 && ^(Get_motion_code_preheader32preheader_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32preheader_264_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32.preheader*/
	/*   %265 = sext i8 %253 to i32*/
		Get_motion_code_preheader32preheader_265 = $signed(Get_motion_code_251_253_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32.preheader*/
	/*   %265 = sext i8 %253 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader32preheader_159)) begin
		Get_motion_code_preheader32preheader_265_reg <= Get_motion_code_preheader32preheader_265;
		if (start == 1'b0 && ^(Get_motion_code_preheader32preheader_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32preheader_265_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32.preheader*/
	/*   %266 = sub i32 %264, %265*/
		Get_motion_code_preheader32preheader_266 = (Get_motion_code_preheader32preheader_264 - Get_motion_code_preheader32preheader_265);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32.preheader*/
	/*   %266 = sub i32 %264, %265*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader32preheader_159)) begin
		Get_motion_code_preheader32preheader_266_reg <= Get_motion_code_preheader32preheader_266;
		if (start == 1'b0 && ^(Get_motion_code_preheader32preheader_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32preheader_266_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32.preheader*/
	/*   %267 = add nsw i32 %265, 24*/
		Get_motion_code_preheader32preheader_267 = (Get_motion_code_preheader32preheader_265 + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32.preheader*/
	/*   %267 = add nsw i32 %265, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader32preheader_159)) begin
		Get_motion_code_preheader32preheader_267_reg <= Get_motion_code_preheader32preheader_267;
		if (start == 1'b0 && ^(Get_motion_code_preheader32preheader_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32preheader_267_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32.preheader*/
	/*   %268 = sub i32 %267, %42*/
		Get_motion_code_preheader32preheader_268 = (Get_motion_code_preheader32preheader_267 - Get_motion_code_Get_Bitsexit_42_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32.preheader*/
	/*   %268 = sub i32 %267, %42*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader32preheader_159)) begin
		Get_motion_code_preheader32preheader_268_reg <= Get_motion_code_preheader32preheader_268;
		if (start == 1'b0 && ^(Get_motion_code_preheader32preheader_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32preheader_268_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader29*/
	/*   %269 = lshr i32 %262, 3*/
		Get_motion_code_preheader29_269 = (Get_motion_code_258_262_reg >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader29*/
	/*   %269 = lshr i32 %262, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader29_160)) begin
		Get_motion_code_preheader29_269_reg <= Get_motion_code_preheader29_269;
		if (start == 1'b0 && ^(Get_motion_code_preheader29_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader29_269_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader29*/
	/*   %270 = shl nuw i32 %269, 3*/
		Get_motion_code_preheader29_270 = (Get_motion_code_preheader29_269 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader29*/
	/*   %270 = shl nuw i32 %269, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader29_160)) begin
		Get_motion_code_preheader29_270_reg <= Get_motion_code_preheader29_270;
		if (start == 1'b0 && ^(Get_motion_code_preheader29_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader29_270_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader29*/
	/*   %271 = add i32 %42, 8*/
		Get_motion_code_preheader29_271 = (Get_motion_code_Get_Bitsexit_42_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader29*/
	/*   %271 = add i32 %42, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader29_160)) begin
		Get_motion_code_preheader29_271_reg <= Get_motion_code_preheader29_271;
		if (start == 1'b0 && ^(Get_motion_code_preheader29_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader29_271_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader29*/
	/*   %272 = sext i8 %253 to i32*/
		Get_motion_code_preheader29_272 = $signed(Get_motion_code_251_253_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader29*/
	/*   %272 = sext i8 %253 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader29_160)) begin
		Get_motion_code_preheader29_272_reg <= Get_motion_code_preheader29_272;
		if (start == 1'b0 && ^(Get_motion_code_preheader29_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader29_272_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader29*/
	/*   %273 = sub i32 %271, %272*/
		Get_motion_code_preheader29_273 = (Get_motion_code_preheader29_271 - Get_motion_code_preheader29_272);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader29*/
	/*   %273 = sub i32 %271, %272*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader29_160)) begin
		Get_motion_code_preheader29_273_reg <= Get_motion_code_preheader29_273;
		if (start == 1'b0 && ^(Get_motion_code_preheader29_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader29_273_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader29*/
	/*   %274 = add nsw i32 %272, 24*/
		Get_motion_code_preheader29_274 = (Get_motion_code_preheader29_272 + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader29*/
	/*   %274 = add nsw i32 %272, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader29_160)) begin
		Get_motion_code_preheader29_274_reg <= Get_motion_code_preheader29_274;
		if (start == 1'b0 && ^(Get_motion_code_preheader29_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader29_274_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader29*/
	/*   %275 = sub i32 %274, %42*/
		Get_motion_code_preheader29_275 = (Get_motion_code_preheader29_274 - Get_motion_code_Get_Bitsexit_42_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader29*/
	/*   %275 = sub i32 %274, %42*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader29_160)) begin
		Get_motion_code_preheader29_275_reg <= Get_motion_code_preheader29_275;
		if (start == 1'b0 && ^(Get_motion_code_preheader29_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader29_275_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %276*/
	/*   %indvar56 = phi i32 [ %indvar.next57, %276 ], [ 0, %.preheader29 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader29_160) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_276_indvar56 = 32'd0;
	end
	/* Get_motion_code: %276*/
	/*   %indvar56 = phi i32 [ %indvar.next57, %276 ], [ 0, %.preheader29 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB__276_163) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_276_286_reg == 1'd1))) */ begin
		Get_motion_code_276_indvar56 = Get_motion_code_276_indvarnext57_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %indvar56 = phi i32 [ %indvar.next57, %276 ], [ 0, %.preheader29 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader29_160) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_276_indvar56_reg <= Get_motion_code_276_indvar56;
		if (start == 1'b0 && ^(Get_motion_code_276_indvar56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_indvar56_reg"); $finish; end
	end
	/* Get_motion_code: %276*/
	/*   %indvar56 = phi i32 [ %indvar.next57, %276 ], [ 0, %.preheader29 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__276_163) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_276_286_reg == 1'd1))) begin
		Get_motion_code_276_indvar56_reg <= Get_motion_code_276_indvar56;
		if (start == 1'b0 && ^(Get_motion_code_276_indvar56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_indvar56_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %276*/
	/*   %277 = phi i32 [ %285, %276 ], [ %255, %.preheader29 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader29_160) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_276_277 = Get_motion_code_251_255_reg;
	end
	/* Get_motion_code: %276*/
	/*   %277 = phi i32 [ %285, %276 ], [ %255, %.preheader29 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB__276_163) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_276_286_reg == 1'd1))) */ begin
		Get_motion_code_276_277 = Get_motion_code_276_285;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %277 = phi i32 [ %285, %276 ], [ %255, %.preheader29 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader29_160) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_276_277_reg <= Get_motion_code_276_277;
		if (start == 1'b0 && ^(Get_motion_code_276_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_277_reg"); $finish; end
	end
	/* Get_motion_code: %276*/
	/*   %277 = phi i32 [ %285, %276 ], [ %255, %.preheader29 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__276_163) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_276_286_reg == 1'd1))) begin
		Get_motion_code_276_277_reg <= Get_motion_code_276_277;
		if (start == 1'b0 && ^(Get_motion_code_276_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_277_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %276*/
	/*   %scevgep58 = getelementptr i8* %259, i32 %indvar56*/
		Get_motion_code_276_scevgep58 = (Get_motion_code_258_259_reg + (1 * Get_motion_code_276_indvar56_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %scevgep58 = getelementptr i8* %259, i32 %indvar56*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_161)) begin
		Get_motion_code_276_scevgep58_reg <= Get_motion_code_276_scevgep58;
		if (start == 1'b0 && ^(Get_motion_code_276_scevgep58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_scevgep58_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %276*/
	/*   %278 = shl i32 %indvar56, 3*/
		Get_motion_code_276_278 = (Get_motion_code_276_indvar56_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %278 = shl i32 %indvar56, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_161)) begin
		Get_motion_code_276_278_reg <= Get_motion_code_276_278;
		if (start == 1'b0 && ^(Get_motion_code_276_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_278_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %276*/
	/*   %279 = add i32 %273, %278*/
		Get_motion_code_276_279 = (Get_motion_code_preheader29_273_reg + Get_motion_code_276_278);
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %279 = add i32 %273, %278*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_161)) begin
		Get_motion_code_276_279_reg <= Get_motion_code_276_279;
		if (start == 1'b0 && ^(Get_motion_code_276_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_279_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_276_280 = Get_motion_code_276_280_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %280 = mul i32 %indvar56, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_162)) begin
		Get_motion_code_276_280_reg <= Get_motion_code_276_280;
		if (start == 1'b0 && ^(Get_motion_code_276_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_280_reg"); $finish; end
	end
	/* Get_motion_code: %276*/
	/*   %280 = mul i32 %indvar56, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_162)) begin
		Get_motion_code_276_280_reg <= Get_motion_code_276_280;
		if (start == 1'b0 && ^(Get_motion_code_276_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_280_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %276*/
	/*   %281 = add i32 %275, %280*/
		Get_motion_code_276_281 = (Get_motion_code_preheader29_275_reg + Get_motion_code_276_280);
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %281 = add i32 %275, %280*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_162)) begin
		Get_motion_code_276_281_reg <= Get_motion_code_276_281;
		if (start == 1'b0 && ^(Get_motion_code_276_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_281_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %276*/
	/*   %282 = load i8* %scevgep58, align 1*/
		Get_motion_code_276_282 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %282 = load i8* %scevgep58, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_163)) begin
		Get_motion_code_276_282_reg <= Get_motion_code_276_282;
		if (start == 1'b0 && ^(Get_motion_code_276_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_282_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %276*/
	/*   %283 = zext i8 %282 to i32*/
		Get_motion_code_276_283 = Get_motion_code_276_282;
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %283 = zext i8 %282 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_163)) begin
		Get_motion_code_276_283_reg <= Get_motion_code_276_283;
		if (start == 1'b0 && ^(Get_motion_code_276_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_283_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %276*/
	/*   %284 = shl i32 %283, %281*/
		Get_motion_code_276_284 = (Get_motion_code_276_283 <<< (Get_motion_code_276_281_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %284 = shl i32 %283, %281*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_163)) begin
		Get_motion_code_276_284_reg <= Get_motion_code_276_284;
		if (start == 1'b0 && ^(Get_motion_code_276_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_284_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %276*/
	/*   %285 = or i32 %277, %284*/
		Get_motion_code_276_285 = (Get_motion_code_276_277_reg | Get_motion_code_276_284);
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %285 = or i32 %277, %284*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_163)) begin
		Get_motion_code_276_285_reg <= Get_motion_code_276_285;
		if (start == 1'b0 && ^(Get_motion_code_276_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_285_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %276*/
	/*   %286 = icmp slt i32 %279, 25*/
		Get_motion_code_276_286 = ($signed(Get_motion_code_276_279) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %286 = icmp slt i32 %279, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_161)) begin
		Get_motion_code_276_286_reg <= Get_motion_code_276_286;
		if (start == 1'b0 && ^(Get_motion_code_276_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_286_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %276*/
	/*   %indvar.next57 = add i32 %indvar56, 1*/
		Get_motion_code_276_indvarnext57 = (Get_motion_code_276_indvar56_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %indvar.next57 = add i32 %indvar56, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_161)) begin
		Get_motion_code_276_indvarnext57_reg <= Get_motion_code_276_indvarnext57;
		if (start == 1'b0 && ^(Get_motion_code_276_indvarnext57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_276_indvarnext57_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32*/
	/*   %indvar64 = phi i32 [ %indvar.next65, %Fill_Buffer.exit.i6 ], [ 0, %.preheader32.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader32preheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader32_indvar64 = 32'd0;
	end
	/* Get_motion_code: %.preheader32*/
	/*   %indvar64 = phi i32 [ %indvar.next65, %Fill_Buffer.exit.i6 ], [ 0, %.preheader32.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti6_300_reg == 1'd1))) */ begin
		Get_motion_code_preheader32_indvar64 = Get_motion_code_Fill_Bufferexiti6_indvarnext65_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32*/
	/*   %indvar64 = phi i32 [ %indvar.next65, %Fill_Buffer.exit.i6 ], [ 0, %.preheader32.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader32preheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader32_indvar64_reg <= Get_motion_code_preheader32_indvar64;
		if (start == 1'b0 && ^(Get_motion_code_preheader32_indvar64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32_indvar64_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader32*/
	/*   %indvar64 = phi i32 [ %indvar.next65, %Fill_Buffer.exit.i6 ], [ 0, %.preheader32.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti6_300_reg == 1'd1))) begin
		Get_motion_code_preheader32_indvar64_reg <= Get_motion_code_preheader32_indvar64;
		if (start == 1'b0 && ^(Get_motion_code_preheader32_indvar64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32_indvar64_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32*/
	/*   %287 = phi i32 [ %299, %Fill_Buffer.exit.i6 ], [ %255, %.preheader32.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader32preheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader32_287 = Get_motion_code_251_255_reg;
	end
	/* Get_motion_code: %.preheader32*/
	/*   %287 = phi i32 [ %299, %Fill_Buffer.exit.i6 ], [ %255, %.preheader32.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti6_300_reg == 1'd1))) */ begin
		Get_motion_code_preheader32_287 = Get_motion_code_Fill_Bufferexiti6_299;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32*/
	/*   %287 = phi i32 [ %299, %Fill_Buffer.exit.i6 ], [ %255, %.preheader32.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader32preheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader32_287_reg <= Get_motion_code_preheader32_287;
		if (start == 1'b0 && ^(Get_motion_code_preheader32_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32_287_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader32*/
	/*   %287 = phi i32 [ %299, %Fill_Buffer.exit.i6 ], [ %255, %.preheader32.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti6_300_reg == 1'd1))) begin
		Get_motion_code_preheader32_287_reg <= Get_motion_code_preheader32_287;
		if (start == 1'b0 && ^(Get_motion_code_preheader32_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32_287_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32*/
	/*   %.pr2062 = phi i8* [ %295, %Fill_Buffer.exit.i6 ], [ %259, %.preheader32.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader32preheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader32_pr2062 = Get_motion_code_258_259_reg;
	end
	/* Get_motion_code: %.preheader32*/
	/*   %.pr2062 = phi i8* [ %295, %Fill_Buffer.exit.i6 ], [ %259, %.preheader32.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti6_300_reg == 1'd1))) */ begin
		Get_motion_code_preheader32_pr2062 = Get_motion_code_Fill_Bufferexiti6_295_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32*/
	/*   %.pr2062 = phi i8* [ %295, %Fill_Buffer.exit.i6 ], [ %259, %.preheader32.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader32preheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader32_pr2062_reg <= Get_motion_code_preheader32_pr2062;
		if (start == 1'b0 && ^(Get_motion_code_preheader32_pr2062) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32_pr2062_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader32*/
	/*   %.pr2062 = phi i8* [ %295, %Fill_Buffer.exit.i6 ], [ %259, %.preheader32.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti6_300_reg == 1'd1))) begin
		Get_motion_code_preheader32_pr2062_reg <= Get_motion_code_preheader32_pr2062;
		if (start == 1'b0 && ^(Get_motion_code_preheader32_pr2062) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32_pr2062_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32*/
	/*   %288 = shl i32 %indvar64, 3*/
		Get_motion_code_preheader32_288 = (Get_motion_code_preheader32_indvar64_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32*/
	/*   %288 = shl i32 %indvar64, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader32_164)) begin
		Get_motion_code_preheader32_288_reg <= Get_motion_code_preheader32_288;
		if (start == 1'b0 && ^(Get_motion_code_preheader32_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32_288_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32*/
	/*   %289 = add i32 %266, %288*/
		Get_motion_code_preheader32_289 = (Get_motion_code_preheader32preheader_266_reg + Get_motion_code_preheader32_288);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32*/
	/*   %289 = add i32 %266, %288*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader32_164)) begin
		Get_motion_code_preheader32_289_reg <= Get_motion_code_preheader32_289;
		if (start == 1'b0 && ^(Get_motion_code_preheader32_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32_289_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader32_290 = Get_motion_code_preheader32_290_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32*/
	/*   %290 = mul i32 %indvar64, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader32_165)) begin
		Get_motion_code_preheader32_290_reg <= Get_motion_code_preheader32_290;
		if (start == 1'b0 && ^(Get_motion_code_preheader32_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32_290_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader32*/
	/*   %290 = mul i32 %indvar64, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader32_165)) begin
		Get_motion_code_preheader32_290_reg <= Get_motion_code_preheader32_290;
		if (start == 1'b0 && ^(Get_motion_code_preheader32_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32_290_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32*/
	/*   %291 = add i32 %268, %290*/
		Get_motion_code_preheader32_291 = (Get_motion_code_preheader32preheader_268_reg + Get_motion_code_preheader32_290);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32*/
	/*   %291 = add i32 %268, %290*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader32_165)) begin
		Get_motion_code_preheader32_291_reg <= Get_motion_code_preheader32_291;
		if (start == 1'b0 && ^(Get_motion_code_preheader32_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32_291_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader32*/
	/*   %292 = icmp ult i8* %.pr2062, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader32_292 = (Get_motion_code_preheader32_pr2062_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32*/
	/*   %292 = icmp ult i8* %.pr2062, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader32_164)) begin
		Get_motion_code_preheader32_292_reg <= Get_motion_code_preheader32_292;
		if (start == 1'b0 && ^(Get_motion_code_preheader32_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader32_292_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader31*/
	/*   %indvar59 = phi i32 [ 0, %.preheader31.preheader ], [ %indvar.next60, %293 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader31preheader_166) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader31_indvar59 = 32'd0;
	end
	/* Get_motion_code: %.preheader31*/
	/*   %indvar59 = phi i32 [ 0, %.preheader31.preheader ], [ %indvar.next60, %293 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__293_171) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_preheader31_indvar59 = Get_motion_code_293_indvarnext60_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader31*/
	/*   %indvar59 = phi i32 [ 0, %.preheader31.preheader ], [ %indvar.next60, %293 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader31preheader_166) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader31_indvar59_reg <= Get_motion_code_preheader31_indvar59;
		if (start == 1'b0 && ^(Get_motion_code_preheader31_indvar59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader31_indvar59_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader31*/
	/*   %indvar59 = phi i32 [ 0, %.preheader31.preheader ], [ %indvar.next60, %293 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__293_171) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader31_indvar59_reg <= Get_motion_code_preheader31_indvar59;
		if (start == 1'b0 && ^(Get_motion_code_preheader31_indvar59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader31_indvar59_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader31*/
	/*   %exitcond61 = icmp eq i32 %indvar59, 2048*/
		Get_motion_code_preheader31_exitcond61 = (Get_motion_code_preheader31_indvar59_reg == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader31*/
	/*   %exitcond61 = icmp eq i32 %indvar59, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader31_167)) begin
		Get_motion_code_preheader31_exitcond61_reg <= Get_motion_code_preheader31_exitcond61;
		if (start == 1'b0 && ^(Get_motion_code_preheader31_exitcond61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader31_exitcond61_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %293*/
	/*   %p2.0.i.i.i4 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar59*/
		Get_motion_code_293_p20iii4 = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_preheader31_indvar59_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %293*/
	/*   %p2.0.i.i.i4 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar59*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_168)) begin
		Get_motion_code_293_p20iii4_reg <= Get_motion_code_293_p20iii4;
		if (start == 1'b0 && ^(Get_motion_code_293_p20iii4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_293_p20iii4_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %293*/
	/*   %p1.0.i.i.i3 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar59*/
		Get_motion_code_293_p10iii3 = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_preheader31_indvar59_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %293*/
	/*   %p1.0.i.i.i3 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar59*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_168)) begin
		Get_motion_code_293_p10iii3_reg <= Get_motion_code_293_p10iii3;
		if (start == 1'b0 && ^(Get_motion_code_293_p10iii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_293_p10iii3_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %293*/
	/*   %294 = load i8* %p2.0.i.i.i4, align 1*/
		Get_motion_code_293_294 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %293*/
	/*   %294 = load i8* %p2.0.i.i.i4, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_170)) begin
		Get_motion_code_293_294_reg <= Get_motion_code_293_294;
		if (start == 1'b0 && ^(Get_motion_code_293_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_293_294_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %293*/
	/*   %indvar.next60 = add i32 %indvar59, 1*/
		Get_motion_code_293_indvarnext60 = (Get_motion_code_preheader31_indvar59_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %293*/
	/*   %indvar.next60 = add i32 %indvar59, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_168)) begin
		Get_motion_code_293_indvarnext60_reg <= Get_motion_code_293_indvarnext60;
		if (start == 1'b0 && ^(Get_motion_code_293_indvarnext60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_293_indvarnext60_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %.pr2063 = phi i8* [ %.pr2062, %.preheader32 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i6.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader32_165) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader32_292_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexiti6_pr2063 = Get_motion_code_preheader32_pr2062_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %.pr2063 = phi i8* [ %.pr2062, %.preheader32 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i6.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6loopexit_172) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexiti6_pr2063 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %.pr2063 = phi i8* [ %.pr2062, %.preheader32 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i6.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader32_165) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader32_292_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexiti6_pr2063_reg <= Get_motion_code_Fill_Bufferexiti6_pr2063;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti6_pr2063) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti6_pr2063_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %.pr2063 = phi i8* [ %.pr2062, %.preheader32 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i6.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6loopexit_172) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexiti6_pr2063_reg <= Get_motion_code_Fill_Bufferexiti6_pr2063;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti6_pr2063) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti6_pr2063_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %295 = getelementptr inbounds i8* %.pr2063, i32 1*/
		Get_motion_code_Fill_Bufferexiti6_295 = (Get_motion_code_Fill_Bufferexiti6_pr2063_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %295 = getelementptr inbounds i8* %.pr2063, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_173)) begin
		Get_motion_code_Fill_Bufferexiti6_295_reg <= Get_motion_code_Fill_Bufferexiti6_295;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti6_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti6_295_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %296 = load i8* %.pr2063, align 1*/
		Get_motion_code_Fill_Bufferexiti6_296 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %296 = load i8* %.pr2063, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175)) begin
		Get_motion_code_Fill_Bufferexiti6_296_reg <= Get_motion_code_Fill_Bufferexiti6_296;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti6_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti6_296_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %297 = zext i8 %296 to i32*/
		Get_motion_code_Fill_Bufferexiti6_297 = Get_motion_code_Fill_Bufferexiti6_296;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %297 = zext i8 %296 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175)) begin
		Get_motion_code_Fill_Bufferexiti6_297_reg <= Get_motion_code_Fill_Bufferexiti6_297;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti6_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti6_297_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %298 = shl i32 %297, %291*/
		Get_motion_code_Fill_Bufferexiti6_298 = (Get_motion_code_Fill_Bufferexiti6_297 <<< (Get_motion_code_preheader32_291_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %298 = shl i32 %297, %291*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175)) begin
		Get_motion_code_Fill_Bufferexiti6_298_reg <= Get_motion_code_Fill_Bufferexiti6_298;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti6_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti6_298_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %299 = or i32 %287, %298*/
		Get_motion_code_Fill_Bufferexiti6_299 = (Get_motion_code_preheader32_287_reg | Get_motion_code_Fill_Bufferexiti6_298);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %299 = or i32 %287, %298*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_175)) begin
		Get_motion_code_Fill_Bufferexiti6_299_reg <= Get_motion_code_Fill_Bufferexiti6_299;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti6_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti6_299_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %300 = icmp slt i32 %289, 25*/
		Get_motion_code_Fill_Bufferexiti6_300 = ($signed(Get_motion_code_preheader32_289_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %300 = icmp slt i32 %289, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_173)) begin
		Get_motion_code_Fill_Bufferexiti6_300_reg <= Get_motion_code_Fill_Bufferexiti6_300;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti6_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti6_300_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %indvar.next65 = add i32 %indvar64, 1*/
		Get_motion_code_Fill_Bufferexiti6_indvarnext65 = (Get_motion_code_preheader32_indvar64_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %indvar.next65 = add i32 %indvar64, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_173)) begin
		Get_motion_code_Fill_Bufferexiti6_indvarnext65_reg <= Get_motion_code_Fill_Bufferexiti6_indvarnext65;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti6_indvarnext65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti6_indvarnext65_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit30*/
	/*   %301 = add nuw nsw i32 %269, 1*/
		Get_motion_code_loopexit30_301 = (Get_motion_code_preheader29_269_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit30*/
	/*   %301 = add nuw nsw i32 %269, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit30_176)) begin
		Get_motion_code_loopexit30_301_reg <= Get_motion_code_loopexit30_301;
		if (start == 1'b0 && ^(Get_motion_code_loopexit30_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit30_301_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit30*/
	/*   %scevgep86 = getelementptr i8* %259, i32 %301*/
		Get_motion_code_loopexit30_scevgep86 = (Get_motion_code_258_259_reg + (1 * Get_motion_code_loopexit30_301_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit30*/
	/*   %scevgep86 = getelementptr i8* %259, i32 %301*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit30_177)) begin
		Get_motion_code_loopexit30_scevgep86_reg <= Get_motion_code_loopexit30_scevgep86;
		if (start == 1'b0 && ^(Get_motion_code_loopexit30_scevgep86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit30_scevgep86_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %302*/
	/*   %storemerge1 = phi i8* [ %scevgep86, %.loopexit30 ], [ %295, %.loopexit33 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit30_177) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_302_storemerge1 = Get_motion_code_loopexit30_scevgep86;
	end
	/* Get_motion_code: %302*/
	/*   %storemerge1 = phi i8* [ %scevgep86, %.loopexit30 ], [ %295, %.loopexit33 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit33_178) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_302_storemerge1 = Get_motion_code_Fill_Bufferexiti6_295_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %302*/
	/*   %storemerge1 = phi i8* [ %scevgep86, %.loopexit30 ], [ %295, %.loopexit33 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit30_177) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_302_storemerge1_reg <= Get_motion_code_302_storemerge1;
		if (start == 1'b0 && ^(Get_motion_code_302_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_302_storemerge1_reg"); $finish; end
	end
	/* Get_motion_code: %302*/
	/*   %storemerge1 = phi i8* [ %scevgep86, %.loopexit30 ], [ %295, %.loopexit33 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit33_178) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_302_storemerge1_reg <= Get_motion_code_302_storemerge1;
		if (start == 1'b0 && ^(Get_motion_code_302_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_302_storemerge1_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %302*/
	/*   %storemerge = phi i32 [ %285, %.loopexit30 ], [ %299, %.loopexit33 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit30_177) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_302_storemerge = Get_motion_code_276_285_reg;
	end
	/* Get_motion_code: %302*/
	/*   %storemerge = phi i32 [ %285, %.loopexit30 ], [ %299, %.loopexit33 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit33_178) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_302_storemerge = Get_motion_code_Fill_Bufferexiti6_299_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %302*/
	/*   %storemerge = phi i32 [ %285, %.loopexit30 ], [ %299, %.loopexit33 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit30_177) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_302_storemerge_reg <= Get_motion_code_302_storemerge;
		if (start == 1'b0 && ^(Get_motion_code_302_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_302_storemerge_reg"); $finish; end
	end
	/* Get_motion_code: %302*/
	/*   %storemerge = phi i32 [ %285, %.loopexit30 ], [ %299, %.loopexit33 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit33_178) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_302_storemerge_reg <= Get_motion_code_302_storemerge;
		if (start == 1'b0 && ^(Get_motion_code_302_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_302_storemerge_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %302*/
	/*   %.pn3 = phi i32 [ %270, %.loopexit30 ], [ %263, %.loopexit33 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit30_177) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_302_pn3 = Get_motion_code_preheader29_270_reg;
	end
	/* Get_motion_code: %302*/
	/*   %.pn3 = phi i32 [ %270, %.loopexit30 ], [ %263, %.loopexit33 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit33_178) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_302_pn3 = Get_motion_code_preheader32preheader_263_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %302*/
	/*   %.pn3 = phi i32 [ %270, %.loopexit30 ], [ %263, %.loopexit33 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit30_177) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_302_pn3_reg <= Get_motion_code_302_pn3;
		if (start == 1'b0 && ^(Get_motion_code_302_pn3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_302_pn3_reg"); $finish; end
	end
	/* Get_motion_code: %302*/
	/*   %.pn3 = phi i32 [ %270, %.loopexit30 ], [ %263, %.loopexit33 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit33_178) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_302_pn3_reg <= Get_motion_code_302_pn3;
		if (start == 1'b0 && ^(Get_motion_code_302_pn3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_302_pn3_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %302*/
	/*   %.pn.in = add i32 %42, %.pn3*/
		Get_motion_code_302_pnin = (Get_motion_code_Get_Bitsexit_42_reg + Get_motion_code_302_pn3_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %302*/
	/*   %.pn.in = add i32 %42, %.pn3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		Get_motion_code_302_pnin_reg <= Get_motion_code_302_pnin;
		if (start == 1'b0 && ^(Get_motion_code_302_pnin) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_302_pnin_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %302*/
	/*   %.pn = add i32 %.pn.in, 8*/
		Get_motion_code_302_pn = (Get_motion_code_302_pnin + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %302*/
	/*   %.pn = add i32 %.pn.in, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		Get_motion_code_302_pn_reg <= Get_motion_code_302_pn;
		if (start == 1'b0 && ^(Get_motion_code_302_pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_302_pn_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %302*/
	/*   %Incnt.2.i7 = sub i32 %.pn, %254*/
		Get_motion_code_302_Incnt2i7 = (Get_motion_code_302_pn - Get_motion_code_251_254_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %302*/
	/*   %Incnt.2.i7 = sub i32 %.pn, %254*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		Get_motion_code_302_Incnt2i7_reg <= Get_motion_code_302_Incnt2i7;
		if (start == 1'b0 && ^(Get_motion_code_302_Incnt2i7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_302_Incnt2i7_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %303 = phi i32 [ %Incnt.2.i7, %302 ], [ %256, %251 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__251_155) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_251_257_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit8_303 = Get_motion_code_251_256_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %303 = phi i32 [ %Incnt.2.i7, %302 ], [ %256, %251 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__302_181) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Flush_Bufferexit8_303 = Get_motion_code_302_Incnt2i7_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %303 = phi i32 [ %Incnt.2.i7, %302 ], [ %256, %251 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__251_155) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_251_257_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit8_303_reg <= Get_motion_code_Flush_Bufferexit8_303;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit8_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit8_303_reg"); $finish; end
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %303 = phi i32 [ %Incnt.2.i7, %302 ], [ %256, %251 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__302_181) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit8_303_reg <= Get_motion_code_Flush_Bufferexit8_303;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit8_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit8_303_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %304 = phi i32 [ %storemerge, %302 ], [ %255, %251 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__251_155) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_251_257_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit8_304 = Get_motion_code_251_255_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %304 = phi i32 [ %storemerge, %302 ], [ %255, %251 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__302_181) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Flush_Bufferexit8_304 = Get_motion_code_302_storemerge_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %304 = phi i32 [ %storemerge, %302 ], [ %255, %251 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__251_155) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_251_257_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit8_304_reg <= Get_motion_code_Flush_Bufferexit8_304;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit8_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit8_304_reg"); $finish; end
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %304 = phi i32 [ %storemerge, %302 ], [ %255, %251 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__302_181) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit8_304_reg <= Get_motion_code_Flush_Bufferexit8_304;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit8_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit8_304_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %305 = shl i32 %304, 1*/
		Get_motion_code_Flush_Bufferexit8_305 = (Get_motion_code_Flush_Bufferexit8_304_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %305 = shl i32 %304, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		Get_motion_code_Flush_Bufferexit8_305_reg <= Get_motion_code_Flush_Bufferexit8_305;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit8_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit8_305_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %306 = add nsw i32 %303, -1*/
		Get_motion_code_Flush_Bufferexit8_306 = (Get_motion_code_Flush_Bufferexit8_303_reg + -32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %306 = add nsw i32 %303, -1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		Get_motion_code_Flush_Bufferexit8_306_reg <= Get_motion_code_Flush_Bufferexit8_306;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit8_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit8_306_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %307 = icmp slt i32 %303, 26*/
		Get_motion_code_Flush_Bufferexit8_307 = ($signed(Get_motion_code_Flush_Bufferexit8_303_reg) < $signed(32'd26));
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   %307 = icmp slt i32 %303, 26*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		Get_motion_code_Flush_Bufferexit8_307_reg <= Get_motion_code_Flush_Bufferexit8_307;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit8_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit8_307_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %308*/
	/*   %309 = load i8** @ld_Rdptr, align 4*/
		Get_motion_code_308_309 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %308*/
	/*   %309 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__308_186)) begin
		Get_motion_code_308_309_reg <= Get_motion_code_308_309;
		if (start == 1'b0 && ^(Get_motion_code_308_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_308_309_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %308*/
	/*   %310 = icmp ult i8* %309, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_308_310 = (Get_motion_code_308_309 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %308*/
	/*   %310 = icmp ult i8* %309, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__308_186)) begin
		Get_motion_code_308_310_reg <= Get_motion_code_308_310;
		if (start == 1'b0 && ^(Get_motion_code_308_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_308_310_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %308*/
	/*   %311 = sub i32 25, %303*/
		Get_motion_code_308_311 = (32'd25 - Get_motion_code_Flush_Bufferexit8_303_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %308*/
	/*   %311 = sub i32 25, %303*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__308_184)) begin
		Get_motion_code_308_311_reg <= Get_motion_code_308_311;
		if (start == 1'b0 && ^(Get_motion_code_308_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_308_311_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %308*/
	/*   %312 = lshr i32 %311, 3*/
		Get_motion_code_308_312 = (Get_motion_code_308_311 >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %308*/
	/*   %312 = lshr i32 %311, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__308_184)) begin
		Get_motion_code_308_312_reg <= Get_motion_code_308_312;
		if (start == 1'b0 && ^(Get_motion_code_308_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_308_312_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %308*/
	/*   %313 = shl nuw i32 %312, 3*/
		Get_motion_code_308_313 = (Get_motion_code_308_312 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %308*/
	/*   %313 = shl nuw i32 %312, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__308_184)) begin
		Get_motion_code_308_313_reg <= Get_motion_code_308_313;
		if (start == 1'b0 && ^(Get_motion_code_308_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_308_313_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %308*/
	/*   %314 = add i32 %303, %313*/
		Get_motion_code_308_314 = (Get_motion_code_Flush_Bufferexit8_303_reg + Get_motion_code_308_313);
end
always @(posedge clk) begin
	/* Get_motion_code: %308*/
	/*   %314 = add i32 %303, %313*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__308_184)) begin
		Get_motion_code_308_314_reg <= Get_motion_code_308_314;
		if (start == 1'b0 && ^(Get_motion_code_308_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_308_314_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i10.preheader*/
	/*   %315 = add i32 %303, 7*/
		Get_motion_code_preheader2i10preheader_315 = (Get_motion_code_Flush_Bufferexit8_303_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i10.preheader*/
	/*   %315 = add i32 %303, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10preheader_187)) begin
		Get_motion_code_preheader2i10preheader_315_reg <= Get_motion_code_preheader2i10preheader_315;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10preheader_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10preheader_315_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i10.preheader*/
	/*   %316 = sub i32 25, %303*/
		Get_motion_code_preheader2i10preheader_316 = (32'd25 - Get_motion_code_Flush_Bufferexit8_303_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i10.preheader*/
	/*   %316 = sub i32 25, %303*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10preheader_187)) begin
		Get_motion_code_preheader2i10preheader_316_reg <= Get_motion_code_preheader2i10preheader_316;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10preheader_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10preheader_316_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7.preheader*/
	/*   %317 = add i32 %303, 7*/
		Get_motion_code_preheaderi7preheader_317 = (Get_motion_code_Flush_Bufferexit8_303_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7.preheader*/
	/*   %317 = add i32 %303, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7preheader_188)) begin
		Get_motion_code_preheaderi7preheader_317_reg <= Get_motion_code_preheaderi7preheader_317;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7preheader_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7preheader_317_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7.preheader*/
	/*   %318 = sub i32 25, %303*/
		Get_motion_code_preheaderi7preheader_318 = (32'd25 - Get_motion_code_Flush_Bufferexit8_303_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7.preheader*/
	/*   %318 = sub i32 25, %303*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7preheader_188)) begin
		Get_motion_code_preheaderi7preheader_318_reg <= Get_motion_code_preheaderi7preheader_318;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7preheader_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7preheader_318_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %indvar46 = phi i32 [ 0, %.preheader.i7.preheader ], [ %indvar.next47, %.preheader.i7 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7preheader_188) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi7_indvar46 = 32'd0;
	end
	/* Get_motion_code: %.preheader.i7*/
	/*   %indvar46 = phi i32 [ 0, %.preheader.i7.preheader ], [ %indvar.next47, %.preheader.i7 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_191) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi7_328_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi7_indvar46 = Get_motion_code_preheaderi7_indvarnext47_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %indvar46 = phi i32 [ 0, %.preheader.i7.preheader ], [ %indvar.next47, %.preheader.i7 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7preheader_188) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi7_indvar46_reg <= Get_motion_code_preheaderi7_indvar46;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_indvar46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_indvar46_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i7*/
	/*   %indvar46 = phi i32 [ 0, %.preheader.i7.preheader ], [ %indvar.next47, %.preheader.i7 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_191) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi7_328_reg == 1'd1))) begin
		Get_motion_code_preheaderi7_indvar46_reg <= Get_motion_code_preheaderi7_indvar46;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_indvar46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_indvar46_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %319 = phi i32 [ %305, %.preheader.i7.preheader ], [ %327, %.preheader.i7 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7preheader_188) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi7_319 = Get_motion_code_Flush_Bufferexit8_305_reg;
	end
	/* Get_motion_code: %.preheader.i7*/
	/*   %319 = phi i32 [ %305, %.preheader.i7.preheader ], [ %327, %.preheader.i7 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_191) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi7_328_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi7_319 = Get_motion_code_preheaderi7_327;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %319 = phi i32 [ %305, %.preheader.i7.preheader ], [ %327, %.preheader.i7 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7preheader_188) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi7_319_reg <= Get_motion_code_preheaderi7_319;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_319_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i7*/
	/*   %319 = phi i32 [ %305, %.preheader.i7.preheader ], [ %327, %.preheader.i7 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_191) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi7_328_reg == 1'd1))) begin
		Get_motion_code_preheaderi7_319_reg <= Get_motion_code_preheaderi7_319;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_319_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %scevgep48 = getelementptr i8* %309, i32 %indvar46*/
		Get_motion_code_preheaderi7_scevgep48 = (Get_motion_code_308_309_reg + (1 * Get_motion_code_preheaderi7_indvar46_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %scevgep48 = getelementptr i8* %309, i32 %indvar46*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_189)) begin
		Get_motion_code_preheaderi7_scevgep48_reg <= Get_motion_code_preheaderi7_scevgep48;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_scevgep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_scevgep48_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %320 = shl i32 %indvar46, 3*/
		Get_motion_code_preheaderi7_320 = (Get_motion_code_preheaderi7_indvar46_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %320 = shl i32 %indvar46, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_189)) begin
		Get_motion_code_preheaderi7_320_reg <= Get_motion_code_preheaderi7_320;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_320_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %321 = add i32 %317, %320*/
		Get_motion_code_preheaderi7_321 = (Get_motion_code_preheaderi7preheader_317_reg + Get_motion_code_preheaderi7_320);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %321 = add i32 %317, %320*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_189)) begin
		Get_motion_code_preheaderi7_321_reg <= Get_motion_code_preheaderi7_321;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_321_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheaderi7_322 = Get_motion_code_preheaderi7_322_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %322 = mul i32 %indvar46, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_190)) begin
		Get_motion_code_preheaderi7_322_reg <= Get_motion_code_preheaderi7_322;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_322_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i7*/
	/*   %322 = mul i32 %indvar46, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_190)) begin
		Get_motion_code_preheaderi7_322_reg <= Get_motion_code_preheaderi7_322;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_322_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %323 = add i32 %318, %322*/
		Get_motion_code_preheaderi7_323 = (Get_motion_code_preheaderi7preheader_318_reg + Get_motion_code_preheaderi7_322);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %323 = add i32 %318, %322*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_190)) begin
		Get_motion_code_preheaderi7_323_reg <= Get_motion_code_preheaderi7_323;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_323_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %324 = load i8* %scevgep48, align 1*/
		Get_motion_code_preheaderi7_324 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %324 = load i8* %scevgep48, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_191)) begin
		Get_motion_code_preheaderi7_324_reg <= Get_motion_code_preheaderi7_324;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_324_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %325 = zext i8 %324 to i32*/
		Get_motion_code_preheaderi7_325 = Get_motion_code_preheaderi7_324;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %325 = zext i8 %324 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_191)) begin
		Get_motion_code_preheaderi7_325_reg <= Get_motion_code_preheaderi7_325;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_325_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %326 = shl i32 %325, %323*/
		Get_motion_code_preheaderi7_326 = (Get_motion_code_preheaderi7_325 <<< (Get_motion_code_preheaderi7_323_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %326 = shl i32 %325, %323*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_191)) begin
		Get_motion_code_preheaderi7_326_reg <= Get_motion_code_preheaderi7_326;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_326_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %327 = or i32 %319, %326*/
		Get_motion_code_preheaderi7_327 = (Get_motion_code_preheaderi7_319_reg | Get_motion_code_preheaderi7_326);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %327 = or i32 %319, %326*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_191)) begin
		Get_motion_code_preheaderi7_327_reg <= Get_motion_code_preheaderi7_327;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_327_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %328 = icmp slt i32 %321, 25*/
		Get_motion_code_preheaderi7_328 = ($signed(Get_motion_code_preheaderi7_321) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %328 = icmp slt i32 %321, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_189)) begin
		Get_motion_code_preheaderi7_328_reg <= Get_motion_code_preheaderi7_328;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_328_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %indvar.next47 = add i32 %indvar46, 1*/
		Get_motion_code_preheaderi7_indvarnext47 = (Get_motion_code_preheaderi7_indvar46_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %indvar.next47 = add i32 %indvar46, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_189)) begin
		Get_motion_code_preheaderi7_indvarnext47_reg <= Get_motion_code_preheaderi7_indvarnext47;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi7_indvarnext47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi7_indvarnext47_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %indvar54 = phi i32 [ 0, %.preheader2.i10.preheader ], [ %indvar.next55, %Fill_Buffer.exit.i.i16 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i10_indvar54 = 32'd0;
	end
	/* Get_motion_code: %.preheader2.i10*/
	/*   %indvar54 = phi i32 [ 0, %.preheader2.i10.preheader ], [ %indvar.next55, %Fill_Buffer.exit.i.i16 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii16_342_reg == 1'd1))) */ begin
		Get_motion_code_preheader2i10_indvar54 = Get_motion_code_Fill_Bufferexitii16_indvarnext55_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %indvar54 = phi i32 [ 0, %.preheader2.i10.preheader ], [ %indvar.next55, %Fill_Buffer.exit.i.i16 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i10_indvar54_reg <= Get_motion_code_preheader2i10_indvar54;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10_indvar54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10_indvar54_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i10*/
	/*   %indvar54 = phi i32 [ 0, %.preheader2.i10.preheader ], [ %indvar.next55, %Fill_Buffer.exit.i.i16 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii16_342_reg == 1'd1))) begin
		Get_motion_code_preheader2i10_indvar54_reg <= Get_motion_code_preheader2i10_indvar54;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10_indvar54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10_indvar54_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %329 = phi i32 [ %305, %.preheader2.i10.preheader ], [ %341, %Fill_Buffer.exit.i.i16 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i10_329 = Get_motion_code_Flush_Bufferexit8_305_reg;
	end
	/* Get_motion_code: %.preheader2.i10*/
	/*   %329 = phi i32 [ %305, %.preheader2.i10.preheader ], [ %341, %Fill_Buffer.exit.i.i16 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii16_342_reg == 1'd1))) */ begin
		Get_motion_code_preheader2i10_329 = Get_motion_code_Fill_Bufferexitii16_341;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %329 = phi i32 [ %305, %.preheader2.i10.preheader ], [ %341, %Fill_Buffer.exit.i.i16 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i10_329_reg <= Get_motion_code_preheader2i10_329;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10_329_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i10*/
	/*   %329 = phi i32 [ %305, %.preheader2.i10.preheader ], [ %341, %Fill_Buffer.exit.i.i16 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii16_342_reg == 1'd1))) begin
		Get_motion_code_preheader2i10_329_reg <= Get_motion_code_preheader2i10_329;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10_329_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %.pr8.i8 = phi i8* [ %309, %.preheader2.i10.preheader ], [ %337, %Fill_Buffer.exit.i.i16 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i10_pr8i8 = Get_motion_code_308_309_reg;
	end
	/* Get_motion_code: %.preheader2.i10*/
	/*   %.pr8.i8 = phi i8* [ %309, %.preheader2.i10.preheader ], [ %337, %Fill_Buffer.exit.i.i16 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii16_342_reg == 1'd1))) */ begin
		Get_motion_code_preheader2i10_pr8i8 = Get_motion_code_Fill_Bufferexitii16_337_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %.pr8.i8 = phi i8* [ %309, %.preheader2.i10.preheader ], [ %337, %Fill_Buffer.exit.i.i16 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader2i10_pr8i8_reg <= Get_motion_code_preheader2i10_pr8i8;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10_pr8i8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10_pr8i8_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i10*/
	/*   %.pr8.i8 = phi i8* [ %309, %.preheader2.i10.preheader ], [ %337, %Fill_Buffer.exit.i.i16 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitii16_342_reg == 1'd1))) begin
		Get_motion_code_preheader2i10_pr8i8_reg <= Get_motion_code_preheader2i10_pr8i8;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10_pr8i8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10_pr8i8_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %330 = shl i32 %indvar54, 3*/
		Get_motion_code_preheader2i10_330 = (Get_motion_code_preheader2i10_indvar54_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %330 = shl i32 %indvar54, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10_192)) begin
		Get_motion_code_preheader2i10_330_reg <= Get_motion_code_preheader2i10_330;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10_330_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %331 = add i32 %315, %330*/
		Get_motion_code_preheader2i10_331 = (Get_motion_code_preheader2i10preheader_315_reg + Get_motion_code_preheader2i10_330);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %331 = add i32 %315, %330*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10_192)) begin
		Get_motion_code_preheader2i10_331_reg <= Get_motion_code_preheader2i10_331;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10_331_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader2i10_332 = Get_motion_code_preheader2i10_332_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %332 = mul i32 %indvar54, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10_193)) begin
		Get_motion_code_preheader2i10_332_reg <= Get_motion_code_preheader2i10_332;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10_332_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader2.i10*/
	/*   %332 = mul i32 %indvar54, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10_193)) begin
		Get_motion_code_preheader2i10_332_reg <= Get_motion_code_preheader2i10_332;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10_332_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %333 = add i32 %316, %332*/
		Get_motion_code_preheader2i10_333 = (Get_motion_code_preheader2i10preheader_316_reg + Get_motion_code_preheader2i10_332);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %333 = add i32 %316, %332*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10_193)) begin
		Get_motion_code_preheader2i10_333_reg <= Get_motion_code_preheader2i10_333;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10_333_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %334 = icmp ult i8* %.pr8.i8, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader2i10_334 = (Get_motion_code_preheader2i10_pr8i8_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %334 = icmp ult i8* %.pr8.i8, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10_192)) begin
		Get_motion_code_preheader2i10_334_reg <= Get_motion_code_preheader2i10_334;
		if (start == 1'b0 && ^(Get_motion_code_preheader2i10_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader2i10_334_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i14*/
	/*   %indvar49 = phi i32 [ 0, %.preheader1.i14.preheader ], [ %indvar.next50, %335 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i14preheader_194) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i14_indvar49 = 32'd0;
	end
	/* Get_motion_code: %.preheader1.i14*/
	/*   %indvar49 = phi i32 [ 0, %.preheader1.i14.preheader ], [ %indvar.next50, %335 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB__335_199) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_preheader1i14_indvar49 = Get_motion_code_335_indvarnext50_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i14*/
	/*   %indvar49 = phi i32 [ 0, %.preheader1.i14.preheader ], [ %indvar.next50, %335 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i14preheader_194) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i14_indvar49_reg <= Get_motion_code_preheader1i14_indvar49;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i14_indvar49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i14_indvar49_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i14*/
	/*   %indvar49 = phi i32 [ 0, %.preheader1.i14.preheader ], [ %indvar.next50, %335 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB__335_199) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i14_indvar49_reg <= Get_motion_code_preheader1i14_indvar49;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i14_indvar49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i14_indvar49_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i14*/
	/*   %exitcond51 = icmp eq i32 %indvar49, 2048*/
		Get_motion_code_preheader1i14_exitcond51 = (Get_motion_code_preheader1i14_indvar49_reg == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i14*/
	/*   %exitcond51 = icmp eq i32 %indvar49, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i14_195)) begin
		Get_motion_code_preheader1i14_exitcond51_reg <= Get_motion_code_preheader1i14_exitcond51;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i14_exitcond51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i14_exitcond51_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %335*/
	/*   %p2.0.i.i.i.i12 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar49*/
		Get_motion_code_335_p20iiii12 = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_preheader1i14_indvar49_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %335*/
	/*   %p2.0.i.i.i.i12 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar49*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_196)) begin
		Get_motion_code_335_p20iiii12_reg <= Get_motion_code_335_p20iiii12;
		if (start == 1'b0 && ^(Get_motion_code_335_p20iiii12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_335_p20iiii12_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %335*/
	/*   %p1.0.i.i.i.i11 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar49*/
		Get_motion_code_335_p10iiii11 = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_preheader1i14_indvar49_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %335*/
	/*   %p1.0.i.i.i.i11 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar49*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_196)) begin
		Get_motion_code_335_p10iiii11_reg <= Get_motion_code_335_p10iiii11;
		if (start == 1'b0 && ^(Get_motion_code_335_p10iiii11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_335_p10iiii11_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %335*/
	/*   %336 = load i8* %p2.0.i.i.i.i12, align 1*/
		Get_motion_code_335_336 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %335*/
	/*   %336 = load i8* %p2.0.i.i.i.i12, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_198)) begin
		Get_motion_code_335_336_reg <= Get_motion_code_335_336;
		if (start == 1'b0 && ^(Get_motion_code_335_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_335_336_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %335*/
	/*   %indvar.next50 = add i32 %indvar49, 1*/
		Get_motion_code_335_indvarnext50 = (Get_motion_code_preheader1i14_indvar49_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %335*/
	/*   %indvar.next50 = add i32 %indvar49, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_196)) begin
		Get_motion_code_335_indvarnext50_reg <= Get_motion_code_335_indvarnext50;
		if (start == 1'b0 && ^(Get_motion_code_335_indvarnext50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_335_indvarnext50_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %.pr9.i15 = phi i8* [ %.pr8.i8, %.preheader2.i10 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i16.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10_193) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader2i10_334_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitii16_pr9i15 = Get_motion_code_preheader2i10_pr8i8_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %.pr9.i15 = phi i8* [ %.pr8.i8, %.preheader2.i10 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i16.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16loopexit_200) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexitii16_pr9i15 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %.pr9.i15 = phi i8* [ %.pr8.i8, %.preheader2.i10 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i16.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader2i10_193) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader2i10_334_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitii16_pr9i15_reg <= Get_motion_code_Fill_Bufferexitii16_pr9i15;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii16_pr9i15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii16_pr9i15_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %.pr9.i15 = phi i8* [ %.pr8.i8, %.preheader2.i10 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i16.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16loopexit_200) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexitii16_pr9i15_reg <= Get_motion_code_Fill_Bufferexitii16_pr9i15;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii16_pr9i15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii16_pr9i15_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %337 = getelementptr inbounds i8* %.pr9.i15, i32 1*/
		Get_motion_code_Fill_Bufferexitii16_337 = (Get_motion_code_Fill_Bufferexitii16_pr9i15_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %337 = getelementptr inbounds i8* %.pr9.i15, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_201)) begin
		Get_motion_code_Fill_Bufferexitii16_337_reg <= Get_motion_code_Fill_Bufferexitii16_337;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii16_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii16_337_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %338 = load i8* %.pr9.i15, align 1*/
		Get_motion_code_Fill_Bufferexitii16_338 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %338 = load i8* %.pr9.i15, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203)) begin
		Get_motion_code_Fill_Bufferexitii16_338_reg <= Get_motion_code_Fill_Bufferexitii16_338;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii16_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii16_338_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %339 = zext i8 %338 to i32*/
		Get_motion_code_Fill_Bufferexitii16_339 = Get_motion_code_Fill_Bufferexitii16_338;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %339 = zext i8 %338 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203)) begin
		Get_motion_code_Fill_Bufferexitii16_339_reg <= Get_motion_code_Fill_Bufferexitii16_339;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii16_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii16_339_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %340 = shl i32 %339, %333*/
		Get_motion_code_Fill_Bufferexitii16_340 = (Get_motion_code_Fill_Bufferexitii16_339 <<< (Get_motion_code_preheader2i10_333_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %340 = shl i32 %339, %333*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203)) begin
		Get_motion_code_Fill_Bufferexitii16_340_reg <= Get_motion_code_Fill_Bufferexitii16_340;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii16_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii16_340_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %341 = or i32 %329, %340*/
		Get_motion_code_Fill_Bufferexitii16_341 = (Get_motion_code_preheader2i10_329_reg | Get_motion_code_Fill_Bufferexitii16_340);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %341 = or i32 %329, %340*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_203)) begin
		Get_motion_code_Fill_Bufferexitii16_341_reg <= Get_motion_code_Fill_Bufferexitii16_341;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii16_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii16_341_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %342 = icmp slt i32 %331, 25*/
		Get_motion_code_Fill_Bufferexitii16_342 = ($signed(Get_motion_code_preheader2i10_331_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %342 = icmp slt i32 %331, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_201)) begin
		Get_motion_code_Fill_Bufferexitii16_342_reg <= Get_motion_code_Fill_Bufferexitii16_342;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii16_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii16_342_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %indvar.next55 = add i32 %indvar54, 1*/
		Get_motion_code_Fill_Bufferexitii16_indvarnext55 = (Get_motion_code_preheader2i10_indvar54_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %indvar.next55 = add i32 %indvar54, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_201)) begin
		Get_motion_code_Fill_Bufferexitii16_indvarnext55_reg <= Get_motion_code_Fill_Bufferexitii16_indvarnext55;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitii16_indvarnext55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitii16_indvarnext55_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i18*/
	/*   %343 = add nuw nsw i32 %312, 1*/
		Get_motion_code_loopexiti18_343 = (Get_motion_code_308_312_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i18*/
	/*   %343 = add nuw nsw i32 %312, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti18_204)) begin
		Get_motion_code_loopexiti18_343_reg <= Get_motion_code_loopexiti18_343;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti18_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti18_343_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i18*/
	/*   %scevgep.i17 = getelementptr i8* %309, i32 %343*/
		Get_motion_code_loopexiti18_scevgepi17 = (Get_motion_code_308_309_reg + (1 * Get_motion_code_loopexiti18_343_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i18*/
	/*   %scevgep.i17 = getelementptr i8* %309, i32 %343*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti18_205)) begin
		Get_motion_code_loopexiti18_scevgepi17_reg <= Get_motion_code_loopexiti18_scevgepi17;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti18_scevgepi17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti18_scevgepi17_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit3.i19*/
	/*   %storemerge1.i20 = phi i8* [ %scevgep.i17, %.loopexit.i18 ], [ %337, %.loopexit3.i19.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti18_205) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i19_storemerge1i20 = Get_motion_code_loopexiti18_scevgepi17;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   %storemerge1.i20 = phi i8* [ %scevgep.i17, %.loopexit.i18 ], [ %337, %.loopexit3.i19.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19loopexit_206) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit3i19_storemerge1i20 = Get_motion_code_Fill_Bufferexitii16_337_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit3.i19*/
	/*   %storemerge1.i20 = phi i8* [ %scevgep.i17, %.loopexit.i18 ], [ %337, %.loopexit3.i19.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti18_205) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i19_storemerge1i20_reg <= Get_motion_code_loopexit3i19_storemerge1i20;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i19_storemerge1i20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i19_storemerge1i20_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   %storemerge1.i20 = phi i8* [ %scevgep.i17, %.loopexit.i18 ], [ %337, %.loopexit3.i19.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19loopexit_206) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i19_storemerge1i20_reg <= Get_motion_code_loopexit3i19_storemerge1i20;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i19_storemerge1i20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i19_storemerge1i20_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit3.i19*/
	/*   %storemerge.i21 = phi i32 [ %327, %.loopexit.i18 ], [ %341, %.loopexit3.i19.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti18_205) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i19_storemergei21 = Get_motion_code_preheaderi7_327_reg;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   %storemerge.i21 = phi i32 [ %327, %.loopexit.i18 ], [ %341, %.loopexit3.i19.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19loopexit_206) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit3i19_storemergei21 = Get_motion_code_Fill_Bufferexitii16_341_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit3.i19*/
	/*   %storemerge.i21 = phi i32 [ %327, %.loopexit.i18 ], [ %341, %.loopexit3.i19.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti18_205) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i19_storemergei21_reg <= Get_motion_code_loopexit3i19_storemergei21;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i19_storemergei21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i19_storemergei21_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   %storemerge.i21 = phi i32 [ %327, %.loopexit.i18 ], [ %341, %.loopexit3.i19.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19loopexit_206) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit3i19_storemergei21_reg <= Get_motion_code_loopexit3i19_storemergei21;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i19_storemergei21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i19_storemergei21_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit3.i19*/
	/*   %Incnt.2.i.i22 = add i32 %314, 7*/
		Get_motion_code_loopexit3i19_Incnt2ii22 = (Get_motion_code_308_314_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit3.i19*/
	/*   %Incnt.2.i.i22 = add i32 %314, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_207)) begin
		Get_motion_code_loopexit3i19_Incnt2ii22_reg <= Get_motion_code_loopexit3i19_Incnt2ii22;
		if (start == 1'b0 && ^(Get_motion_code_loopexit3i19_Incnt2ii22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit3i19_Incnt2ii22_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %344 = icmp slt i32 %304, 0*/
		Get_motion_code_Get_Bitsexit23_344 = ($signed(Get_motion_code_Flush_Bufferexit8_304_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %344 = icmp slt i32 %304, 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_210)) begin
		Get_motion_code_Get_Bitsexit23_344_reg <= Get_motion_code_Get_Bitsexit23_344;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit23_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit23_344_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %345 = getelementptr inbounds [12 x [2 x i8]]* @MVtab2, i32 0, i32 %249, i32 0*/
		Get_motion_code_Get_Bitsexit23_345 = (1'd0 | (2 * Get_motion_code_248_249_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %345 = getelementptr inbounds [12 x [2 x i8]]* @MVtab2, i32 0, i32 %249, i32 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_210)) begin
		Get_motion_code_Get_Bitsexit23_345_reg <= Get_motion_code_Get_Bitsexit23_345;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit23_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit23_345_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %346 = load i8* %345, align 1*/
		Get_motion_code_Get_Bitsexit23_346 = MVtab2_out_a;
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %346 = load i8* %345, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_211)) begin
		Get_motion_code_Get_Bitsexit23_346_reg <= Get_motion_code_Get_Bitsexit23_346;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit23_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit23_346_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %347 = sext i8 %346 to i32*/
		Get_motion_code_Get_Bitsexit23_347 = $signed(Get_motion_code_Get_Bitsexit23_346);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %347 = sext i8 %346 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_211)) begin
		Get_motion_code_Get_Bitsexit23_347_reg <= Get_motion_code_Get_Bitsexit23_347;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit23_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit23_347_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %348 = sub nsw i32 0, %347*/
		Get_motion_code_Get_Bitsexit23_348 = (32'd0 - Get_motion_code_Get_Bitsexit23_347);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %348 = sub nsw i32 0, %347*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_211)) begin
		Get_motion_code_Get_Bitsexit23_348_reg <= Get_motion_code_Get_Bitsexit23_348;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit23_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit23_348_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %.89 = select i1 %344, i32 %348, i32 %347*/
		Get_motion_code_Get_Bitsexit23_89 = (Get_motion_code_Get_Bitsexit23_344_reg ? Get_motion_code_Get_Bitsexit23_348 : Get_motion_code_Get_Bitsexit23_347);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %.89 = select i1 %344, i32 %348, i32 %347*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_211)) begin
		Get_motion_code_Get_Bitsexit23_89_reg <= Get_motion_code_Get_Bitsexit23_89;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit23_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bitsexit23_89_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %349*/
	/*   %.0 = phi i32 [ 0, %Get_Bits.exit ], [ 0, %248 ], [ %.88, %Get_Bits.exit41 ], [ %.89, %Get_Bits.exit23 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit_31) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Get_Bitsexit_44 == 1'd0))) begin
		Get_motion_code_349_0 = 32'd0;
	end
	/* Get_motion_code: %349*/
	/*   %.0 = phi i32 [ 0, %Get_Bits.exit ], [ 0, %248 ], [ %.88, %Get_Bits.exit41 ], [ %.89, %Get_Bits.exit23 ]*/
	else if (((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_151) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_349_0 = Get_motion_code_Get_Bitsexit41_88;
	end
	/* Get_motion_code: %349*/
	/*   %.0 = phi i32 [ 0, %Get_Bits.exit ], [ 0, %248 ], [ %.88, %Get_Bits.exit41 ], [ %.89, %Get_Bits.exit23 ]*/
	else if ((((cur_state == LEGUP_F_Get_motion_code_BB__248_152) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_248_250 == 1'd1))) begin
		Get_motion_code_349_0 = 32'd0;
	end
	/* Get_motion_code: %349*/
	/*   %.0 = phi i32 [ 0, %Get_Bits.exit ], [ 0, %248 ], [ %.88, %Get_Bits.exit41 ], [ %.89, %Get_Bits.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_211) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_349_0 = Get_motion_code_Get_Bitsexit23_89;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %349*/
	/*   %.0 = phi i32 [ 0, %Get_Bits.exit ], [ 0, %248 ], [ %.88, %Get_Bits.exit41 ], [ %.89, %Get_Bits.exit23 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit_31) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Get_Bitsexit_44 == 1'd0))) begin
		Get_motion_code_349_0_reg <= Get_motion_code_349_0;
		if (start == 1'b0 && ^(Get_motion_code_349_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_349_0_reg"); $finish; end
	end
	/* Get_motion_code: %349*/
	/*   %.0 = phi i32 [ 0, %Get_Bits.exit ], [ 0, %248 ], [ %.88, %Get_Bits.exit41 ], [ %.89, %Get_Bits.exit23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_151) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_349_0_reg <= Get_motion_code_349_0;
		if (start == 1'b0 && ^(Get_motion_code_349_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_349_0_reg"); $finish; end
	end
	/* Get_motion_code: %349*/
	/*   %.0 = phi i32 [ 0, %Get_Bits.exit ], [ 0, %248 ], [ %.88, %Get_Bits.exit41 ], [ %.89, %Get_Bits.exit23 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__248_152) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_248_250 == 1'd1))) begin
		Get_motion_code_349_0_reg <= Get_motion_code_349_0;
		if (start == 1'b0 && ^(Get_motion_code_349_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_349_0_reg"); $finish; end
	end
	/* Get_motion_code: %349*/
	/*   %.0 = phi i32 [ 0, %Get_Bits.exit ], [ 0, %248 ], [ %.88, %Get_Bits.exit41 ], [ %.89, %Get_Bits.exit23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_211) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_349_0_reg <= Get_motion_code_349_0;
		if (start == 1'b0 && ^(Get_motion_code_349_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_349_0_reg"); $finish; end
	end
end
always @(*) begin
	MVtab0_address_a = 1'd0;
	/* Get_motion_code: %48*/
	/*   %51 = load i8* %50, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_33)) begin
		MVtab0_address_a = (Get_motion_code_48_50 >>> 3'd0);
	end
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %144 = load i8* %143, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_90)) begin
		MVtab0_address_a = (Get_motion_code_Get_Bitsexit59_143 >>> 3'd0);
	end
end
always @(*) begin
	MVtab0_write_enable_a = 1'd0;
	/* Get_motion_code: %48*/
	/*   %51 = load i8* %50, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_33)) begin
		MVtab0_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   %144 = load i8* %143, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_90)) begin
		MVtab0_write_enable_a = 1'd0;
	end
end
always @(*) begin
	MVtab1_address_a = 1'd0;
	/* Get_motion_code: %149*/
	/*   %152 = load i8* %151, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_93)) begin
		MVtab1_address_a = (Get_motion_code_149_151 >>> 3'd0);
	end
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %245 = load i8* %244, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_150)) begin
		MVtab1_address_a = (Get_motion_code_Get_Bitsexit41_244 >>> 3'd0);
	end
end
always @(*) begin
	MVtab1_write_enable_a = 1'd0;
	/* Get_motion_code: %149*/
	/*   %152 = load i8* %151, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_93)) begin
		MVtab1_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %Get_Bits.exit41*/
	/*   %245 = load i8* %244, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit41_150)) begin
		MVtab1_write_enable_a = 1'd0;
	end
end
always @(*) begin
	MVtab2_address_a = 1'd0;
	/* Get_motion_code: %251*/
	/*   %253 = load i8* %252, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_153)) begin
		MVtab2_address_a = (Get_motion_code_251_252 >>> 3'd0);
	end
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %346 = load i8* %345, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_210)) begin
		MVtab2_address_a = (Get_motion_code_Get_Bitsexit23_345 >>> 3'd0);
	end
end
always @(*) begin
	MVtab2_write_enable_a = 1'd0;
	/* Get_motion_code: %251*/
	/*   %253 = load i8* %252, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_153)) begin
		MVtab2_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %Get_Bits.exit23*/
	/*   %346 = load i8* %345, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit23_210)) begin
		MVtab2_write_enable_a = 1'd0;
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheaderi_20_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %20 = mul i32 %indvar66, -8*/
	if ((lpm_mult_Get_motion_code_preheaderi_20_en == 1'd1)) begin
		Get_motion_code_preheaderi_20_stage0_reg <= (Get_motion_code_preheaderi_indvar66_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader2i_30_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i*/
	/*   %30 = mul i32 %indvar74, -8*/
	if ((lpm_mult_Get_motion_code_preheader2i_30_en == 1'd1)) begin
		Get_motion_code_preheader2i_30_stage0_reg <= (Get_motion_code_preheader2i_indvar74_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_74_78_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %74*/
	/*   %78 = mul i32 %indvar17, -8*/
	if ((lpm_mult_Get_motion_code_74_78_en == 1'd1)) begin
		Get_motion_code_74_78_stage0_reg <= (Get_motion_code_74_indvar17_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader22_88_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader22*/
	/*   %88 = mul i32 %indvar25, -8*/
	if ((lpm_mult_Get_motion_code_preheader22_88_en == 1'd1)) begin
		Get_motion_code_preheader22_88_stage0_reg <= (Get_motion_code_preheader22_indvar25_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheaderi43_120_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i43*/
	/*   %120 = mul i32 %indvar, -8*/
	if ((lpm_mult_Get_motion_code_preheaderi43_120_en == 1'd1)) begin
		Get_motion_code_preheaderi43_120_stage0_reg <= (Get_motion_code_preheaderi43_indvar_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader2i46_130_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i46*/
	/*   %130 = mul i32 %indvar15, -8*/
	if ((lpm_mult_Get_motion_code_preheader2i46_130_en == 1'd1)) begin
		Get_motion_code_preheader2i46_130_stage0_reg <= (Get_motion_code_preheader2i46_indvar15_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_175_179_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %175*/
	/*   %179 = mul i32 %indvar36, -8*/
	if ((lpm_mult_Get_motion_code_175_179_en == 1'd1)) begin
		Get_motion_code_175_179_stage0_reg <= (Get_motion_code_175_indvar36_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader27_189_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader27*/
	/*   %189 = mul i32 %indvar44, -8*/
	if ((lpm_mult_Get_motion_code_preheader27_189_en == 1'd1)) begin
		Get_motion_code_preheader27_189_stage0_reg <= (Get_motion_code_preheader27_indvar44_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheaderi25_221_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i25*/
	/*   %221 = mul i32 %indvar27, -8*/
	if ((lpm_mult_Get_motion_code_preheaderi25_221_en == 1'd1)) begin
		Get_motion_code_preheaderi25_221_stage0_reg <= (Get_motion_code_preheaderi25_indvar27_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader2i28_231_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i28*/
	/*   %231 = mul i32 %indvar34, -8*/
	if ((lpm_mult_Get_motion_code_preheader2i28_231_en == 1'd1)) begin
		Get_motion_code_preheader2i28_231_stage0_reg <= (Get_motion_code_preheader2i28_indvar34_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_276_280_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %276*/
	/*   %280 = mul i32 %indvar56, -8*/
	if ((lpm_mult_Get_motion_code_276_280_en == 1'd1)) begin
		Get_motion_code_276_280_stage0_reg <= (Get_motion_code_276_indvar56_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader32_290_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader32*/
	/*   %290 = mul i32 %indvar64, -8*/
	if ((lpm_mult_Get_motion_code_preheader32_290_en == 1'd1)) begin
		Get_motion_code_preheader32_290_stage0_reg <= (Get_motion_code_preheader32_indvar64_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheaderi7_322_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i7*/
	/*   %322 = mul i32 %indvar46, -8*/
	if ((lpm_mult_Get_motion_code_preheaderi7_322_en == 1'd1)) begin
		Get_motion_code_preheaderi7_322_stage0_reg <= (Get_motion_code_preheaderi7_indvar46_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader2i10_332_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader2.i10*/
	/*   %332 = mul i32 %indvar54, -8*/
	if ((lpm_mult_Get_motion_code_preheader2i10_332_en == 1'd1)) begin
		Get_motion_code_preheader2i10_332_stage0_reg <= (Get_motion_code_preheader2i10_indvar54_reg * -32'd8);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   ret i32 %.*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_91)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* Get_motion_code: %349*/
	/*   ret i32 %.0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__349_212)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %1 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %2, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %6*/
	/*   %7 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %22 = load i8* %scevgep68, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %33*/
	/*   store i8 %34, i8* %p1.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i8* %storemerge1.i, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %48*/
	/*   store i32 %53, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %56*/
	/*   %57 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__56_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %74*/
	/*   %80 = load i8* %scevgep19, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %91*/
	/*   store i8 %92, i8* %p1.0.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_50)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %100*/
	/*   store i8* %storemerge5, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %103, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %106*/
	/*   %107 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__106_64)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.preheader.i43*/
	/*   %122 = load i8* %scevgep9, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_69)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %133*/
	/*   store i8 %134, i8* %p1.0.i.i.i.i47, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_78)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i8* %storemerge1.i56, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_87)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %149*/
	/*   store i32 %154, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %157*/
	/*   %158 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__157_96)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %175*/
	/*   %181 = load i8* %scevgep38, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_101)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %192*/
	/*   store i8 %193, i8* %p1.0.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_110)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %201*/
	/*   store i8* %storemerge3, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   store i32 %204, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %207*/
	/*   %208 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__207_124)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.preheader.i25*/
	/*   %223 = load i8* %scevgep29, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_129)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %234*/
	/*   store i8 %235, i8* %p1.0.i.i.i.i29, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_138)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i8* %storemerge1.i38, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_147)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %251*/
	/*   store i32 %255, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %258*/
	/*   %259 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__258_156)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %276*/
	/*   %282 = load i8* %scevgep58, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_161)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %293*/
	/*   store i8 %294, i8* %p1.0.i.i.i3, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_170)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %302*/
	/*   store i8* %storemerge1, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   store i32 %305, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %308*/
	/*   %309 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__308_184)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.preheader.i7*/
	/*   %324 = load i8* %scevgep48, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_189)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %335*/
	/*   store i8 %336, i8* %p1.0.i.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_198)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i8* %storemerge1.i20, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_207)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %1 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %2, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %6*/
	/*   %7 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %22 = load i8* %scevgep68, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_10)) begin
		memory_controller_address_a = Get_motion_code_preheaderi_scevgep68;
	end
	/* Get_motion_code: %33*/
	/*   store i8 %34, i8* %p1.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_19)) begin
		memory_controller_address_a = Get_motion_code_33_p10iiii_reg;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i8* %storemerge1.i, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_28)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %48*/
	/*   store i32 %53, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %56*/
	/*   %57 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__56_36)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %74*/
	/*   %80 = load i8* %scevgep19, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_41)) begin
		memory_controller_address_a = Get_motion_code_74_scevgep19;
	end
	/* Get_motion_code: %91*/
	/*   store i8 %92, i8* %p1.0.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_50)) begin
		memory_controller_address_a = Get_motion_code_91_p10iii_reg;
	end
	/* Get_motion_code: %100*/
	/*   store i8* %storemerge5, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %103, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %106*/
	/*   %107 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__106_64)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.preheader.i43*/
	/*   %122 = load i8* %scevgep9, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_69)) begin
		memory_controller_address_a = Get_motion_code_preheaderi43_scevgep9;
	end
	/* Get_motion_code: %133*/
	/*   store i8 %134, i8* %p1.0.i.i.i.i47, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_78)) begin
		memory_controller_address_a = Get_motion_code_133_p10iiii47_reg;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i8* %storemerge1.i56, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_87)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %149*/
	/*   store i32 %154, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %157*/
	/*   %158 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__157_96)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %175*/
	/*   %181 = load i8* %scevgep38, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_101)) begin
		memory_controller_address_a = Get_motion_code_175_scevgep38;
	end
	/* Get_motion_code: %192*/
	/*   store i8 %193, i8* %p1.0.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_110)) begin
		memory_controller_address_a = Get_motion_code_192_p10iii11_reg;
	end
	/* Get_motion_code: %201*/
	/*   store i8* %storemerge3, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   store i32 %204, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %207*/
	/*   %208 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__207_124)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.preheader.i25*/
	/*   %223 = load i8* %scevgep29, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_129)) begin
		memory_controller_address_a = Get_motion_code_preheaderi25_scevgep29;
	end
	/* Get_motion_code: %234*/
	/*   store i8 %235, i8* %p1.0.i.i.i.i29, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_138)) begin
		memory_controller_address_a = Get_motion_code_234_p10iiii29_reg;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i8* %storemerge1.i38, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_147)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %251*/
	/*   store i32 %255, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %258*/
	/*   %259 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__258_156)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %276*/
	/*   %282 = load i8* %scevgep58, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_161)) begin
		memory_controller_address_a = Get_motion_code_276_scevgep58;
	end
	/* Get_motion_code: %293*/
	/*   store i8 %294, i8* %p1.0.i.i.i3, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_170)) begin
		memory_controller_address_a = Get_motion_code_293_p10iii3_reg;
	end
	/* Get_motion_code: %302*/
	/*   store i8* %storemerge1, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   store i32 %305, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %308*/
	/*   %309 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__308_184)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.preheader.i7*/
	/*   %324 = load i8* %scevgep48, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_189)) begin
		memory_controller_address_a = Get_motion_code_preheaderi7_scevgep48;
	end
	/* Get_motion_code: %335*/
	/*   store i8 %336, i8* %p1.0.i.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_198)) begin
		memory_controller_address_a = Get_motion_code_335_p10iiii11_reg;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i8* %storemerge1.i20, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_207)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %1 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %2, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %6*/
	/*   %7 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %22 = load i8* %scevgep68, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %33*/
	/*   store i8 %34, i8* %p1.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i8* %storemerge1.i, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_28)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %48*/
	/*   store i32 %53, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %56*/
	/*   %57 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__56_36)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %74*/
	/*   %80 = load i8* %scevgep19, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_41)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %91*/
	/*   store i8 %92, i8* %p1.0.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_50)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %100*/
	/*   store i8* %storemerge5, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %103, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %106*/
	/*   %107 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__106_64)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.preheader.i43*/
	/*   %122 = load i8* %scevgep9, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_69)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %133*/
	/*   store i8 %134, i8* %p1.0.i.i.i.i47, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_78)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i8* %storemerge1.i56, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_87)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %149*/
	/*   store i32 %154, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %157*/
	/*   %158 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__157_96)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %175*/
	/*   %181 = load i8* %scevgep38, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_101)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %192*/
	/*   store i8 %193, i8* %p1.0.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_110)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %201*/
	/*   store i8* %storemerge3, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   store i32 %204, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %207*/
	/*   %208 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__207_124)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.preheader.i25*/
	/*   %223 = load i8* %scevgep29, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_129)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %234*/
	/*   store i8 %235, i8* %p1.0.i.i.i.i29, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_138)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i8* %storemerge1.i38, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_147)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %251*/
	/*   store i32 %255, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %258*/
	/*   %259 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__258_156)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %276*/
	/*   %282 = load i8* %scevgep58, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_161)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %293*/
	/*   store i8 %294, i8* %p1.0.i.i.i3, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_170)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %302*/
	/*   store i8* %storemerge1, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   store i32 %305, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %308*/
	/*   %309 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__308_184)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.preheader.i7*/
	/*   %324 = load i8* %scevgep48, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_189)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %335*/
	/*   store i8 %336, i8* %p1.0.i.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_198)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i8* %storemerge1.i20, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_207)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %2, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_in_a = Get_motion_code_0_2;
	end
	/* Get_motion_code: %33*/
	/*   store i8 %34, i8* %p1.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_19)) begin
		memory_controller_in_a = Get_motion_code_33_34;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i8* %storemerge1.i, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_28)) begin
		memory_controller_in_a = Get_motion_code_loopexit3i_storemerge1i_reg;
	end
	/* Get_motion_code: %48*/
	/*   store i32 %53, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		memory_controller_in_a = Get_motion_code_48_53;
	end
	/* Get_motion_code: %91*/
	/*   store i8 %92, i8* %p1.0.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_50)) begin
		memory_controller_in_a = Get_motion_code_91_92;
	end
	/* Get_motion_code: %100*/
	/*   store i8* %storemerge5, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		memory_controller_in_a = Get_motion_code_100_storemerge5_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %103, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		memory_controller_in_a = Get_motion_code_Flush_Bufferexit_103;
	end
	/* Get_motion_code: %133*/
	/*   store i8 %134, i8* %p1.0.i.i.i.i47, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_78)) begin
		memory_controller_in_a = Get_motion_code_133_134;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i8* %storemerge1.i56, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_87)) begin
		memory_controller_in_a = Get_motion_code_loopexit3i55_storemerge1i56_reg;
	end
	/* Get_motion_code: %149*/
	/*   store i32 %154, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		memory_controller_in_a = Get_motion_code_149_154;
	end
	/* Get_motion_code: %192*/
	/*   store i8 %193, i8* %p1.0.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_110)) begin
		memory_controller_in_a = Get_motion_code_192_193;
	end
	/* Get_motion_code: %201*/
	/*   store i8* %storemerge3, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		memory_controller_in_a = Get_motion_code_201_storemerge3_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   store i32 %204, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		memory_controller_in_a = Get_motion_code_Flush_Bufferexit16_204;
	end
	/* Get_motion_code: %234*/
	/*   store i8 %235, i8* %p1.0.i.i.i.i29, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_138)) begin
		memory_controller_in_a = Get_motion_code_234_235;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i8* %storemerge1.i38, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_147)) begin
		memory_controller_in_a = Get_motion_code_loopexit3i37_storemerge1i38_reg;
	end
	/* Get_motion_code: %251*/
	/*   store i32 %255, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		memory_controller_in_a = Get_motion_code_251_255;
	end
	/* Get_motion_code: %293*/
	/*   store i8 %294, i8* %p1.0.i.i.i3, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_170)) begin
		memory_controller_in_a = Get_motion_code_293_294;
	end
	/* Get_motion_code: %302*/
	/*   store i8* %storemerge1, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		memory_controller_in_a = Get_motion_code_302_storemerge1_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   store i32 %305, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		memory_controller_in_a = Get_motion_code_Flush_Bufferexit8_305;
	end
	/* Get_motion_code: %335*/
	/*   store i8 %336, i8* %p1.0.i.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_198)) begin
		memory_controller_in_a = Get_motion_code_335_336;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i8* %storemerge1.i20, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_207)) begin
		memory_controller_in_a = Get_motion_code_loopexit3i19_storemerge1i20_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %1 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %2, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %6*/
	/*   %7 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %22 = load i8* %scevgep68, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_10)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %33*/
	/*   store i8 %34, i8* %p1.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_19)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i8* %storemerge1.i, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %48*/
	/*   store i32 %53, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %56*/
	/*   %57 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__56_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %74*/
	/*   %80 = load i8* %scevgep19, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__74_41)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %91*/
	/*   store i8 %92, i8* %p1.0.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_50)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %100*/
	/*   store i8* %storemerge5, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %103, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %106*/
	/*   %107 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__106_64)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.preheader.i43*/
	/*   %122 = load i8* %scevgep9, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi43_69)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %133*/
	/*   store i8 %134, i8* %p1.0.i.i.i.i47, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_78)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i8* %storemerge1.i56, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_87)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %149*/
	/*   store i32 %154, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %157*/
	/*   %158 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__157_96)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %175*/
	/*   %181 = load i8* %scevgep38, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__175_101)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %192*/
	/*   store i8 %193, i8* %p1.0.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_110)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %201*/
	/*   store i8* %storemerge3, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   store i32 %204, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %207*/
	/*   %208 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__207_124)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.preheader.i25*/
	/*   %223 = load i8* %scevgep29, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi25_129)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %234*/
	/*   store i8 %235, i8* %p1.0.i.i.i.i29, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_138)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i8* %storemerge1.i38, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_147)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %251*/
	/*   store i32 %255, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %258*/
	/*   %259 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__258_156)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %276*/
	/*   %282 = load i8* %scevgep58, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__276_161)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %293*/
	/*   store i8 %294, i8* %p1.0.i.i.i3, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_170)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %302*/
	/*   store i8* %storemerge1, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   store i32 %305, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %308*/
	/*   %309 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__308_184)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.preheader.i7*/
	/*   %324 = load i8* %scevgep48, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi7_189)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %335*/
	/*   store i8 %336, i8* %p1.0.i.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_198)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i8* %storemerge1.i20, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_207)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %3 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %4, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %33*/
	/*   %34 = load i8* %p2.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %36 = load i8* %.pr9.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i32 %storemerge.i, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i32 %Incnt.2.i.i, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %48*/
	/*   store i32 %54, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %91*/
	/*   %92 = load i8* %p2.0.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_48)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %94 = load i8* %.pr43, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_53)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %100*/
	/*   store i32 %storemerge4, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %100*/
	/*   store i32 %Incnt.2.i, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_60)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %104, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %133*/
	/*   %134 = load i8* %p2.0.i.i.i.i48, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_76)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %136 = load i8* %.pr9.i51, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_81)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i32 %storemerge.i57, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_87)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i32 %Incnt.2.i.i58, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_88)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %149*/
	/*   store i32 %155, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %192*/
	/*   %193 = load i8* %p2.0.i.i.i12, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_108)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %195 = load i8* %.pr1853, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_113)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %201*/
	/*   store i32 %storemerge2, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %201*/
	/*   store i32 %Incnt.2.i15, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_120)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   store i32 %205, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %234*/
	/*   %235 = load i8* %p2.0.i.i.i.i30, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_136)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %237 = load i8* %.pr9.i33, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_141)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i32 %storemerge.i39, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_147)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i32 %Incnt.2.i.i40, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_148)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %251*/
	/*   store i32 %256, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %293*/
	/*   %294 = load i8* %p2.0.i.i.i4, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_168)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %296 = load i8* %.pr2063, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_173)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %302*/
	/*   store i32 %storemerge, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %302*/
	/*   store i32 %Incnt.2.i7, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_180)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   store i32 %306, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %335*/
	/*   %336 = load i8* %p2.0.i.i.i.i12, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_196)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %338 = load i8* %.pr9.i15, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_201)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i32 %storemerge.i21, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_207)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i32 %Incnt.2.i.i22, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_208)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %3 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %4, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %33*/
	/*   %34 = load i8* %p2.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_17)) begin
		memory_controller_address_b = Get_motion_code_33_p20iiii;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %36 = load i8* %.pr9.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_22)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexitii_pr9i_reg;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i32 %storemerge.i, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_28)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i32 %Incnt.2.i.i, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_29)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %48*/
	/*   store i32 %54, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %91*/
	/*   %92 = load i8* %p2.0.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_48)) begin
		memory_controller_address_b = Get_motion_code_91_p20iii;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %94 = load i8* %.pr43, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_53)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexiti_pr43_reg;
	end
	/* Get_motion_code: %100*/
	/*   store i32 %storemerge4, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %100*/
	/*   store i32 %Incnt.2.i, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_60)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %104, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %133*/
	/*   %134 = load i8* %p2.0.i.i.i.i48, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_76)) begin
		memory_controller_address_b = Get_motion_code_133_p20iiii48;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %136 = load i8* %.pr9.i51, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_81)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexitii52_pr9i51_reg;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i32 %storemerge.i57, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_87)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i32 %Incnt.2.i.i58, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_88)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %149*/
	/*   store i32 %155, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %192*/
	/*   %193 = load i8* %p2.0.i.i.i12, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_108)) begin
		memory_controller_address_b = Get_motion_code_192_p20iii12;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %195 = load i8* %.pr1853, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_113)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexiti14_pr1853_reg;
	end
	/* Get_motion_code: %201*/
	/*   store i32 %storemerge2, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %201*/
	/*   store i32 %Incnt.2.i15, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_120)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   store i32 %205, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %234*/
	/*   %235 = load i8* %p2.0.i.i.i.i30, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_136)) begin
		memory_controller_address_b = Get_motion_code_234_p20iiii30;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %237 = load i8* %.pr9.i33, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_141)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexitii34_pr9i33_reg;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i32 %storemerge.i39, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_147)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i32 %Incnt.2.i.i40, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_148)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %251*/
	/*   store i32 %256, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %293*/
	/*   %294 = load i8* %p2.0.i.i.i4, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_168)) begin
		memory_controller_address_b = Get_motion_code_293_p20iii4;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %296 = load i8* %.pr2063, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_173)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexiti6_pr2063_reg;
	end
	/* Get_motion_code: %302*/
	/*   store i32 %storemerge, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %302*/
	/*   store i32 %Incnt.2.i7, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_180)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   store i32 %306, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %335*/
	/*   %336 = load i8* %p2.0.i.i.i.i12, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_196)) begin
		memory_controller_address_b = Get_motion_code_335_p20iiii12;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %338 = load i8* %.pr9.i15, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_201)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexitii16_pr9i15_reg;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i32 %storemerge.i21, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_207)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i32 %Incnt.2.i.i22, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_208)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %3 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %4, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %33*/
	/*   %34 = load i8* %p2.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %36 = load i8* %.pr9.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_22)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i32 %storemerge.i, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_28)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i32 %Incnt.2.i.i, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_29)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %48*/
	/*   store i32 %54, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %91*/
	/*   %92 = load i8* %p2.0.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_48)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %94 = load i8* %.pr43, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_53)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %100*/
	/*   store i32 %storemerge4, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %100*/
	/*   store i32 %Incnt.2.i, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_60)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %104, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %133*/
	/*   %134 = load i8* %p2.0.i.i.i.i48, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_76)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %136 = load i8* %.pr9.i51, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_81)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i32 %storemerge.i57, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_87)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i32 %Incnt.2.i.i58, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_88)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %149*/
	/*   store i32 %155, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %192*/
	/*   %193 = load i8* %p2.0.i.i.i12, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_108)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %195 = load i8* %.pr1853, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_113)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %201*/
	/*   store i32 %storemerge2, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %201*/
	/*   store i32 %Incnt.2.i15, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_120)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   store i32 %205, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %234*/
	/*   %235 = load i8* %p2.0.i.i.i.i30, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_136)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %237 = load i8* %.pr9.i33, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_141)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i32 %storemerge.i39, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_147)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i32 %Incnt.2.i.i40, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_148)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %251*/
	/*   store i32 %256, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %293*/
	/*   %294 = load i8* %p2.0.i.i.i4, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_168)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %296 = load i8* %.pr2063, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_173)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %302*/
	/*   store i32 %storemerge, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %302*/
	/*   store i32 %Incnt.2.i7, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_180)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   store i32 %306, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %335*/
	/*   %336 = load i8* %p2.0.i.i.i.i12, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_196)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %338 = load i8* %.pr9.i15, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_201)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i32 %storemerge.i21, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_207)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i32 %Incnt.2.i.i22, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_208)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %4, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_in_b = Get_motion_code_0_4;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i32 %storemerge.i, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_28)) begin
		memory_controller_in_b = Get_motion_code_loopexit3i_storemergei_reg;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i32 %Incnt.2.i.i, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_29)) begin
		memory_controller_in_b = Get_motion_code_loopexit3i_Incnt2ii_reg;
	end
	/* Get_motion_code: %48*/
	/*   store i32 %54, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		memory_controller_in_b = Get_motion_code_48_54;
	end
	/* Get_motion_code: %100*/
	/*   store i32 %storemerge4, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		memory_controller_in_b = Get_motion_code_100_storemerge4_reg;
	end
	/* Get_motion_code: %100*/
	/*   store i32 %Incnt.2.i, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_60)) begin
		memory_controller_in_b = Get_motion_code_100_Incnt2i_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %104, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		memory_controller_in_b = Get_motion_code_Flush_Bufferexit_104;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i32 %storemerge.i57, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_87)) begin
		memory_controller_in_b = Get_motion_code_loopexit3i55_storemergei57_reg;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i32 %Incnt.2.i.i58, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_88)) begin
		memory_controller_in_b = Get_motion_code_loopexit3i55_Incnt2ii58_reg;
	end
	/* Get_motion_code: %149*/
	/*   store i32 %155, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		memory_controller_in_b = Get_motion_code_149_155;
	end
	/* Get_motion_code: %201*/
	/*   store i32 %storemerge2, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		memory_controller_in_b = Get_motion_code_201_storemerge2_reg;
	end
	/* Get_motion_code: %201*/
	/*   store i32 %Incnt.2.i15, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_120)) begin
		memory_controller_in_b = Get_motion_code_201_Incnt2i15_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   store i32 %205, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		memory_controller_in_b = Get_motion_code_Flush_Bufferexit16_205;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i32 %storemerge.i39, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_147)) begin
		memory_controller_in_b = Get_motion_code_loopexit3i37_storemergei39_reg;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i32 %Incnt.2.i.i40, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_148)) begin
		memory_controller_in_b = Get_motion_code_loopexit3i37_Incnt2ii40_reg;
	end
	/* Get_motion_code: %251*/
	/*   store i32 %256, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		memory_controller_in_b = Get_motion_code_251_256;
	end
	/* Get_motion_code: %302*/
	/*   store i32 %storemerge, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		memory_controller_in_b = Get_motion_code_302_storemerge_reg;
	end
	/* Get_motion_code: %302*/
	/*   store i32 %Incnt.2.i7, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_180)) begin
		memory_controller_in_b = Get_motion_code_302_Incnt2i7_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   store i32 %306, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		memory_controller_in_b = Get_motion_code_Flush_Bufferexit8_306;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i32 %storemerge.i21, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_207)) begin
		memory_controller_in_b = Get_motion_code_loopexit3i19_storemergei21_reg;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i32 %Incnt.2.i.i22, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_208)) begin
		memory_controller_in_b = Get_motion_code_loopexit3i19_Incnt2ii22_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %3 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %4, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %33*/
	/*   %34 = load i8* %p2.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__33_17)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i*/
	/*   %36 = load i8* %.pr9.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii_22)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i32 %storemerge.i, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit3.i*/
	/*   store i32 %Incnt.2.i.i, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %48*/
	/*   store i32 %54, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__48_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %91*/
	/*   %92 = load i8* %p2.0.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__91_48)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %94 = load i8* %.pr43, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_53)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %100*/
	/*   store i32 %storemerge4, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_59)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %100*/
	/*   store i32 %Incnt.2.i, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__100_60)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %104, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_62)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %133*/
	/*   %134 = load i8* %p2.0.i.i.i.i48, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__133_76)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i52*/
	/*   %136 = load i8* %.pr9.i51, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii52_81)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i32 %storemerge.i57, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_87)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit3.i55*/
	/*   store i32 %Incnt.2.i.i58, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i55_88)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %149*/
	/*   store i32 %155, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__149_94)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %192*/
	/*   %193 = load i8* %p2.0.i.i.i12, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__192_108)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i14*/
	/*   %195 = load i8* %.pr1853, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti14_113)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %201*/
	/*   store i32 %storemerge2, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_119)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %201*/
	/*   store i32 %Incnt.2.i15, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__201_120)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %Flush_Buffer.exit16*/
	/*   store i32 %205, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit16_122)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %234*/
	/*   %235 = load i8* %p2.0.i.i.i.i30, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__234_136)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i34*/
	/*   %237 = load i8* %.pr9.i33, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii34_141)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i32 %storemerge.i39, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_147)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit3.i37*/
	/*   store i32 %Incnt.2.i.i40, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i37_148)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %251*/
	/*   store i32 %256, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__251_154)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %293*/
	/*   %294 = load i8* %p2.0.i.i.i4, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__293_168)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i6*/
	/*   %296 = load i8* %.pr2063, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti6_173)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %302*/
	/*   store i32 %storemerge, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_179)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %302*/
	/*   store i32 %Incnt.2.i7, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__302_180)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %Flush_Buffer.exit8*/
	/*   store i32 %306, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit8_182)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %335*/
	/*   %336 = load i8* %p2.0.i.i.i.i12, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__335_196)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i16*/
	/*   %338 = load i8* %.pr9.i15, align 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitii16_201)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i32 %storemerge.i21, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_207)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit3.i19*/
	/*   store i32 %Incnt.2.i.i22, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit3i19_208)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* Get_motion_code: %Get_Bits.exit59*/
	/*   ret i32 %.*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bitsexit59_91)) begin
		return_val <= Get_motion_code_Get_Bitsexit59_;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bitsexit59_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* Get_motion_code: %349*/
	/*   ret i32 %.0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__349_212)) begin
		return_val <= Get_motion_code_349_0_reg;
		if (start == 1'b0 && ^(Get_motion_code_349_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__1_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB_preheader41preheader_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB_preheader41_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__4_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__4_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__4_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__6_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__8_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__8_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__8_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__11_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__13_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__15_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__15_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__15_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB_preheader4_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB_preheader4_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB_preheader3preheader_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB_preheader3_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__20_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__20_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__20_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__20_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB_Fill_Bufferexitiiloopexit_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB_Fill_Bufferexitii_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB_Fill_Bufferexitii_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB_Fill_Bufferexitii_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB_Get_Bitsexit_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB_Get_Bitsexit_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB_Get_Bitsexit_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB_Get_Bitsexit_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB__34_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB__34_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB__34_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB__34_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB__40_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB__40_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB__40_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB_preheader2i27preheader_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB_preheaderi24preheader_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB_preheaderi24_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB_preheaderi24_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB_preheaderi24_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB_preheader2i27_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB_preheader2i27_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB_preheader1i31preheader_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB_preheader1i31_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB__67_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB__67_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB__67_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB__67_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB_Fill_Bufferexitii33loopexit_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB_Fill_Bufferexitii33_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB_Fill_Bufferexitii33_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB_Fill_Bufferexitii33_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB_loopexiti35_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB_loopexiti35_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB_loopexit3i36loopexit_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB_loopexit3i36_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB_loopexit3i36_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB_loopexit3i36_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB_Get_Bitsexit40_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB_Get_Bitsexit40_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB__79_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB__86_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB__86_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB__88_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB_decode_motion_vectorexitii_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB_decode_motion_vectorexitii_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB_decode_motion_vectorexitii_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB__98_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB__98_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB__98_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__98_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB__104_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB__104_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB__104_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB_preheader2i9preheader_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB_preheaderi6preheader_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB_preheaderi6_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB_preheaderi6_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB_preheaderi6_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB_preheader2i9_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB_preheader2i9_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB_preheader1i13preheader_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB_preheader1i13_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB__131_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB__131_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB__131_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB__131_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB_Fill_Bufferexitii15loopexit_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB_Fill_Bufferexitii15_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB_Fill_Bufferexitii15_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB_Fill_Bufferexitii15_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB_loopexiti17_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB_loopexiti17_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB_loopexit3i18loopexit_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB_loopexit3i18_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB_loopexit3i18_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB_loopexit3i18_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB_Get_Bitsexit22_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB_Get_Bitsexit22_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB_Get_Bitsexit22_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB__145_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB__152_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB__152_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB__152_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB__156_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB_motion_vectorsexit_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB_motion_vectorsexit_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB_motion_vectorsexit_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB__167_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB_preheaderpreheader_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB_preheader_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB__170_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB__170_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB__176_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB__178_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB__178_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB__185_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB__187_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB__189_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB__192_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__194_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__196_128 = 8'd128;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_32 = 8'd32;
parameter [7:0] LEGUP_function_call_72 = 8'd72;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg  main_1_exitcond50;
reg  main_1_exitcond50_reg;
reg [31:0] main_preheader41_3;
reg [31:0] main_preheader41_3_reg;
reg  main_preheader41_exitcond45;
reg  main_preheader41_exitcond45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep49_reg;
reg [31:0] main_4_5;
reg [31:0] main_4_5_reg;
reg [31:0] main_6_7;
reg [31:0] main_6_7_reg;
reg  main_6_exitcond42;
reg  main_6_exitcond42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep43_reg;
reg [31:0] main_8_9;
reg [31:0] main_8_9_reg;
reg [31:0] main_8_10;
reg [31:0] main_8_10_reg;
reg [31:0] main_11_12;
reg [31:0] main_11_12_reg;
reg [31:0] main_13_14;
reg [31:0] main_13_14_reg;
reg [31:0] main_preheader4_indvar39;
reg [31:0] main_preheader4_indvar39_reg;
reg [31:0] main_preheader4_16;
reg [31:0] main_preheader4_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader4_pr10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader4_pr10_reg;
reg [31:0] main_preheader4_17;
reg [31:0] main_preheader4_17_reg;
reg [31:0] main_preheader4_18;
reg [31:0] main_preheader4_18_reg;
reg  main_preheader4_19;
reg  main_preheader4_19_reg;
reg [31:0] main_preheader3_indvar34;
reg [31:0] main_preheader3_indvar34_reg;
reg  main_preheader3_exitcond36;
reg  main_preheader3_exitcond36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_p20iiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_p20iiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_p10iiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_p10iiii_reg;
reg [7:0] main_20_21;
reg [7:0] main_20_21_reg;
reg [31:0] main_20_indvarnext35;
reg [31:0] main_20_indvarnext35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii_pr11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii_pr11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii_22_reg;
reg [7:0] main_Fill_Bufferexitii_23;
reg [7:0] main_Fill_Bufferexitii_23_reg;
reg [31:0] main_Fill_Bufferexitii_24;
reg [31:0] main_Fill_Bufferexitii_24_reg;
reg [31:0] main_Fill_Bufferexitii_25;
reg [31:0] main_Fill_Bufferexitii_25_reg;
reg [31:0] main_Fill_Bufferexitii_26;
reg [31:0] main_Fill_Bufferexitii_26_reg;
reg [31:0] main_Fill_Bufferexitii_indvarnext40;
reg [31:0] main_Fill_Bufferexitii_indvarnext40_reg;
reg  main_Fill_Bufferexitii_exitcond41;
reg  main_Fill_Bufferexitii_exitcond41_reg;
reg [31:0] main_Get_Bitsexit_27;
reg [31:0] main_Get_Bitsexit_27_reg;
reg [31:0] main_Get_Bitsexit_28;
reg [31:0] main_Get_Bitsexit_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Get_Bitsexit_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Get_Bitsexit_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Get_Bitsexit_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Get_Bitsexit_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Get_Bitsexit_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Get_Bitsexit_31_reg;
reg [31:0] main_Get_Bitsexit_32;
reg [31:0] main_Get_Bitsexit_32_reg;
reg  main_Get_Bitsexit_33;
reg  main_Get_Bitsexit_33_reg;
reg [31:0] main_34_35;
reg [31:0] main_34_35_reg;
reg [31:0] main_34_36;
reg [31:0] main_34_36_reg;
reg [31:0] main_34_37;
reg [31:0] main_34_37_reg;
reg [31:0] main_34_38;
reg [31:0] main_34_38_reg;
reg  main_34_39;
reg  main_34_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_40_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_40_41_reg;
reg  main_40_42;
reg  main_40_42_reg;
reg [31:0] main_40_43;
reg [31:0] main_40_43_reg;
reg [31:0] main_40_44;
reg [31:0] main_40_44_reg;
reg [31:0] main_40_45;
reg [31:0] main_40_45_reg;
reg [31:0] main_40_46;
reg [31:0] main_40_46_reg;
reg [31:0] main_preheader2i27preheader_47;
reg [31:0] main_preheader2i27preheader_47_reg;
reg [31:0] main_preheader2i27preheader_48;
reg [31:0] main_preheader2i27preheader_48_reg;
reg [31:0] main_preheaderi24preheader_49;
reg [31:0] main_preheaderi24preheader_49_reg;
reg [31:0] main_preheaderi24preheader_50;
reg [31:0] main_preheaderi24preheader_50_reg;
reg [31:0] main_preheaderi24_indvar24;
reg [31:0] main_preheaderi24_indvar24_reg;
reg [31:0] main_preheaderi24_51;
reg [31:0] main_preheaderi24_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi24_scevgep26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi24_scevgep26_reg;
reg [31:0] main_preheaderi24_52;
reg [31:0] main_preheaderi24_52_reg;
reg [31:0] main_preheaderi24_53;
reg [31:0] main_preheaderi24_53_reg;
reg [31:0] main_preheaderi24_54;
reg [31:0] main_preheaderi24_54_reg;
reg [31:0] main_preheaderi24_55;
reg [31:0] main_preheaderi24_55_reg;
reg [7:0] main_preheaderi24_56;
reg [7:0] main_preheaderi24_56_reg;
reg [31:0] main_preheaderi24_57;
reg [31:0] main_preheaderi24_57_reg;
reg [31:0] main_preheaderi24_58;
reg [31:0] main_preheaderi24_58_reg;
reg [31:0] main_preheaderi24_59;
reg [31:0] main_preheaderi24_59_reg;
reg  main_preheaderi24_60;
reg  main_preheaderi24_60_reg;
reg [31:0] main_preheaderi24_indvarnext25;
reg [31:0] main_preheaderi24_indvarnext25_reg;
reg [31:0] main_preheader2i27_indvar32;
reg [31:0] main_preheader2i27_indvar32_reg;
reg [31:0] main_preheader2i27_61;
reg [31:0] main_preheader2i27_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2i27_pr8i25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2i27_pr8i25_reg;
reg [31:0] main_preheader2i27_62;
reg [31:0] main_preheader2i27_62_reg;
reg [31:0] main_preheader2i27_63;
reg [31:0] main_preheader2i27_63_reg;
reg [31:0] main_preheader2i27_64;
reg [31:0] main_preheader2i27_64_reg;
reg [31:0] main_preheader2i27_65;
reg [31:0] main_preheader2i27_65_reg;
reg  main_preheader2i27_66;
reg  main_preheader2i27_66_reg;
reg [31:0] main_preheader1i31_indvar27;
reg [31:0] main_preheader1i31_indvar27_reg;
reg  main_preheader1i31_exitcond29;
reg  main_preheader1i31_exitcond29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_p20iiii29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_p20iiii29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_p10iiii28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_67_p10iiii28_reg;
reg [7:0] main_67_68;
reg [7:0] main_67_68_reg;
reg [31:0] main_67_indvarnext28;
reg [31:0] main_67_indvarnext28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii33_pr9i32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii33_pr9i32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii33_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii33_69_reg;
reg [7:0] main_Fill_Bufferexitii33_70;
reg [7:0] main_Fill_Bufferexitii33_70_reg;
reg [31:0] main_Fill_Bufferexitii33_71;
reg [31:0] main_Fill_Bufferexitii33_71_reg;
reg [31:0] main_Fill_Bufferexitii33_72;
reg [31:0] main_Fill_Bufferexitii33_72_reg;
reg [31:0] main_Fill_Bufferexitii33_73;
reg [31:0] main_Fill_Bufferexitii33_73_reg;
reg  main_Fill_Bufferexitii33_74;
reg  main_Fill_Bufferexitii33_74_reg;
reg [31:0] main_Fill_Bufferexitii33_indvarnext33;
reg [31:0] main_Fill_Bufferexitii33_indvarnext33_reg;
reg [31:0] main_loopexiti35_75;
reg [31:0] main_loopexiti35_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexiti35_scevgepi34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexiti35_scevgepi34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexit3i36_storemerge1i37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexit3i36_storemerge1i37_reg;
reg [31:0] main_loopexit3i36_storemergei38;
reg [31:0] main_loopexit3i36_storemergei38_reg;
reg [31:0] main_loopexit3i36_Incnt2ii39;
reg [31:0] main_loopexit3i36_Incnt2ii39_reg;
reg [31:0] main_Get_Bitsexit40_76;
reg [31:0] main_Get_Bitsexit40_76_reg;
reg  main_Get_Bitsexit40_77;
reg  main_Get_Bitsexit40_77_reg;
reg [31:0] main_Get_Bitsexit40_78;
reg [31:0] main_Get_Bitsexit40_78_reg;
reg [31:0] main_79_80;
reg [31:0] main_79_80_reg;
reg [31:0] main_79_81;
reg [31:0] main_79_81_reg;
reg [31:0] main_79_82;
reg [31:0] main_79_82_reg;
reg [31:0] main_79_83;
reg [31:0] main_79_83_reg;
reg  main_79_84;
reg  main_79_84_reg;
reg [31:0] main_79_85;
reg [31:0] main_79_85_reg;
reg [31:0] main_79_;
reg [31:0] main_79__reg;
reg [31:0] main_86_87;
reg [31:0] main_86_87_reg;
reg [31:0] main_88_89;
reg [31:0] main_88_89_reg;
reg [31:0] main_88_90;
reg [31:0] main_88_90_reg;
reg [31:0] main_88_91;
reg [31:0] main_88_91_reg;
reg [31:0] main_88_92;
reg [31:0] main_88_92_reg;
reg  main_88_93;
reg  main_88_93_reg;
reg [31:0] main_88_94;
reg [31:0] main_88_94_reg;
reg [31:0] main_88_28;
reg [31:0] main_88_28_reg;
reg [31:0] main_decode_motion_vectorexitii_95;
reg [31:0] main_decode_motion_vectorexitii_95_reg;
reg [31:0] main_decode_motion_vectorexitii_96;
reg [31:0] main_decode_motion_vectorexitii_96_reg;
reg  main_decode_motion_vectorexitii_97;
reg  main_decode_motion_vectorexitii_97_reg;
reg [31:0] main_98_99;
reg [31:0] main_98_99_reg;
reg [31:0] main_98_100;
reg [31:0] main_98_100_reg;
reg [31:0] main_98_101;
reg [31:0] main_98_101_reg;
reg [31:0] main_98_102;
reg [31:0] main_98_102_reg;
reg  main_98_103;
reg  main_98_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_104_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_104_105_reg;
reg  main_104_106;
reg  main_104_106_reg;
reg [31:0] main_104_107;
reg [31:0] main_104_107_reg;
reg [31:0] main_104_108;
reg [31:0] main_104_108_reg;
reg [31:0] main_104_109;
reg [31:0] main_104_109_reg;
reg [31:0] main_104_110;
reg [31:0] main_104_110_reg;
reg [31:0] main_preheader2i9preheader_111;
reg [31:0] main_preheader2i9preheader_111_reg;
reg [31:0] main_preheader2i9preheader_112;
reg [31:0] main_preheader2i9preheader_112_reg;
reg [31:0] main_preheaderi6preheader_113;
reg [31:0] main_preheaderi6preheader_113_reg;
reg [31:0] main_preheaderi6preheader_114;
reg [31:0] main_preheaderi6preheader_114_reg;
reg [31:0] main_preheaderi6_indvar;
reg [31:0] main_preheaderi6_indvar_reg;
reg [31:0] main_preheaderi6_115;
reg [31:0] main_preheaderi6_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi6_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi6_scevgep16_reg;
reg [31:0] main_preheaderi6_116;
reg [31:0] main_preheaderi6_116_reg;
reg [31:0] main_preheaderi6_117;
reg [31:0] main_preheaderi6_117_reg;
reg [31:0] main_preheaderi6_118;
reg [31:0] main_preheaderi6_118_reg;
reg [31:0] main_preheaderi6_119;
reg [31:0] main_preheaderi6_119_reg;
reg [7:0] main_preheaderi6_120;
reg [7:0] main_preheaderi6_120_reg;
reg [31:0] main_preheaderi6_121;
reg [31:0] main_preheaderi6_121_reg;
reg [31:0] main_preheaderi6_122;
reg [31:0] main_preheaderi6_122_reg;
reg [31:0] main_preheaderi6_123;
reg [31:0] main_preheaderi6_123_reg;
reg  main_preheaderi6_124;
reg  main_preheaderi6_124_reg;
reg [31:0] main_preheaderi6_indvarnext;
reg [31:0] main_preheaderi6_indvarnext_reg;
reg [31:0] main_preheader2i9_indvar22;
reg [31:0] main_preheader2i9_indvar22_reg;
reg [31:0] main_preheader2i9_125;
reg [31:0] main_preheader2i9_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2i9_pr8i7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2i9_pr8i7_reg;
reg [31:0] main_preheader2i9_126;
reg [31:0] main_preheader2i9_126_reg;
reg [31:0] main_preheader2i9_127;
reg [31:0] main_preheader2i9_127_reg;
reg [31:0] main_preheader2i9_128;
reg [31:0] main_preheader2i9_128_reg;
reg [31:0] main_preheader2i9_129;
reg [31:0] main_preheader2i9_129_reg;
reg  main_preheader2i9_130;
reg  main_preheader2i9_130_reg;
reg [31:0] main_preheader1i13_indvar17;
reg [31:0] main_preheader1i13_indvar17_reg;
reg  main_preheader1i13_exitcond19;
reg  main_preheader1i13_exitcond19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_131_p20iiii11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_131_p20iiii11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_131_p10iiii10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_131_p10iiii10_reg;
reg [7:0] main_131_132;
reg [7:0] main_131_132_reg;
reg [31:0] main_131_indvarnext18;
reg [31:0] main_131_indvarnext18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii15_pr9i14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii15_pr9i14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii15_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii15_133_reg;
reg [7:0] main_Fill_Bufferexitii15_134;
reg [7:0] main_Fill_Bufferexitii15_134_reg;
reg [31:0] main_Fill_Bufferexitii15_135;
reg [31:0] main_Fill_Bufferexitii15_135_reg;
reg [31:0] main_Fill_Bufferexitii15_136;
reg [31:0] main_Fill_Bufferexitii15_136_reg;
reg [31:0] main_Fill_Bufferexitii15_137;
reg [31:0] main_Fill_Bufferexitii15_137_reg;
reg  main_Fill_Bufferexitii15_138;
reg  main_Fill_Bufferexitii15_138_reg;
reg [31:0] main_Fill_Bufferexitii15_indvarnext23;
reg [31:0] main_Fill_Bufferexitii15_indvarnext23_reg;
reg [31:0] main_loopexiti17_139;
reg [31:0] main_loopexiti17_139_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexiti17_scevgepi16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexiti17_scevgepi16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexit3i18_storemerge1i19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexit3i18_storemerge1i19_reg;
reg [31:0] main_loopexit3i18_storemergei20;
reg [31:0] main_loopexit3i18_storemergei20_reg;
reg [31:0] main_loopexit3i18_Incnt2ii21;
reg [31:0] main_loopexit3i18_Incnt2ii21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Get_Bitsexit22_140;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Get_Bitsexit22_140_reg;
reg [31:0] main_Get_Bitsexit22_141;
reg [31:0] main_Get_Bitsexit22_141_reg;
reg [31:0] main_Get_Bitsexit22_142;
reg [31:0] main_Get_Bitsexit22_142_reg;
reg  main_Get_Bitsexit22_143;
reg  main_Get_Bitsexit22_143_reg;
reg [31:0] main_Get_Bitsexit22_144;
reg [31:0] main_Get_Bitsexit22_144_reg;
reg [31:0] main_145_146;
reg [31:0] main_145_146_reg;
reg [31:0] main_145_147;
reg [31:0] main_145_147_reg;
reg [31:0] main_145_148;
reg [31:0] main_145_148_reg;
reg [31:0] main_145_149;
reg [31:0] main_145_149_reg;
reg  main_145_150;
reg  main_145_150_reg;
reg [31:0] main_145_151;
reg [31:0] main_145_151_reg;
reg [31:0] main_145_29;
reg [31:0] main_145_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_152_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_152_153_reg;
reg [31:0] main_152_154;
reg [31:0] main_152_154_reg;
reg [31:0] main_152_155;
reg [31:0] main_152_155_reg;
reg [31:0] main_156_157;
reg [31:0] main_156_157_reg;
reg [31:0] main_156_158;
reg [31:0] main_156_158_reg;
reg [31:0] main_156_159;
reg [31:0] main_156_159_reg;
reg [31:0] main_156_160;
reg [31:0] main_156_160_reg;
reg  main_156_161;
reg  main_156_161_reg;
reg [31:0] main_156_162;
reg [31:0] main_156_162_reg;
reg [31:0] main_156_30;
reg [31:0] main_156_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_motion_vectorsexit_163;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_motion_vectorsexit_163_reg;
reg [31:0] main_motion_vectorsexit_vec3i4ii;
reg [31:0] main_motion_vectorsexit_vec3i4ii_reg;
reg [31:0] main_motion_vectorsexit_164;
reg [31:0] main_motion_vectorsexit_164_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_motion_vectorsexit_165;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_motion_vectorsexit_165_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_motion_vectorsexit_166;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_motion_vectorsexit_166_reg;
reg [31:0] main_167_168;
reg [31:0] main_167_168_reg;
reg [31:0] main_167_main_result0;
reg [31:0] main_167_main_result0_reg;
reg  main_167_exitcond11;
reg  main_167_exitcond11_reg;
reg [31:0] main_preheader_169;
reg [31:0] main_preheader_169_reg;
reg [31:0] main_preheader_main_result1;
reg [31:0] main_preheader_main_result1_reg;
reg  main_preheader_exitcond;
reg  main_preheader_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_170_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_170_scevgep9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_170_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_170_scevgep10_reg;
reg [31:0] main_170_171;
reg [31:0] main_170_171_reg;
reg [31:0] main_170_172;
reg [31:0] main_170_172_reg;
reg  main_170_173;
reg  main_170_173_reg;
reg [31:0] main_170_174;
reg [31:0] main_170_174_reg;
reg [31:0] main_170_175;
reg [31:0] main_170_175_reg;
reg [31:0] main_176_177;
reg [31:0] main_176_177_reg;
reg [31:0] main_176_main_result2;
reg [31:0] main_176_main_result2_reg;
reg  main_176_exitcond5;
reg  main_176_exitcond5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_178_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_178_scevgep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_178_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_178_scevgep_reg;
reg [31:0] main_178_179;
reg [31:0] main_178_179_reg;
reg [31:0] main_178_180;
reg [31:0] main_178_180_reg;
reg  main_178_181;
reg  main_178_181_reg;
reg [31:0] main_178_182;
reg [31:0] main_178_182_reg;
reg [31:0] main_178_183;
reg [31:0] main_178_183_reg;
reg [31:0] main_178_184;
reg [31:0] main_178_184_reg;
reg [31:0] main_185_186;
reg [31:0] main_185_186_reg;
reg [31:0] main_187_188;
reg [31:0] main_187_188_reg;
reg  main_189_191;
reg  main_189_191_reg;
wire [10:0] rom_8_address_a;
wire  rom_8_write_enable_a;
wire [7:0] rom_8_in_a;
wire [7:0] rom_8_out_a;
wire [10:0] rom_8_address_b;
wire  rom_8_write_enable_b;
wire [7:0] rom_8_in_b;
wire [7:0] rom_8_out_b;
reg [2:0] inPMV_address_a;
reg  inPMV_write_enable_a;
wire [31:0] inPMV_in_a;
wire [31:0] inPMV_out_a;
wire [2:0] inPMV_address_b;
wire  inPMV_write_enable_b;
wire [31:0] inPMV_in_b;
wire [31:0] inPMV_out_b;
reg [1:0] inmvfs_address_a;
reg  inmvfs_write_enable_a;
wire [31:0] inmvfs_in_a;
wire [31:0] inmvfs_out_a;
wire [1:0] inmvfs_address_b;
wire  inmvfs_write_enable_b;
wire [31:0] inmvfs_in_b;
wire [31:0] inmvfs_out_b;
reg [2:0] outPMV_address_a;
reg  outPMV_write_enable_a;
wire [31:0] outPMV_in_a;
wire [31:0] outPMV_out_a;
wire [2:0] outPMV_address_b;
wire  outPMV_write_enable_b;
wire [31:0] outPMV_in_b;
wire [31:0] outPMV_out_b;
reg [1:0] outmvfs_address_a;
reg  outmvfs_write_enable_a;
wire [31:0] outmvfs_in_a;
wire [31:0] outmvfs_out_a;
wire [1:0] outmvfs_address_b;
wire  outmvfs_write_enable_b;
wire [31:0] outmvfs_in_b;
wire [31:0] outmvfs_out_b;
wire [10:0] ram_8_address_a;
wire  ram_8_write_enable_a;
wire [7:0] ram_8_in_a;
wire [7:0] ram_8_out_a;
wire [10:0] ram_8_address_b;
wire  ram_8_write_enable_b;
wire [7:0] ram_8_in_b;
wire [7:0] ram_8_out_b;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [3:0] MVtab0_address_a;
wire  MVtab0_write_enable_a;
wire [7:0] MVtab0_in_a;
wire [7:0] MVtab0_out_a;
wire [3:0] MVtab0_address_b;
wire  MVtab0_write_enable_b;
wire [7:0] MVtab0_in_b;
wire [7:0] MVtab0_out_b;
wire [3:0] MVtab1_address_a;
wire  MVtab1_write_enable_a;
wire [7:0] MVtab1_in_a;
wire [7:0] MVtab1_out_a;
wire [3:0] MVtab1_address_b;
wire  MVtab1_write_enable_b;
wire [7:0] MVtab1_in_b;
wire [7:0] MVtab1_out_b;
wire [4:0] MVtab2_address_a;
wire  MVtab2_write_enable_a;
wire [7:0] MVtab2_in_a;
wire [7:0] MVtab2_out_a;
wire [4:0] MVtab2_address_b;
wire  MVtab2_write_enable_b;
wire [7:0] MVtab2_in_b;
wire [7:0] MVtab2_out_b;
reg [2:0] main_0_PMV_address_a;
reg  main_0_PMV_write_enable_a;
reg [31:0] main_0_PMV_in_a;
wire [31:0] main_0_PMV_out_a;
reg [2:0] main_0_PMV_address_b;
reg  main_0_PMV_write_enable_b;
reg [31:0] main_0_PMV_in_b;
wire [31:0] main_0_PMV_out_b;
reg [1:0] main_0_motion_vertical_field_select_address_a;
reg  main_0_motion_vertical_field_select_write_enable_a;
reg [31:0] main_0_motion_vertical_field_select_in_a;
wire [31:0] main_0_motion_vertical_field_select_out_a;
reg [1:0] main_0_motion_vertical_field_select_address_b;
reg  main_0_motion_vertical_field_select_write_enable_b;
reg [31:0] main_0_motion_vertical_field_select_in_b;
wire [31:0] main_0_motion_vertical_field_select_out_b;
reg  Get_motion_code_start;
wire  Get_motion_code_memory_controller_enable_a;
wire  Get_motion_code_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Get_motion_code_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Get_motion_code_memory_controller_out_a;
wire [1:0] Get_motion_code_memory_controller_size_a;
wire  Get_motion_code_memory_controller_enable_b;
wire  Get_motion_code_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Get_motion_code_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Get_motion_code_memory_controller_out_b;
wire [1:0] Get_motion_code_memory_controller_size_b;
reg  Get_motion_code_memory_controller_waitrequest;
reg  Get_motion_code_finish_final;
reg  Get_motion_code_finish_reg;
wire  Get_motion_code_finish;
wire [31:0] Get_motion_code_return_val;
reg [31:0] Get_motion_code_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  lpm_mult_main_preheader4_17_en;
reg [31:0] main_preheader4_17_stage0_reg;
reg  lpm_mult_main_preheaderi24_54_en;
reg [31:0] main_preheaderi24_54_stage0_reg;
reg  lpm_mult_main_preheader2i27_64_en;
reg [31:0] main_preheader2i27_64_stage0_reg;
reg  lpm_mult_main_preheaderi6_118_en;
reg [31:0] main_preheaderi6_118_stage0_reg;
reg  lpm_mult_main_preheader2i9_128_en;
reg [31:0] main_preheader2i9_128_stage0_reg;


Get_motion_code Get_motion_code (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (Get_motion_code_memory_controller_enable_a),
	.memory_controller_address_a (Get_motion_code_memory_controller_address_a),
	.memory_controller_write_enable_a (Get_motion_code_memory_controller_write_enable_a),
	.memory_controller_in_a (Get_motion_code_memory_controller_in_a),
	.memory_controller_size_a (Get_motion_code_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (Get_motion_code_memory_controller_enable_b),
	.memory_controller_address_b (Get_motion_code_memory_controller_address_b),
	.memory_controller_write_enable_b (Get_motion_code_memory_controller_write_enable_b),
	.memory_controller_in_b (Get_motion_code_memory_controller_in_b),
	.memory_controller_size_b (Get_motion_code_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (Get_motion_code_start),
	.finish (Get_motion_code_finish),
	.return_val (Get_motion_code_return_val)
);

defparam
	Get_motion_code.tag_offset = tag_offset;

// Local Rams


// @inPMV = internal unnamed_addr constant [2 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 45, i32 207], [2 x i32] [i32 70, i32 41]], [2 x [2 x i32]] [[2 x i32] [i32 4, i32 180], [2 x i32] [i32 12...
rom_dual_port inPMV (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( inPMV_address_a ),
	.address_b( inPMV_address_b ),
	.q_a( inPMV_out_a ),
	.q_b( inPMV_out_b)
);
defparam inPMV.width_a = 32;
defparam inPMV.width_b = 32;
defparam inPMV.widthad_a = 3;
defparam inPMV.widthad_b = 3;
defparam inPMV.numwords_a = 8;
defparam inPMV.numwords_b = 8;
defparam inPMV.latency = 1;
defparam inPMV.init_file = "inPMV.mif";


// @inmvfs = internal unnamed_addr constant [2 x [2 x i32]] [[2 x i32] [i32 232, i32 200], [2 x i32] [i32 32, i32 240]], align 4
rom_dual_port inmvfs (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( inmvfs_address_a ),
	.address_b( inmvfs_address_b ),
	.q_a( inmvfs_out_a ),
	.q_b( inmvfs_out_b)
);
defparam inmvfs.width_a = 32;
defparam inmvfs.width_b = 32;
defparam inmvfs.widthad_a = 2;
defparam inmvfs.widthad_b = 2;
defparam inmvfs.numwords_a = 4;
defparam inmvfs.numwords_b = 4;
defparam inmvfs.latency = 1;
defparam inmvfs.init_file = "inmvfs.mif";


// @outPMV = internal unnamed_addr constant [2 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 1566, i32 206], [2 x i32] [i32 70, i32 41]], [2 x [2 x i32]] [[2 x i32] [i32 1566, i32 206], [2 x i32] [...
rom_dual_port outPMV (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( outPMV_address_a ),
	.address_b( outPMV_address_b ),
	.q_a( outPMV_out_a ),
	.q_b( outPMV_out_b)
);
defparam outPMV.width_a = 32;
defparam outPMV.width_b = 32;
defparam outPMV.widthad_a = 3;
defparam outPMV.widthad_b = 3;
defparam outPMV.numwords_a = 8;
defparam outPMV.numwords_b = 8;
defparam outPMV.latency = 1;
defparam outPMV.init_file = "outPMV.mif";


// @outmvfs = internal unnamed_addr constant [2 x [2 x i32]] [[2 x i32] [i32 0, i32 200], [2 x i32] [i32 0, i32 240]], align 4
rom_dual_port outmvfs (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( outmvfs_address_a ),
	.address_b( outmvfs_address_b ),
	.q_a( outmvfs_out_a ),
	.q_b( outmvfs_out_b)
);
defparam outmvfs.width_a = 32;
defparam outmvfs.width_b = 32;
defparam outmvfs.widthad_a = 2;
defparam outmvfs.widthad_b = 2;
defparam outmvfs.numwords_a = 4;
defparam outmvfs.numwords_b = 4;
defparam outmvfs.latency = 1;
defparam outmvfs.init_file = "outmvfs.mif";


//   %PMV = alloca [2 x [2 x [2 x i32]]], align 4
ram_dual_port main_0_PMV (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_PMV_address_a ),
	.address_b( main_0_PMV_address_b ),
	.wren_a( main_0_PMV_write_enable_a ),
	.wren_b( main_0_PMV_write_enable_b ),
	.data_a( main_0_PMV_in_a ),
	.data_b( main_0_PMV_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_PMV_out_a ),
	.q_b( main_0_PMV_out_b)
);
defparam main_0_PMV.width_a = 32;
defparam main_0_PMV.width_b = 32;
defparam main_0_PMV.widthad_a = 3;
defparam main_0_PMV.widthad_b = 3;
defparam main_0_PMV.width_be_a = 1;
defparam main_0_PMV.width_be_b = 1;
defparam main_0_PMV.numwords_a = 8;
defparam main_0_PMV.numwords_b = 8;
defparam main_0_PMV.latency = 1;


//   %motion_vertical_field_select = alloca [2 x [2 x i32]], align 4
ram_dual_port main_0_motion_vertical_field_select (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_motion_vertical_field_select_address_a ),
	.address_b( main_0_motion_vertical_field_select_address_b ),
	.wren_a( main_0_motion_vertical_field_select_write_enable_a ),
	.wren_b( main_0_motion_vertical_field_select_write_enable_b ),
	.data_a( main_0_motion_vertical_field_select_in_a ),
	.data_b( main_0_motion_vertical_field_select_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_motion_vertical_field_select_out_a ),
	.q_b( main_0_motion_vertical_field_select_out_b)
);
defparam main_0_motion_vertical_field_select.width_a = 32;
defparam main_0_motion_vertical_field_select.width_b = 32;
defparam main_0_motion_vertical_field_select.widthad_a = 2;
defparam main_0_motion_vertical_field_select.widthad_b = 2;
defparam main_0_motion_vertical_field_select.width_be_a = 1;
defparam main_0_motion_vertical_field_select.width_be_b = 1;
defparam main_0_motion_vertical_field_select.numwords_a = 4;
defparam main_0_motion_vertical_field_select.numwords_b = 4;
defparam main_0_motion_vertical_field_select.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %189*/
	/*   %190 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %main_result.0) #2*/
	if ((cur_state == LEGUP_F_main_BB__189_125)) begin
		$write("Result: %d\n", $signed(main_167_main_result0_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_167_main_result0_reg) === 1'bX) finish <= 0;
	end
	/* main: %192*/
	/*   %193 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__192_126)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %194*/
	/*   %195 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__194_127)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_Fill_Bufferexitii15_95:
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii15_96;
LEGUP_F_main_BB_Fill_Bufferexitii15_96:
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii15_97;
LEGUP_F_main_BB_Fill_Bufferexitii15_97:
	if ((main_Fill_Bufferexitii15_138_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2i9_86;
	else if ((main_Fill_Bufferexitii15_138_reg == 1'd0))
		next_state = LEGUP_F_main_BB_loopexit3i18loopexit_100;
LEGUP_F_main_BB_Fill_Bufferexitii15loopexit_94:
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii15_95;
LEGUP_F_main_BB_Fill_Bufferexitii33_55:
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii33_56;
LEGUP_F_main_BB_Fill_Bufferexitii33_56:
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii33_57;
LEGUP_F_main_BB_Fill_Bufferexitii33_57:
	if ((main_Fill_Bufferexitii33_74_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2i27_46;
	else if ((main_Fill_Bufferexitii33_74_reg == 1'd0))
		next_state = LEGUP_F_main_BB_loopexit3i36loopexit_60;
LEGUP_F_main_BB_Fill_Bufferexitii33loopexit_54:
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii33_55;
LEGUP_F_main_BB_Fill_Bufferexitii_26:
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii_27;
LEGUP_F_main_BB_Fill_Bufferexitii_27:
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii_28;
LEGUP_F_main_BB_Fill_Bufferexitii_28:
	if ((main_Fill_Bufferexitii_exitcond41_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Get_Bitsexit_29;
	else if ((main_Fill_Bufferexitii_exitcond41_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader4_17;
LEGUP_F_main_BB_Fill_Bufferexitiiloopexit_25:
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii_26;
LEGUP_F_main_BB_Get_Bitsexit22_104:
		next_state = LEGUP_F_main_BB_Get_Bitsexit22_105;
LEGUP_F_main_BB_Get_Bitsexit22_105:
		next_state = LEGUP_F_main_BB_Get_Bitsexit22_106;
LEGUP_F_main_BB_Get_Bitsexit22_106:
	if ((main_Get_Bitsexit22_143_reg == 1'd1))
		next_state = LEGUP_F_main_BB__145_107;
	else if ((main_Get_Bitsexit22_143_reg == 1'd0))
		next_state = LEGUP_F_main_BB__156_111;
LEGUP_F_main_BB_Get_Bitsexit40_64:
		next_state = LEGUP_F_main_BB_Get_Bitsexit40_65;
LEGUP_F_main_BB_Get_Bitsexit40_65:
	if ((main_Get_Bitsexit40_77_reg == 1'd1))
		next_state = LEGUP_F_main_BB__79_66;
	else if ((main_Get_Bitsexit40_77_reg == 1'd0))
		next_state = LEGUP_F_main_BB__88_69;
LEGUP_F_main_BB_Get_Bitsexit_29:
		next_state = LEGUP_F_main_BB_Get_Bitsexit_30;
LEGUP_F_main_BB_Get_Bitsexit_30:
		next_state = LEGUP_F_main_BB_Get_Bitsexit_31;
LEGUP_F_main_BB_Get_Bitsexit_31:
		next_state = LEGUP_function_call_32;
LEGUP_F_main_BB_Get_Bitsexit_33:
	if ((main_Get_Bitsexit_33 == 1'd1))
		next_state = LEGUP_F_main_BB__86_67;
	else if ((main_Get_Bitsexit_33 == 1'd0))
		next_state = LEGUP_F_main_BB__34_34;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__104_78:
		next_state = LEGUP_F_main_BB__104_79;
LEGUP_F_main_BB__104_79:
		next_state = LEGUP_F_main_BB__104_80;
LEGUP_F_main_BB__104_80:
	if ((main_104_106 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi6preheader_82;
	else if ((main_104_106 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader2i9preheader_81;
LEGUP_F_main_BB__11_12:
		next_state = LEGUP_F_main_BB_preheader41_4;
LEGUP_F_main_BB__131_90:
		next_state = LEGUP_F_main_BB__131_91;
LEGUP_F_main_BB__131_91:
		next_state = LEGUP_F_main_BB__131_92;
LEGUP_F_main_BB__131_92:
		next_state = LEGUP_F_main_BB__131_93;
LEGUP_F_main_BB__131_93:
		next_state = LEGUP_F_main_BB_preheader1i13_89;
LEGUP_F_main_BB__13_13:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__145_107:
		next_state = LEGUP_F_main_BB_motion_vectorsexit_112;
LEGUP_F_main_BB__152_108:
		next_state = LEGUP_F_main_BB__152_109;
LEGUP_F_main_BB__152_109:
		next_state = LEGUP_F_main_BB__152_110;
LEGUP_F_main_BB__152_110:
		next_state = LEGUP_F_main_BB_motion_vectorsexit_112;
LEGUP_F_main_BB__156_111:
		next_state = LEGUP_F_main_BB_motion_vectorsexit_112;
LEGUP_F_main_BB__15_14:
		next_state = LEGUP_F_main_BB__15_15;
LEGUP_F_main_BB__15_15:
		next_state = LEGUP_F_main_BB__15_16;
LEGUP_F_main_BB__15_16:
		next_state = LEGUP_F_main_BB_preheader4_17;
LEGUP_F_main_BB__167_115:
	if ((main_167_exitcond11 == 1'd1))
		next_state = LEGUP_F_main_BB__189_125;
	else if ((main_167_exitcond11 == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderpreheader_116;
LEGUP_F_main_BB__170_118:
		next_state = LEGUP_F_main_BB__170_119;
LEGUP_F_main_BB__170_119:
		next_state = LEGUP_F_main_BB__176_120;
LEGUP_F_main_BB__176_120:
	if ((main_176_exitcond5 == 1'd1))
		next_state = LEGUP_F_main_BB__185_123;
	else if ((main_176_exitcond5 == 1'd0))
		next_state = LEGUP_F_main_BB__178_121;
LEGUP_F_main_BB__178_121:
		next_state = LEGUP_F_main_BB__178_122;
LEGUP_F_main_BB__178_122:
		next_state = LEGUP_F_main_BB__176_120;
LEGUP_F_main_BB__185_123:
		next_state = LEGUP_F_main_BB_preheader_117;
LEGUP_F_main_BB__187_124:
		next_state = LEGUP_F_main_BB__167_115;
LEGUP_F_main_BB__189_125:
	if ((main_189_191 == 1'd1))
		next_state = LEGUP_F_main_BB__192_126;
	else if ((main_189_191 == 1'd0))
		next_state = LEGUP_F_main_BB__194_127;
LEGUP_F_main_BB__192_126:
		next_state = LEGUP_F_main_BB__196_128;
LEGUP_F_main_BB__194_127:
		next_state = LEGUP_F_main_BB__196_128;
LEGUP_F_main_BB__196_128:
		next_state = LEGUP_0;
LEGUP_F_main_BB__1_2:
	if ((main_1_exitcond50 == 1'd1))
		next_state = LEGUP_F_main_BB__15_14;
	else if ((main_1_exitcond50 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader41preheader_3;
LEGUP_F_main_BB__20_21:
		next_state = LEGUP_F_main_BB__20_22;
LEGUP_F_main_BB__20_22:
		next_state = LEGUP_F_main_BB__20_23;
LEGUP_F_main_BB__20_23:
		next_state = LEGUP_F_main_BB__20_24;
LEGUP_F_main_BB__20_24:
		next_state = LEGUP_F_main_BB_preheader3_20;
LEGUP_F_main_BB__34_34:
		next_state = LEGUP_F_main_BB__34_35;
LEGUP_F_main_BB__34_35:
		next_state = LEGUP_F_main_BB__34_36;
LEGUP_F_main_BB__34_36:
		next_state = LEGUP_F_main_BB__34_37;
LEGUP_F_main_BB__34_37:
	if ((main_34_39_reg == 1'd1))
		next_state = LEGUP_F_main_BB__40_38;
	else if ((main_34_39_reg == 1'd0))
		next_state = LEGUP_F_main_BB_Get_Bitsexit40_64;
LEGUP_F_main_BB__40_38:
		next_state = LEGUP_F_main_BB__40_39;
LEGUP_F_main_BB__40_39:
		next_state = LEGUP_F_main_BB__40_40;
LEGUP_F_main_BB__40_40:
	if ((main_40_42 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi24preheader_42;
	else if ((main_40_42 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader2i27preheader_41;
LEGUP_F_main_BB__4_5:
		next_state = LEGUP_F_main_BB__4_6;
LEGUP_F_main_BB__4_6:
		next_state = LEGUP_F_main_BB__4_7;
LEGUP_F_main_BB__4_7:
		next_state = LEGUP_F_main_BB__6_8;
LEGUP_F_main_BB__67_50:
		next_state = LEGUP_F_main_BB__67_51;
LEGUP_F_main_BB__67_51:
		next_state = LEGUP_F_main_BB__67_52;
LEGUP_F_main_BB__67_52:
		next_state = LEGUP_F_main_BB__67_53;
LEGUP_F_main_BB__67_53:
		next_state = LEGUP_F_main_BB_preheader1i31_49;
LEGUP_F_main_BB__6_8:
	if ((main_6_exitcond42 == 1'd1))
		next_state = LEGUP_F_main_BB__11_12;
	else if ((main_6_exitcond42 == 1'd0))
		next_state = LEGUP_F_main_BB__8_9;
LEGUP_F_main_BB__79_66:
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_70;
LEGUP_F_main_BB__86_67:
		next_state = LEGUP_F_main_BB__86_68;
LEGUP_F_main_BB__86_68:
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_70;
LEGUP_F_main_BB__88_69:
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_70;
LEGUP_F_main_BB__8_10:
		next_state = LEGUP_F_main_BB__8_11;
LEGUP_F_main_BB__8_11:
		next_state = LEGUP_F_main_BB__6_8;
LEGUP_F_main_BB__8_9:
		next_state = LEGUP_F_main_BB__8_10;
LEGUP_F_main_BB__98_74:
		next_state = LEGUP_F_main_BB__98_75;
LEGUP_F_main_BB__98_75:
		next_state = LEGUP_F_main_BB__98_76;
LEGUP_F_main_BB__98_76:
		next_state = LEGUP_F_main_BB__98_77;
LEGUP_F_main_BB__98_77:
	if ((main_98_103_reg == 1'd1))
		next_state = LEGUP_F_main_BB__104_78;
	else if ((main_98_103_reg == 1'd0))
		next_state = LEGUP_F_main_BB_Get_Bitsexit22_104;
LEGUP_F_main_BB_decode_motion_vectorexitii_70:
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_71;
LEGUP_F_main_BB_decode_motion_vectorexitii_71:
		next_state = LEGUP_function_call_72;
LEGUP_F_main_BB_decode_motion_vectorexitii_73:
	if ((main_decode_motion_vectorexitii_97 == 1'd1))
		next_state = LEGUP_F_main_BB__152_108;
	else if ((main_decode_motion_vectorexitii_97 == 1'd0))
		next_state = LEGUP_F_main_BB__98_74;
LEGUP_F_main_BB_loopexit3i18_101:
		next_state = LEGUP_F_main_BB_loopexit3i18_102;
LEGUP_F_main_BB_loopexit3i18_102:
		next_state = LEGUP_F_main_BB_loopexit3i18_103;
LEGUP_F_main_BB_loopexit3i18_103:
		next_state = LEGUP_F_main_BB_Get_Bitsexit22_104;
LEGUP_F_main_BB_loopexit3i18loopexit_100:
		next_state = LEGUP_F_main_BB_loopexit3i18_101;
LEGUP_F_main_BB_loopexit3i36_61:
		next_state = LEGUP_F_main_BB_loopexit3i36_62;
LEGUP_F_main_BB_loopexit3i36_62:
		next_state = LEGUP_F_main_BB_loopexit3i36_63;
LEGUP_F_main_BB_loopexit3i36_63:
		next_state = LEGUP_F_main_BB_Get_Bitsexit40_64;
LEGUP_F_main_BB_loopexit3i36loopexit_60:
		next_state = LEGUP_F_main_BB_loopexit3i36_61;
LEGUP_F_main_BB_loopexiti17_98:
		next_state = LEGUP_F_main_BB_loopexiti17_99;
LEGUP_F_main_BB_loopexiti17_99:
		next_state = LEGUP_F_main_BB_loopexit3i18_101;
LEGUP_F_main_BB_loopexiti35_58:
		next_state = LEGUP_F_main_BB_loopexiti35_59;
LEGUP_F_main_BB_loopexiti35_59:
		next_state = LEGUP_F_main_BB_loopexit3i36_61;
LEGUP_F_main_BB_motion_vectorsexit_112:
		next_state = LEGUP_F_main_BB_motion_vectorsexit_113;
LEGUP_F_main_BB_motion_vectorsexit_113:
		next_state = LEGUP_F_main_BB_motion_vectorsexit_114;
LEGUP_F_main_BB_motion_vectorsexit_114:
		next_state = LEGUP_F_main_BB__167_115;
LEGUP_F_main_BB_preheader1i13_89:
	if ((main_preheader1i13_exitcond19 == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii15loopexit_94;
	else if ((main_preheader1i13_exitcond19 == 1'd0))
		next_state = LEGUP_F_main_BB__131_90;
LEGUP_F_main_BB_preheader1i13preheader_88:
		next_state = LEGUP_F_main_BB_preheader1i13_89;
LEGUP_F_main_BB_preheader1i31_49:
	if ((main_preheader1i31_exitcond29 == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii33loopexit_54;
	else if ((main_preheader1i31_exitcond29 == 1'd0))
		next_state = LEGUP_F_main_BB__67_50;
LEGUP_F_main_BB_preheader1i31preheader_48:
		next_state = LEGUP_F_main_BB_preheader1i31_49;
LEGUP_F_main_BB_preheader2i27_46:
		next_state = LEGUP_F_main_BB_preheader2i27_47;
LEGUP_F_main_BB_preheader2i27_47:
	if ((main_preheader2i27_66_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii33_55;
	else if ((main_preheader2i27_66_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1i31preheader_48;
LEGUP_F_main_BB_preheader2i27preheader_41:
		next_state = LEGUP_F_main_BB_preheader2i27_46;
LEGUP_F_main_BB_preheader2i9_86:
		next_state = LEGUP_F_main_BB_preheader2i9_87;
LEGUP_F_main_BB_preheader2i9_87:
	if ((main_preheader2i9_130_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii15_95;
	else if ((main_preheader2i9_130_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1i13preheader_88;
LEGUP_F_main_BB_preheader2i9preheader_81:
		next_state = LEGUP_F_main_BB_preheader2i9_86;
LEGUP_F_main_BB_preheader3_20:
	if ((main_preheader3_exitcond36 == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitiiloopexit_25;
	else if ((main_preheader3_exitcond36 == 1'd0))
		next_state = LEGUP_F_main_BB__20_21;
LEGUP_F_main_BB_preheader3preheader_19:
		next_state = LEGUP_F_main_BB_preheader3_20;
LEGUP_F_main_BB_preheader41_4:
	if ((main_preheader41_exitcond45 == 1'd1))
		next_state = LEGUP_F_main_BB__13_13;
	else if ((main_preheader41_exitcond45 == 1'd0))
		next_state = LEGUP_F_main_BB__4_5;
LEGUP_F_main_BB_preheader41preheader_3:
		next_state = LEGUP_F_main_BB_preheader41_4;
LEGUP_F_main_BB_preheader4_17:
		next_state = LEGUP_F_main_BB_preheader4_18;
LEGUP_F_main_BB_preheader4_18:
	if ((main_preheader4_19_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii_26;
	else if ((main_preheader4_19_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader3preheader_19;
LEGUP_F_main_BB_preheader_117:
	if ((main_preheader_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__187_124;
	else if ((main_preheader_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__170_118;
LEGUP_F_main_BB_preheaderi24_43:
		next_state = LEGUP_F_main_BB_preheaderi24_44;
LEGUP_F_main_BB_preheaderi24_44:
		next_state = LEGUP_F_main_BB_preheaderi24_45;
LEGUP_F_main_BB_preheaderi24_45:
	if ((main_preheaderi24_60_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi24_43;
	else if ((main_preheaderi24_60_reg == 1'd0))
		next_state = LEGUP_F_main_BB_loopexiti35_58;
LEGUP_F_main_BB_preheaderi24preheader_42:
		next_state = LEGUP_F_main_BB_preheaderi24_43;
LEGUP_F_main_BB_preheaderi6_83:
		next_state = LEGUP_F_main_BB_preheaderi6_84;
LEGUP_F_main_BB_preheaderi6_84:
		next_state = LEGUP_F_main_BB_preheaderi6_85;
LEGUP_F_main_BB_preheaderi6_85:
	if ((main_preheaderi6_124_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi6_83;
	else if ((main_preheaderi6_124_reg == 1'd0))
		next_state = LEGUP_F_main_BB_loopexiti17_98;
LEGUP_F_main_BB_preheaderi6preheader_82:
		next_state = LEGUP_F_main_BB_preheaderi6_83;
LEGUP_F_main_BB_preheaderpreheader_116:
		next_state = LEGUP_F_main_BB_preheader_117;
LEGUP_function_call_32:
	if ((Get_motion_code_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_Get_Bitsexit_33;
LEGUP_function_call_72:
	if ((Get_motion_code_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_73;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %14, %13 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_2 = 32'd0;
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %14, %13 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__13_13) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_2 = main_13_14;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %14, %13 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %14, %13 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond50 = icmp eq i32 %2, 2*/
		main_1_exitcond50 = (main_1_2_reg == 32'd2);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond50 = icmp eq i32 %2, 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_exitcond50_reg <= main_1_exitcond50;
		if (start == 1'b0 && ^(main_1_exitcond50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader41*/
	/*   %3 = phi i32 [ %12, %11 ], [ 0, %.preheader41.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader41preheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader41_3 = 32'd0;
	end
	/* main: %.preheader41*/
	/*   %3 = phi i32 [ %12, %11 ], [ 0, %.preheader41.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__11_12) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader41_3 = main_11_12;
	end
end
always @(posedge clk) begin
	/* main: %.preheader41*/
	/*   %3 = phi i32 [ %12, %11 ], [ 0, %.preheader41.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader41preheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader41_3_reg <= main_preheader41_3;
		if (start == 1'b0 && ^(main_preheader41_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader41_3_reg"); $finish; end
	end
	/* main: %.preheader41*/
	/*   %3 = phi i32 [ %12, %11 ], [ 0, %.preheader41.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__11_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader41_3_reg <= main_preheader41_3;
		if (start == 1'b0 && ^(main_preheader41_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader41_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader41*/
	/*   %exitcond45 = icmp eq i32 %3, 2*/
		main_preheader41_exitcond45 = (main_preheader41_3_reg == 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader41*/
	/*   %exitcond45 = icmp eq i32 %3, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheader41_4)) begin
		main_preheader41_exitcond45_reg <= main_preheader41_exitcond45;
		if (start == 1'b0 && ^(main_preheader41_exitcond45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader41_exitcond45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %scevgep48 = getelementptr [2 x [2 x i32]]* %motion_vertical_field_select, i32 0, i32 %2, i32 %3*/
		main_4_scevgep48 = (1'd0 | ((8 * main_1_2_reg) + (4 * main_preheader41_3_reg)));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %scevgep48 = getelementptr [2 x [2 x i32]]* %motion_vertical_field_select, i32 0, i32 %2, i32 %3*/
	if ((cur_state == LEGUP_F_main_BB__4_5)) begin
		main_4_scevgep48_reg <= main_4_scevgep48;
		if (start == 1'b0 && ^(main_4_scevgep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_scevgep48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %scevgep49 = getelementptr [2 x [2 x i32]]* @inmvfs, i32 0, i32 %2, i32 %3*/
		main_4_scevgep49 = (1'd0 | ((8 * main_1_2_reg) + (4 * main_preheader41_3_reg)));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %scevgep49 = getelementptr [2 x [2 x i32]]* @inmvfs, i32 0, i32 %2, i32 %3*/
	if ((cur_state == LEGUP_F_main_BB__4_5)) begin
		main_4_scevgep49_reg <= main_4_scevgep49;
		if (start == 1'b0 && ^(main_4_scevgep49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_scevgep49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %5 = load i32* %scevgep49, align 4*/
		main_4_5 = inmvfs_out_a;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %5 = load i32* %scevgep49, align 4*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_5_reg <= main_4_5;
		if (start == 1'b0 && ^(main_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %4 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_main_BB__4_7) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7 = 32'd0;
	end
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %4 ], [ %10, %8 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__8_11) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_6_7 = main_8_10_reg;
	end
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %4 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_main_BB__4_7) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %4 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_main_BB__8_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %exitcond42 = icmp eq i32 %7, 2*/
		main_6_exitcond42 = (main_6_7_reg == 32'd2);
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %exitcond42 = icmp eq i32 %7, 2*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		main_6_exitcond42_reg <= main_6_exitcond42;
		if (start == 1'b0 && ^(main_6_exitcond42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_exitcond42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %scevgep44 = getelementptr [2 x [2 x [2 x i32]]]* @inPMV, i32 0, i32 %2, i32 %3, i32 %7*/
		main_8_scevgep44 = (1'd0 | (((16 * main_1_2_reg) + (8 * main_preheader41_3_reg)) + (4 * main_6_7_reg)));
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %scevgep44 = getelementptr [2 x [2 x [2 x i32]]]* @inPMV, i32 0, i32 %2, i32 %3, i32 %7*/
	if ((cur_state == LEGUP_F_main_BB__8_9)) begin
		main_8_scevgep44_reg <= main_8_scevgep44;
		if (start == 1'b0 && ^(main_8_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_scevgep44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %scevgep43 = getelementptr [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 %2, i32 %3, i32 %7*/
		main_8_scevgep43 = (1'd0 | (((16 * main_1_2_reg) + (8 * main_preheader41_3_reg)) + (4 * main_6_7_reg)));
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %scevgep43 = getelementptr [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 %2, i32 %3, i32 %7*/
	if ((cur_state == LEGUP_F_main_BB__8_9)) begin
		main_8_scevgep43_reg <= main_8_scevgep43;
		if (start == 1'b0 && ^(main_8_scevgep43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_scevgep43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %9 = load i32* %scevgep44, align 4*/
		main_8_9 = inPMV_out_a;
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %9 = load i32* %scevgep44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_10)) begin
		main_8_9_reg <= main_8_9;
		if (start == 1'b0 && ^(main_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %10 = add nsw i32 %7, 1*/
		main_8_10 = (main_6_7_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %10 = add nsw i32 %7, 1*/
	if ((cur_state == LEGUP_F_main_BB__8_9)) begin
		main_8_10_reg <= main_8_10;
		if (start == 1'b0 && ^(main_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %11*/
	/*   %12 = add nsw i32 %3, 1*/
		main_11_12 = (main_preheader41_3_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %11*/
	/*   %12 = add nsw i32 %3, 1*/
	if ((cur_state == LEGUP_F_main_BB__11_12)) begin
		main_11_12_reg <= main_11_12;
		if (start == 1'b0 && ^(main_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %13*/
	/*   %14 = add nsw i32 %2, 1*/
		main_13_14 = (main_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %13*/
	/*   %14 = add nsw i32 %2, 1*/
	if ((cur_state == LEGUP_F_main_BB__13_13)) begin
		main_13_14_reg <= main_13_14;
		if (start == 1'b0 && ^(main_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_13_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader4*/
	/*   %indvar39 = phi i32 [ %indvar.next40, %Fill_Buffer.exit.i.i ], [ 0, %15 ]*/
	if (((cur_state == LEGUP_F_main_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader4_indvar39 = 32'd0;
	end
	/* main: %.preheader4*/
	/*   %indvar39 = phi i32 [ %indvar.next40, %Fill_Buffer.exit.i.i ], [ 0, %15 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_28) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii_exitcond41_reg == 1'd0))) */ begin
		main_preheader4_indvar39 = main_Fill_Bufferexitii_indvarnext40_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader4*/
	/*   %indvar39 = phi i32 [ %indvar.next40, %Fill_Buffer.exit.i.i ], [ 0, %15 ]*/
	if (((cur_state == LEGUP_F_main_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader4_indvar39_reg <= main_preheader4_indvar39;
		if (start == 1'b0 && ^(main_preheader4_indvar39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader4_indvar39_reg"); $finish; end
	end
	/* main: %.preheader4*/
	/*   %indvar39 = phi i32 [ %indvar.next40, %Fill_Buffer.exit.i.i ], [ 0, %15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_28) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii_exitcond41_reg == 1'd0))) begin
		main_preheader4_indvar39_reg <= main_preheader4_indvar39;
		if (start == 1'b0 && ^(main_preheader4_indvar39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader4_indvar39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader4*/
	/*   %16 = phi i32 [ %26, %Fill_Buffer.exit.i.i ], [ 68157440, %15 ]*/
	if (((cur_state == LEGUP_F_main_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader4_16 = 32'd68157440;
	end
	/* main: %.preheader4*/
	/*   %16 = phi i32 [ %26, %Fill_Buffer.exit.i.i ], [ 68157440, %15 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_28) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii_exitcond41_reg == 1'd0))) */ begin
		main_preheader4_16 = main_Fill_Bufferexitii_26;
	end
end
always @(posedge clk) begin
	/* main: %.preheader4*/
	/*   %16 = phi i32 [ %26, %Fill_Buffer.exit.i.i ], [ 68157440, %15 ]*/
	if (((cur_state == LEGUP_F_main_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader4_16_reg <= main_preheader4_16;
		if (start == 1'b0 && ^(main_preheader4_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader4_16_reg"); $finish; end
	end
	/* main: %.preheader4*/
	/*   %16 = phi i32 [ %26, %Fill_Buffer.exit.i.i ], [ 68157440, %15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_28) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii_exitcond41_reg == 1'd0))) begin
		main_preheader4_16_reg <= main_preheader4_16;
		if (start == 1'b0 && ^(main_preheader4_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader4_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader4*/
	/*   %.pr10 = phi i8* [ %22, %Fill_Buffer.exit.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), %15 ]*/
	if (((cur_state == LEGUP_F_main_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader4_pr10 = (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1));
	end
	/* main: %.preheader4*/
	/*   %.pr10 = phi i8* [ %22, %Fill_Buffer.exit.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), %15 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_28) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii_exitcond41_reg == 1'd0))) */ begin
		main_preheader4_pr10 = main_Fill_Bufferexitii_22_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader4*/
	/*   %.pr10 = phi i8* [ %22, %Fill_Buffer.exit.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), %15 ]*/
	if (((cur_state == LEGUP_F_main_BB__15_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader4_pr10_reg <= main_preheader4_pr10;
		if (start == 1'b0 && ^(main_preheader4_pr10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader4_pr10_reg"); $finish; end
	end
	/* main: %.preheader4*/
	/*   %.pr10 = phi i8* [ %22, %Fill_Buffer.exit.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), %15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_28) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii_exitcond41_reg == 1'd0))) begin
		main_preheader4_pr10_reg <= main_preheader4_pr10;
		if (start == 1'b0 && ^(main_preheader4_pr10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader4_pr10_reg"); $finish; end
	end
end
always @(*) begin
	main_preheader4_17 = main_preheader4_17_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader4*/
	/*   %17 = mul i32 %indvar39, -8*/
	if ((cur_state == LEGUP_F_main_BB_preheader4_18)) begin
		main_preheader4_17_reg <= main_preheader4_17;
		if (start == 1'b0 && ^(main_preheader4_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader4_17_reg"); $finish; end
	end
	/* main: %.preheader4*/
	/*   %17 = mul i32 %indvar39, -8*/
	if ((cur_state == LEGUP_F_main_BB_preheader4_18)) begin
		main_preheader4_17_reg <= main_preheader4_17;
		if (start == 1'b0 && ^(main_preheader4_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader4_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader4*/
	/*   %18 = add i32 %17, 24*/
		main_preheader4_18 = (main_preheader4_17 + 32'd24);
end
always @(posedge clk) begin
	/* main: %.preheader4*/
	/*   %18 = add i32 %17, 24*/
	if ((cur_state == LEGUP_F_main_BB_preheader4_18)) begin
		main_preheader4_18_reg <= main_preheader4_18;
		if (start == 1'b0 && ^(main_preheader4_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader4_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader4*/
	/*   %19 = icmp ult i8* %.pr10, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		main_preheader4_19 = (main_preheader4_pr10_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* main: %.preheader4*/
	/*   %19 = icmp ult i8* %.pr10, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_main_BB_preheader4_17)) begin
		main_preheader4_19_reg <= main_preheader4_19;
		if (start == 1'b0 && ^(main_preheader4_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader4_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader3*/
	/*   %indvar34 = phi i32 [ 0, %.preheader3.preheader ], [ %indvar.next35, %20 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader3preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader3_indvar34 = 32'd0;
	end
	/* main: %.preheader3*/
	/*   %indvar34 = phi i32 [ 0, %.preheader3.preheader ], [ %indvar.next35, %20 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__20_24) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader3_indvar34 = main_20_indvarnext35_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader3*/
	/*   %indvar34 = phi i32 [ 0, %.preheader3.preheader ], [ %indvar.next35, %20 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader3preheader_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader3_indvar34_reg <= main_preheader3_indvar34;
		if (start == 1'b0 && ^(main_preheader3_indvar34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader3_indvar34_reg"); $finish; end
	end
	/* main: %.preheader3*/
	/*   %indvar34 = phi i32 [ 0, %.preheader3.preheader ], [ %indvar.next35, %20 ]*/
	if (((cur_state == LEGUP_F_main_BB__20_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader3_indvar34_reg <= main_preheader3_indvar34;
		if (start == 1'b0 && ^(main_preheader3_indvar34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader3_indvar34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader3*/
	/*   %exitcond36 = icmp eq i32 %indvar34, 2048*/
		main_preheader3_exitcond36 = (main_preheader3_indvar34_reg == 32'd2048);
end
always @(posedge clk) begin
	/* main: %.preheader3*/
	/*   %exitcond36 = icmp eq i32 %indvar34, 2048*/
	if ((cur_state == LEGUP_F_main_BB_preheader3_20)) begin
		main_preheader3_exitcond36_reg <= main_preheader3_exitcond36;
		if (start == 1'b0 && ^(main_preheader3_exitcond36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader3_exitcond36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %p2.0.i.i.i.i = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar34*/
		main_20_p20iiii = (`TAG_g_inRdbfr_a | (1 * main_preheader3_indvar34_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %p2.0.i.i.i.i = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar34*/
	if ((cur_state == LEGUP_F_main_BB__20_21)) begin
		main_20_p20iiii_reg <= main_20_p20iiii;
		if (start == 1'b0 && ^(main_20_p20iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_p20iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %p1.0.i.i.i.i = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar34*/
		main_20_p10iiii = (`TAG_g_ld_Rdbfr_a | (1 * main_preheader3_indvar34_reg));
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %p1.0.i.i.i.i = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar34*/
	if ((cur_state == LEGUP_F_main_BB__20_21)) begin
		main_20_p10iiii_reg <= main_20_p10iiii;
		if (start == 1'b0 && ^(main_20_p10iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_p10iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %21 = load i8* %p2.0.i.i.i.i, align 1*/
		main_20_21 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %21 = load i8* %p2.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_main_BB__20_23)) begin
		main_20_21_reg <= main_20_21;
		if (start == 1'b0 && ^(main_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %20*/
	/*   %indvar.next35 = add i32 %indvar34, 1*/
		main_20_indvarnext35 = (main_preheader3_indvar34_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %indvar.next35 = add i32 %indvar34, 1*/
	if ((cur_state == LEGUP_F_main_BB__20_21)) begin
		main_20_indvarnext35_reg <= main_20_indvarnext35;
		if (start == 1'b0 && ^(main_20_indvarnext35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_indvarnext35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %.pr11 = phi i8* [ %.pr10, %.preheader4 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader4_18) & (memory_controller_waitrequest == 1'd0)) & (main_preheader4_19_reg == 1'd1))) begin
		main_Fill_Bufferexitii_pr11 = main_preheader4_pr10_reg;
	end
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %.pr11 = phi i8* [ %.pr10, %.preheader4 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiloopexit_25) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_Fill_Bufferexitii_pr11 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %.pr11 = phi i8* [ %.pr10, %.preheader4 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader4_18) & (memory_controller_waitrequest == 1'd0)) & (main_preheader4_19_reg == 1'd1))) begin
		main_Fill_Bufferexitii_pr11_reg <= main_Fill_Bufferexitii_pr11;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_pr11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_pr11_reg"); $finish; end
	end
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %.pr11 = phi i8* [ %.pr10, %.preheader4 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiloopexit_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_Fill_Bufferexitii_pr11_reg <= main_Fill_Bufferexitii_pr11;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_pr11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_pr11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %22 = getelementptr inbounds i8* %.pr11, i32 1*/
		main_Fill_Bufferexitii_22 = (main_Fill_Bufferexitii_pr11_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %22 = getelementptr inbounds i8* %.pr11, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_26)) begin
		main_Fill_Bufferexitii_22_reg <= main_Fill_Bufferexitii_22;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %23 = load i8* %.pr11, align 1*/
		main_Fill_Bufferexitii_23 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %23 = load i8* %.pr11, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_28)) begin
		main_Fill_Bufferexitii_23_reg <= main_Fill_Bufferexitii_23;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %24 = zext i8 %23 to i32*/
		main_Fill_Bufferexitii_24 = main_Fill_Bufferexitii_23;
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %24 = zext i8 %23 to i32*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_28)) begin
		main_Fill_Bufferexitii_24_reg <= main_Fill_Bufferexitii_24;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %25 = shl i32 %24, %18*/
		main_Fill_Bufferexitii_25 = (main_Fill_Bufferexitii_24 <<< (main_preheader4_18_reg % 32));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %25 = shl i32 %24, %18*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_28)) begin
		main_Fill_Bufferexitii_25_reg <= main_Fill_Bufferexitii_25;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %26 = or i32 %16, %25*/
		main_Fill_Bufferexitii_26 = (main_preheader4_16_reg | main_Fill_Bufferexitii_25);
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %26 = or i32 %16, %25*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_28)) begin
		main_Fill_Bufferexitii_26_reg <= main_Fill_Bufferexitii_26;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %indvar.next40 = add i32 %indvar39, 1*/
		main_Fill_Bufferexitii_indvarnext40 = (main_preheader4_indvar39_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %indvar.next40 = add i32 %indvar39, 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_26)) begin
		main_Fill_Bufferexitii_indvarnext40_reg <= main_Fill_Bufferexitii_indvarnext40;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_indvarnext40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_indvarnext40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %exitcond41 = icmp eq i32 %indvar.next40, 4*/
		main_Fill_Bufferexitii_exitcond41 = (main_Fill_Bufferexitii_indvarnext40 == 32'd4);
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %exitcond41 = icmp eq i32 %indvar.next40, 4*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_26)) begin
		main_Fill_Bufferexitii_exitcond41_reg <= main_Fill_Bufferexitii_exitcond41;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_exitcond41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_exitcond41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit*/
	/*   %27 = lshr i32 %26, 31*/
		main_Get_Bitsexit_27 = (main_Fill_Bufferexitii_26_reg >>> (32'd31 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit*/
	/*   %27 = lshr i32 %26, 31*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		main_Get_Bitsexit_27_reg <= main_Get_Bitsexit_27;
		if (start == 1'b0 && ^(main_Get_Bitsexit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit*/
	/*   %28 = shl i32 %26, 1*/
		main_Get_Bitsexit_28 = (main_Fill_Bufferexitii_26_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit*/
	/*   %28 = shl i32 %26, 1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		main_Get_Bitsexit_28_reg <= main_Get_Bitsexit_28;
		if (start == 1'b0 && ^(main_Get_Bitsexit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit*/
	/*   %29 = getelementptr inbounds [2 x [2 x i32]]* %motion_vertical_field_select, i32 0, i32 0, i32 0*/
if (reset) begin main_Get_Bitsexit_29 = 0; end
		main_Get_Bitsexit_29 = 1'd0;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit*/
	/*   %29 = getelementptr inbounds [2 x [2 x i32]]* %motion_vertical_field_select, i32 0, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		main_Get_Bitsexit_29_reg <= main_Get_Bitsexit_29;
		if (start == 1'b0 && ^(main_Get_Bitsexit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit*/
	/*   %30 = getelementptr inbounds [2 x [2 x i32]]* %motion_vertical_field_select, i32 0, i32 1, i32 0*/
if (reset) begin main_Get_Bitsexit_30 = 0; end
		main_Get_Bitsexit_30 = (1'd0 | (8 * 32'd1));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit*/
	/*   %30 = getelementptr inbounds [2 x [2 x i32]]* %motion_vertical_field_select, i32 0, i32 1, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		main_Get_Bitsexit_30_reg <= main_Get_Bitsexit_30;
		if (start == 1'b0 && ^(main_Get_Bitsexit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit*/
	/*   %31 = getelementptr inbounds [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 0, i32 0, i32 0*/
if (reset) begin main_Get_Bitsexit_31 = 0; end
		main_Get_Bitsexit_31 = 1'd0;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit*/
	/*   %31 = getelementptr inbounds [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 0, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		main_Get_Bitsexit_31_reg <= main_Get_Bitsexit_31;
		if (start == 1'b0 && ^(main_Get_Bitsexit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
		main_Get_Bitsexit_32 = Get_motion_code_return_val_reg;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		main_Get_Bitsexit_32_reg <= main_Get_Bitsexit_32;
		if (start == 1'b0 && ^(main_Get_Bitsexit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit*/
	/*   %33 = icmp eq i32 %32, 0*/
		main_Get_Bitsexit_33 = (main_Get_Bitsexit_32_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit*/
	/*   %33 = icmp eq i32 %32, 0*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_33)) begin
		main_Get_Bitsexit_33_reg <= main_Get_Bitsexit_33;
		if (start == 1'b0 && ^(main_Get_Bitsexit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %35 = load i32* @ld_Bfr, align 4*/
		main_34_35 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %35 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_36)) begin
		main_34_35_reg <= main_34_35;
		if (start == 1'b0 && ^(main_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %36 = lshr i32 %35, 24*/
		main_34_36 = (main_34_35 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %36 = lshr i32 %35, 24*/
	if ((cur_state == LEGUP_F_main_BB__34_36)) begin
		main_34_36_reg <= main_34_36;
		if (start == 1'b0 && ^(main_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %37 = load i32* @ld_Incnt, align 4*/
		main_34_37 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %37 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_36)) begin
		main_34_37_reg <= main_34_37;
		if (start == 1'b0 && ^(main_34_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %38 = add nsw i32 %37, -200*/
		main_34_38 = (main_34_37 + -32'd200);
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %38 = add nsw i32 %37, -200*/
	if ((cur_state == LEGUP_F_main_BB__34_36)) begin
		main_34_38_reg <= main_34_38;
		if (start == 1'b0 && ^(main_34_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %39 = icmp slt i32 %38, 25*/
		main_34_39 = ($signed(main_34_38) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %39 = icmp slt i32 %38, 25*/
	if ((cur_state == LEGUP_F_main_BB__34_36)) begin
		main_34_39_reg <= main_34_39;
		if (start == 1'b0 && ^(main_34_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %41 = load i8** @ld_Rdptr, align 4*/
		main_40_41 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %41 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__40_40)) begin
		main_40_41_reg <= main_40_41;
		if (start == 1'b0 && ^(main_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %42 = icmp ult i8* %41, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		main_40_42 = (main_40_41 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %42 = icmp ult i8* %41, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_main_BB__40_40)) begin
		main_40_42_reg <= main_40_42;
		if (start == 1'b0 && ^(main_40_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %43 = sub i32 224, %37*/
		main_40_43 = (32'd224 - main_34_37_reg);
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %43 = sub i32 224, %37*/
	if ((cur_state == LEGUP_F_main_BB__40_38)) begin
		main_40_43_reg <= main_40_43;
		if (start == 1'b0 && ^(main_40_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %44 = lshr i32 %43, 3*/
		main_40_44 = (main_40_43 >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %44 = lshr i32 %43, 3*/
	if ((cur_state == LEGUP_F_main_BB__40_38)) begin
		main_40_44_reg <= main_40_44;
		if (start == 1'b0 && ^(main_40_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %45 = shl nuw i32 %44, 3*/
		main_40_45 = (main_40_44 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %45 = shl nuw i32 %44, 3*/
	if ((cur_state == LEGUP_F_main_BB__40_38)) begin
		main_40_45_reg <= main_40_45;
		if (start == 1'b0 && ^(main_40_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %46 = add i32 %37, %45*/
		main_40_46 = (main_34_37_reg + main_40_45);
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %46 = add i32 %37, %45*/
	if ((cur_state == LEGUP_F_main_BB__40_38)) begin
		main_40_46_reg <= main_40_46;
		if (start == 1'b0 && ^(main_40_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i27.preheader*/
	/*   %47 = add i32 %37, -192*/
		main_preheader2i27preheader_47 = (main_34_37_reg + -32'd192);
end
always @(posedge clk) begin
	/* main: %.preheader2.i27.preheader*/
	/*   %47 = add i32 %37, -192*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i27preheader_41)) begin
		main_preheader2i27preheader_47_reg <= main_preheader2i27preheader_47;
		if (start == 1'b0 && ^(main_preheader2i27preheader_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27preheader_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i27.preheader*/
	/*   %48 = sub i32 224, %37*/
		main_preheader2i27preheader_48 = (32'd224 - main_34_37_reg);
end
always @(posedge clk) begin
	/* main: %.preheader2.i27.preheader*/
	/*   %48 = sub i32 224, %37*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i27preheader_41)) begin
		main_preheader2i27preheader_48_reg <= main_preheader2i27preheader_48;
		if (start == 1'b0 && ^(main_preheader2i27preheader_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27preheader_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24.preheader*/
	/*   %49 = add i32 %37, -192*/
		main_preheaderi24preheader_49 = (main_34_37_reg + -32'd192);
end
always @(posedge clk) begin
	/* main: %.preheader.i24.preheader*/
	/*   %49 = add i32 %37, -192*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24preheader_42)) begin
		main_preheaderi24preheader_49_reg <= main_preheaderi24preheader_49;
		if (start == 1'b0 && ^(main_preheaderi24preheader_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24preheader_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24.preheader*/
	/*   %50 = sub i32 224, %37*/
		main_preheaderi24preheader_50 = (32'd224 - main_34_37_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i24.preheader*/
	/*   %50 = sub i32 224, %37*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24preheader_42)) begin
		main_preheaderi24preheader_50_reg <= main_preheaderi24preheader_50;
		if (start == 1'b0 && ^(main_preheaderi24preheader_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24preheader_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24*/
	/*   %indvar24 = phi i32 [ 0, %.preheader.i24.preheader ], [ %indvar.next25, %.preheader.i24 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi24preheader_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi24_indvar24 = 32'd0;
	end
	/* main: %.preheader.i24*/
	/*   %indvar24 = phi i32 [ 0, %.preheader.i24.preheader ], [ %indvar.next25, %.preheader.i24 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi24_45) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi24_60_reg == 1'd1))) */ begin
		main_preheaderi24_indvar24 = main_preheaderi24_indvarnext25_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %indvar24 = phi i32 [ 0, %.preheader.i24.preheader ], [ %indvar.next25, %.preheader.i24 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi24preheader_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi24_indvar24_reg <= main_preheaderi24_indvar24;
		if (start == 1'b0 && ^(main_preheaderi24_indvar24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_indvar24_reg"); $finish; end
	end
	/* main: %.preheader.i24*/
	/*   %indvar24 = phi i32 [ 0, %.preheader.i24.preheader ], [ %indvar.next25, %.preheader.i24 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi24_45) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi24_60_reg == 1'd1))) begin
		main_preheaderi24_indvar24_reg <= main_preheaderi24_indvar24;
		if (start == 1'b0 && ^(main_preheaderi24_indvar24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_indvar24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24*/
	/*   %51 = phi i32 [ undef, %.preheader.i24.preheader ], [ %59, %.preheader.i24 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi24preheader_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi24_51 = 0;
	end
	/* main: %.preheader.i24*/
	/*   %51 = phi i32 [ undef, %.preheader.i24.preheader ], [ %59, %.preheader.i24 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi24_45) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi24_60_reg == 1'd1))) */ begin
		main_preheaderi24_51 = main_preheaderi24_59;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %51 = phi i32 [ undef, %.preheader.i24.preheader ], [ %59, %.preheader.i24 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi24preheader_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi24_51_reg <= main_preheaderi24_51;
		if (start == 1'b0 && ^(main_preheaderi24_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_51_reg"); $finish; end
	end
	/* main: %.preheader.i24*/
	/*   %51 = phi i32 [ undef, %.preheader.i24.preheader ], [ %59, %.preheader.i24 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi24_45) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi24_60_reg == 1'd1))) begin
		main_preheaderi24_51_reg <= main_preheaderi24_51;
		if (start == 1'b0 && ^(main_preheaderi24_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24*/
	/*   %scevgep26 = getelementptr i8* %41, i32 %indvar24*/
		main_preheaderi24_scevgep26 = (main_40_41_reg + (1 * main_preheaderi24_indvar24_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %scevgep26 = getelementptr i8* %41, i32 %indvar24*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_43)) begin
		main_preheaderi24_scevgep26_reg <= main_preheaderi24_scevgep26;
		if (start == 1'b0 && ^(main_preheaderi24_scevgep26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_scevgep26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24*/
	/*   %52 = shl i32 %indvar24, 3*/
		main_preheaderi24_52 = (main_preheaderi24_indvar24_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %52 = shl i32 %indvar24, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_43)) begin
		main_preheaderi24_52_reg <= main_preheaderi24_52;
		if (start == 1'b0 && ^(main_preheaderi24_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24*/
	/*   %53 = add i32 %49, %52*/
		main_preheaderi24_53 = (main_preheaderi24preheader_49_reg + main_preheaderi24_52);
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %53 = add i32 %49, %52*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_43)) begin
		main_preheaderi24_53_reg <= main_preheaderi24_53;
		if (start == 1'b0 && ^(main_preheaderi24_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_53_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi24_54 = main_preheaderi24_54_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %54 = mul i32 %indvar24, -8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_44)) begin
		main_preheaderi24_54_reg <= main_preheaderi24_54;
		if (start == 1'b0 && ^(main_preheaderi24_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_54_reg"); $finish; end
	end
	/* main: %.preheader.i24*/
	/*   %54 = mul i32 %indvar24, -8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_44)) begin
		main_preheaderi24_54_reg <= main_preheaderi24_54;
		if (start == 1'b0 && ^(main_preheaderi24_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24*/
	/*   %55 = add i32 %50, %54*/
		main_preheaderi24_55 = (main_preheaderi24preheader_50_reg + main_preheaderi24_54);
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %55 = add i32 %50, %54*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_44)) begin
		main_preheaderi24_55_reg <= main_preheaderi24_55;
		if (start == 1'b0 && ^(main_preheaderi24_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24*/
	/*   %56 = load i8* %scevgep26, align 1*/
		main_preheaderi24_56 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %56 = load i8* %scevgep26, align 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_45)) begin
		main_preheaderi24_56_reg <= main_preheaderi24_56;
		if (start == 1'b0 && ^(main_preheaderi24_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24*/
	/*   %57 = zext i8 %56 to i32*/
		main_preheaderi24_57 = main_preheaderi24_56;
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %57 = zext i8 %56 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_45)) begin
		main_preheaderi24_57_reg <= main_preheaderi24_57;
		if (start == 1'b0 && ^(main_preheaderi24_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24*/
	/*   %58 = shl i32 %57, %55*/
		main_preheaderi24_58 = (main_preheaderi24_57 <<< (main_preheaderi24_55_reg % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %58 = shl i32 %57, %55*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_45)) begin
		main_preheaderi24_58_reg <= main_preheaderi24_58;
		if (start == 1'b0 && ^(main_preheaderi24_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24*/
	/*   %59 = or i32 %51, %58*/
		main_preheaderi24_59 = (main_preheaderi24_51_reg | main_preheaderi24_58);
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %59 = or i32 %51, %58*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_45)) begin
		main_preheaderi24_59_reg <= main_preheaderi24_59;
		if (start == 1'b0 && ^(main_preheaderi24_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24*/
	/*   %60 = icmp slt i32 %53, 25*/
		main_preheaderi24_60 = ($signed(main_preheaderi24_53) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %60 = icmp slt i32 %53, 25*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_43)) begin
		main_preheaderi24_60_reg <= main_preheaderi24_60;
		if (start == 1'b0 && ^(main_preheaderi24_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i24*/
	/*   %indvar.next25 = add i32 %indvar24, 1*/
		main_preheaderi24_indvarnext25 = (main_preheaderi24_indvar24_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %indvar.next25 = add i32 %indvar24, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_43)) begin
		main_preheaderi24_indvarnext25_reg <= main_preheaderi24_indvarnext25;
		if (start == 1'b0 && ^(main_preheaderi24_indvarnext25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi24_indvarnext25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i27*/
	/*   %indvar32 = phi i32 [ 0, %.preheader2.i27.preheader ], [ %indvar.next33, %Fill_Buffer.exit.i.i33 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i27preheader_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i27_indvar32 = 32'd0;
	end
	/* main: %.preheader2.i27*/
	/*   %indvar32 = phi i32 [ 0, %.preheader2.i27.preheader ], [ %indvar.next33, %Fill_Buffer.exit.i.i33 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_57) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii33_74_reg == 1'd1))) */ begin
		main_preheader2i27_indvar32 = main_Fill_Bufferexitii33_indvarnext33_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader2.i27*/
	/*   %indvar32 = phi i32 [ 0, %.preheader2.i27.preheader ], [ %indvar.next33, %Fill_Buffer.exit.i.i33 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i27preheader_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i27_indvar32_reg <= main_preheader2i27_indvar32;
		if (start == 1'b0 && ^(main_preheader2i27_indvar32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27_indvar32_reg"); $finish; end
	end
	/* main: %.preheader2.i27*/
	/*   %indvar32 = phi i32 [ 0, %.preheader2.i27.preheader ], [ %indvar.next33, %Fill_Buffer.exit.i.i33 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_57) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii33_74_reg == 1'd1))) begin
		main_preheader2i27_indvar32_reg <= main_preheader2i27_indvar32;
		if (start == 1'b0 && ^(main_preheader2i27_indvar32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27_indvar32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i27*/
	/*   %61 = phi i32 [ undef, %.preheader2.i27.preheader ], [ %73, %Fill_Buffer.exit.i.i33 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i27preheader_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i27_61 = 0;
	end
	/* main: %.preheader2.i27*/
	/*   %61 = phi i32 [ undef, %.preheader2.i27.preheader ], [ %73, %Fill_Buffer.exit.i.i33 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_57) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii33_74_reg == 1'd1))) */ begin
		main_preheader2i27_61 = main_Fill_Bufferexitii33_73;
	end
end
always @(posedge clk) begin
	/* main: %.preheader2.i27*/
	/*   %61 = phi i32 [ undef, %.preheader2.i27.preheader ], [ %73, %Fill_Buffer.exit.i.i33 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i27preheader_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i27_61_reg <= main_preheader2i27_61;
		if (start == 1'b0 && ^(main_preheader2i27_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27_61_reg"); $finish; end
	end
	/* main: %.preheader2.i27*/
	/*   %61 = phi i32 [ undef, %.preheader2.i27.preheader ], [ %73, %Fill_Buffer.exit.i.i33 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_57) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii33_74_reg == 1'd1))) begin
		main_preheader2i27_61_reg <= main_preheader2i27_61;
		if (start == 1'b0 && ^(main_preheader2i27_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i27*/
	/*   %.pr8.i25 = phi i8* [ %41, %.preheader2.i27.preheader ], [ %69, %Fill_Buffer.exit.i.i33 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i27preheader_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i27_pr8i25 = main_40_41_reg;
	end
	/* main: %.preheader2.i27*/
	/*   %.pr8.i25 = phi i8* [ %41, %.preheader2.i27.preheader ], [ %69, %Fill_Buffer.exit.i.i33 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_57) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii33_74_reg == 1'd1))) */ begin
		main_preheader2i27_pr8i25 = main_Fill_Bufferexitii33_69_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader2.i27*/
	/*   %.pr8.i25 = phi i8* [ %41, %.preheader2.i27.preheader ], [ %69, %Fill_Buffer.exit.i.i33 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i27preheader_41) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i27_pr8i25_reg <= main_preheader2i27_pr8i25;
		if (start == 1'b0 && ^(main_preheader2i27_pr8i25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27_pr8i25_reg"); $finish; end
	end
	/* main: %.preheader2.i27*/
	/*   %.pr8.i25 = phi i8* [ %41, %.preheader2.i27.preheader ], [ %69, %Fill_Buffer.exit.i.i33 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_57) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii33_74_reg == 1'd1))) begin
		main_preheader2i27_pr8i25_reg <= main_preheader2i27_pr8i25;
		if (start == 1'b0 && ^(main_preheader2i27_pr8i25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27_pr8i25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i27*/
	/*   %62 = shl i32 %indvar32, 3*/
		main_preheader2i27_62 = (main_preheader2i27_indvar32_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader2.i27*/
	/*   %62 = shl i32 %indvar32, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i27_46)) begin
		main_preheader2i27_62_reg <= main_preheader2i27_62;
		if (start == 1'b0 && ^(main_preheader2i27_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i27*/
	/*   %63 = add i32 %47, %62*/
		main_preheader2i27_63 = (main_preheader2i27preheader_47_reg + main_preheader2i27_62);
end
always @(posedge clk) begin
	/* main: %.preheader2.i27*/
	/*   %63 = add i32 %47, %62*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i27_46)) begin
		main_preheader2i27_63_reg <= main_preheader2i27_63;
		if (start == 1'b0 && ^(main_preheader2i27_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27_63_reg"); $finish; end
	end
end
always @(*) begin
	main_preheader2i27_64 = main_preheader2i27_64_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader2.i27*/
	/*   %64 = mul i32 %indvar32, -8*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i27_47)) begin
		main_preheader2i27_64_reg <= main_preheader2i27_64;
		if (start == 1'b0 && ^(main_preheader2i27_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27_64_reg"); $finish; end
	end
	/* main: %.preheader2.i27*/
	/*   %64 = mul i32 %indvar32, -8*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i27_47)) begin
		main_preheader2i27_64_reg <= main_preheader2i27_64;
		if (start == 1'b0 && ^(main_preheader2i27_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i27*/
	/*   %65 = add i32 %48, %64*/
		main_preheader2i27_65 = (main_preheader2i27preheader_48_reg + main_preheader2i27_64);
end
always @(posedge clk) begin
	/* main: %.preheader2.i27*/
	/*   %65 = add i32 %48, %64*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i27_47)) begin
		main_preheader2i27_65_reg <= main_preheader2i27_65;
		if (start == 1'b0 && ^(main_preheader2i27_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i27*/
	/*   %66 = icmp ult i8* %.pr8.i25, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		main_preheader2i27_66 = (main_preheader2i27_pr8i25_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* main: %.preheader2.i27*/
	/*   %66 = icmp ult i8* %.pr8.i25, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i27_46)) begin
		main_preheader2i27_66_reg <= main_preheader2i27_66;
		if (start == 1'b0 && ^(main_preheader2i27_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i27_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i31*/
	/*   %indvar27 = phi i32 [ 0, %.preheader1.i31.preheader ], [ %indvar.next28, %67 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i31preheader_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i31_indvar27 = 32'd0;
	end
	/* main: %.preheader1.i31*/
	/*   %indvar27 = phi i32 [ 0, %.preheader1.i31.preheader ], [ %indvar.next28, %67 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__67_53) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader1i31_indvar27 = main_67_indvarnext28_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i31*/
	/*   %indvar27 = phi i32 [ 0, %.preheader1.i31.preheader ], [ %indvar.next28, %67 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i31preheader_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i31_indvar27_reg <= main_preheader1i31_indvar27;
		if (start == 1'b0 && ^(main_preheader1i31_indvar27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i31_indvar27_reg"); $finish; end
	end
	/* main: %.preheader1.i31*/
	/*   %indvar27 = phi i32 [ 0, %.preheader1.i31.preheader ], [ %indvar.next28, %67 ]*/
	if (((cur_state == LEGUP_F_main_BB__67_53) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i31_indvar27_reg <= main_preheader1i31_indvar27;
		if (start == 1'b0 && ^(main_preheader1i31_indvar27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i31_indvar27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i31*/
	/*   %exitcond29 = icmp eq i32 %indvar27, 2048*/
		main_preheader1i31_exitcond29 = (main_preheader1i31_indvar27_reg == 32'd2048);
end
always @(posedge clk) begin
	/* main: %.preheader1.i31*/
	/*   %exitcond29 = icmp eq i32 %indvar27, 2048*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i31_49)) begin
		main_preheader1i31_exitcond29_reg <= main_preheader1i31_exitcond29;
		if (start == 1'b0 && ^(main_preheader1i31_exitcond29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i31_exitcond29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %p2.0.i.i.i.i29 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar27*/
		main_67_p20iiii29 = (`TAG_g_inRdbfr_a | (1 * main_preheader1i31_indvar27_reg));
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %p2.0.i.i.i.i29 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar27*/
	if ((cur_state == LEGUP_F_main_BB__67_50)) begin
		main_67_p20iiii29_reg <= main_67_p20iiii29;
		if (start == 1'b0 && ^(main_67_p20iiii29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_p20iiii29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %p1.0.i.i.i.i28 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar27*/
		main_67_p10iiii28 = (`TAG_g_ld_Rdbfr_a | (1 * main_preheader1i31_indvar27_reg));
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %p1.0.i.i.i.i28 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar27*/
	if ((cur_state == LEGUP_F_main_BB__67_50)) begin
		main_67_p10iiii28_reg <= main_67_p10iiii28;
		if (start == 1'b0 && ^(main_67_p10iiii28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_p10iiii28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %68 = load i8* %p2.0.i.i.i.i29, align 1*/
		main_67_68 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %68 = load i8* %p2.0.i.i.i.i29, align 1*/
	if ((cur_state == LEGUP_F_main_BB__67_52)) begin
		main_67_68_reg <= main_67_68;
		if (start == 1'b0 && ^(main_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %indvar.next28 = add i32 %indvar27, 1*/
		main_67_indvarnext28 = (main_preheader1i31_indvar27_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %indvar.next28 = add i32 %indvar27, 1*/
	if ((cur_state == LEGUP_F_main_BB__67_50)) begin
		main_67_indvarnext28_reg <= main_67_indvarnext28;
		if (start == 1'b0 && ^(main_67_indvarnext28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_indvarnext28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %.pr9.i32 = phi i8* [ %.pr8.i25, %.preheader2.i27 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i33.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader2i27_47) & (memory_controller_waitrequest == 1'd0)) & (main_preheader2i27_66_reg == 1'd1))) begin
		main_Fill_Bufferexitii33_pr9i32 = main_preheader2i27_pr8i25_reg;
	end
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %.pr9.i32 = phi i8* [ %.pr8.i25, %.preheader2.i27 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i33.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33loopexit_54) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_Fill_Bufferexitii33_pr9i32 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %.pr9.i32 = phi i8* [ %.pr8.i25, %.preheader2.i27 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i33.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader2i27_47) & (memory_controller_waitrequest == 1'd0)) & (main_preheader2i27_66_reg == 1'd1))) begin
		main_Fill_Bufferexitii33_pr9i32_reg <= main_Fill_Bufferexitii33_pr9i32;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii33_pr9i32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii33_pr9i32_reg"); $finish; end
	end
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %.pr9.i32 = phi i8* [ %.pr8.i25, %.preheader2.i27 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i33.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33loopexit_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_Fill_Bufferexitii33_pr9i32_reg <= main_Fill_Bufferexitii33_pr9i32;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii33_pr9i32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii33_pr9i32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %69 = getelementptr inbounds i8* %.pr9.i32, i32 1*/
		main_Fill_Bufferexitii33_69 = (main_Fill_Bufferexitii33_pr9i32_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %69 = getelementptr inbounds i8* %.pr9.i32, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_55)) begin
		main_Fill_Bufferexitii33_69_reg <= main_Fill_Bufferexitii33_69;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii33_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii33_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %70 = load i8* %.pr9.i32, align 1*/
		main_Fill_Bufferexitii33_70 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %70 = load i8* %.pr9.i32, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_57)) begin
		main_Fill_Bufferexitii33_70_reg <= main_Fill_Bufferexitii33_70;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii33_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii33_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %71 = zext i8 %70 to i32*/
		main_Fill_Bufferexitii33_71 = main_Fill_Bufferexitii33_70;
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %71 = zext i8 %70 to i32*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_57)) begin
		main_Fill_Bufferexitii33_71_reg <= main_Fill_Bufferexitii33_71;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii33_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii33_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %72 = shl i32 %71, %65*/
		main_Fill_Bufferexitii33_72 = (main_Fill_Bufferexitii33_71 <<< (main_preheader2i27_65_reg % 32));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %72 = shl i32 %71, %65*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_57)) begin
		main_Fill_Bufferexitii33_72_reg <= main_Fill_Bufferexitii33_72;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii33_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii33_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %73 = or i32 %61, %72*/
		main_Fill_Bufferexitii33_73 = (main_preheader2i27_61_reg | main_Fill_Bufferexitii33_72);
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %73 = or i32 %61, %72*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_57)) begin
		main_Fill_Bufferexitii33_73_reg <= main_Fill_Bufferexitii33_73;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii33_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii33_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %74 = icmp slt i32 %63, 25*/
		main_Fill_Bufferexitii33_74 = ($signed(main_preheader2i27_63_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %74 = icmp slt i32 %63, 25*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_55)) begin
		main_Fill_Bufferexitii33_74_reg <= main_Fill_Bufferexitii33_74;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii33_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii33_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %indvar.next33 = add i32 %indvar32, 1*/
		main_Fill_Bufferexitii33_indvarnext33 = (main_preheader2i27_indvar32_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %indvar.next33 = add i32 %indvar32, 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_55)) begin
		main_Fill_Bufferexitii33_indvarnext33_reg <= main_Fill_Bufferexitii33_indvarnext33;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii33_indvarnext33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii33_indvarnext33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i35*/
	/*   %75 = add nuw nsw i32 %44, 1*/
		main_loopexiti35_75 = (main_40_44_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.loopexit.i35*/
	/*   %75 = add nuw nsw i32 %44, 1*/
	if ((cur_state == LEGUP_F_main_BB_loopexiti35_58)) begin
		main_loopexiti35_75_reg <= main_loopexiti35_75;
		if (start == 1'b0 && ^(main_loopexiti35_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti35_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i35*/
	/*   %scevgep.i34 = getelementptr i8* %41, i32 %75*/
		main_loopexiti35_scevgepi34 = (main_40_41_reg + (1 * main_loopexiti35_75_reg));
end
always @(posedge clk) begin
	/* main: %.loopexit.i35*/
	/*   %scevgep.i34 = getelementptr i8* %41, i32 %75*/
	if ((cur_state == LEGUP_F_main_BB_loopexiti35_59)) begin
		main_loopexiti35_scevgepi34_reg <= main_loopexiti35_scevgepi34;
		if (start == 1'b0 && ^(main_loopexiti35_scevgepi34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti35_scevgepi34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit3.i36*/
	/*   %storemerge1.i37 = phi i8* [ %scevgep.i34, %.loopexit.i35 ], [ %69, %.loopexit3.i36.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexiti35_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit3i36_storemerge1i37 = main_loopexiti35_scevgepi34;
	end
	/* main: %.loopexit3.i36*/
	/*   %storemerge1.i37 = phi i8* [ %scevgep.i34, %.loopexit.i35 ], [ %69, %.loopexit3.i36.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexit3i36loopexit_60) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexit3i36_storemerge1i37 = main_Fill_Bufferexitii33_69_reg;
	end
end
always @(posedge clk) begin
	/* main: %.loopexit3.i36*/
	/*   %storemerge1.i37 = phi i8* [ %scevgep.i34, %.loopexit.i35 ], [ %69, %.loopexit3.i36.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexiti35_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit3i36_storemerge1i37_reg <= main_loopexit3i36_storemerge1i37;
		if (start == 1'b0 && ^(main_loopexit3i36_storemerge1i37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit3i36_storemerge1i37_reg"); $finish; end
	end
	/* main: %.loopexit3.i36*/
	/*   %storemerge1.i37 = phi i8* [ %scevgep.i34, %.loopexit.i35 ], [ %69, %.loopexit3.i36.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexit3i36loopexit_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit3i36_storemerge1i37_reg <= main_loopexit3i36_storemerge1i37;
		if (start == 1'b0 && ^(main_loopexit3i36_storemerge1i37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit3i36_storemerge1i37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit3.i36*/
	/*   %storemerge.i38 = phi i32 [ %59, %.loopexit.i35 ], [ %73, %.loopexit3.i36.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexiti35_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit3i36_storemergei38 = main_preheaderi24_59_reg;
	end
	/* main: %.loopexit3.i36*/
	/*   %storemerge.i38 = phi i32 [ %59, %.loopexit.i35 ], [ %73, %.loopexit3.i36.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexit3i36loopexit_60) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexit3i36_storemergei38 = main_Fill_Bufferexitii33_73_reg;
	end
end
always @(posedge clk) begin
	/* main: %.loopexit3.i36*/
	/*   %storemerge.i38 = phi i32 [ %59, %.loopexit.i35 ], [ %73, %.loopexit3.i36.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexiti35_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit3i36_storemergei38_reg <= main_loopexit3i36_storemergei38;
		if (start == 1'b0 && ^(main_loopexit3i36_storemergei38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit3i36_storemergei38_reg"); $finish; end
	end
	/* main: %.loopexit3.i36*/
	/*   %storemerge.i38 = phi i32 [ %59, %.loopexit.i35 ], [ %73, %.loopexit3.i36.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexit3i36loopexit_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit3i36_storemergei38_reg <= main_loopexit3i36_storemergei38;
		if (start == 1'b0 && ^(main_loopexit3i36_storemergei38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit3i36_storemergei38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit3.i36*/
	/*   %Incnt.2.i.i39 = add i32 %46, -192*/
		main_loopexit3i36_Incnt2ii39 = (main_40_46_reg + -32'd192);
end
always @(posedge clk) begin
	/* main: %.loopexit3.i36*/
	/*   %Incnt.2.i.i39 = add i32 %46, -192*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_61)) begin
		main_loopexit3i36_Incnt2ii39_reg <= main_loopexit3i36_Incnt2ii39;
		if (start == 1'b0 && ^(main_loopexit3i36_Incnt2ii39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit3i36_Incnt2ii39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit40*/
	/*   %76 = load i32* %31, align 4*/
		main_Get_Bitsexit40_76 = main_0_PMV_out_a;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit40*/
	/*   %76 = load i32* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit40_65)) begin
		main_Get_Bitsexit40_76_reg <= main_Get_Bitsexit40_76;
		if (start == 1'b0 && ^(main_Get_Bitsexit40_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit40_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit40*/
	/*   %77 = icmp sgt i32 %32, 0*/
		main_Get_Bitsexit40_77 = ($signed(main_Get_Bitsexit_32_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit40*/
	/*   %77 = icmp sgt i32 %32, 0*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit40_64)) begin
		main_Get_Bitsexit40_77_reg <= main_Get_Bitsexit40_77;
		if (start == 1'b0 && ^(main_Get_Bitsexit40_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit40_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit40*/
	/*   %78 = shl i32 %32, 8*/
		main_Get_Bitsexit40_78 = (main_Get_Bitsexit_32_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit40*/
	/*   %78 = shl i32 %32, 8*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit40_64)) begin
		main_Get_Bitsexit40_78_reg <= main_Get_Bitsexit40_78;
		if (start == 1'b0 && ^(main_Get_Bitsexit40_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit40_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %79*/
	/*   %80 = add i32 %78, -256*/
		main_79_80 = (main_Get_Bitsexit40_78_reg + -32'd256);
end
always @(posedge clk) begin
	/* main: %79*/
	/*   %80 = add i32 %78, -256*/
	if ((cur_state == LEGUP_F_main_BB__79_66)) begin
		main_79_80_reg <= main_79_80;
		if (start == 1'b0 && ^(main_79_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_79_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %79*/
	/*   %81 = or i32 %80, %36*/
		main_79_81 = (main_79_80 | main_34_36_reg);
end
always @(posedge clk) begin
	/* main: %79*/
	/*   %81 = or i32 %80, %36*/
	if ((cur_state == LEGUP_F_main_BB__79_66)) begin
		main_79_81_reg <= main_79_81;
		if (start == 1'b0 && ^(main_79_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_79_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %79*/
	/*   %82 = add nsw i32 %81, 1*/
		main_79_82 = (main_79_81 + 32'd1);
end
always @(posedge clk) begin
	/* main: %79*/
	/*   %82 = add nsw i32 %81, 1*/
	if ((cur_state == LEGUP_F_main_BB__79_66)) begin
		main_79_82_reg <= main_79_82;
		if (start == 1'b0 && ^(main_79_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_79_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %79*/
	/*   %83 = add nsw i32 %76, %82*/
		main_79_83 = (main_Get_Bitsexit40_76_reg + main_79_82);
end
always @(posedge clk) begin
	/* main: %79*/
	/*   %83 = add nsw i32 %76, %82*/
	if ((cur_state == LEGUP_F_main_BB__79_66)) begin
		main_79_83_reg <= main_79_83;
		if (start == 1'b0 && ^(main_79_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_79_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %79*/
	/*   %84 = icmp sgt i32 %83, 4095*/
		main_79_84 = ($signed(main_79_83) > $signed(32'd4095));
end
always @(posedge clk) begin
	/* main: %79*/
	/*   %84 = icmp sgt i32 %83, 4095*/
	if ((cur_state == LEGUP_F_main_BB__79_66)) begin
		main_79_84_reg <= main_79_84;
		if (start == 1'b0 && ^(main_79_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_79_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %79*/
	/*   %85 = add nsw i32 %83, -8192*/
		main_79_85 = (main_79_83 + -32'd8192);
end
always @(posedge clk) begin
	/* main: %79*/
	/*   %85 = add nsw i32 %83, -8192*/
	if ((cur_state == LEGUP_F_main_BB__79_66)) begin
		main_79_85_reg <= main_79_85;
		if (start == 1'b0 && ^(main_79_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_79_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %79*/
	/*   %. = select i1 %84, i32 %85, i32 %83*/
		main_79_ = (main_79_84 ? main_79_85 : main_79_83);
end
always @(posedge clk) begin
	/* main: %79*/
	/*   %. = select i1 %84, i32 %85, i32 %83*/
	if ((cur_state == LEGUP_F_main_BB__79_66)) begin
		main_79__reg <= main_79_;
		if (start == 1'b0 && ^(main_79_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_79__reg"); $finish; end
	end
end
always @(*) begin
	/* main: %86*/
	/*   %87 = load i32* %31, align 4*/
		main_86_87 = main_0_PMV_out_a;
end
always @(posedge clk) begin
	/* main: %86*/
	/*   %87 = load i32* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB__86_68)) begin
		main_86_87_reg <= main_86_87;
		if (start == 1'b0 && ^(main_86_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_86_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %89 = or i32 %78, %36*/
		main_88_89 = (main_Get_Bitsexit40_78_reg | main_34_36_reg);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %89 = or i32 %78, %36*/
	if ((cur_state == LEGUP_F_main_BB__88_69)) begin
		main_88_89_reg <= main_88_89;
		if (start == 1'b0 && ^(main_88_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %90 = xor i32 %89, -256*/
		main_88_90 = (main_88_89 ^ -32'd256);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %90 = xor i32 %89, -256*/
	if ((cur_state == LEGUP_F_main_BB__88_69)) begin
		main_88_90_reg <= main_88_90;
		if (start == 1'b0 && ^(main_88_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %91 = add nsw i32 %90, 1*/
		main_88_91 = (main_88_90 + 32'd1);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %91 = add nsw i32 %90, 1*/
	if ((cur_state == LEGUP_F_main_BB__88_69)) begin
		main_88_91_reg <= main_88_91;
		if (start == 1'b0 && ^(main_88_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %92 = sub nsw i32 %76, %91*/
		main_88_92 = (main_Get_Bitsexit40_76_reg - main_88_91);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %92 = sub nsw i32 %76, %91*/
	if ((cur_state == LEGUP_F_main_BB__88_69)) begin
		main_88_92_reg <= main_88_92;
		if (start == 1'b0 && ^(main_88_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %93 = icmp slt i32 %92, -4096*/
		main_88_93 = ($signed(main_88_92) < $signed(-32'd4096));
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %93 = icmp slt i32 %92, -4096*/
	if ((cur_state == LEGUP_F_main_BB__88_69)) begin
		main_88_93_reg <= main_88_93;
		if (start == 1'b0 && ^(main_88_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %94 = add nsw i32 %92, 8192*/
		main_88_94 = (main_88_92 + 32'd8192);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %94 = add nsw i32 %92, 8192*/
	if ((cur_state == LEGUP_F_main_BB__88_69)) begin
		main_88_94_reg <= main_88_94;
		if (start == 1'b0 && ^(main_88_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %.28 = select i1 %93, i32 %94, i32 %92*/
		main_88_28 = (main_88_93 ? main_88_94 : main_88_92);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %.28 = select i1 %93, i32 %94, i32 %92*/
	if ((cur_state == LEGUP_F_main_BB__88_69)) begin
		main_88_28_reg <= main_88_28;
		if (start == 1'b0 && ^(main_88_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %95 = phi i32 [ %87, %86 ], [ %., %79 ], [ %.28, %88 ]*/
	if (((cur_state == LEGUP_F_main_BB__79_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_95 = main_79_;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %95 = phi i32 [ %87, %86 ], [ %., %79 ], [ %.28, %88 ]*/
	else if (((cur_state == LEGUP_F_main_BB__86_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_95 = main_86_87;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %95 = phi i32 [ %87, %86 ], [ %., %79 ], [ %.28, %88 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__88_69) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_decode_motion_vectorexitii_95 = main_88_28;
	end
end
always @(posedge clk) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %95 = phi i32 [ %87, %86 ], [ %., %79 ], [ %.28, %88 ]*/
	if (((cur_state == LEGUP_F_main_BB__79_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_95_reg <= main_decode_motion_vectorexitii_95;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_95_reg"); $finish; end
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %95 = phi i32 [ %87, %86 ], [ %., %79 ], [ %.28, %88 ]*/
	if (((cur_state == LEGUP_F_main_BB__86_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_95_reg <= main_decode_motion_vectorexitii_95;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_95_reg"); $finish; end
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %95 = phi i32 [ %87, %86 ], [ %., %79 ], [ %.28, %88 ]*/
	if (((cur_state == LEGUP_F_main_BB__88_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_95_reg <= main_decode_motion_vectorexitii_95;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
		main_decode_motion_vectorexitii_96 = Get_motion_code_return_val_reg;
end
always @(posedge clk) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		main_decode_motion_vectorexitii_96_reg <= main_decode_motion_vectorexitii_96;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %97 = icmp eq i32 %96, 0*/
		main_decode_motion_vectorexitii_97 = (main_decode_motion_vectorexitii_96_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %97 = icmp eq i32 %96, 0*/
	if ((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_73)) begin
		main_decode_motion_vectorexitii_97_reg <= main_decode_motion_vectorexitii_97;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %99 = load i32* @ld_Bfr, align 4*/
		main_98_99 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %99 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_76)) begin
		main_98_99_reg <= main_98_99;
		if (start == 1'b0 && ^(main_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %100 = lshr i32 %99, 24*/
		main_98_100 = (main_98_99 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %100 = lshr i32 %99, 24*/
	if ((cur_state == LEGUP_F_main_BB__98_76)) begin
		main_98_100_reg <= main_98_100;
		if (start == 1'b0 && ^(main_98_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %101 = load i32* @ld_Incnt, align 4*/
		main_98_101 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %101 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_76)) begin
		main_98_101_reg <= main_98_101;
		if (start == 1'b0 && ^(main_98_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %102 = add nsw i32 %101, -200*/
		main_98_102 = (main_98_101 + -32'd200);
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %102 = add nsw i32 %101, -200*/
	if ((cur_state == LEGUP_F_main_BB__98_76)) begin
		main_98_102_reg <= main_98_102;
		if (start == 1'b0 && ^(main_98_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %103 = icmp slt i32 %102, 25*/
		main_98_103 = ($signed(main_98_102) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %103 = icmp slt i32 %102, 25*/
	if ((cur_state == LEGUP_F_main_BB__98_76)) begin
		main_98_103_reg <= main_98_103;
		if (start == 1'b0 && ^(main_98_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %105 = load i8** @ld_Rdptr, align 4*/
		main_104_105 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %105 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__104_80)) begin
		main_104_105_reg <= main_104_105;
		if (start == 1'b0 && ^(main_104_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %106 = icmp ult i8* %105, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		main_104_106 = (main_104_105 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %106 = icmp ult i8* %105, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_main_BB__104_80)) begin
		main_104_106_reg <= main_104_106;
		if (start == 1'b0 && ^(main_104_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %107 = sub i32 224, %101*/
		main_104_107 = (32'd224 - main_98_101_reg);
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %107 = sub i32 224, %101*/
	if ((cur_state == LEGUP_F_main_BB__104_78)) begin
		main_104_107_reg <= main_104_107;
		if (start == 1'b0 && ^(main_104_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %108 = lshr i32 %107, 3*/
		main_104_108 = (main_104_107 >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %108 = lshr i32 %107, 3*/
	if ((cur_state == LEGUP_F_main_BB__104_78)) begin
		main_104_108_reg <= main_104_108;
		if (start == 1'b0 && ^(main_104_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %109 = shl nuw i32 %108, 3*/
		main_104_109 = (main_104_108 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %109 = shl nuw i32 %108, 3*/
	if ((cur_state == LEGUP_F_main_BB__104_78)) begin
		main_104_109_reg <= main_104_109;
		if (start == 1'b0 && ^(main_104_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %110 = add i32 %101, %109*/
		main_104_110 = (main_98_101_reg + main_104_109);
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %110 = add i32 %101, %109*/
	if ((cur_state == LEGUP_F_main_BB__104_78)) begin
		main_104_110_reg <= main_104_110;
		if (start == 1'b0 && ^(main_104_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i9.preheader*/
	/*   %111 = add i32 %101, -192*/
		main_preheader2i9preheader_111 = (main_98_101_reg + -32'd192);
end
always @(posedge clk) begin
	/* main: %.preheader2.i9.preheader*/
	/*   %111 = add i32 %101, -192*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i9preheader_81)) begin
		main_preheader2i9preheader_111_reg <= main_preheader2i9preheader_111;
		if (start == 1'b0 && ^(main_preheader2i9preheader_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9preheader_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i9.preheader*/
	/*   %112 = sub i32 224, %101*/
		main_preheader2i9preheader_112 = (32'd224 - main_98_101_reg);
end
always @(posedge clk) begin
	/* main: %.preheader2.i9.preheader*/
	/*   %112 = sub i32 224, %101*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i9preheader_81)) begin
		main_preheader2i9preheader_112_reg <= main_preheader2i9preheader_112;
		if (start == 1'b0 && ^(main_preheader2i9preheader_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9preheader_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6.preheader*/
	/*   %113 = add i32 %101, -192*/
		main_preheaderi6preheader_113 = (main_98_101_reg + -32'd192);
end
always @(posedge clk) begin
	/* main: %.preheader.i6.preheader*/
	/*   %113 = add i32 %101, -192*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6preheader_82)) begin
		main_preheaderi6preheader_113_reg <= main_preheaderi6preheader_113;
		if (start == 1'b0 && ^(main_preheaderi6preheader_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6preheader_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6.preheader*/
	/*   %114 = sub i32 224, %101*/
		main_preheaderi6preheader_114 = (32'd224 - main_98_101_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i6.preheader*/
	/*   %114 = sub i32 224, %101*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6preheader_82)) begin
		main_preheaderi6preheader_114_reg <= main_preheaderi6preheader_114;
		if (start == 1'b0 && ^(main_preheaderi6preheader_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6preheader_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6*/
	/*   %indvar = phi i32 [ 0, %.preheader.i6.preheader ], [ %indvar.next, %.preheader.i6 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi6preheader_82) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi6_indvar = 32'd0;
	end
	/* main: %.preheader.i6*/
	/*   %indvar = phi i32 [ 0, %.preheader.i6.preheader ], [ %indvar.next, %.preheader.i6 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi6_85) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi6_124_reg == 1'd1))) */ begin
		main_preheaderi6_indvar = main_preheaderi6_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %indvar = phi i32 [ 0, %.preheader.i6.preheader ], [ %indvar.next, %.preheader.i6 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi6preheader_82) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi6_indvar_reg <= main_preheaderi6_indvar;
		if (start == 1'b0 && ^(main_preheaderi6_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_indvar_reg"); $finish; end
	end
	/* main: %.preheader.i6*/
	/*   %indvar = phi i32 [ 0, %.preheader.i6.preheader ], [ %indvar.next, %.preheader.i6 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi6_85) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi6_124_reg == 1'd1))) begin
		main_preheaderi6_indvar_reg <= main_preheaderi6_indvar;
		if (start == 1'b0 && ^(main_preheaderi6_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6*/
	/*   %115 = phi i32 [ undef, %.preheader.i6.preheader ], [ %123, %.preheader.i6 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi6preheader_82) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi6_115 = 0;
	end
	/* main: %.preheader.i6*/
	/*   %115 = phi i32 [ undef, %.preheader.i6.preheader ], [ %123, %.preheader.i6 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi6_85) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi6_124_reg == 1'd1))) */ begin
		main_preheaderi6_115 = main_preheaderi6_123;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %115 = phi i32 [ undef, %.preheader.i6.preheader ], [ %123, %.preheader.i6 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi6preheader_82) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi6_115_reg <= main_preheaderi6_115;
		if (start == 1'b0 && ^(main_preheaderi6_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_115_reg"); $finish; end
	end
	/* main: %.preheader.i6*/
	/*   %115 = phi i32 [ undef, %.preheader.i6.preheader ], [ %123, %.preheader.i6 ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi6_85) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi6_124_reg == 1'd1))) begin
		main_preheaderi6_115_reg <= main_preheaderi6_115;
		if (start == 1'b0 && ^(main_preheaderi6_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6*/
	/*   %scevgep16 = getelementptr i8* %105, i32 %indvar*/
		main_preheaderi6_scevgep16 = (main_104_105_reg + (1 * main_preheaderi6_indvar_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %scevgep16 = getelementptr i8* %105, i32 %indvar*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_83)) begin
		main_preheaderi6_scevgep16_reg <= main_preheaderi6_scevgep16;
		if (start == 1'b0 && ^(main_preheaderi6_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6*/
	/*   %116 = shl i32 %indvar, 3*/
		main_preheaderi6_116 = (main_preheaderi6_indvar_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %116 = shl i32 %indvar, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_83)) begin
		main_preheaderi6_116_reg <= main_preheaderi6_116;
		if (start == 1'b0 && ^(main_preheaderi6_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6*/
	/*   %117 = add i32 %113, %116*/
		main_preheaderi6_117 = (main_preheaderi6preheader_113_reg + main_preheaderi6_116);
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %117 = add i32 %113, %116*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_83)) begin
		main_preheaderi6_117_reg <= main_preheaderi6_117;
		if (start == 1'b0 && ^(main_preheaderi6_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_117_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi6_118 = main_preheaderi6_118_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %118 = mul i32 %indvar, -8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_84)) begin
		main_preheaderi6_118_reg <= main_preheaderi6_118;
		if (start == 1'b0 && ^(main_preheaderi6_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_118_reg"); $finish; end
	end
	/* main: %.preheader.i6*/
	/*   %118 = mul i32 %indvar, -8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_84)) begin
		main_preheaderi6_118_reg <= main_preheaderi6_118;
		if (start == 1'b0 && ^(main_preheaderi6_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6*/
	/*   %119 = add i32 %114, %118*/
		main_preheaderi6_119 = (main_preheaderi6preheader_114_reg + main_preheaderi6_118);
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %119 = add i32 %114, %118*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_84)) begin
		main_preheaderi6_119_reg <= main_preheaderi6_119;
		if (start == 1'b0 && ^(main_preheaderi6_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6*/
	/*   %120 = load i8* %scevgep16, align 1*/
		main_preheaderi6_120 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %120 = load i8* %scevgep16, align 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_85)) begin
		main_preheaderi6_120_reg <= main_preheaderi6_120;
		if (start == 1'b0 && ^(main_preheaderi6_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6*/
	/*   %121 = zext i8 %120 to i32*/
		main_preheaderi6_121 = main_preheaderi6_120;
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %121 = zext i8 %120 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_85)) begin
		main_preheaderi6_121_reg <= main_preheaderi6_121;
		if (start == 1'b0 && ^(main_preheaderi6_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6*/
	/*   %122 = shl i32 %121, %119*/
		main_preheaderi6_122 = (main_preheaderi6_121 <<< (main_preheaderi6_119_reg % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %122 = shl i32 %121, %119*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_85)) begin
		main_preheaderi6_122_reg <= main_preheaderi6_122;
		if (start == 1'b0 && ^(main_preheaderi6_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6*/
	/*   %123 = or i32 %115, %122*/
		main_preheaderi6_123 = (main_preheaderi6_115_reg | main_preheaderi6_122);
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %123 = or i32 %115, %122*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_85)) begin
		main_preheaderi6_123_reg <= main_preheaderi6_123;
		if (start == 1'b0 && ^(main_preheaderi6_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6*/
	/*   %124 = icmp slt i32 %117, 25*/
		main_preheaderi6_124 = ($signed(main_preheaderi6_117) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %124 = icmp slt i32 %117, 25*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_83)) begin
		main_preheaderi6_124_reg <= main_preheaderi6_124;
		if (start == 1'b0 && ^(main_preheaderi6_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i6*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_preheaderi6_indvarnext = (main_preheaderi6_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_83)) begin
		main_preheaderi6_indvarnext_reg <= main_preheaderi6_indvarnext;
		if (start == 1'b0 && ^(main_preheaderi6_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi6_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i9*/
	/*   %indvar22 = phi i32 [ 0, %.preheader2.i9.preheader ], [ %indvar.next23, %Fill_Buffer.exit.i.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i9preheader_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i9_indvar22 = 32'd0;
	end
	/* main: %.preheader2.i9*/
	/*   %indvar22 = phi i32 [ 0, %.preheader2.i9.preheader ], [ %indvar.next23, %Fill_Buffer.exit.i.i15 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_97) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii15_138_reg == 1'd1))) */ begin
		main_preheader2i9_indvar22 = main_Fill_Bufferexitii15_indvarnext23_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader2.i9*/
	/*   %indvar22 = phi i32 [ 0, %.preheader2.i9.preheader ], [ %indvar.next23, %Fill_Buffer.exit.i.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i9preheader_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i9_indvar22_reg <= main_preheader2i9_indvar22;
		if (start == 1'b0 && ^(main_preheader2i9_indvar22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9_indvar22_reg"); $finish; end
	end
	/* main: %.preheader2.i9*/
	/*   %indvar22 = phi i32 [ 0, %.preheader2.i9.preheader ], [ %indvar.next23, %Fill_Buffer.exit.i.i15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_97) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii15_138_reg == 1'd1))) begin
		main_preheader2i9_indvar22_reg <= main_preheader2i9_indvar22;
		if (start == 1'b0 && ^(main_preheader2i9_indvar22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9_indvar22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i9*/
	/*   %125 = phi i32 [ undef, %.preheader2.i9.preheader ], [ %137, %Fill_Buffer.exit.i.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i9preheader_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i9_125 = 0;
	end
	/* main: %.preheader2.i9*/
	/*   %125 = phi i32 [ undef, %.preheader2.i9.preheader ], [ %137, %Fill_Buffer.exit.i.i15 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_97) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii15_138_reg == 1'd1))) */ begin
		main_preheader2i9_125 = main_Fill_Bufferexitii15_137;
	end
end
always @(posedge clk) begin
	/* main: %.preheader2.i9*/
	/*   %125 = phi i32 [ undef, %.preheader2.i9.preheader ], [ %137, %Fill_Buffer.exit.i.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i9preheader_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i9_125_reg <= main_preheader2i9_125;
		if (start == 1'b0 && ^(main_preheader2i9_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9_125_reg"); $finish; end
	end
	/* main: %.preheader2.i9*/
	/*   %125 = phi i32 [ undef, %.preheader2.i9.preheader ], [ %137, %Fill_Buffer.exit.i.i15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_97) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii15_138_reg == 1'd1))) begin
		main_preheader2i9_125_reg <= main_preheader2i9_125;
		if (start == 1'b0 && ^(main_preheader2i9_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i9*/
	/*   %.pr8.i7 = phi i8* [ %105, %.preheader2.i9.preheader ], [ %133, %Fill_Buffer.exit.i.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i9preheader_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i9_pr8i7 = main_104_105_reg;
	end
	/* main: %.preheader2.i9*/
	/*   %.pr8.i7 = phi i8* [ %105, %.preheader2.i9.preheader ], [ %133, %Fill_Buffer.exit.i.i15 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_97) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii15_138_reg == 1'd1))) */ begin
		main_preheader2i9_pr8i7 = main_Fill_Bufferexitii15_133_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader2.i9*/
	/*   %.pr8.i7 = phi i8* [ %105, %.preheader2.i9.preheader ], [ %133, %Fill_Buffer.exit.i.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2i9preheader_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2i9_pr8i7_reg <= main_preheader2i9_pr8i7;
		if (start == 1'b0 && ^(main_preheader2i9_pr8i7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9_pr8i7_reg"); $finish; end
	end
	/* main: %.preheader2.i9*/
	/*   %.pr8.i7 = phi i8* [ %105, %.preheader2.i9.preheader ], [ %133, %Fill_Buffer.exit.i.i15 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_97) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii15_138_reg == 1'd1))) begin
		main_preheader2i9_pr8i7_reg <= main_preheader2i9_pr8i7;
		if (start == 1'b0 && ^(main_preheader2i9_pr8i7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9_pr8i7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i9*/
	/*   %126 = shl i32 %indvar22, 3*/
		main_preheader2i9_126 = (main_preheader2i9_indvar22_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader2.i9*/
	/*   %126 = shl i32 %indvar22, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i9_86)) begin
		main_preheader2i9_126_reg <= main_preheader2i9_126;
		if (start == 1'b0 && ^(main_preheader2i9_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i9*/
	/*   %127 = add i32 %111, %126*/
		main_preheader2i9_127 = (main_preheader2i9preheader_111_reg + main_preheader2i9_126);
end
always @(posedge clk) begin
	/* main: %.preheader2.i9*/
	/*   %127 = add i32 %111, %126*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i9_86)) begin
		main_preheader2i9_127_reg <= main_preheader2i9_127;
		if (start == 1'b0 && ^(main_preheader2i9_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9_127_reg"); $finish; end
	end
end
always @(*) begin
	main_preheader2i9_128 = main_preheader2i9_128_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader2.i9*/
	/*   %128 = mul i32 %indvar22, -8*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i9_87)) begin
		main_preheader2i9_128_reg <= main_preheader2i9_128;
		if (start == 1'b0 && ^(main_preheader2i9_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9_128_reg"); $finish; end
	end
	/* main: %.preheader2.i9*/
	/*   %128 = mul i32 %indvar22, -8*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i9_87)) begin
		main_preheader2i9_128_reg <= main_preheader2i9_128;
		if (start == 1'b0 && ^(main_preheader2i9_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i9*/
	/*   %129 = add i32 %112, %128*/
		main_preheader2i9_129 = (main_preheader2i9preheader_112_reg + main_preheader2i9_128);
end
always @(posedge clk) begin
	/* main: %.preheader2.i9*/
	/*   %129 = add i32 %112, %128*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i9_87)) begin
		main_preheader2i9_129_reg <= main_preheader2i9_129;
		if (start == 1'b0 && ^(main_preheader2i9_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2.i9*/
	/*   %130 = icmp ult i8* %.pr8.i7, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		main_preheader2i9_130 = (main_preheader2i9_pr8i7_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* main: %.preheader2.i9*/
	/*   %130 = icmp ult i8* %.pr8.i7, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_main_BB_preheader2i9_86)) begin
		main_preheader2i9_130_reg <= main_preheader2i9_130;
		if (start == 1'b0 && ^(main_preheader2i9_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2i9_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i13*/
	/*   %indvar17 = phi i32 [ 0, %.preheader1.i13.preheader ], [ %indvar.next18, %131 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i13preheader_88) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i13_indvar17 = 32'd0;
	end
	/* main: %.preheader1.i13*/
	/*   %indvar17 = phi i32 [ 0, %.preheader1.i13.preheader ], [ %indvar.next18, %131 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__131_93) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader1i13_indvar17 = main_131_indvarnext18_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i13*/
	/*   %indvar17 = phi i32 [ 0, %.preheader1.i13.preheader ], [ %indvar.next18, %131 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i13preheader_88) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i13_indvar17_reg <= main_preheader1i13_indvar17;
		if (start == 1'b0 && ^(main_preheader1i13_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i13_indvar17_reg"); $finish; end
	end
	/* main: %.preheader1.i13*/
	/*   %indvar17 = phi i32 [ 0, %.preheader1.i13.preheader ], [ %indvar.next18, %131 ]*/
	if (((cur_state == LEGUP_F_main_BB__131_93) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i13_indvar17_reg <= main_preheader1i13_indvar17;
		if (start == 1'b0 && ^(main_preheader1i13_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i13_indvar17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i13*/
	/*   %exitcond19 = icmp eq i32 %indvar17, 2048*/
		main_preheader1i13_exitcond19 = (main_preheader1i13_indvar17_reg == 32'd2048);
end
always @(posedge clk) begin
	/* main: %.preheader1.i13*/
	/*   %exitcond19 = icmp eq i32 %indvar17, 2048*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i13_89)) begin
		main_preheader1i13_exitcond19_reg <= main_preheader1i13_exitcond19;
		if (start == 1'b0 && ^(main_preheader1i13_exitcond19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i13_exitcond19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %p2.0.i.i.i.i11 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar17*/
		main_131_p20iiii11 = (`TAG_g_inRdbfr_a | (1 * main_preheader1i13_indvar17_reg));
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %p2.0.i.i.i.i11 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar17*/
	if ((cur_state == LEGUP_F_main_BB__131_90)) begin
		main_131_p20iiii11_reg <= main_131_p20iiii11;
		if (start == 1'b0 && ^(main_131_p20iiii11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_p20iiii11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %p1.0.i.i.i.i10 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar17*/
		main_131_p10iiii10 = (`TAG_g_ld_Rdbfr_a | (1 * main_preheader1i13_indvar17_reg));
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %p1.0.i.i.i.i10 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar17*/
	if ((cur_state == LEGUP_F_main_BB__131_90)) begin
		main_131_p10iiii10_reg <= main_131_p10iiii10;
		if (start == 1'b0 && ^(main_131_p10iiii10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_p10iiii10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %132 = load i8* %p2.0.i.i.i.i11, align 1*/
		main_131_132 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %132 = load i8* %p2.0.i.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_main_BB__131_92)) begin
		main_131_132_reg <= main_131_132;
		if (start == 1'b0 && ^(main_131_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
		main_131_indvarnext18 = (main_preheader1i13_indvar17_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
	if ((cur_state == LEGUP_F_main_BB__131_90)) begin
		main_131_indvarnext18_reg <= main_131_indvarnext18;
		if (start == 1'b0 && ^(main_131_indvarnext18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_indvarnext18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %.pr9.i14 = phi i8* [ %.pr8.i7, %.preheader2.i9 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i15.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader2i9_87) & (memory_controller_waitrequest == 1'd0)) & (main_preheader2i9_130_reg == 1'd1))) begin
		main_Fill_Bufferexitii15_pr9i14 = main_preheader2i9_pr8i7_reg;
	end
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %.pr9.i14 = phi i8* [ %.pr8.i7, %.preheader2.i9 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i15.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15loopexit_94) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_Fill_Bufferexitii15_pr9i14 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %.pr9.i14 = phi i8* [ %.pr8.i7, %.preheader2.i9 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i15.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader2i9_87) & (memory_controller_waitrequest == 1'd0)) & (main_preheader2i9_130_reg == 1'd1))) begin
		main_Fill_Bufferexitii15_pr9i14_reg <= main_Fill_Bufferexitii15_pr9i14;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii15_pr9i14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii15_pr9i14_reg"); $finish; end
	end
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %.pr9.i14 = phi i8* [ %.pr8.i7, %.preheader2.i9 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i15.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15loopexit_94) & (memory_controller_waitrequest == 1'd0))) begin
		main_Fill_Bufferexitii15_pr9i14_reg <= main_Fill_Bufferexitii15_pr9i14;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii15_pr9i14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii15_pr9i14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %133 = getelementptr inbounds i8* %.pr9.i14, i32 1*/
		main_Fill_Bufferexitii15_133 = (main_Fill_Bufferexitii15_pr9i14_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %133 = getelementptr inbounds i8* %.pr9.i14, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_95)) begin
		main_Fill_Bufferexitii15_133_reg <= main_Fill_Bufferexitii15_133;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii15_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii15_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %134 = load i8* %.pr9.i14, align 1*/
		main_Fill_Bufferexitii15_134 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %134 = load i8* %.pr9.i14, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_97)) begin
		main_Fill_Bufferexitii15_134_reg <= main_Fill_Bufferexitii15_134;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii15_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii15_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %135 = zext i8 %134 to i32*/
		main_Fill_Bufferexitii15_135 = main_Fill_Bufferexitii15_134;
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %135 = zext i8 %134 to i32*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_97)) begin
		main_Fill_Bufferexitii15_135_reg <= main_Fill_Bufferexitii15_135;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii15_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii15_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %136 = shl i32 %135, %129*/
		main_Fill_Bufferexitii15_136 = (main_Fill_Bufferexitii15_135 <<< (main_preheader2i9_129_reg % 32));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %136 = shl i32 %135, %129*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_97)) begin
		main_Fill_Bufferexitii15_136_reg <= main_Fill_Bufferexitii15_136;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii15_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii15_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %137 = or i32 %125, %136*/
		main_Fill_Bufferexitii15_137 = (main_preheader2i9_125_reg | main_Fill_Bufferexitii15_136);
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %137 = or i32 %125, %136*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_97)) begin
		main_Fill_Bufferexitii15_137_reg <= main_Fill_Bufferexitii15_137;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii15_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii15_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %138 = icmp slt i32 %127, 25*/
		main_Fill_Bufferexitii15_138 = ($signed(main_preheader2i9_127_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %138 = icmp slt i32 %127, 25*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_95)) begin
		main_Fill_Bufferexitii15_138_reg <= main_Fill_Bufferexitii15_138;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii15_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii15_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %indvar.next23 = add i32 %indvar22, 1*/
		main_Fill_Bufferexitii15_indvarnext23 = (main_preheader2i9_indvar22_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %indvar.next23 = add i32 %indvar22, 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_95)) begin
		main_Fill_Bufferexitii15_indvarnext23_reg <= main_Fill_Bufferexitii15_indvarnext23;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii15_indvarnext23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii15_indvarnext23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i17*/
	/*   %139 = add nuw nsw i32 %108, 1*/
		main_loopexiti17_139 = (main_104_108_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.loopexit.i17*/
	/*   %139 = add nuw nsw i32 %108, 1*/
	if ((cur_state == LEGUP_F_main_BB_loopexiti17_98)) begin
		main_loopexiti17_139_reg <= main_loopexiti17_139;
		if (start == 1'b0 && ^(main_loopexiti17_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti17_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i17*/
	/*   %scevgep.i16 = getelementptr i8* %105, i32 %139*/
		main_loopexiti17_scevgepi16 = (main_104_105_reg + (1 * main_loopexiti17_139_reg));
end
always @(posedge clk) begin
	/* main: %.loopexit.i17*/
	/*   %scevgep.i16 = getelementptr i8* %105, i32 %139*/
	if ((cur_state == LEGUP_F_main_BB_loopexiti17_99)) begin
		main_loopexiti17_scevgepi16_reg <= main_loopexiti17_scevgepi16;
		if (start == 1'b0 && ^(main_loopexiti17_scevgepi16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexiti17_scevgepi16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit3.i18*/
	/*   %storemerge1.i19 = phi i8* [ %scevgep.i16, %.loopexit.i17 ], [ %133, %.loopexit3.i18.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexiti17_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit3i18_storemerge1i19 = main_loopexiti17_scevgepi16;
	end
	/* main: %.loopexit3.i18*/
	/*   %storemerge1.i19 = phi i8* [ %scevgep.i16, %.loopexit.i17 ], [ %133, %.loopexit3.i18.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexit3i18loopexit_100) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexit3i18_storemerge1i19 = main_Fill_Bufferexitii15_133_reg;
	end
end
always @(posedge clk) begin
	/* main: %.loopexit3.i18*/
	/*   %storemerge1.i19 = phi i8* [ %scevgep.i16, %.loopexit.i17 ], [ %133, %.loopexit3.i18.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexiti17_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit3i18_storemerge1i19_reg <= main_loopexit3i18_storemerge1i19;
		if (start == 1'b0 && ^(main_loopexit3i18_storemerge1i19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit3i18_storemerge1i19_reg"); $finish; end
	end
	/* main: %.loopexit3.i18*/
	/*   %storemerge1.i19 = phi i8* [ %scevgep.i16, %.loopexit.i17 ], [ %133, %.loopexit3.i18.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexit3i18loopexit_100) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit3i18_storemerge1i19_reg <= main_loopexit3i18_storemerge1i19;
		if (start == 1'b0 && ^(main_loopexit3i18_storemerge1i19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit3i18_storemerge1i19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit3.i18*/
	/*   %storemerge.i20 = phi i32 [ %123, %.loopexit.i17 ], [ %137, %.loopexit3.i18.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexiti17_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit3i18_storemergei20 = main_preheaderi6_123_reg;
	end
	/* main: %.loopexit3.i18*/
	/*   %storemerge.i20 = phi i32 [ %123, %.loopexit.i17 ], [ %137, %.loopexit3.i18.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexit3i18loopexit_100) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexit3i18_storemergei20 = main_Fill_Bufferexitii15_137_reg;
	end
end
always @(posedge clk) begin
	/* main: %.loopexit3.i18*/
	/*   %storemerge.i20 = phi i32 [ %123, %.loopexit.i17 ], [ %137, %.loopexit3.i18.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexiti17_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit3i18_storemergei20_reg <= main_loopexit3i18_storemergei20;
		if (start == 1'b0 && ^(main_loopexit3i18_storemergei20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit3i18_storemergei20_reg"); $finish; end
	end
	/* main: %.loopexit3.i18*/
	/*   %storemerge.i20 = phi i32 [ %123, %.loopexit.i17 ], [ %137, %.loopexit3.i18.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexit3i18loopexit_100) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit3i18_storemergei20_reg <= main_loopexit3i18_storemergei20;
		if (start == 1'b0 && ^(main_loopexit3i18_storemergei20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit3i18_storemergei20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit3.i18*/
	/*   %Incnt.2.i.i21 = add i32 %110, -192*/
		main_loopexit3i18_Incnt2ii21 = (main_104_110_reg + -32'd192);
end
always @(posedge clk) begin
	/* main: %.loopexit3.i18*/
	/*   %Incnt.2.i.i21 = add i32 %110, -192*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_101)) begin
		main_loopexit3i18_Incnt2ii21_reg <= main_loopexit3i18_Incnt2ii21;
		if (start == 1'b0 && ^(main_loopexit3i18_Incnt2ii21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit3i18_Incnt2ii21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit22*/
	/*   %140 = getelementptr inbounds [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 0, i32 0, i32 1*/
if (reset) begin main_Get_Bitsexit22_140 = 0; end
		main_Get_Bitsexit22_140 = (1'd0 | (4 * 32'd1));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit22*/
	/*   %140 = getelementptr inbounds [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 0, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit22_104)) begin
		main_Get_Bitsexit22_140_reg <= main_Get_Bitsexit22_140;
		if (start == 1'b0 && ^(main_Get_Bitsexit22_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit22_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit22*/
	/*   %141 = load i32* %140, align 4*/
		main_Get_Bitsexit22_141 = main_0_PMV_out_a;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit22*/
	/*   %141 = load i32* %140, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit22_105)) begin
		main_Get_Bitsexit22_141_reg <= main_Get_Bitsexit22_141;
		if (start == 1'b0 && ^(main_Get_Bitsexit22_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit22_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit22*/
	/*   %142 = ashr i32 %141, 1*/
		main_Get_Bitsexit22_142 = ($signed(main_Get_Bitsexit22_141) >>> 32'd1);
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit22*/
	/*   %142 = ashr i32 %141, 1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit22_105)) begin
		main_Get_Bitsexit22_142_reg <= main_Get_Bitsexit22_142;
		if (start == 1'b0 && ^(main_Get_Bitsexit22_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit22_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit22*/
	/*   %143 = icmp sgt i32 %96, 0*/
		main_Get_Bitsexit22_143 = ($signed(main_decode_motion_vectorexitii_96_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit22*/
	/*   %143 = icmp sgt i32 %96, 0*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit22_104)) begin
		main_Get_Bitsexit22_143_reg <= main_Get_Bitsexit22_143;
		if (start == 1'b0 && ^(main_Get_Bitsexit22_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit22_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit22*/
	/*   %144 = shl i32 %96, 8*/
		main_Get_Bitsexit22_144 = (main_decode_motion_vectorexitii_96_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit22*/
	/*   %144 = shl i32 %96, 8*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit22_104)) begin
		main_Get_Bitsexit22_144_reg <= main_Get_Bitsexit22_144;
		if (start == 1'b0 && ^(main_Get_Bitsexit22_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit22_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %145*/
	/*   %146 = add i32 %144, -256*/
		main_145_146 = (main_Get_Bitsexit22_144_reg + -32'd256);
end
always @(posedge clk) begin
	/* main: %145*/
	/*   %146 = add i32 %144, -256*/
	if ((cur_state == LEGUP_F_main_BB__145_107)) begin
		main_145_146_reg <= main_145_146;
		if (start == 1'b0 && ^(main_145_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_145_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %145*/
	/*   %147 = or i32 %146, %100*/
		main_145_147 = (main_145_146 | main_98_100_reg);
end
always @(posedge clk) begin
	/* main: %145*/
	/*   %147 = or i32 %146, %100*/
	if ((cur_state == LEGUP_F_main_BB__145_107)) begin
		main_145_147_reg <= main_145_147;
		if (start == 1'b0 && ^(main_145_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_145_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %145*/
	/*   %148 = add nsw i32 %147, 1*/
		main_145_148 = (main_145_147 + 32'd1);
end
always @(posedge clk) begin
	/* main: %145*/
	/*   %148 = add nsw i32 %147, 1*/
	if ((cur_state == LEGUP_F_main_BB__145_107)) begin
		main_145_148_reg <= main_145_148;
		if (start == 1'b0 && ^(main_145_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_145_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %145*/
	/*   %149 = add nsw i32 %142, %148*/
		main_145_149 = (main_Get_Bitsexit22_142_reg + main_145_148);
end
always @(posedge clk) begin
	/* main: %145*/
	/*   %149 = add nsw i32 %142, %148*/
	if ((cur_state == LEGUP_F_main_BB__145_107)) begin
		main_145_149_reg <= main_145_149;
		if (start == 1'b0 && ^(main_145_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_145_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %145*/
	/*   %150 = icmp sgt i32 %149, 4095*/
		main_145_150 = ($signed(main_145_149) > $signed(32'd4095));
end
always @(posedge clk) begin
	/* main: %145*/
	/*   %150 = icmp sgt i32 %149, 4095*/
	if ((cur_state == LEGUP_F_main_BB__145_107)) begin
		main_145_150_reg <= main_145_150;
		if (start == 1'b0 && ^(main_145_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_145_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %145*/
	/*   %151 = add nsw i32 %149, -8192*/
		main_145_151 = (main_145_149 + -32'd8192);
end
always @(posedge clk) begin
	/* main: %145*/
	/*   %151 = add nsw i32 %149, -8192*/
	if ((cur_state == LEGUP_F_main_BB__145_107)) begin
		main_145_151_reg <= main_145_151;
		if (start == 1'b0 && ^(main_145_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_145_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %145*/
	/*   %.29 = select i1 %150, i32 %151, i32 %149*/
		main_145_29 = (main_145_150 ? main_145_151 : main_145_149);
end
always @(posedge clk) begin
	/* main: %145*/
	/*   %.29 = select i1 %150, i32 %151, i32 %149*/
	if ((cur_state == LEGUP_F_main_BB__145_107)) begin
		main_145_29_reg <= main_145_29;
		if (start == 1'b0 && ^(main_145_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_145_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %152*/
	/*   %153 = getelementptr inbounds [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 0, i32 0, i32 1*/
if (reset) begin main_152_153 = 0; end
		main_152_153 = (1'd0 | (4 * 32'd1));
end
always @(posedge clk) begin
	/* main: %152*/
	/*   %153 = getelementptr inbounds [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 0, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB__152_108)) begin
		main_152_153_reg <= main_152_153;
		if (start == 1'b0 && ^(main_152_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %152*/
	/*   %154 = load i32* %153, align 4*/
		main_152_154 = main_0_PMV_out_b;
end
always @(posedge clk) begin
	/* main: %152*/
	/*   %154 = load i32* %153, align 4*/
	if ((cur_state == LEGUP_F_main_BB__152_109)) begin
		main_152_154_reg <= main_152_154;
		if (start == 1'b0 && ^(main_152_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %152*/
	/*   %155 = ashr i32 %154, 1*/
		main_152_155 = ($signed(main_152_154) >>> 32'd1);
end
always @(posedge clk) begin
	/* main: %152*/
	/*   %155 = ashr i32 %154, 1*/
	if ((cur_state == LEGUP_F_main_BB__152_109)) begin
		main_152_155_reg <= main_152_155;
		if (start == 1'b0 && ^(main_152_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %157 = or i32 %144, %100*/
		main_156_157 = (main_Get_Bitsexit22_144_reg | main_98_100_reg);
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %157 = or i32 %144, %100*/
	if ((cur_state == LEGUP_F_main_BB__156_111)) begin
		main_156_157_reg <= main_156_157;
		if (start == 1'b0 && ^(main_156_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %158 = xor i32 %157, -256*/
		main_156_158 = (main_156_157 ^ -32'd256);
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %158 = xor i32 %157, -256*/
	if ((cur_state == LEGUP_F_main_BB__156_111)) begin
		main_156_158_reg <= main_156_158;
		if (start == 1'b0 && ^(main_156_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %159 = add nsw i32 %158, 1*/
		main_156_159 = (main_156_158 + 32'd1);
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %159 = add nsw i32 %158, 1*/
	if ((cur_state == LEGUP_F_main_BB__156_111)) begin
		main_156_159_reg <= main_156_159;
		if (start == 1'b0 && ^(main_156_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %160 = sub nsw i32 %142, %159*/
		main_156_160 = (main_Get_Bitsexit22_142_reg - main_156_159);
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %160 = sub nsw i32 %142, %159*/
	if ((cur_state == LEGUP_F_main_BB__156_111)) begin
		main_156_160_reg <= main_156_160;
		if (start == 1'b0 && ^(main_156_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %161 = icmp slt i32 %160, -4096*/
		main_156_161 = ($signed(main_156_160) < $signed(-32'd4096));
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %161 = icmp slt i32 %160, -4096*/
	if ((cur_state == LEGUP_F_main_BB__156_111)) begin
		main_156_161_reg <= main_156_161;
		if (start == 1'b0 && ^(main_156_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %162 = add nsw i32 %160, 8192*/
		main_156_162 = (main_156_160 + 32'd8192);
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %162 = add nsw i32 %160, 8192*/
	if ((cur_state == LEGUP_F_main_BB__156_111)) begin
		main_156_162_reg <= main_156_162;
		if (start == 1'b0 && ^(main_156_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %.30 = select i1 %161, i32 %162, i32 %160*/
		main_156_30 = (main_156_161 ? main_156_162 : main_156_160);
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %.30 = select i1 %161, i32 %162, i32 %160*/
	if ((cur_state == LEGUP_F_main_BB__156_111)) begin
		main_156_30_reg <= main_156_30;
		if (start == 1'b0 && ^(main_156_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %163 = phi i32* [ %153, %152 ], [ %140, %145 ], [ %140, %156 ]*/
	if (((cur_state == LEGUP_F_main_BB__145_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_163 = main_Get_Bitsexit22_140_reg;
	end
	/* main: %motion_vectors.exit*/
	/*   %163 = phi i32* [ %153, %152 ], [ %140, %145 ], [ %140, %156 ]*/
	else if (((cur_state == LEGUP_F_main_BB__152_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_163 = main_152_153_reg;
	end
	/* main: %motion_vectors.exit*/
	/*   %163 = phi i32* [ %153, %152 ], [ %140, %145 ], [ %140, %156 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__156_111) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_motion_vectorsexit_163 = main_Get_Bitsexit22_140_reg;
	end
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %163 = phi i32* [ %153, %152 ], [ %140, %145 ], [ %140, %156 ]*/
	if (((cur_state == LEGUP_F_main_BB__145_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_163_reg <= main_motion_vectorsexit_163;
		if (start == 1'b0 && ^(main_motion_vectorsexit_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_163_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %163 = phi i32* [ %153, %152 ], [ %140, %145 ], [ %140, %156 ]*/
	if (((cur_state == LEGUP_F_main_BB__152_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_163_reg <= main_motion_vectorsexit_163;
		if (start == 1'b0 && ^(main_motion_vectorsexit_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_163_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %163 = phi i32* [ %153, %152 ], [ %140, %145 ], [ %140, %156 ]*/
	if (((cur_state == LEGUP_F_main_BB__156_111) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_163_reg <= main_motion_vectorsexit_163;
		if (start == 1'b0 && ^(main_motion_vectorsexit_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %vec.3.i4.i.i = phi i32 [ %155, %152 ], [ %.29, %145 ], [ %.30, %156 ]*/
	if (((cur_state == LEGUP_F_main_BB__145_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec3i4ii = main_145_29;
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.3.i4.i.i = phi i32 [ %155, %152 ], [ %.29, %145 ], [ %.30, %156 ]*/
	else if (((cur_state == LEGUP_F_main_BB__152_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec3i4ii = main_152_155_reg;
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.3.i4.i.i = phi i32 [ %155, %152 ], [ %.29, %145 ], [ %.30, %156 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__156_111) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_motion_vectorsexit_vec3i4ii = main_156_30;
	end
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %vec.3.i4.i.i = phi i32 [ %155, %152 ], [ %.29, %145 ], [ %.30, %156 ]*/
	if (((cur_state == LEGUP_F_main_BB__145_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec3i4ii_reg <= main_motion_vectorsexit_vec3i4ii;
		if (start == 1'b0 && ^(main_motion_vectorsexit_vec3i4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_vec3i4ii_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.3.i4.i.i = phi i32 [ %155, %152 ], [ %.29, %145 ], [ %.30, %156 ]*/
	if (((cur_state == LEGUP_F_main_BB__152_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec3i4ii_reg <= main_motion_vectorsexit_vec3i4ii;
		if (start == 1'b0 && ^(main_motion_vectorsexit_vec3i4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_vec3i4ii_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.3.i4.i.i = phi i32 [ %155, %152 ], [ %.29, %145 ], [ %.30, %156 ]*/
	if (((cur_state == LEGUP_F_main_BB__156_111) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec3i4ii_reg <= main_motion_vectorsexit_vec3i4ii;
		if (start == 1'b0 && ^(main_motion_vectorsexit_vec3i4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_vec3i4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %164 = shl i32 %vec.3.i4.i.i, 1*/
		main_motion_vectorsexit_164 = (main_motion_vectorsexit_vec3i4ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %164 = shl i32 %vec.3.i4.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_112)) begin
		main_motion_vectorsexit_164_reg <= main_motion_vectorsexit_164;
		if (start == 1'b0 && ^(main_motion_vectorsexit_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %165 = getelementptr inbounds [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 1, i32 0, i32 0*/
if (reset) begin main_motion_vectorsexit_165 = 0; end
		main_motion_vectorsexit_165 = (1'd0 | (16 * 32'd1));
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %165 = getelementptr inbounds [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 1, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_112)) begin
		main_motion_vectorsexit_165_reg <= main_motion_vectorsexit_165;
		if (start == 1'b0 && ^(main_motion_vectorsexit_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %166 = getelementptr inbounds [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 1, i32 0, i32 1*/
if (reset) begin main_motion_vectorsexit_166 = 0; end
		main_motion_vectorsexit_166 = (1'd0 | ((16 * 32'd1) + (4 * 32'd1)));
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %166 = getelementptr inbounds [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 1, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_112)) begin
		main_motion_vectorsexit_166_reg <= main_motion_vectorsexit_166;
		if (start == 1'b0 && ^(main_motion_vectorsexit_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %167*/
	/*   %168 = phi i32 [ 0, %motion_vectors.exit ], [ %188, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_motion_vectorsexit_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_167_168 = 32'd0;
	end
	/* main: %167*/
	/*   %168 = phi i32 [ 0, %motion_vectors.exit ], [ %188, %187 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__187_124) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_167_168 = main_187_188;
	end
end
always @(posedge clk) begin
	/* main: %167*/
	/*   %168 = phi i32 [ 0, %motion_vectors.exit ], [ %188, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_motion_vectorsexit_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_167_168_reg <= main_167_168;
		if (start == 1'b0 && ^(main_167_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_168_reg"); $finish; end
	end
	/* main: %167*/
	/*   %168 = phi i32 [ 0, %motion_vectors.exit ], [ %188, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB__187_124) & (memory_controller_waitrequest == 1'd0))) begin
		main_167_168_reg <= main_167_168;
		if (start == 1'b0 && ^(main_167_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %167*/
	/*   %main_result.0 = phi i32 [ 0, %motion_vectors.exit ], [ %main_result.1, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_motion_vectorsexit_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_167_main_result0 = 32'd0;
	end
	/* main: %167*/
	/*   %main_result.0 = phi i32 [ 0, %motion_vectors.exit ], [ %main_result.1, %187 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__187_124) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_167_main_result0 = main_preheader_main_result1_reg;
	end
end
always @(posedge clk) begin
	/* main: %167*/
	/*   %main_result.0 = phi i32 [ 0, %motion_vectors.exit ], [ %main_result.1, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_motion_vectorsexit_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_167_main_result0_reg <= main_167_main_result0;
		if (start == 1'b0 && ^(main_167_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_main_result0_reg"); $finish; end
	end
	/* main: %167*/
	/*   %main_result.0 = phi i32 [ 0, %motion_vectors.exit ], [ %main_result.1, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB__187_124) & (memory_controller_waitrequest == 1'd0))) begin
		main_167_main_result0_reg <= main_167_main_result0;
		if (start == 1'b0 && ^(main_167_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_main_result0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %167*/
	/*   %exitcond11 = icmp eq i32 %168, 2*/
		main_167_exitcond11 = (main_167_168_reg == 32'd2);
end
always @(posedge clk) begin
	/* main: %167*/
	/*   %exitcond11 = icmp eq i32 %168, 2*/
	if ((cur_state == LEGUP_F_main_BB__167_115)) begin
		main_167_exitcond11_reg <= main_167_exitcond11;
		if (start == 1'b0 && ^(main_167_exitcond11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_exitcond11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %169 = phi i32 [ %186, %185 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_116) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_169 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %169 = phi i32 [ %186, %185 ], [ 0, %.preheader.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__185_123) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader_169 = main_185_186;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %169 = phi i32 [ %186, %185 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_116) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_169_reg <= main_preheader_169;
		if (start == 1'b0 && ^(main_preheader_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_169_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %169 = phi i32 [ %186, %185 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__185_123) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_169_reg <= main_preheader_169;
		if (start == 1'b0 && ^(main_preheader_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %main_result.1 = phi i32 [ %main_result.2, %185 ], [ %main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_116) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result1 = main_167_main_result0_reg;
	end
	/* main: %.preheader*/
	/*   %main_result.1 = phi i32 [ %main_result.2, %185 ], [ %main_result.0, %.preheader.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__185_123) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader_main_result1 = main_176_main_result2_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %main_result.1 = phi i32 [ %main_result.2, %185 ], [ %main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_116) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result1_reg <= main_preheader_main_result1;
		if (start == 1'b0 && ^(main_preheader_main_result1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result1_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %main_result.1 = phi i32 [ %main_result.2, %185 ], [ %main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__185_123) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result1_reg <= main_preheader_main_result1;
		if (start == 1'b0 && ^(main_preheader_main_result1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %exitcond = icmp eq i32 %169, 2*/
		main_preheader_exitcond = (main_preheader_169_reg == 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %exitcond = icmp eq i32 %169, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_117)) begin
		main_preheader_exitcond_reg <= main_preheader_exitcond;
		if (start == 1'b0 && ^(main_preheader_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %170*/
	/*   %scevgep9 = getelementptr [2 x [2 x i32]]* @outmvfs, i32 0, i32 %168, i32 %169*/
		main_170_scevgep9 = (1'd0 | ((8 * main_167_168_reg) + (4 * main_preheader_169_reg)));
end
always @(posedge clk) begin
	/* main: %170*/
	/*   %scevgep9 = getelementptr [2 x [2 x i32]]* @outmvfs, i32 0, i32 %168, i32 %169*/
	if ((cur_state == LEGUP_F_main_BB__170_118)) begin
		main_170_scevgep9_reg <= main_170_scevgep9;
		if (start == 1'b0 && ^(main_170_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_170_scevgep9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %170*/
	/*   %scevgep10 = getelementptr [2 x [2 x i32]]* %motion_vertical_field_select, i32 0, i32 %168, i32 %169*/
		main_170_scevgep10 = (1'd0 | ((8 * main_167_168_reg) + (4 * main_preheader_169_reg)));
end
always @(posedge clk) begin
	/* main: %170*/
	/*   %scevgep10 = getelementptr [2 x [2 x i32]]* %motion_vertical_field_select, i32 0, i32 %168, i32 %169*/
	if ((cur_state == LEGUP_F_main_BB__170_118)) begin
		main_170_scevgep10_reg <= main_170_scevgep10;
		if (start == 1'b0 && ^(main_170_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_170_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %170*/
	/*   %171 = load i32* %scevgep10, align 4*/
		main_170_171 = main_0_motion_vertical_field_select_out_b;
end
always @(posedge clk) begin
	/* main: %170*/
	/*   %171 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_main_BB__170_119)) begin
		main_170_171_reg <= main_170_171;
		if (start == 1'b0 && ^(main_170_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_170_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %170*/
	/*   %172 = load i32* %scevgep9, align 4*/
		main_170_172 = outmvfs_out_a;
end
always @(posedge clk) begin
	/* main: %170*/
	/*   %172 = load i32* %scevgep9, align 4*/
	if ((cur_state == LEGUP_F_main_BB__170_119)) begin
		main_170_172_reg <= main_170_172;
		if (start == 1'b0 && ^(main_170_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_170_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %170*/
	/*   %173 = icmp eq i32 %171, %172*/
		main_170_173 = (main_170_171 == main_170_172);
end
always @(posedge clk) begin
	/* main: %170*/
	/*   %173 = icmp eq i32 %171, %172*/
	if ((cur_state == LEGUP_F_main_BB__170_119)) begin
		main_170_173_reg <= main_170_173;
		if (start == 1'b0 && ^(main_170_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_170_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %170*/
	/*   %174 = zext i1 %173 to i32*/
		main_170_174 = main_170_173;
end
always @(posedge clk) begin
	/* main: %170*/
	/*   %174 = zext i1 %173 to i32*/
	if ((cur_state == LEGUP_F_main_BB__170_119)) begin
		main_170_174_reg <= main_170_174;
		if (start == 1'b0 && ^(main_170_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_170_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %170*/
	/*   %175 = add nsw i32 %main_result.1, %174*/
		main_170_175 = (main_preheader_main_result1_reg + main_170_174);
end
always @(posedge clk) begin
	/* main: %170*/
	/*   %175 = add nsw i32 %main_result.1, %174*/
	if ((cur_state == LEGUP_F_main_BB__170_119)) begin
		main_170_175_reg <= main_170_175;
		if (start == 1'b0 && ^(main_170_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_170_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %177 = phi i32 [ 0, %170 ], [ %184, %178 ]*/
	if (((cur_state == LEGUP_F_main_BB__170_119) & (memory_controller_waitrequest == 1'd0))) begin
		main_176_177 = 32'd0;
	end
	/* main: %176*/
	/*   %177 = phi i32 [ 0, %170 ], [ %184, %178 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__178_122) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_176_177 = main_178_184_reg;
	end
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %177 = phi i32 [ 0, %170 ], [ %184, %178 ]*/
	if (((cur_state == LEGUP_F_main_BB__170_119) & (memory_controller_waitrequest == 1'd0))) begin
		main_176_177_reg <= main_176_177;
		if (start == 1'b0 && ^(main_176_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_177_reg"); $finish; end
	end
	/* main: %176*/
	/*   %177 = phi i32 [ 0, %170 ], [ %184, %178 ]*/
	if (((cur_state == LEGUP_F_main_BB__178_122) & (memory_controller_waitrequest == 1'd0))) begin
		main_176_177_reg <= main_176_177;
		if (start == 1'b0 && ^(main_176_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %main_result.2 = phi i32 [ %175, %170 ], [ %183, %178 ]*/
	if (((cur_state == LEGUP_F_main_BB__170_119) & (memory_controller_waitrequest == 1'd0))) begin
		main_176_main_result2 = main_170_175;
	end
	/* main: %176*/
	/*   %main_result.2 = phi i32 [ %175, %170 ], [ %183, %178 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__178_122) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_176_main_result2 = main_178_183;
	end
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %main_result.2 = phi i32 [ %175, %170 ], [ %183, %178 ]*/
	if (((cur_state == LEGUP_F_main_BB__170_119) & (memory_controller_waitrequest == 1'd0))) begin
		main_176_main_result2_reg <= main_176_main_result2;
		if (start == 1'b0 && ^(main_176_main_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_main_result2_reg"); $finish; end
	end
	/* main: %176*/
	/*   %main_result.2 = phi i32 [ %175, %170 ], [ %183, %178 ]*/
	if (((cur_state == LEGUP_F_main_BB__178_122) & (memory_controller_waitrequest == 1'd0))) begin
		main_176_main_result2_reg <= main_176_main_result2;
		if (start == 1'b0 && ^(main_176_main_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_main_result2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %176*/
	/*   %exitcond5 = icmp eq i32 %177, 2*/
		main_176_exitcond5 = (main_176_177_reg == 32'd2);
end
always @(posedge clk) begin
	/* main: %176*/
	/*   %exitcond5 = icmp eq i32 %177, 2*/
	if ((cur_state == LEGUP_F_main_BB__176_120)) begin
		main_176_exitcond5_reg <= main_176_exitcond5;
		if (start == 1'b0 && ^(main_176_exitcond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_176_exitcond5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %178*/
	/*   %scevgep6 = getelementptr [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 %168, i32 %169, i32 %177*/
		main_178_scevgep6 = (1'd0 | (((16 * main_167_168_reg) + (8 * main_preheader_169_reg)) + (4 * main_176_177_reg)));
end
always @(posedge clk) begin
	/* main: %178*/
	/*   %scevgep6 = getelementptr [2 x [2 x [2 x i32]]]* %PMV, i32 0, i32 %168, i32 %169, i32 %177*/
	if ((cur_state == LEGUP_F_main_BB__178_121)) begin
		main_178_scevgep6_reg <= main_178_scevgep6;
		if (start == 1'b0 && ^(main_178_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %178*/
	/*   %scevgep = getelementptr [2 x [2 x [2 x i32]]]* @outPMV, i32 0, i32 %168, i32 %169, i32 %177*/
		main_178_scevgep = (1'd0 | (((16 * main_167_168_reg) + (8 * main_preheader_169_reg)) + (4 * main_176_177_reg)));
end
always @(posedge clk) begin
	/* main: %178*/
	/*   %scevgep = getelementptr [2 x [2 x [2 x i32]]]* @outPMV, i32 0, i32 %168, i32 %169, i32 %177*/
	if ((cur_state == LEGUP_F_main_BB__178_121)) begin
		main_178_scevgep_reg <= main_178_scevgep;
		if (start == 1'b0 && ^(main_178_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %178*/
	/*   %179 = load i32* %scevgep6, align 4*/
		main_178_179 = main_0_PMV_out_b;
end
always @(posedge clk) begin
	/* main: %178*/
	/*   %179 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__178_122)) begin
		main_178_179_reg <= main_178_179;
		if (start == 1'b0 && ^(main_178_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %178*/
	/*   %180 = load i32* %scevgep, align 4*/
		main_178_180 = outPMV_out_a;
end
always @(posedge clk) begin
	/* main: %178*/
	/*   %180 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__178_122)) begin
		main_178_180_reg <= main_178_180;
		if (start == 1'b0 && ^(main_178_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %178*/
	/*   %181 = icmp eq i32 %179, %180*/
		main_178_181 = (main_178_179 == main_178_180);
end
always @(posedge clk) begin
	/* main: %178*/
	/*   %181 = icmp eq i32 %179, %180*/
	if ((cur_state == LEGUP_F_main_BB__178_122)) begin
		main_178_181_reg <= main_178_181;
		if (start == 1'b0 && ^(main_178_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %178*/
	/*   %182 = zext i1 %181 to i32*/
		main_178_182 = main_178_181;
end
always @(posedge clk) begin
	/* main: %178*/
	/*   %182 = zext i1 %181 to i32*/
	if ((cur_state == LEGUP_F_main_BB__178_122)) begin
		main_178_182_reg <= main_178_182;
		if (start == 1'b0 && ^(main_178_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %178*/
	/*   %183 = add nsw i32 %main_result.2, %182*/
		main_178_183 = (main_176_main_result2_reg + main_178_182);
end
always @(posedge clk) begin
	/* main: %178*/
	/*   %183 = add nsw i32 %main_result.2, %182*/
	if ((cur_state == LEGUP_F_main_BB__178_122)) begin
		main_178_183_reg <= main_178_183;
		if (start == 1'b0 && ^(main_178_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %178*/
	/*   %184 = add nsw i32 %177, 1*/
		main_178_184 = (main_176_177_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %178*/
	/*   %184 = add nsw i32 %177, 1*/
	if ((cur_state == LEGUP_F_main_BB__178_121)) begin
		main_178_184_reg <= main_178_184;
		if (start == 1'b0 && ^(main_178_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_178_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %185*/
	/*   %186 = add nsw i32 %169, 1*/
		main_185_186 = (main_preheader_169_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %185*/
	/*   %186 = add nsw i32 %169, 1*/
	if ((cur_state == LEGUP_F_main_BB__185_123)) begin
		main_185_186_reg <= main_185_186;
		if (start == 1'b0 && ^(main_185_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_185_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %188 = add nsw i32 %168, 1*/
		main_187_188 = (main_167_168_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %188 = add nsw i32 %168, 1*/
	if ((cur_state == LEGUP_F_main_BB__187_124)) begin
		main_187_188_reg <= main_187_188;
		if (start == 1'b0 && ^(main_187_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %189*/
	/*   %191 = icmp eq i32 %main_result.0, 12*/
		main_189_191 = (main_167_main_result0_reg == 32'd12);
end
always @(posedge clk) begin
	/* main: %189*/
	/*   %191 = icmp eq i32 %main_result.0, 12*/
	if ((cur_state == LEGUP_F_main_BB__189_125)) begin
		main_189_191_reg <= main_189_191;
		if (start == 1'b0 && ^(main_189_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_189_191_reg"); $finish; end
	end
end
always @(*) begin
	inPMV_address_a = 1'd0;
	/* main: %8*/
	/*   %9 = load i32* %scevgep44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_9)) begin
		inPMV_address_a = (main_8_scevgep44 >>> 3'd2);
	end
end
always @(*) begin
	inPMV_write_enable_a = 1'd0;
	/* main: %8*/
	/*   %9 = load i32* %scevgep44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_9)) begin
		inPMV_write_enable_a = 1'd0;
	end
end
always @(*) begin
	inmvfs_address_a = 1'd0;
	/* main: %4*/
	/*   %5 = load i32* %scevgep49, align 4*/
	if ((cur_state == LEGUP_F_main_BB__4_5)) begin
		inmvfs_address_a = (main_4_scevgep49 >>> 3'd2);
	end
end
always @(*) begin
	inmvfs_write_enable_a = 1'd0;
	/* main: %4*/
	/*   %5 = load i32* %scevgep49, align 4*/
	if ((cur_state == LEGUP_F_main_BB__4_5)) begin
		inmvfs_write_enable_a = 1'd0;
	end
end
always @(*) begin
	outPMV_address_a = 1'd0;
	/* main: %178*/
	/*   %180 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__178_121)) begin
		outPMV_address_a = (main_178_scevgep >>> 3'd2);
	end
end
always @(*) begin
	outPMV_write_enable_a = 1'd0;
	/* main: %178*/
	/*   %180 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__178_121)) begin
		outPMV_write_enable_a = 1'd0;
	end
end
always @(*) begin
	outmvfs_address_a = 1'd0;
	/* main: %170*/
	/*   %172 = load i32* %scevgep9, align 4*/
	if ((cur_state == LEGUP_F_main_BB__170_118)) begin
		outmvfs_address_a = (main_170_scevgep9 >>> 3'd2);
	end
end
always @(*) begin
	outmvfs_write_enable_a = 1'd0;
	/* main: %170*/
	/*   %172 = load i32* %scevgep9, align 4*/
	if ((cur_state == LEGUP_F_main_BB__170_118)) begin
		outmvfs_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_PMV_address_a = 1'd0;
	/* main: %8*/
	/*   store i32 %9, i32* %scevgep43, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_10)) begin
		main_0_PMV_address_a = (main_8_scevgep43_reg >>> 3'd2);
	end
	/* main: %Get_Bits.exit40*/
	/*   %76 = load i32* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit40_64)) begin
		main_0_PMV_address_a = (main_Get_Bitsexit_31_reg >>> 3'd2);
	end
	/* main: %86*/
	/*   %87 = load i32* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB__86_67)) begin
		main_0_PMV_address_a = (main_Get_Bitsexit_31_reg >>> 3'd2);
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   store i32 %95, i32* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_70)) begin
		main_0_PMV_address_a = (main_Get_Bitsexit_31_reg >>> 3'd2);
	end
	/* main: %Get_Bits.exit22*/
	/*   %141 = load i32* %140, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit22_104)) begin
		main_0_PMV_address_a = (main_Get_Bitsexit22_140 >>> 3'd2);
	end
	/* main: %Get_Bits.exit22*/
	/*   store i32 %142, i32* %140, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit22_105)) begin
		main_0_PMV_address_a = (main_Get_Bitsexit22_140_reg >>> 3'd2);
	end
	/* main: %motion_vectors.exit*/
	/*   store i32 %95, i32* %165, align 4*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_113)) begin
		main_0_PMV_address_a = (main_motion_vectorsexit_165_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_PMV_write_enable_a = 1'd0;
	/* main: %8*/
	/*   store i32 %9, i32* %scevgep43, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_10)) begin
		main_0_PMV_write_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit40*/
	/*   %76 = load i32* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit40_64)) begin
		main_0_PMV_write_enable_a = 1'd0;
	end
	/* main: %86*/
	/*   %87 = load i32* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB__86_67)) begin
		main_0_PMV_write_enable_a = 1'd0;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   store i32 %95, i32* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_70)) begin
		main_0_PMV_write_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit22*/
	/*   %141 = load i32* %140, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit22_104)) begin
		main_0_PMV_write_enable_a = 1'd0;
	end
	/* main: %Get_Bits.exit22*/
	/*   store i32 %142, i32* %140, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit22_105)) begin
		main_0_PMV_write_enable_a = 1'd1;
	end
	/* main: %motion_vectors.exit*/
	/*   store i32 %95, i32* %165, align 4*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_113)) begin
		main_0_PMV_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_0_PMV_in_a = 1'd0;
	/* main: %8*/
	/*   store i32 %9, i32* %scevgep43, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_10)) begin
		main_0_PMV_in_a = main_8_9;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   store i32 %95, i32* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_70)) begin
		main_0_PMV_in_a = main_decode_motion_vectorexitii_95_reg;
	end
	/* main: %Get_Bits.exit22*/
	/*   store i32 %142, i32* %140, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit22_105)) begin
		main_0_PMV_in_a = main_Get_Bitsexit22_142;
	end
	/* main: %motion_vectors.exit*/
	/*   store i32 %95, i32* %165, align 4*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_113)) begin
		main_0_PMV_in_a = main_decode_motion_vectorexitii_95_reg;
	end
end
always @(*) begin
	main_0_PMV_address_b = 1'd0;
	/* main: %152*/
	/*   %154 = load i32* %153, align 4*/
	if ((cur_state == LEGUP_F_main_BB__152_108)) begin
		main_0_PMV_address_b = (main_152_153 >>> 3'd2);
	end
	/* main: %152*/
	/*   store i32 %155, i32* %153, align 4*/
	if ((cur_state == LEGUP_F_main_BB__152_109)) begin
		main_0_PMV_address_b = (main_152_153_reg >>> 3'd2);
	end
	/* main: %motion_vectors.exit*/
	/*   store i32 %164, i32* %163, align 4*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_112)) begin
		main_0_PMV_address_b = (main_motion_vectorsexit_163_reg >>> 3'd2);
	end
	/* main: %motion_vectors.exit*/
	/*   store i32 %164, i32* %166, align 4*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_113)) begin
		main_0_PMV_address_b = (main_motion_vectorsexit_166_reg >>> 3'd2);
	end
	/* main: %178*/
	/*   %179 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__178_121)) begin
		main_0_PMV_address_b = (main_178_scevgep6 >>> 3'd2);
	end
end
always @(*) begin
	main_0_PMV_write_enable_b = 1'd0;
	/* main: %152*/
	/*   %154 = load i32* %153, align 4*/
	if ((cur_state == LEGUP_F_main_BB__152_108)) begin
		main_0_PMV_write_enable_b = 1'd0;
	end
	/* main: %152*/
	/*   store i32 %155, i32* %153, align 4*/
	if ((cur_state == LEGUP_F_main_BB__152_109)) begin
		main_0_PMV_write_enable_b = 1'd1;
	end
	/* main: %motion_vectors.exit*/
	/*   store i32 %164, i32* %163, align 4*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_112)) begin
		main_0_PMV_write_enable_b = 1'd1;
	end
	/* main: %motion_vectors.exit*/
	/*   store i32 %164, i32* %166, align 4*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_113)) begin
		main_0_PMV_write_enable_b = 1'd1;
	end
	/* main: %178*/
	/*   %179 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__178_121)) begin
		main_0_PMV_write_enable_b = 1'd0;
	end
end
always @(*) begin
	main_0_PMV_in_b = 1'd0;
	/* main: %152*/
	/*   store i32 %155, i32* %153, align 4*/
	if ((cur_state == LEGUP_F_main_BB__152_109)) begin
		main_0_PMV_in_b = main_152_155;
	end
	/* main: %motion_vectors.exit*/
	/*   store i32 %164, i32* %163, align 4*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_112)) begin
		main_0_PMV_in_b = main_motion_vectorsexit_164;
	end
	/* main: %motion_vectors.exit*/
	/*   store i32 %164, i32* %166, align 4*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_113)) begin
		main_0_PMV_in_b = main_motion_vectorsexit_164_reg;
	end
end
always @(*) begin
	main_0_motion_vertical_field_select_address_a = 1'd0;
	/* main: %4*/
	/*   store i32 %5, i32* %scevgep48, align 4*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_0_motion_vertical_field_select_address_a = (main_4_scevgep48_reg >>> 3'd2);
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 %27, i32* %29, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		main_0_motion_vertical_field_select_address_a = (main_Get_Bitsexit_29 >>> 3'd2);
	end
end
always @(*) begin
	main_0_motion_vertical_field_select_write_enable_a = 1'd0;
	/* main: %4*/
	/*   store i32 %5, i32* %scevgep48, align 4*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_0_motion_vertical_field_select_write_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 %27, i32* %29, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		main_0_motion_vertical_field_select_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_0_motion_vertical_field_select_in_a = 1'd0;
	/* main: %4*/
	/*   store i32 %5, i32* %scevgep48, align 4*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_0_motion_vertical_field_select_in_a = main_4_5;
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 %27, i32* %29, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		main_0_motion_vertical_field_select_in_a = main_Get_Bitsexit_27;
	end
end
always @(*) begin
	main_0_motion_vertical_field_select_address_b = 1'd0;
	/* main: %Get_Bits.exit*/
	/*   store i32 %27, i32* %30, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		main_0_motion_vertical_field_select_address_b = (main_Get_Bitsexit_30 >>> 3'd2);
	end
	/* main: %170*/
	/*   %171 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_main_BB__170_118)) begin
		main_0_motion_vertical_field_select_address_b = (main_170_scevgep10 >>> 3'd2);
	end
end
always @(*) begin
	main_0_motion_vertical_field_select_write_enable_b = 1'd0;
	/* main: %Get_Bits.exit*/
	/*   store i32 %27, i32* %30, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		main_0_motion_vertical_field_select_write_enable_b = 1'd1;
	end
	/* main: %170*/
	/*   %171 = load i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_main_BB__170_118)) begin
		main_0_motion_vertical_field_select_write_enable_b = 1'd0;
	end
end
always @(*) begin
	main_0_motion_vertical_field_select_in_b = 1'd0;
	/* main: %Get_Bits.exit*/
	/*   store i32 %27, i32* %30, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		main_0_motion_vertical_field_select_in_b = main_Get_Bitsexit_27;
	end
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_31)) begin
		Get_motion_code_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		Get_motion_code_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_start"); $finish; end
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_71)) begin
		Get_motion_code_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_72)) begin
		Get_motion_code_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_start"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		Get_motion_code_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	else /* if ((cur_state == LEGUP_function_call_72)) */ begin
		Get_motion_code_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		Get_motion_code_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	else /* if ((cur_state == LEGUP_function_call_72)) */ begin
		Get_motion_code_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	Get_motion_code_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	Get_motion_code_finish_final = Get_motion_code_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_Get_Bitsexit_31))) begin
		Get_motion_code_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_finish_reg"); $finish; end
	end
	if (Get_motion_code_finish) begin
		Get_motion_code_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_71))) begin
		Get_motion_code_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_finish_reg"); $finish; end
	end
	if (Get_motion_code_finish) begin
		Get_motion_code_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_Get_Bitsexit_31))) begin
		Get_motion_code_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_return_val_reg"); $finish; end
	end
	if (Get_motion_code_finish) begin
		Get_motion_code_return_val_reg <= Get_motion_code_return_val;
		if (start == 1'b0 && ^(Get_motion_code_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_71))) begin
		Get_motion_code_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_return_val_reg"); $finish; end
	end
	if (Get_motion_code_finish) begin
		Get_motion_code_return_val_reg <= Get_motion_code_return_val;
		if (start == 1'b0 && ^(Get_motion_code_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		legup_function_call = 1'd1;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	lpm_mult_main_preheader4_17_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader4*/
	/*   %17 = mul i32 %indvar39, -8*/
	if ((lpm_mult_main_preheader4_17_en == 1'd1)) begin
		main_preheader4_17_stage0_reg <= (main_preheader4_indvar39_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi24_54_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i24*/
	/*   %54 = mul i32 %indvar24, -8*/
	if ((lpm_mult_main_preheaderi24_54_en == 1'd1)) begin
		main_preheaderi24_54_stage0_reg <= (main_preheaderi24_indvar24_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_main_preheader2i27_64_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader2.i27*/
	/*   %64 = mul i32 %indvar32, -8*/
	if ((lpm_mult_main_preheader2i27_64_en == 1'd1)) begin
		main_preheader2i27_64_stage0_reg <= (main_preheader2i27_indvar32_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_main_preheaderi6_118_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i6*/
	/*   %118 = mul i32 %indvar, -8*/
	if ((lpm_mult_main_preheaderi6_118_en == 1'd1)) begin
		main_preheaderi6_118_stage0_reg <= (main_preheaderi6_indvar_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_main_preheader2i9_128_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.preheader2.i9*/
	/*   %128 = mul i32 %indvar22, -8*/
	if ((lpm_mult_main_preheader2i9_128_en == 1'd1)) begin
		main_preheader2i9_128_stage0_reg <= (main_preheader2i9_indvar22_reg * -32'd8);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %196*/
	/*   ret i32 %main_result.0*/
	if ((cur_state == LEGUP_F_main_BB__196_128)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_a = Get_motion_code_memory_controller_enable_a;
	end
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_a = Get_motion_code_memory_controller_enable_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_enable_a = Get_motion_code_memory_controller_enable_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_enable_a = Get_motion_code_memory_controller_enable_a;
	end
	/* main: %15*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %15*/
	/*   store i32 0, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %20*/
	/*   %21 = load i8* %p2.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_main_BB__20_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %23 = load i8* %.pr11, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit*/
	/*   store i8* %22, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 31, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %34*/
	/*   %35 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %34*/
	/*   store i32 %38, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %67*/
	/*   %68 = load i8* %p2.0.i.i.i.i29, align 1*/
	if ((cur_state == LEGUP_F_main_BB__67_50)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %70 = load i8* %.pr9.i32, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit3.i36*/
	/*   store i8* %storemerge1.i37, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit3.i36*/
	/*   store i32 %Incnt.2.i.i39, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_62)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %98*/
	/*   %99 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_74)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %104*/
	/*   %105 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__104_78)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i6*/
	/*   %120 = load i8* %scevgep16, align 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_83)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %131*/
	/*   store i8 %132, i8* %p1.0.i.i.i.i10, align 1*/
	if ((cur_state == LEGUP_F_main_BB__131_92)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit3.i18*/
	/*   store i8* %storemerge1.i19, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_101)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_a;
	end
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_a;
	end
	/* main: %15*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %15*/
	/*   store i32 0, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_address_a = `TAG_g_ld_Incnt_a;
	end
	/* main: %20*/
	/*   %21 = load i8* %p2.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_main_BB__20_21)) begin
		memory_controller_address_a = main_20_p20iiii;
	end
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %23 = load i8* %.pr11, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_26)) begin
		memory_controller_address_a = main_Fill_Bufferexitii_pr11_reg;
	end
	/* main: %Get_Bits.exit*/
	/*   store i8* %22, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 31, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_30)) begin
		memory_controller_address_a = `TAG_g_ld_Incnt_a;
	end
	/* main: %34*/
	/*   %35 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_34)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* main: %34*/
	/*   store i32 %38, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_36)) begin
		memory_controller_address_a = `TAG_g_ld_Incnt_a;
	end
	/* main: %67*/
	/*   %68 = load i8* %p2.0.i.i.i.i29, align 1*/
	if ((cur_state == LEGUP_F_main_BB__67_50)) begin
		memory_controller_address_a = main_67_p20iiii29;
	end
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %70 = load i8* %.pr9.i32, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_55)) begin
		memory_controller_address_a = main_Fill_Bufferexitii33_pr9i32_reg;
	end
	/* main: %.loopexit3.i36*/
	/*   store i8* %storemerge1.i37, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_61)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.loopexit3.i36*/
	/*   store i32 %Incnt.2.i.i39, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_62)) begin
		memory_controller_address_a = `TAG_g_ld_Incnt_a;
	end
	/* main: %98*/
	/*   %99 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_74)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* main: %104*/
	/*   %105 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__104_78)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.preheader.i6*/
	/*   %120 = load i8* %scevgep16, align 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_83)) begin
		memory_controller_address_a = main_preheaderi6_scevgep16;
	end
	/* main: %131*/
	/*   store i8 %132, i8* %p1.0.i.i.i.i10, align 1*/
	if ((cur_state == LEGUP_F_main_BB__131_92)) begin
		memory_controller_address_a = main_131_p10iiii10_reg;
	end
	/* main: %.loopexit3.i18*/
	/*   store i8* %storemerge1.i19, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_101)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_a = Get_motion_code_memory_controller_write_enable_a;
	end
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_a = Get_motion_code_memory_controller_write_enable_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_write_enable_a = Get_motion_code_memory_controller_write_enable_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_write_enable_a = Get_motion_code_memory_controller_write_enable_a;
	end
	/* main: %15*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %15*/
	/*   store i32 0, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %20*/
	/*   %21 = load i8* %p2.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_main_BB__20_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %23 = load i8* %.pr11, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_26)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %Get_Bits.exit*/
	/*   store i8* %22, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 31, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_30)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %34*/
	/*   %35 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_34)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %34*/
	/*   store i32 %38, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_36)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %67*/
	/*   %68 = load i8* %p2.0.i.i.i.i29, align 1*/
	if ((cur_state == LEGUP_F_main_BB__67_50)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %70 = load i8* %.pr9.i32, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.loopexit3.i36*/
	/*   store i8* %storemerge1.i37, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_61)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.loopexit3.i36*/
	/*   store i32 %Incnt.2.i.i39, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_62)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %98*/
	/*   %99 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_74)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %104*/
	/*   %105 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__104_78)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i6*/
	/*   %120 = load i8* %scevgep16, align 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_83)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %131*/
	/*   store i8 %132, i8* %p1.0.i.i.i.i10, align 1*/
	if ((cur_state == LEGUP_F_main_BB__131_92)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.loopexit3.i18*/
	/*   store i8* %storemerge1.i19, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_101)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_a;
	end
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_a;
	end
	/* main: %15*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		memory_controller_in_a = (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1));
	end
	/* main: %15*/
	/*   store i32 0, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %Get_Bits.exit*/
	/*   store i8* %22, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		memory_controller_in_a = main_Fill_Bufferexitii_22_reg;
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 31, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_30)) begin
		memory_controller_in_a = 32'd31;
	end
	/* main: %34*/
	/*   store i32 %38, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_36)) begin
		memory_controller_in_a = main_34_38;
	end
	/* main: %.loopexit3.i36*/
	/*   store i8* %storemerge1.i37, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_61)) begin
		memory_controller_in_a = main_loopexit3i36_storemerge1i37_reg;
	end
	/* main: %.loopexit3.i36*/
	/*   store i32 %Incnt.2.i.i39, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_62)) begin
		memory_controller_in_a = main_loopexit3i36_Incnt2ii39_reg;
	end
	/* main: %131*/
	/*   store i8 %132, i8* %p1.0.i.i.i.i10, align 1*/
	if ((cur_state == LEGUP_F_main_BB__131_92)) begin
		memory_controller_in_a = main_131_132;
	end
	/* main: %.loopexit3.i18*/
	/*   store i8* %storemerge1.i19, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_101)) begin
		memory_controller_in_a = main_loopexit3i18_storemerge1i19_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_a[1:0] = Get_motion_code_memory_controller_size_a;
	end
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_a[1:0] = Get_motion_code_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_size_a[1:0] = Get_motion_code_memory_controller_size_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_size_a[1:0] = Get_motion_code_memory_controller_size_a;
	end
	/* main: %15*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %15*/
	/*   store i32 0, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %20*/
	/*   %21 = load i8* %p2.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_main_BB__20_21)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %23 = load i8* %.pr11, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_26)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %Get_Bits.exit*/
	/*   store i8* %22, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 31, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %34*/
	/*   %35 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %34*/
	/*   store i32 %38, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %67*/
	/*   %68 = load i8* %p2.0.i.i.i.i29, align 1*/
	if ((cur_state == LEGUP_F_main_BB__67_50)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %Fill_Buffer.exit.i.i33*/
	/*   %70 = load i8* %.pr9.i32, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii33_55)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.loopexit3.i36*/
	/*   store i8* %storemerge1.i37, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_61)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.loopexit3.i36*/
	/*   store i32 %Incnt.2.i.i39, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_62)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %98*/
	/*   %99 = load i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_74)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %104*/
	/*   %105 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__104_78)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i6*/
	/*   %120 = load i8* %scevgep16, align 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi6_83)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %131*/
	/*   store i8 %132, i8* %p1.0.i.i.i.i10, align 1*/
	if ((cur_state == LEGUP_F_main_BB__131_92)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.loopexit3.i18*/
	/*   store i8* %storemerge1.i19, i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_101)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_b = Get_motion_code_memory_controller_enable_b;
	end
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_b = Get_motion_code_memory_controller_enable_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_enable_b = Get_motion_code_memory_controller_enable_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_enable_b = Get_motion_code_memory_controller_enable_b;
	end
	/* main: %15*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %20*/
	/*   store i8 %21, i8* %p1.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_main_BB__20_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 %28, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %34*/
	/*   %37 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %40*/
	/*   %41 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__40_38)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i24*/
	/*   %56 = load i8* %scevgep26, align 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %67*/
	/*   store i8 %68, i8* %p1.0.i.i.i.i28, align 1*/
	if ((cur_state == LEGUP_F_main_BB__67_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit3.i36*/
	/*   store i32 %storemerge.i38, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_61)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %98*/
	/*   %101 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_74)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %98*/
	/*   store i32 %102, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_76)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %131*/
	/*   %132 = load i8* %p2.0.i.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_main_BB__131_90)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %134 = load i8* %.pr9.i14, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_95)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit3.i18*/
	/*   store i32 %storemerge.i20, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_101)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit3.i18*/
	/*   store i32 %Incnt.2.i.i21, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_102)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_b;
	end
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_b;
	end
	/* main: %15*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* main: %20*/
	/*   store i8 %21, i8* %p1.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_main_BB__20_23)) begin
		memory_controller_address_b = main_20_p10iiii_reg;
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 %28, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* main: %34*/
	/*   %37 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_34)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %40*/
	/*   %41 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__40_38)) begin
		memory_controller_address_b = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.preheader.i24*/
	/*   %56 = load i8* %scevgep26, align 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_43)) begin
		memory_controller_address_b = main_preheaderi24_scevgep26;
	end
	/* main: %67*/
	/*   store i8 %68, i8* %p1.0.i.i.i.i28, align 1*/
	if ((cur_state == LEGUP_F_main_BB__67_52)) begin
		memory_controller_address_b = main_67_p10iiii28_reg;
	end
	/* main: %.loopexit3.i36*/
	/*   store i32 %storemerge.i38, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_61)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* main: %98*/
	/*   %101 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_74)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %98*/
	/*   store i32 %102, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_76)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %131*/
	/*   %132 = load i8* %p2.0.i.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_main_BB__131_90)) begin
		memory_controller_address_b = main_131_p20iiii11;
	end
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %134 = load i8* %.pr9.i14, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_95)) begin
		memory_controller_address_b = main_Fill_Bufferexitii15_pr9i14_reg;
	end
	/* main: %.loopexit3.i18*/
	/*   store i32 %storemerge.i20, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_101)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* main: %.loopexit3.i18*/
	/*   store i32 %Incnt.2.i.i21, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_102)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_b = Get_motion_code_memory_controller_write_enable_b;
	end
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_b = Get_motion_code_memory_controller_write_enable_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_write_enable_b = Get_motion_code_memory_controller_write_enable_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_write_enable_b = Get_motion_code_memory_controller_write_enable_b;
	end
	/* main: %15*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %20*/
	/*   store i8 %21, i8* %p1.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_main_BB__20_23)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 %28, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %34*/
	/*   %37 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_34)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %40*/
	/*   %41 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__40_38)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i24*/
	/*   %56 = load i8* %scevgep26, align 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_43)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %67*/
	/*   store i8 %68, i8* %p1.0.i.i.i.i28, align 1*/
	if ((cur_state == LEGUP_F_main_BB__67_52)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit3.i36*/
	/*   store i32 %storemerge.i38, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_61)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %98*/
	/*   %101 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_74)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %98*/
	/*   store i32 %102, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_76)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %131*/
	/*   %132 = load i8* %p2.0.i.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_main_BB__131_90)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %134 = load i8* %.pr9.i14, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_95)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.loopexit3.i18*/
	/*   store i32 %storemerge.i20, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_101)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit3.i18*/
	/*   store i32 %Incnt.2.i.i21, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_102)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_b;
	end
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_b;
	end
	/* main: %15*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		memory_controller_in_b = 32'd68157440;
	end
	/* main: %20*/
	/*   store i8 %21, i8* %p1.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_main_BB__20_23)) begin
		memory_controller_in_b = main_20_21;
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 %28, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		memory_controller_in_b = main_Get_Bitsexit_28;
	end
	/* main: %67*/
	/*   store i8 %68, i8* %p1.0.i.i.i.i28, align 1*/
	if ((cur_state == LEGUP_F_main_BB__67_52)) begin
		memory_controller_in_b = main_67_68;
	end
	/* main: %.loopexit3.i36*/
	/*   store i32 %storemerge.i38, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_61)) begin
		memory_controller_in_b = main_loopexit3i36_storemergei38_reg;
	end
	/* main: %98*/
	/*   store i32 %102, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_76)) begin
		memory_controller_in_b = main_98_102;
	end
	/* main: %.loopexit3.i18*/
	/*   store i32 %storemerge.i20, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_101)) begin
		memory_controller_in_b = main_loopexit3i18_storemergei20_reg;
	end
	/* main: %.loopexit3.i18*/
	/*   store i32 %Incnt.2.i.i21, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_102)) begin
		memory_controller_in_b = main_loopexit3i18_Incnt2ii21_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_b[1:0] = Get_motion_code_memory_controller_size_b;
	end
	/* main: %Get_Bits.exit*/
	/*   %32 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_b[1:0] = Get_motion_code_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_size_b[1:0] = Get_motion_code_memory_controller_size_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %96 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_72)) begin
		memory_controller_size_b[1:0] = Get_motion_code_memory_controller_size_b;
	end
	/* main: %15*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %20*/
	/*   store i8 %21, i8* %p1.0.i.i.i.i, align 1*/
	if ((cur_state == LEGUP_F_main_BB__20_23)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %Get_Bits.exit*/
	/*   store i32 %28, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %34*/
	/*   %37 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__34_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %40*/
	/*   %41 = load i8** @ld_Rdptr, align 4*/
	if ((cur_state == LEGUP_F_main_BB__40_38)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i24*/
	/*   %56 = load i8* %scevgep26, align 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi24_43)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %67*/
	/*   store i8 %68, i8* %p1.0.i.i.i.i28, align 1*/
	if ((cur_state == LEGUP_F_main_BB__67_52)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %.loopexit3.i36*/
	/*   store i32 %storemerge.i38, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i36_61)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %98*/
	/*   %101 = load i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_74)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %98*/
	/*   store i32 %102, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB__98_76)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %131*/
	/*   %132 = load i8* %p2.0.i.i.i.i11, align 1*/
	if ((cur_state == LEGUP_F_main_BB__131_90)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %Fill_Buffer.exit.i.i15*/
	/*   %134 = load i8* %.pr9.i14, align 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii15_95)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %.loopexit3.i18*/
	/*   store i32 %storemerge.i20, i32* @ld_Bfr, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_101)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit3.i18*/
	/*   store i32 %Incnt.2.i.i21, i32* @ld_Incnt, align 4*/
	if ((cur_state == LEGUP_F_main_BB_loopexit3i18_102)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %196*/
	/*   ret i32 %main_result.0*/
	if ((cur_state == LEGUP_F_main_BB__196_128)) begin
		return_val <= main_167_main_result0_reg;
		if (start == 1'b0 && ^(main_167_main_result0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
