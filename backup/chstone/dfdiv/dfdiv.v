//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 17:14:18 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 4
`define MEMORY_CONTROLLER_TAG_SIZE 9

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__1_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__1_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__15_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__24_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__26_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__35_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__37_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__40_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__41_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__50_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__52_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__56_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__60_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__62_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__66_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__72_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB__83_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB__87_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB__91_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB__93_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB__99_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB__110_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB__121_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB__124_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB__127_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB__131_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB__131_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB__131_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB__131_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB__131_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB__131_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB__131_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB__131_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB__131_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB__131_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB__131_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB__131_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB__131_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB__131_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB__131_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB__131_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB__131_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB__131_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB__131_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB__131_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB__131_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB__131_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB__131_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB__131_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB__131_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB__131_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB__131_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB__131_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB__131_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB__131_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB__131_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB__131_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB__131_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB__131_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB__131_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB__131_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB__131_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB__131_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__131_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB__131_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB__131_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB__131_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB__131_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB__131_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB__131_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB__131_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB__131_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB__131_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB__131_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB__131_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB__131_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB__131_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB__131_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB__131_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB__131_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB__131_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB__131_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB__131_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB__131_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB__131_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB__131_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB__131_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB__131_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB__131_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB__131_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB__134_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB__134_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB_lrphii_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB__148_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB__148_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB__crit_edgeiiloopexit_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB__crit_edgeii_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB__160_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB__160_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB__160_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB__160_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB__160_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB__160_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB__160_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB__160_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB__160_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB__160_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB__160_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB__160_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB__160_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB__160_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB__160_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB__160_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__160_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__160_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB__160_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB__160_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB__160_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB__160_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB__160_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB__160_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB__160_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB__160_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB__160_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB__160_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB__160_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB__160_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB__160_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB__160_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB__160_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB__160_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB__160_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB__160_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB__160_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB__160_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB__160_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB__160_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB__160_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB__160_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB__160_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB__160_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB__160_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB__160_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB__160_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB__160_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB__160_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB__160_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB__160_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB__160_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB__160_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB__160_164 = 8'd164;
parameter [7:0] LEGUP_F_main_BB__160_165 = 8'd165;
parameter [7:0] LEGUP_F_main_BB__160_166 = 8'd166;
parameter [7:0] LEGUP_F_main_BB__160_167 = 8'd167;
parameter [7:0] LEGUP_F_main_BB__160_168 = 8'd168;
parameter [7:0] LEGUP_F_main_BB__160_169 = 8'd169;
parameter [7:0] LEGUP_F_main_BB__160_170 = 8'd170;
parameter [7:0] LEGUP_F_main_BB__160_171 = 8'd171;
parameter [7:0] LEGUP_F_main_BB__160_172 = 8'd172;
parameter [7:0] LEGUP_F_main_BB__160_173 = 8'd173;
parameter [7:0] LEGUP_F_main_BB__160_174 = 8'd174;
parameter [7:0] LEGUP_F_main_BB__160_175 = 8'd175;
parameter [7:0] LEGUP_F_main_BB_estimateDiv128To64exiti_176 = 8'd176;
parameter [7:0] LEGUP_F_main_BB__166_177 = 8'd177;
parameter [7:0] LEGUP_F_main_BB__166_178 = 8'd178;
parameter [7:0] LEGUP_F_main_BB__166_179 = 8'd179;
parameter [7:0] LEGUP_F_main_BB__166_180 = 8'd180;
parameter [7:0] LEGUP_F_main_BB_lrphipreheader_181 = 8'd181;
parameter [7:0] LEGUP_F_main_BB_lrphi_182 = 8'd182;
parameter [7:0] LEGUP_F_main_BB_lrphi_183 = 8'd183;
parameter [7:0] LEGUP_F_main_BB__crit_edgeiloopexit_184 = 8'd184;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_185 = 8'd185;
parameter [7:0] LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186 = 8'd186;
parameter [7:0] LEGUP_F_main_BB__195_187 = 8'd187;
parameter [7:0] LEGUP_F_main_BB__197_188 = 8'd188;
parameter [7:0] LEGUP_F_main_BB__199_189 = 8'd189;
parameter [7:0] LEGUP_F_main_BB__202_190 = 8'd190;
parameter [7:0] LEGUP_F_main_BB__206_191 = 8'd191;
parameter [7:0] LEGUP_F_main_BB__208_192 = 8'd192;
parameter [7:0] LEGUP_F_main_BB__210_193 = 8'd193;
parameter [7:0] LEGUP_F_main_BB__220_194 = 8'd194;
parameter [7:0] LEGUP_F_main_BB_shift64RightJammingexitii_195 = 8'd195;
parameter [7:0] LEGUP_F_main_BB__225_196 = 8'd196;
parameter [7:0] LEGUP_F_main_BB_threadii_197 = 8'd197;
parameter [7:0] LEGUP_F_main_BB_thread6ii_198 = 8'd198;
parameter [7:0] LEGUP_F_main_BB_float64_divexit_199 = 8'd199;
parameter [7:0] LEGUP_F_main_BB_float64_divexit_200 = 8'd200;
parameter [7:0] LEGUP_F_main_BB__248_201 = 8'd201;
parameter [7:0] LEGUP_F_main_BB__251_202 = 8'd202;
parameter [7:0] LEGUP_F_main_BB__253_203 = 8'd203;
parameter [7:0] LEGUP_F_main_BB__255_204 = 8'd204;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_1_float_exception_flags0;
reg [31:0] main_1_float_exception_flags0_reg;
reg [31:0] main_1_main_result02;
reg [31:0] main_1_main_result02_reg;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg;
reg [31:0] main_1_3;
reg [31:0] main_1_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5_reg;
reg [63:0] main_1_4;
reg [63:0] main_1_4_reg;
reg [63:0] main_1_5;
reg [63:0] main_1_5_reg;
reg [63:0] main_1_6;
reg [63:0] main_1_6_reg;
reg [63:0] main_1_7;
reg [63:0] main_1_7_reg;
reg [31:0] main_1_tri27i;
reg [31:0] main_1_tri27i_reg;
reg [31:0] main_1_8;
reg [31:0] main_1_8_reg;
reg [63:0] main_1_9;
reg [63:0] main_1_9_reg;
reg [63:0] main_1_10;
reg [63:0] main_1_10_reg;
reg [31:0] main_1_tri26i;
reg [31:0] main_1_tri26i_reg;
reg [31:0] main_1_11;
reg [31:0] main_1_11_reg;
reg [63:0] main_1_12;
reg [63:0] main_1_12_reg;
reg [63:0] main_1_13;
reg [63:0] main_1_13_reg;
reg  main_1_14;
reg  main_1_14_reg;
reg [31:0] main_15_16;
reg [31:0] main_15_16_reg;
reg [31:0] main_15_17;
reg [31:0] main_15_17_reg;
reg  main_15_18;
reg  main_15_18_reg;
reg  main_float64_is_signaling_nanexit1i19i_19;
reg  main_float64_is_signaling_nanexit1i19i_19_reg;
reg  main_float64_is_signaling_nanexit1i19i_20;
reg  main_float64_is_signaling_nanexit1i19i_20_reg;
reg  main_float64_is_signaling_nanexit1i19i_9;
reg  main_float64_is_signaling_nanexit1i19i_9_reg;
reg [62:0] main_float64_is_signaling_nanexit1i19i_21;
reg [62:0] main_float64_is_signaling_nanexit1i19i_21_reg;
reg  main_float64_is_signaling_nanexit1i19i_22;
reg  main_float64_is_signaling_nanexit1i19i_22_reg;
reg [31:0] main_float64_is_signaling_nanexit1i19i_23;
reg [31:0] main_float64_is_signaling_nanexit1i19i_23_reg;
reg [31:0] main_float64_is_signaling_nanexit1i19i_float_exception_flags0;
reg [31:0] main_float64_is_signaling_nanexit1i19i_float_exception_flags0_reg;
reg  main_float64_is_signaling_nanexit1i19i_not1demorgan;
reg  main_float64_is_signaling_nanexit1i19i_not1demorgan_reg;
reg  main_float64_is_signaling_nanexit1i19i_not1;
reg  main_float64_is_signaling_nanexit1i19i_not1_reg;
reg  main_float64_is_signaling_nanexit1i19i_;
reg  main_float64_is_signaling_nanexit1i19i__reg;
reg [63:0] main_float64_is_signaling_nanexit1i19i_mux2vi23i;
reg [63:0] main_float64_is_signaling_nanexit1i19i_mux2vi23i_reg;
reg [63:0] main_float64_is_signaling_nanexit1i19i_mux2i24i;
reg [63:0] main_float64_is_signaling_nanexit1i19i_mux2i24i_reg;
reg  main_24_25;
reg  main_24_25_reg;
reg [31:0] main_26_27;
reg [31:0] main_26_27_reg;
reg [31:0] main_26_28;
reg [31:0] main_26_28_reg;
reg  main_26_29;
reg  main_26_29_reg;
reg  main_float64_is_signaling_nanexit1i12i_30;
reg  main_float64_is_signaling_nanexit1i12i_30_reg;
reg  main_float64_is_signaling_nanexit1i12i_31;
reg  main_float64_is_signaling_nanexit1i12i_31_reg;
reg  main_float64_is_signaling_nanexit1i12i_10;
reg  main_float64_is_signaling_nanexit1i12i_10_reg;
reg [62:0] main_float64_is_signaling_nanexit1i12i_32;
reg [62:0] main_float64_is_signaling_nanexit1i12i_32_reg;
reg  main_float64_is_signaling_nanexit1i12i_33;
reg  main_float64_is_signaling_nanexit1i12i_33_reg;
reg [31:0] main_float64_is_signaling_nanexit1i12i_34;
reg [31:0] main_float64_is_signaling_nanexit1i12i_34_reg;
reg [31:0] main_float64_is_signaling_nanexit1i12i_float_exception_flags018;
reg [31:0] main_float64_is_signaling_nanexit1i12i_float_exception_flags018_reg;
reg  main_float64_is_signaling_nanexit1i12i_not2demorgan;
reg  main_float64_is_signaling_nanexit1i12i_not2demorgan_reg;
reg  main_float64_is_signaling_nanexit1i12i_not2;
reg  main_float64_is_signaling_nanexit1i12i_not2_reg;
reg  main_float64_is_signaling_nanexit1i12i_19;
reg  main_float64_is_signaling_nanexit1i12i_19_reg;
reg [63:0] main_float64_is_signaling_nanexit1i12i_mux2vi16i;
reg [63:0] main_float64_is_signaling_nanexit1i12i_mux2vi16i_reg;
reg [63:0] main_float64_is_signaling_nanexit1i12i_mux2i17i;
reg [63:0] main_float64_is_signaling_nanexit1i12i_mux2i17i_reg;
reg [31:0] main_35_36;
reg [31:0] main_35_36_reg;
reg [63:0] main_37_38;
reg [63:0] main_37_38_reg;
reg [63:0] main_37_39;
reg [63:0] main_37_39_reg;
reg [31:0] main_41_42;
reg [31:0] main_41_42_reg;
reg [31:0] main_41_43;
reg [31:0] main_41_43_reg;
reg  main_41_44;
reg  main_41_44_reg;
reg  main_float64_is_signaling_nanexit1ii_45;
reg  main_float64_is_signaling_nanexit1ii_45_reg;
reg  main_float64_is_signaling_nanexit1ii_46;
reg  main_float64_is_signaling_nanexit1ii_46_reg;
reg  main_float64_is_signaling_nanexit1ii_11;
reg  main_float64_is_signaling_nanexit1ii_11_reg;
reg [62:0] main_float64_is_signaling_nanexit1ii_47;
reg [62:0] main_float64_is_signaling_nanexit1ii_47_reg;
reg  main_float64_is_signaling_nanexit1ii_48;
reg  main_float64_is_signaling_nanexit1ii_48_reg;
reg [31:0] main_float64_is_signaling_nanexit1ii_49;
reg [31:0] main_float64_is_signaling_nanexit1ii_49_reg;
reg [31:0] main_float64_is_signaling_nanexit1ii_float_exception_flags020;
reg [31:0] main_float64_is_signaling_nanexit1ii_float_exception_flags020_reg;
reg  main_float64_is_signaling_nanexit1ii_notdemorgan;
reg  main_float64_is_signaling_nanexit1ii_notdemorgan_reg;
reg  main_float64_is_signaling_nanexit1ii_not;
reg  main_float64_is_signaling_nanexit1ii_not_reg;
reg  main_float64_is_signaling_nanexit1ii_21;
reg  main_float64_is_signaling_nanexit1ii_21_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii_mux2vii;
reg [63:0] main_float64_is_signaling_nanexit1ii_mux2vii_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii_mux2ii;
reg [63:0] main_float64_is_signaling_nanexit1ii_mux2ii_reg;
reg [63:0] main_50_51;
reg [63:0] main_50_51_reg;
reg [31:0] main_52_53;
reg [31:0] main_52_53_reg;
reg [31:0] main_52_54;
reg [31:0] main_52_54_reg;
reg  main_52_55;
reg  main_52_55_reg;
reg [63:0] main_56_57;
reg [63:0] main_56_57_reg;
reg [63:0] main_56_58;
reg [63:0] main_56_58_reg;
reg  main_56_59;
reg  main_56_59_reg;
reg [31:0] main_60_61;
reg [31:0] main_60_61_reg;
reg [31:0] main_62_63;
reg [31:0] main_62_63_reg;
reg [63:0] main_62_64;
reg [63:0] main_62_64_reg;
reg [63:0] main_62_65;
reg [63:0] main_62_65_reg;
reg [63:0] main_66_67;
reg [63:0] main_66_67_reg;
reg [31:0] main_66_extracttii5i;
reg [31:0] main_66_extracttii5i_reg;
reg  main_66_68;
reg  main_66_68_reg;
reg [63:0] main_66_69;
reg [63:0] main_66_69_reg;
reg [31:0] main_66_70;
reg [31:0] main_66_70_reg;
reg [31:0] main_66_aiii6i;
reg [31:0] main_66_aiii6i_reg;
reg [31:0] main_66_iii7i;
reg [31:0] main_66_iii7i_reg;
reg  main_66_71;
reg  main_66_71_reg;
reg [31:0] main_72_73;
reg [31:0] main_72_73_reg;
reg [31:0] main_72_74;
reg [31:0] main_72_74_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_1iii8i;
reg [31:0] main_normalizeFloat64Subnormalexit10i_1iii8i_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i;
reg [31:0] main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_75;
reg [31:0] main_normalizeFloat64Subnormalexit10i_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexit10i_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexit10i_76_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_77;
reg [31:0] main_normalizeFloat64Subnormalexit10i_77_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_78;
reg [31:0] main_normalizeFloat64Subnormalexit10i_78_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_79;
reg [31:0] main_normalizeFloat64Subnormalexit10i_79_reg;
reg [63:0] main_normalizeFloat64Subnormalexit10i_80;
reg [63:0] main_normalizeFloat64Subnormalexit10i_80_reg;
reg [63:0] main_normalizeFloat64Subnormalexit10i_81;
reg [63:0] main_normalizeFloat64Subnormalexit10i_81_reg;
reg [31:0] main_normalizeFloat64Subnormalexit10i_82;
reg [31:0] main_normalizeFloat64Subnormalexit10i_82_reg;
reg [31:0] main_83_84;
reg [31:0] main_83_84_reg;
reg [63:0] main_83_85;
reg [63:0] main_83_85_reg;
reg  main_83_86;
reg  main_83_86_reg;
reg [31:0] main_87_88;
reg [31:0] main_87_88_reg;
reg [31:0] main_87_89;
reg [31:0] main_87_89_reg;
reg  main_87_90;
reg  main_87_90_reg;
reg [63:0] main_91_92;
reg [63:0] main_91_92_reg;
reg [63:0] main_93_94;
reg [63:0] main_93_94_reg;
reg [31:0] main_93_extracttiii;
reg [31:0] main_93_extracttiii_reg;
reg  main_93_95;
reg  main_93_95_reg;
reg [63:0] main_93_96;
reg [63:0] main_93_96_reg;
reg [31:0] main_93_97;
reg [31:0] main_93_97_reg;
reg [31:0] main_93_aiiii;
reg [31:0] main_93_aiiii_reg;
reg [31:0] main_93_iiii;
reg [31:0] main_93_iiii_reg;
reg  main_93_98;
reg  main_93_98_reg;
reg [31:0] main_99_100;
reg [31:0] main_99_100_reg;
reg [31:0] main_99_101;
reg [31:0] main_99_101_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_1iiii;
reg [31:0] main_normalizeFloat64Subnormalexiti_1iiii_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_shiftCount1iiii;
reg [31:0] main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_102;
reg [31:0] main_normalizeFloat64Subnormalexiti_102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexiti_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeFloat64Subnormalexiti_103_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_104;
reg [31:0] main_normalizeFloat64Subnormalexiti_104_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_105;
reg [31:0] main_normalizeFloat64Subnormalexiti_105_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_106;
reg [31:0] main_normalizeFloat64Subnormalexiti_106_reg;
reg [63:0] main_normalizeFloat64Subnormalexiti_107;
reg [63:0] main_normalizeFloat64Subnormalexiti_107_reg;
reg [63:0] main_normalizeFloat64Subnormalexiti_108;
reg [63:0] main_normalizeFloat64Subnormalexiti_108_reg;
reg [31:0] main_normalizeFloat64Subnormalexiti_109;
reg [31:0] main_normalizeFloat64Subnormalexiti_109_reg;
reg [31:0] main_110_111;
reg [31:0] main_110_111_reg;
reg [63:0] main_110_112;
reg [63:0] main_110_112_reg;
reg [31:0] main_110_113;
reg [31:0] main_110_113_reg;
reg [31:0] main_110_114;
reg [31:0] main_110_114_reg;
reg [63:0] main_110_115;
reg [63:0] main_110_115_reg;
reg [63:0] main_110_116;
reg [63:0] main_110_116_reg;
reg [63:0] main_110_117;
reg [63:0] main_110_117_reg;
reg [63:0] main_110_118;
reg [63:0] main_110_118_reg;
reg [63:0] main_110_119;
reg [63:0] main_110_119_reg;
reg  main_110_120;
reg  main_110_120_reg;
reg [63:0] main_121_122;
reg [63:0] main_121_122_reg;
reg [31:0] main_121_123;
reg [31:0] main_121_123_reg;
reg [63:0] main_124_125;
reg [63:0] main_124_125_reg;
reg [31:0] main_124_zExp0i;
reg [31:0] main_124_zExp0i_reg;
reg  main_124_126;
reg  main_124_126_reg;
reg [63:0] main_127_128;
reg [63:0] main_127_128_reg;
reg [63:0] main_127_129;
reg [63:0] main_127_129_reg;
reg  main_127_130;
reg  main_127_130_reg;
reg [63:0] main_131_132;
reg [63:0] main_131_132_reg;
reg [63:0] main_131_133;
reg [63:0] main_131_133_reg;
reg [63:0] main_134_135;
reg [63:0] main_134_135_reg;
reg [63:0] main_134_136;
reg [63:0] main_134_136_reg;
reg [63:0] main_134_137;
reg [63:0] main_134_137_reg;
reg [63:0] main_134_138;
reg [63:0] main_134_138_reg;
reg [63:0] main_134_139;
reg [63:0] main_134_139_reg;
reg [63:0] main_134_140;
reg [63:0] main_134_140_reg;
reg [63:0] main_134_141;
reg [63:0] main_134_141_reg;
reg [63:0] main_134_142;
reg [63:0] main_134_142_reg;
reg  main_134_143;
reg  main_134_143_reg;
reg [63:0] main_134_negiii;
reg [63:0] main_134_negiii_reg;
reg [63:0] main_134_neg3ii;
reg [63:0] main_134_neg3ii_reg;
reg [63:0] main_134_144;
reg [63:0] main_134_144_reg;
reg [63:0] main_134_145;
reg [63:0] main_134_145_reg;
reg  main_134_146;
reg  main_134_146_reg;
reg [63:0] main_lrphii_147;
reg [63:0] main_lrphii_147_reg;
reg [64:0] main_lrphii_overflow_intrinsic1;
reg [64:0] main_lrphii_overflow_intrinsic1_reg;
reg [63:0] main_148_z05ii;
reg [63:0] main_148_z05ii_reg;
reg [63:0] main_148_149;
reg [63:0] main_148_149_reg;
reg [63:0] main_148_150;
reg [63:0] main_148_150_reg;
reg [63:0] main_148_151;
reg [63:0] main_148_151_reg;
reg [64:0] main_148_overflow_intrinsic;
reg [64:0] main_148_overflow_intrinsic_reg;
reg [64:0] main_148_overflow_intrinsic2;
reg [64:0] main_148_overflow_intrinsic2_reg;
reg [63:0] main_148_overflow_intrinsic_sum;
reg [63:0] main_148_overflow_intrinsic_sum_reg;
reg [64:0] main_148_overflow_intrinsic3;
reg [64:0] main_148_overflow_intrinsic3_reg;
reg [63:0] main_148_152;
reg [63:0] main_148_152_reg;
reg [63:0] main_148_153;
reg [63:0] main_148_153_reg;
reg [63:0] main_148_154;
reg [63:0] main_148_154_reg;
reg  main_148_155;
reg  main_148_155_reg;
reg [63:0] main__crit_edgeii_z0lcssaii;
reg [63:0] main__crit_edgeii_z0lcssaii_reg;
reg [63:0] main__crit_edgeii_lcssa4ii;
reg [63:0] main__crit_edgeii_lcssa4ii_reg;
reg [63:0] main__crit_edgeii_lcssaii;
reg [63:0] main__crit_edgeii_lcssaii_reg;
reg [63:0] main__crit_edgeii_156;
reg [63:0] main__crit_edgeii_156_reg;
reg [63:0] main__crit_edgeii_157;
reg [63:0] main__crit_edgeii_157_reg;
reg [63:0] main__crit_edgeii_158;
reg [63:0] main__crit_edgeii_158_reg;
reg  main__crit_edgeii_159;
reg  main__crit_edgeii_159_reg;
reg [63:0] main_160_161;
reg [63:0] main_160_161_reg;
reg [63:0] main_estimateDiv128To64exiti_162;
reg [63:0] main_estimateDiv128To64exiti_162_reg;
reg [63:0] main_estimateDiv128To64exiti_163;
reg [63:0] main_estimateDiv128To64exiti_163_reg;
reg [63:0] main_estimateDiv128To64exiti_164;
reg [63:0] main_estimateDiv128To64exiti_164_reg;
reg  main_estimateDiv128To64exiti_165;
reg  main_estimateDiv128To64exiti_165_reg;
reg [63:0] main_166_167;
reg [63:0] main_166_167_reg;
reg [63:0] main_166_168;
reg [63:0] main_166_168_reg;
reg [63:0] main_166_169;
reg [63:0] main_166_169_reg;
reg [63:0] main_166_170;
reg [63:0] main_166_170_reg;
reg [63:0] main_166_171;
reg [63:0] main_166_171_reg;
reg [63:0] main_166_172;
reg [63:0] main_166_172_reg;
reg [64:0] main_166_overflow_intrinsic4;
reg [64:0] main_166_overflow_intrinsic4_reg;
reg [64:0] main_166_overflow_intrinsic5;
reg [64:0] main_166_overflow_intrinsic5_reg;
reg [64:0] main_166_overflow_intrinsic6;
reg [64:0] main_166_overflow_intrinsic6_reg;
reg [63:0] main_166_overflow_intrinsic_sum7;
reg [63:0] main_166_overflow_intrinsic_sum7_reg;
reg [64:0] main_166_173;
reg [64:0] main_166_173_reg;
reg [63:0] main_166_tr;
reg [63:0] main_166_tr_reg;
reg [63:0] main_166_174;
reg [63:0] main_166_174_reg;
reg [63:0] main_166_175;
reg [63:0] main_166_175_reg;
reg [63:0] main_166_176;
reg [63:0] main_166_176_reg;
reg [63:0] main_166_177;
reg [63:0] main_166_177_reg;
reg [64:0] main_166_overflow_intrinsic10;
reg [64:0] main_166_overflow_intrinsic10_reg;
reg [64:0] main_166_overflow_intrinsic11;
reg [64:0] main_166_overflow_intrinsic11_reg;
reg [64:0] main_166_overflow_intrinsic12;
reg [64:0] main_166_overflow_intrinsic12_reg;
reg [63:0] main_166_overflow_intrinsic_sum13;
reg [63:0] main_166_overflow_intrinsic_sum13_reg;
reg [63:0] main_166_178;
reg [63:0] main_166_178_reg;
reg [64:0] main_166_sext;
reg [64:0] main_166_sext_reg;
reg [63:0] main_166_neg29i;
reg [63:0] main_166_neg29i_reg;
reg  main_166_179;
reg  main_166_179_reg;
reg [63:0] main_166_negii;
reg [63:0] main_166_negii_reg;
reg [63:0] main_166_neg31i;
reg [63:0] main_166_neg31i_reg;
reg [63:0] main_166_neg33i;
reg [63:0] main_166_neg33i_reg;
reg [63:0] main_166_180;
reg [63:0] main_166_180_reg;
reg [63:0] main_166_181;
reg [63:0] main_166_181_reg;
reg  main_166_182;
reg  main_166_182_reg;
reg [64:0] main_lrphipreheader_overflow_intrinsic17;
reg [64:0] main_lrphipreheader_overflow_intrinsic17_reg;
reg [63:0] main_lrphi_zSig037i;
reg [63:0] main_lrphi_zSig037i_reg;
reg [63:0] main_lrphi_183;
reg [63:0] main_lrphi_183_reg;
reg [63:0] main_lrphi_184;
reg [63:0] main_lrphi_184_reg;
reg [63:0] main_lrphi_185;
reg [63:0] main_lrphi_185_reg;
reg [64:0] main_lrphi_overflow_intrinsic16;
reg [64:0] main_lrphi_overflow_intrinsic16_reg;
reg [64:0] main_lrphi_overflow_intrinsic18;
reg [64:0] main_lrphi_overflow_intrinsic18_reg;
reg [63:0] main_lrphi_overflow_intrinsic_sum19;
reg [63:0] main_lrphi_overflow_intrinsic_sum19_reg;
reg [64:0] main_lrphi_overflow_intrinsic20;
reg [64:0] main_lrphi_overflow_intrinsic20_reg;
reg [63:0] main_lrphi_186;
reg [63:0] main_lrphi_186_reg;
reg [63:0] main_lrphi_187;
reg [63:0] main_lrphi_187_reg;
reg  main_lrphi_188;
reg  main_lrphi_188_reg;
reg [63:0] main__crit_edgei_zSig0lcssai;
reg [63:0] main__crit_edgei_zSig0lcssai_reg;
reg [63:0] main__crit_edgei_lcssai;
reg [63:0] main__crit_edgei_lcssai_reg;
reg  main__crit_edgei_189;
reg  main__crit_edgei_189_reg;
reg [63:0] main__crit_edgei_190;
reg [63:0] main__crit_edgei_190_reg;
reg [63:0] main__crit_edgei_191;
reg [63:0] main__crit_edgei_191_reg;
reg [63:0] main_estimateDiv128To64exitthreadi_zSig1i;
reg [63:0] main_estimateDiv128To64exitthreadi_zSig1i_reg;
reg [31:0] main_estimateDiv128To64exitthreadi_trii;
reg [31:0] main_estimateDiv128To64exitthreadi_trii_reg;
reg [31:0] main_estimateDiv128To64exitthreadi_192;
reg [31:0] main_estimateDiv128To64exitthreadi_192_reg;
reg [31:0] main_estimateDiv128To64exitthreadi_193;
reg [31:0] main_estimateDiv128To64exitthreadi_193_reg;
reg  main_estimateDiv128To64exitthreadi_194;
reg  main_estimateDiv128To64exitthreadi_194_reg;
reg  main_195_196;
reg  main_195_196_reg;
reg  main_197_198;
reg  main_197_198_reg;
reg [63:0] main_199_200;
reg [63:0] main_199_200_reg;
reg  main_199_201;
reg  main_199_201_reg;
reg [31:0] main_202_203;
reg [31:0] main_202_203_reg;
reg [63:0] main_202_204;
reg [63:0] main_202_204_reg;
reg [63:0] main_202_205;
reg [63:0] main_202_205_reg;
reg  main_206_207;
reg  main_206_207_reg;
reg  main_208_209;
reg  main_208_209_reg;
reg [31:0] main_210_211;
reg [31:0] main_210_211_reg;
reg [63:0] main_210_212;
reg [63:0] main_210_212_reg;
reg [63:0] main_210_213;
reg [63:0] main_210_213_reg;
reg [31:0] main_210_214;
reg [31:0] main_210_214_reg;
reg [63:0] main_210_215;
reg [63:0] main_210_215_reg;
reg [63:0] main_210_216;
reg [63:0] main_210_216_reg;
reg  main_210_217;
reg  main_210_217_reg;
reg [63:0] main_210_218;
reg [63:0] main_210_218_reg;
reg [63:0] main_210_219;
reg [63:0] main_210_219_reg;
reg  main_220_221;
reg  main_220_221_reg;
reg [63:0] main_220_222;
reg [63:0] main_220_222_reg;
reg [63:0] main_shift64RightJammingexitii_z0iii;
reg [63:0] main_shift64RightJammingexitii_z0iii_reg;
reg [31:0] main_shift64RightJammingexitii_tr3ii;
reg [31:0] main_shift64RightJammingexitii_tr3ii_reg;
reg [31:0] main_shift64RightJammingexitii_223;
reg [31:0] main_shift64RightJammingexitii_223_reg;
reg  main_shift64RightJammingexitii_224;
reg  main_shift64RightJammingexitii_224_reg;
reg [31:0] main_225_226;
reg [31:0] main_225_226_reg;
reg [31:0] main_threadii_float_exception_flags4;
reg [31:0] main_threadii_float_exception_flags4_reg;
reg [63:0] main_threadii_zSig5ii;
reg [63:0] main_threadii_zSig5ii_reg;
reg [31:0] main_threadii_02ii;
reg [31:0] main_threadii_02ii_reg;
reg [31:0] main_threadii_roundBits0ii;
reg [31:0] main_threadii_roundBits0ii_reg;
reg  main_threadii_227;
reg  main_threadii_227_reg;
reg [31:0] main_threadii_228;
reg [31:0] main_threadii_228_reg;
reg [31:0] main_threadii_float_exception_flags4_var0;
reg [31:0] main_threadii_float_exception_flags4_var0_reg;
reg [31:0] main_thread6ii_float_exception_flags5;
reg [31:0] main_thread6ii_float_exception_flags5_reg;
reg [31:0] main_thread6ii_roundBits09ii;
reg [31:0] main_thread6ii_roundBits09ii_reg;
reg [31:0] main_thread6ii_028ii;
reg [31:0] main_thread6ii_028ii_reg;
reg [63:0] main_thread6ii_zSig57ii;
reg [63:0] main_thread6ii_zSig57ii_reg;
reg [63:0] main_thread6ii_229;
reg [63:0] main_thread6ii_229_reg;
reg [63:0] main_thread6ii_230;
reg [63:0] main_thread6ii_230_reg;
reg  main_thread6ii_231;
reg  main_thread6ii_231_reg;
reg [31:0] main_thread6ii_232;
reg [31:0] main_thread6ii_232_reg;
reg [31:0] main_thread6ii_233;
reg [31:0] main_thread6ii_233_reg;
reg [63:0] main_thread6ii_234;
reg [63:0] main_thread6ii_234_reg;
reg [63:0] main_thread6ii_235;
reg [63:0] main_thread6ii_235_reg;
reg  main_thread6ii_236;
reg  main_thread6ii_236_reg;
reg [63:0] main_thread6ii_237;
reg [63:0] main_thread6ii_237_reg;
reg [63:0] main_thread6ii_238;
reg [63:0] main_thread6ii_238_reg;
reg [63:0] main_thread6ii_opii;
reg [63:0] main_thread6ii_opii_reg;
reg [63:0] main_thread6ii_239;
reg [63:0] main_thread6ii_239_reg;
reg [63:0] main_thread6ii_240;
reg [63:0] main_thread6ii_240_reg;
reg [63:0] main_thread6ii_241;
reg [63:0] main_thread6ii_241_reg;
reg [31:0] main_float64_divexit_float_exception_flags6;
reg [31:0] main_float64_divexit_float_exception_flags6_reg;
reg [63:0] main_float64_divexit_0i;
reg [63:0] main_float64_divexit_0i_reg;
reg [63:0] main_float64_divexit_242;
reg [63:0] main_float64_divexit_242_reg;
reg  main_float64_divexit_243;
reg  main_float64_divexit_243_reg;
reg [31:0] main_float64_divexit_244;
reg [31:0] main_float64_divexit_244_reg;
reg [31:0] main_float64_divexit_245;
reg [31:0] main_float64_divexit_245_reg;
reg [31:0] main_float64_divexit_247;
reg [31:0] main_float64_divexit_247_reg;
reg  main_float64_divexit_exitcond3;
reg  main_float64_divexit_exitcond3_reg;
reg  main_248_250;
reg  main_248_250_reg;
reg [4:0] a_input_address_a;
reg  a_input_write_enable_a;
wire [63:0] a_input_in_a;
wire [63:0] a_input_out_a;
wire [4:0] a_input_address_b;
wire  a_input_write_enable_b;
wire [63:0] a_input_in_b;
wire [63:0] a_input_out_b;
reg [4:0] b_input_address_a;
reg  b_input_write_enable_a;
wire [63:0] b_input_in_a;
wire [63:0] b_input_out_a;
wire [4:0] b_input_address_b;
wire  b_input_write_enable_b;
wire [63:0] b_input_in_b;
wire [63:0] b_input_out_b;
reg [4:0] z_output_address_a;
reg  z_output_write_enable_a;
wire [63:0] z_output_in_a;
wire [63:0] z_output_out_a;
wire [4:0] z_output_address_b;
wire  z_output_write_enable_b;
wire [63:0] z_output_in_b;
wire [63:0] z_output_out_b;
reg [7:0] countLeadingZeros32countLeadingZerosHigh_address_a;
reg  countLeadingZeros32countLeadingZerosHigh_write_enable_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_a;
wire [7:0] countLeadingZeros32countLeadingZerosHigh_address_b;
wire  countLeadingZeros32countLeadingZerosHigh_write_enable_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_b;
reg [63:0] main_unsigned_divide_64_0_op0;
reg [63:0] main_unsigned_divide_64_0_op1;
wire [63:0] lpm_divide_main_131_132_temp_out;
wire [63:0] main_131_132_unused;
reg  lpm_divide_main_131_132_en;
reg [63:0] lpm_divide_main_131_132_out;
reg [63:0] main_unsigned_divide_64_0;
reg  lpm_mult_main_134_138_en;
reg [63:0] main_134_138_stage0_reg;
reg  lpm_mult_main_134_139_en;
reg [63:0] main_134_139_stage0_reg;
reg  lpm_divide_main_160_161_en;
reg  lpm_mult_main_166_169_en;
reg [63:0] main_166_169_stage0_reg;
reg  lpm_mult_main_166_170_en;
reg [63:0] main_166_170_stage0_reg;
reg  lpm_mult_main_166_171_en;
reg [63:0] main_166_171_stage0_reg;
reg  lpm_mult_main_166_172_en;
reg [63:0] main_166_172_stage0_reg;

/*   %132 = udiv i64 %125, %128*/
lpm_divide lpm_divide_main_131_132 (
	.quotient (lpm_divide_main_131_132_temp_out),
	.remain (main_131_132_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_131_132_en),
	.numer (main_unsigned_divide_64_0_op0),
	.denom (main_unsigned_divide_64_0_op1)
);

defparam
	lpm_divide_main_131_132.lpm_pipeline = 64,
	lpm_divide_main_131_132.lpm_widthn = 64,
	lpm_divide_main_131_132.lpm_widthd = 64,
	lpm_divide_main_131_132.lpm_drepresentation = "UNSIGNED",
	lpm_divide_main_131_132.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_main_131_132.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


// @a_input = internal unnamed_addr constant [22 x i64] [i64 9223090561878065152, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 46071824188000174...
rom_dual_port a_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( a_input_address_a ),
	.address_b( a_input_address_b ),
	.q_a( a_input_out_a ),
	.q_b( a_input_out_b)
);
defparam a_input.width_a = 64;
defparam a_input.width_b = 64;
defparam a_input.widthad_a = 5;
defparam a_input.widthad_b = 5;
defparam a_input.numwords_a = 22;
defparam a_input.numwords_b = 22;
defparam a_input.latency = 1;
defparam a_input.init_file = "a_input.mif";


// @b_input = internal unnamed_addr constant [22 x i64] [i64 4607182418800017408, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 9221120237041090560, i64 92188684372274053...
rom_dual_port b_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( b_input_address_a ),
	.address_b( b_input_address_b ),
	.q_a( b_input_out_a ),
	.q_b( b_input_out_b)
);
defparam b_input.width_a = 64;
defparam b_input.width_b = 64;
defparam b_input.widthad_a = 5;
defparam b_input.widthad_b = 5;
defparam b_input.numwords_a = 22;
defparam b_input.numwords_b = 22;
defparam b_input.latency = 1;
defparam b_input.init_file = "b_input.mif";


// @z_output = internal unnamed_addr constant [22 x i64] [i64 9223090561878065152, i64 9221120237041090560, i64 9223372036854775807, i64 9218868437227405312, i64 9221120237041090560, i64 0, i64 922337203...
rom_dual_port z_output (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( z_output_address_a ),
	.address_b( z_output_address_b ),
	.q_a( z_output_out_a ),
	.q_b( z_output_out_b)
);
defparam z_output.width_a = 64;
defparam z_output.width_b = 64;
defparam z_output.widthad_a = 5;
defparam z_output.widthad_b = 5;
defparam z_output.numwords_a = 22;
defparam z_output.numwords_b = 22;
defparam z_output.latency = 1;
defparam z_output.init_file = "z_output.mif";


// @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4,...
rom_dual_port countLeadingZeros32countLeadingZerosHigh (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( countLeadingZeros32countLeadingZerosHigh_address_a ),
	.address_b( countLeadingZeros32countLeadingZerosHigh_address_b ),
	.q_a( countLeadingZeros32countLeadingZerosHigh_out_a ),
	.q_b( countLeadingZeros32countLeadingZerosHigh_out_b)
);
defparam countLeadingZeros32countLeadingZerosHigh.width_a = 32;
defparam countLeadingZeros32countLeadingZerosHigh.width_b = 32;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_a = 8;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_b = 8;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_a = 256;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_b = 256;
defparam countLeadingZeros32countLeadingZerosHigh.latency = 1;
defparam countLeadingZeros32countLeadingZerosHigh.init_file = "countLeadingZeros32countLeadingZerosHigh.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %float64_div.exit*/
	/*   %246 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([65 x i8]* @.str, i32 0, i32 0), i64 %4, i64 %5, i64 %242, i64 %.0.i) #1*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_200)) begin
		$write("a_input=%0x b_input=%0x expected=%0x output=%0x\n", $signed(main_1_4_reg), $signed(main_1_5_reg), $signed(main_float64_divexit_242), $signed(main_float64_divexit_0i_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_4_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_5_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_float64_divexit_242) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_float64_divexit_0i_reg) === 1'bX) finish <= 0;
	end
	/* main: %248*/
	/*   %249 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %245) #1*/
	if ((cur_state == LEGUP_F_main_BB__248_201)) begin
		$write("Result: %d\n", $signed(main_float64_divexit_245_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_float64_divexit_245_reg) === 1'bX) finish <= 0;
	end
	/* main: %251*/
	/*   %252 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__251_202)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %253*/
	/*   %254 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__253_203)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__110_35:
	if ((main_110_120 == 1'd1))
		next_state = LEGUP_F_main_BB__124_37;
	else if ((main_110_120 == 1'd0))
		next_state = LEGUP_F_main_BB__121_36;
LEGUP_F_main_BB__121_36:
		next_state = LEGUP_F_main_BB__124_37;
LEGUP_F_main_BB__124_37:
	if ((main_124_126 == 1'd1))
		next_state = LEGUP_F_main_BB__127_38;
	else if ((main_124_126 == 1'd0))
		next_state = LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186;
LEGUP_F_main_BB__127_38:
	if ((main_127_130 == 1'd1))
		next_state = LEGUP_F_main_BB__131_39;
	else if ((main_127_130 == 1'd0))
		next_state = LEGUP_F_main_BB__134_104;
LEGUP_F_main_BB__131_100:
		next_state = LEGUP_F_main_BB__131_101;
LEGUP_F_main_BB__131_101:
		next_state = LEGUP_F_main_BB__131_102;
LEGUP_F_main_BB__131_102:
		next_state = LEGUP_F_main_BB__131_103;
LEGUP_F_main_BB__131_103:
		next_state = LEGUP_F_main_BB__134_104;
LEGUP_F_main_BB__131_39:
		next_state = LEGUP_F_main_BB__131_40;
LEGUP_F_main_BB__131_40:
		next_state = LEGUP_F_main_BB__131_41;
LEGUP_F_main_BB__131_41:
		next_state = LEGUP_F_main_BB__131_42;
LEGUP_F_main_BB__131_42:
		next_state = LEGUP_F_main_BB__131_43;
LEGUP_F_main_BB__131_43:
		next_state = LEGUP_F_main_BB__131_44;
LEGUP_F_main_BB__131_44:
		next_state = LEGUP_F_main_BB__131_45;
LEGUP_F_main_BB__131_45:
		next_state = LEGUP_F_main_BB__131_46;
LEGUP_F_main_BB__131_46:
		next_state = LEGUP_F_main_BB__131_47;
LEGUP_F_main_BB__131_47:
		next_state = LEGUP_F_main_BB__131_48;
LEGUP_F_main_BB__131_48:
		next_state = LEGUP_F_main_BB__131_49;
LEGUP_F_main_BB__131_49:
		next_state = LEGUP_F_main_BB__131_50;
LEGUP_F_main_BB__131_50:
		next_state = LEGUP_F_main_BB__131_51;
LEGUP_F_main_BB__131_51:
		next_state = LEGUP_F_main_BB__131_52;
LEGUP_F_main_BB__131_52:
		next_state = LEGUP_F_main_BB__131_53;
LEGUP_F_main_BB__131_53:
		next_state = LEGUP_F_main_BB__131_54;
LEGUP_F_main_BB__131_54:
		next_state = LEGUP_F_main_BB__131_55;
LEGUP_F_main_BB__131_55:
		next_state = LEGUP_F_main_BB__131_56;
LEGUP_F_main_BB__131_56:
		next_state = LEGUP_F_main_BB__131_57;
LEGUP_F_main_BB__131_57:
		next_state = LEGUP_F_main_BB__131_58;
LEGUP_F_main_BB__131_58:
		next_state = LEGUP_F_main_BB__131_59;
LEGUP_F_main_BB__131_59:
		next_state = LEGUP_F_main_BB__131_60;
LEGUP_F_main_BB__131_60:
		next_state = LEGUP_F_main_BB__131_61;
LEGUP_F_main_BB__131_61:
		next_state = LEGUP_F_main_BB__131_62;
LEGUP_F_main_BB__131_62:
		next_state = LEGUP_F_main_BB__131_63;
LEGUP_F_main_BB__131_63:
		next_state = LEGUP_F_main_BB__131_64;
LEGUP_F_main_BB__131_64:
		next_state = LEGUP_F_main_BB__131_65;
LEGUP_F_main_BB__131_65:
		next_state = LEGUP_F_main_BB__131_66;
LEGUP_F_main_BB__131_66:
		next_state = LEGUP_F_main_BB__131_67;
LEGUP_F_main_BB__131_67:
		next_state = LEGUP_F_main_BB__131_68;
LEGUP_F_main_BB__131_68:
		next_state = LEGUP_F_main_BB__131_69;
LEGUP_F_main_BB__131_69:
		next_state = LEGUP_F_main_BB__131_70;
LEGUP_F_main_BB__131_70:
		next_state = LEGUP_F_main_BB__131_71;
LEGUP_F_main_BB__131_71:
		next_state = LEGUP_F_main_BB__131_72;
LEGUP_F_main_BB__131_72:
		next_state = LEGUP_F_main_BB__131_73;
LEGUP_F_main_BB__131_73:
		next_state = LEGUP_F_main_BB__131_74;
LEGUP_F_main_BB__131_74:
		next_state = LEGUP_F_main_BB__131_75;
LEGUP_F_main_BB__131_75:
		next_state = LEGUP_F_main_BB__131_76;
LEGUP_F_main_BB__131_76:
		next_state = LEGUP_F_main_BB__131_77;
LEGUP_F_main_BB__131_77:
		next_state = LEGUP_F_main_BB__131_78;
LEGUP_F_main_BB__131_78:
		next_state = LEGUP_F_main_BB__131_79;
LEGUP_F_main_BB__131_79:
		next_state = LEGUP_F_main_BB__131_80;
LEGUP_F_main_BB__131_80:
		next_state = LEGUP_F_main_BB__131_81;
LEGUP_F_main_BB__131_81:
		next_state = LEGUP_F_main_BB__131_82;
LEGUP_F_main_BB__131_82:
		next_state = LEGUP_F_main_BB__131_83;
LEGUP_F_main_BB__131_83:
		next_state = LEGUP_F_main_BB__131_84;
LEGUP_F_main_BB__131_84:
		next_state = LEGUP_F_main_BB__131_85;
LEGUP_F_main_BB__131_85:
		next_state = LEGUP_F_main_BB__131_86;
LEGUP_F_main_BB__131_86:
		next_state = LEGUP_F_main_BB__131_87;
LEGUP_F_main_BB__131_87:
		next_state = LEGUP_F_main_BB__131_88;
LEGUP_F_main_BB__131_88:
		next_state = LEGUP_F_main_BB__131_89;
LEGUP_F_main_BB__131_89:
		next_state = LEGUP_F_main_BB__131_90;
LEGUP_F_main_BB__131_90:
		next_state = LEGUP_F_main_BB__131_91;
LEGUP_F_main_BB__131_91:
		next_state = LEGUP_F_main_BB__131_92;
LEGUP_F_main_BB__131_92:
		next_state = LEGUP_F_main_BB__131_93;
LEGUP_F_main_BB__131_93:
		next_state = LEGUP_F_main_BB__131_94;
LEGUP_F_main_BB__131_94:
		next_state = LEGUP_F_main_BB__131_95;
LEGUP_F_main_BB__131_95:
		next_state = LEGUP_F_main_BB__131_96;
LEGUP_F_main_BB__131_96:
		next_state = LEGUP_F_main_BB__131_97;
LEGUP_F_main_BB__131_97:
		next_state = LEGUP_F_main_BB__131_98;
LEGUP_F_main_BB__131_98:
		next_state = LEGUP_F_main_BB__131_99;
LEGUP_F_main_BB__131_99:
		next_state = LEGUP_F_main_BB__131_100;
LEGUP_F_main_BB__134_104:
		next_state = LEGUP_F_main_BB__134_105;
LEGUP_F_main_BB__134_105:
	if ((main_134_146 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphii_106;
	else if ((main_134_146 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgeii_110;
LEGUP_F_main_BB__148_107:
		next_state = LEGUP_F_main_BB__148_108;
LEGUP_F_main_BB__148_108:
	if ((main_148_155 == 1'd1))
		next_state = LEGUP_F_main_BB__148_107;
	else if ((main_148_155 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgeiiloopexit_109;
LEGUP_F_main_BB__15_3:
	if ((main_15_18 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_4;
	else if ((main_15_18 == 1'd0))
		next_state = LEGUP_F_main_BB__24_7;
LEGUP_F_main_BB__160_111:
		next_state = LEGUP_F_main_BB__160_112;
LEGUP_F_main_BB__160_112:
		next_state = LEGUP_F_main_BB__160_113;
LEGUP_F_main_BB__160_113:
		next_state = LEGUP_F_main_BB__160_114;
LEGUP_F_main_BB__160_114:
		next_state = LEGUP_F_main_BB__160_115;
LEGUP_F_main_BB__160_115:
		next_state = LEGUP_F_main_BB__160_116;
LEGUP_F_main_BB__160_116:
		next_state = LEGUP_F_main_BB__160_117;
LEGUP_F_main_BB__160_117:
		next_state = LEGUP_F_main_BB__160_118;
LEGUP_F_main_BB__160_118:
		next_state = LEGUP_F_main_BB__160_119;
LEGUP_F_main_BB__160_119:
		next_state = LEGUP_F_main_BB__160_120;
LEGUP_F_main_BB__160_120:
		next_state = LEGUP_F_main_BB__160_121;
LEGUP_F_main_BB__160_121:
		next_state = LEGUP_F_main_BB__160_122;
LEGUP_F_main_BB__160_122:
		next_state = LEGUP_F_main_BB__160_123;
LEGUP_F_main_BB__160_123:
		next_state = LEGUP_F_main_BB__160_124;
LEGUP_F_main_BB__160_124:
		next_state = LEGUP_F_main_BB__160_125;
LEGUP_F_main_BB__160_125:
		next_state = LEGUP_F_main_BB__160_126;
LEGUP_F_main_BB__160_126:
		next_state = LEGUP_F_main_BB__160_127;
LEGUP_F_main_BB__160_127:
		next_state = LEGUP_F_main_BB__160_128;
LEGUP_F_main_BB__160_128:
		next_state = LEGUP_F_main_BB__160_129;
LEGUP_F_main_BB__160_129:
		next_state = LEGUP_F_main_BB__160_130;
LEGUP_F_main_BB__160_130:
		next_state = LEGUP_F_main_BB__160_131;
LEGUP_F_main_BB__160_131:
		next_state = LEGUP_F_main_BB__160_132;
LEGUP_F_main_BB__160_132:
		next_state = LEGUP_F_main_BB__160_133;
LEGUP_F_main_BB__160_133:
		next_state = LEGUP_F_main_BB__160_134;
LEGUP_F_main_BB__160_134:
		next_state = LEGUP_F_main_BB__160_135;
LEGUP_F_main_BB__160_135:
		next_state = LEGUP_F_main_BB__160_136;
LEGUP_F_main_BB__160_136:
		next_state = LEGUP_F_main_BB__160_137;
LEGUP_F_main_BB__160_137:
		next_state = LEGUP_F_main_BB__160_138;
LEGUP_F_main_BB__160_138:
		next_state = LEGUP_F_main_BB__160_139;
LEGUP_F_main_BB__160_139:
		next_state = LEGUP_F_main_BB__160_140;
LEGUP_F_main_BB__160_140:
		next_state = LEGUP_F_main_BB__160_141;
LEGUP_F_main_BB__160_141:
		next_state = LEGUP_F_main_BB__160_142;
LEGUP_F_main_BB__160_142:
		next_state = LEGUP_F_main_BB__160_143;
LEGUP_F_main_BB__160_143:
		next_state = LEGUP_F_main_BB__160_144;
LEGUP_F_main_BB__160_144:
		next_state = LEGUP_F_main_BB__160_145;
LEGUP_F_main_BB__160_145:
		next_state = LEGUP_F_main_BB__160_146;
LEGUP_F_main_BB__160_146:
		next_state = LEGUP_F_main_BB__160_147;
LEGUP_F_main_BB__160_147:
		next_state = LEGUP_F_main_BB__160_148;
LEGUP_F_main_BB__160_148:
		next_state = LEGUP_F_main_BB__160_149;
LEGUP_F_main_BB__160_149:
		next_state = LEGUP_F_main_BB__160_150;
LEGUP_F_main_BB__160_150:
		next_state = LEGUP_F_main_BB__160_151;
LEGUP_F_main_BB__160_151:
		next_state = LEGUP_F_main_BB__160_152;
LEGUP_F_main_BB__160_152:
		next_state = LEGUP_F_main_BB__160_153;
LEGUP_F_main_BB__160_153:
		next_state = LEGUP_F_main_BB__160_154;
LEGUP_F_main_BB__160_154:
		next_state = LEGUP_F_main_BB__160_155;
LEGUP_F_main_BB__160_155:
		next_state = LEGUP_F_main_BB__160_156;
LEGUP_F_main_BB__160_156:
		next_state = LEGUP_F_main_BB__160_157;
LEGUP_F_main_BB__160_157:
		next_state = LEGUP_F_main_BB__160_158;
LEGUP_F_main_BB__160_158:
		next_state = LEGUP_F_main_BB__160_159;
LEGUP_F_main_BB__160_159:
		next_state = LEGUP_F_main_BB__160_160;
LEGUP_F_main_BB__160_160:
		next_state = LEGUP_F_main_BB__160_161;
LEGUP_F_main_BB__160_161:
		next_state = LEGUP_F_main_BB__160_162;
LEGUP_F_main_BB__160_162:
		next_state = LEGUP_F_main_BB__160_163;
LEGUP_F_main_BB__160_163:
		next_state = LEGUP_F_main_BB__160_164;
LEGUP_F_main_BB__160_164:
		next_state = LEGUP_F_main_BB__160_165;
LEGUP_F_main_BB__160_165:
		next_state = LEGUP_F_main_BB__160_166;
LEGUP_F_main_BB__160_166:
		next_state = LEGUP_F_main_BB__160_167;
LEGUP_F_main_BB__160_167:
		next_state = LEGUP_F_main_BB__160_168;
LEGUP_F_main_BB__160_168:
		next_state = LEGUP_F_main_BB__160_169;
LEGUP_F_main_BB__160_169:
		next_state = LEGUP_F_main_BB__160_170;
LEGUP_F_main_BB__160_170:
		next_state = LEGUP_F_main_BB__160_171;
LEGUP_F_main_BB__160_171:
		next_state = LEGUP_F_main_BB__160_172;
LEGUP_F_main_BB__160_172:
		next_state = LEGUP_F_main_BB__160_173;
LEGUP_F_main_BB__160_173:
		next_state = LEGUP_F_main_BB__160_174;
LEGUP_F_main_BB__160_174:
		next_state = LEGUP_F_main_BB__160_175;
LEGUP_F_main_BB__160_175:
		next_state = LEGUP_F_main_BB_estimateDiv128To64exiti_176;
LEGUP_F_main_BB__166_177:
		next_state = LEGUP_F_main_BB__166_178;
LEGUP_F_main_BB__166_178:
		next_state = LEGUP_F_main_BB__166_179;
LEGUP_F_main_BB__166_179:
		next_state = LEGUP_F_main_BB__166_180;
LEGUP_F_main_BB__166_180:
	if ((main_166_182 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphipreheader_181;
	else if ((main_166_182 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_185;
LEGUP_F_main_BB__195_187:
	if ((main_195_196 == 1'd1))
		next_state = LEGUP_F_main_BB__202_190;
	else if ((main_195_196 == 1'd0))
		next_state = LEGUP_F_main_BB__197_188;
LEGUP_F_main_BB__197_188:
	if ((main_197_198 == 1'd1))
		next_state = LEGUP_F_main_BB__199_189;
	else if ((main_197_198 == 1'd0))
		next_state = LEGUP_F_main_BB__206_191;
LEGUP_F_main_BB__199_189:
	if ((main_199_201 == 1'd1))
		next_state = LEGUP_F_main_BB__202_190;
	else if ((main_199_201 == 1'd0))
		next_state = LEGUP_F_main_BB_threadii_197;
LEGUP_F_main_BB__1_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_2:
	if ((main_1_14 == 1'd1))
		next_state = LEGUP_F_main_BB__15_3;
	else if ((main_1_14 == 1'd0))
		next_state = LEGUP_F_main_BB__40_14;
LEGUP_F_main_BB__202_190:
		next_state = LEGUP_F_main_BB_float64_divexit_199;
LEGUP_F_main_BB__206_191:
	if ((main_206_207 == 1'd1))
		next_state = LEGUP_F_main_BB__208_192;
	else if ((main_206_207 == 1'd0))
		next_state = LEGUP_F_main_BB_threadii_197;
LEGUP_F_main_BB__208_192:
	if ((main_208_209 == 1'd1))
		next_state = LEGUP_F_main_BB__210_193;
	else if ((main_208_209 == 1'd0))
		next_state = LEGUP_F_main_BB__220_194;
LEGUP_F_main_BB__210_193:
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_195;
LEGUP_F_main_BB__220_194:
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_195;
LEGUP_F_main_BB__225_196:
		next_state = LEGUP_F_main_BB_threadii_197;
LEGUP_F_main_BB__248_201:
	if ((main_248_250 == 1'd1))
		next_state = LEGUP_F_main_BB__251_202;
	else if ((main_248_250 == 1'd0))
		next_state = LEGUP_F_main_BB__253_203;
LEGUP_F_main_BB__24_7:
	if ((main_24_25 == 1'd1))
		next_state = LEGUP_F_main_BB__26_8;
	else if ((main_24_25 == 1'd0))
		next_state = LEGUP_F_main_BB__37_13;
LEGUP_F_main_BB__251_202:
		next_state = LEGUP_F_main_BB__255_204;
LEGUP_F_main_BB__253_203:
		next_state = LEGUP_F_main_BB__255_204;
LEGUP_F_main_BB__255_204:
		next_state = LEGUP_0;
LEGUP_F_main_BB__26_8:
	if ((main_26_29 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_9;
	else if ((main_26_29 == 1'd0))
		next_state = LEGUP_F_main_BB__35_12;
LEGUP_F_main_BB__35_12:
		next_state = LEGUP_F_main_BB_float64_divexit_199;
LEGUP_F_main_BB__37_13:
		next_state = LEGUP_F_main_BB_float64_divexit_199;
LEGUP_F_main_BB__40_14:
	if ((main_1_11_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__41_15;
	else if ((main_1_11_reg == 32'd0))
		next_state = LEGUP_F_main_BB__52_20;
	else if ((main_1_11_reg != 32'd2047) && (main_1_11_reg != 32'd0))
		next_state = LEGUP_F_main_BB__83_28;
LEGUP_F_main_BB__41_15:
	if ((main_41_44 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_16;
	else if ((main_41_44 == 1'd0))
		next_state = LEGUP_F_main_BB__50_19;
LEGUP_F_main_BB__50_19:
		next_state = LEGUP_F_main_BB_float64_divexit_199;
LEGUP_F_main_BB__52_20:
	if ((main_52_55 == 1'd1))
		next_state = LEGUP_F_main_BB__66_24;
	else if ((main_52_55 == 1'd0))
		next_state = LEGUP_F_main_BB__56_21;
LEGUP_F_main_BB__56_21:
	if ((main_56_59 == 1'd1))
		next_state = LEGUP_F_main_BB__60_22;
	else if ((main_56_59 == 1'd0))
		next_state = LEGUP_F_main_BB__62_23;
LEGUP_F_main_BB__60_22:
		next_state = LEGUP_F_main_BB_float64_divexit_199;
LEGUP_F_main_BB__62_23:
		next_state = LEGUP_F_main_BB_float64_divexit_199;
LEGUP_F_main_BB__66_24:
	if ((main_66_71 == 1'd1))
		next_state = LEGUP_F_main_BB__72_25;
	else if ((main_66_71 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_26;
LEGUP_F_main_BB__72_25:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_26;
LEGUP_F_main_BB__83_28:
	if ((main_83_86 == 1'd1))
		next_state = LEGUP_F_main_BB__87_29;
	else if ((main_83_86 == 1'd0))
		next_state = LEGUP_F_main_BB__110_35;
LEGUP_F_main_BB__87_29:
	if ((main_87_90 == 1'd1))
		next_state = LEGUP_F_main_BB__93_31;
	else if ((main_87_90 == 1'd0))
		next_state = LEGUP_F_main_BB__91_30;
LEGUP_F_main_BB__91_30:
		next_state = LEGUP_F_main_BB_float64_divexit_199;
LEGUP_F_main_BB__93_31:
	if ((main_93_98 == 1'd1))
		next_state = LEGUP_F_main_BB__99_32;
	else if ((main_93_98 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_33;
LEGUP_F_main_BB__99_32:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_33;
LEGUP_F_main_BB__crit_edgei_185:
		next_state = LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186;
LEGUP_F_main_BB__crit_edgeii_110:
	if ((main__crit_edgeii_159 == 1'd1))
		next_state = LEGUP_F_main_BB__160_111;
	else if ((main__crit_edgeii_159 == 1'd0))
		next_state = LEGUP_F_main_BB_estimateDiv128To64exiti_176;
LEGUP_F_main_BB__crit_edgeiiloopexit_109:
		next_state = LEGUP_F_main_BB__crit_edgeii_110;
LEGUP_F_main_BB__crit_edgeiloopexit_184:
		next_state = LEGUP_F_main_BB__crit_edgei_185;
LEGUP_F_main_BB_estimateDiv128To64exiti_176:
	if ((main_estimateDiv128To64exiti_165 == 1'd1))
		next_state = LEGUP_F_main_BB__166_177;
	else if ((main_estimateDiv128To64exiti_165 == 1'd0))
		next_state = LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186;
LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186:
	if ((main_estimateDiv128To64exitthreadi_194 == 1'd1))
		next_state = LEGUP_F_main_BB__195_187;
	else if ((main_estimateDiv128To64exitthreadi_194 == 1'd0))
		next_state = LEGUP_F_main_BB_threadii_197;
LEGUP_F_main_BB_float64_divexit_199:
		next_state = LEGUP_F_main_BB_float64_divexit_200;
LEGUP_F_main_BB_float64_divexit_200:
	if ((main_float64_divexit_exitcond3_reg == 1'd1))
		next_state = LEGUP_F_main_BB__248_201;
	else if ((main_float64_divexit_exitcond3_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_10:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_11;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_11:
		next_state = LEGUP_F_main_BB_float64_divexit_199;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_9:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_10;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_4:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_5;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_5:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_6;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_6:
		next_state = LEGUP_F_main_BB_float64_divexit_199;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_16:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_17;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_17:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_18;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_18:
		next_state = LEGUP_F_main_BB_float64_divexit_199;
LEGUP_F_main_BB_lrphi_182:
		next_state = LEGUP_F_main_BB_lrphi_183;
LEGUP_F_main_BB_lrphi_183:
	if ((main_lrphi_188 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi_182;
	else if ((main_lrphi_188 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgeiloopexit_184;
LEGUP_F_main_BB_lrphii_106:
		next_state = LEGUP_F_main_BB__148_107;
LEGUP_F_main_BB_lrphipreheader_181:
		next_state = LEGUP_F_main_BB_lrphi_182;
LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_26:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27;
LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27:
		next_state = LEGUP_F_main_BB__83_28;
LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_33:
		next_state = LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34;
LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34:
		next_state = LEGUP_F_main_BB__110_35;
LEGUP_F_main_BB_shift64RightJammingexitii_195:
	if ((main_shift64RightJammingexitii_224 == 1'd1))
		next_state = LEGUP_F_main_BB_thread6ii_198;
	else if ((main_shift64RightJammingexitii_224 == 1'd0))
		next_state = LEGUP_F_main_BB__225_196;
LEGUP_F_main_BB_thread6ii_198:
		next_state = LEGUP_F_main_BB_float64_divexit_199;
LEGUP_F_main_BB_threadii_197:
		next_state = LEGUP_F_main_BB_thread6ii_198;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %float_exception_flags.0 = phi i32 [ 0, %0 ], [ %float_exception_flags.6, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_float_exception_flags0 = 32'd0;
	end
	/* main: %1*/
	/*   %float_exception_flags.0 = phi i32 [ 0, %0 ], [ %float_exception_flags.6, %float64_div.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_divexit_200) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond3_reg == 1'd0))) */ begin
		main_1_float_exception_flags0 = main_float64_divexit_float_exception_flags6_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %float_exception_flags.0 = phi i32 [ 0, %0 ], [ %float_exception_flags.6, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_float_exception_flags0_reg <= main_1_float_exception_flags0;
		if (start == 1'b0 && ^(main_1_float_exception_flags0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_float_exception_flags0_reg"); $finish; end
	end
	/* main: %1*/
	/*   %float_exception_flags.0 = phi i32 [ 0, %0 ], [ %float_exception_flags.6, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_divexit_200) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond3_reg == 1'd0))) begin
		main_1_float_exception_flags0_reg <= main_1_float_exception_flags0;
		if (start == 1'b0 && ^(main_1_float_exception_flags0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_float_exception_flags0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %245, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02 = 32'd0;
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %245, %float64_div.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_divexit_200) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond3_reg == 1'd0))) */ begin
		main_1_main_result02 = main_float64_divexit_245;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %245, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %245, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_divexit_200) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond3_reg == 1'd0))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %247, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2 = 32'd0;
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %247, %float64_div.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_divexit_200) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond3_reg == 1'd0))) */ begin
		main_1_2 = main_float64_divexit_247_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %247, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %247, %float64_div.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_divexit_200) & (memory_controller_waitrequest == 1'd0)) & (main_float64_divexit_exitcond3_reg == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [22 x i64]* @z_output, i32 0, i32 %2*/
		main_1_scevgep = (1'd0 | (8 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [22 x i64]* @z_output, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep_reg <= main_1_scevgep;
		if (start == 1'b0 && ^(main_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = add i32 %2, -1*/
		main_1_3 = (main_1_2_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = add i32 %2, -1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep4 = getelementptr [22 x i64]* @b_input, i32 0, i32 %2*/
		main_1_scevgep4 = (1'd0 | (8 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep4 = getelementptr [22 x i64]* @b_input, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep4_reg <= main_1_scevgep4;
		if (start == 1'b0 && ^(main_1_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep5 = getelementptr [22 x i64]* @a_input, i32 0, i32 %2*/
		main_1_scevgep5 = (1'd0 | (8 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep5 = getelementptr [22 x i64]* @a_input, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_scevgep5_reg <= main_1_scevgep5;
		if (start == 1'b0 && ^(main_1_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = load i64* %scevgep5, align 8, !tbaa !1*/
		main_1_4 = a_input_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = load i64* %scevgep5, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = load i64* %scevgep4, align 8, !tbaa !1*/
		main_1_5 = b_input_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = load i64* %scevgep4, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %6 = and i64 %4, 4503599627370495*/
		main_1_6 = (main_1_4 & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %6 = and i64 %4, 4503599627370495*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_6_reg <= main_1_6;
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %7 = lshr i64 %4, 52*/
		main_1_7 = (main_1_4 >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %7 = lshr i64 %4, 52*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_7_reg <= main_1_7;
		if (start == 1'b0 && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %.tr.i27.i = trunc i64 %7 to i32*/
		main_1_tri27i = main_1_7[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %.tr.i27.i = trunc i64 %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_tri27i_reg <= main_1_tri27i;
		if (start == 1'b0 && ^(main_1_tri27i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tri27i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %8 = and i32 %.tr.i27.i, 2047*/
		main_1_8 = (main_1_tri27i & 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %8 = and i32 %.tr.i27.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_8_reg <= main_1_8;
		if (start == 1'b0 && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %9 = and i64 %5, 4503599627370495*/
		main_1_9 = (main_1_5 & 64'd4503599627370495);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = and i64 %5, 4503599627370495*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_9_reg <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %10 = lshr i64 %5, 52*/
		main_1_10 = (main_1_5 >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %10 = lshr i64 %5, 52*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_10_reg <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %.tr.i26.i = trunc i64 %10 to i32*/
		main_1_tri26i = main_1_10[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %.tr.i26.i = trunc i64 %10 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_tri26i_reg <= main_1_tri26i;
		if (start == 1'b0 && ^(main_1_tri26i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tri26i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %11 = and i32 %.tr.i26.i, 2047*/
		main_1_11 = (main_1_tri26i & 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %11 = and i32 %.tr.i26.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_11_reg <= main_1_11;
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %12 = xor i64 %5, %4*/
		main_1_12 = (main_1_5 ^ main_1_4);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = xor i64 %5, %4*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_12_reg <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %13 = lshr i64 %12, 63*/
		main_1_13 = (main_1_12 >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %13 = lshr i64 %12, 63*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_13_reg <= main_1_13;
		if (start == 1'b0 && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %14 = icmp eq i32 %8, 2047*/
		main_1_14 = (main_1_8 == 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %14 = icmp eq i32 %8, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_14_reg <= main_1_14;
		if (start == 1'b0 && ^(main_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %16 = lshr i32 4178942, %2*/
		main_15_16 = (32'd4178942 >>> (main_1_2_reg % 32));
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %16 = lshr i32 4178942, %2*/
	if ((cur_state == LEGUP_F_main_BB__15_3)) begin
		main_15_16_reg <= main_15_16;
		if (start == 1'b0 && ^(main_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %17 = and i32 %16, 1*/
		main_15_17 = (main_15_16 & 32'd1);
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %17 = and i32 %16, 1*/
	if ((cur_state == LEGUP_F_main_BB__15_3)) begin
		main_15_17_reg <= main_15_17;
		if (start == 1'b0 && ^(main_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %18 = icmp eq i32 %17, 0*/
		main_15_18 = (main_15_17 == 32'd0);
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %18 = icmp eq i32 %17, 0*/
	if ((cur_state == LEGUP_F_main_BB__15_3)) begin
		main_15_18_reg <= main_15_18;
		if (start == 1'b0 && ^(main_15_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %19 = icmp ult i32 %3, 3*/
		main_float64_is_signaling_nanexit1i19i_19 = (main_1_3_reg < 32'd3);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %19 = icmp ult i32 %3, 3*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_4)) begin
		main_float64_is_signaling_nanexit1i19i_19_reg <= main_float64_is_signaling_nanexit1i19i_19;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i19i_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i19i_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %20 = icmp eq i32 %2, 0*/
		main_float64_is_signaling_nanexit1i19i_20 = (main_1_2_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %20 = icmp eq i32 %2, 0*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_4)) begin
		main_float64_is_signaling_nanexit1i19i_20_reg <= main_float64_is_signaling_nanexit1i19i_20;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i19i_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i19i_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %.9 = and i1 %19, %20*/
		main_float64_is_signaling_nanexit1i19i_9 = (main_float64_is_signaling_nanexit1i19i_19 & main_float64_is_signaling_nanexit1i19i_20);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %.9 = and i1 %19, %20*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_4)) begin
		main_float64_is_signaling_nanexit1i19i_9_reg <= main_float64_is_signaling_nanexit1i19i_9;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i19i_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i19i_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %21 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i19i_21 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %21 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_4)) begin
		main_float64_is_signaling_nanexit1i19i_21_reg <= main_float64_is_signaling_nanexit1i19i_21;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i19i_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i19i_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %22 = icmp ugt i63 %21, -4503599627370496*/
		main_float64_is_signaling_nanexit1i19i_22 = (main_float64_is_signaling_nanexit1i19i_21 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %22 = icmp ugt i63 %21, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_4)) begin
		main_float64_is_signaling_nanexit1i19i_22_reg <= main_float64_is_signaling_nanexit1i19i_22;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i19i_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i19i_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %23 = or i32 %float_exception_flags.0, 16*/
		main_float64_is_signaling_nanexit1i19i_23 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %23 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_4)) begin
		main_float64_is_signaling_nanexit1i19i_23_reg <= main_float64_is_signaling_nanexit1i19i_23;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i19i_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i19i_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %.float_exception_flags.0 = select i1 %.9, i32 %23, i32 %float_exception_flags.0*/
		main_float64_is_signaling_nanexit1i19i_float_exception_flags0 = (main_float64_is_signaling_nanexit1i19i_9 ? main_float64_is_signaling_nanexit1i19i_23 : main_1_float_exception_flags0_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %.float_exception_flags.0 = select i1 %.9, i32 %23, i32 %float_exception_flags.0*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_4)) begin
		main_float64_is_signaling_nanexit1i19i_float_exception_flags0_reg <= main_float64_is_signaling_nanexit1i19i_float_exception_flags0;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i19i_float_exception_flags0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i19i_float_exception_flags0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %not.1.demorgan = and i1 %19, %20*/
		main_float64_is_signaling_nanexit1i19i_not1demorgan = (main_float64_is_signaling_nanexit1i19i_19 & main_float64_is_signaling_nanexit1i19i_20);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %not.1.demorgan = and i1 %19, %20*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_4)) begin
		main_float64_is_signaling_nanexit1i19i_not1demorgan_reg <= main_float64_is_signaling_nanexit1i19i_not1demorgan;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i19i_not1demorgan) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i19i_not1demorgan_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %not.1 = xor i1 %not.1.demorgan, true*/
		main_float64_is_signaling_nanexit1i19i_not1 = (main_float64_is_signaling_nanexit1i19i_not1demorgan_reg ^ 1'd1);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %not.1 = xor i1 %not.1.demorgan, true*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_5)) begin
		main_float64_is_signaling_nanexit1i19i_not1_reg <= main_float64_is_signaling_nanexit1i19i_not1;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i19i_not1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i19i_not1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %. = and i1 %22, %not.1*/
		main_float64_is_signaling_nanexit1i19i_ = (main_float64_is_signaling_nanexit1i19i_22_reg & main_float64_is_signaling_nanexit1i19i_not1);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %. = and i1 %22, %not.1*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_5)) begin
		main_float64_is_signaling_nanexit1i19i__reg <= main_float64_is_signaling_nanexit1i19i_;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i19i_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i19i__reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %.mux2.v.i23.i = select i1 %., i64 %5, i64 %4*/
		main_float64_is_signaling_nanexit1i19i_mux2vi23i = (main_float64_is_signaling_nanexit1i19i__reg ? main_1_5_reg : main_1_4_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %.mux2.v.i23.i = select i1 %., i64 %5, i64 %4*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_6)) begin
		main_float64_is_signaling_nanexit1i19i_mux2vi23i_reg <= main_float64_is_signaling_nanexit1i19i_mux2vi23i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i19i_mux2vi23i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i19i_mux2vi23i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %.mux2.i24.i = or i64 %.mux2.v.i23.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1i19i_mux2i24i = (main_float64_is_signaling_nanexit1i19i_mux2vi23i | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i19.i*/
	/*   %.mux2.i24.i = or i64 %.mux2.v.i23.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_6)) begin
		main_float64_is_signaling_nanexit1i19i_mux2i24i_reg <= main_float64_is_signaling_nanexit1i19i_mux2i24i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i19i_mux2i24i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i19i_mux2i24i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %24*/
	/*   %25 = icmp eq i32 %11, 2047*/
		main_24_25 = (main_1_11_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %24*/
	/*   %25 = icmp eq i32 %11, 2047*/
	if ((cur_state == LEGUP_F_main_BB__24_7)) begin
		main_24_25_reg <= main_24_25;
		if (start == 1'b0 && ^(main_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %27 = lshr i32 262125, %2*/
		main_26_27 = (32'd262125 >>> (main_1_2_reg % 32));
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %27 = lshr i32 262125, %2*/
	if ((cur_state == LEGUP_F_main_BB__26_8)) begin
		main_26_27_reg <= main_26_27;
		if (start == 1'b0 && ^(main_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %28 = and i32 %27, 1*/
		main_26_28 = (main_26_27 & 32'd1);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %28 = and i32 %27, 1*/
	if ((cur_state == LEGUP_F_main_BB__26_8)) begin
		main_26_28_reg <= main_26_28;
		if (start == 1'b0 && ^(main_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %29 = icmp eq i32 %28, 0*/
		main_26_29 = (main_26_28 == 32'd0);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %29 = icmp eq i32 %28, 0*/
	if ((cur_state == LEGUP_F_main_BB__26_8)) begin
		main_26_29_reg <= main_26_29;
		if (start == 1'b0 && ^(main_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %30 = icmp ult i32 %3, 3*/
		main_float64_is_signaling_nanexit1i12i_30 = (main_1_3_reg < 32'd3);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %30 = icmp ult i32 %3, 3*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_9)) begin
		main_float64_is_signaling_nanexit1i12i_30_reg <= main_float64_is_signaling_nanexit1i12i_30;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i12i_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i12i_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %31 = icmp eq i32 %2, 0*/
		main_float64_is_signaling_nanexit1i12i_31 = (main_1_2_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %31 = icmp eq i32 %2, 0*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_9)) begin
		main_float64_is_signaling_nanexit1i12i_31_reg <= main_float64_is_signaling_nanexit1i12i_31;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i12i_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i12i_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %.10 = and i1 %30, %31*/
		main_float64_is_signaling_nanexit1i12i_10 = (main_float64_is_signaling_nanexit1i12i_30 & main_float64_is_signaling_nanexit1i12i_31);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %.10 = and i1 %30, %31*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_9)) begin
		main_float64_is_signaling_nanexit1i12i_10_reg <= main_float64_is_signaling_nanexit1i12i_10;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i12i_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i12i_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %32 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i12i_32 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %32 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_9)) begin
		main_float64_is_signaling_nanexit1i12i_32_reg <= main_float64_is_signaling_nanexit1i12i_32;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i12i_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i12i_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %33 = icmp ugt i63 %32, -4503599627370496*/
		main_float64_is_signaling_nanexit1i12i_33 = (main_float64_is_signaling_nanexit1i12i_32 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %33 = icmp ugt i63 %32, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_9)) begin
		main_float64_is_signaling_nanexit1i12i_33_reg <= main_float64_is_signaling_nanexit1i12i_33;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i12i_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i12i_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %34 = or i32 %float_exception_flags.0, 16*/
		main_float64_is_signaling_nanexit1i12i_34 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %34 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_9)) begin
		main_float64_is_signaling_nanexit1i12i_34_reg <= main_float64_is_signaling_nanexit1i12i_34;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i12i_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i12i_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %.float_exception_flags.018 = select i1 %.10, i32 %34, i32 %float_exception_flags.0*/
		main_float64_is_signaling_nanexit1i12i_float_exception_flags018 = (main_float64_is_signaling_nanexit1i12i_10 ? main_float64_is_signaling_nanexit1i12i_34 : main_1_float_exception_flags0_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %.float_exception_flags.018 = select i1 %.10, i32 %34, i32 %float_exception_flags.0*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_9)) begin
		main_float64_is_signaling_nanexit1i12i_float_exception_flags018_reg <= main_float64_is_signaling_nanexit1i12i_float_exception_flags018;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i12i_float_exception_flags018) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i12i_float_exception_flags018_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %not.2.demorgan = and i1 %30, %31*/
		main_float64_is_signaling_nanexit1i12i_not2demorgan = (main_float64_is_signaling_nanexit1i12i_30 & main_float64_is_signaling_nanexit1i12i_31);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %not.2.demorgan = and i1 %30, %31*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_9)) begin
		main_float64_is_signaling_nanexit1i12i_not2demorgan_reg <= main_float64_is_signaling_nanexit1i12i_not2demorgan;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i12i_not2demorgan) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i12i_not2demorgan_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %not.2 = xor i1 %not.2.demorgan, true*/
		main_float64_is_signaling_nanexit1i12i_not2 = (main_float64_is_signaling_nanexit1i12i_not2demorgan_reg ^ 1'd1);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %not.2 = xor i1 %not.2.demorgan, true*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_10)) begin
		main_float64_is_signaling_nanexit1i12i_not2_reg <= main_float64_is_signaling_nanexit1i12i_not2;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i12i_not2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i12i_not2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %.19 = and i1 %33, %not.2*/
		main_float64_is_signaling_nanexit1i12i_19 = (main_float64_is_signaling_nanexit1i12i_33_reg & main_float64_is_signaling_nanexit1i12i_not2);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %.19 = and i1 %33, %not.2*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_10)) begin
		main_float64_is_signaling_nanexit1i12i_19_reg <= main_float64_is_signaling_nanexit1i12i_19;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i12i_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i12i_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %.mux2.v.i16.i = select i1 %.19, i64 %5, i64 %4*/
		main_float64_is_signaling_nanexit1i12i_mux2vi16i = (main_float64_is_signaling_nanexit1i12i_19_reg ? main_1_5_reg : main_1_4_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %.mux2.v.i16.i = select i1 %.19, i64 %5, i64 %4*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_11)) begin
		main_float64_is_signaling_nanexit1i12i_mux2vi16i_reg <= main_float64_is_signaling_nanexit1i12i_mux2vi16i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i12i_mux2vi16i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i12i_mux2vi16i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %.mux2.i17.i = or i64 %.mux2.v.i16.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1i12i_mux2i17i = (main_float64_is_signaling_nanexit1i12i_mux2vi16i | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i12.i*/
	/*   %.mux2.i17.i = or i64 %.mux2.v.i16.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_11)) begin
		main_float64_is_signaling_nanexit1i12i_mux2i17i_reg <= main_float64_is_signaling_nanexit1i12i_mux2i17i;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i12i_mux2i17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i12i_mux2i17i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %36 = or i32 %float_exception_flags.0, 16*/
		main_35_36 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %36 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB__35_12)) begin
		main_35_36_reg <= main_35_36;
		if (start == 1'b0 && ^(main_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %37*/
	/*   %38 = shl nuw i64 %13, 63*/
		main_37_38 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %37*/
	/*   %38 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__37_13)) begin
		main_37_38_reg <= main_37_38;
		if (start == 1'b0 && ^(main_37_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %37*/
	/*   %39 = or i64 %38, 9218868437227405312*/
		main_37_39 = (main_37_38 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %37*/
	/*   %39 = or i64 %38, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__37_13)) begin
		main_37_39_reg <= main_37_39;
		if (start == 1'b0 && ^(main_37_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %41*/
	/*   %42 = lshr i32 262125, %2*/
		main_41_42 = (32'd262125 >>> (main_1_2_reg % 32));
end
always @(posedge clk) begin
	/* main: %41*/
	/*   %42 = lshr i32 262125, %2*/
	if ((cur_state == LEGUP_F_main_BB__41_15)) begin
		main_41_42_reg <= main_41_42;
		if (start == 1'b0 && ^(main_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_41_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %41*/
	/*   %43 = and i32 %42, 1*/
		main_41_43 = (main_41_42 & 32'd1);
end
always @(posedge clk) begin
	/* main: %41*/
	/*   %43 = and i32 %42, 1*/
	if ((cur_state == LEGUP_F_main_BB__41_15)) begin
		main_41_43_reg <= main_41_43;
		if (start == 1'b0 && ^(main_41_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_41_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %41*/
	/*   %44 = icmp eq i32 %43, 0*/
		main_41_44 = (main_41_43 == 32'd0);
end
always @(posedge clk) begin
	/* main: %41*/
	/*   %44 = icmp eq i32 %43, 0*/
	if ((cur_state == LEGUP_F_main_BB__41_15)) begin
		main_41_44_reg <= main_41_44;
		if (start == 1'b0 && ^(main_41_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_41_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %45 = icmp ult i32 %3, 3*/
		main_float64_is_signaling_nanexit1ii_45 = (main_1_3_reg < 32'd3);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %45 = icmp ult i32 %3, 3*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_16)) begin
		main_float64_is_signaling_nanexit1ii_45_reg <= main_float64_is_signaling_nanexit1ii_45;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %46 = icmp eq i32 %2, 0*/
		main_float64_is_signaling_nanexit1ii_46 = (main_1_2_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %46 = icmp eq i32 %2, 0*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_16)) begin
		main_float64_is_signaling_nanexit1ii_46_reg <= main_float64_is_signaling_nanexit1ii_46;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.11 = and i1 %45, %46*/
		main_float64_is_signaling_nanexit1ii_11 = (main_float64_is_signaling_nanexit1ii_45 & main_float64_is_signaling_nanexit1ii_46);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.11 = and i1 %45, %46*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_16)) begin
		main_float64_is_signaling_nanexit1ii_11_reg <= main_float64_is_signaling_nanexit1ii_11;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %47 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1ii_47 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %47 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_16)) begin
		main_float64_is_signaling_nanexit1ii_47_reg <= main_float64_is_signaling_nanexit1ii_47;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %48 = icmp ugt i63 %47, -4503599627370496*/
		main_float64_is_signaling_nanexit1ii_48 = (main_float64_is_signaling_nanexit1ii_47 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %48 = icmp ugt i63 %47, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_16)) begin
		main_float64_is_signaling_nanexit1ii_48_reg <= main_float64_is_signaling_nanexit1ii_48;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %49 = or i32 %float_exception_flags.0, 16*/
		main_float64_is_signaling_nanexit1ii_49 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %49 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_16)) begin
		main_float64_is_signaling_nanexit1ii_49_reg <= main_float64_is_signaling_nanexit1ii_49;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.float_exception_flags.020 = select i1 %.11, i32 %49, i32 %float_exception_flags.0*/
		main_float64_is_signaling_nanexit1ii_float_exception_flags020 = (main_float64_is_signaling_nanexit1ii_11 ? main_float64_is_signaling_nanexit1ii_49 : main_1_float_exception_flags0_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.float_exception_flags.020 = select i1 %.11, i32 %49, i32 %float_exception_flags.0*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_16)) begin
		main_float64_is_signaling_nanexit1ii_float_exception_flags020_reg <= main_float64_is_signaling_nanexit1ii_float_exception_flags020;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_float_exception_flags020) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_float_exception_flags020_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %not..demorgan = and i1 %45, %46*/
		main_float64_is_signaling_nanexit1ii_notdemorgan = (main_float64_is_signaling_nanexit1ii_45 & main_float64_is_signaling_nanexit1ii_46);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %not..demorgan = and i1 %45, %46*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_16)) begin
		main_float64_is_signaling_nanexit1ii_notdemorgan_reg <= main_float64_is_signaling_nanexit1ii_notdemorgan;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_notdemorgan) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_notdemorgan_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %not. = xor i1 %not..demorgan, true*/
		main_float64_is_signaling_nanexit1ii_not = (main_float64_is_signaling_nanexit1ii_notdemorgan_reg ^ 1'd1);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %not. = xor i1 %not..demorgan, true*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_17)) begin
		main_float64_is_signaling_nanexit1ii_not_reg <= main_float64_is_signaling_nanexit1ii_not;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_not) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_not_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.21 = and i1 %48, %not.*/
		main_float64_is_signaling_nanexit1ii_21 = (main_float64_is_signaling_nanexit1ii_48_reg & main_float64_is_signaling_nanexit1ii_not);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.21 = and i1 %48, %not.*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_17)) begin
		main_float64_is_signaling_nanexit1ii_21_reg <= main_float64_is_signaling_nanexit1ii_21;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.mux2.v.i.i = select i1 %.21, i64 %5, i64 %4*/
		main_float64_is_signaling_nanexit1ii_mux2vii = (main_float64_is_signaling_nanexit1ii_21_reg ? main_1_5_reg : main_1_4_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.mux2.v.i.i = select i1 %.21, i64 %5, i64 %4*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_18)) begin
		main_float64_is_signaling_nanexit1ii_mux2vii_reg <= main_float64_is_signaling_nanexit1ii_mux2vii;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_mux2vii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_mux2vii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.mux2.i.i = or i64 %.mux2.v.i.i, 2251799813685248*/
		main_float64_is_signaling_nanexit1ii_mux2ii = (main_float64_is_signaling_nanexit1ii_mux2vii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i*/
	/*   %.mux2.i.i = or i64 %.mux2.v.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_18)) begin
		main_float64_is_signaling_nanexit1ii_mux2ii_reg <= main_float64_is_signaling_nanexit1ii_mux2ii;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii_mux2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii_mux2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %51 = shl nuw i64 %13, 63*/
		main_50_51 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %51 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__50_19)) begin
		main_50_51_reg <= main_50_51;
		if (start == 1'b0 && ^(main_50_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %53 = lshr i32 262125, %2*/
		main_52_53 = (32'd262125 >>> (main_1_2_reg % 32));
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %53 = lshr i32 262125, %2*/
	if ((cur_state == LEGUP_F_main_BB__52_20)) begin
		main_52_53_reg <= main_52_53;
		if (start == 1'b0 && ^(main_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %54 = and i32 %53, 1*/
		main_52_54 = (main_52_53 & 32'd1);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %54 = and i32 %53, 1*/
	if ((cur_state == LEGUP_F_main_BB__52_20)) begin
		main_52_54_reg <= main_52_54;
		if (start == 1'b0 && ^(main_52_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %55 = icmp eq i32 %54, 0*/
		main_52_55 = (main_52_54 == 32'd0);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %55 = icmp eq i32 %54, 0*/
	if ((cur_state == LEGUP_F_main_BB__52_20)) begin
		main_52_55_reg <= main_52_55;
		if (start == 1'b0 && ^(main_52_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %57 = zext i32 %8 to i64*/
		main_56_57 = main_1_8_reg;
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %57 = zext i32 %8 to i64*/
	if ((cur_state == LEGUP_F_main_BB__56_21)) begin
		main_56_57_reg <= main_56_57;
		if (start == 1'b0 && ^(main_56_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %58 = or i64 %57, %6*/
		main_56_58 = (main_56_57 | main_1_6_reg);
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %58 = or i64 %57, %6*/
	if ((cur_state == LEGUP_F_main_BB__56_21)) begin
		main_56_58_reg <= main_56_58;
		if (start == 1'b0 && ^(main_56_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %59 = icmp eq i64 %58, 0*/
		main_56_59 = (main_56_58 == 64'd0);
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %59 = icmp eq i64 %58, 0*/
	if ((cur_state == LEGUP_F_main_BB__56_21)) begin
		main_56_59_reg <= main_56_59;
		if (start == 1'b0 && ^(main_56_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %60*/
	/*   %61 = or i32 %float_exception_flags.0, 16*/
		main_60_61 = (main_1_float_exception_flags0_reg | 32'd16);
end
always @(posedge clk) begin
	/* main: %60*/
	/*   %61 = or i32 %float_exception_flags.0, 16*/
	if ((cur_state == LEGUP_F_main_BB__60_22)) begin
		main_60_61_reg <= main_60_61;
		if (start == 1'b0 && ^(main_60_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_60_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %62*/
	/*   %63 = or i32 %float_exception_flags.0, 2*/
		main_62_63 = (main_1_float_exception_flags0_reg | 32'd2);
end
always @(posedge clk) begin
	/* main: %62*/
	/*   %63 = or i32 %float_exception_flags.0, 2*/
	if ((cur_state == LEGUP_F_main_BB__62_23)) begin
		main_62_63_reg <= main_62_63;
		if (start == 1'b0 && ^(main_62_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %62*/
	/*   %64 = shl nuw i64 %13, 63*/
		main_62_64 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %62*/
	/*   %64 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__62_23)) begin
		main_62_64_reg <= main_62_64;
		if (start == 1'b0 && ^(main_62_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %62*/
	/*   %65 = or i64 %64, 9218868437227405312*/
		main_62_65 = (main_62_64 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %62*/
	/*   %65 = or i64 %64, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__62_23)) begin
		main_62_65_reg <= main_62_65;
		if (start == 1'b0 && ^(main_62_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %67 = lshr i64 %9, 32*/
		main_66_67 = (main_1_9_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %67 = lshr i64 %9, 32*/
	if ((cur_state == LEGUP_F_main_BB__66_24)) begin
		main_66_67_reg <= main_66_67;
		if (start == 1'b0 && ^(main_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %extract.t.i.i5.i = trunc i64 %67 to i32*/
		main_66_extracttii5i = main_66_67[31:0];
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %extract.t.i.i5.i = trunc i64 %67 to i32*/
	if ((cur_state == LEGUP_F_main_BB__66_24)) begin
		main_66_extracttii5i_reg <= main_66_extracttii5i;
		if (start == 1'b0 && ^(main_66_extracttii5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_extracttii5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %68 = icmp ult i32 %extract.t.i.i5.i, 65536*/
		main_66_68 = (main_66_extracttii5i < 32'd65536);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %68 = icmp ult i32 %extract.t.i.i5.i, 65536*/
	if ((cur_state == LEGUP_F_main_BB__66_24)) begin
		main_66_68_reg <= main_66_68;
		if (start == 1'b0 && ^(main_66_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %69 = shl nuw nsw i64 %67, 16*/
		main_66_69 = (main_66_67 <<< (64'd16 % 64'd64));
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %69 = shl nuw nsw i64 %67, 16*/
	if ((cur_state == LEGUP_F_main_BB__66_24)) begin
		main_66_69_reg <= main_66_69;
		if (start == 1'b0 && ^(main_66_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %70 = trunc i64 %69 to i32*/
		main_66_70 = main_66_69[31:0];
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %70 = trunc i64 %69 to i32*/
	if ((cur_state == LEGUP_F_main_BB__66_24)) begin
		main_66_70_reg <= main_66_70;
		if (start == 1'b0 && ^(main_66_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %.a.i.i.i6.i = select i1 %68, i32 %70, i32 %extract.t.i.i5.i*/
		main_66_aiii6i = (main_66_68 ? main_66_70 : main_66_extracttii5i);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %.a.i.i.i6.i = select i1 %68, i32 %70, i32 %extract.t.i.i5.i*/
	if ((cur_state == LEGUP_F_main_BB__66_24)) begin
		main_66_aiii6i_reg <= main_66_aiii6i;
		if (start == 1'b0 && ^(main_66_aiii6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_aiii6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %..i.i.i7.i = select i1 %68, i32 16, i32 0*/
		main_66_iii7i = (main_66_68 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %..i.i.i7.i = select i1 %68, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__66_24)) begin
		main_66_iii7i_reg <= main_66_iii7i;
		if (start == 1'b0 && ^(main_66_iii7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_iii7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %66*/
	/*   %71 = icmp ult i32 %.a.i.i.i6.i, 16777216*/
		main_66_71 = (main_66_aiii6i < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %66*/
	/*   %71 = icmp ult i32 %.a.i.i.i6.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__66_24)) begin
		main_66_71_reg <= main_66_71;
		if (start == 1'b0 && ^(main_66_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_66_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %72*/
	/*   %73 = or i32 %..i.i.i7.i, 8*/
		main_72_73 = (main_66_iii7i_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %72*/
	/*   %73 = or i32 %..i.i.i7.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__72_25)) begin
		main_72_73_reg <= main_72_73;
		if (start == 1'b0 && ^(main_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_72_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %72*/
	/*   %74 = shl i32 %.a.i.i.i6.i, 8*/
		main_72_74 = (main_66_aiii6i_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %72*/
	/*   %74 = shl i32 %.a.i.i.i6.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__72_25)) begin
		main_72_74_reg <= main_72_74;
		if (start == 1'b0 && ^(main_72_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_72_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %.1.i.i.i8.i = phi i32 [ %74, %72 ], [ %.a.i.i.i6.i, %66 ]*/
	if ((((cur_state == LEGUP_F_main_BB__66_24) & (memory_controller_waitrequest == 1'd0)) & (main_66_71 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit10i_1iii8i = main_66_aiii6i;
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %.1.i.i.i8.i = phi i32 [ %74, %72 ], [ %.a.i.i.i6.i, %66 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__72_25) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexit10i_1iii8i = main_72_74;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %.1.i.i.i8.i = phi i32 [ %74, %72 ], [ %.a.i.i.i6.i, %66 ]*/
	if ((((cur_state == LEGUP_F_main_BB__66_24) & (memory_controller_waitrequest == 1'd0)) & (main_66_71 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit10i_1iii8i_reg <= main_normalizeFloat64Subnormalexit10i_1iii8i;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_1iii8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_1iii8i_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %.1.i.i.i8.i = phi i32 [ %74, %72 ], [ %.a.i.i.i6.i, %66 ]*/
	if (((cur_state == LEGUP_F_main_BB__72_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexit10i_1iii8i_reg <= main_normalizeFloat64Subnormalexit10i_1iii8i;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_1iii8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_1iii8i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %shiftCount.1.i.i.i9.i = phi i32 [ %73, %72 ], [ %..i.i.i7.i, %66 ]*/
	if ((((cur_state == LEGUP_F_main_BB__66_24) & (memory_controller_waitrequest == 1'd0)) & (main_66_71 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i = main_66_iii7i;
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %shiftCount.1.i.i.i9.i = phi i32 [ %73, %72 ], [ %..i.i.i7.i, %66 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__72_25) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i = main_72_73;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %shiftCount.1.i.i.i9.i = phi i32 [ %73, %72 ], [ %..i.i.i7.i, %66 ]*/
	if ((((cur_state == LEGUP_F_main_BB__66_24) & (memory_controller_waitrequest == 1'd0)) & (main_66_71 == 1'd0))) begin
		main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i_reg <= main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %shiftCount.1.i.i.i9.i = phi i32 [ %73, %72 ], [ %..i.i.i7.i, %66 ]*/
	if (((cur_state == LEGUP_F_main_BB__72_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i_reg <= main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %75 = lshr i32 %.1.i.i.i8.i, 24*/
		main_normalizeFloat64Subnormalexit10i_75 = (main_normalizeFloat64Subnormalexit10i_1iii8i_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %75 = lshr i32 %.1.i.i.i8.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_26)) begin
		main_normalizeFloat64Subnormalexit10i_75_reg <= main_normalizeFloat64Subnormalexit10i_75;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %76 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %75*/
		main_normalizeFloat64Subnormalexit10i_76 = (1'd0 | (4 * main_normalizeFloat64Subnormalexit10i_75));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %76 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %75*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_26)) begin
		main_normalizeFloat64Subnormalexit10i_76_reg <= main_normalizeFloat64Subnormalexit10i_76;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %77 = load i32* %76, align 4, !tbaa !5*/
		main_normalizeFloat64Subnormalexit10i_77 = countLeadingZeros32countLeadingZerosHigh_out_a;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %77 = load i32* %76, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27)) begin
		main_normalizeFloat64Subnormalexit10i_77_reg <= main_normalizeFloat64Subnormalexit10i_77;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %78 = add i32 %shiftCount.1.i.i.i9.i, %77*/
		main_normalizeFloat64Subnormalexit10i_78 = (main_normalizeFloat64Subnormalexit10i_shiftCount1iii9i_reg + main_normalizeFloat64Subnormalexit10i_77);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %78 = add i32 %shiftCount.1.i.i.i9.i, %77*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27)) begin
		main_normalizeFloat64Subnormalexit10i_78_reg <= main_normalizeFloat64Subnormalexit10i_78;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %79 = add nsw i32 %78, -11*/
		main_normalizeFloat64Subnormalexit10i_79 = (main_normalizeFloat64Subnormalexit10i_78 + -32'd11);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %79 = add nsw i32 %78, -11*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27)) begin
		main_normalizeFloat64Subnormalexit10i_79_reg <= main_normalizeFloat64Subnormalexit10i_79;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %80 = zext i32 %79 to i64*/
		main_normalizeFloat64Subnormalexit10i_80 = main_normalizeFloat64Subnormalexit10i_79;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %80 = zext i32 %79 to i64*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27)) begin
		main_normalizeFloat64Subnormalexit10i_80_reg <= main_normalizeFloat64Subnormalexit10i_80;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %81 = shl i64 %9, %80*/
		main_normalizeFloat64Subnormalexit10i_81 = (main_1_9_reg <<< (main_normalizeFloat64Subnormalexit10i_80 % 64'd64));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %81 = shl i64 %9, %80*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27)) begin
		main_normalizeFloat64Subnormalexit10i_81_reg <= main_normalizeFloat64Subnormalexit10i_81;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %82 = sub i32 12, %78*/
		main_normalizeFloat64Subnormalexit10i_82 = (32'd12 - main_normalizeFloat64Subnormalexit10i_78);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %82 = sub i32 12, %78*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27)) begin
		main_normalizeFloat64Subnormalexit10i_82_reg <= main_normalizeFloat64Subnormalexit10i_82;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexit10i_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexit10i_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %83*/
	/*   %84 = phi i32 [ %11, %40 ], [ %82, %normalizeFloat64Subnormal.exit10.i ]*/
	if (((((cur_state == LEGUP_F_main_BB__40_14) & (memory_controller_waitrequest == 1'd0)) & (main_1_11_reg != 32'd2047)) & (main_1_11_reg != 32'd0))) begin
		main_83_84 = main_1_11_reg;
	end
	/* main: %83*/
	/*   %84 = phi i32 [ %11, %40 ], [ %82, %normalizeFloat64Subnormal.exit10.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_83_84 = main_normalizeFloat64Subnormalexit10i_82;
	end
end
always @(posedge clk) begin
	/* main: %83*/
	/*   %84 = phi i32 [ %11, %40 ], [ %82, %normalizeFloat64Subnormal.exit10.i ]*/
	if (((((cur_state == LEGUP_F_main_BB__40_14) & (memory_controller_waitrequest == 1'd0)) & (main_1_11_reg != 32'd2047)) & (main_1_11_reg != 32'd0))) begin
		main_83_84_reg <= main_83_84;
		if (start == 1'b0 && ^(main_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_83_84_reg"); $finish; end
	end
	/* main: %83*/
	/*   %84 = phi i32 [ %11, %40 ], [ %82, %normalizeFloat64Subnormal.exit10.i ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_83_84_reg <= main_83_84;
		if (start == 1'b0 && ^(main_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_83_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %83*/
	/*   %85 = phi i64 [ %9, %40 ], [ %81, %normalizeFloat64Subnormal.exit10.i ]*/
	if (((((cur_state == LEGUP_F_main_BB__40_14) & (memory_controller_waitrequest == 1'd0)) & (main_1_11_reg != 32'd2047)) & (main_1_11_reg != 32'd0))) begin
		main_83_85 = main_1_9_reg;
	end
	/* main: %83*/
	/*   %85 = phi i64 [ %9, %40 ], [ %81, %normalizeFloat64Subnormal.exit10.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_83_85 = main_normalizeFloat64Subnormalexit10i_81;
	end
end
always @(posedge clk) begin
	/* main: %83*/
	/*   %85 = phi i64 [ %9, %40 ], [ %81, %normalizeFloat64Subnormal.exit10.i ]*/
	if (((((cur_state == LEGUP_F_main_BB__40_14) & (memory_controller_waitrequest == 1'd0)) & (main_1_11_reg != 32'd2047)) & (main_1_11_reg != 32'd0))) begin
		main_83_85_reg <= main_83_85;
		if (start == 1'b0 && ^(main_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_83_85_reg"); $finish; end
	end
	/* main: %83*/
	/*   %85 = phi i64 [ %9, %40 ], [ %81, %normalizeFloat64Subnormal.exit10.i ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_83_85_reg <= main_83_85;
		if (start == 1'b0 && ^(main_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_83_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %83*/
	/*   %86 = icmp eq i32 %8, 0*/
		main_83_86 = (main_1_8_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %83*/
	/*   %86 = icmp eq i32 %8, 0*/
	if ((cur_state == LEGUP_F_main_BB__83_28)) begin
		main_83_86_reg <= main_83_86;
		if (start == 1'b0 && ^(main_83_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_83_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %88 = lshr i32 4178942, %2*/
		main_87_88 = (32'd4178942 >>> (main_1_2_reg % 32));
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %88 = lshr i32 4178942, %2*/
	if ((cur_state == LEGUP_F_main_BB__87_29)) begin
		main_87_88_reg <= main_87_88;
		if (start == 1'b0 && ^(main_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %89 = and i32 %88, 1*/
		main_87_89 = (main_87_88 & 32'd1);
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %89 = and i32 %88, 1*/
	if ((cur_state == LEGUP_F_main_BB__87_29)) begin
		main_87_89_reg <= main_87_89;
		if (start == 1'b0 && ^(main_87_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %90 = icmp eq i32 %89, 0*/
		main_87_90 = (main_87_89 == 32'd0);
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %90 = icmp eq i32 %89, 0*/
	if ((cur_state == LEGUP_F_main_BB__87_29)) begin
		main_87_90_reg <= main_87_90;
		if (start == 1'b0 && ^(main_87_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %91*/
	/*   %92 = shl nuw i64 %13, 63*/
		main_91_92 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %91*/
	/*   %92 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__91_30)) begin
		main_91_92_reg <= main_91_92;
		if (start == 1'b0 && ^(main_91_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_91_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %93*/
	/*   %94 = lshr i64 %6, 32*/
		main_93_94 = (main_1_6_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %93*/
	/*   %94 = lshr i64 %6, 32*/
	if ((cur_state == LEGUP_F_main_BB__93_31)) begin
		main_93_94_reg <= main_93_94;
		if (start == 1'b0 && ^(main_93_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_93_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %93*/
	/*   %extract.t.i.i.i = trunc i64 %94 to i32*/
		main_93_extracttiii = main_93_94[31:0];
end
always @(posedge clk) begin
	/* main: %93*/
	/*   %extract.t.i.i.i = trunc i64 %94 to i32*/
	if ((cur_state == LEGUP_F_main_BB__93_31)) begin
		main_93_extracttiii_reg <= main_93_extracttiii;
		if (start == 1'b0 && ^(main_93_extracttiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_93_extracttiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %93*/
	/*   %95 = icmp ult i32 %extract.t.i.i.i, 65536*/
		main_93_95 = (main_93_extracttiii < 32'd65536);
end
always @(posedge clk) begin
	/* main: %93*/
	/*   %95 = icmp ult i32 %extract.t.i.i.i, 65536*/
	if ((cur_state == LEGUP_F_main_BB__93_31)) begin
		main_93_95_reg <= main_93_95;
		if (start == 1'b0 && ^(main_93_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_93_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %93*/
	/*   %96 = shl nuw nsw i64 %94, 16*/
		main_93_96 = (main_93_94 <<< (64'd16 % 64'd64));
end
always @(posedge clk) begin
	/* main: %93*/
	/*   %96 = shl nuw nsw i64 %94, 16*/
	if ((cur_state == LEGUP_F_main_BB__93_31)) begin
		main_93_96_reg <= main_93_96;
		if (start == 1'b0 && ^(main_93_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_93_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %93*/
	/*   %97 = trunc i64 %96 to i32*/
		main_93_97 = main_93_96[31:0];
end
always @(posedge clk) begin
	/* main: %93*/
	/*   %97 = trunc i64 %96 to i32*/
	if ((cur_state == LEGUP_F_main_BB__93_31)) begin
		main_93_97_reg <= main_93_97;
		if (start == 1'b0 && ^(main_93_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_93_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %93*/
	/*   %.a.i.i.i.i = select i1 %95, i32 %97, i32 %extract.t.i.i.i*/
		main_93_aiiii = (main_93_95 ? main_93_97 : main_93_extracttiii);
end
always @(posedge clk) begin
	/* main: %93*/
	/*   %.a.i.i.i.i = select i1 %95, i32 %97, i32 %extract.t.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__93_31)) begin
		main_93_aiiii_reg <= main_93_aiiii;
		if (start == 1'b0 && ^(main_93_aiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_93_aiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %93*/
	/*   %..i.i.i.i = select i1 %95, i32 16, i32 0*/
		main_93_iiii = (main_93_95 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %93*/
	/*   %..i.i.i.i = select i1 %95, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__93_31)) begin
		main_93_iiii_reg <= main_93_iiii;
		if (start == 1'b0 && ^(main_93_iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_93_iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %93*/
	/*   %98 = icmp ult i32 %.a.i.i.i.i, 16777216*/
		main_93_98 = (main_93_aiiii < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %93*/
	/*   %98 = icmp ult i32 %.a.i.i.i.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__93_31)) begin
		main_93_98_reg <= main_93_98;
		if (start == 1'b0 && ^(main_93_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_93_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %99*/
	/*   %100 = or i32 %..i.i.i.i, 8*/
		main_99_100 = (main_93_iiii_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %99*/
	/*   %100 = or i32 %..i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__99_32)) begin
		main_99_100_reg <= main_99_100;
		if (start == 1'b0 && ^(main_99_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_99_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %99*/
	/*   %101 = shl i32 %.a.i.i.i.i, 8*/
		main_99_101 = (main_93_aiiii_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %99*/
	/*   %101 = shl i32 %.a.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__99_32)) begin
		main_99_101_reg <= main_99_101;
		if (start == 1'b0 && ^(main_99_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_99_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %101, %99 ], [ %.a.i.i.i.i, %93 ]*/
	if ((((cur_state == LEGUP_F_main_BB__93_31) & (memory_controller_waitrequest == 1'd0)) & (main_93_98 == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_1iiii = main_93_aiiii;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %101, %99 ], [ %.a.i.i.i.i, %93 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__99_32) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexiti_1iiii = main_99_101;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %101, %99 ], [ %.a.i.i.i.i, %93 ]*/
	if ((((cur_state == LEGUP_F_main_BB__93_31) & (memory_controller_waitrequest == 1'd0)) & (main_93_98 == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_1iiii_reg <= main_normalizeFloat64Subnormalexiti_1iiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_1iiii_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %.1.i.i.i.i = phi i32 [ %101, %99 ], [ %.a.i.i.i.i, %93 ]*/
	if (((cur_state == LEGUP_F_main_BB__99_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_1iiii_reg <= main_normalizeFloat64Subnormalexiti_1iiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_1iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %100, %99 ], [ %..i.i.i.i, %93 ]*/
	if ((((cur_state == LEGUP_F_main_BB__93_31) & (memory_controller_waitrequest == 1'd0)) & (main_93_98 == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_shiftCount1iiii = main_93_iiii;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %100, %99 ], [ %..i.i.i.i, %93 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__99_32) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeFloat64Subnormalexiti_shiftCount1iiii = main_99_100;
	end
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %100, %99 ], [ %..i.i.i.i, %93 ]*/
	if ((((cur_state == LEGUP_F_main_BB__93_31) & (memory_controller_waitrequest == 1'd0)) & (main_93_98 == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg <= main_normalizeFloat64Subnormalexiti_shiftCount1iiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_shiftCount1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg"); $finish; end
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %shiftCount.1.i.i.i.i = phi i32 [ %100, %99 ], [ %..i.i.i.i, %93 ]*/
	if (((cur_state == LEGUP_F_main_BB__99_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg <= main_normalizeFloat64Subnormalexiti_shiftCount1iiii;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_shiftCount1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %102 = lshr i32 %.1.i.i.i.i, 24*/
		main_normalizeFloat64Subnormalexiti_102 = (main_normalizeFloat64Subnormalexiti_1iiii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %102 = lshr i32 %.1.i.i.i.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_33)) begin
		main_normalizeFloat64Subnormalexiti_102_reg <= main_normalizeFloat64Subnormalexiti_102;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %103 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %102*/
		main_normalizeFloat64Subnormalexiti_103 = (1'd0 | (4 * main_normalizeFloat64Subnormalexiti_102));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %103 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %102*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_33)) begin
		main_normalizeFloat64Subnormalexiti_103_reg <= main_normalizeFloat64Subnormalexiti_103;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %104 = load i32* %103, align 4, !tbaa !5*/
		main_normalizeFloat64Subnormalexiti_104 = countLeadingZeros32countLeadingZerosHigh_out_a;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %104 = load i32* %103, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34)) begin
		main_normalizeFloat64Subnormalexiti_104_reg <= main_normalizeFloat64Subnormalexiti_104;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %105 = add i32 %shiftCount.1.i.i.i.i, %104*/
		main_normalizeFloat64Subnormalexiti_105 = (main_normalizeFloat64Subnormalexiti_shiftCount1iiii_reg + main_normalizeFloat64Subnormalexiti_104);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %105 = add i32 %shiftCount.1.i.i.i.i, %104*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34)) begin
		main_normalizeFloat64Subnormalexiti_105_reg <= main_normalizeFloat64Subnormalexiti_105;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %106 = add nsw i32 %105, -11*/
		main_normalizeFloat64Subnormalexiti_106 = (main_normalizeFloat64Subnormalexiti_105 + -32'd11);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %106 = add nsw i32 %105, -11*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34)) begin
		main_normalizeFloat64Subnormalexiti_106_reg <= main_normalizeFloat64Subnormalexiti_106;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %107 = zext i32 %106 to i64*/
		main_normalizeFloat64Subnormalexiti_107 = main_normalizeFloat64Subnormalexiti_106;
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %107 = zext i32 %106 to i64*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34)) begin
		main_normalizeFloat64Subnormalexiti_107_reg <= main_normalizeFloat64Subnormalexiti_107;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %108 = shl i64 %6, %107*/
		main_normalizeFloat64Subnormalexiti_108 = (main_1_6_reg <<< (main_normalizeFloat64Subnormalexiti_107 % 64'd64));
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %108 = shl i64 %6, %107*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34)) begin
		main_normalizeFloat64Subnormalexiti_108_reg <= main_normalizeFloat64Subnormalexiti_108;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %109 = sub i32 12, %105*/
		main_normalizeFloat64Subnormalexiti_109 = (32'd12 - main_normalizeFloat64Subnormalexiti_105);
end
always @(posedge clk) begin
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %109 = sub i32 12, %105*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34)) begin
		main_normalizeFloat64Subnormalexiti_109_reg <= main_normalizeFloat64Subnormalexiti_109;
		if (start == 1'b0 && ^(main_normalizeFloat64Subnormalexiti_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeFloat64Subnormalexiti_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %111 = phi i32 [ %109, %normalizeFloat64Subnormal.exit.i ], [ %8, %83 ]*/
	if ((((cur_state == LEGUP_F_main_BB__83_28) & (memory_controller_waitrequest == 1'd0)) & (main_83_86 == 1'd0))) begin
		main_110_111 = main_1_8_reg;
	end
	/* main: %110*/
	/*   %111 = phi i32 [ %109, %normalizeFloat64Subnormal.exit.i ], [ %8, %83 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_110_111 = main_normalizeFloat64Subnormalexiti_109;
	end
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %111 = phi i32 [ %109, %normalizeFloat64Subnormal.exit.i ], [ %8, %83 ]*/
	if ((((cur_state == LEGUP_F_main_BB__83_28) & (memory_controller_waitrequest == 1'd0)) & (main_83_86 == 1'd0))) begin
		main_110_111_reg <= main_110_111;
		if (start == 1'b0 && ^(main_110_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_111_reg"); $finish; end
	end
	/* main: %110*/
	/*   %111 = phi i32 [ %109, %normalizeFloat64Subnormal.exit.i ], [ %8, %83 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_110_111_reg <= main_110_111;
		if (start == 1'b0 && ^(main_110_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %112 = phi i64 [ %108, %normalizeFloat64Subnormal.exit.i ], [ %6, %83 ]*/
	if ((((cur_state == LEGUP_F_main_BB__83_28) & (memory_controller_waitrequest == 1'd0)) & (main_83_86 == 1'd0))) begin
		main_110_112 = main_1_6_reg;
	end
	/* main: %110*/
	/*   %112 = phi i64 [ %108, %normalizeFloat64Subnormal.exit.i ], [ %6, %83 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_110_112 = main_normalizeFloat64Subnormalexiti_108;
	end
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %112 = phi i64 [ %108, %normalizeFloat64Subnormal.exit.i ], [ %6, %83 ]*/
	if ((((cur_state == LEGUP_F_main_BB__83_28) & (memory_controller_waitrequest == 1'd0)) & (main_83_86 == 1'd0))) begin
		main_110_112_reg <= main_110_112;
		if (start == 1'b0 && ^(main_110_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_112_reg"); $finish; end
	end
	/* main: %110*/
	/*   %112 = phi i64 [ %108, %normalizeFloat64Subnormal.exit.i ], [ %6, %83 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_110_112_reg <= main_110_112;
		if (start == 1'b0 && ^(main_110_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %113 = sub nsw i32 %111, %84*/
		main_110_113 = (main_110_111_reg - main_83_84_reg);
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %113 = sub nsw i32 %111, %84*/
	if ((cur_state == LEGUP_F_main_BB__110_35)) begin
		main_110_113_reg <= main_110_113;
		if (start == 1'b0 && ^(main_110_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %114 = add nsw i32 %113, 1021*/
		main_110_114 = (main_110_113 + 32'd1021);
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %114 = add nsw i32 %113, 1021*/
	if ((cur_state == LEGUP_F_main_BB__110_35)) begin
		main_110_114_reg <= main_110_114;
		if (start == 1'b0 && ^(main_110_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %115 = shl i64 %112, 10*/
		main_110_115 = (main_110_112_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %115 = shl i64 %112, 10*/
	if ((cur_state == LEGUP_F_main_BB__110_35)) begin
		main_110_115_reg <= main_110_115;
		if (start == 1'b0 && ^(main_110_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %116 = or i64 %115, 4611686018427387904*/
		main_110_116 = (main_110_115 | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %116 = or i64 %115, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__110_35)) begin
		main_110_116_reg <= main_110_116;
		if (start == 1'b0 && ^(main_110_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %117 = shl i64 %85, 11*/
		main_110_117 = (main_83_85_reg <<< (64'd11 % 64'd64));
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %117 = shl i64 %85, 11*/
	if ((cur_state == LEGUP_F_main_BB__110_35)) begin
		main_110_117_reg <= main_110_117;
		if (start == 1'b0 && ^(main_110_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %118 = or i64 %117, -9223372036854775808*/
		main_110_118 = (main_110_117 | -64'd9223372036854775808);
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %118 = or i64 %117, -9223372036854775808*/
	if ((cur_state == LEGUP_F_main_BB__110_35)) begin
		main_110_118_reg <= main_110_118;
		if (start == 1'b0 && ^(main_110_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %119 = shl i64 %116, 1*/
		main_110_119 = (main_110_116 <<< (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %119 = shl i64 %116, 1*/
	if ((cur_state == LEGUP_F_main_BB__110_35)) begin
		main_110_119_reg <= main_110_119;
		if (start == 1'b0 && ^(main_110_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %120 = icmp ugt i64 %118, %119*/
		main_110_120 = (main_110_118 > main_110_119);
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %120 = icmp ugt i64 %118, %119*/
	if ((cur_state == LEGUP_F_main_BB__110_35)) begin
		main_110_120_reg <= main_110_120;
		if (start == 1'b0 && ^(main_110_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %122 = lshr exact i64 %116, 1*/
		main_121_122 = (main_110_116_reg >>> (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %122 = lshr exact i64 %116, 1*/
	if ((cur_state == LEGUP_F_main_BB__121_36)) begin
		main_121_122_reg <= main_121_122;
		if (start == 1'b0 && ^(main_121_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %123 = add nsw i32 %113, 1022*/
		main_121_123 = (main_110_113_reg + 32'd1022);
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %123 = add nsw i32 %113, 1022*/
	if ((cur_state == LEGUP_F_main_BB__121_36)) begin
		main_121_123_reg <= main_121_123;
		if (start == 1'b0 && ^(main_121_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %124*/
	/*   %125 = phi i64 [ %122, %121 ], [ %116, %110 ]*/
	if ((((cur_state == LEGUP_F_main_BB__110_35) & (memory_controller_waitrequest == 1'd0)) & (main_110_120 == 1'd1))) begin
		main_124_125 = main_110_116;
	end
	/* main: %124*/
	/*   %125 = phi i64 [ %122, %121 ], [ %116, %110 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__121_36) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_124_125 = main_121_122;
	end
end
always @(posedge clk) begin
	/* main: %124*/
	/*   %125 = phi i64 [ %122, %121 ], [ %116, %110 ]*/
	if ((((cur_state == LEGUP_F_main_BB__110_35) & (memory_controller_waitrequest == 1'd0)) & (main_110_120 == 1'd1))) begin
		main_124_125_reg <= main_124_125;
		if (start == 1'b0 && ^(main_124_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_124_125_reg"); $finish; end
	end
	/* main: %124*/
	/*   %125 = phi i64 [ %122, %121 ], [ %116, %110 ]*/
	if (((cur_state == LEGUP_F_main_BB__121_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_124_125_reg <= main_124_125;
		if (start == 1'b0 && ^(main_124_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_124_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %124*/
	/*   %zExp.0.i = phi i32 [ %123, %121 ], [ %114, %110 ]*/
	if ((((cur_state == LEGUP_F_main_BB__110_35) & (memory_controller_waitrequest == 1'd0)) & (main_110_120 == 1'd1))) begin
		main_124_zExp0i = main_110_114;
	end
	/* main: %124*/
	/*   %zExp.0.i = phi i32 [ %123, %121 ], [ %114, %110 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__121_36) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_124_zExp0i = main_121_123;
	end
end
always @(posedge clk) begin
	/* main: %124*/
	/*   %zExp.0.i = phi i32 [ %123, %121 ], [ %114, %110 ]*/
	if ((((cur_state == LEGUP_F_main_BB__110_35) & (memory_controller_waitrequest == 1'd0)) & (main_110_120 == 1'd1))) begin
		main_124_zExp0i_reg <= main_124_zExp0i;
		if (start == 1'b0 && ^(main_124_zExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_124_zExp0i_reg"); $finish; end
	end
	/* main: %124*/
	/*   %zExp.0.i = phi i32 [ %123, %121 ], [ %114, %110 ]*/
	if (((cur_state == LEGUP_F_main_BB__121_36) & (memory_controller_waitrequest == 1'd0))) begin
		main_124_zExp0i_reg <= main_124_zExp0i;
		if (start == 1'b0 && ^(main_124_zExp0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_124_zExp0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %124*/
	/*   %126 = icmp ugt i64 %118, %125*/
		main_124_126 = (main_110_118_reg > main_124_125_reg);
end
always @(posedge clk) begin
	/* main: %124*/
	/*   %126 = icmp ugt i64 %118, %125*/
	if ((cur_state == LEGUP_F_main_BB__124_37)) begin
		main_124_126_reg <= main_124_126;
		if (start == 1'b0 && ^(main_124_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_124_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %127*/
	/*   %128 = lshr i64 %118, 32*/
		main_127_128 = (main_110_118_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %127*/
	/*   %128 = lshr i64 %118, 32*/
	if ((cur_state == LEGUP_F_main_BB__127_38)) begin
		main_127_128_reg <= main_127_128;
		if (start == 1'b0 && ^(main_127_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %127*/
	/*   %129 = shl nuw i64 %128, 32*/
		main_127_129 = (main_127_128 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %127*/
	/*   %129 = shl nuw i64 %128, 32*/
	if ((cur_state == LEGUP_F_main_BB__127_38)) begin
		main_127_129_reg <= main_127_129;
		if (start == 1'b0 && ^(main_127_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %127*/
	/*   %130 = icmp ugt i64 %129, %125*/
		main_127_130 = (main_127_129 > main_124_125_reg);
end
always @(posedge clk) begin
	/* main: %127*/
	/*   %130 = icmp ugt i64 %129, %125*/
	if ((cur_state == LEGUP_F_main_BB__127_38)) begin
		main_127_130_reg <= main_127_130;
		if (start == 1'b0 && ^(main_127_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_127_130_reg"); $finish; end
	end
end
always @(*) begin
	main_131_132 = main_unsigned_divide_64_0;
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %132 = udiv i64 %125, %128*/
	if ((cur_state == LEGUP_F_main_BB__131_103)) begin
		main_131_132_reg <= main_131_132;
		if (start == 1'b0 && ^(main_131_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_132_reg"); $finish; end
	end
	/* main: %131*/
	/*   %132 = udiv i64 %125, %128*/
	if ((cur_state == LEGUP_F_main_BB__131_103)) begin
		main_131_132_reg <= main_131_132;
		if (start == 1'b0 && ^(main_131_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %131*/
	/*   %133 = shl i64 %132, 32*/
		main_131_133 = (main_131_132 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %131*/
	/*   %133 = shl i64 %132, 32*/
	if ((cur_state == LEGUP_F_main_BB__131_103)) begin
		main_131_133_reg <= main_131_133;
		if (start == 1'b0 && ^(main_131_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_131_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %135 = phi i64 [ %133, %131 ], [ -4294967296, %127 ]*/
	if ((((cur_state == LEGUP_F_main_BB__127_38) & (memory_controller_waitrequest == 1'd0)) & (main_127_130 == 1'd0))) begin
		main_134_135 = -64'd4294967296;
	end
	/* main: %134*/
	/*   %135 = phi i64 [ %133, %131 ], [ -4294967296, %127 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__131_103) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_134_135 = main_131_133;
	end
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %135 = phi i64 [ %133, %131 ], [ -4294967296, %127 ]*/
	if ((((cur_state == LEGUP_F_main_BB__127_38) & (memory_controller_waitrequest == 1'd0)) & (main_127_130 == 1'd0))) begin
		main_134_135_reg <= main_134_135;
		if (start == 1'b0 && ^(main_134_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_135_reg"); $finish; end
	end
	/* main: %134*/
	/*   %135 = phi i64 [ %133, %131 ], [ -4294967296, %127 ]*/
	if (((cur_state == LEGUP_F_main_BB__131_103) & (memory_controller_waitrequest == 1'd0))) begin
		main_134_135_reg <= main_134_135;
		if (start == 1'b0 && ^(main_134_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %136 = lshr exact i64 %135, 32*/
		main_134_136 = (main_134_135_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %136 = lshr exact i64 %135, 32*/
	if ((cur_state == LEGUP_F_main_BB__134_104)) begin
		main_134_136_reg <= main_134_136;
		if (start == 1'b0 && ^(main_134_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %137 = and i64 %117, 4294965248*/
		main_134_137 = (main_110_117_reg & 64'd4294965248);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %137 = and i64 %117, 4294965248*/
	if ((cur_state == LEGUP_F_main_BB__134_104)) begin
		main_134_137_reg <= main_134_137;
		if (start == 1'b0 && ^(main_134_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_137_reg"); $finish; end
	end
end
always @(*) begin
	main_134_138 = main_134_138_stage0_reg;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %138 = mul i64 %136, %137*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_138_reg <= main_134_138;
		if (start == 1'b0 && ^(main_134_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_138_reg"); $finish; end
	end
	/* main: %134*/
	/*   %138 = mul i64 %136, %137*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_138_reg <= main_134_138;
		if (start == 1'b0 && ^(main_134_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_138_reg"); $finish; end
	end
end
always @(*) begin
	main_134_139 = main_134_139_stage0_reg;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %139 = mul i64 %136, %128*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_139_reg <= main_134_139;
		if (start == 1'b0 && ^(main_134_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_139_reg"); $finish; end
	end
	/* main: %134*/
	/*   %139 = mul i64 %136, %128*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_139_reg <= main_134_139;
		if (start == 1'b0 && ^(main_134_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %140 = lshr i64 %138, 32*/
		main_134_140 = (main_134_138 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %140 = lshr i64 %138, 32*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_140_reg <= main_134_140;
		if (start == 1'b0 && ^(main_134_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %141 = shl i64 %138, 32*/
		main_134_141 = (main_134_138 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %141 = shl i64 %138, 32*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_141_reg <= main_134_141;
		if (start == 1'b0 && ^(main_134_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %142 = sub i64 0, %141*/
		main_134_142 = (64'd0 - main_134_141);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %142 = sub i64 0, %141*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_142_reg <= main_134_142;
		if (start == 1'b0 && ^(main_134_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %143 = icmp ne i64 %141, 0*/
		main_134_143 = (main_134_141 != 64'd0);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %143 = icmp ne i64 %141, 0*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_143_reg <= main_134_143;
		if (start == 1'b0 && ^(main_134_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %.neg.i.i.i = sext i1 %143 to i64*/
		main_134_negiii = $signed(main_134_143);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %.neg.i.i.i = sext i1 %143 to i64*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_negiii_reg <= main_134_negiii;
		if (start == 1'b0 && ^(main_134_negiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_negiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %.neg3.i.i = sub i64 %125, %139*/
		main_134_neg3ii = (main_124_125_reg - main_134_139);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %.neg3.i.i = sub i64 %125, %139*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_neg3ii_reg <= main_134_neg3ii;
		if (start == 1'b0 && ^(main_134_neg3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_neg3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %144 = sub i64 %.neg3.i.i, %140*/
		main_134_144 = (main_134_neg3ii - main_134_140);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %144 = sub i64 %.neg3.i.i, %140*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_144_reg <= main_134_144;
		if (start == 1'b0 && ^(main_134_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %145 = add i64 %144, %.neg.i.i.i*/
		main_134_145 = (main_134_144 + main_134_negiii);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %145 = add i64 %144, %.neg.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_145_reg <= main_134_145;
		if (start == 1'b0 && ^(main_134_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %146 = icmp slt i64 %145, 0*/
		main_134_146 = ($signed(main_134_145) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %146 = icmp slt i64 %145, 0*/
	if ((cur_state == LEGUP_F_main_BB__134_105)) begin
		main_134_146_reg <= main_134_146;
		if (start == 1'b0 && ^(main_134_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %147 = shl i64 %85, 43*/
		main_lrphii_147 = (main_83_85_reg <<< (64'd43 % 64'd64));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %147 = shl i64 %85, 43*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_106)) begin
		main_lrphii_147_reg <= main_lrphii_147;
		if (start == 1'b0 && ^(main_lrphii_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %overflow_intrinsic1 = zext i64 %147 to i65*/
		main_lrphii_overflow_intrinsic1 = main_lrphii_147;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %overflow_intrinsic1 = zext i64 %147 to i65*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_106)) begin
		main_lrphii_overflow_intrinsic1_reg <= main_lrphii_overflow_intrinsic1;
		if (start == 1'b0 && ^(main_lrphii_overflow_intrinsic1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_overflow_intrinsic1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %z.05.i.i = phi i64 [ %135, %.lr.ph.i.i ], [ %151, %148 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_148_z05ii = main_134_135_reg;
	end
	/* main: %148*/
	/*   %z.05.i.i = phi i64 [ %135, %.lr.ph.i.i ], [ %151, %148 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__148_108) & (memory_controller_waitrequest == 1'd0)) & (main_148_155 == 1'd1))) */ begin
		main_148_z05ii = main_148_151_reg;
	end
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %z.05.i.i = phi i64 [ %135, %.lr.ph.i.i ], [ %151, %148 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_148_z05ii_reg <= main_148_z05ii;
		if (start == 1'b0 && ^(main_148_z05ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_z05ii_reg"); $finish; end
	end
	/* main: %148*/
	/*   %z.05.i.i = phi i64 [ %135, %.lr.ph.i.i ], [ %151, %148 ]*/
	if ((((cur_state == LEGUP_F_main_BB__148_108) & (memory_controller_waitrequest == 1'd0)) & (main_148_155 == 1'd1))) begin
		main_148_z05ii_reg <= main_148_z05ii;
		if (start == 1'b0 && ^(main_148_z05ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_z05ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %149 = phi i64 [ %142, %.lr.ph.i.i ], [ %overflow_intrinsic_sum, %148 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_148_149 = main_134_142_reg;
	end
	/* main: %148*/
	/*   %149 = phi i64 [ %142, %.lr.ph.i.i ], [ %overflow_intrinsic_sum, %148 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__148_108) & (memory_controller_waitrequest == 1'd0)) & (main_148_155 == 1'd1))) */ begin
		main_148_149 = main_148_overflow_intrinsic_sum_reg;
	end
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %149 = phi i64 [ %142, %.lr.ph.i.i ], [ %overflow_intrinsic_sum, %148 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_148_149_reg <= main_148_149;
		if (start == 1'b0 && ^(main_148_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_149_reg"); $finish; end
	end
	/* main: %148*/
	/*   %149 = phi i64 [ %142, %.lr.ph.i.i ], [ %overflow_intrinsic_sum, %148 ]*/
	if ((((cur_state == LEGUP_F_main_BB__148_108) & (memory_controller_waitrequest == 1'd0)) & (main_148_155 == 1'd1))) begin
		main_148_149_reg <= main_148_149;
		if (start == 1'b0 && ^(main_148_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %150 = phi i64 [ %145, %.lr.ph.i.i ], [ %154, %148 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_148_150 = main_134_145_reg;
	end
	/* main: %148*/
	/*   %150 = phi i64 [ %145, %.lr.ph.i.i ], [ %154, %148 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__148_108) & (memory_controller_waitrequest == 1'd0)) & (main_148_155 == 1'd1))) */ begin
		main_148_150 = main_148_154;
	end
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %150 = phi i64 [ %145, %.lr.ph.i.i ], [ %154, %148 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_148_150_reg <= main_148_150;
		if (start == 1'b0 && ^(main_148_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_150_reg"); $finish; end
	end
	/* main: %148*/
	/*   %150 = phi i64 [ %145, %.lr.ph.i.i ], [ %154, %148 ]*/
	if ((((cur_state == LEGUP_F_main_BB__148_108) & (memory_controller_waitrequest == 1'd0)) & (main_148_155 == 1'd1))) begin
		main_148_150_reg <= main_148_150;
		if (start == 1'b0 && ^(main_148_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %151 = add i64 %z.05.i.i, -4294967296*/
		main_148_151 = (main_148_z05ii_reg + -64'd4294967296);
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %151 = add i64 %z.05.i.i, -4294967296*/
	if ((cur_state == LEGUP_F_main_BB__148_107)) begin
		main_148_151_reg <= main_148_151;
		if (start == 1'b0 && ^(main_148_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %overflow_intrinsic = zext i64 %149 to i65*/
		main_148_overflow_intrinsic = main_148_149_reg;
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %overflow_intrinsic = zext i64 %149 to i65*/
	if ((cur_state == LEGUP_F_main_BB__148_107)) begin
		main_148_overflow_intrinsic_reg <= main_148_overflow_intrinsic;
		if (start == 1'b0 && ^(main_148_overflow_intrinsic) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_overflow_intrinsic_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %overflow_intrinsic2 = add nuw i65 %overflow_intrinsic, %overflow_intrinsic1*/
		main_148_overflow_intrinsic2 = (main_148_overflow_intrinsic + main_lrphii_overflow_intrinsic1_reg);
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %overflow_intrinsic2 = add nuw i65 %overflow_intrinsic, %overflow_intrinsic1*/
	if ((cur_state == LEGUP_F_main_BB__148_107)) begin
		main_148_overflow_intrinsic2_reg <= main_148_overflow_intrinsic2;
		if (start == 1'b0 && ^(main_148_overflow_intrinsic2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_overflow_intrinsic2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64*/
		main_148_overflow_intrinsic_sum = main_148_overflow_intrinsic2[63:0];
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64*/
	if ((cur_state == LEGUP_F_main_BB__148_107)) begin
		main_148_overflow_intrinsic_sum_reg <= main_148_overflow_intrinsic_sum;
		if (start == 1'b0 && ^(main_148_overflow_intrinsic_sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_overflow_intrinsic_sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %overflow_intrinsic3 = lshr i65 %overflow_intrinsic2, 64*/
		main_148_overflow_intrinsic3 = (main_148_overflow_intrinsic2 >>> (65'd64 % 65'd65));
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %overflow_intrinsic3 = lshr i65 %overflow_intrinsic2, 64*/
	if ((cur_state == LEGUP_F_main_BB__148_107)) begin
		main_148_overflow_intrinsic3_reg <= main_148_overflow_intrinsic3;
		if (start == 1'b0 && ^(main_148_overflow_intrinsic3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_overflow_intrinsic3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %152 = add i64 %150, %128*/
		main_148_152 = (main_148_150_reg + main_127_128_reg);
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %152 = add i64 %150, %128*/
	if ((cur_state == LEGUP_F_main_BB__148_107)) begin
		main_148_152_reg <= main_148_152;
		if (start == 1'b0 && ^(main_148_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %153 = trunc i65 %overflow_intrinsic3 to i64*/
		main_148_153 = main_148_overflow_intrinsic3[63:0];
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %153 = trunc i65 %overflow_intrinsic3 to i64*/
	if ((cur_state == LEGUP_F_main_BB__148_107)) begin
		main_148_153_reg <= main_148_153;
		if (start == 1'b0 && ^(main_148_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %154 = add i64 %152, %153*/
		main_148_154 = (main_148_152_reg + main_148_153_reg);
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %154 = add i64 %152, %153*/
	if ((cur_state == LEGUP_F_main_BB__148_108)) begin
		main_148_154_reg <= main_148_154;
		if (start == 1'b0 && ^(main_148_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %155 = icmp slt i64 %154, 0*/
		main_148_155 = ($signed(main_148_154) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %155 = icmp slt i64 %154, 0*/
	if ((cur_state == LEGUP_F_main_BB__148_108)) begin
		main_148_155_reg <= main_148_155;
		if (start == 1'b0 && ^(main_148_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %z.0.lcssa.i.i = phi i64 [ %135, %134 ], [ %151, %._crit_edge.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__134_105) & (memory_controller_waitrequest == 1'd0)) & (main_134_146 == 1'd0))) begin
		main__crit_edgeii_z0lcssaii = main_134_135_reg;
	end
	/* main: %._crit_edge.i.i*/
	/*   %z.0.lcssa.i.i = phi i64 [ %135, %134 ], [ %151, %._crit_edge.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgeiiloopexit_109) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgeii_z0lcssaii = main_148_151_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %z.0.lcssa.i.i = phi i64 [ %135, %134 ], [ %151, %._crit_edge.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__134_105) & (memory_controller_waitrequest == 1'd0)) & (main_134_146 == 1'd0))) begin
		main__crit_edgeii_z0lcssaii_reg <= main__crit_edgeii_z0lcssaii;
		if (start == 1'b0 && ^(main__crit_edgeii_z0lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_z0lcssaii_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i*/
	/*   %z.0.lcssa.i.i = phi i64 [ %135, %134 ], [ %151, %._crit_edge.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeiiloopexit_109) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgeii_z0lcssaii_reg <= main__crit_edgeii_z0lcssaii;
		if (start == 1'b0 && ^(main__crit_edgeii_z0lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_z0lcssaii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa4.i.i = phi i64 [ %142, %134 ], [ %overflow_intrinsic_sum, %._crit_edge.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__134_105) & (memory_controller_waitrequest == 1'd0)) & (main_134_146 == 1'd0))) begin
		main__crit_edgeii_lcssa4ii = main_134_142;
	end
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa4.i.i = phi i64 [ %142, %134 ], [ %overflow_intrinsic_sum, %._crit_edge.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgeiiloopexit_109) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgeii_lcssa4ii = main_148_overflow_intrinsic_sum_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa4.i.i = phi i64 [ %142, %134 ], [ %overflow_intrinsic_sum, %._crit_edge.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__134_105) & (memory_controller_waitrequest == 1'd0)) & (main_134_146 == 1'd0))) begin
		main__crit_edgeii_lcssa4ii_reg <= main__crit_edgeii_lcssa4ii;
		if (start == 1'b0 && ^(main__crit_edgeii_lcssa4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_lcssa4ii_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa4.i.i = phi i64 [ %142, %134 ], [ %overflow_intrinsic_sum, %._crit_edge.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeiiloopexit_109) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgeii_lcssa4ii_reg <= main__crit_edgeii_lcssa4ii;
		if (start == 1'b0 && ^(main__crit_edgeii_lcssa4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_lcssa4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa.i.i = phi i64 [ %145, %134 ], [ %154, %._crit_edge.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__134_105) & (memory_controller_waitrequest == 1'd0)) & (main_134_146 == 1'd0))) begin
		main__crit_edgeii_lcssaii = main_134_145;
	end
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa.i.i = phi i64 [ %145, %134 ], [ %154, %._crit_edge.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgeiiloopexit_109) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgeii_lcssaii = main_148_154_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa.i.i = phi i64 [ %145, %134 ], [ %154, %._crit_edge.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__134_105) & (memory_controller_waitrequest == 1'd0)) & (main_134_146 == 1'd0))) begin
		main__crit_edgeii_lcssaii_reg <= main__crit_edgeii_lcssaii;
		if (start == 1'b0 && ^(main__crit_edgeii_lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_lcssaii_reg"); $finish; end
	end
	/* main: %._crit_edge.i.i*/
	/*   %.lcssa.i.i = phi i64 [ %145, %134 ], [ %154, %._crit_edge.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeiiloopexit_109) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgeii_lcssaii_reg <= main__crit_edgeii_lcssaii;
		if (start == 1'b0 && ^(main__crit_edgeii_lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_lcssaii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %156 = shl i64 %.lcssa.i.i, 32*/
		main__crit_edgeii_156 = (main__crit_edgeii_lcssaii_reg <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %156 = shl i64 %.lcssa.i.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_110)) begin
		main__crit_edgeii_156_reg <= main__crit_edgeii_156;
		if (start == 1'b0 && ^(main__crit_edgeii_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %157 = lshr i64 %.lcssa4.i.i, 32*/
		main__crit_edgeii_157 = (main__crit_edgeii_lcssa4ii_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %157 = lshr i64 %.lcssa4.i.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_110)) begin
		main__crit_edgeii_157_reg <= main__crit_edgeii_157;
		if (start == 1'b0 && ^(main__crit_edgeii_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %158 = or i64 %156, %157*/
		main__crit_edgeii_158 = (main__crit_edgeii_156 | main__crit_edgeii_157);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %158 = or i64 %156, %157*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_110)) begin
		main__crit_edgeii_158_reg <= main__crit_edgeii_158;
		if (start == 1'b0 && ^(main__crit_edgeii_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i.i*/
	/*   %159 = icmp ugt i64 %129, %158*/
		main__crit_edgeii_159 = (main_127_129_reg > main__crit_edgeii_158);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i.i*/
	/*   %159 = icmp ugt i64 %129, %158*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgeii_110)) begin
		main__crit_edgeii_159_reg <= main__crit_edgeii_159;
		if (start == 1'b0 && ^(main__crit_edgeii_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgeii_159_reg"); $finish; end
	end
end
always @(*) begin
	main_160_161 = main_unsigned_divide_64_0;
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %161 = udiv i64 %158, %128*/
	if ((cur_state == LEGUP_F_main_BB__160_175)) begin
		main_160_161_reg <= main_160_161;
		if (start == 1'b0 && ^(main_160_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_161_reg"); $finish; end
	end
	/* main: %160*/
	/*   %161 = udiv i64 %158, %128*/
	if ((cur_state == LEGUP_F_main_BB__160_175)) begin
		main_160_161_reg <= main_160_161;
		if (start == 1'b0 && ^(main_160_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %162 = phi i64 [ %161, %160 ], [ 4294967295, %._crit_edge.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_110) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_159 == 1'd0))) begin
		main_estimateDiv128To64exiti_162 = 64'd4294967295;
	end
	/* main: %estimateDiv128To64.exit.i*/
	/*   %162 = phi i64 [ %161, %160 ], [ 4294967295, %._crit_edge.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__160_175) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_estimateDiv128To64exiti_162 = main_160_161;
	end
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %162 = phi i64 [ %161, %160 ], [ 4294967295, %._crit_edge.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgeii_110) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgeii_159 == 1'd0))) begin
		main_estimateDiv128To64exiti_162_reg <= main_estimateDiv128To64exiti_162;
		if (start == 1'b0 && ^(main_estimateDiv128To64exiti_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exiti_162_reg"); $finish; end
	end
	/* main: %estimateDiv128To64.exit.i*/
	/*   %162 = phi i64 [ %161, %160 ], [ 4294967295, %._crit_edge.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__160_175) & (memory_controller_waitrequest == 1'd0))) begin
		main_estimateDiv128To64exiti_162_reg <= main_estimateDiv128To64exiti_162;
		if (start == 1'b0 && ^(main_estimateDiv128To64exiti_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exiti_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %163 = or i64 %162, %z.0.lcssa.i.i*/
		main_estimateDiv128To64exiti_163 = (main_estimateDiv128To64exiti_162_reg | main__crit_edgeii_z0lcssaii_reg);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %163 = or i64 %162, %z.0.lcssa.i.i*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exiti_176)) begin
		main_estimateDiv128To64exiti_163_reg <= main_estimateDiv128To64exiti_163;
		if (start == 1'b0 && ^(main_estimateDiv128To64exiti_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exiti_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %164 = and i64 %163, 511*/
		main_estimateDiv128To64exiti_164 = (main_estimateDiv128To64exiti_163 & 64'd511);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %164 = and i64 %163, 511*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exiti_176)) begin
		main_estimateDiv128To64exiti_164_reg <= main_estimateDiv128To64exiti_164;
		if (start == 1'b0 && ^(main_estimateDiv128To64exiti_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exiti_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %165 = icmp ult i64 %164, 3*/
		main_estimateDiv128To64exiti_165 = (main_estimateDiv128To64exiti_164 < 64'd3);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.i*/
	/*   %165 = icmp ult i64 %164, 3*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exiti_176)) begin
		main_estimateDiv128To64exiti_165_reg <= main_estimateDiv128To64exiti_165;
		if (start == 1'b0 && ^(main_estimateDiv128To64exiti_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exiti_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %167 = lshr i64 %163, 32*/
		main_166_167 = (main_estimateDiv128To64exiti_163_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %167 = lshr i64 %163, 32*/
	if ((cur_state == LEGUP_F_main_BB__166_177)) begin
		main_166_167_reg <= main_166_167;
		if (start == 1'b0 && ^(main_166_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %168 = and i64 %163, 4294967295*/
		main_166_168 = (main_estimateDiv128To64exiti_163_reg & 64'd4294967295);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %168 = and i64 %163, 4294967295*/
	if ((cur_state == LEGUP_F_main_BB__166_177)) begin
		main_166_168_reg <= main_166_168;
		if (start == 1'b0 && ^(main_166_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_168_reg"); $finish; end
	end
end
always @(*) begin
	main_166_169 = main_166_169_stage0_reg;
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %169 = mul i64 %168, %137*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_169_reg <= main_166_169;
		if (start == 1'b0 && ^(main_166_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_169_reg"); $finish; end
	end
	/* main: %166*/
	/*   %169 = mul i64 %168, %137*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_169_reg <= main_166_169;
		if (start == 1'b0 && ^(main_166_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_169_reg"); $finish; end
	end
end
always @(*) begin
	main_166_170 = main_166_170_stage0_reg;
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %170 = mul i64 %167, %137*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_170_reg <= main_166_170;
		if (start == 1'b0 && ^(main_166_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_170_reg"); $finish; end
	end
	/* main: %166*/
	/*   %170 = mul i64 %167, %137*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_170_reg <= main_166_170;
		if (start == 1'b0 && ^(main_166_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_170_reg"); $finish; end
	end
end
always @(*) begin
	main_166_171 = main_166_171_stage0_reg;
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %171 = mul i64 %168, %128*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_171_reg <= main_166_171;
		if (start == 1'b0 && ^(main_166_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_171_reg"); $finish; end
	end
	/* main: %166*/
	/*   %171 = mul i64 %168, %128*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_171_reg <= main_166_171;
		if (start == 1'b0 && ^(main_166_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_171_reg"); $finish; end
	end
end
always @(*) begin
	main_166_172 = main_166_172_stage0_reg;
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %172 = mul i64 %167, %128*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_172_reg <= main_166_172;
		if (start == 1'b0 && ^(main_166_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_172_reg"); $finish; end
	end
	/* main: %166*/
	/*   %172 = mul i64 %167, %128*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_172_reg <= main_166_172;
		if (start == 1'b0 && ^(main_166_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %overflow_intrinsic4 = zext i64 %170 to i65*/
		main_166_overflow_intrinsic4 = main_166_170;
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %overflow_intrinsic4 = zext i64 %170 to i65*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_overflow_intrinsic4_reg <= main_166_overflow_intrinsic4;
		if (start == 1'b0 && ^(main_166_overflow_intrinsic4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_overflow_intrinsic4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %overflow_intrinsic5 = zext i64 %171 to i65*/
		main_166_overflow_intrinsic5 = main_166_171;
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %overflow_intrinsic5 = zext i64 %171 to i65*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_overflow_intrinsic5_reg <= main_166_overflow_intrinsic5;
		if (start == 1'b0 && ^(main_166_overflow_intrinsic5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_overflow_intrinsic5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %overflow_intrinsic6 = add nuw i65 %overflow_intrinsic4, %overflow_intrinsic5*/
		main_166_overflow_intrinsic6 = (main_166_overflow_intrinsic4 + main_166_overflow_intrinsic5);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %overflow_intrinsic6 = add nuw i65 %overflow_intrinsic4, %overflow_intrinsic5*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_overflow_intrinsic6_reg <= main_166_overflow_intrinsic6;
		if (start == 1'b0 && ^(main_166_overflow_intrinsic6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_overflow_intrinsic6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64*/
		main_166_overflow_intrinsic_sum7 = main_166_overflow_intrinsic6[63:0];
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_overflow_intrinsic_sum7_reg <= main_166_overflow_intrinsic_sum7;
		if (start == 1'b0 && ^(main_166_overflow_intrinsic_sum7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_overflow_intrinsic_sum7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %173 = lshr i65 %overflow_intrinsic6, 32*/
		main_166_173 = (main_166_overflow_intrinsic6 >>> (65'd32 % 65'd65));
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %173 = lshr i65 %overflow_intrinsic6, 32*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_173_reg <= main_166_173;
		if (start == 1'b0 && ^(main_166_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %.tr = trunc i65 %173 to i64*/
		main_166_tr = main_166_173[63:0];
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %.tr = trunc i65 %173 to i64*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_tr_reg <= main_166_tr;
		if (start == 1'b0 && ^(main_166_tr) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_tr_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %174 = and i64 %.tr, 4294967296*/
		main_166_174 = (main_166_tr & 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %174 = and i64 %.tr, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_174_reg <= main_166_174;
		if (start == 1'b0 && ^(main_166_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %175 = lshr i64 %overflow_intrinsic_sum7, 32*/
		main_166_175 = (main_166_overflow_intrinsic_sum7 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %175 = lshr i64 %overflow_intrinsic_sum7, 32*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_175_reg <= main_166_175;
		if (start == 1'b0 && ^(main_166_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %176 = or i64 %174, %175*/
		main_166_176 = (main_166_174_reg | main_166_175_reg);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %176 = or i64 %174, %175*/
	if ((cur_state == LEGUP_F_main_BB__166_179)) begin
		main_166_176_reg <= main_166_176;
		if (start == 1'b0 && ^(main_166_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %177 = shl i64 %overflow_intrinsic_sum7, 32*/
		main_166_177 = (main_166_overflow_intrinsic_sum7 <<< (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %177 = shl i64 %overflow_intrinsic_sum7, 32*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_177_reg <= main_166_177;
		if (start == 1'b0 && ^(main_166_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %overflow_intrinsic10 = zext i64 %169 to i65*/
		main_166_overflow_intrinsic10 = main_166_169;
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %overflow_intrinsic10 = zext i64 %169 to i65*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_overflow_intrinsic10_reg <= main_166_overflow_intrinsic10;
		if (start == 1'b0 && ^(main_166_overflow_intrinsic10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_overflow_intrinsic10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %overflow_intrinsic11 = zext i64 %177 to i65*/
		main_166_overflow_intrinsic11 = main_166_177;
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %overflow_intrinsic11 = zext i64 %177 to i65*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_overflow_intrinsic11_reg <= main_166_overflow_intrinsic11;
		if (start == 1'b0 && ^(main_166_overflow_intrinsic11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_overflow_intrinsic11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %overflow_intrinsic12 = add nuw i65 %overflow_intrinsic10, %overflow_intrinsic11*/
		main_166_overflow_intrinsic12 = (main_166_overflow_intrinsic10_reg + main_166_overflow_intrinsic11_reg);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %overflow_intrinsic12 = add nuw i65 %overflow_intrinsic10, %overflow_intrinsic11*/
	if ((cur_state == LEGUP_F_main_BB__166_179)) begin
		main_166_overflow_intrinsic12_reg <= main_166_overflow_intrinsic12;
		if (start == 1'b0 && ^(main_166_overflow_intrinsic12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_overflow_intrinsic12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %overflow_intrinsic_sum13 = trunc i65 %overflow_intrinsic12 to i64*/
		main_166_overflow_intrinsic_sum13 = main_166_overflow_intrinsic12[63:0];
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %overflow_intrinsic_sum13 = trunc i65 %overflow_intrinsic12 to i64*/
	if ((cur_state == LEGUP_F_main_BB__166_179)) begin
		main_166_overflow_intrinsic_sum13_reg <= main_166_overflow_intrinsic_sum13;
		if (start == 1'b0 && ^(main_166_overflow_intrinsic_sum13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_overflow_intrinsic_sum13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %178 = sub i64 0, %overflow_intrinsic_sum13*/
		main_166_178 = (64'd0 - main_166_overflow_intrinsic_sum13_reg);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %178 = sub i64 0, %overflow_intrinsic_sum13*/
	if ((cur_state == LEGUP_F_main_BB__166_180)) begin
		main_166_178_reg <= main_166_178;
		if (start == 1'b0 && ^(main_166_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %sext = ashr i65 %overflow_intrinsic12, 64*/
		main_166_sext = ($signed(main_166_overflow_intrinsic12) >>> 65'd64);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %sext = ashr i65 %overflow_intrinsic12, 64*/
	if ((cur_state == LEGUP_F_main_BB__166_179)) begin
		main_166_sext_reg <= main_166_sext;
		if (start == 1'b0 && ^(main_166_sext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_sext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %.neg29.i = trunc i65 %sext to i64*/
		main_166_neg29i = main_166_sext[63:0];
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %.neg29.i = trunc i65 %sext to i64*/
	if ((cur_state == LEGUP_F_main_BB__166_179)) begin
		main_166_neg29i_reg <= main_166_neg29i;
		if (start == 1'b0 && ^(main_166_neg29i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_neg29i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %179 = icmp ne i64 %overflow_intrinsic_sum13, 0*/
		main_166_179 = (main_166_overflow_intrinsic_sum13_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %179 = icmp ne i64 %overflow_intrinsic_sum13, 0*/
	if ((cur_state == LEGUP_F_main_BB__166_180)) begin
		main_166_179_reg <= main_166_179;
		if (start == 1'b0 && ^(main_166_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %.neg.i.i = sext i1 %179 to i64*/
		main_166_negii = $signed(main_166_179);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %.neg.i.i = sext i1 %179 to i64*/
	if ((cur_state == LEGUP_F_main_BB__166_180)) begin
		main_166_negii_reg <= main_166_negii;
		if (start == 1'b0 && ^(main_166_negii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_negii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %.neg31.i = sub i64 %125, %172*/
		main_166_neg31i = (main_124_125_reg - main_166_172);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %.neg31.i = sub i64 %125, %172*/
	if ((cur_state == LEGUP_F_main_BB__166_178)) begin
		main_166_neg31i_reg <= main_166_neg31i;
		if (start == 1'b0 && ^(main_166_neg31i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_neg31i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %.neg33.i = add i64 %.neg31.i, %.neg29.i*/
		main_166_neg33i = (main_166_neg31i_reg + main_166_neg29i_reg);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %.neg33.i = add i64 %.neg31.i, %.neg29.i*/
	if ((cur_state == LEGUP_F_main_BB__166_180)) begin
		main_166_neg33i_reg <= main_166_neg33i;
		if (start == 1'b0 && ^(main_166_neg33i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_neg33i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %180 = sub i64 %.neg33.i, %176*/
		main_166_180 = (main_166_neg33i - main_166_176_reg);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %180 = sub i64 %.neg33.i, %176*/
	if ((cur_state == LEGUP_F_main_BB__166_180)) begin
		main_166_180_reg <= main_166_180;
		if (start == 1'b0 && ^(main_166_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %181 = add i64 %180, %.neg.i.i*/
		main_166_181 = (main_166_180 + main_166_negii);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %181 = add i64 %180, %.neg.i.i*/
	if ((cur_state == LEGUP_F_main_BB__166_180)) begin
		main_166_181_reg <= main_166_181;
		if (start == 1'b0 && ^(main_166_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %182 = icmp slt i64 %181, 0*/
		main_166_182 = ($signed(main_166_181) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %182 = icmp slt i64 %181, 0*/
	if ((cur_state == LEGUP_F_main_BB__166_180)) begin
		main_166_182_reg <= main_166_182;
		if (start == 1'b0 && ^(main_166_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %overflow_intrinsic17 = zext i64 %118 to i65*/
		main_lrphipreheader_overflow_intrinsic17 = main_110_118_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %overflow_intrinsic17 = zext i64 %118 to i65*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_181)) begin
		main_lrphipreheader_overflow_intrinsic17_reg <= main_lrphipreheader_overflow_intrinsic17;
		if (start == 1'b0 && ^(main_lrphipreheader_overflow_intrinsic17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_overflow_intrinsic17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %zSig.037.i = phi i64 [ %185, %.lr.ph.i ], [ %163, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_181) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_zSig037i = main_estimateDiv128To64exiti_163_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %zSig.037.i = phi i64 [ %185, %.lr.ph.i ], [ %163, %.lr.ph.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi_183) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_188 == 1'd1))) */ begin
		main_lrphi_zSig037i = main_lrphi_185_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %zSig.037.i = phi i64 [ %185, %.lr.ph.i ], [ %163, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_181) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_zSig037i_reg <= main_lrphi_zSig037i;
		if (start == 1'b0 && ^(main_lrphi_zSig037i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_zSig037i_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %zSig.037.i = phi i64 [ %185, %.lr.ph.i ], [ %163, %.lr.ph.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_183) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_188 == 1'd1))) begin
		main_lrphi_zSig037i_reg <= main_lrphi_zSig037i;
		if (start == 1'b0 && ^(main_lrphi_zSig037i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_zSig037i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %183 = phi i64 [ %overflow_intrinsic_sum19, %.lr.ph.i ], [ %178, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_181) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_183 = main_166_178_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %183 = phi i64 [ %overflow_intrinsic_sum19, %.lr.ph.i ], [ %178, %.lr.ph.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi_183) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_188 == 1'd1))) */ begin
		main_lrphi_183 = main_lrphi_overflow_intrinsic_sum19_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %183 = phi i64 [ %overflow_intrinsic_sum19, %.lr.ph.i ], [ %178, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_181) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_183_reg <= main_lrphi_183;
		if (start == 1'b0 && ^(main_lrphi_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_183_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %183 = phi i64 [ %overflow_intrinsic_sum19, %.lr.ph.i ], [ %178, %.lr.ph.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_183) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_188 == 1'd1))) begin
		main_lrphi_183_reg <= main_lrphi_183;
		if (start == 1'b0 && ^(main_lrphi_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %184 = phi i64 [ %187, %.lr.ph.i ], [ %181, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_181) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_184 = main_166_181_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %184 = phi i64 [ %187, %.lr.ph.i ], [ %181, %.lr.ph.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi_183) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_188 == 1'd1))) */ begin
		main_lrphi_184 = main_lrphi_187;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %184 = phi i64 [ %187, %.lr.ph.i ], [ %181, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_181) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_184_reg <= main_lrphi_184;
		if (start == 1'b0 && ^(main_lrphi_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_184_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %184 = phi i64 [ %187, %.lr.ph.i ], [ %181, %.lr.ph.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_183) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_188 == 1'd1))) begin
		main_lrphi_184_reg <= main_lrphi_184;
		if (start == 1'b0 && ^(main_lrphi_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %185 = add i64 %zSig.037.i, -1*/
		main_lrphi_185 = (main_lrphi_zSig037i_reg + -64'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %185 = add i64 %zSig.037.i, -1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_182)) begin
		main_lrphi_185_reg <= main_lrphi_185;
		if (start == 1'b0 && ^(main_lrphi_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic16 = zext i64 %183 to i65*/
		main_lrphi_overflow_intrinsic16 = main_lrphi_183_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic16 = zext i64 %183 to i65*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_182)) begin
		main_lrphi_overflow_intrinsic16_reg <= main_lrphi_overflow_intrinsic16;
		if (start == 1'b0 && ^(main_lrphi_overflow_intrinsic16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_overflow_intrinsic16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic18 = add nuw i65 %overflow_intrinsic16, %overflow_intrinsic17*/
		main_lrphi_overflow_intrinsic18 = (main_lrphi_overflow_intrinsic16 + main_lrphipreheader_overflow_intrinsic17_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic18 = add nuw i65 %overflow_intrinsic16, %overflow_intrinsic17*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_182)) begin
		main_lrphi_overflow_intrinsic18_reg <= main_lrphi_overflow_intrinsic18;
		if (start == 1'b0 && ^(main_lrphi_overflow_intrinsic18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_overflow_intrinsic18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic_sum19 = trunc i65 %overflow_intrinsic18 to i64*/
		main_lrphi_overflow_intrinsic_sum19 = main_lrphi_overflow_intrinsic18[63:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic_sum19 = trunc i65 %overflow_intrinsic18 to i64*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_182)) begin
		main_lrphi_overflow_intrinsic_sum19_reg <= main_lrphi_overflow_intrinsic_sum19;
		if (start == 1'b0 && ^(main_lrphi_overflow_intrinsic_sum19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_overflow_intrinsic_sum19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic20 = lshr i65 %overflow_intrinsic18, 64*/
		main_lrphi_overflow_intrinsic20 = (main_lrphi_overflow_intrinsic18 >>> (65'd64 % 65'd65));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %overflow_intrinsic20 = lshr i65 %overflow_intrinsic18, 64*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_182)) begin
		main_lrphi_overflow_intrinsic20_reg <= main_lrphi_overflow_intrinsic20;
		if (start == 1'b0 && ^(main_lrphi_overflow_intrinsic20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_overflow_intrinsic20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %186 = trunc i65 %overflow_intrinsic20 to i64*/
		main_lrphi_186 = main_lrphi_overflow_intrinsic20[63:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %186 = trunc i65 %overflow_intrinsic20 to i64*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_182)) begin
		main_lrphi_186_reg <= main_lrphi_186;
		if (start == 1'b0 && ^(main_lrphi_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %187 = add i64 %186, %184*/
		main_lrphi_187 = (main_lrphi_186_reg + main_lrphi_184_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %187 = add i64 %186, %184*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_183)) begin
		main_lrphi_187_reg <= main_lrphi_187;
		if (start == 1'b0 && ^(main_lrphi_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %188 = icmp slt i64 %187, 0*/
		main_lrphi_188 = ($signed(main_lrphi_187) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %188 = icmp slt i64 %187, 0*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_183)) begin
		main_lrphi_188_reg <= main_lrphi_188;
		if (start == 1'b0 && ^(main_lrphi_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %zSig.0.lcssa.i = phi i64 [ %163, %166 ], [ %185, %._crit_edge.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__166_180) & (memory_controller_waitrequest == 1'd0)) & (main_166_182 == 1'd0))) begin
		main__crit_edgei_zSig0lcssai = main_estimateDiv128To64exiti_163_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %zSig.0.lcssa.i = phi i64 [ %163, %166 ], [ %185, %._crit_edge.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgeiloopexit_184) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgei_zSig0lcssai = main_lrphi_185_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %zSig.0.lcssa.i = phi i64 [ %163, %166 ], [ %185, %._crit_edge.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__166_180) & (memory_controller_waitrequest == 1'd0)) & (main_166_182 == 1'd0))) begin
		main__crit_edgei_zSig0lcssai_reg <= main__crit_edgei_zSig0lcssai;
		if (start == 1'b0 && ^(main__crit_edgei_zSig0lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_zSig0lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %zSig.0.lcssa.i = phi i64 [ %163, %166 ], [ %185, %._crit_edge.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeiloopexit_184) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_zSig0lcssai_reg <= main__crit_edgei_zSig0lcssai;
		if (start == 1'b0 && ^(main__crit_edgei_zSig0lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_zSig0lcssai_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %.lcssa.i = phi i64 [ %178, %166 ], [ %overflow_intrinsic_sum19, %._crit_edge.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__166_180) & (memory_controller_waitrequest == 1'd0)) & (main_166_182 == 1'd0))) begin
		main__crit_edgei_lcssai = main_166_178;
	end
	/* main: %._crit_edge.i*/
	/*   %.lcssa.i = phi i64 [ %178, %166 ], [ %overflow_intrinsic_sum19, %._crit_edge.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgeiloopexit_184) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edgei_lcssai = main_lrphi_overflow_intrinsic_sum19_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %.lcssa.i = phi i64 [ %178, %166 ], [ %overflow_intrinsic_sum19, %._crit_edge.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB__166_180) & (memory_controller_waitrequest == 1'd0)) & (main_166_182 == 1'd0))) begin
		main__crit_edgei_lcssai_reg <= main__crit_edgei_lcssai;
		if (start == 1'b0 && ^(main__crit_edgei_lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %.lcssa.i = phi i64 [ %178, %166 ], [ %overflow_intrinsic_sum19, %._crit_edge.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeiloopexit_184) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_lcssai_reg <= main__crit_edgei_lcssai;
		if (start == 1'b0 && ^(main__crit_edgei_lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_lcssai_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %189 = icmp ne i64 %.lcssa.i, 0*/
		main__crit_edgei_189 = (main__crit_edgei_lcssai_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %189 = icmp ne i64 %.lcssa.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		main__crit_edgei_189_reg <= main__crit_edgei_189;
		if (start == 1'b0 && ^(main__crit_edgei_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %190 = zext i1 %189 to i64*/
		main__crit_edgei_190 = main__crit_edgei_189;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %190 = zext i1 %189 to i64*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		main__crit_edgei_190_reg <= main__crit_edgei_190;
		if (start == 1'b0 && ^(main__crit_edgei_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %191 = or i64 %190, %zSig.0.lcssa.i*/
		main__crit_edgei_191 = (main__crit_edgei_190 | main__crit_edgei_zSig0lcssai_reg);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %191 = or i64 %190, %zSig.0.lcssa.i*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_185)) begin
		main__crit_edgei_191_reg <= main__crit_edgei_191;
		if (start == 1'b0 && ^(main__crit_edgei_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %zSig.1.i = phi i64 [ %191, %._crit_edge.i ], [ %163, %estimateDiv128To64.exit.i ], [ -1, %124 ]*/
	if ((((cur_state == LEGUP_F_main_BB__124_37) & (memory_controller_waitrequest == 1'd0)) & (main_124_126 == 1'd0))) begin
		main_estimateDiv128To64exitthreadi_zSig1i = -64'd1;
	end
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %zSig.1.i = phi i64 [ %191, %._crit_edge.i ], [ %163, %estimateDiv128To64.exit.i ], [ -1, %124 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exiti_176) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exiti_165 == 1'd0))) begin
		main_estimateDiv128To64exitthreadi_zSig1i = main_estimateDiv128To64exiti_163;
	end
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %zSig.1.i = phi i64 [ %191, %._crit_edge.i ], [ %163, %estimateDiv128To64.exit.i ], [ -1, %124 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_185) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_estimateDiv128To64exitthreadi_zSig1i = main__crit_edgei_191;
	end
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %zSig.1.i = phi i64 [ %191, %._crit_edge.i ], [ %163, %estimateDiv128To64.exit.i ], [ -1, %124 ]*/
	if ((((cur_state == LEGUP_F_main_BB__124_37) & (memory_controller_waitrequest == 1'd0)) & (main_124_126 == 1'd0))) begin
		main_estimateDiv128To64exitthreadi_zSig1i_reg <= main_estimateDiv128To64exitthreadi_zSig1i;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_zSig1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_zSig1i_reg"); $finish; end
	end
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %zSig.1.i = phi i64 [ %191, %._crit_edge.i ], [ %163, %estimateDiv128To64.exit.i ], [ -1, %124 ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exiti_176) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exiti_165 == 1'd0))) begin
		main_estimateDiv128To64exitthreadi_zSig1i_reg <= main_estimateDiv128To64exitthreadi_zSig1i;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_zSig1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_zSig1i_reg"); $finish; end
	end
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %zSig.1.i = phi i64 [ %191, %._crit_edge.i ], [ %163, %estimateDiv128To64.exit.i ], [ -1, %124 ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_185) & (memory_controller_waitrequest == 1'd0))) begin
		main_estimateDiv128To64exitthreadi_zSig1i_reg <= main_estimateDiv128To64exitthreadi_zSig1i;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_zSig1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_zSig1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %.tr.i.i = trunc i64 %zSig.1.i to i32*/
		main_estimateDiv128To64exitthreadi_trii = main_estimateDiv128To64exitthreadi_zSig1i_reg[31:0];
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %.tr.i.i = trunc i64 %zSig.1.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186)) begin
		main_estimateDiv128To64exitthreadi_trii_reg <= main_estimateDiv128To64exitthreadi_trii;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_trii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_trii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %192 = and i32 %.tr.i.i, 1023*/
		main_estimateDiv128To64exitthreadi_192 = (main_estimateDiv128To64exitthreadi_trii & 32'd1023);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %192 = and i32 %.tr.i.i, 1023*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186)) begin
		main_estimateDiv128To64exitthreadi_192_reg <= main_estimateDiv128To64exitthreadi_192;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %193 = and i32 %zExp.0.i, 65535*/
		main_estimateDiv128To64exitthreadi_193 = (main_124_zExp0i_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %193 = and i32 %zExp.0.i, 65535*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186)) begin
		main_estimateDiv128To64exitthreadi_193_reg <= main_estimateDiv128To64exitthreadi_193;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %194 = icmp ugt i32 %193, 2044*/
		main_estimateDiv128To64exitthreadi_194 = (main_estimateDiv128To64exitthreadi_193 > 32'd2044);
end
always @(posedge clk) begin
	/* main: %estimateDiv128To64.exit.thread.i*/
	/*   %194 = icmp ugt i32 %193, 2044*/
	if ((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186)) begin
		main_estimateDiv128To64exitthreadi_194_reg <= main_estimateDiv128To64exitthreadi_194;
		if (start == 1'b0 && ^(main_estimateDiv128To64exitthreadi_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_estimateDiv128To64exitthreadi_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %195*/
	/*   %196 = icmp sgt i32 %zExp.0.i, 2045*/
		main_195_196 = ($signed(main_124_zExp0i_reg) > $signed(32'd2045));
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %196 = icmp sgt i32 %zExp.0.i, 2045*/
	if ((cur_state == LEGUP_F_main_BB__195_187)) begin
		main_195_196_reg <= main_195_196;
		if (start == 1'b0 && ^(main_195_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %198 = icmp eq i32 %zExp.0.i, 2045*/
		main_197_198 = (main_124_zExp0i_reg == 32'd2045);
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %198 = icmp eq i32 %zExp.0.i, 2045*/
	if ((cur_state == LEGUP_F_main_BB__197_188)) begin
		main_197_198_reg <= main_197_198;
		if (start == 1'b0 && ^(main_197_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %200 = add i64 %zSig.1.i, 512*/
		main_199_200 = (main_estimateDiv128To64exitthreadi_zSig1i_reg + 64'd512);
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %200 = add i64 %zSig.1.i, 512*/
	if ((cur_state == LEGUP_F_main_BB__199_189)) begin
		main_199_200_reg <= main_199_200;
		if (start == 1'b0 && ^(main_199_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %199*/
	/*   %201 = icmp slt i64 %200, 0*/
		main_199_201 = ($signed(main_199_200) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %199*/
	/*   %201 = icmp slt i64 %200, 0*/
	if ((cur_state == LEGUP_F_main_BB__199_189)) begin
		main_199_201_reg <= main_199_201;
		if (start == 1'b0 && ^(main_199_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_199_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %202*/
	/*   %203 = or i32 %float_exception_flags.0, 9*/
		main_202_203 = (main_1_float_exception_flags0_reg | 32'd9);
end
always @(posedge clk) begin
	/* main: %202*/
	/*   %203 = or i32 %float_exception_flags.0, 9*/
	if ((cur_state == LEGUP_F_main_BB__202_190)) begin
		main_202_203_reg <= main_202_203;
		if (start == 1'b0 && ^(main_202_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_202_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %202*/
	/*   %204 = shl nuw i64 %13, 63*/
		main_202_204 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %202*/
	/*   %204 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB__202_190)) begin
		main_202_204_reg <= main_202_204;
		if (start == 1'b0 && ^(main_202_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_202_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %202*/
	/*   %205 = or i64 %204, 9218868437227405312*/
		main_202_205 = (main_202_204 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %202*/
	/*   %205 = or i64 %204, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__202_190)) begin
		main_202_205_reg <= main_202_205;
		if (start == 1'b0 && ^(main_202_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_202_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %206*/
	/*   %207 = icmp slt i32 %zExp.0.i, 0*/
		main_206_207 = ($signed(main_124_zExp0i_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %206*/
	/*   %207 = icmp slt i32 %zExp.0.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__206_191)) begin
		main_206_207_reg <= main_206_207;
		if (start == 1'b0 && ^(main_206_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_206_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %208*/
	/*   %209 = icmp sgt i32 %zExp.0.i, -64*/
		main_208_209 = ($signed(main_124_zExp0i_reg) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* main: %208*/
	/*   %209 = icmp sgt i32 %zExp.0.i, -64*/
	if ((cur_state == LEGUP_F_main_BB__208_192)) begin
		main_208_209_reg <= main_208_209;
		if (start == 1'b0 && ^(main_208_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_208_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %211 = sub nsw i32 0, %zExp.0.i*/
		main_210_211 = (32'd0 - main_124_zExp0i_reg);
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %211 = sub nsw i32 0, %zExp.0.i*/
	if ((cur_state == LEGUP_F_main_BB__210_193)) begin
		main_210_211_reg <= main_210_211;
		if (start == 1'b0 && ^(main_210_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %212 = zext i32 %211 to i64*/
		main_210_212 = main_210_211;
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %212 = zext i32 %211 to i64*/
	if ((cur_state == LEGUP_F_main_BB__210_193)) begin
		main_210_212_reg <= main_210_212;
		if (start == 1'b0 && ^(main_210_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %213 = lshr i64 %zSig.1.i, %212*/
		main_210_213 = (main_estimateDiv128To64exitthreadi_zSig1i_reg >>> (main_210_212 % 64'd64));
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %213 = lshr i64 %zSig.1.i, %212*/
	if ((cur_state == LEGUP_F_main_BB__210_193)) begin
		main_210_213_reg <= main_210_213;
		if (start == 1'b0 && ^(main_210_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %214 = and i32 %zExp.0.i, 63*/
		main_210_214 = (main_124_zExp0i_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %214 = and i32 %zExp.0.i, 63*/
	if ((cur_state == LEGUP_F_main_BB__210_193)) begin
		main_210_214_reg <= main_210_214;
		if (start == 1'b0 && ^(main_210_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %215 = zext i32 %214 to i64*/
		main_210_215 = main_210_214;
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %215 = zext i32 %214 to i64*/
	if ((cur_state == LEGUP_F_main_BB__210_193)) begin
		main_210_215_reg <= main_210_215;
		if (start == 1'b0 && ^(main_210_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %216 = shl i64 %zSig.1.i, %215*/
		main_210_216 = (main_estimateDiv128To64exitthreadi_zSig1i_reg <<< (main_210_215 % 64'd64));
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %216 = shl i64 %zSig.1.i, %215*/
	if ((cur_state == LEGUP_F_main_BB__210_193)) begin
		main_210_216_reg <= main_210_216;
		if (start == 1'b0 && ^(main_210_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %217 = icmp ne i64 %216, 0*/
		main_210_217 = (main_210_216 != 64'd0);
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %217 = icmp ne i64 %216, 0*/
	if ((cur_state == LEGUP_F_main_BB__210_193)) begin
		main_210_217_reg <= main_210_217;
		if (start == 1'b0 && ^(main_210_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %218 = zext i1 %217 to i64*/
		main_210_218 = main_210_217;
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %218 = zext i1 %217 to i64*/
	if ((cur_state == LEGUP_F_main_BB__210_193)) begin
		main_210_218_reg <= main_210_218;
		if (start == 1'b0 && ^(main_210_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %219 = or i64 %218, %213*/
		main_210_219 = (main_210_218 | main_210_213);
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %219 = or i64 %218, %213*/
	if ((cur_state == LEGUP_F_main_BB__210_193)) begin
		main_210_219_reg <= main_210_219;
		if (start == 1'b0 && ^(main_210_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %220*/
	/*   %221 = icmp ne i64 %zSig.1.i, 0*/
		main_220_221 = (main_estimateDiv128To64exitthreadi_zSig1i_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %220*/
	/*   %221 = icmp ne i64 %zSig.1.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__220_194)) begin
		main_220_221_reg <= main_220_221;
		if (start == 1'b0 && ^(main_220_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_220_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %220*/
	/*   %222 = zext i1 %221 to i64*/
		main_220_222 = main_220_221;
end
always @(posedge clk) begin
	/* main: %220*/
	/*   %222 = zext i1 %221 to i64*/
	if ((cur_state == LEGUP_F_main_BB__220_194)) begin
		main_220_222_reg <= main_220_222;
		if (start == 1'b0 && ^(main_220_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_220_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %219, %210 ], [ %222, %220 ]*/
	if (((cur_state == LEGUP_F_main_BB__210_193) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z0iii = main_210_219;
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %219, %210 ], [ %222, %220 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__220_194) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexitii_z0iii = main_220_222;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %219, %210 ], [ %222, %220 ]*/
	if (((cur_state == LEGUP_F_main_BB__210_193) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z0iii_reg <= main_shift64RightJammingexitii_z0iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z0iii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %219, %210 ], [ %222, %220 ]*/
	if (((cur_state == LEGUP_F_main_BB__220_194) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z0iii_reg <= main_shift64RightJammingexitii_z0iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %.tr3.i.i = trunc i64 %z.0.i.i.i to i32*/
		main_shift64RightJammingexitii_tr3ii = main_shift64RightJammingexitii_z0iii_reg[31:0];
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %.tr3.i.i = trunc i64 %z.0.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_195)) begin
		main_shift64RightJammingexitii_tr3ii_reg <= main_shift64RightJammingexitii_tr3ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_tr3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_tr3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %223 = and i32 %.tr3.i.i, 1023*/
		main_shift64RightJammingexitii_223 = (main_shift64RightJammingexitii_tr3ii & 32'd1023);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %223 = and i32 %.tr3.i.i, 1023*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_195)) begin
		main_shift64RightJammingexitii_223_reg <= main_shift64RightJammingexitii_223;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %224 = icmp eq i32 %223, 0*/
		main_shift64RightJammingexitii_224 = (main_shift64RightJammingexitii_223 == 32'd0);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %224 = icmp eq i32 %223, 0*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_195)) begin
		main_shift64RightJammingexitii_224_reg <= main_shift64RightJammingexitii_224;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %226 = or i32 %float_exception_flags.0, 4*/
		main_225_226 = (main_1_float_exception_flags0_reg | 32'd4);
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %226 = or i32 %float_exception_flags.0, 4*/
	if ((cur_state == LEGUP_F_main_BB__225_196)) begin
		main_225_226_reg <= main_225_226;
		if (start == 1'b0 && ^(main_225_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %float_exception_flags.4 = phi i32 [ %float_exception_flags.0, %199 ], [ %226, %225 ], [ %float_exception_flags.0, %206 ], [ %float_exception_flags.0, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_194 == 1'd0))) begin
		main_threadii_float_exception_flags4 = main_1_float_exception_flags0_reg;
	end
	/* main: %.thread.i.i*/
	/*   %float_exception_flags.4 = phi i32 [ %float_exception_flags.0, %199 ], [ %226, %225 ], [ %float_exception_flags.0, %206 ], [ %float_exception_flags.0, %estimateDiv128To64.exit.thread.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__199_189) & (memory_controller_waitrequest == 1'd0)) & (main_199_201 == 1'd0))) begin
		main_threadii_float_exception_flags4 = main_1_float_exception_flags0_reg;
	end
	/* main: %.thread.i.i*/
	/*   %float_exception_flags.4 = phi i32 [ %float_exception_flags.0, %199 ], [ %226, %225 ], [ %float_exception_flags.0, %206 ], [ %float_exception_flags.0, %estimateDiv128To64.exit.thread.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__206_191) & (memory_controller_waitrequest == 1'd0)) & (main_206_207 == 1'd0))) begin
		main_threadii_float_exception_flags4 = main_1_float_exception_flags0_reg;
	end
	/* main: %.thread.i.i*/
	/*   %float_exception_flags.4 = phi i32 [ %float_exception_flags.0, %199 ], [ %226, %225 ], [ %float_exception_flags.0, %206 ], [ %float_exception_flags.0, %estimateDiv128To64.exit.thread.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__225_196) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_threadii_float_exception_flags4 = main_225_226;
	end
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %float_exception_flags.4 = phi i32 [ %float_exception_flags.0, %199 ], [ %226, %225 ], [ %float_exception_flags.0, %206 ], [ %float_exception_flags.0, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_194 == 1'd0))) begin
		main_threadii_float_exception_flags4_reg <= main_threadii_float_exception_flags4;
		if (start == 1'b0 && ^(main_threadii_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_float_exception_flags4_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %float_exception_flags.4 = phi i32 [ %float_exception_flags.0, %199 ], [ %226, %225 ], [ %float_exception_flags.0, %206 ], [ %float_exception_flags.0, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__199_189) & (memory_controller_waitrequest == 1'd0)) & (main_199_201 == 1'd0))) begin
		main_threadii_float_exception_flags4_reg <= main_threadii_float_exception_flags4;
		if (start == 1'b0 && ^(main_threadii_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_float_exception_flags4_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %float_exception_flags.4 = phi i32 [ %float_exception_flags.0, %199 ], [ %226, %225 ], [ %float_exception_flags.0, %206 ], [ %float_exception_flags.0, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__206_191) & (memory_controller_waitrequest == 1'd0)) & (main_206_207 == 1'd0))) begin
		main_threadii_float_exception_flags4_reg <= main_threadii_float_exception_flags4;
		if (start == 1'b0 && ^(main_threadii_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_float_exception_flags4_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %float_exception_flags.4 = phi i32 [ %float_exception_flags.0, %199 ], [ %226, %225 ], [ %float_exception_flags.0, %206 ], [ %float_exception_flags.0, %estimateDiv128To64.exit.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB__225_196) & (memory_controller_waitrequest == 1'd0))) begin
		main_threadii_float_exception_flags4_reg <= main_threadii_float_exception_flags4;
		if (start == 1'b0 && ^(main_threadii_float_exception_flags4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_float_exception_flags4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %zSig5.i.i = phi i64 [ %zSig.1.i, %199 ], [ %z.0.i.i.i, %225 ], [ %zSig.1.i, %206 ], [ %zSig.1.i, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_194 == 1'd0))) begin
		main_threadii_zSig5ii = main_estimateDiv128To64exitthreadi_zSig1i_reg;
	end
	/* main: %.thread.i.i*/
	/*   %zSig5.i.i = phi i64 [ %zSig.1.i, %199 ], [ %z.0.i.i.i, %225 ], [ %zSig.1.i, %206 ], [ %zSig.1.i, %estimateDiv128To64.exit.thread.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__199_189) & (memory_controller_waitrequest == 1'd0)) & (main_199_201 == 1'd0))) begin
		main_threadii_zSig5ii = main_estimateDiv128To64exitthreadi_zSig1i_reg;
	end
	/* main: %.thread.i.i*/
	/*   %zSig5.i.i = phi i64 [ %zSig.1.i, %199 ], [ %z.0.i.i.i, %225 ], [ %zSig.1.i, %206 ], [ %zSig.1.i, %estimateDiv128To64.exit.thread.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__206_191) & (memory_controller_waitrequest == 1'd0)) & (main_206_207 == 1'd0))) begin
		main_threadii_zSig5ii = main_estimateDiv128To64exitthreadi_zSig1i_reg;
	end
	/* main: %.thread.i.i*/
	/*   %zSig5.i.i = phi i64 [ %zSig.1.i, %199 ], [ %z.0.i.i.i, %225 ], [ %zSig.1.i, %206 ], [ %zSig.1.i, %estimateDiv128To64.exit.thread.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__225_196) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_threadii_zSig5ii = main_shift64RightJammingexitii_z0iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %zSig5.i.i = phi i64 [ %zSig.1.i, %199 ], [ %z.0.i.i.i, %225 ], [ %zSig.1.i, %206 ], [ %zSig.1.i, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_194 == 1'd0))) begin
		main_threadii_zSig5ii_reg <= main_threadii_zSig5ii;
		if (start == 1'b0 && ^(main_threadii_zSig5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_zSig5ii_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %zSig5.i.i = phi i64 [ %zSig.1.i, %199 ], [ %z.0.i.i.i, %225 ], [ %zSig.1.i, %206 ], [ %zSig.1.i, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__199_189) & (memory_controller_waitrequest == 1'd0)) & (main_199_201 == 1'd0))) begin
		main_threadii_zSig5ii_reg <= main_threadii_zSig5ii;
		if (start == 1'b0 && ^(main_threadii_zSig5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_zSig5ii_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %zSig5.i.i = phi i64 [ %zSig.1.i, %199 ], [ %z.0.i.i.i, %225 ], [ %zSig.1.i, %206 ], [ %zSig.1.i, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__206_191) & (memory_controller_waitrequest == 1'd0)) & (main_206_207 == 1'd0))) begin
		main_threadii_zSig5ii_reg <= main_threadii_zSig5ii;
		if (start == 1'b0 && ^(main_threadii_zSig5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_zSig5ii_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %zSig5.i.i = phi i64 [ %zSig.1.i, %199 ], [ %z.0.i.i.i, %225 ], [ %zSig.1.i, %206 ], [ %zSig.1.i, %estimateDiv128To64.exit.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB__225_196) & (memory_controller_waitrequest == 1'd0))) begin
		main_threadii_zSig5ii_reg <= main_threadii_zSig5ii;
		if (start == 1'b0 && ^(main_threadii_zSig5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_zSig5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %.02.i.i = phi i32 [ 2045, %199 ], [ 0, %225 ], [ %zExp.0.i, %206 ], [ %zExp.0.i, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_194 == 1'd0))) begin
		main_threadii_02ii = main_124_zExp0i_reg;
	end
	/* main: %.thread.i.i*/
	/*   %.02.i.i = phi i32 [ 2045, %199 ], [ 0, %225 ], [ %zExp.0.i, %206 ], [ %zExp.0.i, %estimateDiv128To64.exit.thread.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__199_189) & (memory_controller_waitrequest == 1'd0)) & (main_199_201 == 1'd0))) begin
		main_threadii_02ii = 32'd2045;
	end
	/* main: %.thread.i.i*/
	/*   %.02.i.i = phi i32 [ 2045, %199 ], [ 0, %225 ], [ %zExp.0.i, %206 ], [ %zExp.0.i, %estimateDiv128To64.exit.thread.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__206_191) & (memory_controller_waitrequest == 1'd0)) & (main_206_207 == 1'd0))) begin
		main_threadii_02ii = main_124_zExp0i_reg;
	end
	/* main: %.thread.i.i*/
	/*   %.02.i.i = phi i32 [ 2045, %199 ], [ 0, %225 ], [ %zExp.0.i, %206 ], [ %zExp.0.i, %estimateDiv128To64.exit.thread.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__225_196) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_threadii_02ii = 32'd0;
	end
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %.02.i.i = phi i32 [ 2045, %199 ], [ 0, %225 ], [ %zExp.0.i, %206 ], [ %zExp.0.i, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_194 == 1'd0))) begin
		main_threadii_02ii_reg <= main_threadii_02ii;
		if (start == 1'b0 && ^(main_threadii_02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_02ii_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %.02.i.i = phi i32 [ 2045, %199 ], [ 0, %225 ], [ %zExp.0.i, %206 ], [ %zExp.0.i, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__199_189) & (memory_controller_waitrequest == 1'd0)) & (main_199_201 == 1'd0))) begin
		main_threadii_02ii_reg <= main_threadii_02ii;
		if (start == 1'b0 && ^(main_threadii_02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_02ii_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %.02.i.i = phi i32 [ 2045, %199 ], [ 0, %225 ], [ %zExp.0.i, %206 ], [ %zExp.0.i, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__206_191) & (memory_controller_waitrequest == 1'd0)) & (main_206_207 == 1'd0))) begin
		main_threadii_02ii_reg <= main_threadii_02ii;
		if (start == 1'b0 && ^(main_threadii_02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_02ii_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %.02.i.i = phi i32 [ 2045, %199 ], [ 0, %225 ], [ %zExp.0.i, %206 ], [ %zExp.0.i, %estimateDiv128To64.exit.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB__225_196) & (memory_controller_waitrequest == 1'd0))) begin
		main_threadii_02ii_reg <= main_threadii_02ii;
		if (start == 1'b0 && ^(main_threadii_02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_02ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %roundBits.0.i.i = phi i32 [ %192, %199 ], [ %223, %225 ], [ %192, %206 ], [ %192, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_194 == 1'd0))) begin
		main_threadii_roundBits0ii = main_estimateDiv128To64exitthreadi_192;
	end
	/* main: %.thread.i.i*/
	/*   %roundBits.0.i.i = phi i32 [ %192, %199 ], [ %223, %225 ], [ %192, %206 ], [ %192, %estimateDiv128To64.exit.thread.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__199_189) & (memory_controller_waitrequest == 1'd0)) & (main_199_201 == 1'd0))) begin
		main_threadii_roundBits0ii = main_estimateDiv128To64exitthreadi_192_reg;
	end
	/* main: %.thread.i.i*/
	/*   %roundBits.0.i.i = phi i32 [ %192, %199 ], [ %223, %225 ], [ %192, %206 ], [ %192, %estimateDiv128To64.exit.thread.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__206_191) & (memory_controller_waitrequest == 1'd0)) & (main_206_207 == 1'd0))) begin
		main_threadii_roundBits0ii = main_estimateDiv128To64exitthreadi_192_reg;
	end
	/* main: %.thread.i.i*/
	/*   %roundBits.0.i.i = phi i32 [ %192, %199 ], [ %223, %225 ], [ %192, %206 ], [ %192, %estimateDiv128To64.exit.thread.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__225_196) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_threadii_roundBits0ii = main_shift64RightJammingexitii_223_reg;
	end
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %roundBits.0.i.i = phi i32 [ %192, %199 ], [ %223, %225 ], [ %192, %206 ], [ %192, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_estimateDiv128To64exitthreadi_186) & (memory_controller_waitrequest == 1'd0)) & (main_estimateDiv128To64exitthreadi_194 == 1'd0))) begin
		main_threadii_roundBits0ii_reg <= main_threadii_roundBits0ii;
		if (start == 1'b0 && ^(main_threadii_roundBits0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_roundBits0ii_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %roundBits.0.i.i = phi i32 [ %192, %199 ], [ %223, %225 ], [ %192, %206 ], [ %192, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__199_189) & (memory_controller_waitrequest == 1'd0)) & (main_199_201 == 1'd0))) begin
		main_threadii_roundBits0ii_reg <= main_threadii_roundBits0ii;
		if (start == 1'b0 && ^(main_threadii_roundBits0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_roundBits0ii_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %roundBits.0.i.i = phi i32 [ %192, %199 ], [ %223, %225 ], [ %192, %206 ], [ %192, %estimateDiv128To64.exit.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__206_191) & (memory_controller_waitrequest == 1'd0)) & (main_206_207 == 1'd0))) begin
		main_threadii_roundBits0ii_reg <= main_threadii_roundBits0ii;
		if (start == 1'b0 && ^(main_threadii_roundBits0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_roundBits0ii_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %roundBits.0.i.i = phi i32 [ %192, %199 ], [ %223, %225 ], [ %192, %206 ], [ %192, %estimateDiv128To64.exit.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB__225_196) & (memory_controller_waitrequest == 1'd0))) begin
		main_threadii_roundBits0ii_reg <= main_threadii_roundBits0ii;
		if (start == 1'b0 && ^(main_threadii_roundBits0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_roundBits0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %227 = icmp ne i32 %roundBits.0.i.i, 0*/
		main_threadii_227 = (main_threadii_roundBits0ii_reg != 32'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %227 = icmp ne i32 %roundBits.0.i.i, 0*/
	if ((cur_state == LEGUP_F_main_BB_threadii_197)) begin
		main_threadii_227_reg <= main_threadii_227;
		if (start == 1'b0 && ^(main_threadii_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %228 = zext i1 %227 to i32*/
		main_threadii_228 = main_threadii_227;
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %228 = zext i1 %227 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadii_197)) begin
		main_threadii_228_reg <= main_threadii_228;
		if (start == 1'b0 && ^(main_threadii_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %float_exception_flags.4. = or i32 %float_exception_flags.4, %228*/
		main_threadii_float_exception_flags4_var0 = (main_threadii_float_exception_flags4_reg | main_threadii_228);
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %float_exception_flags.4. = or i32 %float_exception_flags.4, %228*/
	if ((cur_state == LEGUP_F_main_BB_threadii_197)) begin
		main_threadii_float_exception_flags4_var0_reg <= main_threadii_float_exception_flags4_var0;
		if (start == 1'b0 && ^(main_threadii_float_exception_flags4_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_float_exception_flags4_var0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %float_exception_flags.5 = phi i32 [ %float_exception_flags.0, %shift64RightJamming.exit.i.i ], [ %float_exception_flags.4., %.thread.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_195) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_224 == 1'd1))) begin
		main_thread6ii_float_exception_flags5 = main_1_float_exception_flags0_reg;
	end
	/* main: %.thread6.i.i*/
	/*   %float_exception_flags.5 = phi i32 [ %float_exception_flags.0, %shift64RightJamming.exit.i.i ], [ %float_exception_flags.4., %.thread.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadii_197) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread6ii_float_exception_flags5 = main_threadii_float_exception_flags4_var0;
	end
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %float_exception_flags.5 = phi i32 [ %float_exception_flags.0, %shift64RightJamming.exit.i.i ], [ %float_exception_flags.4., %.thread.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_195) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_224 == 1'd1))) begin
		main_thread6ii_float_exception_flags5_reg <= main_thread6ii_float_exception_flags5;
		if (start == 1'b0 && ^(main_thread6ii_float_exception_flags5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_float_exception_flags5_reg"); $finish; end
	end
	/* main: %.thread6.i.i*/
	/*   %float_exception_flags.5 = phi i32 [ %float_exception_flags.0, %shift64RightJamming.exit.i.i ], [ %float_exception_flags.4., %.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadii_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread6ii_float_exception_flags5_reg <= main_thread6ii_float_exception_flags5;
		if (start == 1'b0 && ^(main_thread6ii_float_exception_flags5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_float_exception_flags5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %roundBits.09.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %roundBits.0.i.i, %.thread.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_195) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_224 == 1'd1))) begin
		main_thread6ii_roundBits09ii = 32'd0;
	end
	/* main: %.thread6.i.i*/
	/*   %roundBits.09.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %roundBits.0.i.i, %.thread.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadii_197) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread6ii_roundBits09ii = main_threadii_roundBits0ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %roundBits.09.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %roundBits.0.i.i, %.thread.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_195) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_224 == 1'd1))) begin
		main_thread6ii_roundBits09ii_reg <= main_thread6ii_roundBits09ii;
		if (start == 1'b0 && ^(main_thread6ii_roundBits09ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_roundBits09ii_reg"); $finish; end
	end
	/* main: %.thread6.i.i*/
	/*   %roundBits.09.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %roundBits.0.i.i, %.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadii_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread6ii_roundBits09ii_reg <= main_thread6ii_roundBits09ii;
		if (start == 1'b0 && ^(main_thread6ii_roundBits09ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_roundBits09ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %.028.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %.02.i.i, %.thread.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_195) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_224 == 1'd1))) begin
		main_thread6ii_028ii = 32'd0;
	end
	/* main: %.thread6.i.i*/
	/*   %.028.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %.02.i.i, %.thread.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadii_197) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread6ii_028ii = main_threadii_02ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %.028.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %.02.i.i, %.thread.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_195) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_224 == 1'd1))) begin
		main_thread6ii_028ii_reg <= main_thread6ii_028ii;
		if (start == 1'b0 && ^(main_thread6ii_028ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_028ii_reg"); $finish; end
	end
	/* main: %.thread6.i.i*/
	/*   %.028.i.i = phi i32 [ 0, %shift64RightJamming.exit.i.i ], [ %.02.i.i, %.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadii_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread6ii_028ii_reg <= main_thread6ii_028ii;
		if (start == 1'b0 && ^(main_thread6ii_028ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_028ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %zSig57.i.i = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %zSig5.i.i, %.thread.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_195) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_224 == 1'd1))) begin
		main_thread6ii_zSig57ii = main_shift64RightJammingexitii_z0iii_reg;
	end
	/* main: %.thread6.i.i*/
	/*   %zSig57.i.i = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %zSig5.i.i, %.thread.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadii_197) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread6ii_zSig57ii = main_threadii_zSig5ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %zSig57.i.i = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %zSig5.i.i, %.thread.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_195) & (memory_controller_waitrequest == 1'd0)) & (main_shift64RightJammingexitii_224 == 1'd1))) begin
		main_thread6ii_zSig57ii_reg <= main_thread6ii_zSig57ii;
		if (start == 1'b0 && ^(main_thread6ii_zSig57ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_zSig57ii_reg"); $finish; end
	end
	/* main: %.thread6.i.i*/
	/*   %zSig57.i.i = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %zSig5.i.i, %.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadii_197) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread6ii_zSig57ii_reg <= main_thread6ii_zSig57ii;
		if (start == 1'b0 && ^(main_thread6ii_zSig57ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_zSig57ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %229 = add i64 %zSig57.i.i, 512*/
		main_thread6ii_229 = (main_thread6ii_zSig57ii_reg + 64'd512);
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %229 = add i64 %zSig57.i.i, 512*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_229_reg <= main_thread6ii_229;
		if (start == 1'b0 && ^(main_thread6ii_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %230 = lshr i64 %229, 10*/
		main_thread6ii_230 = (main_thread6ii_229 >>> (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %230 = lshr i64 %229, 10*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_230_reg <= main_thread6ii_230;
		if (start == 1'b0 && ^(main_thread6ii_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %231 = icmp eq i32 %roundBits.09.i.i, 512*/
		main_thread6ii_231 = (main_thread6ii_roundBits09ii_reg == 32'd512);
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %231 = icmp eq i32 %roundBits.09.i.i, 512*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_231_reg <= main_thread6ii_231;
		if (start == 1'b0 && ^(main_thread6ii_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %232 = zext i1 %231 to i32*/
		main_thread6ii_232 = main_thread6ii_231;
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %232 = zext i1 %231 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_232_reg <= main_thread6ii_232;
		if (start == 1'b0 && ^(main_thread6ii_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %233 = xor i32 %232, -1*/
		main_thread6ii_233 = (main_thread6ii_232 ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %233 = xor i32 %232, -1*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_233_reg <= main_thread6ii_233;
		if (start == 1'b0 && ^(main_thread6ii_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %234 = sext i32 %233 to i64*/
		main_thread6ii_234 = $signed(main_thread6ii_233);
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %234 = sext i32 %233 to i64*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_234_reg <= main_thread6ii_234;
		if (start == 1'b0 && ^(main_thread6ii_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %235 = and i64 %230, %234*/
		main_thread6ii_235 = (main_thread6ii_230 & main_thread6ii_234);
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %235 = and i64 %230, %234*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_235_reg <= main_thread6ii_235;
		if (start == 1'b0 && ^(main_thread6ii_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %236 = icmp eq i64 %235, 0*/
		main_thread6ii_236 = (main_thread6ii_235 == 64'd0);
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %236 = icmp eq i64 %235, 0*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_236_reg <= main_thread6ii_236;
		if (start == 1'b0 && ^(main_thread6ii_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %237 = shl nuw i64 %13, 63*/
		main_thread6ii_237 = (main_1_13_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %237 = shl nuw i64 %13, 63*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_237_reg <= main_thread6ii_237;
		if (start == 1'b0 && ^(main_thread6ii_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %238 = zext i32 %.028.i.i to i64*/
		main_thread6ii_238 = main_thread6ii_028ii_reg;
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %238 = zext i32 %.028.i.i to i64*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_238_reg <= main_thread6ii_238;
		if (start == 1'b0 && ^(main_thread6ii_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %.op.i.i = shl i64 %238, 52*/
		main_thread6ii_opii = (main_thread6ii_238 <<< (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %.op.i.i = shl i64 %238, 52*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_opii_reg <= main_thread6ii_opii;
		if (start == 1'b0 && ^(main_thread6ii_opii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_opii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %239 = select i1 %236, i64 0, i64 %.op.i.i*/
		main_thread6ii_239 = (main_thread6ii_236 ? 64'd0 : main_thread6ii_opii);
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %239 = select i1 %236, i64 0, i64 %.op.i.i*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_239_reg <= main_thread6ii_239;
		if (start == 1'b0 && ^(main_thread6ii_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %240 = or i64 %235, %237*/
		main_thread6ii_240 = (main_thread6ii_235 | main_thread6ii_237);
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %240 = or i64 %235, %237*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_240_reg <= main_thread6ii_240;
		if (start == 1'b0 && ^(main_thread6ii_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread6.i.i*/
	/*   %241 = add i64 %239, %240*/
		main_thread6ii_241 = (main_thread6ii_239 + main_thread6ii_240);
end
always @(posedge clk) begin
	/* main: %.thread6.i.i*/
	/*   %241 = add i64 %239, %240*/
	if ((cur_state == LEGUP_F_main_BB_thread6ii_198)) begin
		main_thread6ii_241_reg <= main_thread6ii_241;
		if (start == 1'b0 && ^(main_thread6ii_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread6ii_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_6) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_float64_is_signaling_nanexit1i19i_float_exception_flags0_reg;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_float64_is_signaling_nanexit1i12i_float_exception_flags018_reg;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__35_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_35_36;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__37_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_1_float_exception_flags0_reg;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_float64_is_signaling_nanexit1ii_float_exception_flags020_reg;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__50_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_1_float_exception_flags0_reg;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__60_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_60_61;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__62_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_62_63;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__91_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_1_float_exception_flags0_reg;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__202_190) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6 = main_202_203;
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_thread6ii_198) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_divexit_float_exception_flags6 = main_thread6ii_float_exception_flags5_reg;
	end
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_6) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__35_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__37_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__50_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__60_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__62_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__91_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__202_190) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %float_exception_flags.6 = phi i32 [ %36, %35 ], [ %.float_exception_flags.018, %float64_is_signaling_nan.exit1.i12.i ], [ %float_exception_flags.0, %37 ], [ %.float_exception_flags.0, %float64_is_signaling_nan.exit1.i19.i ], [ %float_exception_flags.0, %91 ], [ %203, %202 ], [ %float_exception_flags.5, %.thread6.i.i ], [ %61, %60 ], [ %63, %62 ], [ %float_exception_flags.0, %50 ], [ %.float_exception_flags.020, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_thread6ii_198) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_float_exception_flags6_reg <= main_float64_divexit_float_exception_flags6;
		if (start == 1'b0 && ^(main_float64_divexit_float_exception_flags6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_float_exception_flags6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_6) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_float64_is_signaling_nanexit1i19i_mux2i24i;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_float64_is_signaling_nanexit1i12i_mux2i17i;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__35_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = 64'd9223372036854775807;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__37_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_37_39;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_float64_is_signaling_nanexit1ii_mux2ii;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__50_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_50_51;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__60_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = 64'd9223372036854775807;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__62_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_62_65;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__91_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_91_92;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__202_190) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i = main_202_205;
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_thread6ii_198) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_divexit_0i = main_thread6ii_241;
	end
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i19i_6) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i12i_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__35_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__37_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__50_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__60_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__62_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__91_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__202_190) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
	/* main: %float64_div.exit*/
	/*   %.0.i = phi i64 [ 9223372036854775807, %35 ], [ %.mux2.i17.i, %float64_is_signaling_nan.exit1.i12.i ], [ %39, %37 ], [ %.mux2.i24.i, %float64_is_signaling_nan.exit1.i19.i ], [ %92, %91 ], [ %205, %202 ], [ %241, %.thread6.i.i ], [ 9223372036854775807, %60 ], [ %65, %62 ], [ %51, %50 ], [ %.mux2.i.i, %float64_is_signaling_nan.exit1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_thread6ii_198) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_divexit_0i_reg <= main_float64_divexit_0i;
		if (start == 1'b0 && ^(main_float64_divexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %242 = load i64* %scevgep, align 8, !tbaa !1*/
		main_float64_divexit_242 = z_output_out_a;
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %242 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_200)) begin
		main_float64_divexit_242_reg <= main_float64_divexit_242;
		if (start == 1'b0 && ^(main_float64_divexit_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %243 = icmp eq i64 %.0.i, %242*/
		main_float64_divexit_243 = (main_float64_divexit_0i_reg == main_float64_divexit_242);
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %243 = icmp eq i64 %.0.i, %242*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_200)) begin
		main_float64_divexit_243_reg <= main_float64_divexit_243;
		if (start == 1'b0 && ^(main_float64_divexit_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %244 = zext i1 %243 to i32*/
		main_float64_divexit_244 = main_float64_divexit_243;
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %244 = zext i1 %243 to i32*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_200)) begin
		main_float64_divexit_244_reg <= main_float64_divexit_244;
		if (start == 1'b0 && ^(main_float64_divexit_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %245 = add nsw i32 %244, %main_result.02*/
		main_float64_divexit_245 = (main_float64_divexit_244 + main_1_main_result02_reg);
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %245 = add nsw i32 %244, %main_result.02*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_200)) begin
		main_float64_divexit_245_reg <= main_float64_divexit_245;
		if (start == 1'b0 && ^(main_float64_divexit_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %247 = add nsw i32 %2, 1*/
		main_float64_divexit_247 = (main_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %247 = add nsw i32 %2, 1*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_199)) begin
		main_float64_divexit_247_reg <= main_float64_divexit_247;
		if (start == 1'b0 && ^(main_float64_divexit_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_div.exit*/
	/*   %exitcond3 = icmp eq i32 %247, 22*/
		main_float64_divexit_exitcond3 = (main_float64_divexit_247 == 32'd22);
end
always @(posedge clk) begin
	/* main: %float64_div.exit*/
	/*   %exitcond3 = icmp eq i32 %247, 22*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_199)) begin
		main_float64_divexit_exitcond3_reg <= main_float64_divexit_exitcond3;
		if (start == 1'b0 && ^(main_float64_divexit_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_divexit_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %248*/
	/*   %250 = icmp eq i32 %245, 22*/
		main_248_250 = (main_float64_divexit_245_reg == 32'd22);
end
always @(posedge clk) begin
	/* main: %248*/
	/*   %250 = icmp eq i32 %245, 22*/
	if ((cur_state == LEGUP_F_main_BB__248_201)) begin
		main_248_250_reg <= main_248_250;
		if (start == 1'b0 && ^(main_248_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_248_250_reg"); $finish; end
	end
end
always @(*) begin
	a_input_address_a = 1'd0;
	/* main: %1*/
	/*   %4 = load i64* %scevgep5, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		a_input_address_a = (main_1_scevgep5 >>> 3'd3);
	end
end
always @(*) begin
	a_input_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %4 = load i64* %scevgep5, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		a_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	b_input_address_a = 1'd0;
	/* main: %1*/
	/*   %5 = load i64* %scevgep4, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		b_input_address_a = (main_1_scevgep4 >>> 3'd3);
	end
end
always @(*) begin
	b_input_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %5 = load i64* %scevgep4, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		b_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	z_output_address_a = 1'd0;
	/* main: %float64_div.exit*/
	/*   %242 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_199)) begin
		z_output_address_a = (main_1_scevgep_reg >>> 3'd3);
	end
end
always @(*) begin
	z_output_write_enable_a = 1'd0;
	/* main: %float64_div.exit*/
	/*   %242 = load i64* %scevgep, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_divexit_199)) begin
		z_output_write_enable_a = 1'd0;
	end
end
always @(*) begin
	countLeadingZeros32countLeadingZerosHigh_address_a = 1'd0;
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %77 = load i32* %76, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_26)) begin
		countLeadingZeros32countLeadingZerosHigh_address_a = (main_normalizeFloat64Subnormalexit10i_76 >>> 3'd2);
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %104 = load i32* %103, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_33)) begin
		countLeadingZeros32countLeadingZerosHigh_address_a = (main_normalizeFloat64Subnormalexiti_103 >>> 3'd2);
	end
end
always @(*) begin
	countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	/* main: %normalizeFloat64Subnormal.exit10.i*/
	/*   %77 = load i32* %76, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexit10i_26)) begin
		countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	end
	/* main: %normalizeFloat64Subnormal.exit.i*/
	/*   %104 = load i32* %103, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeFloat64Subnormalexiti_33)) begin
		countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	end
end
always @(*) begin
	/* main: %131*/
	/*   %132 = udiv i64 %125, %128*/
	if ((cur_state == LEGUP_F_main_BB__131_39)) begin
		main_unsigned_divide_64_0_op0 = main_124_125_reg;
	end
	/* main: %160*/
	/*   %161 = udiv i64 %158, %128*/
	else /* if ((cur_state == LEGUP_F_main_BB__160_111)) */ begin
		main_unsigned_divide_64_0_op0 = main__crit_edgeii_158_reg;
	end
end
always @(*) begin
	/* main: %131*/
	/*   %132 = udiv i64 %125, %128*/
	if ((cur_state == LEGUP_F_main_BB__131_39)) begin
		main_unsigned_divide_64_0_op1 = main_127_128_reg;
	end
	/* main: %160*/
	/*   %161 = udiv i64 %158, %128*/
	else /* if ((cur_state == LEGUP_F_main_BB__160_111)) */ begin
		main_unsigned_divide_64_0_op1 = main_127_128_reg;
	end
end
always @(*) begin
	lpm_divide_main_131_132_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_main_131_132_out = lpm_divide_main_131_132_temp_out;
end
always @(*) begin
	main_unsigned_divide_64_0 = lpm_divide_main_131_132_out;
end
always @(*) begin
	lpm_mult_main_134_138_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %138 = mul i64 %136, %137*/
	if ((lpm_mult_main_134_138_en == 1'd1)) begin
		main_134_138_stage0_reg <= (main_134_136 * main_134_137);
	end
end
always @(*) begin
	lpm_mult_main_134_139_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %139 = mul i64 %136, %128*/
	if ((lpm_mult_main_134_139_en == 1'd1)) begin
		main_134_139_stage0_reg <= (main_134_136 * main_127_128_reg);
	end
end
always @(*) begin
	lpm_divide_main_160_161_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_mult_main_166_169_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %169 = mul i64 %168, %137*/
	if ((lpm_mult_main_166_169_en == 1'd1)) begin
		main_166_169_stage0_reg <= (main_166_168 * main_134_137_reg);
	end
end
always @(*) begin
	lpm_mult_main_166_170_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %170 = mul i64 %167, %137*/
	if ((lpm_mult_main_166_170_en == 1'd1)) begin
		main_166_170_stage0_reg <= (main_166_167 * main_134_137_reg);
	end
end
always @(*) begin
	lpm_mult_main_166_171_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %171 = mul i64 %168, %128*/
	if ((lpm_mult_main_166_171_en == 1'd1)) begin
		main_166_171_stage0_reg <= (main_166_168 * main_127_128_reg);
	end
end
always @(*) begin
	lpm_mult_main_166_172_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %172 = mul i64 %167, %128*/
	if ((lpm_mult_main_166_172_en == 1'd1)) begin
		main_166_172_stage0_reg <= (main_166_167 * main_127_128_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %255*/
	/*   ret i32 %245*/
	if ((cur_state == LEGUP_F_main_BB__255_204)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %255*/
	/*   ret i32 %245*/
	if ((cur_state == LEGUP_F_main_BB__255_204)) begin
		return_val <= main_float64_divexit_245_reg;
		if (start == 1'b0 && ^(main_float64_divexit_245_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
