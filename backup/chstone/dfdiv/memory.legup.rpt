//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sat Apr 22 17:14:17 2017
//----------------------------------------------------------------------------//

allocateRAM: @a_input
Constant: 1
allocateRAM: @b_input
Constant: 1
allocateRAM: @z_output
Constant: 1
allocateRAM: @countLeadingZeros32.countLeadingZerosHigh
Constant: 1
allocating global ram: @a_input
allocating global ram: @b_input
allocating global ram: @z_output
allocating global ram: @countLeadingZeros32.countLeadingZerosHigh
# of Vertices: 98
Representatives: 
1 -> 1
2 -> 2
3 -> 3
4 -> 4
5 -> 5
6 -> 6
7 -> 7
8 -> 8
9 -> 9
10 -> 10
11 -> 11
12 -> 12
13 -> 13
14 -> 14
15 -> 15
16 -> 16
17 -> 17
18 -> 18
19 -> 19
20 -> 20
21 -> 21
22 -> 22
23 -> 23
24 -> 24
25 -> 25
26 -> 26
27 -> 27
28 -> 28
29 -> 29
30 -> 30
31 -> 31
32 -> 32
33 -> 33
34 -> 34
35 -> 35
36 -> 36
37 -> 37
38 -> 38
39 -> 39
40 -> 40
41 -> 41
42 -> 42
43 -> 43
44 -> 44
45 -> 45
46 -> 46
47 -> 47
48 -> 48
49 -> 49
50 -> 50
51 -> 51
52 -> 52
53 -> 53
54 -> 54
55 -> 55
56 -> 56
57 -> 57
58 -> 58
59 -> 59
60 -> 60
61 -> 61
62 -> 62
63 -> 63
64 -> 64
65 -> 65
66 -> 66
67 -> 67
68 -> 68
69 -> 69
70 -> 70
71 -> 71
72 -> 72
73 -> 73
74 -> 74
75 -> 75
76 -> 76
77 -> 77
78 -> 78
79 -> 79
80 -> 80
81 -> 81
82 -> 82
83 -> 83
84 -> 84
85 -> 85
86 -> 86
87 -> 87
88 -> 88
89 -> 89
90 -> 90
91 -> 91
92 -> 92
93 -> 93
94 -> 94
95 -> 95
96 -> 96
97 -> 97
98 -> 98

Connections (Graph): 
1 -> 22 
2 -> 21 
3 -> 23 
4 -> 20 
5 -> 95 
6 -> 17 
7 -> 
8 -> 
9 -> 
10 -> 
11 -> 
12 -> 
13 -> 
14 -> 
15 -> 36 45 
16 -> 35 44 
17 -> 
18 -> 
19 -> 18 98 
20 -> 
21 -> 
22 -> 
23 -> 28 29 30 
24 -> 
25 -> 24 
26 -> 
27 -> 26 
28 -> 
29 -> 
30 -> 
31 -> 
32 -> 31 
33 -> 
34 -> 33 
35 -> 
36 -> 37 
37 -> 39 
38 -> 37 
39 -> 
40 -> 
41 -> 40 
42 -> 
43 -> 42 
44 -> 
45 -> 46 
46 -> 48 
47 -> 46 
48 -> 
49 -> 
50 -> 49 51 
51 -> 
52 -> 
53 -> 52 
54 -> 
55 -> 54 
56 -> 58 
57 -> 56 
58 -> 
59 -> 63 
60 -> 59 
61 -> 63 
62 -> 61 
63 -> 
64 -> 66 
65 -> 64 
66 -> 
67 -> 
68 -> 67 
69 -> 71 
70 -> 69 
71 -> 
72 -> 74 
73 -> 72 
74 -> 
75 -> 74 
76 -> 
77 -> 76 
78 -> 
79 -> 78 
80 -> 82 
81 -> 80 
82 -> 
83 -> 85 
84 -> 83 
85 -> 
86 -> 
87 -> 86 88 
88 -> 
89 -> 
90 -> 89 
91 -> 
92 -> 91 
93 -> 
94 -> 93 
95 -> 
96 -> 
97 -> 96 
98 -> 

Points-to-set: 
1 -> {}
2 -> {1, }
3 -> {}
4 -> {3, }
5 -> {}
6 -> {5, }
7 -> {}
8 -> {7, }
9 -> {}
10 -> {9, }
11 -> {}
12 -> {11, }
13 -> {}
14 -> {13, }
15 -> {}
16 -> {15, }
17 -> {5, }
18 -> {}
19 -> {}
20 -> {3, }
21 -> {1, }
22 -> {}
23 -> {}
24 -> {}
25 -> {}
26 -> {}
27 -> {}
28 -> {}
29 -> {}
30 -> {}
31 -> {}
32 -> {}
33 -> {}
34 -> {}
35 -> {15, }
36 -> {}
37 -> {}
38 -> {}
39 -> {}
40 -> {}
41 -> {}
42 -> {}
43 -> {}
44 -> {15, }
45 -> {}
46 -> {}
47 -> {}
48 -> {}
49 -> {}
50 -> {}
51 -> {}
52 -> {}
53 -> {}
54 -> {}
55 -> {}
56 -> {}
57 -> {}
58 -> {}
59 -> {}
60 -> {}
61 -> {}
62 -> {}
63 -> {}
64 -> {}
65 -> {}
66 -> {}
67 -> {}
68 -> {}
69 -> {}
70 -> {}
71 -> {}
72 -> {}
73 -> {}
74 -> {}
75 -> {}
76 -> {}
77 -> {}
78 -> {}
79 -> {}
80 -> {}
81 -> {}
82 -> {}
83 -> {}
84 -> {}
85 -> {}
86 -> {}
87 -> {}
88 -> {}
89 -> {}
90 -> {}
91 -> {}
92 -> {}
93 -> {}
94 -> {}
95 -> {}
96 -> {}
97 -> {}
98 -> {}

Variable: Int -> Value* mapping
10: @.str1 = private unnamed_addr constant [12 x i8] c"Result: %d\0A\00", align 1
12: @.str2 = private unnamed_addr constant [14 x i8] c"RESULT: PASS\0A\00", align 1
14: @.str3 = private unnamed_addr constant [14 x i8] c"RESULT: FAIL\0A\00", align 1
16: @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
6: @z_output = internal unnamed_addr constant [22 x i64] [i64 9223090561878065152, i64 9221120237041090560, i64 9223372036854775807, i64 9218868437227405312, i64 9221120237041090560, i64 0, i64 9223372036854775807, i64 9218868437227405312, i64 0, i64 -9223372036854775808, i64 4609434218613702656, i64 -4613937818241073152, i64 -4613937818241073152, i64 4609434218613702656, i64 4602678819172646912, i64 -4620693217682128896, i64 -4620693217682128896, i64 4602678819172646912, i64 4604180019048437077, i64 -4619192017806338731, i64 -4619192017806338731, i64 4604180019048437077], align 8
8: @.str = private unnamed_addr constant [65 x i8] c"a_input=%016llx b_input=%016llx expected=%016llx output=%016llx\0A\00", align 1
4: @b_input = internal unnamed_addr constant [22 x i64] [i64 4607182418800017408, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 9221120237041090560, i64 9218868437227405312, i64 0, i64 0, i64 4607182418800017408, i64 4607182418800017408, i64 4611686018427387904, i64 4611686018427387904, i64 -4611686018427387904, i64 -4611686018427387904, i64 4616189618054758400, i64 4616189618054758400, i64 -4607182418800017408, i64 -4607182418800017408, i64 4609434218613702656, i64 4609434218613702656, i64 -4613937818241073152, i64 -4613937818241073152], align 8
2: @a_input = internal unnamed_addr constant [22 x i64] [i64 9223090561878065152, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4613937818241073152, i64 -4609434218613702656, i64 4613937818241073152, i64 -4609434218613702656, i64 4611686018427387904, i64 -4611686018427387904, i64 4611686018427387904, i64 -4611686018427387904, i64 4607182418800017408, i64 -4616189618054758400, i64 4607182418800017408, i64 -4616189618054758400], align 8
19:   %2 = phi i32 [ 0, %0 ], [ %247, %float64_div.exit ]
17:   %scevgep = getelementptr [22 x i64]* @z_output, i32 0, i32 %2
18:   %3 = add i32 %2, -1
20:   %scevgep4 = getelementptr [22 x i64]* @b_input, i32 0, i32 %2
21:   %scevgep5 = getelementptr [22 x i64]* @a_input, i32 0, i32 %2
22:   %4 = load i64* %scevgep5, align 8, !tbaa !1
23:   %5 = load i64* %scevgep4, align 8, !tbaa !1
25:   %7 = lshr i64 %4, 52
24:   %.tr.i27.i = trunc i64 %7 to i32
27:   %10 = lshr i64 %5, 52
26:   %.tr.i26.i = trunc i64 %10 to i32
28:   %21 = trunc i64 %5 to i63
78:   %185 = add i64 %zSig.037.i, -1
81:   %overflow_intrinsic16 = zext i64 %183 to i65
80:   %overflow_intrinsic18 = add nuw i65 %overflow_intrinsic16, %overflow_intrinsic17
82:   %overflow_intrinsic_sum19 = trunc i65 %overflow_intrinsic18 to i64
84:   %overflow_intrinsic20 = lshr i65 %overflow_intrinsic18, 64
83:   %186 = trunc i65 %overflow_intrinsic20 to i64
85:   %187 = add i64 %186, %184
41:   %94 = lshr i64 %6, 32
40:   %extract.t.i.i.i = trunc i64 %94 to i32
43:   %96 = shl nuw nsw i64 %94, 16
42:   %97 = trunc i64 %96 to i32
29:   %32 = trunc i64 %5 to i63
30:   %47 = trunc i64 %5 to i63
32:   %67 = lshr i64 %9, 32
31:   %extract.t.i.i5.i = trunc i64 %67 to i32
34:   %69 = shl nuw nsw i64 %67, 16
33:   %70 = trunc i64 %69 to i32
38:   %shiftCount.1.i.i.i9.i = phi i32 [ %73, %72 ], [ %..i.i.i7.i, %66 ]
35:   %76 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %75
36:   %77 = load i32* %76, align 4, !tbaa !5
37:   %78 = add i32 %shiftCount.1.i.i.i9.i, %77
39:   %79 = add nsw i32 %78, -11
96:   %245 = add nsw i32 %244, %main_result.02
98:   %247 = add nsw i32 %2, 1
47:   %shiftCount.1.i.i.i.i = phi i32 [ %100, %99 ], [ %..i.i.i.i, %93 ]
44:   %103 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %102
45:   %104 = load i32* %103, align 4, !tbaa !5
46:   %105 = add i32 %shiftCount.1.i.i.i.i, %104
48:   %106 = add nsw i32 %105, -11
50:   %113 = sub nsw i32 %111, %84
49:   %114 = add nsw i32 %113, 1021
51:   %123 = add nsw i32 %113, 1022
53:   %144 = sub i64 %.neg3.i.i, %140
52:   %145 = add i64 %144, %.neg.i.i.i
55:   %z.05.i.i = phi i64 [ %135, %.lr.ph.i.i ], [ %151, %148 ]
60:   %150 = phi i64 [ %145, %.lr.ph.i.i ], [ %154, %148 ]
54:   %151 = add i64 %z.05.i.i, -4294967296
57:   %overflow_intrinsic = zext i64 %149 to i65
56:   %overflow_intrinsic2 = add nuw i65 %overflow_intrinsic, %overflow_intrinsic1
58:   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64
62:   %overflow_intrinsic3 = lshr i65 %overflow_intrinsic2, 64
59:   %152 = add i64 %150, %128
61:   %153 = trunc i65 %overflow_intrinsic3 to i64
63:   %154 = add i64 %152, %153
65:   %overflow_intrinsic4 = zext i64 %170 to i65
64:   %overflow_intrinsic6 = add nuw i65 %overflow_intrinsic4, %overflow_intrinsic5
66:   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64
68:   %173 = lshr i65 %overflow_intrinsic6, 32
67:   %.tr = trunc i65 %173 to i64
70:   %overflow_intrinsic10 = zext i64 %169 to i65
69:   %overflow_intrinsic12 = add nuw i65 %overflow_intrinsic10, %overflow_intrinsic11
71:   %overflow_intrinsic_sum13 = trunc i65 %overflow_intrinsic12 to i64
73:   %sext = ashr i65 %overflow_intrinsic12, 64
72:   %.neg29.i = trunc i65 %sext to i64
75:   %.neg31.i = sub i64 %125, %172
74:   %.neg33.i = add i64 %.neg31.i, %.neg29.i
77:   %180 = sub i64 %.neg33.i, %176
76:   %181 = add i64 %180, %.neg.i.i
79:   %zSig.037.i = phi i64 [ %185, %.lr.ph.i ], [ %163, %.lr.ph.i.preheader ]
87:   %zSig.1.i = phi i64 [ %191, %._crit_edge.i ], [ %163, %estimateDiv128To64.exit.i ], [ -1, %124 ]
86:   %.tr.i.i = trunc i64 %zSig.1.i to i32
88:   %200 = add i64 %zSig.1.i, 512
90:   %z.0.i.i.i = phi i64 [ %219, %210 ], [ %222, %220 ]
89:   %.tr3.i.i = trunc i64 %z.0.i.i.i to i32
92:   %zSig57.i.i = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %zSig5.i.i, %.thread.i.i ]
91:   %229 = add i64 %zSig57.i.i, 512
94:   %239 = select i1 %236, i64 0, i64 %.op.i.i
93:   %241 = add i64 %239, %240
95:   %242 = load i64* %scevgep, align 8, !tbaa !1
97:   %244 = zext i1 %243 to i32
Memory: Int -> Value* mapping
9: @.str1 = private unnamed_addr constant [12 x i8] c"Result: %d\0A\00", align 1
11: @.str2 = private unnamed_addr constant [14 x i8] c"RESULT: PASS\0A\00", align 1
13: @.str3 = private unnamed_addr constant [14 x i8] c"RESULT: FAIL\0A\00", align 1
15: @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
5: @z_output = internal unnamed_addr constant [22 x i64] [i64 9223090561878065152, i64 9221120237041090560, i64 9223372036854775807, i64 9218868437227405312, i64 9221120237041090560, i64 0, i64 9223372036854775807, i64 9218868437227405312, i64 0, i64 -9223372036854775808, i64 4609434218613702656, i64 -4613937818241073152, i64 -4613937818241073152, i64 4609434218613702656, i64 4602678819172646912, i64 -4620693217682128896, i64 -4620693217682128896, i64 4602678819172646912, i64 4604180019048437077, i64 -4619192017806338731, i64 -4619192017806338731, i64 4604180019048437077], align 8
7: @.str = private unnamed_addr constant [65 x i8] c"a_input=%016llx b_input=%016llx expected=%016llx output=%016llx\0A\00", align 1
3: @b_input = internal unnamed_addr constant [22 x i64] [i64 4607182418800017408, i64 9221120237041090560, i64 9218868437227405312, i64 4607182418800017408, i64 9221120237041090560, i64 9218868437227405312, i64 0, i64 0, i64 4607182418800017408, i64 4607182418800017408, i64 4611686018427387904, i64 4611686018427387904, i64 -4611686018427387904, i64 -4611686018427387904, i64 4616189618054758400, i64 4616189618054758400, i64 -4607182418800017408, i64 -4607182418800017408, i64 4609434218613702656, i64 4609434218613702656, i64 -4613937818241073152, i64 -4613937818241073152], align 8
1: @a_input = internal unnamed_addr constant [22 x i64] [i64 9223090561878065152, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4613937818241073152, i64 -4609434218613702656, i64 4613937818241073152, i64 -4609434218613702656, i64 4611686018427387904, i64 -4611686018427387904, i64 4611686018427387904, i64 -4611686018427387904, i64 4607182418800017408, i64 -4616189618054758400, i64 4607182418800017408, i64 -4616189618054758400], align 8
digraph "dfdiv.bc" {
    1 [label="#1",color=blue,style=solid];
    2 [label="a_input",color=blue,style=solid];
    3 [label="#3",color=blue,style=solid];
    4 [label="b_input",color=blue,style=solid];
    5 [label="#5",color=blue,style=solid];
    6 [label="z_output",color=blue,style=solid];
    7 [label="#7",color=blue,style=solid];
    8 [label=".str",color=blue,style=solid];
    9 [label="#9",color=blue,style=solid];
    10 [label=".str1",color=blue,style=solid];
    11 [label="#11",color=blue,style=solid];
    12 [label=".str2",color=blue,style=solid];
    13 [label="#13",color=blue,style=solid];
    14 [label=".str3",color=blue,style=solid];
    15 [label="#15",color=blue,style=solid];
    16 [label="countLeadingZeros32.countLeadingZerosHigh",color=blue,style=solid];
    17 [label="scevgep",color=blue,style=solid];
    18 [label="unknown",color=blue,style=solid];
    19 [label="unknown",color=blue,style=solid];
    20 [label="scevgep4",color=blue,style=solid];
    21 [label="scevgep5",color=blue,style=solid];
    22 [label="unknown",color=blue,style=solid];
    23 [label="unknown",color=blue,style=solid];
    24 [label=".tr.i27.i",color=blue,style=solid];
    25 [label="unknown",color=blue,style=solid];
    26 [label=".tr.i26.i",color=blue,style=solid];
    27 [label="unknown",color=blue,style=solid];
    28 [label="unknown",color=blue,style=solid];
    29 [label="unknown",color=blue,style=solid];
    30 [label="unknown",color=blue,style=solid];
    31 [label="extract.t.i.i5.i",color=blue,style=solid];
    32 [label="unknown",color=blue,style=solid];
    33 [label="unknown",color=blue,style=solid];
    34 [label="unknown",color=blue,style=solid];
    35 [label="unknown",color=blue,style=solid];
    36 [label="unknown",color=blue,style=solid];
    37 [label="unknown",color=blue,style=solid];
    38 [label="shiftCount.1.i.i.i9.i",color=blue,style=solid];
    39 [label="unknown",color=blue,style=solid];
    40 [label="extract.t.i.i.i",color=blue,style=solid];
    41 [label="unknown",color=blue,style=solid];
    42 [label="unknown",color=blue,style=solid];
    43 [label="unknown",color=blue,style=solid];
    44 [label="unknown",color=blue,style=solid];
    45 [label="unknown",color=blue,style=solid];
    46 [label="unknown",color=blue,style=solid];
    47 [label="shiftCount.1.i.i.i.i",color=blue,style=solid];
    48 [label="unknown",color=blue,style=solid];
    49 [label="unknown",color=blue,style=solid];
    50 [label="unknown",color=blue,style=solid];
    51 [label="unknown",color=blue,style=solid];
    52 [label="unknown",color=blue,style=solid];
    53 [label="unknown",color=blue,style=solid];
    54 [label="unknown",color=blue,style=solid];
    55 [label="z.05.i.i",color=blue,style=solid];
    56 [label="overflow_intrinsic2",color=blue,style=solid];
    57 [label="overflow_intrinsic",color=blue,style=solid];
    58 [label="overflow_intrinsic_sum",color=blue,style=solid];
    59 [label="unknown",color=blue,style=solid];
    60 [label="unknown",color=blue,style=solid];
    61 [label="unknown",color=blue,style=solid];
    62 [label="overflow_intrinsic3",color=blue,style=solid];
    63 [label="unknown",color=blue,style=solid];
    64 [label="overflow_intrinsic6",color=blue,style=solid];
    65 [label="overflow_intrinsic4",color=blue,style=solid];
    66 [label="overflow_intrinsic_sum7",color=blue,style=solid];
    67 [label=".tr",color=blue,style=solid];
    68 [label="unknown",color=blue,style=solid];
    69 [label="overflow_intrinsic12",color=blue,style=solid];
    70 [label="overflow_intrinsic10",color=blue,style=solid];
    71 [label="overflow_intrinsic_sum13",color=blue,style=solid];
    72 [label=".neg29.i",color=blue,style=solid];
    73 [label="sext",color=blue,style=solid];
    74 [label=".neg33.i",color=blue,style=solid];
    75 [label=".neg31.i",color=blue,style=solid];
    76 [label="unknown",color=blue,style=solid];
    77 [label="unknown",color=blue,style=solid];
    78 [label="unknown",color=blue,style=solid];
    79 [label="zSig.037.i",color=blue,style=solid];
    80 [label="overflow_intrinsic18",color=blue,style=solid];
    81 [label="overflow_intrinsic16",color=blue,style=solid];
    82 [label="overflow_intrinsic_sum19",color=blue,style=solid];
    83 [label="unknown",color=blue,style=solid];
    84 [label="overflow_intrinsic20",color=blue,style=solid];
    85 [label="unknown",color=blue,style=solid];
    86 [label=".tr.i.i",color=blue,style=solid];
    87 [label="zSig.1.i",color=blue,style=solid];
    88 [label="unknown",color=blue,style=solid];
    89 [label=".tr3.i.i",color=blue,style=solid];
    90 [label="z.0.i.i.i",color=blue,style=solid];
    91 [label="unknown",color=blue,style=solid];
    92 [label="zSig57.i.i",color=blue,style=solid];
    93 [label="unknown",color=blue,style=solid];
    94 [label="unknown",color=blue,style=solid];
    95 [label="unknown",color=blue,style=solid];
    96 [label="unknown",color=blue,style=solid];
    97 [label="unknown",color=blue,style=solid];
    98 [label="unknown",color=blue,style=solid];
    1 -> 22;
    2 -> 21;
    3 -> 23;
    4 -> 20;
    5 -> 95;
    6 -> 17;
    15 -> 36;
    15 -> 45;
    16 -> 35;
    16 -> 44;
    19 -> 18;
    19 -> 98;
    23 -> 28;
    23 -> 29;
    23 -> 30;
    25 -> 24;
    27 -> 26;
    32 -> 31;
    34 -> 33;
    36 -> 37;
    37 -> 39;
    38 -> 37;
    41 -> 40;
    43 -> 42;
    45 -> 46;
    46 -> 48;
    47 -> 46;
    50 -> 49;
    50 -> 51;
    53 -> 52;
    55 -> 54;
    56 -> 58;
    57 -> 56;
    59 -> 63;
    60 -> 59;
    61 -> 63;
    62 -> 61;
    64 -> 66;
    65 -> 64;
    68 -> 67;
    69 -> 71;
    70 -> 69;
    72 -> 74;
    73 -> 72;
    75 -> 74;
    77 -> 76;
    79 -> 78;
    80 -> 82;
    81 -> 80;
    83 -> 85;
    84 -> 83;
    87 -> 86;
    87 -> 88;
    90 -> 89;
    92 -> 91;
    94 -> 93;
    97 -> 96;
    pts2 [label="#1",color=red,style=dashed,shape=box];
    2 -> pts2 [color=red,style=dashed];
    pts4 [label="#3",color=red,style=dashed,shape=box];
    4 -> pts4 [color=red,style=dashed];
    pts6 [label="#5",color=red,style=dashed,shape=box];
    6 -> pts6 [color=red,style=dashed];
    pts8 [label="#7",color=red,style=dashed,shape=box];
    8 -> pts8 [color=red,style=dashed];
    pts10 [label="#9",color=red,style=dashed,shape=box];
    10 -> pts10 [color=red,style=dashed];
    pts12 [label="#11",color=red,style=dashed,shape=box];
    12 -> pts12 [color=red,style=dashed];
    pts14 [label="#13",color=red,style=dashed,shape=box];
    14 -> pts14 [color=red,style=dashed];
    pts16 [label="#15",color=red,style=dashed,shape=box];
    16 -> pts16 [color=red,style=dashed];
    pts17 [label="#5",color=red,style=dashed,shape=box];
    17 -> pts17 [color=red,style=dashed];
    pts20 [label="#3",color=red,style=dashed,shape=box];
    20 -> pts20 [color=red,style=dashed];
    pts21 [label="#1",color=red,style=dashed,shape=box];
    21 -> pts21 [color=red,style=dashed];
    pts35 [label="#15",color=red,style=dashed,shape=box];
    35 -> pts35 [color=red,style=dashed];
    pts44 [label="#15",color=red,style=dashed,shape=box];
    44 -> pts44 [color=red,style=dashed];
}
%4 -> { 
	Addr: @a_input
		RAM: a_input
			Adding Local RAM: a_input to Fct: @main
}
%5 -> { 
	Addr: @b_input
		RAM: b_input
			Adding Local RAM: b_input to Fct: @main
}
%77 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%104 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%242 -> { 
	Addr: @z_output
		RAM: z_output
			Adding Local RAM: z_output to Fct: @main
}
Final memory allocation:
Global Memories:
Local Memories:
	ROM: a_input Function: main
	ROM: b_input Function: main
	ROM: z_output Function: main
	ROM: countLeadingZeros32countLeadingZerosHigh Function: main
