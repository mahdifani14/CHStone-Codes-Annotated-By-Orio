//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Wed Apr 19 18:27:07 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 5
`define MEMORY_CONTROLLER_TAG_SIZE 9

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB__0_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__1_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4exitpreheader_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB__2_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB__2_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4exit_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4exit_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB_preheader5preheader_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB__3_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB__3_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB__3_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB__3_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB_preheader5_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB__8_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB__8_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB__8_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB__9_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB__9_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB__11_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB_preheader_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB__15_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB__15_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB__15_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB__18_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB__18_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB__26_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB__36_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB__36_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB__36_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB__43_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB__43_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB__43_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB__50_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB__50_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB__50_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB__61_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB__61_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB__61_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB__72_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB__72_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB__74_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB__74_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB__76_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB__76_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB__76_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB__83_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB__83_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB__83_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB__90_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB__90_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB__90_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB__97_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB__97_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB__97_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB__102_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB__102_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB__102_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB__107_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB__107_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB__107_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB__114_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB__114_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB__114_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB__121_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB__121_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB__121_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB__129_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB__129_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB__129_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB__137_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB__137_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB__140_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB__143_73 = 7'd73;
parameter [6:0] LEGUP_F_main_BB__143_74 = 7'd74;
parameter [6:0] LEGUP_F_main_BB__146_75 = 7'd75;
parameter [6:0] LEGUP_F_main_BB__151_76 = 7'd76;
parameter [6:0] LEGUP_F_main_BB__151_77 = 7'd77;
parameter [6:0] LEGUP_F_main_BB__151_78 = 7'd78;
parameter [6:0] LEGUP_F_main_BB__157_79 = 7'd79;
parameter [6:0] LEGUP_F_main_BB__157_80 = 7'd80;
parameter [6:0] LEGUP_F_main_BB__157_81 = 7'd81;
parameter [6:0] LEGUP_F_main_BB__163_82 = 7'd82;
parameter [6:0] LEGUP_F_main_BB__163_83 = 7'd83;
parameter [6:0] LEGUP_F_main_BB__163_84 = 7'd84;
parameter [6:0] LEGUP_F_main_BB__169_85 = 7'd85;
parameter [6:0] LEGUP_F_main_BB__169_86 = 7'd86;
parameter [6:0] LEGUP_F_main_BB__169_87 = 7'd87;
parameter [6:0] LEGUP_F_main_BB__175_88 = 7'd88;
parameter [6:0] LEGUP_F_main_BB__175_89 = 7'd89;
parameter [6:0] LEGUP_F_main_BB__175_90 = 7'd90;
parameter [6:0] LEGUP_F_main_BB__175_91 = 7'd91;
parameter [6:0] LEGUP_F_main_BB__175_92 = 7'd92;
parameter [6:0] LEGUP_F_main_BB__184_93 = 7'd93;
parameter [6:0] LEGUP_F_main_BB__184_94 = 7'd94;
parameter [6:0] LEGUP_F_main_BB__184_95 = 7'd95;
parameter [6:0] LEGUP_F_main_BB__184_96 = 7'd96;
parameter [6:0] LEGUP_F_main_BB__193_97 = 7'd97;
parameter [6:0] LEGUP_F_main_BB__193_98 = 7'd98;
parameter [6:0] LEGUP_F_main_BB__195_99 = 7'd99;
parameter [6:0] LEGUP_F_main_BB__195_100 = 7'd100;
parameter [6:0] LEGUP_F_main_BB__201_101 = 7'd101;
parameter [6:0] LEGUP_F_main_BB__204_102 = 7'd102;
parameter [6:0] LEGUP_F_main_BB__204_103 = 7'd103;
parameter [6:0] LEGUP_F_main_BB__210_104 = 7'd104;
parameter [6:0] LEGUP_F_main_BB__213_105 = 7'd105;
parameter [6:0] LEGUP_F_main_BB__213_106 = 7'd106;
parameter [6:0] LEGUP_F_main_BB__217_107 = 7'd107;
parameter [6:0] LEGUP_F_main_BB__220_108 = 7'd108;
parameter [6:0] LEGUP_F_main_BB__220_109 = 7'd109;
parameter [6:0] LEGUP_F_main_BB__220_110 = 7'd110;
parameter [6:0] LEGUP_F_main_BB__227_111 = 7'd111;
parameter [6:0] LEGUP_F_main_BB__227_112 = 7'd112;
parameter [6:0] LEGUP_F_main_BB__227_113 = 7'd113;
parameter [6:0] LEGUP_F_main_BB_thread_114 = 7'd114;
parameter [6:0] LEGUP_F_main_BB_thread_115 = 7'd115;
parameter [6:0] LEGUP_F_main_BB__234_116 = 7'd116;
parameter [6:0] LEGUP_F_main_BB__234_117 = 7'd117;
parameter [6:0] LEGUP_F_main_BB_loopexitloopexit_118 = 7'd118;
parameter [6:0] LEGUP_F_main_BB_loopexit_119 = 7'd119;
parameter [6:0] LEGUP_F_main_BB__239_120 = 7'd120;
parameter [6:0] LEGUP_F_main_BB__241_121 = 7'd121;
parameter [6:0] LEGUP_F_main_BB__241_122 = 7'd122;
parameter [6:0] LEGUP_F_main_BB__248_123 = 7'd123;
parameter [6:0] LEGUP_F_main_BB__251_124 = 7'd124;
parameter [6:0] LEGUP_F_main_BB__253_125 = 7'd125;
parameter [6:0] LEGUP_F_main_BB__255_126 = 7'd126;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] main_1_indvar15;
reg [31:0] main_1_indvar15_reg;
reg  main_1_exitcond17;
reg  main_1_exitcond17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0_reg;
reg [31:0] main_2_indvarnext16;
reg [31:0] main_2_indvarnext16_reg;
reg [31:0] main_legup_memset_4exit_indvar7;
reg [31:0] main_legup_memset_4exit_indvar7_reg;
reg [31:0] main_legup_memset_4exit_i10;
reg [31:0] main_legup_memset_4exit_i10_reg;
reg  main_legup_memset_4exit_exitcond9;
reg  main_legup_memset_4exit_exitcond9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep14_reg;
reg [31:0] main_3_4;
reg [31:0] main_3_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep13_reg;
reg [31:0] main_3_5;
reg [31:0] main_3_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep12_reg;
reg [31:0] main_3_6;
reg [31:0] main_3_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep11_reg;
reg [31:0] main_3_7;
reg [31:0] main_3_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep10_reg;
reg [31:0] main_3_indvarnext8;
reg [31:0] main_3_indvarnext8_reg;
reg [31:0] main_preheader5_indvar;
reg [31:0] main_preheader5_indvar_reg;
reg  main_preheader5_exitcond5;
reg  main_preheader5_exitcond5_reg;
reg [31:0] main_8_i11;
reg [31:0] main_8_i11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep6_reg;
reg [31:0] main_8_indvarnext;
reg [31:0] main_8_indvarnext_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_10_reg;
reg [31:0] main_11_12;
reg [31:0] main_11_12_reg;
reg  main_11_exitcond;
reg  main_11_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_15_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_15_scevgep4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_15_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_15_scevgep3_reg;
reg [31:0] main_15_16;
reg [31:0] main_15_16_reg;
reg [31:0] main_15_17;
reg [31:0] main_15_17_reg;
reg [31:0] main_18_19;
reg [31:0] main_18_19_reg;
reg [31:0] main_18_pc0;
reg [31:0] main_18_pc0_reg;
reg [31:0] main_18_Lo0;
reg [31:0] main_18_Lo0_reg;
reg [31:0] main_18_Hi0;
reg [31:0] main_18_Hi0_reg;
reg [31:0] main_18_20;
reg [31:0] main_18_20_reg;
reg [31:0] main_18_21;
reg [31:0] main_18_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_18_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_18_22_reg;
reg [31:0] main_18_23;
reg [31:0] main_18_23_reg;
reg [31:0] main_18_24;
reg [31:0] main_18_24_reg;
reg [31:0] main_18_25;
reg [31:0] main_18_25_reg;
reg [31:0] main_26_27;
reg [31:0] main_26_27_reg;
reg [31:0] main_26_28;
reg [31:0] main_26_28_reg;
reg [31:0] main_26_29;
reg [31:0] main_26_29_reg;
reg [31:0] main_26_30;
reg [31:0] main_26_30_reg;
reg [31:0] main_26_31;
reg [31:0] main_26_31_reg;
reg [31:0] main_26_32;
reg [31:0] main_26_32_reg;
reg [31:0] main_26_33;
reg [31:0] main_26_33_reg;
reg [31:0] main_26_34;
reg [31:0] main_26_34_reg;
reg [31:0] main_26_35;
reg [31:0] main_26_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_36_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_36_37_reg;
reg [31:0] main_36_38;
reg [31:0] main_36_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_36_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_36_39_reg;
reg [31:0] main_36_40;
reg [31:0] main_36_40_reg;
reg [31:0] main_36_41;
reg [31:0] main_36_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_36_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_36_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_43_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_43_44_reg;
reg [31:0] main_43_45;
reg [31:0] main_43_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_43_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_43_46_reg;
reg [31:0] main_43_47;
reg [31:0] main_43_47_reg;
reg [31:0] main_43_48;
reg [31:0] main_43_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_43_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_43_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_50_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_50_51_reg;
reg [31:0] main_50_52;
reg [31:0] main_50_52_reg;
reg [63:0] main_50_53;
reg [63:0] main_50_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_50_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_50_54_reg;
reg [31:0] main_50_55;
reg [31:0] main_50_55_reg;
reg [63:0] main_50_56;
reg [63:0] main_50_56_reg;
reg [63:0] main_50_57;
reg [63:0] main_50_57_reg;
reg [31:0] main_50_58;
reg [31:0] main_50_58_reg;
reg [63:0] main_50_59;
reg [63:0] main_50_59_reg;
reg [31:0] main_50_60;
reg [31:0] main_50_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_61_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_61_62_reg;
reg [31:0] main_61_63;
reg [31:0] main_61_63_reg;
reg [63:0] main_61_64;
reg [63:0] main_61_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_61_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_61_65_reg;
reg [31:0] main_61_66;
reg [31:0] main_61_66_reg;
reg [63:0] main_61_67;
reg [63:0] main_61_67_reg;
reg [63:0] main_61_68;
reg [63:0] main_61_68_reg;
reg [31:0] main_61_69;
reg [31:0] main_61_69_reg;
reg [63:0] main_61_70;
reg [63:0] main_61_70_reg;
reg [31:0] main_61_71;
reg [31:0] main_61_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_72_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_72_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_74_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_74_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_76_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_76_77_reg;
reg [31:0] main_76_78;
reg [31:0] main_76_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_76_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_76_79_reg;
reg [31:0] main_76_80;
reg [31:0] main_76_80_reg;
reg [31:0] main_76_81;
reg [31:0] main_76_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_76_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_76_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_83_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_83_84_reg;
reg [31:0] main_83_85;
reg [31:0] main_83_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_83_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_83_86_reg;
reg [31:0] main_83_87;
reg [31:0] main_83_87_reg;
reg [31:0] main_83_88;
reg [31:0] main_83_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_83_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_83_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_90_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_90_91_reg;
reg [31:0] main_90_92;
reg [31:0] main_90_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_90_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_90_93_reg;
reg [31:0] main_90_94;
reg [31:0] main_90_94_reg;
reg [31:0] main_90_95;
reg [31:0] main_90_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_90_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_90_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_97_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_97_98_reg;
reg [31:0] main_97_99;
reg [31:0] main_97_99_reg;
reg [31:0] main_97_100;
reg [31:0] main_97_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_97_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_97_101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_102_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_102_103_reg;
reg [31:0] main_102_104;
reg [31:0] main_102_104_reg;
reg [31:0] main_102_105;
reg [31:0] main_102_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_102_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_102_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_108_reg;
reg [31:0] main_107_109;
reg [31:0] main_107_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_110_reg;
reg [31:0] main_107_111;
reg [31:0] main_107_111_reg;
reg [31:0] main_107_112;
reg [31:0] main_107_112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_107_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_115_reg;
reg [31:0] main_114_116;
reg [31:0] main_114_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_117_reg;
reg [31:0] main_114_118;
reg [31:0] main_114_118_reg;
reg [31:0] main_114_119;
reg [31:0] main_114_119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_114_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_121_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_121_122_reg;
reg [31:0] main_121_123;
reg [31:0] main_121_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_121_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_121_124_reg;
reg [31:0] main_121_125;
reg [31:0] main_121_125_reg;
reg  main_121_126;
reg  main_121_126_reg;
reg [31:0] main_121_127;
reg [31:0] main_121_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_121_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_121_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_129_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_129_130_reg;
reg [31:0] main_129_131;
reg [31:0] main_129_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_129_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_129_132_reg;
reg [31:0] main_129_133;
reg [31:0] main_129_133_reg;
reg  main_129_134;
reg  main_129_134_reg;
reg [31:0] main_129_135;
reg [31:0] main_129_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_129_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_129_136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_137_138;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_137_138_reg;
reg [31:0] main_137_139;
reg [31:0] main_137_139_reg;
reg [31:0] main_140_141;
reg [31:0] main_140_141_reg;
reg [31:0] main_140_142;
reg [31:0] main_140_142_reg;
reg [31:0] main_143_144;
reg [31:0] main_143_144_reg;
reg [31:0] main_143_145;
reg [31:0] main_143_145_reg;
reg [31:0] main_146_147;
reg [31:0] main_146_147_reg;
reg [31:0] main_146_148;
reg [31:0] main_146_148_reg;
reg [31:0] main_146_149;
reg [31:0] main_146_149_reg;
reg [31:0] main_146_150;
reg [31:0] main_146_150_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_152;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_152_reg;
reg [31:0] main_151_153;
reg [31:0] main_151_153_reg;
reg [31:0] main_151_sext7;
reg [31:0] main_151_sext7_reg;
reg [31:0] main_151_154;
reg [31:0] main_151_154_reg;
reg [31:0] main_151_155;
reg [31:0] main_151_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_151_156_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_157_158;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_157_158_reg;
reg [31:0] main_157_159;
reg [31:0] main_157_159_reg;
reg [31:0] main_157_160;
reg [31:0] main_157_160_reg;
reg [31:0] main_157_161;
reg [31:0] main_157_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_157_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_157_162_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_163_164;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_163_164_reg;
reg [31:0] main_163_165;
reg [31:0] main_163_165_reg;
reg [31:0] main_163_166;
reg [31:0] main_163_166_reg;
reg [31:0] main_163_167;
reg [31:0] main_163_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_163_168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_163_168_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_169_170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_169_170_reg;
reg [31:0] main_169_171;
reg [31:0] main_169_171_reg;
reg [31:0] main_169_172;
reg [31:0] main_169_172_reg;
reg [31:0] main_169_173;
reg [31:0] main_169_173_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_169_174;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_169_174_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_175_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_175_176_reg;
reg [31:0] main_175_177;
reg [31:0] main_175_177_reg;
reg [31:0] main_175_178;
reg [31:0] main_175_178_reg;
reg [31:0] main_175_179;
reg [31:0] main_175_179_reg;
reg [31:0] main_175_180;
reg [31:0] main_175_180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_175_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_175_181_reg;
reg [31:0] main_175_182;
reg [31:0] main_175_182_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_175_183;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_175_183_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_184_185;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_184_185_reg;
reg [31:0] main_184_186;
reg [31:0] main_184_186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_184_187;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_184_187_reg;
reg [31:0] main_184_188;
reg [31:0] main_184_188_reg;
reg [31:0] main_184_189;
reg [31:0] main_184_189_reg;
reg [31:0] main_184_190;
reg [31:0] main_184_190_reg;
reg [31:0] main_184_191;
reg [31:0] main_184_191_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_184_192;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_184_192_reg;
reg [31:0] main_193_sext4;
reg [31:0] main_193_sext4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_193_194;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_193_194_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_195_196;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_195_196_reg;
reg [31:0] main_195_197;
reg [31:0] main_195_197_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_195_198;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_195_198_reg;
reg [31:0] main_195_199;
reg [31:0] main_195_199_reg;
reg  main_195_200;
reg  main_195_200_reg;
reg [31:0] main_201_sext3;
reg [31:0] main_201_sext3_reg;
reg [31:0] main_201_202;
reg [31:0] main_201_202_reg;
reg [31:0] main_201_203;
reg [31:0] main_201_203_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_204_205;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_204_205_reg;
reg [31:0] main_204_206;
reg [31:0] main_204_206_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_204_207;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_204_207_reg;
reg [31:0] main_204_208;
reg [31:0] main_204_208_reg;
reg  main_204_209;
reg  main_204_209_reg;
reg [31:0] main_210_sext2;
reg [31:0] main_210_sext2_reg;
reg [31:0] main_210_211;
reg [31:0] main_210_211_reg;
reg [31:0] main_210_212;
reg [31:0] main_210_212_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_213_214;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_213_214_reg;
reg [31:0] main_213_215;
reg [31:0] main_213_215_reg;
reg  main_213_216;
reg  main_213_216_reg;
reg [31:0] main_217_sext1;
reg [31:0] main_217_sext1_reg;
reg [31:0] main_217_218;
reg [31:0] main_217_218_reg;
reg [31:0] main_217_219;
reg [31:0] main_217_219_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_220_221;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_220_221_reg;
reg [31:0] main_220_222;
reg [31:0] main_220_222_reg;
reg [31:0] main_220_sext;
reg [31:0] main_220_sext_reg;
reg [31:0] main_220_223;
reg [31:0] main_220_223_reg;
reg  main_220_224;
reg  main_220_224_reg;
reg [31:0] main_220_225;
reg [31:0] main_220_225_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_220_226;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_220_226_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_227_228;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_227_228_reg;
reg [31:0] main_227_229;
reg [31:0] main_227_229_reg;
reg [31:0] main_227_230;
reg [31:0] main_227_230_reg;
reg  main_227_231;
reg  main_227_231_reg;
reg [31:0] main_227_232;
reg [31:0] main_227_232_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_227_233;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_227_233_reg;
reg [31:0] main_234_pc6;
reg [31:0] main_234_pc6_reg;
reg [31:0] main_234_Lo2;
reg [31:0] main_234_Lo2_reg;
reg [31:0] main_234_Hi2;
reg [31:0] main_234_Hi2_reg;
reg [31:0] main_234_235;
reg [31:0] main_234_235_reg;
reg  main_234_236;
reg  main_234_236_reg;
reg  main_loopexit_237;
reg  main_loopexit_237_reg;
reg [31:0] main_loopexit_238;
reg [31:0] main_loopexit_238_reg;
reg [31:0] main_239_main_result0;
reg [31:0] main_239_main_result0_reg;
reg [31:0] main_239_240;
reg [31:0] main_239_240_reg;
reg  main_239_exitcond1;
reg  main_239_exitcond1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_241_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_241_scevgep2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_241_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_241_scevgep_reg;
reg [31:0] main_241_242;
reg [31:0] main_241_242_reg;
reg [31:0] main_241_243;
reg [31:0] main_241_243_reg;
reg  main_241_244;
reg  main_241_244_reg;
reg [31:0] main_241_245;
reg [31:0] main_241_245_reg;
reg [31:0] main_241_246;
reg [31:0] main_241_246_reg;
reg [31:0] main_241_247;
reg [31:0] main_241_247_reg;
reg  main_248_250;
reg  main_248_250_reg;
reg [5:0] imem_address_a;
reg  imem_write_enable_a;
wire [31:0] imem_in_a;
wire [31:0] imem_out_a;
wire [5:0] imem_address_b;
wire  imem_write_enable_b;
wire [31:0] imem_in_b;
wire [31:0] imem_out_b;
reg [2:0] A_address_a;
reg  A_write_enable_a;
wire [31:0] A_in_a;
wire [31:0] A_out_a;
wire [2:0] A_address_b;
wire  A_write_enable_b;
wire [31:0] A_in_b;
wire [31:0] A_out_b;
reg [2:0] outData_address_a;
reg  outData_write_enable_a;
wire [31:0] outData_in_a;
wire [31:0] outData_out_a;
wire [2:0] outData_address_b;
wire  outData_write_enable_b;
wire [31:0] outData_in_b;
wire [31:0] outData_out_b;
reg [4:0] main_0_reg_address_a;
reg  main_0_reg_write_enable_a;
reg [31:0] main_0_reg_in_a;
wire [31:0] main_0_reg_out_a;
reg [4:0] main_0_reg_address_b;
reg  main_0_reg_write_enable_b;
reg [31:0] main_0_reg_in_b;
wire [31:0] main_0_reg_out_b;
reg [5:0] main_0_dmem_address_a;
reg  main_0_dmem_write_enable_a;
reg [31:0] main_0_dmem_in_a;
wire [31:0] main_0_dmem_out_a;
wire [5:0] main_0_dmem_address_b;
wire  main_0_dmem_write_enable_b;
wire [31:0] main_0_dmem_in_b;
wire [31:0] main_0_dmem_out_b;
reg  lpm_mult_main_legup_memset_4exit_i10_en;
reg [31:0] main_legup_memset_4exit_i10_stage0_reg;
reg  lpm_mult_main_50_57_en;
reg [63:0] main_50_57_stage0_reg;
reg  lpm_mult_main_61_68_en;
reg [63:0] main_61_68_stage0_reg;

// Local Rams


// @imem = internal unnamed_addr constant [44 x i32] [i32 -1885077504, i32 665124868, i32 614858756, i32 266368, i32 12726305, i32 202375190, i32 0, i32 872546314, i32 12, i32 1006702593, i32 875036672, ...
rom_dual_port imem (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( imem_address_a ),
	.address_b( imem_address_b ),
	.q_a( imem_out_a ),
	.q_b( imem_out_b)
);
defparam imem.width_a = 32;
defparam imem.width_b = 32;
defparam imem.widthad_a = 6;
defparam imem.widthad_b = 6;
defparam imem.numwords_a = 44;
defparam imem.numwords_b = 44;
defparam imem.latency = 1;
defparam imem.init_file = "imem.mif";


// @A = internal unnamed_addr constant [8 x i32] [i32 22, i32 5, i32 -9, i32 3, i32 -17, i32 38, i32 0, i32 11], align 4
rom_dual_port A (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( A_address_a ),
	.address_b( A_address_b ),
	.q_a( A_out_a ),
	.q_b( A_out_b)
);
defparam A.width_a = 32;
defparam A.width_b = 32;
defparam A.widthad_a = 3;
defparam A.widthad_b = 3;
defparam A.numwords_a = 8;
defparam A.numwords_b = 8;
defparam A.latency = 1;
defparam A.init_file = "A.mif";


// @outData = internal unnamed_addr constant [8 x i32] [i32 -17, i32 -9, i32 0, i32 3, i32 5, i32 11, i32 22, i32 38], align 4
rom_dual_port outData (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( outData_address_a ),
	.address_b( outData_address_b ),
	.q_a( outData_out_a ),
	.q_b( outData_out_b)
);
defparam outData.width_a = 32;
defparam outData.width_b = 32;
defparam outData.widthad_a = 3;
defparam outData.widthad_b = 3;
defparam outData.numwords_a = 8;
defparam outData.numwords_b = 8;
defparam outData.latency = 1;
defparam outData.init_file = "outData.mif";


//   %reg = alloca [32 x i32], align 4
ram_dual_port main_0_reg (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_reg_address_a ),
	.address_b( main_0_reg_address_b ),
	.wren_a( main_0_reg_write_enable_a ),
	.wren_b( main_0_reg_write_enable_b ),
	.data_a( main_0_reg_in_a ),
	.data_b( main_0_reg_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_reg_out_a ),
	.q_b( main_0_reg_out_b)
);
defparam main_0_reg.width_a = 32;
defparam main_0_reg.width_b = 32;
defparam main_0_reg.widthad_a = 5;
defparam main_0_reg.widthad_b = 5;
defparam main_0_reg.width_be_a = 1;
defparam main_0_reg.width_be_b = 1;
defparam main_0_reg.numwords_a = 32;
defparam main_0_reg.numwords_b = 32;
defparam main_0_reg.latency = 1;


//   %dmem = alloca [64 x i32], align 4
ram_dual_port main_0_dmem (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_dmem_address_a ),
	.address_b( main_0_dmem_address_b ),
	.wren_a( main_0_dmem_write_enable_a ),
	.wren_b( main_0_dmem_write_enable_b ),
	.data_a( main_0_dmem_in_a ),
	.data_b( main_0_dmem_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_dmem_out_a ),
	.q_b( main_0_dmem_out_b)
);
defparam main_0_dmem.width_a = 32;
defparam main_0_dmem.width_b = 32;
defparam main_0_dmem.widthad_a = 6;
defparam main_0_dmem.widthad_b = 6;
defparam main_0_dmem.width_be_a = 1;
defparam main_0_dmem.width_be_b = 1;
defparam main_0_dmem.numwords_a = 64;
defparam main_0_dmem.numwords_b = 64;
defparam main_0_dmem.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %248*/
	/*   %249 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str1, i32 0, i32 0), i32 %main_result.0) #3*/
	if ((cur_state == LEGUP_F_main_BB__248_123)) begin
		$write("Result: %d", $signed(main_239_main_result0_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_239_main_result0_reg) === 1'bX) finish <= 0;
	end
	/* main: %251*/
	/*   %252 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB__251_124)) begin
		$write("RESULT: PASS");
	end
	/* main: %253*/
	/*   %254 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str3, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB__253_125)) begin
		$write("RESULT: FAIL");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__102_55:
		next_state = LEGUP_F_main_BB__102_56;
LEGUP_F_main_BB__102_56:
		next_state = LEGUP_F_main_BB__102_57;
LEGUP_F_main_BB__102_57:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__107_58:
		next_state = LEGUP_F_main_BB__107_59;
LEGUP_F_main_BB__107_59:
		next_state = LEGUP_F_main_BB__107_60;
LEGUP_F_main_BB__107_60:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__114_61:
		next_state = LEGUP_F_main_BB__114_62;
LEGUP_F_main_BB__114_62:
		next_state = LEGUP_F_main_BB__114_63;
LEGUP_F_main_BB__114_63:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__11_19:
	if ((main_11_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB_preheader_20;
	else if ((main_11_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__15_21;
LEGUP_F_main_BB__121_64:
		next_state = LEGUP_F_main_BB__121_65;
LEGUP_F_main_BB__121_65:
		next_state = LEGUP_F_main_BB__121_66;
LEGUP_F_main_BB__121_66:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__129_67:
		next_state = LEGUP_F_main_BB__129_68;
LEGUP_F_main_BB__129_68:
		next_state = LEGUP_F_main_BB__129_69;
LEGUP_F_main_BB__129_69:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__137_70:
		next_state = LEGUP_F_main_BB__137_71;
LEGUP_F_main_BB__137_71:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__140_72:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__143_73:
		next_state = LEGUP_F_main_BB__143_74;
LEGUP_F_main_BB__143_74:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__146_75:
	if ((main_18_25_reg == 32'd9))
		next_state = LEGUP_F_main_BB__151_76;
	else if ((main_18_25_reg == 32'd12))
		next_state = LEGUP_F_main_BB__157_79;
	else if ((main_18_25_reg == 32'd13))
		next_state = LEGUP_F_main_BB__163_82;
	else if ((main_18_25_reg == 32'd14))
		next_state = LEGUP_F_main_BB__169_85;
	else if ((main_18_25_reg == 32'd35))
		next_state = LEGUP_F_main_BB__175_88;
	else if ((main_18_25_reg == 32'd43))
		next_state = LEGUP_F_main_BB__184_93;
	else if ((main_18_25_reg == 32'd15))
		next_state = LEGUP_F_main_BB__193_97;
	else if ((main_18_25_reg == 32'd4))
		next_state = LEGUP_F_main_BB__195_99;
	else if ((main_18_25_reg == 32'd5))
		next_state = LEGUP_F_main_BB__204_102;
	else if ((main_18_25_reg == 32'd1))
		next_state = LEGUP_F_main_BB__213_105;
	else if ((main_18_25_reg == 32'd10))
		next_state = LEGUP_F_main_BB__220_108;
	else if ((main_18_25_reg == 32'd11))
		next_state = LEGUP_F_main_BB__227_111;
	else if ((main_18_25_reg != 32'd9) && (main_18_25_reg != 32'd12) && (main_18_25_reg != 32'd13) && (main_18_25_reg != 32'd14) && (main_18_25_reg != 32'd35) && (main_18_25_reg != 32'd43) && (main_18_25_reg != 32'd15) && (main_18_25_reg != 32'd4) && (main_18_25_reg != 32'd5) && (main_18_25_reg != 32'd1) && (main_18_25_reg != 32'd10) && (main_18_25_reg != 32'd11))
		next_state = LEGUP_F_main_BB_thread_114;
LEGUP_F_main_BB__151_76:
		next_state = LEGUP_F_main_BB__151_77;
LEGUP_F_main_BB__151_77:
		next_state = LEGUP_F_main_BB__151_78;
LEGUP_F_main_BB__151_78:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__157_79:
		next_state = LEGUP_F_main_BB__157_80;
LEGUP_F_main_BB__157_80:
		next_state = LEGUP_F_main_BB__157_81;
LEGUP_F_main_BB__157_81:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__15_21:
		next_state = LEGUP_F_main_BB__15_22;
LEGUP_F_main_BB__15_22:
		next_state = LEGUP_F_main_BB__15_23;
LEGUP_F_main_BB__15_23:
		next_state = LEGUP_F_main_BB__11_19;
LEGUP_F_main_BB__163_82:
		next_state = LEGUP_F_main_BB__163_83;
LEGUP_F_main_BB__163_83:
		next_state = LEGUP_F_main_BB__163_84;
LEGUP_F_main_BB__163_84:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__169_85:
		next_state = LEGUP_F_main_BB__169_86;
LEGUP_F_main_BB__169_86:
		next_state = LEGUP_F_main_BB__169_87;
LEGUP_F_main_BB__169_87:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__175_88:
		next_state = LEGUP_F_main_BB__175_89;
LEGUP_F_main_BB__175_89:
		next_state = LEGUP_F_main_BB__175_90;
LEGUP_F_main_BB__175_90:
		next_state = LEGUP_F_main_BB__175_91;
LEGUP_F_main_BB__175_91:
		next_state = LEGUP_F_main_BB__175_92;
LEGUP_F_main_BB__175_92:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__184_93:
		next_state = LEGUP_F_main_BB__184_94;
LEGUP_F_main_BB__184_94:
		next_state = LEGUP_F_main_BB__184_95;
LEGUP_F_main_BB__184_95:
		next_state = LEGUP_F_main_BB__184_96;
LEGUP_F_main_BB__184_96:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__18_24:
		next_state = LEGUP_F_main_BB__18_25;
LEGUP_F_main_BB__18_25:
	if ((main_18_25 == 32'd0))
		next_state = LEGUP_F_main_BB__26_26;
	else if ((main_18_25 == 32'd2))
		next_state = LEGUP_F_main_BB__140_72;
	else if ((main_18_25 == 32'd3))
		next_state = LEGUP_F_main_BB__143_73;
	else if ((main_18_25 != 32'd0) && (main_18_25 != 32'd2) && (main_18_25 != 32'd3))
		next_state = LEGUP_F_main_BB__146_75;
LEGUP_F_main_BB__193_97:
		next_state = LEGUP_F_main_BB__193_98;
LEGUP_F_main_BB__193_98:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__195_100:
	if ((main_195_200 == 1'd1))
		next_state = LEGUP_F_main_BB__201_101;
	else if ((main_195_200 == 1'd0))
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__195_99:
		next_state = LEGUP_F_main_BB__195_100;
LEGUP_F_main_BB__1_2:
	if ((main_1_exitcond17 == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4exitpreheader_3;
	else if ((main_1_exitcond17 == 1'd0))
		next_state = LEGUP_F_main_BB__2_4;
LEGUP_F_main_BB__201_101:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__204_102:
		next_state = LEGUP_F_main_BB__204_103;
LEGUP_F_main_BB__204_103:
	if ((main_204_209 == 1'd1))
		next_state = LEGUP_F_main_BB__234_116;
	else if ((main_204_209 == 1'd0))
		next_state = LEGUP_F_main_BB__210_104;
LEGUP_F_main_BB__210_104:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__213_105:
		next_state = LEGUP_F_main_BB__213_106;
LEGUP_F_main_BB__213_106:
	if ((main_213_216 == 1'd1))
		next_state = LEGUP_F_main_BB__217_107;
	else if ((main_213_216 == 1'd0))
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__217_107:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__220_108:
		next_state = LEGUP_F_main_BB__220_109;
LEGUP_F_main_BB__220_109:
		next_state = LEGUP_F_main_BB__220_110;
LEGUP_F_main_BB__220_110:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__227_111:
		next_state = LEGUP_F_main_BB__227_112;
LEGUP_F_main_BB__227_112:
		next_state = LEGUP_F_main_BB__227_113;
LEGUP_F_main_BB__227_113:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__234_116:
		next_state = LEGUP_F_main_BB__234_117;
LEGUP_F_main_BB__234_117:
	if ((main_234_236_reg == 1'd1))
		next_state = LEGUP_F_main_BB_loopexitloopexit_118;
	else if ((main_234_236_reg == 1'd0))
		next_state = LEGUP_F_main_BB__18_24;
LEGUP_F_main_BB__239_120:
	if ((main_239_exitcond1 == 1'd1))
		next_state = LEGUP_F_main_BB__248_123;
	else if ((main_239_exitcond1 == 1'd0))
		next_state = LEGUP_F_main_BB__241_121;
LEGUP_F_main_BB__241_121:
		next_state = LEGUP_F_main_BB__241_122;
LEGUP_F_main_BB__241_122:
		next_state = LEGUP_F_main_BB__239_120;
LEGUP_F_main_BB__248_123:
	if ((main_248_250 == 1'd1))
		next_state = LEGUP_F_main_BB__251_124;
	else if ((main_248_250 == 1'd0))
		next_state = LEGUP_F_main_BB__253_125;
LEGUP_F_main_BB__251_124:
		next_state = LEGUP_F_main_BB__255_126;
LEGUP_F_main_BB__253_125:
		next_state = LEGUP_F_main_BB__255_126;
LEGUP_F_main_BB__255_126:
		next_state = LEGUP_0;
LEGUP_F_main_BB__26_26:
	if ((main_26_27 == 32'd33))
		next_state = LEGUP_F_main_BB__36_27;
	else if ((main_26_27 == 32'd35))
		next_state = LEGUP_F_main_BB__43_30;
	else if ((main_26_27 == 32'd24))
		next_state = LEGUP_F_main_BB__50_33;
	else if ((main_26_27 == 32'd25))
		next_state = LEGUP_F_main_BB__61_36;
	else if ((main_26_27 == 32'd16))
		next_state = LEGUP_F_main_BB__72_39;
	else if ((main_26_27 == 32'd18))
		next_state = LEGUP_F_main_BB__74_41;
	else if ((main_26_27 == 32'd36))
		next_state = LEGUP_F_main_BB__76_43;
	else if ((main_26_27 == 32'd37))
		next_state = LEGUP_F_main_BB__83_46;
	else if ((main_26_27 == 32'd38))
		next_state = LEGUP_F_main_BB__90_49;
	else if ((main_26_27 == 32'd0))
		next_state = LEGUP_F_main_BB__97_52;
	else if ((main_26_27 == 32'd2))
		next_state = LEGUP_F_main_BB__102_55;
	else if ((main_26_27 == 32'd4))
		next_state = LEGUP_F_main_BB__107_58;
	else if ((main_26_27 == 32'd6))
		next_state = LEGUP_F_main_BB__114_61;
	else if ((main_26_27 == 32'd42))
		next_state = LEGUP_F_main_BB__121_64;
	else if ((main_26_27 == 32'd43))
		next_state = LEGUP_F_main_BB__129_67;
	else if ((main_26_27 == 32'd8))
		next_state = LEGUP_F_main_BB__137_70;
	else if ((main_26_27 != 32'd33) && (main_26_27 != 32'd35) && (main_26_27 != 32'd24) && (main_26_27 != 32'd25) && (main_26_27 != 32'd16) && (main_26_27 != 32'd18) && (main_26_27 != 32'd36) && (main_26_27 != 32'd37) && (main_26_27 != 32'd38) && (main_26_27 != 32'd0) && (main_26_27 != 32'd2) && (main_26_27 != 32'd4) && (main_26_27 != 32'd6) && (main_26_27 != 32'd42) && (main_26_27 != 32'd43) && (main_26_27 != 32'd8))
		next_state = LEGUP_F_main_BB_thread_114;
LEGUP_F_main_BB__2_4:
		next_state = LEGUP_F_main_BB__2_5;
LEGUP_F_main_BB__2_5:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__36_27:
		next_state = LEGUP_F_main_BB__36_28;
LEGUP_F_main_BB__36_28:
		next_state = LEGUP_F_main_BB__36_29;
LEGUP_F_main_BB__36_29:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__3_10:
		next_state = LEGUP_F_main_BB__3_11;
LEGUP_F_main_BB__3_11:
		next_state = LEGUP_F_main_BB__3_12;
LEGUP_F_main_BB__3_12:
		next_state = LEGUP_F_main_BB_legup_memset_4exit_6;
LEGUP_F_main_BB__3_9:
		next_state = LEGUP_F_main_BB__3_10;
LEGUP_F_main_BB__43_30:
		next_state = LEGUP_F_main_BB__43_31;
LEGUP_F_main_BB__43_31:
		next_state = LEGUP_F_main_BB__43_32;
LEGUP_F_main_BB__43_32:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__50_33:
		next_state = LEGUP_F_main_BB__50_34;
LEGUP_F_main_BB__50_34:
		next_state = LEGUP_F_main_BB__50_35;
LEGUP_F_main_BB__50_35:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__61_36:
		next_state = LEGUP_F_main_BB__61_37;
LEGUP_F_main_BB__61_37:
		next_state = LEGUP_F_main_BB__61_38;
LEGUP_F_main_BB__61_38:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__72_39:
		next_state = LEGUP_F_main_BB__72_40;
LEGUP_F_main_BB__72_40:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__74_41:
		next_state = LEGUP_F_main_BB__74_42;
LEGUP_F_main_BB__74_42:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__76_43:
		next_state = LEGUP_F_main_BB__76_44;
LEGUP_F_main_BB__76_44:
		next_state = LEGUP_F_main_BB__76_45;
LEGUP_F_main_BB__76_45:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__83_46:
		next_state = LEGUP_F_main_BB__83_47;
LEGUP_F_main_BB__83_47:
		next_state = LEGUP_F_main_BB__83_48;
LEGUP_F_main_BB__83_48:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__8_14:
		next_state = LEGUP_F_main_BB__8_15;
LEGUP_F_main_BB__8_15:
		next_state = LEGUP_F_main_BB__8_16;
LEGUP_F_main_BB__8_16:
		next_state = LEGUP_F_main_BB_preheader5_13;
LEGUP_F_main_BB__90_49:
		next_state = LEGUP_F_main_BB__90_50;
LEGUP_F_main_BB__90_50:
		next_state = LEGUP_F_main_BB__90_51;
LEGUP_F_main_BB__90_51:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__97_52:
		next_state = LEGUP_F_main_BB__97_53;
LEGUP_F_main_BB__97_53:
		next_state = LEGUP_F_main_BB__97_54;
LEGUP_F_main_BB__97_54:
		next_state = LEGUP_F_main_BB__234_116;
LEGUP_F_main_BB__9_17:
		next_state = LEGUP_F_main_BB__9_18;
LEGUP_F_main_BB__9_18:
		next_state = LEGUP_F_main_BB__11_19;
LEGUP_F_main_BB_legup_memset_4exit_6:
		next_state = LEGUP_F_main_BB_legup_memset_4exit_7;
LEGUP_F_main_BB_legup_memset_4exit_7:
	if ((main_legup_memset_4exit_exitcond9_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader5preheader_8;
	else if ((main_legup_memset_4exit_exitcond9_reg == 1'd0))
		next_state = LEGUP_F_main_BB__3_9;
LEGUP_F_main_BB_legup_memset_4exitpreheader_3:
		next_state = LEGUP_F_main_BB_legup_memset_4exit_6;
LEGUP_F_main_BB_loopexit_119:
		next_state = LEGUP_F_main_BB__239_120;
LEGUP_F_main_BB_loopexitloopexit_118:
		next_state = LEGUP_F_main_BB_loopexit_119;
LEGUP_F_main_BB_preheader5_13:
	if ((main_preheader5_exitcond5 == 1'd1))
		next_state = LEGUP_F_main_BB__9_17;
	else if ((main_preheader5_exitcond5 == 1'd0))
		next_state = LEGUP_F_main_BB__8_14;
LEGUP_F_main_BB_preheader5preheader_8:
		next_state = LEGUP_F_main_BB_preheader5_13;
LEGUP_F_main_BB_preheader_20:
		next_state = LEGUP_F_main_BB__18_24;
LEGUP_F_main_BB_thread_114:
		next_state = LEGUP_F_main_BB_thread_115;
LEGUP_F_main_BB_thread_115:
		next_state = LEGUP_F_main_BB_loopexit_119;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar15 = 32'd0;
	end
	/* main: %1*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %2 ], [ 0, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__2_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_indvar15 = main_2_indvarnext16_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar15_reg <= main_1_indvar15;
		if (start == 1'b0 && ^(main_1_indvar15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar15_reg"); $finish; end
	end
	/* main: %1*/
	/*   %indvar15 = phi i32 [ %indvar.next16, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__2_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar15_reg <= main_1_indvar15;
		if (start == 1'b0 && ^(main_1_indvar15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond17 = icmp eq i32 %indvar15, 64*/
		main_1_exitcond17 = (main_1_indvar15_reg == 32'd64);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond17 = icmp eq i32 %indvar15, 64*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_exitcond17_reg <= main_1_exitcond17;
		if (start == 1'b0 && ^(main_1_exitcond17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %s.i.0 = getelementptr [64 x i32]* %dmem, i32 0, i32 %indvar15*/
		main_2_si0 = (1'd0 | (4 * main_1_indvar15_reg));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %s.i.0 = getelementptr [64 x i32]* %dmem, i32 0, i32 %indvar15*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_2_si0_reg <= main_2_si0;
		if (start == 1'b0 && ^(main_2_si0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_si0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next16 = add i32 %indvar15, 1*/
		main_2_indvarnext16 = (main_1_indvar15_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %indvar.next16 = add i32 %indvar15, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_2_indvarnext16_reg <= main_2_indvarnext16;
		if (start == 1'b0 && ^(main_2_indvarnext16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_indvarnext16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %indvar7 = phi i32 [ 0, %legup_memset_4.exit.preheader ], [ %indvar.next8, %3 ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exitpreheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4exit_indvar7 = 32'd0;
	end
	/* main: %legup_memset_4.exit*/
	/*   %indvar7 = phi i32 [ 0, %legup_memset_4.exit.preheader ], [ %indvar.next8, %3 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__3_12) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_legup_memset_4exit_indvar7 = main_3_indvarnext8_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %indvar7 = phi i32 [ 0, %legup_memset_4.exit.preheader ], [ %indvar.next8, %3 ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exitpreheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4exit_indvar7_reg <= main_legup_memset_4exit_indvar7;
		if (start == 1'b0 && ^(main_legup_memset_4exit_indvar7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_indvar7_reg"); $finish; end
	end
	/* main: %legup_memset_4.exit*/
	/*   %indvar7 = phi i32 [ 0, %legup_memset_4.exit.preheader ], [ %indvar.next8, %3 ]*/
	if (((cur_state == LEGUP_F_main_BB__3_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4exit_indvar7_reg <= main_legup_memset_4exit_indvar7;
		if (start == 1'b0 && ^(main_legup_memset_4exit_indvar7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_indvar7_reg"); $finish; end
	end
end
always @(*) begin
	main_legup_memset_4exit_i10 = main_legup_memset_4exit_i10_stage0_reg;
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %i1.0 = mul i32 %indvar7, 5*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_7)) begin
		main_legup_memset_4exit_i10_reg <= main_legup_memset_4exit_i10;
		if (start == 1'b0 && ^(main_legup_memset_4exit_i10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_i10_reg"); $finish; end
	end
	/* main: %legup_memset_4.exit*/
	/*   %i1.0 = mul i32 %indvar7, 5*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_7)) begin
		main_legup_memset_4exit_i10_reg <= main_legup_memset_4exit_i10;
		if (start == 1'b0 && ^(main_legup_memset_4exit_i10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_i10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %exitcond9 = icmp eq i32 %indvar7, 6*/
		main_legup_memset_4exit_exitcond9 = (main_legup_memset_4exit_indvar7_reg == 32'd6);
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %exitcond9 = icmp eq i32 %indvar7, 6*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_legup_memset_4exit_exitcond9_reg <= main_legup_memset_4exit_exitcond9;
		if (start == 1'b0 && ^(main_legup_memset_4exit_exitcond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_exitcond9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep14 = getelementptr [32 x i32]* %reg, i32 0, i32 %i1.0*/
		main_3_scevgep14 = (1'd0 | (4 * main_legup_memset_4exit_i10_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep14 = getelementptr [32 x i32]* %reg, i32 0, i32 %i1.0*/
	if ((cur_state == LEGUP_F_main_BB__3_9)) begin
		main_3_scevgep14_reg <= main_3_scevgep14;
		if (start == 1'b0 && ^(main_3_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %4 = add i32 %i1.0, 1*/
		main_3_4 = (main_legup_memset_4exit_i10_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %4 = add i32 %i1.0, 1*/
	if ((cur_state == LEGUP_F_main_BB__3_9)) begin
		main_3_4_reg <= main_3_4;
		if (start == 1'b0 && ^(main_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep13 = getelementptr [32 x i32]* %reg, i32 0, i32 %4*/
		main_3_scevgep13 = (1'd0 | (4 * main_3_4_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep13 = getelementptr [32 x i32]* %reg, i32 0, i32 %4*/
	if ((cur_state == LEGUP_F_main_BB__3_10)) begin
		main_3_scevgep13_reg <= main_3_scevgep13;
		if (start == 1'b0 && ^(main_3_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %5 = add i32 %i1.0, 2*/
		main_3_5 = (main_legup_memset_4exit_i10_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %5 = add i32 %i1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB__3_9)) begin
		main_3_5_reg <= main_3_5;
		if (start == 1'b0 && ^(main_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep12 = getelementptr [32 x i32]* %reg, i32 0, i32 %5*/
		main_3_scevgep12 = (1'd0 | (4 * main_3_5_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep12 = getelementptr [32 x i32]* %reg, i32 0, i32 %5*/
	if ((cur_state == LEGUP_F_main_BB__3_10)) begin
		main_3_scevgep12_reg <= main_3_scevgep12;
		if (start == 1'b0 && ^(main_3_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %6 = add i32 %i1.0, 3*/
		main_3_6 = (main_legup_memset_4exit_i10_reg + 32'd3);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %6 = add i32 %i1.0, 3*/
	if ((cur_state == LEGUP_F_main_BB__3_9)) begin
		main_3_6_reg <= main_3_6;
		if (start == 1'b0 && ^(main_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep11 = getelementptr [32 x i32]* %reg, i32 0, i32 %6*/
		main_3_scevgep11 = (1'd0 | (4 * main_3_6_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep11 = getelementptr [32 x i32]* %reg, i32 0, i32 %6*/
	if ((cur_state == LEGUP_F_main_BB__3_10)) begin
		main_3_scevgep11_reg <= main_3_scevgep11;
		if (start == 1'b0 && ^(main_3_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %7 = add i32 %i1.0, 4*/
		main_3_7 = (main_legup_memset_4exit_i10_reg + 32'd4);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %7 = add i32 %i1.0, 4*/
	if ((cur_state == LEGUP_F_main_BB__3_9)) begin
		main_3_7_reg <= main_3_7;
		if (start == 1'b0 && ^(main_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep10 = getelementptr [32 x i32]* %reg, i32 0, i32 %7*/
		main_3_scevgep10 = (1'd0 | (4 * main_3_7_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep10 = getelementptr [32 x i32]* %reg, i32 0, i32 %7*/
	if ((cur_state == LEGUP_F_main_BB__3_10)) begin
		main_3_scevgep10_reg <= main_3_scevgep10;
		if (start == 1'b0 && ^(main_3_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %indvar.next8 = add i32 %indvar7, 1*/
		main_3_indvarnext8 = (main_legup_memset_4exit_indvar7_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %indvar.next8 = add i32 %indvar7, 1*/
	if ((cur_state == LEGUP_F_main_BB__3_9)) begin
		main_3_indvarnext8_reg <= main_3_indvarnext8;
		if (start == 1'b0 && ^(main_3_indvarnext8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_indvarnext8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5*/
	/*   %indvar = phi i32 [ 0, %.preheader5.preheader ], [ %indvar.next, %8 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader5preheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader5_indvar = 32'd0;
	end
	/* main: %.preheader5*/
	/*   %indvar = phi i32 [ 0, %.preheader5.preheader ], [ %indvar.next, %8 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__8_16) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader5_indvar = main_8_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader5*/
	/*   %indvar = phi i32 [ 0, %.preheader5.preheader ], [ %indvar.next, %8 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader5preheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader5_indvar_reg <= main_preheader5_indvar;
		if (start == 1'b0 && ^(main_preheader5_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5_indvar_reg"); $finish; end
	end
	/* main: %.preheader5*/
	/*   %indvar = phi i32 [ 0, %.preheader5.preheader ], [ %indvar.next, %8 ]*/
	if (((cur_state == LEGUP_F_main_BB__8_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader5_indvar_reg <= main_preheader5_indvar;
		if (start == 1'b0 && ^(main_preheader5_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5*/
	/*   %exitcond5 = icmp eq i32 %indvar, 2*/
		main_preheader5_exitcond5 = (main_preheader5_indvar_reg == 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader5*/
	/*   %exitcond5 = icmp eq i32 %indvar, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheader5_13)) begin
		main_preheader5_exitcond5_reg <= main_preheader5_exitcond5;
		if (start == 1'b0 && ^(main_preheader5_exitcond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5_exitcond5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %i1.1 = add i32 %indvar, 30*/
		main_8_i11 = (main_preheader5_indvar_reg + 32'd30);
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %i1.1 = add i32 %indvar, 30*/
	if ((cur_state == LEGUP_F_main_BB__8_14)) begin
		main_8_i11_reg <= main_8_i11;
		if (start == 1'b0 && ^(main_8_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_i11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %scevgep6 = getelementptr [32 x i32]* %reg, i32 0, i32 %i1.1*/
		main_8_scevgep6 = (1'd0 | (4 * main_8_i11_reg));
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %scevgep6 = getelementptr [32 x i32]* %reg, i32 0, i32 %i1.1*/
	if ((cur_state == LEGUP_F_main_BB__8_15)) begin
		main_8_scevgep6_reg <= main_8_scevgep6;
		if (start == 1'b0 && ^(main_8_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_8_indvarnext = (main_preheader5_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__8_14)) begin
		main_8_indvarnext_reg <= main_8_indvarnext;
		if (start == 1'b0 && ^(main_8_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %10 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 29*/
if (reset) begin main_9_10 = 0; end
		main_9_10 = (1'd0 | (4 * 32'd29));
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %10 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 29*/
	if ((cur_state == LEGUP_F_main_BB__9_17)) begin
		main_9_10_reg <= main_9_10;
		if (start == 1'b0 && ^(main_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %11*/
	/*   %12 = phi i32 [ 0, %9 ], [ %17, %15 ]*/
	if (((cur_state == LEGUP_F_main_BB__9_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_11_12 = 32'd0;
	end
	/* main: %11*/
	/*   %12 = phi i32 [ 0, %9 ], [ %17, %15 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__15_23) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_11_12 = main_15_17_reg;
	end
end
always @(posedge clk) begin
	/* main: %11*/
	/*   %12 = phi i32 [ 0, %9 ], [ %17, %15 ]*/
	if (((cur_state == LEGUP_F_main_BB__9_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_11_12_reg <= main_11_12;
		if (start == 1'b0 && ^(main_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_11_12_reg"); $finish; end
	end
	/* main: %11*/
	/*   %12 = phi i32 [ 0, %9 ], [ %17, %15 ]*/
	if (((cur_state == LEGUP_F_main_BB__15_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_11_12_reg <= main_11_12;
		if (start == 1'b0 && ^(main_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %11*/
	/*   %exitcond = icmp eq i32 %12, 8*/
		main_11_exitcond = (main_11_12_reg == 32'd8);
end
always @(posedge clk) begin
	/* main: %11*/
	/*   %exitcond = icmp eq i32 %12, 8*/
	if ((cur_state == LEGUP_F_main_BB__11_19)) begin
		main_11_exitcond_reg <= main_11_exitcond;
		if (start == 1'b0 && ^(main_11_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_11_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %13 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 0*/
if (reset) begin main_preheader_13 = 0; end
		main_preheader_13 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %13 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_preheader_20)) begin
		main_preheader_13_reg <= main_preheader_13;
		if (start == 1'b0 && ^(main_preheader_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %14 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 31*/
if (reset) begin main_preheader_14 = 0; end
		main_preheader_14 = (1'd0 | (4 * 32'd31));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %14 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 31*/
	if ((cur_state == LEGUP_F_main_BB_preheader_20)) begin
		main_preheader_14_reg <= main_preheader_14;
		if (start == 1'b0 && ^(main_preheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %scevgep4 = getelementptr [8 x i32]* @A, i32 0, i32 %12*/
		main_15_scevgep4 = (1'd0 | (4 * main_11_12_reg));
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %scevgep4 = getelementptr [8 x i32]* @A, i32 0, i32 %12*/
	if ((cur_state == LEGUP_F_main_BB__15_21)) begin
		main_15_scevgep4_reg <= main_15_scevgep4;
		if (start == 1'b0 && ^(main_15_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %scevgep3 = getelementptr [64 x i32]* %dmem, i32 0, i32 %12*/
		main_15_scevgep3 = (1'd0 | (4 * main_11_12_reg));
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %scevgep3 = getelementptr [64 x i32]* %dmem, i32 0, i32 %12*/
	if ((cur_state == LEGUP_F_main_BB__15_21)) begin
		main_15_scevgep3_reg <= main_15_scevgep3;
		if (start == 1'b0 && ^(main_15_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %16 = load i32* %scevgep4, align 4*/
		main_15_16 = A_out_a;
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %16 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_22)) begin
		main_15_16_reg <= main_15_16;
		if (start == 1'b0 && ^(main_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %17 = add nsw i32 %12, 1*/
		main_15_17 = (main_11_12_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %17 = add nsw i32 %12, 1*/
	if ((cur_state == LEGUP_F_main_BB__15_21)) begin
		main_15_17_reg <= main_15_17;
		if (start == 1'b0 && ^(main_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %19 = phi i32 [ %235, %234 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_19 = 32'd0;
	end
	/* main: %18*/
	/*   %19 = phi i32 [ %235, %234 ], [ 0, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__234_117) & (memory_controller_waitrequest == 1'd0)) & (main_234_236_reg == 1'd0))) */ begin
		main_18_19 = main_234_235_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %19 = phi i32 [ %235, %234 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_19_reg <= main_18_19;
		if (start == 1'b0 && ^(main_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_19_reg"); $finish; end
	end
	/* main: %18*/
	/*   %19 = phi i32 [ %235, %234 ], [ 0, %.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__234_117) & (memory_controller_waitrequest == 1'd0)) & (main_234_236_reg == 1'd0))) begin
		main_18_19_reg <= main_18_19;
		if (start == 1'b0 && ^(main_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %pc.0 = phi i32 [ %pc.6, %234 ], [ 4194304, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_pc0 = 32'd4194304;
	end
	/* main: %18*/
	/*   %pc.0 = phi i32 [ %pc.6, %234 ], [ 4194304, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__234_117) & (memory_controller_waitrequest == 1'd0)) & (main_234_236_reg == 1'd0))) */ begin
		main_18_pc0 = main_234_pc6_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %pc.0 = phi i32 [ %pc.6, %234 ], [ 4194304, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_pc0_reg <= main_18_pc0;
		if (start == 1'b0 && ^(main_18_pc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_pc0_reg"); $finish; end
	end
	/* main: %18*/
	/*   %pc.0 = phi i32 [ %pc.6, %234 ], [ 4194304, %.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__234_117) & (memory_controller_waitrequest == 1'd0)) & (main_234_236_reg == 1'd0))) begin
		main_18_pc0_reg <= main_18_pc0;
		if (start == 1'b0 && ^(main_18_pc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_pc0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %Lo.0 = phi i32 [ %Lo.2, %234 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_Lo0 = 32'd0;
	end
	/* main: %18*/
	/*   %Lo.0 = phi i32 [ %Lo.2, %234 ], [ 0, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__234_117) & (memory_controller_waitrequest == 1'd0)) & (main_234_236_reg == 1'd0))) */ begin
		main_18_Lo0 = main_234_Lo2_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %Lo.0 = phi i32 [ %Lo.2, %234 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_Lo0_reg <= main_18_Lo0;
		if (start == 1'b0 && ^(main_18_Lo0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_Lo0_reg"); $finish; end
	end
	/* main: %18*/
	/*   %Lo.0 = phi i32 [ %Lo.2, %234 ], [ 0, %.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__234_117) & (memory_controller_waitrequest == 1'd0)) & (main_234_236_reg == 1'd0))) begin
		main_18_Lo0_reg <= main_18_Lo0;
		if (start == 1'b0 && ^(main_18_Lo0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_Lo0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %Hi.0 = phi i32 [ %Hi.2, %234 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_Hi0 = 32'd0;
	end
	/* main: %18*/
	/*   %Hi.0 = phi i32 [ %Hi.2, %234 ], [ 0, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__234_117) & (memory_controller_waitrequest == 1'd0)) & (main_234_236_reg == 1'd0))) */ begin
		main_18_Hi0 = main_234_Hi2_reg;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %Hi.0 = phi i32 [ %Hi.2, %234 ], [ 0, %.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_Hi0_reg <= main_18_Hi0;
		if (start == 1'b0 && ^(main_18_Hi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_Hi0_reg"); $finish; end
	end
	/* main: %18*/
	/*   %Hi.0 = phi i32 [ %Hi.2, %234 ], [ 0, %.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__234_117) & (memory_controller_waitrequest == 1'd0)) & (main_234_236_reg == 1'd0))) begin
		main_18_Hi0_reg <= main_18_Hi0;
		if (start == 1'b0 && ^(main_18_Hi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_Hi0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %20 = lshr i32 %pc.0, 2*/
		main_18_20 = (main_18_pc0_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %20 = lshr i32 %pc.0, 2*/
	if ((cur_state == LEGUP_F_main_BB__18_24)) begin
		main_18_20_reg <= main_18_20;
		if (start == 1'b0 && ^(main_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %21 = and i32 %20, 63*/
		main_18_21 = (main_18_20 & 32'd63);
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %21 = and i32 %20, 63*/
	if ((cur_state == LEGUP_F_main_BB__18_24)) begin
		main_18_21_reg <= main_18_21;
		if (start == 1'b0 && ^(main_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %22 = getelementptr inbounds [44 x i32]* @imem, i32 0, i32 %21*/
		main_18_22 = (1'd0 | (4 * main_18_21));
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %22 = getelementptr inbounds [44 x i32]* @imem, i32 0, i32 %21*/
	if ((cur_state == LEGUP_F_main_BB__18_24)) begin
		main_18_22_reg <= main_18_22;
		if (start == 1'b0 && ^(main_18_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %23 = load i32* %22, align 4*/
		main_18_23 = imem_out_a;
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %23 = load i32* %22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__18_25)) begin
		main_18_23_reg <= main_18_23;
		if (start == 1'b0 && ^(main_18_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %24 = add nsw i32 %pc.0, 4*/
		main_18_24 = (main_18_pc0_reg + 32'd4);
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %24 = add nsw i32 %pc.0, 4*/
	if ((cur_state == LEGUP_F_main_BB__18_24)) begin
		main_18_24_reg <= main_18_24;
		if (start == 1'b0 && ^(main_18_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %25 = lshr i32 %23, 26*/
		main_18_25 = (main_18_23 >>> (32'd26 % 32));
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %25 = lshr i32 %23, 26*/
	if ((cur_state == LEGUP_F_main_BB__18_25)) begin
		main_18_25_reg <= main_18_25;
		if (start == 1'b0 && ^(main_18_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %27 = and i32 %23, 63*/
		main_26_27 = (main_18_23_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %27 = and i32 %23, 63*/
	if ((cur_state == LEGUP_F_main_BB__26_26)) begin
		main_26_27_reg <= main_26_27;
		if (start == 1'b0 && ^(main_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %28 = lshr i32 %23, 6*/
		main_26_28 = (main_18_23_reg >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %28 = lshr i32 %23, 6*/
	if ((cur_state == LEGUP_F_main_BB__26_26)) begin
		main_26_28_reg <= main_26_28;
		if (start == 1'b0 && ^(main_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %29 = and i32 %28, 31*/
		main_26_29 = (main_26_28 & 32'd31);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %29 = and i32 %28, 31*/
	if ((cur_state == LEGUP_F_main_BB__26_26)) begin
		main_26_29_reg <= main_26_29;
		if (start == 1'b0 && ^(main_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %30 = lshr i32 %23, 11*/
		main_26_30 = (main_18_23_reg >>> (32'd11 % 32));
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %30 = lshr i32 %23, 11*/
	if ((cur_state == LEGUP_F_main_BB__26_26)) begin
		main_26_30_reg <= main_26_30;
		if (start == 1'b0 && ^(main_26_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %31 = and i32 %30, 31*/
		main_26_31 = (main_26_30 & 32'd31);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %31 = and i32 %30, 31*/
	if ((cur_state == LEGUP_F_main_BB__26_26)) begin
		main_26_31_reg <= main_26_31;
		if (start == 1'b0 && ^(main_26_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %32 = lshr i32 %23, 16*/
		main_26_32 = (main_18_23_reg >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %32 = lshr i32 %23, 16*/
	if ((cur_state == LEGUP_F_main_BB__26_26)) begin
		main_26_32_reg <= main_26_32;
		if (start == 1'b0 && ^(main_26_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %33 = and i32 %32, 31*/
		main_26_33 = (main_26_32 & 32'd31);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %33 = and i32 %32, 31*/
	if ((cur_state == LEGUP_F_main_BB__26_26)) begin
		main_26_33_reg <= main_26_33;
		if (start == 1'b0 && ^(main_26_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %34 = lshr i32 %23, 21*/
		main_26_34 = (main_18_23_reg >>> (32'd21 % 32));
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %34 = lshr i32 %23, 21*/
	if ((cur_state == LEGUP_F_main_BB__26_26)) begin
		main_26_34_reg <= main_26_34;
		if (start == 1'b0 && ^(main_26_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %35 = and i32 %34, 31*/
		main_26_35 = (main_26_34 & 32'd31);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %35 = and i32 %34, 31*/
	if ((cur_state == LEGUP_F_main_BB__26_26)) begin
		main_26_35_reg <= main_26_35;
		if (start == 1'b0 && ^(main_26_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %37 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
		main_36_37 = (1'd0 | (4 * main_26_35_reg));
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %37 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		main_36_37_reg <= main_36_37;
		if (start == 1'b0 && ^(main_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %38 = load i32* %37, align 4*/
		main_36_38 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %38 = load i32* %37, align 4*/
	if ((cur_state == LEGUP_F_main_BB__36_28)) begin
		main_36_38_reg <= main_36_38;
		if (start == 1'b0 && ^(main_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %39 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_36_39 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %39 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		main_36_39_reg <= main_36_39;
		if (start == 1'b0 && ^(main_36_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %40 = load i32* %39, align 4*/
		main_36_40 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %40 = load i32* %39, align 4*/
	if ((cur_state == LEGUP_F_main_BB__36_28)) begin
		main_36_40_reg <= main_36_40;
		if (start == 1'b0 && ^(main_36_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %41 = add nsw i32 %38, %40*/
		main_36_41 = (main_36_38 + main_36_40);
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %41 = add nsw i32 %38, %40*/
	if ((cur_state == LEGUP_F_main_BB__36_28)) begin
		main_36_41_reg <= main_36_41;
		if (start == 1'b0 && ^(main_36_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %36*/
	/*   %42 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_36_42 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %36*/
	/*   %42 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		main_36_42_reg <= main_36_42;
		if (start == 1'b0 && ^(main_36_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_36_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %43*/
	/*   %44 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
		main_43_44 = (1'd0 | (4 * main_26_35_reg));
end
always @(posedge clk) begin
	/* main: %43*/
	/*   %44 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__43_30)) begin
		main_43_44_reg <= main_43_44;
		if (start == 1'b0 && ^(main_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %43*/
	/*   %45 = load i32* %44, align 4*/
		main_43_45 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %43*/
	/*   %45 = load i32* %44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__43_31)) begin
		main_43_45_reg <= main_43_45;
		if (start == 1'b0 && ^(main_43_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %43*/
	/*   %46 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_43_46 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %43*/
	/*   %46 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__43_30)) begin
		main_43_46_reg <= main_43_46;
		if (start == 1'b0 && ^(main_43_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %43*/
	/*   %47 = load i32* %46, align 4*/
		main_43_47 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %43*/
	/*   %47 = load i32* %46, align 4*/
	if ((cur_state == LEGUP_F_main_BB__43_31)) begin
		main_43_47_reg <= main_43_47;
		if (start == 1'b0 && ^(main_43_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %43*/
	/*   %48 = sub nsw i32 %45, %47*/
		main_43_48 = (main_43_45 - main_43_47);
end
always @(posedge clk) begin
	/* main: %43*/
	/*   %48 = sub nsw i32 %45, %47*/
	if ((cur_state == LEGUP_F_main_BB__43_31)) begin
		main_43_48_reg <= main_43_48;
		if (start == 1'b0 && ^(main_43_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %43*/
	/*   %49 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_43_49 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %43*/
	/*   %49 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__43_30)) begin
		main_43_49_reg <= main_43_49;
		if (start == 1'b0 && ^(main_43_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %51 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
		main_50_51 = (1'd0 | (4 * main_26_35_reg));
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %51 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__50_33)) begin
		main_50_51_reg <= main_50_51;
		if (start == 1'b0 && ^(main_50_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %52 = load i32* %51, align 4*/
		main_50_52 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %52 = load i32* %51, align 4*/
	if ((cur_state == LEGUP_F_main_BB__50_34)) begin
		main_50_52_reg <= main_50_52;
		if (start == 1'b0 && ^(main_50_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %53 = sext i32 %52 to i64*/
		main_50_53 = $signed(main_50_52);
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %53 = sext i32 %52 to i64*/
	if ((cur_state == LEGUP_F_main_BB__50_34)) begin
		main_50_53_reg <= main_50_53;
		if (start == 1'b0 && ^(main_50_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %54 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_50_54 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %54 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__50_33)) begin
		main_50_54_reg <= main_50_54;
		if (start == 1'b0 && ^(main_50_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %55 = load i32* %54, align 4*/
		main_50_55 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %55 = load i32* %54, align 4*/
	if ((cur_state == LEGUP_F_main_BB__50_34)) begin
		main_50_55_reg <= main_50_55;
		if (start == 1'b0 && ^(main_50_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %56 = sext i32 %55 to i64*/
		main_50_56 = $signed(main_50_55);
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %56 = sext i32 %55 to i64*/
	if ((cur_state == LEGUP_F_main_BB__50_34)) begin
		main_50_56_reg <= main_50_56;
		if (start == 1'b0 && ^(main_50_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_56_reg"); $finish; end
	end
end
always @(*) begin
	main_50_57 = main_50_57_stage0_reg;
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %57 = mul nsw i64 %53, %56*/
	if ((cur_state == LEGUP_F_main_BB__50_35)) begin
		main_50_57_reg <= main_50_57;
		if (start == 1'b0 && ^(main_50_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_57_reg"); $finish; end
	end
	/* main: %50*/
	/*   %57 = mul nsw i64 %53, %56*/
	if ((cur_state == LEGUP_F_main_BB__50_35)) begin
		main_50_57_reg <= main_50_57;
		if (start == 1'b0 && ^(main_50_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %58 = trunc i64 %57 to i32*/
		main_50_58 = main_50_57[31:0];
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %58 = trunc i64 %57 to i32*/
	if ((cur_state == LEGUP_F_main_BB__50_35)) begin
		main_50_58_reg <= main_50_58;
		if (start == 1'b0 && ^(main_50_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %59 = lshr i64 %57, 32*/
		main_50_59 = (main_50_57 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %59 = lshr i64 %57, 32*/
	if ((cur_state == LEGUP_F_main_BB__50_35)) begin
		main_50_59_reg <= main_50_59;
		if (start == 1'b0 && ^(main_50_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %60 = trunc i64 %59 to i32*/
		main_50_60 = main_50_59[31:0];
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %60 = trunc i64 %59 to i32*/
	if ((cur_state == LEGUP_F_main_BB__50_35)) begin
		main_50_60_reg <= main_50_60;
		if (start == 1'b0 && ^(main_50_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %61*/
	/*   %62 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
		main_61_62 = (1'd0 | (4 * main_26_35_reg));
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %62 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__61_36)) begin
		main_61_62_reg <= main_61_62;
		if (start == 1'b0 && ^(main_61_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %61*/
	/*   %63 = load i32* %62, align 4*/
		main_61_63 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %63 = load i32* %62, align 4*/
	if ((cur_state == LEGUP_F_main_BB__61_37)) begin
		main_61_63_reg <= main_61_63;
		if (start == 1'b0 && ^(main_61_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %61*/
	/*   %64 = sext i32 %63 to i64*/
		main_61_64 = $signed(main_61_63);
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %64 = sext i32 %63 to i64*/
	if ((cur_state == LEGUP_F_main_BB__61_37)) begin
		main_61_64_reg <= main_61_64;
		if (start == 1'b0 && ^(main_61_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %61*/
	/*   %65 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_61_65 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %65 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__61_36)) begin
		main_61_65_reg <= main_61_65;
		if (start == 1'b0 && ^(main_61_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %61*/
	/*   %66 = load i32* %65, align 4*/
		main_61_66 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %66 = load i32* %65, align 4*/
	if ((cur_state == LEGUP_F_main_BB__61_37)) begin
		main_61_66_reg <= main_61_66;
		if (start == 1'b0 && ^(main_61_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %61*/
	/*   %67 = sext i32 %66 to i64*/
		main_61_67 = $signed(main_61_66);
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %67 = sext i32 %66 to i64*/
	if ((cur_state == LEGUP_F_main_BB__61_37)) begin
		main_61_67_reg <= main_61_67;
		if (start == 1'b0 && ^(main_61_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_67_reg"); $finish; end
	end
end
always @(*) begin
	main_61_68 = main_61_68_stage0_reg;
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %68 = mul i64 %64, %67*/
	if ((cur_state == LEGUP_F_main_BB__61_38)) begin
		main_61_68_reg <= main_61_68;
		if (start == 1'b0 && ^(main_61_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_68_reg"); $finish; end
	end
	/* main: %61*/
	/*   %68 = mul i64 %64, %67*/
	if ((cur_state == LEGUP_F_main_BB__61_38)) begin
		main_61_68_reg <= main_61_68;
		if (start == 1'b0 && ^(main_61_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %61*/
	/*   %69 = trunc i64 %68 to i32*/
		main_61_69 = main_61_68[31:0];
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %69 = trunc i64 %68 to i32*/
	if ((cur_state == LEGUP_F_main_BB__61_38)) begin
		main_61_69_reg <= main_61_69;
		if (start == 1'b0 && ^(main_61_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %61*/
	/*   %70 = lshr i64 %68, 32*/
		main_61_70 = (main_61_68 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %70 = lshr i64 %68, 32*/
	if ((cur_state == LEGUP_F_main_BB__61_38)) begin
		main_61_70_reg <= main_61_70;
		if (start == 1'b0 && ^(main_61_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %61*/
	/*   %71 = trunc i64 %70 to i32*/
		main_61_71 = main_61_70[31:0];
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %71 = trunc i64 %70 to i32*/
	if ((cur_state == LEGUP_F_main_BB__61_38)) begin
		main_61_71_reg <= main_61_71;
		if (start == 1'b0 && ^(main_61_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_61_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %72*/
	/*   %73 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_72_73 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %72*/
	/*   %73 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__72_39)) begin
		main_72_73_reg <= main_72_73;
		if (start == 1'b0 && ^(main_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_72_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %74*/
	/*   %75 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_74_75 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %74*/
	/*   %75 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__74_41)) begin
		main_74_75_reg <= main_74_75;
		if (start == 1'b0 && ^(main_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %77 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
		main_76_77 = (1'd0 | (4 * main_26_35_reg));
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %77 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__76_43)) begin
		main_76_77_reg <= main_76_77;
		if (start == 1'b0 && ^(main_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %78 = load i32* %77, align 4*/
		main_76_78 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %78 = load i32* %77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__76_44)) begin
		main_76_78_reg <= main_76_78;
		if (start == 1'b0 && ^(main_76_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %79 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_76_79 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %79 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__76_43)) begin
		main_76_79_reg <= main_76_79;
		if (start == 1'b0 && ^(main_76_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %80 = load i32* %79, align 4*/
		main_76_80 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %80 = load i32* %79, align 4*/
	if ((cur_state == LEGUP_F_main_BB__76_44)) begin
		main_76_80_reg <= main_76_80;
		if (start == 1'b0 && ^(main_76_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %81 = and i32 %78, %80*/
		main_76_81 = (main_76_78 & main_76_80);
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %81 = and i32 %78, %80*/
	if ((cur_state == LEGUP_F_main_BB__76_44)) begin
		main_76_81_reg <= main_76_81;
		if (start == 1'b0 && ^(main_76_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %82 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_76_82 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %82 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__76_43)) begin
		main_76_82_reg <= main_76_82;
		if (start == 1'b0 && ^(main_76_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %83*/
	/*   %84 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
		main_83_84 = (1'd0 | (4 * main_26_35_reg));
end
always @(posedge clk) begin
	/* main: %83*/
	/*   %84 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__83_46)) begin
		main_83_84_reg <= main_83_84;
		if (start == 1'b0 && ^(main_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_83_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %83*/
	/*   %85 = load i32* %84, align 4*/
		main_83_85 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %83*/
	/*   %85 = load i32* %84, align 4*/
	if ((cur_state == LEGUP_F_main_BB__83_47)) begin
		main_83_85_reg <= main_83_85;
		if (start == 1'b0 && ^(main_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_83_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %83*/
	/*   %86 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_83_86 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %83*/
	/*   %86 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__83_46)) begin
		main_83_86_reg <= main_83_86;
		if (start == 1'b0 && ^(main_83_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_83_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %83*/
	/*   %87 = load i32* %86, align 4*/
		main_83_87 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %83*/
	/*   %87 = load i32* %86, align 4*/
	if ((cur_state == LEGUP_F_main_BB__83_47)) begin
		main_83_87_reg <= main_83_87;
		if (start == 1'b0 && ^(main_83_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_83_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %83*/
	/*   %88 = or i32 %85, %87*/
		main_83_88 = (main_83_85 | main_83_87);
end
always @(posedge clk) begin
	/* main: %83*/
	/*   %88 = or i32 %85, %87*/
	if ((cur_state == LEGUP_F_main_BB__83_47)) begin
		main_83_88_reg <= main_83_88;
		if (start == 1'b0 && ^(main_83_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_83_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %83*/
	/*   %89 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_83_89 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %83*/
	/*   %89 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__83_46)) begin
		main_83_89_reg <= main_83_89;
		if (start == 1'b0 && ^(main_83_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_83_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %91 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
		main_90_91 = (1'd0 | (4 * main_26_35_reg));
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %91 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__90_49)) begin
		main_90_91_reg <= main_90_91;
		if (start == 1'b0 && ^(main_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %92 = load i32* %91, align 4*/
		main_90_92 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %92 = load i32* %91, align 4*/
	if ((cur_state == LEGUP_F_main_BB__90_50)) begin
		main_90_92_reg <= main_90_92;
		if (start == 1'b0 && ^(main_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %93 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_90_93 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %93 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__90_49)) begin
		main_90_93_reg <= main_90_93;
		if (start == 1'b0 && ^(main_90_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %94 = load i32* %93, align 4*/
		main_90_94 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %94 = load i32* %93, align 4*/
	if ((cur_state == LEGUP_F_main_BB__90_50)) begin
		main_90_94_reg <= main_90_94;
		if (start == 1'b0 && ^(main_90_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %95 = xor i32 %92, %94*/
		main_90_95 = (main_90_92 ^ main_90_94);
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %95 = xor i32 %92, %94*/
	if ((cur_state == LEGUP_F_main_BB__90_50)) begin
		main_90_95_reg <= main_90_95;
		if (start == 1'b0 && ^(main_90_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %90*/
	/*   %96 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_90_96 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %90*/
	/*   %96 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__90_49)) begin
		main_90_96_reg <= main_90_96;
		if (start == 1'b0 && ^(main_90_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_90_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %97*/
	/*   %98 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_97_98 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %97*/
	/*   %98 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__97_52)) begin
		main_97_98_reg <= main_97_98;
		if (start == 1'b0 && ^(main_97_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_97_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %97*/
	/*   %99 = load i32* %98, align 4*/
		main_97_99 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %97*/
	/*   %99 = load i32* %98, align 4*/
	if ((cur_state == LEGUP_F_main_BB__97_53)) begin
		main_97_99_reg <= main_97_99;
		if (start == 1'b0 && ^(main_97_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_97_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %97*/
	/*   %100 = shl i32 %99, %29*/
		main_97_100 = (main_97_99 <<< (main_26_29_reg % 32));
end
always @(posedge clk) begin
	/* main: %97*/
	/*   %100 = shl i32 %99, %29*/
	if ((cur_state == LEGUP_F_main_BB__97_53)) begin
		main_97_100_reg <= main_97_100;
		if (start == 1'b0 && ^(main_97_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_97_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %97*/
	/*   %101 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_97_101 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %97*/
	/*   %101 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__97_52)) begin
		main_97_101_reg <= main_97_101;
		if (start == 1'b0 && ^(main_97_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_97_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %103 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_102_103 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %103 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__102_55)) begin
		main_102_103_reg <= main_102_103;
		if (start == 1'b0 && ^(main_102_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %104 = load i32* %103, align 4*/
		main_102_104 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %104 = load i32* %103, align 4*/
	if ((cur_state == LEGUP_F_main_BB__102_56)) begin
		main_102_104_reg <= main_102_104;
		if (start == 1'b0 && ^(main_102_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %105 = ashr i32 %104, %29*/
		main_102_105 = ($signed(main_102_104) >>> main_26_29_reg);
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %105 = ashr i32 %104, %29*/
	if ((cur_state == LEGUP_F_main_BB__102_56)) begin
		main_102_105_reg <= main_102_105;
		if (start == 1'b0 && ^(main_102_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %102*/
	/*   %106 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_102_106 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %102*/
	/*   %106 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__102_55)) begin
		main_102_106_reg <= main_102_106;
		if (start == 1'b0 && ^(main_102_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_102_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %108 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_107_108 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %108 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__107_58)) begin
		main_107_108_reg <= main_107_108;
		if (start == 1'b0 && ^(main_107_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %109 = load i32* %108, align 4*/
		main_107_109 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %109 = load i32* %108, align 4*/
	if ((cur_state == LEGUP_F_main_BB__107_59)) begin
		main_107_109_reg <= main_107_109;
		if (start == 1'b0 && ^(main_107_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %110 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
		main_107_110 = (1'd0 | (4 * main_26_35_reg));
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %110 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__107_58)) begin
		main_107_110_reg <= main_107_110;
		if (start == 1'b0 && ^(main_107_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %111 = load i32* %110, align 4*/
		main_107_111 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %111 = load i32* %110, align 4*/
	if ((cur_state == LEGUP_F_main_BB__107_59)) begin
		main_107_111_reg <= main_107_111;
		if (start == 1'b0 && ^(main_107_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %112 = shl i32 %109, %111*/
		main_107_112 = (main_107_109 <<< (main_107_111 % 32));
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %112 = shl i32 %109, %111*/
	if ((cur_state == LEGUP_F_main_BB__107_59)) begin
		main_107_112_reg <= main_107_112;
		if (start == 1'b0 && ^(main_107_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %113 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_107_113 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %113 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__107_58)) begin
		main_107_113_reg <= main_107_113;
		if (start == 1'b0 && ^(main_107_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %115 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_114_115 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %115 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__114_61)) begin
		main_114_115_reg <= main_114_115;
		if (start == 1'b0 && ^(main_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %116 = load i32* %115, align 4*/
		main_114_116 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %116 = load i32* %115, align 4*/
	if ((cur_state == LEGUP_F_main_BB__114_62)) begin
		main_114_116_reg <= main_114_116;
		if (start == 1'b0 && ^(main_114_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %117 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
		main_114_117 = (1'd0 | (4 * main_26_35_reg));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %117 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__114_61)) begin
		main_114_117_reg <= main_114_117;
		if (start == 1'b0 && ^(main_114_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %118 = load i32* %117, align 4*/
		main_114_118 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %118 = load i32* %117, align 4*/
	if ((cur_state == LEGUP_F_main_BB__114_62)) begin
		main_114_118_reg <= main_114_118;
		if (start == 1'b0 && ^(main_114_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %119 = ashr i32 %116, %118*/
		main_114_119 = ($signed(main_114_116) >>> main_114_118);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %119 = ashr i32 %116, %118*/
	if ((cur_state == LEGUP_F_main_BB__114_62)) begin
		main_114_119_reg <= main_114_119;
		if (start == 1'b0 && ^(main_114_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %120 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_114_120 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %120 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__114_61)) begin
		main_114_120_reg <= main_114_120;
		if (start == 1'b0 && ^(main_114_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %122 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
		main_121_122 = (1'd0 | (4 * main_26_35_reg));
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %122 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__121_64)) begin
		main_121_122_reg <= main_121_122;
		if (start == 1'b0 && ^(main_121_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %123 = load i32* %122, align 4*/
		main_121_123 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %123 = load i32* %122, align 4*/
	if ((cur_state == LEGUP_F_main_BB__121_65)) begin
		main_121_123_reg <= main_121_123;
		if (start == 1'b0 && ^(main_121_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %124 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_121_124 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %124 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__121_64)) begin
		main_121_124_reg <= main_121_124;
		if (start == 1'b0 && ^(main_121_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %125 = load i32* %124, align 4*/
		main_121_125 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %125 = load i32* %124, align 4*/
	if ((cur_state == LEGUP_F_main_BB__121_65)) begin
		main_121_125_reg <= main_121_125;
		if (start == 1'b0 && ^(main_121_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %126 = icmp slt i32 %123, %125*/
		main_121_126 = ($signed(main_121_123) < $signed(main_121_125));
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %126 = icmp slt i32 %123, %125*/
	if ((cur_state == LEGUP_F_main_BB__121_65)) begin
		main_121_126_reg <= main_121_126;
		if (start == 1'b0 && ^(main_121_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %127 = zext i1 %126 to i32*/
		main_121_127 = main_121_126;
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %127 = zext i1 %126 to i32*/
	if ((cur_state == LEGUP_F_main_BB__121_65)) begin
		main_121_127_reg <= main_121_127;
		if (start == 1'b0 && ^(main_121_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %121*/
	/*   %128 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_121_128 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %121*/
	/*   %128 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__121_64)) begin
		main_121_128_reg <= main_121_128;
		if (start == 1'b0 && ^(main_121_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_121_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %129*/
	/*   %130 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
		main_129_130 = (1'd0 | (4 * main_26_35_reg));
end
always @(posedge clk) begin
	/* main: %129*/
	/*   %130 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__129_67)) begin
		main_129_130_reg <= main_129_130;
		if (start == 1'b0 && ^(main_129_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_129_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %129*/
	/*   %131 = load i32* %130, align 4*/
		main_129_131 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %129*/
	/*   %131 = load i32* %130, align 4*/
	if ((cur_state == LEGUP_F_main_BB__129_68)) begin
		main_129_131_reg <= main_129_131;
		if (start == 1'b0 && ^(main_129_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_129_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %129*/
	/*   %132 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
		main_129_132 = (1'd0 | (4 * main_26_33_reg));
end
always @(posedge clk) begin
	/* main: %129*/
	/*   %132 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__129_67)) begin
		main_129_132_reg <= main_129_132;
		if (start == 1'b0 && ^(main_129_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_129_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %129*/
	/*   %133 = load i32* %132, align 4*/
		main_129_133 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %129*/
	/*   %133 = load i32* %132, align 4*/
	if ((cur_state == LEGUP_F_main_BB__129_68)) begin
		main_129_133_reg <= main_129_133;
		if (start == 1'b0 && ^(main_129_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_129_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %129*/
	/*   %134 = icmp ult i32 %131, %133*/
		main_129_134 = (main_129_131 < main_129_133);
end
always @(posedge clk) begin
	/* main: %129*/
	/*   %134 = icmp ult i32 %131, %133*/
	if ((cur_state == LEGUP_F_main_BB__129_68)) begin
		main_129_134_reg <= main_129_134;
		if (start == 1'b0 && ^(main_129_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_129_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %129*/
	/*   %135 = zext i1 %134 to i32*/
		main_129_135 = main_129_134;
end
always @(posedge clk) begin
	/* main: %129*/
	/*   %135 = zext i1 %134 to i32*/
	if ((cur_state == LEGUP_F_main_BB__129_68)) begin
		main_129_135_reg <= main_129_135;
		if (start == 1'b0 && ^(main_129_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_129_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %129*/
	/*   %136 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
		main_129_136 = (1'd0 | (4 * main_26_31_reg));
end
always @(posedge clk) begin
	/* main: %129*/
	/*   %136 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__129_67)) begin
		main_129_136_reg <= main_129_136;
		if (start == 1'b0 && ^(main_129_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_129_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %137*/
	/*   %138 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
		main_137_138 = (1'd0 | (4 * main_26_35_reg));
end
always @(posedge clk) begin
	/* main: %137*/
	/*   %138 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_main_BB__137_70)) begin
		main_137_138_reg <= main_137_138;
		if (start == 1'b0 && ^(main_137_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_137_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %137*/
	/*   %139 = load i32* %138, align 4*/
		main_137_139 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %137*/
	/*   %139 = load i32* %138, align 4*/
	if ((cur_state == LEGUP_F_main_BB__137_71)) begin
		main_137_139_reg <= main_137_139;
		if (start == 1'b0 && ^(main_137_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_137_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %141 = shl i32 %23, 2*/
		main_140_141 = (main_18_23_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %141 = shl i32 %23, 2*/
	if ((cur_state == LEGUP_F_main_BB__140_72)) begin
		main_140_141_reg <= main_140_141;
		if (start == 1'b0 && ^(main_140_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %142 = and i32 %141, 268435452*/
		main_140_142 = (main_140_141 & 32'd268435452);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %142 = and i32 %141, 268435452*/
	if ((cur_state == LEGUP_F_main_BB__140_72)) begin
		main_140_142_reg <= main_140_142;
		if (start == 1'b0 && ^(main_140_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %144 = shl i32 %23, 2*/
		main_143_144 = (main_18_23_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %143*/
	/*   %144 = shl i32 %23, 2*/
	if ((cur_state == LEGUP_F_main_BB__143_73)) begin
		main_143_144_reg <= main_143_144;
		if (start == 1'b0 && ^(main_143_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %145 = and i32 %144, 268435452*/
		main_143_145 = (main_143_144 & 32'd268435452);
end
always @(posedge clk) begin
	/* main: %143*/
	/*   %145 = and i32 %144, 268435452*/
	if ((cur_state == LEGUP_F_main_BB__143_73)) begin
		main_143_145_reg <= main_143_145;
		if (start == 1'b0 && ^(main_143_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %147 = lshr i32 %23, 16*/
		main_146_147 = (main_18_23_reg >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %147 = lshr i32 %23, 16*/
	if ((cur_state == LEGUP_F_main_BB__146_75)) begin
		main_146_147_reg <= main_146_147;
		if (start == 1'b0 && ^(main_146_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %148 = and i32 %147, 31*/
		main_146_148 = (main_146_147 & 32'd31);
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %148 = and i32 %147, 31*/
	if ((cur_state == LEGUP_F_main_BB__146_75)) begin
		main_146_148_reg <= main_146_148;
		if (start == 1'b0 && ^(main_146_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %149 = lshr i32 %23, 21*/
		main_146_149 = (main_18_23_reg >>> (32'd21 % 32));
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %149 = lshr i32 %23, 21*/
	if ((cur_state == LEGUP_F_main_BB__146_75)) begin
		main_146_149_reg <= main_146_149;
		if (start == 1'b0 && ^(main_146_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %146*/
	/*   %150 = and i32 %149, 31*/
		main_146_150 = (main_146_149 & 32'd31);
end
always @(posedge clk) begin
	/* main: %146*/
	/*   %150 = and i32 %149, 31*/
	if ((cur_state == LEGUP_F_main_BB__146_75)) begin
		main_146_150_reg <= main_146_150;
		if (start == 1'b0 && ^(main_146_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_146_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %152 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
		main_151_152 = (1'd0 | (4 * main_146_150_reg));
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %152 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB__151_76)) begin
		main_151_152_reg <= main_151_152;
		if (start == 1'b0 && ^(main_151_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %153 = load i32* %152, align 4*/
		main_151_153 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %153 = load i32* %152, align 4*/
	if ((cur_state == LEGUP_F_main_BB__151_77)) begin
		main_151_153_reg <= main_151_153;
		if (start == 1'b0 && ^(main_151_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %sext7 = shl i32 %23, 16*/
		main_151_sext7 = (main_18_23_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %sext7 = shl i32 %23, 16*/
	if ((cur_state == LEGUP_F_main_BB__151_76)) begin
		main_151_sext7_reg <= main_151_sext7;
		if (start == 1'b0 && ^(main_151_sext7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_sext7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %154 = ashr exact i32 %sext7, 16*/
		main_151_154 = ($signed(main_151_sext7) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %154 = ashr exact i32 %sext7, 16*/
	if ((cur_state == LEGUP_F_main_BB__151_76)) begin
		main_151_154_reg <= main_151_154;
		if (start == 1'b0 && ^(main_151_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %155 = add nsw i32 %153, %154*/
		main_151_155 = (main_151_153 + main_151_154_reg);
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %155 = add nsw i32 %153, %154*/
	if ((cur_state == LEGUP_F_main_BB__151_77)) begin
		main_151_155_reg <= main_151_155;
		if (start == 1'b0 && ^(main_151_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %151*/
	/*   %156 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
		main_151_156 = (1'd0 | (4 * main_146_148_reg));
end
always @(posedge clk) begin
	/* main: %151*/
	/*   %156 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
	if ((cur_state == LEGUP_F_main_BB__151_76)) begin
		main_151_156_reg <= main_151_156;
		if (start == 1'b0 && ^(main_151_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %158 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
		main_157_158 = (1'd0 | (4 * main_146_150_reg));
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %158 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB__157_79)) begin
		main_157_158_reg <= main_157_158;
		if (start == 1'b0 && ^(main_157_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %159 = load i32* %158, align 4*/
		main_157_159 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %159 = load i32* %158, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_80)) begin
		main_157_159_reg <= main_157_159;
		if (start == 1'b0 && ^(main_157_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %160 = and i32 %23, 65535*/
		main_157_160 = (main_18_23_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %160 = and i32 %23, 65535*/
	if ((cur_state == LEGUP_F_main_BB__157_79)) begin
		main_157_160_reg <= main_157_160;
		if (start == 1'b0 && ^(main_157_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %161 = and i32 %159, %160*/
		main_157_161 = (main_157_159 & main_157_160_reg);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %161 = and i32 %159, %160*/
	if ((cur_state == LEGUP_F_main_BB__157_80)) begin
		main_157_161_reg <= main_157_161;
		if (start == 1'b0 && ^(main_157_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %157*/
	/*   %162 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
		main_157_162 = (1'd0 | (4 * main_146_148_reg));
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %162 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
	if ((cur_state == LEGUP_F_main_BB__157_79)) begin
		main_157_162_reg <= main_157_162;
		if (start == 1'b0 && ^(main_157_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %163*/
	/*   %164 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
		main_163_164 = (1'd0 | (4 * main_146_150_reg));
end
always @(posedge clk) begin
	/* main: %163*/
	/*   %164 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB__163_82)) begin
		main_163_164_reg <= main_163_164;
		if (start == 1'b0 && ^(main_163_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_163_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %163*/
	/*   %165 = load i32* %164, align 4*/
		main_163_165 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %163*/
	/*   %165 = load i32* %164, align 4*/
	if ((cur_state == LEGUP_F_main_BB__163_83)) begin
		main_163_165_reg <= main_163_165;
		if (start == 1'b0 && ^(main_163_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_163_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %163*/
	/*   %166 = and i32 %23, 65535*/
		main_163_166 = (main_18_23_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %163*/
	/*   %166 = and i32 %23, 65535*/
	if ((cur_state == LEGUP_F_main_BB__163_82)) begin
		main_163_166_reg <= main_163_166;
		if (start == 1'b0 && ^(main_163_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_163_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %163*/
	/*   %167 = or i32 %165, %166*/
		main_163_167 = (main_163_165 | main_163_166_reg);
end
always @(posedge clk) begin
	/* main: %163*/
	/*   %167 = or i32 %165, %166*/
	if ((cur_state == LEGUP_F_main_BB__163_83)) begin
		main_163_167_reg <= main_163_167;
		if (start == 1'b0 && ^(main_163_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_163_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %163*/
	/*   %168 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
		main_163_168 = (1'd0 | (4 * main_146_148_reg));
end
always @(posedge clk) begin
	/* main: %163*/
	/*   %168 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
	if ((cur_state == LEGUP_F_main_BB__163_82)) begin
		main_163_168_reg <= main_163_168;
		if (start == 1'b0 && ^(main_163_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_163_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %169*/
	/*   %170 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
		main_169_170 = (1'd0 | (4 * main_146_150_reg));
end
always @(posedge clk) begin
	/* main: %169*/
	/*   %170 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB__169_85)) begin
		main_169_170_reg <= main_169_170;
		if (start == 1'b0 && ^(main_169_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_169_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %169*/
	/*   %171 = load i32* %170, align 4*/
		main_169_171 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %169*/
	/*   %171 = load i32* %170, align 4*/
	if ((cur_state == LEGUP_F_main_BB__169_86)) begin
		main_169_171_reg <= main_169_171;
		if (start == 1'b0 && ^(main_169_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_169_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %169*/
	/*   %172 = and i32 %23, 65535*/
		main_169_172 = (main_18_23_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %169*/
	/*   %172 = and i32 %23, 65535*/
	if ((cur_state == LEGUP_F_main_BB__169_85)) begin
		main_169_172_reg <= main_169_172;
		if (start == 1'b0 && ^(main_169_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_169_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %169*/
	/*   %173 = xor i32 %171, %172*/
		main_169_173 = (main_169_171 ^ main_169_172_reg);
end
always @(posedge clk) begin
	/* main: %169*/
	/*   %173 = xor i32 %171, %172*/
	if ((cur_state == LEGUP_F_main_BB__169_86)) begin
		main_169_173_reg <= main_169_173;
		if (start == 1'b0 && ^(main_169_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_169_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %169*/
	/*   %174 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
		main_169_174 = (1'd0 | (4 * main_146_148_reg));
end
always @(posedge clk) begin
	/* main: %169*/
	/*   %174 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
	if ((cur_state == LEGUP_F_main_BB__169_85)) begin
		main_169_174_reg <= main_169_174;
		if (start == 1'b0 && ^(main_169_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_169_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %176 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
		main_175_176 = (1'd0 | (4 * main_146_150_reg));
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %176 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB__175_88)) begin
		main_175_176_reg <= main_175_176;
		if (start == 1'b0 && ^(main_175_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %177 = load i32* %176, align 4*/
		main_175_177 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %177 = load i32* %176, align 4*/
	if ((cur_state == LEGUP_F_main_BB__175_89)) begin
		main_175_177_reg <= main_175_177;
		if (start == 1'b0 && ^(main_175_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %178 = add nsw i32 %177, %23*/
		main_175_178 = (main_175_177 + main_18_23_reg);
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %178 = add nsw i32 %177, %23*/
	if ((cur_state == LEGUP_F_main_BB__175_89)) begin
		main_175_178_reg <= main_175_178;
		if (start == 1'b0 && ^(main_175_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %179 = lshr i32 %178, 2*/
		main_175_179 = (main_175_178 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %179 = lshr i32 %178, 2*/
	if ((cur_state == LEGUP_F_main_BB__175_89)) begin
		main_175_179_reg <= main_175_179;
		if (start == 1'b0 && ^(main_175_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %180 = and i32 %179, 63*/
		main_175_180 = (main_175_179 & 32'd63);
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %180 = and i32 %179, 63*/
	if ((cur_state == LEGUP_F_main_BB__175_89)) begin
		main_175_180_reg <= main_175_180;
		if (start == 1'b0 && ^(main_175_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %181 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 %180*/
		main_175_181 = (1'd0 | (4 * main_175_180_reg));
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %181 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 %180*/
	if ((cur_state == LEGUP_F_main_BB__175_90)) begin
		main_175_181_reg <= main_175_181;
		if (start == 1'b0 && ^(main_175_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %182 = load i32* %181, align 4*/
		main_175_182 = main_0_dmem_out_a;
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %182 = load i32* %181, align 4*/
	if ((cur_state == LEGUP_F_main_BB__175_91)) begin
		main_175_182_reg <= main_175_182;
		if (start == 1'b0 && ^(main_175_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %183 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
		main_175_183 = (1'd0 | (4 * main_146_148_reg));
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %183 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
	if ((cur_state == LEGUP_F_main_BB__175_88)) begin
		main_175_183_reg <= main_175_183;
		if (start == 1'b0 && ^(main_175_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %185 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
		main_184_185 = (1'd0 | (4 * main_146_148_reg));
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %185 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
	if ((cur_state == LEGUP_F_main_BB__184_93)) begin
		main_184_185_reg <= main_184_185;
		if (start == 1'b0 && ^(main_184_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %186 = load i32* %185, align 4*/
		main_184_186 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %186 = load i32* %185, align 4*/
	if ((cur_state == LEGUP_F_main_BB__184_94)) begin
		main_184_186_reg <= main_184_186;
		if (start == 1'b0 && ^(main_184_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %187 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
		main_184_187 = (1'd0 | (4 * main_146_150_reg));
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %187 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB__184_93)) begin
		main_184_187_reg <= main_184_187;
		if (start == 1'b0 && ^(main_184_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %188 = load i32* %187, align 4*/
		main_184_188 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %188 = load i32* %187, align 4*/
	if ((cur_state == LEGUP_F_main_BB__184_94)) begin
		main_184_188_reg <= main_184_188;
		if (start == 1'b0 && ^(main_184_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %189 = add nsw i32 %188, %23*/
		main_184_189 = (main_184_188 + main_18_23_reg);
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %189 = add nsw i32 %188, %23*/
	if ((cur_state == LEGUP_F_main_BB__184_94)) begin
		main_184_189_reg <= main_184_189;
		if (start == 1'b0 && ^(main_184_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %190 = lshr i32 %189, 2*/
		main_184_190 = (main_184_189 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %190 = lshr i32 %189, 2*/
	if ((cur_state == LEGUP_F_main_BB__184_94)) begin
		main_184_190_reg <= main_184_190;
		if (start == 1'b0 && ^(main_184_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %191 = and i32 %190, 63*/
		main_184_191 = (main_184_190 & 32'd63);
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %191 = and i32 %190, 63*/
	if ((cur_state == LEGUP_F_main_BB__184_94)) begin
		main_184_191_reg <= main_184_191;
		if (start == 1'b0 && ^(main_184_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %184*/
	/*   %192 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 %191*/
		main_184_192 = (1'd0 | (4 * main_184_191_reg));
end
always @(posedge clk) begin
	/* main: %184*/
	/*   %192 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 %191*/
	if ((cur_state == LEGUP_F_main_BB__184_95)) begin
		main_184_192_reg <= main_184_192;
		if (start == 1'b0 && ^(main_184_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_184_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %193*/
	/*   %sext4 = shl i32 %23, 16*/
		main_193_sext4 = (main_18_23_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %193*/
	/*   %sext4 = shl i32 %23, 16*/
	if ((cur_state == LEGUP_F_main_BB__193_97)) begin
		main_193_sext4_reg <= main_193_sext4;
		if (start == 1'b0 && ^(main_193_sext4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_193_sext4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %193*/
	/*   %194 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
		main_193_194 = (1'd0 | (4 * main_146_148_reg));
end
always @(posedge clk) begin
	/* main: %193*/
	/*   %194 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
	if ((cur_state == LEGUP_F_main_BB__193_97)) begin
		main_193_194_reg <= main_193_194;
		if (start == 1'b0 && ^(main_193_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_193_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %195*/
	/*   %196 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
		main_195_196 = (1'd0 | (4 * main_146_150_reg));
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %196 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB__195_99)) begin
		main_195_196_reg <= main_195_196;
		if (start == 1'b0 && ^(main_195_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %195*/
	/*   %197 = load i32* %196, align 4*/
		main_195_197 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %197 = load i32* %196, align 4*/
	if ((cur_state == LEGUP_F_main_BB__195_100)) begin
		main_195_197_reg <= main_195_197;
		if (start == 1'b0 && ^(main_195_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %195*/
	/*   %198 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
		main_195_198 = (1'd0 | (4 * main_146_148_reg));
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %198 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
	if ((cur_state == LEGUP_F_main_BB__195_99)) begin
		main_195_198_reg <= main_195_198;
		if (start == 1'b0 && ^(main_195_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %195*/
	/*   %199 = load i32* %198, align 4*/
		main_195_199 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %199 = load i32* %198, align 4*/
	if ((cur_state == LEGUP_F_main_BB__195_100)) begin
		main_195_199_reg <= main_195_199;
		if (start == 1'b0 && ^(main_195_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %195*/
	/*   %200 = icmp eq i32 %197, %199*/
		main_195_200 = (main_195_197 == main_195_199);
end
always @(posedge clk) begin
	/* main: %195*/
	/*   %200 = icmp eq i32 %197, %199*/
	if ((cur_state == LEGUP_F_main_BB__195_100)) begin
		main_195_200_reg <= main_195_200;
		if (start == 1'b0 && ^(main_195_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_195_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %201*/
	/*   %sext3 = shl i32 %23, 16*/
		main_201_sext3 = (main_18_23_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %201*/
	/*   %sext3 = shl i32 %23, 16*/
	if ((cur_state == LEGUP_F_main_BB__201_101)) begin
		main_201_sext3_reg <= main_201_sext3;
		if (start == 1'b0 && ^(main_201_sext3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_201_sext3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %201*/
	/*   %202 = ashr exact i32 %sext3, 14*/
		main_201_202 = ($signed(main_201_sext3) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %201*/
	/*   %202 = ashr exact i32 %sext3, 14*/
	if ((cur_state == LEGUP_F_main_BB__201_101)) begin
		main_201_202_reg <= main_201_202;
		if (start == 1'b0 && ^(main_201_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_201_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %201*/
	/*   %203 = add nsw i32 %pc.0, %202*/
		main_201_203 = (main_18_pc0_reg + main_201_202);
end
always @(posedge clk) begin
	/* main: %201*/
	/*   %203 = add nsw i32 %pc.0, %202*/
	if ((cur_state == LEGUP_F_main_BB__201_101)) begin
		main_201_203_reg <= main_201_203;
		if (start == 1'b0 && ^(main_201_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_201_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %204*/
	/*   %205 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
		main_204_205 = (1'd0 | (4 * main_146_150_reg));
end
always @(posedge clk) begin
	/* main: %204*/
	/*   %205 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB__204_102)) begin
		main_204_205_reg <= main_204_205;
		if (start == 1'b0 && ^(main_204_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_204_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %204*/
	/*   %206 = load i32* %205, align 4*/
		main_204_206 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %204*/
	/*   %206 = load i32* %205, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_103)) begin
		main_204_206_reg <= main_204_206;
		if (start == 1'b0 && ^(main_204_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_204_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %204*/
	/*   %207 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
		main_204_207 = (1'd0 | (4 * main_146_148_reg));
end
always @(posedge clk) begin
	/* main: %204*/
	/*   %207 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
	if ((cur_state == LEGUP_F_main_BB__204_102)) begin
		main_204_207_reg <= main_204_207;
		if (start == 1'b0 && ^(main_204_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_204_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %204*/
	/*   %208 = load i32* %207, align 4*/
		main_204_208 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %204*/
	/*   %208 = load i32* %207, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_103)) begin
		main_204_208_reg <= main_204_208;
		if (start == 1'b0 && ^(main_204_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_204_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %204*/
	/*   %209 = icmp eq i32 %206, %208*/
		main_204_209 = (main_204_206 == main_204_208);
end
always @(posedge clk) begin
	/* main: %204*/
	/*   %209 = icmp eq i32 %206, %208*/
	if ((cur_state == LEGUP_F_main_BB__204_103)) begin
		main_204_209_reg <= main_204_209;
		if (start == 1'b0 && ^(main_204_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_204_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %sext2 = shl i32 %23, 16*/
		main_210_sext2 = (main_18_23_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %sext2 = shl i32 %23, 16*/
	if ((cur_state == LEGUP_F_main_BB__210_104)) begin
		main_210_sext2_reg <= main_210_sext2;
		if (start == 1'b0 && ^(main_210_sext2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_sext2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %211 = ashr exact i32 %sext2, 14*/
		main_210_211 = ($signed(main_210_sext2) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %211 = ashr exact i32 %sext2, 14*/
	if ((cur_state == LEGUP_F_main_BB__210_104)) begin
		main_210_211_reg <= main_210_211;
		if (start == 1'b0 && ^(main_210_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %212 = add nsw i32 %pc.0, %211*/
		main_210_212 = (main_18_pc0_reg + main_210_211);
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %212 = add nsw i32 %pc.0, %211*/
	if ((cur_state == LEGUP_F_main_BB__210_104)) begin
		main_210_212_reg <= main_210_212;
		if (start == 1'b0 && ^(main_210_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %214 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
		main_213_214 = (1'd0 | (4 * main_146_150_reg));
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %214 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB__213_105)) begin
		main_213_214_reg <= main_213_214;
		if (start == 1'b0 && ^(main_213_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %215 = load i32* %214, align 4*/
		main_213_215 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %215 = load i32* %214, align 4*/
	if ((cur_state == LEGUP_F_main_BB__213_106)) begin
		main_213_215_reg <= main_213_215;
		if (start == 1'b0 && ^(main_213_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %213*/
	/*   %216 = icmp sgt i32 %215, -1*/
		main_213_216 = ($signed(main_213_215) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %213*/
	/*   %216 = icmp sgt i32 %215, -1*/
	if ((cur_state == LEGUP_F_main_BB__213_106)) begin
		main_213_216_reg <= main_213_216;
		if (start == 1'b0 && ^(main_213_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_213_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %sext1 = shl i32 %23, 16*/
		main_217_sext1 = (main_18_23_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %sext1 = shl i32 %23, 16*/
	if ((cur_state == LEGUP_F_main_BB__217_107)) begin
		main_217_sext1_reg <= main_217_sext1;
		if (start == 1'b0 && ^(main_217_sext1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_sext1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %218 = ashr exact i32 %sext1, 14*/
		main_217_218 = ($signed(main_217_sext1) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %218 = ashr exact i32 %sext1, 14*/
	if ((cur_state == LEGUP_F_main_BB__217_107)) begin
		main_217_218_reg <= main_217_218;
		if (start == 1'b0 && ^(main_217_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %219 = add nsw i32 %pc.0, %218*/
		main_217_219 = (main_18_pc0_reg + main_217_218);
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %219 = add nsw i32 %pc.0, %218*/
	if ((cur_state == LEGUP_F_main_BB__217_107)) begin
		main_217_219_reg <= main_217_219;
		if (start == 1'b0 && ^(main_217_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %220*/
	/*   %221 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
		main_220_221 = (1'd0 | (4 * main_146_150_reg));
end
always @(posedge clk) begin
	/* main: %220*/
	/*   %221 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB__220_108)) begin
		main_220_221_reg <= main_220_221;
		if (start == 1'b0 && ^(main_220_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_220_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %220*/
	/*   %222 = load i32* %221, align 4*/
		main_220_222 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %220*/
	/*   %222 = load i32* %221, align 4*/
	if ((cur_state == LEGUP_F_main_BB__220_109)) begin
		main_220_222_reg <= main_220_222;
		if (start == 1'b0 && ^(main_220_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_220_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %220*/
	/*   %sext = shl i32 %23, 16*/
		main_220_sext = (main_18_23_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %220*/
	/*   %sext = shl i32 %23, 16*/
	if ((cur_state == LEGUP_F_main_BB__220_108)) begin
		main_220_sext_reg <= main_220_sext;
		if (start == 1'b0 && ^(main_220_sext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_220_sext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %220*/
	/*   %223 = ashr exact i32 %sext, 16*/
		main_220_223 = ($signed(main_220_sext) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %220*/
	/*   %223 = ashr exact i32 %sext, 16*/
	if ((cur_state == LEGUP_F_main_BB__220_108)) begin
		main_220_223_reg <= main_220_223;
		if (start == 1'b0 && ^(main_220_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_220_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %220*/
	/*   %224 = icmp slt i32 %222, %223*/
		main_220_224 = ($signed(main_220_222) < $signed(main_220_223_reg));
end
always @(posedge clk) begin
	/* main: %220*/
	/*   %224 = icmp slt i32 %222, %223*/
	if ((cur_state == LEGUP_F_main_BB__220_109)) begin
		main_220_224_reg <= main_220_224;
		if (start == 1'b0 && ^(main_220_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_220_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %220*/
	/*   %225 = zext i1 %224 to i32*/
		main_220_225 = main_220_224;
end
always @(posedge clk) begin
	/* main: %220*/
	/*   %225 = zext i1 %224 to i32*/
	if ((cur_state == LEGUP_F_main_BB__220_109)) begin
		main_220_225_reg <= main_220_225;
		if (start == 1'b0 && ^(main_220_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_220_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %220*/
	/*   %226 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
		main_220_226 = (1'd0 | (4 * main_146_148_reg));
end
always @(posedge clk) begin
	/* main: %220*/
	/*   %226 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
	if ((cur_state == LEGUP_F_main_BB__220_108)) begin
		main_220_226_reg <= main_220_226;
		if (start == 1'b0 && ^(main_220_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_220_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %227*/
	/*   %228 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
		main_227_228 = (1'd0 | (4 * main_146_150_reg));
end
always @(posedge clk) begin
	/* main: %227*/
	/*   %228 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %150*/
	if ((cur_state == LEGUP_F_main_BB__227_111)) begin
		main_227_228_reg <= main_227_228;
		if (start == 1'b0 && ^(main_227_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_227_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %227*/
	/*   %229 = load i32* %228, align 4*/
		main_227_229 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %227*/
	/*   %229 = load i32* %228, align 4*/
	if ((cur_state == LEGUP_F_main_BB__227_112)) begin
		main_227_229_reg <= main_227_229;
		if (start == 1'b0 && ^(main_227_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_227_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %227*/
	/*   %230 = and i32 %23, 65535*/
		main_227_230 = (main_18_23_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %227*/
	/*   %230 = and i32 %23, 65535*/
	if ((cur_state == LEGUP_F_main_BB__227_111)) begin
		main_227_230_reg <= main_227_230;
		if (start == 1'b0 && ^(main_227_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_227_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %227*/
	/*   %231 = icmp ult i32 %229, %230*/
		main_227_231 = (main_227_229 < main_227_230_reg);
end
always @(posedge clk) begin
	/* main: %227*/
	/*   %231 = icmp ult i32 %229, %230*/
	if ((cur_state == LEGUP_F_main_BB__227_112)) begin
		main_227_231_reg <= main_227_231;
		if (start == 1'b0 && ^(main_227_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_227_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %227*/
	/*   %232 = zext i1 %231 to i32*/
		main_227_232 = main_227_231;
end
always @(posedge clk) begin
	/* main: %227*/
	/*   %232 = zext i1 %231 to i32*/
	if ((cur_state == LEGUP_F_main_BB__227_112)) begin
		main_227_232_reg <= main_227_232;
		if (start == 1'b0 && ^(main_227_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_227_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %227*/
	/*   %233 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
		main_227_233 = (1'd0 | (4 * main_146_148_reg));
end
always @(posedge clk) begin
	/* main: %227*/
	/*   %233 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %148*/
	if ((cur_state == LEGUP_F_main_BB__227_111)) begin
		main_227_233_reg <= main_227_233;
		if (start == 1'b0 && ^(main_227_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_227_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__36_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__43_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__50_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__61_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__72_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__74_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__76_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__83_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__90_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__97_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__102_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__107_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__114_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__121_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__129_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__137_71) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_137_139;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__140_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_140_142;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__143_74) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_143_145_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__151_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__157_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__163_84) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__169_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__175_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__184_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__193_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__195_100) & (memory_controller_waitrequest == 1'd0)) & (main_195_200 == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__201_101) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_201_203;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__204_103) & (memory_controller_waitrequest == 1'd0)) & (main_204_209 == 1'd1))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__210_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_210_212;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__213_106) & (memory_controller_waitrequest == 1'd0)) & (main_213_216 == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__217_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_217_219;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__220_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6 = main_18_24_reg;
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__227_113) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_234_pc6 = main_18_24_reg;
	end
end
always @(posedge clk) begin
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__36_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__43_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__50_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__61_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__72_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__74_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__76_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__83_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__90_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__97_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__102_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__107_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__114_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__121_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__129_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__137_71) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__140_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__143_74) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__151_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__157_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__163_84) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__169_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__175_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__184_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__193_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if ((((cur_state == LEGUP_F_main_BB__195_100) & (memory_controller_waitrequest == 1'd0)) & (main_195_200 == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__201_101) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if ((((cur_state == LEGUP_F_main_BB__204_103) & (memory_controller_waitrequest == 1'd0)) & (main_204_209 == 1'd1))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__210_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if ((((cur_state == LEGUP_F_main_BB__213_106) & (memory_controller_waitrequest == 1'd0)) & (main_213_216 == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__217_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__220_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
	/* main: %234*/
	/*   %pc.6 = phi i32 [ %145, %143 ], [ %142, %140 ], [ %139, %137 ], [ %24, %129 ], [ %24, %121 ], [ %24, %114 ], [ %24, %107 ], [ %24, %102 ], [ %24, %97 ], [ %24, %90 ], [ %24, %83 ], [ %24, %76 ], [ %24, %74 ], [ %24, %72 ], [ %24, %61 ], [ %24, %50 ], [ %24, %43 ], [ %24, %36 ], [ %24, %227 ], [ %24, %220 ], [ %24, %193 ], [ %24, %184 ], [ %24, %175 ], [ %24, %169 ], [ %24, %163 ], [ %24, %157 ], [ %24, %151 ], [ %203, %201 ], [ %24, %195 ], [ %212, %210 ], [ %24, %204 ], [ %219, %217 ], [ %24, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__227_113) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_pc6_reg <= main_234_pc6;
		if (start == 1'b0 && ^(main_234_pc6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_pc6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__36_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__43_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__50_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_50_58;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__61_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_61_69;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__72_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__74_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__76_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__83_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__90_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__97_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__102_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__107_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__114_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__121_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__129_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__137_71) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__140_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__143_74) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__151_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__157_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__163_84) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__169_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__175_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__184_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__193_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__195_100) & (memory_controller_waitrequest == 1'd0)) & (main_195_200 == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__201_101) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__204_103) & (memory_controller_waitrequest == 1'd0)) & (main_204_209 == 1'd1))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__210_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__213_106) & (memory_controller_waitrequest == 1'd0)) & (main_213_216 == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__217_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__220_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__227_113) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_234_Lo2 = main_18_Lo0_reg;
	end
end
always @(posedge clk) begin
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__36_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__43_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__50_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__61_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__72_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__74_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__76_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__83_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__90_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__97_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__102_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__107_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__114_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__121_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__129_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__137_71) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__140_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__143_74) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__151_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__157_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__163_84) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__169_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__175_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__184_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__193_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if ((((cur_state == LEGUP_F_main_BB__195_100) & (memory_controller_waitrequest == 1'd0)) & (main_195_200 == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__201_101) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if ((((cur_state == LEGUP_F_main_BB__204_103) & (memory_controller_waitrequest == 1'd0)) & (main_204_209 == 1'd1))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__210_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if ((((cur_state == LEGUP_F_main_BB__213_106) & (memory_controller_waitrequest == 1'd0)) & (main_213_216 == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__217_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__220_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Lo.2 = phi i32 [ %Lo.0, %143 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %129 ], [ %Lo.0, %121 ], [ %Lo.0, %114 ], [ %Lo.0, %107 ], [ %Lo.0, %102 ], [ %Lo.0, %97 ], [ %Lo.0, %90 ], [ %Lo.0, %83 ], [ %Lo.0, %76 ], [ %Lo.0, %74 ], [ %Lo.0, %72 ], [ %69, %61 ], [ %58, %50 ], [ %Lo.0, %43 ], [ %Lo.0, %36 ], [ %Lo.0, %227 ], [ %Lo.0, %220 ], [ %Lo.0, %193 ], [ %Lo.0, %184 ], [ %Lo.0, %175 ], [ %Lo.0, %169 ], [ %Lo.0, %163 ], [ %Lo.0, %157 ], [ %Lo.0, %151 ], [ %Lo.0, %201 ], [ %Lo.0, %195 ], [ %Lo.0, %210 ], [ %Lo.0, %204 ], [ %Lo.0, %217 ], [ %Lo.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__227_113) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Lo2_reg <= main_234_Lo2;
		if (start == 1'b0 && ^(main_234_Lo2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Lo2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__36_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__43_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__50_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_50_60;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__61_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_61_71;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__72_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__74_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__76_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__83_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__90_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__97_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__102_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__107_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__114_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__121_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__129_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__137_71) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__140_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__143_74) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__151_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__157_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__163_84) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__169_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__175_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__184_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__193_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__195_100) & (memory_controller_waitrequest == 1'd0)) & (main_195_200 == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__201_101) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__204_103) & (memory_controller_waitrequest == 1'd0)) & (main_204_209 == 1'd1))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__210_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__213_106) & (memory_controller_waitrequest == 1'd0)) & (main_213_216 == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__217_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else if (((cur_state == LEGUP_F_main_BB__220_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__227_113) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_234_Hi2 = main_18_Hi0_reg;
	end
end
always @(posedge clk) begin
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__36_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__43_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__50_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__61_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__72_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__74_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__76_45) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__83_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__90_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__97_54) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__102_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__107_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__114_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__121_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__129_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__137_71) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__140_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__143_74) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__151_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__157_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__163_84) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__169_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__175_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__184_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__193_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if ((((cur_state == LEGUP_F_main_BB__195_100) & (memory_controller_waitrequest == 1'd0)) & (main_195_200 == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__201_101) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if ((((cur_state == LEGUP_F_main_BB__204_103) & (memory_controller_waitrequest == 1'd0)) & (main_204_209 == 1'd1))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__210_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if ((((cur_state == LEGUP_F_main_BB__213_106) & (memory_controller_waitrequest == 1'd0)) & (main_213_216 == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__217_107) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__220_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
	/* main: %234*/
	/*   %Hi.2 = phi i32 [ %Hi.0, %143 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %129 ], [ %Hi.0, %121 ], [ %Hi.0, %114 ], [ %Hi.0, %107 ], [ %Hi.0, %102 ], [ %Hi.0, %97 ], [ %Hi.0, %90 ], [ %Hi.0, %83 ], [ %Hi.0, %76 ], [ %Hi.0, %74 ], [ %Hi.0, %72 ], [ %71, %61 ], [ %60, %50 ], [ %Hi.0, %43 ], [ %Hi.0, %36 ], [ %Hi.0, %227 ], [ %Hi.0, %220 ], [ %Hi.0, %193 ], [ %Hi.0, %184 ], [ %Hi.0, %175 ], [ %Hi.0, %169 ], [ %Hi.0, %163 ], [ %Hi.0, %157 ], [ %Hi.0, %151 ], [ %Hi.0, %201 ], [ %Hi.0, %195 ], [ %Hi.0, %210 ], [ %Hi.0, %204 ], [ %Hi.0, %217 ], [ %Hi.0, %213 ]*/
	if (((cur_state == LEGUP_F_main_BB__227_113) & (memory_controller_waitrequest == 1'd0))) begin
		main_234_Hi2_reg <= main_234_Hi2;
		if (start == 1'b0 && ^(main_234_Hi2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_Hi2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %234*/
	/*   %235 = add nsw i32 %19, 1*/
		main_234_235 = (main_18_19_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %234*/
	/*   %235 = add nsw i32 %19, 1*/
	if ((cur_state == LEGUP_F_main_BB__234_116)) begin
		main_234_235_reg <= main_234_235;
		if (start == 1'b0 && ^(main_234_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %234*/
	/*   %236 = icmp eq i32 %pc.6, 0*/
		main_234_236 = (main_234_pc6_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %234*/
	/*   %236 = icmp eq i32 %pc.6, 0*/
	if ((cur_state == LEGUP_F_main_BB__234_116)) begin
		main_234_236_reg <= main_234_236;
		if (start == 1'b0 && ^(main_234_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_234_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %237 = icmp eq i32 %19, 610*/
		main_loopexit_237 = (main_18_19_reg == 32'd610);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %237 = icmp eq i32 %19, 610*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_119)) begin
		main_loopexit_237_reg <= main_loopexit_237;
		if (start == 1'b0 && ^(main_loopexit_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %238 = zext i1 %237 to i32*/
		main_loopexit_238 = main_loopexit_237;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %238 = zext i1 %237 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_119)) begin
		main_loopexit_238_reg <= main_loopexit_238;
		if (start == 1'b0 && ^(main_loopexit_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %main_result.0 = phi i32 [ %238, %.loopexit ], [ %246, %241 ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexit_119) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_main_result0 = main_loopexit_238;
	end
	/* main: %239*/
	/*   %main_result.0 = phi i32 [ %238, %.loopexit ], [ %246, %241 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__241_122) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_239_main_result0 = main_241_246;
	end
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %main_result.0 = phi i32 [ %238, %.loopexit ], [ %246, %241 ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexit_119) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_main_result0_reg <= main_239_main_result0;
		if (start == 1'b0 && ^(main_239_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_main_result0_reg"); $finish; end
	end
	/* main: %239*/
	/*   %main_result.0 = phi i32 [ %238, %.loopexit ], [ %246, %241 ]*/
	if (((cur_state == LEGUP_F_main_BB__241_122) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_main_result0_reg <= main_239_main_result0;
		if (start == 1'b0 && ^(main_239_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_main_result0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %240 = phi i32 [ 0, %.loopexit ], [ %247, %241 ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexit_119) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_240 = 32'd0;
	end
	/* main: %239*/
	/*   %240 = phi i32 [ 0, %.loopexit ], [ %247, %241 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__241_122) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_239_240 = main_241_247_reg;
	end
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %240 = phi i32 [ 0, %.loopexit ], [ %247, %241 ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexit_119) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_240_reg <= main_239_240;
		if (start == 1'b0 && ^(main_239_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_240_reg"); $finish; end
	end
	/* main: %239*/
	/*   %240 = phi i32 [ 0, %.loopexit ], [ %247, %241 ]*/
	if (((cur_state == LEGUP_F_main_BB__241_122) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_240_reg <= main_239_240;
		if (start == 1'b0 && ^(main_239_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %exitcond1 = icmp eq i32 %240, 8*/
		main_239_exitcond1 = (main_239_240_reg == 32'd8);
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %exitcond1 = icmp eq i32 %240, 8*/
	if ((cur_state == LEGUP_F_main_BB__239_120)) begin
		main_239_exitcond1_reg <= main_239_exitcond1;
		if (start == 1'b0 && ^(main_239_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %241*/
	/*   %scevgep2 = getelementptr [64 x i32]* %dmem, i32 0, i32 %240*/
		main_241_scevgep2 = (1'd0 | (4 * main_239_240_reg));
end
always @(posedge clk) begin
	/* main: %241*/
	/*   %scevgep2 = getelementptr [64 x i32]* %dmem, i32 0, i32 %240*/
	if ((cur_state == LEGUP_F_main_BB__241_121)) begin
		main_241_scevgep2_reg <= main_241_scevgep2;
		if (start == 1'b0 && ^(main_241_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_241_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %241*/
	/*   %scevgep = getelementptr [8 x i32]* @outData, i32 0, i32 %240*/
		main_241_scevgep = (1'd0 | (4 * main_239_240_reg));
end
always @(posedge clk) begin
	/* main: %241*/
	/*   %scevgep = getelementptr [8 x i32]* @outData, i32 0, i32 %240*/
	if ((cur_state == LEGUP_F_main_BB__241_121)) begin
		main_241_scevgep_reg <= main_241_scevgep;
		if (start == 1'b0 && ^(main_241_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_241_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %241*/
	/*   %242 = load i32* %scevgep2, align 4*/
		main_241_242 = main_0_dmem_out_a;
end
always @(posedge clk) begin
	/* main: %241*/
	/*   %242 = load i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__241_122)) begin
		main_241_242_reg <= main_241_242;
		if (start == 1'b0 && ^(main_241_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_241_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %241*/
	/*   %243 = load i32* %scevgep, align 4*/
		main_241_243 = outData_out_a;
end
always @(posedge clk) begin
	/* main: %241*/
	/*   %243 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__241_122)) begin
		main_241_243_reg <= main_241_243;
		if (start == 1'b0 && ^(main_241_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_241_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %241*/
	/*   %244 = icmp eq i32 %242, %243*/
		main_241_244 = (main_241_242 == main_241_243);
end
always @(posedge clk) begin
	/* main: %241*/
	/*   %244 = icmp eq i32 %242, %243*/
	if ((cur_state == LEGUP_F_main_BB__241_122)) begin
		main_241_244_reg <= main_241_244;
		if (start == 1'b0 && ^(main_241_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_241_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %241*/
	/*   %245 = zext i1 %244 to i32*/
		main_241_245 = main_241_244;
end
always @(posedge clk) begin
	/* main: %241*/
	/*   %245 = zext i1 %244 to i32*/
	if ((cur_state == LEGUP_F_main_BB__241_122)) begin
		main_241_245_reg <= main_241_245;
		if (start == 1'b0 && ^(main_241_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_241_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %241*/
	/*   %246 = add nsw i32 %main_result.0, %245*/
		main_241_246 = (main_239_main_result0_reg + main_241_245);
end
always @(posedge clk) begin
	/* main: %241*/
	/*   %246 = add nsw i32 %main_result.0, %245*/
	if ((cur_state == LEGUP_F_main_BB__241_122)) begin
		main_241_246_reg <= main_241_246;
		if (start == 1'b0 && ^(main_241_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_241_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %241*/
	/*   %247 = add nsw i32 %240, 1*/
		main_241_247 = (main_239_240_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %241*/
	/*   %247 = add nsw i32 %240, 1*/
	if ((cur_state == LEGUP_F_main_BB__241_121)) begin
		main_241_247_reg <= main_241_247;
		if (start == 1'b0 && ^(main_241_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_241_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %248*/
	/*   %250 = icmp eq i32 %main_result.0, 9*/
		main_248_250 = (main_239_main_result0_reg == 32'd9);
end
always @(posedge clk) begin
	/* main: %248*/
	/*   %250 = icmp eq i32 %main_result.0, 9*/
	if ((cur_state == LEGUP_F_main_BB__248_123)) begin
		main_248_250_reg <= main_248_250;
		if (start == 1'b0 && ^(main_248_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_248_250_reg"); $finish; end
	end
end
always @(*) begin
	imem_address_a = 1'd0;
	/* main: %18*/
	/*   %23 = load i32* %22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__18_24)) begin
		imem_address_a = (main_18_22 >>> 3'd2);
	end
end
always @(*) begin
	imem_write_enable_a = 1'd0;
	/* main: %18*/
	/*   %23 = load i32* %22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__18_24)) begin
		imem_write_enable_a = 1'd0;
	end
end
always @(*) begin
	A_address_a = 1'd0;
	/* main: %15*/
	/*   %16 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_21)) begin
		A_address_a = (main_15_scevgep4 >>> 3'd2);
	end
end
always @(*) begin
	A_write_enable_a = 1'd0;
	/* main: %15*/
	/*   %16 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_21)) begin
		A_write_enable_a = 1'd0;
	end
end
always @(*) begin
	outData_address_a = 1'd0;
	/* main: %241*/
	/*   %243 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__241_121)) begin
		outData_address_a = (main_241_scevgep >>> 3'd2);
	end
end
always @(*) begin
	outData_write_enable_a = 1'd0;
	/* main: %241*/
	/*   %243 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__241_121)) begin
		outData_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_reg_address_a = 1'd0;
	/* main: %3*/
	/*   store i32 0, i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_9)) begin
		main_0_reg_address_a = (main_3_scevgep14 >>> 3'd2);
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_10)) begin
		main_0_reg_address_a = (main_3_scevgep13 >>> 3'd2);
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep11, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_11)) begin
		main_0_reg_address_a = (main_3_scevgep11_reg >>> 3'd2);
	end
	/* main: %9*/
	/*   store i32 2147479548, i32* %10, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_17)) begin
		main_0_reg_address_a = (main_9_10 >>> 3'd2);
	end
	/* main: %36*/
	/*   %38 = load i32* %37, align 4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		main_0_reg_address_a = (main_36_37 >>> 3'd2);
	end
	/* main: %43*/
	/*   %45 = load i32* %44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__43_30)) begin
		main_0_reg_address_a = (main_43_44 >>> 3'd2);
	end
	/* main: %43*/
	/*   store i32 %48, i32* %49, align 4*/
	if ((cur_state == LEGUP_F_main_BB__43_31)) begin
		main_0_reg_address_a = (main_43_49_reg >>> 3'd2);
	end
	/* main: %50*/
	/*   %52 = load i32* %51, align 4*/
	if ((cur_state == LEGUP_F_main_BB__50_33)) begin
		main_0_reg_address_a = (main_50_51 >>> 3'd2);
	end
	/* main: %61*/
	/*   %63 = load i32* %62, align 4*/
	if ((cur_state == LEGUP_F_main_BB__61_36)) begin
		main_0_reg_address_a = (main_61_62 >>> 3'd2);
	end
	/* main: %74*/
	/*   store i32 %Lo.0, i32* %75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__74_41)) begin
		main_0_reg_address_a = (main_74_75 >>> 3'd2);
	end
	/* main: %76*/
	/*   %78 = load i32* %77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__76_43)) begin
		main_0_reg_address_a = (main_76_77 >>> 3'd2);
	end
	/* main: %83*/
	/*   %85 = load i32* %84, align 4*/
	if ((cur_state == LEGUP_F_main_BB__83_46)) begin
		main_0_reg_address_a = (main_83_84 >>> 3'd2);
	end
	/* main: %83*/
	/*   store i32 %88, i32* %89, align 4*/
	if ((cur_state == LEGUP_F_main_BB__83_47)) begin
		main_0_reg_address_a = (main_83_89_reg >>> 3'd2);
	end
	/* main: %90*/
	/*   %92 = load i32* %91, align 4*/
	if ((cur_state == LEGUP_F_main_BB__90_49)) begin
		main_0_reg_address_a = (main_90_91 >>> 3'd2);
	end
	/* main: %97*/
	/*   %99 = load i32* %98, align 4*/
	if ((cur_state == LEGUP_F_main_BB__97_52)) begin
		main_0_reg_address_a = (main_97_98 >>> 3'd2);
	end
	/* main: %97*/
	/*   store i32 %100, i32* %101, align 4*/
	if ((cur_state == LEGUP_F_main_BB__97_53)) begin
		main_0_reg_address_a = (main_97_101_reg >>> 3'd2);
	end
	/* main: %107*/
	/*   %109 = load i32* %108, align 4*/
	if ((cur_state == LEGUP_F_main_BB__107_58)) begin
		main_0_reg_address_a = (main_107_108 >>> 3'd2);
	end
	/* main: %107*/
	/*   store i32 %112, i32* %113, align 4*/
	if ((cur_state == LEGUP_F_main_BB__107_59)) begin
		main_0_reg_address_a = (main_107_113_reg >>> 3'd2);
	end
	/* main: %114*/
	/*   %116 = load i32* %115, align 4*/
	if ((cur_state == LEGUP_F_main_BB__114_61)) begin
		main_0_reg_address_a = (main_114_115 >>> 3'd2);
	end
	/* main: %121*/
	/*   %123 = load i32* %122, align 4*/
	if ((cur_state == LEGUP_F_main_BB__121_64)) begin
		main_0_reg_address_a = (main_121_122 >>> 3'd2);
	end
	/* main: %121*/
	/*   store i32 %127, i32* %128, align 4*/
	if ((cur_state == LEGUP_F_main_BB__121_65)) begin
		main_0_reg_address_a = (main_121_128_reg >>> 3'd2);
	end
	/* main: %129*/
	/*   %131 = load i32* %130, align 4*/
	if ((cur_state == LEGUP_F_main_BB__129_67)) begin
		main_0_reg_address_a = (main_129_130 >>> 3'd2);
	end
	/* main: %137*/
	/*   %139 = load i32* %138, align 4*/
	if ((cur_state == LEGUP_F_main_BB__137_70)) begin
		main_0_reg_address_a = (main_137_138 >>> 3'd2);
	end
	/* main: %143*/
	/*   store i32 %24, i32* %14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__143_73)) begin
		main_0_reg_address_a = (main_preheader_14_reg >>> 3'd2);
	end
	/* main: %157*/
	/*   %159 = load i32* %158, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_79)) begin
		main_0_reg_address_a = (main_157_158 >>> 3'd2);
	end
	/* main: %157*/
	/*   store i32 %161, i32* %162, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_80)) begin
		main_0_reg_address_a = (main_157_162_reg >>> 3'd2);
	end
	/* main: %169*/
	/*   %171 = load i32* %170, align 4*/
	if ((cur_state == LEGUP_F_main_BB__169_85)) begin
		main_0_reg_address_a = (main_169_170 >>> 3'd2);
	end
	/* main: %169*/
	/*   store i32 %173, i32* %174, align 4*/
	if ((cur_state == LEGUP_F_main_BB__169_86)) begin
		main_0_reg_address_a = (main_169_174_reg >>> 3'd2);
	end
	/* main: %184*/
	/*   %186 = load i32* %185, align 4*/
	if ((cur_state == LEGUP_F_main_BB__184_93)) begin
		main_0_reg_address_a = (main_184_185 >>> 3'd2);
	end
	/* main: %193*/
	/*   store i32 %sext4, i32* %194, align 4*/
	if ((cur_state == LEGUP_F_main_BB__193_97)) begin
		main_0_reg_address_a = (main_193_194 >>> 3'd2);
	end
	/* main: %195*/
	/*   %197 = load i32* %196, align 4*/
	if ((cur_state == LEGUP_F_main_BB__195_99)) begin
		main_0_reg_address_a = (main_195_196 >>> 3'd2);
	end
	/* main: %204*/
	/*   %206 = load i32* %205, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_102)) begin
		main_0_reg_address_a = (main_204_205 >>> 3'd2);
	end
	/* main: %220*/
	/*   %222 = load i32* %221, align 4*/
	if ((cur_state == LEGUP_F_main_BB__220_108)) begin
		main_0_reg_address_a = (main_220_221 >>> 3'd2);
	end
	/* main: %227*/
	/*   %229 = load i32* %228, align 4*/
	if ((cur_state == LEGUP_F_main_BB__227_111)) begin
		main_0_reg_address_a = (main_227_228 >>> 3'd2);
	end
	/* main: %227*/
	/*   store i32 %232, i32* %233, align 4*/
	if ((cur_state == LEGUP_F_main_BB__227_112)) begin
		main_0_reg_address_a = (main_227_233_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_reg_write_enable_a = 1'd0;
	/* main: %3*/
	/*   store i32 0, i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_9)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_10)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep11, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_11)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %9*/
	/*   store i32 2147479548, i32* %10, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_17)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %36*/
	/*   %38 = load i32* %37, align 4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %43*/
	/*   %45 = load i32* %44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__43_30)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %43*/
	/*   store i32 %48, i32* %49, align 4*/
	if ((cur_state == LEGUP_F_main_BB__43_31)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %50*/
	/*   %52 = load i32* %51, align 4*/
	if ((cur_state == LEGUP_F_main_BB__50_33)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %61*/
	/*   %63 = load i32* %62, align 4*/
	if ((cur_state == LEGUP_F_main_BB__61_36)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %74*/
	/*   store i32 %Lo.0, i32* %75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__74_41)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %76*/
	/*   %78 = load i32* %77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__76_43)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %83*/
	/*   %85 = load i32* %84, align 4*/
	if ((cur_state == LEGUP_F_main_BB__83_46)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %83*/
	/*   store i32 %88, i32* %89, align 4*/
	if ((cur_state == LEGUP_F_main_BB__83_47)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %90*/
	/*   %92 = load i32* %91, align 4*/
	if ((cur_state == LEGUP_F_main_BB__90_49)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %97*/
	/*   %99 = load i32* %98, align 4*/
	if ((cur_state == LEGUP_F_main_BB__97_52)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %97*/
	/*   store i32 %100, i32* %101, align 4*/
	if ((cur_state == LEGUP_F_main_BB__97_53)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %107*/
	/*   %109 = load i32* %108, align 4*/
	if ((cur_state == LEGUP_F_main_BB__107_58)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %107*/
	/*   store i32 %112, i32* %113, align 4*/
	if ((cur_state == LEGUP_F_main_BB__107_59)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %114*/
	/*   %116 = load i32* %115, align 4*/
	if ((cur_state == LEGUP_F_main_BB__114_61)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %121*/
	/*   %123 = load i32* %122, align 4*/
	if ((cur_state == LEGUP_F_main_BB__121_64)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %121*/
	/*   store i32 %127, i32* %128, align 4*/
	if ((cur_state == LEGUP_F_main_BB__121_65)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %129*/
	/*   %131 = load i32* %130, align 4*/
	if ((cur_state == LEGUP_F_main_BB__129_67)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %137*/
	/*   %139 = load i32* %138, align 4*/
	if ((cur_state == LEGUP_F_main_BB__137_70)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %143*/
	/*   store i32 %24, i32* %14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__143_73)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %157*/
	/*   %159 = load i32* %158, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_79)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %157*/
	/*   store i32 %161, i32* %162, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_80)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %169*/
	/*   %171 = load i32* %170, align 4*/
	if ((cur_state == LEGUP_F_main_BB__169_85)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %169*/
	/*   store i32 %173, i32* %174, align 4*/
	if ((cur_state == LEGUP_F_main_BB__169_86)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %184*/
	/*   %186 = load i32* %185, align 4*/
	if ((cur_state == LEGUP_F_main_BB__184_93)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %193*/
	/*   store i32 %sext4, i32* %194, align 4*/
	if ((cur_state == LEGUP_F_main_BB__193_97)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %195*/
	/*   %197 = load i32* %196, align 4*/
	if ((cur_state == LEGUP_F_main_BB__195_99)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %204*/
	/*   %206 = load i32* %205, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_102)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %220*/
	/*   %222 = load i32* %221, align 4*/
	if ((cur_state == LEGUP_F_main_BB__220_108)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %227*/
	/*   %229 = load i32* %228, align 4*/
	if ((cur_state == LEGUP_F_main_BB__227_111)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %227*/
	/*   store i32 %232, i32* %233, align 4*/
	if ((cur_state == LEGUP_F_main_BB__227_112)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_0_reg_in_a = 1'd0;
	/* main: %3*/
	/*   store i32 0, i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_9)) begin
		main_0_reg_in_a = 32'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_10)) begin
		main_0_reg_in_a = 32'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep11, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_11)) begin
		main_0_reg_in_a = 32'd0;
	end
	/* main: %9*/
	/*   store i32 2147479548, i32* %10, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_17)) begin
		main_0_reg_in_a = 32'd2147479548;
	end
	/* main: %43*/
	/*   store i32 %48, i32* %49, align 4*/
	if ((cur_state == LEGUP_F_main_BB__43_31)) begin
		main_0_reg_in_a = main_43_48;
	end
	/* main: %74*/
	/*   store i32 %Lo.0, i32* %75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__74_41)) begin
		main_0_reg_in_a = main_18_Lo0_reg;
	end
	/* main: %83*/
	/*   store i32 %88, i32* %89, align 4*/
	if ((cur_state == LEGUP_F_main_BB__83_47)) begin
		main_0_reg_in_a = main_83_88;
	end
	/* main: %97*/
	/*   store i32 %100, i32* %101, align 4*/
	if ((cur_state == LEGUP_F_main_BB__97_53)) begin
		main_0_reg_in_a = main_97_100;
	end
	/* main: %107*/
	/*   store i32 %112, i32* %113, align 4*/
	if ((cur_state == LEGUP_F_main_BB__107_59)) begin
		main_0_reg_in_a = main_107_112;
	end
	/* main: %121*/
	/*   store i32 %127, i32* %128, align 4*/
	if ((cur_state == LEGUP_F_main_BB__121_65)) begin
		main_0_reg_in_a = main_121_127;
	end
	/* main: %143*/
	/*   store i32 %24, i32* %14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__143_73)) begin
		main_0_reg_in_a = main_18_24_reg;
	end
	/* main: %157*/
	/*   store i32 %161, i32* %162, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_80)) begin
		main_0_reg_in_a = main_157_161;
	end
	/* main: %169*/
	/*   store i32 %173, i32* %174, align 4*/
	if ((cur_state == LEGUP_F_main_BB__169_86)) begin
		main_0_reg_in_a = main_169_173;
	end
	/* main: %193*/
	/*   store i32 %sext4, i32* %194, align 4*/
	if ((cur_state == LEGUP_F_main_BB__193_97)) begin
		main_0_reg_in_a = main_193_sext4;
	end
	/* main: %227*/
	/*   store i32 %232, i32* %233, align 4*/
	if ((cur_state == LEGUP_F_main_BB__227_112)) begin
		main_0_reg_in_a = main_227_232;
	end
end
always @(*) begin
	main_0_reg_address_b = 1'd0;
	/* main: %3*/
	/*   store i32 0, i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_10)) begin
		main_0_reg_address_b = (main_3_scevgep12 >>> 3'd2);
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_11)) begin
		main_0_reg_address_b = (main_3_scevgep10_reg >>> 3'd2);
	end
	/* main: %8*/
	/*   store i32 0, i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_15)) begin
		main_0_reg_address_b = (main_8_scevgep6 >>> 3'd2);
	end
	/* main: %36*/
	/*   %40 = load i32* %39, align 4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		main_0_reg_address_b = (main_36_39 >>> 3'd2);
	end
	/* main: %36*/
	/*   store i32 %41, i32* %42, align 4*/
	if ((cur_state == LEGUP_F_main_BB__36_28)) begin
		main_0_reg_address_b = (main_36_42_reg >>> 3'd2);
	end
	/* main: %43*/
	/*   %47 = load i32* %46, align 4*/
	if ((cur_state == LEGUP_F_main_BB__43_30)) begin
		main_0_reg_address_b = (main_43_46 >>> 3'd2);
	end
	/* main: %50*/
	/*   %55 = load i32* %54, align 4*/
	if ((cur_state == LEGUP_F_main_BB__50_33)) begin
		main_0_reg_address_b = (main_50_54 >>> 3'd2);
	end
	/* main: %61*/
	/*   %66 = load i32* %65, align 4*/
	if ((cur_state == LEGUP_F_main_BB__61_36)) begin
		main_0_reg_address_b = (main_61_65 >>> 3'd2);
	end
	/* main: %72*/
	/*   store i32 %Hi.0, i32* %73, align 4*/
	if ((cur_state == LEGUP_F_main_BB__72_39)) begin
		main_0_reg_address_b = (main_72_73 >>> 3'd2);
	end
	/* main: %76*/
	/*   %80 = load i32* %79, align 4*/
	if ((cur_state == LEGUP_F_main_BB__76_43)) begin
		main_0_reg_address_b = (main_76_79 >>> 3'd2);
	end
	/* main: %76*/
	/*   store i32 %81, i32* %82, align 4*/
	if ((cur_state == LEGUP_F_main_BB__76_44)) begin
		main_0_reg_address_b = (main_76_82_reg >>> 3'd2);
	end
	/* main: %83*/
	/*   %87 = load i32* %86, align 4*/
	if ((cur_state == LEGUP_F_main_BB__83_46)) begin
		main_0_reg_address_b = (main_83_86 >>> 3'd2);
	end
	/* main: %90*/
	/*   %94 = load i32* %93, align 4*/
	if ((cur_state == LEGUP_F_main_BB__90_49)) begin
		main_0_reg_address_b = (main_90_93 >>> 3'd2);
	end
	/* main: %90*/
	/*   store i32 %95, i32* %96, align 4*/
	if ((cur_state == LEGUP_F_main_BB__90_50)) begin
		main_0_reg_address_b = (main_90_96_reg >>> 3'd2);
	end
	/* main: %102*/
	/*   %104 = load i32* %103, align 4*/
	if ((cur_state == LEGUP_F_main_BB__102_55)) begin
		main_0_reg_address_b = (main_102_103 >>> 3'd2);
	end
	/* main: %102*/
	/*   store i32 %105, i32* %106, align 4*/
	if ((cur_state == LEGUP_F_main_BB__102_56)) begin
		main_0_reg_address_b = (main_102_106_reg >>> 3'd2);
	end
	/* main: %107*/
	/*   %111 = load i32* %110, align 4*/
	if ((cur_state == LEGUP_F_main_BB__107_58)) begin
		main_0_reg_address_b = (main_107_110 >>> 3'd2);
	end
	/* main: %114*/
	/*   %118 = load i32* %117, align 4*/
	if ((cur_state == LEGUP_F_main_BB__114_61)) begin
		main_0_reg_address_b = (main_114_117 >>> 3'd2);
	end
	/* main: %114*/
	/*   store i32 %119, i32* %120, align 4*/
	if ((cur_state == LEGUP_F_main_BB__114_62)) begin
		main_0_reg_address_b = (main_114_120_reg >>> 3'd2);
	end
	/* main: %121*/
	/*   %125 = load i32* %124, align 4*/
	if ((cur_state == LEGUP_F_main_BB__121_64)) begin
		main_0_reg_address_b = (main_121_124 >>> 3'd2);
	end
	/* main: %129*/
	/*   %133 = load i32* %132, align 4*/
	if ((cur_state == LEGUP_F_main_BB__129_67)) begin
		main_0_reg_address_b = (main_129_132 >>> 3'd2);
	end
	/* main: %129*/
	/*   store i32 %135, i32* %136, align 4*/
	if ((cur_state == LEGUP_F_main_BB__129_68)) begin
		main_0_reg_address_b = (main_129_136_reg >>> 3'd2);
	end
	/* main: %151*/
	/*   %153 = load i32* %152, align 4*/
	if ((cur_state == LEGUP_F_main_BB__151_76)) begin
		main_0_reg_address_b = (main_151_152 >>> 3'd2);
	end
	/* main: %151*/
	/*   store i32 %155, i32* %156, align 4*/
	if ((cur_state == LEGUP_F_main_BB__151_77)) begin
		main_0_reg_address_b = (main_151_156_reg >>> 3'd2);
	end
	/* main: %163*/
	/*   %165 = load i32* %164, align 4*/
	if ((cur_state == LEGUP_F_main_BB__163_82)) begin
		main_0_reg_address_b = (main_163_164 >>> 3'd2);
	end
	/* main: %163*/
	/*   store i32 %167, i32* %168, align 4*/
	if ((cur_state == LEGUP_F_main_BB__163_83)) begin
		main_0_reg_address_b = (main_163_168_reg >>> 3'd2);
	end
	/* main: %175*/
	/*   %177 = load i32* %176, align 4*/
	if ((cur_state == LEGUP_F_main_BB__175_88)) begin
		main_0_reg_address_b = (main_175_176 >>> 3'd2);
	end
	/* main: %175*/
	/*   store i32 %182, i32* %183, align 4*/
	if ((cur_state == LEGUP_F_main_BB__175_91)) begin
		main_0_reg_address_b = (main_175_183_reg >>> 3'd2);
	end
	/* main: %184*/
	/*   %188 = load i32* %187, align 4*/
	if ((cur_state == LEGUP_F_main_BB__184_93)) begin
		main_0_reg_address_b = (main_184_187 >>> 3'd2);
	end
	/* main: %195*/
	/*   %199 = load i32* %198, align 4*/
	if ((cur_state == LEGUP_F_main_BB__195_99)) begin
		main_0_reg_address_b = (main_195_198 >>> 3'd2);
	end
	/* main: %204*/
	/*   %208 = load i32* %207, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_102)) begin
		main_0_reg_address_b = (main_204_207 >>> 3'd2);
	end
	/* main: %213*/
	/*   %215 = load i32* %214, align 4*/
	if ((cur_state == LEGUP_F_main_BB__213_105)) begin
		main_0_reg_address_b = (main_213_214 >>> 3'd2);
	end
	/* main: %220*/
	/*   store i32 %225, i32* %226, align 4*/
	if ((cur_state == LEGUP_F_main_BB__220_109)) begin
		main_0_reg_address_b = (main_220_226_reg >>> 3'd2);
	end
	/* main: %.thread*/
	/*   store i32 0, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_main_BB_thread_114)) begin
		main_0_reg_address_b = (main_preheader_13_reg >>> 3'd2);
	end
	/* main: %234*/
	/*   store i32 0, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__234_116)) begin
		main_0_reg_address_b = (main_preheader_13_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_reg_write_enable_b = 1'd0;
	/* main: %3*/
	/*   store i32 0, i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_10)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_11)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %8*/
	/*   store i32 0, i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_15)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %36*/
	/*   %40 = load i32* %39, align 4*/
	if ((cur_state == LEGUP_F_main_BB__36_27)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %36*/
	/*   store i32 %41, i32* %42, align 4*/
	if ((cur_state == LEGUP_F_main_BB__36_28)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %43*/
	/*   %47 = load i32* %46, align 4*/
	if ((cur_state == LEGUP_F_main_BB__43_30)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %50*/
	/*   %55 = load i32* %54, align 4*/
	if ((cur_state == LEGUP_F_main_BB__50_33)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %61*/
	/*   %66 = load i32* %65, align 4*/
	if ((cur_state == LEGUP_F_main_BB__61_36)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %72*/
	/*   store i32 %Hi.0, i32* %73, align 4*/
	if ((cur_state == LEGUP_F_main_BB__72_39)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %76*/
	/*   %80 = load i32* %79, align 4*/
	if ((cur_state == LEGUP_F_main_BB__76_43)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %76*/
	/*   store i32 %81, i32* %82, align 4*/
	if ((cur_state == LEGUP_F_main_BB__76_44)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %83*/
	/*   %87 = load i32* %86, align 4*/
	if ((cur_state == LEGUP_F_main_BB__83_46)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %90*/
	/*   %94 = load i32* %93, align 4*/
	if ((cur_state == LEGUP_F_main_BB__90_49)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %90*/
	/*   store i32 %95, i32* %96, align 4*/
	if ((cur_state == LEGUP_F_main_BB__90_50)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %102*/
	/*   %104 = load i32* %103, align 4*/
	if ((cur_state == LEGUP_F_main_BB__102_55)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %102*/
	/*   store i32 %105, i32* %106, align 4*/
	if ((cur_state == LEGUP_F_main_BB__102_56)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %107*/
	/*   %111 = load i32* %110, align 4*/
	if ((cur_state == LEGUP_F_main_BB__107_58)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %114*/
	/*   %118 = load i32* %117, align 4*/
	if ((cur_state == LEGUP_F_main_BB__114_61)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %114*/
	/*   store i32 %119, i32* %120, align 4*/
	if ((cur_state == LEGUP_F_main_BB__114_62)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %121*/
	/*   %125 = load i32* %124, align 4*/
	if ((cur_state == LEGUP_F_main_BB__121_64)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %129*/
	/*   %133 = load i32* %132, align 4*/
	if ((cur_state == LEGUP_F_main_BB__129_67)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %129*/
	/*   store i32 %135, i32* %136, align 4*/
	if ((cur_state == LEGUP_F_main_BB__129_68)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %151*/
	/*   %153 = load i32* %152, align 4*/
	if ((cur_state == LEGUP_F_main_BB__151_76)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %151*/
	/*   store i32 %155, i32* %156, align 4*/
	if ((cur_state == LEGUP_F_main_BB__151_77)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %163*/
	/*   %165 = load i32* %164, align 4*/
	if ((cur_state == LEGUP_F_main_BB__163_82)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %163*/
	/*   store i32 %167, i32* %168, align 4*/
	if ((cur_state == LEGUP_F_main_BB__163_83)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %175*/
	/*   %177 = load i32* %176, align 4*/
	if ((cur_state == LEGUP_F_main_BB__175_88)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %175*/
	/*   store i32 %182, i32* %183, align 4*/
	if ((cur_state == LEGUP_F_main_BB__175_91)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %184*/
	/*   %188 = load i32* %187, align 4*/
	if ((cur_state == LEGUP_F_main_BB__184_93)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %195*/
	/*   %199 = load i32* %198, align 4*/
	if ((cur_state == LEGUP_F_main_BB__195_99)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %204*/
	/*   %208 = load i32* %207, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_102)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %213*/
	/*   %215 = load i32* %214, align 4*/
	if ((cur_state == LEGUP_F_main_BB__213_105)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %220*/
	/*   store i32 %225, i32* %226, align 4*/
	if ((cur_state == LEGUP_F_main_BB__220_109)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %.thread*/
	/*   store i32 0, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_main_BB_thread_114)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %234*/
	/*   store i32 0, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__234_116)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
end
always @(*) begin
	main_0_reg_in_b = 1'd0;
	/* main: %3*/
	/*   store i32 0, i32* %scevgep12, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_10)) begin
		main_0_reg_in_b = 32'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_11)) begin
		main_0_reg_in_b = 32'd0;
	end
	/* main: %8*/
	/*   store i32 0, i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_15)) begin
		main_0_reg_in_b = 32'd0;
	end
	/* main: %36*/
	/*   store i32 %41, i32* %42, align 4*/
	if ((cur_state == LEGUP_F_main_BB__36_28)) begin
		main_0_reg_in_b = main_36_41;
	end
	/* main: %72*/
	/*   store i32 %Hi.0, i32* %73, align 4*/
	if ((cur_state == LEGUP_F_main_BB__72_39)) begin
		main_0_reg_in_b = main_18_Hi0_reg;
	end
	/* main: %76*/
	/*   store i32 %81, i32* %82, align 4*/
	if ((cur_state == LEGUP_F_main_BB__76_44)) begin
		main_0_reg_in_b = main_76_81;
	end
	/* main: %90*/
	/*   store i32 %95, i32* %96, align 4*/
	if ((cur_state == LEGUP_F_main_BB__90_50)) begin
		main_0_reg_in_b = main_90_95;
	end
	/* main: %102*/
	/*   store i32 %105, i32* %106, align 4*/
	if ((cur_state == LEGUP_F_main_BB__102_56)) begin
		main_0_reg_in_b = main_102_105;
	end
	/* main: %114*/
	/*   store i32 %119, i32* %120, align 4*/
	if ((cur_state == LEGUP_F_main_BB__114_62)) begin
		main_0_reg_in_b = main_114_119;
	end
	/* main: %129*/
	/*   store i32 %135, i32* %136, align 4*/
	if ((cur_state == LEGUP_F_main_BB__129_68)) begin
		main_0_reg_in_b = main_129_135;
	end
	/* main: %151*/
	/*   store i32 %155, i32* %156, align 4*/
	if ((cur_state == LEGUP_F_main_BB__151_77)) begin
		main_0_reg_in_b = main_151_155;
	end
	/* main: %163*/
	/*   store i32 %167, i32* %168, align 4*/
	if ((cur_state == LEGUP_F_main_BB__163_83)) begin
		main_0_reg_in_b = main_163_167;
	end
	/* main: %175*/
	/*   store i32 %182, i32* %183, align 4*/
	if ((cur_state == LEGUP_F_main_BB__175_91)) begin
		main_0_reg_in_b = main_175_182;
	end
	/* main: %220*/
	/*   store i32 %225, i32* %226, align 4*/
	if ((cur_state == LEGUP_F_main_BB__220_109)) begin
		main_0_reg_in_b = main_220_225;
	end
	/* main: %.thread*/
	/*   store i32 0, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_main_BB_thread_114)) begin
		main_0_reg_in_b = 32'd0;
	end
	/* main: %234*/
	/*   store i32 0, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__234_116)) begin
		main_0_reg_in_b = 32'd0;
	end
end
always @(*) begin
	main_0_dmem_address_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_0_dmem_address_a = (main_2_si0 >>> 3'd2);
	end
	/* main: %15*/
	/*   store i32 %16, i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_22)) begin
		main_0_dmem_address_a = (main_15_scevgep3_reg >>> 3'd2);
	end
	/* main: %175*/
	/*   %182 = load i32* %181, align 4*/
	if ((cur_state == LEGUP_F_main_BB__175_90)) begin
		main_0_dmem_address_a = (main_175_181 >>> 3'd2);
	end
	/* main: %184*/
	/*   store i32 %186, i32* %192, align 4*/
	if ((cur_state == LEGUP_F_main_BB__184_95)) begin
		main_0_dmem_address_a = (main_184_192 >>> 3'd2);
	end
	/* main: %241*/
	/*   %242 = load i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__241_121)) begin
		main_0_dmem_address_a = (main_241_scevgep2 >>> 3'd2);
	end
end
always @(*) begin
	main_0_dmem_write_enable_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %15*/
	/*   store i32 %16, i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_22)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %175*/
	/*   %182 = load i32* %181, align 4*/
	if ((cur_state == LEGUP_F_main_BB__175_90)) begin
		main_0_dmem_write_enable_a = 1'd0;
	end
	/* main: %184*/
	/*   store i32 %186, i32* %192, align 4*/
	if ((cur_state == LEGUP_F_main_BB__184_95)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %241*/
	/*   %242 = load i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__241_121)) begin
		main_0_dmem_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_dmem_in_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_0_dmem_in_a = 32'd0;
	end
	/* main: %15*/
	/*   store i32 %16, i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_22)) begin
		main_0_dmem_in_a = main_15_16;
	end
	/* main: %184*/
	/*   store i32 %186, i32* %192, align 4*/
	if ((cur_state == LEGUP_F_main_BB__184_95)) begin
		main_0_dmem_in_a = main_184_186_reg;
	end
end
always @(*) begin
	lpm_mult_main_legup_memset_4exit_i10_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %i1.0 = mul i32 %indvar7, 5*/
	if ((lpm_mult_main_legup_memset_4exit_i10_en == 1'd1)) begin
		main_legup_memset_4exit_i10_stage0_reg <= (main_legup_memset_4exit_indvar7_reg * 32'd5);
	end
end
always @(*) begin
	lpm_mult_main_50_57_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %57 = mul nsw i64 %53, %56*/
	if ((lpm_mult_main_50_57_en == 1'd1)) begin
		main_50_57_stage0_reg <= (main_50_53 * main_50_56);
	end
end
always @(*) begin
	lpm_mult_main_61_68_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %61*/
	/*   %68 = mul i64 %64, %67*/
	if ((lpm_mult_main_61_68_en == 1'd1)) begin
		main_61_68_stage0_reg <= (main_61_64 * main_61_67);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %255*/
	/*   ret i32 %main_result.0*/
	if ((cur_state == LEGUP_F_main_BB__255_126)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %255*/
	/*   ret i32 %main_result.0*/
	if ((cur_state == LEGUP_F_main_BB__255_126)) begin
		return_val <= main_239_main_result0_reg;
		if (start == 1'b0 && ^(main_239_main_result0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
