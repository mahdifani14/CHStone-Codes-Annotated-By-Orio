//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jun 19 18:41:14 2016
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Apr 25 11:24:39 2017
//----------------------------------------------------------------------------//

allocateRAM: @countLeadingZeros32.countLeadingZerosHigh
Constant: 1
allocateRAM: @a_input
Constant: 1
allocateRAM: @b_input
Constant: 1
allocateRAM: @z_output
Constant: 1
allocating global ram: @countLeadingZeros32.countLeadingZerosHigh
allocating global ram: @a_input
allocating global ram: @b_input
allocating global ram: @z_output
# of Vertices: 72
Representatives: 
1 -> 1
2 -> 2
3 -> 3
4 -> 4
5 -> 5
6 -> 6
7 -> 7
8 -> 8
9 -> 9
10 -> 10
11 -> 11
12 -> 12
13 -> 13
14 -> 14
15 -> 15
16 -> 16
17 -> 17
18 -> 18
19 -> 19
20 -> 20
21 -> 21
22 -> 22
23 -> 23
24 -> 24
25 -> 25
26 -> 26
27 -> 27
28 -> 28
29 -> 29
30 -> 30
31 -> 31
32 -> 32
33 -> 33
34 -> 34
35 -> 35
36 -> 36
37 -> 37
38 -> 38
39 -> 39
40 -> 40
41 -> 41
42 -> 42
43 -> 43
44 -> 44
45 -> 45
46 -> 46
47 -> 47
48 -> 48
49 -> 49
50 -> 50
51 -> 51
52 -> 52
53 -> 53
54 -> 54
55 -> 55
56 -> 56
57 -> 57
58 -> 58
59 -> 59
60 -> 60
61 -> 61
62 -> 62
63 -> 63
64 -> 64
65 -> 65
66 -> 66
67 -> 67
68 -> 68
69 -> 69
70 -> 70
71 -> 71
72 -> 72

Connections (Graph): 
1 -> 31 40 
2 -> 30 39 
3 -> 18 
4 -> 17 
5 -> 19 
6 -> 16 
7 -> 68 
8 -> 15 
9 -> 
10 -> 
11 -> 
12 -> 
13 -> 
14 -> 
15 -> 
16 -> 
17 -> 
18 -> 
19 -> 24 25 
20 -> 
21 -> 20 
22 -> 
23 -> 22 
24 -> 
25 -> 
26 -> 
27 -> 26 
28 -> 
29 -> 28 
30 -> 
31 -> 32 
32 -> 34 
33 -> 32 
34 -> 
35 -> 
36 -> 35 
37 -> 
38 -> 37 
39 -> 
40 -> 41 
41 -> 43 
42 -> 41 
43 -> 
44 -> 58 
45 -> 44 
46 -> 48 
47 -> 46 
48 -> 
49 -> 
50 -> 49 
51 -> 53 
52 -> 51 
53 -> 
54 -> 56 
55 -> 54 
56 -> 57 
57 -> 
58 -> 
59 -> 
60 -> 59 61 
61 -> 
62 -> 
63 -> 62 
64 -> 
65 -> 64 
66 -> 
67 -> 66 
68 -> 
69 -> 
70 -> 69 
71 -> 
72 -> 71 

Points-to-set: 
1 -> {}
2 -> {1, }
3 -> {}
4 -> {3, }
5 -> {}
6 -> {5, }
7 -> {}
8 -> {7, }
9 -> {}
10 -> {9, }
11 -> {}
12 -> {11, }
13 -> {}
14 -> {13, }
15 -> {7, }
16 -> {5, }
17 -> {3, }
18 -> {}
19 -> {}
20 -> {}
21 -> {}
22 -> {}
23 -> {}
24 -> {}
25 -> {}
26 -> {}
27 -> {}
28 -> {}
29 -> {}
30 -> {1, }
31 -> {}
32 -> {}
33 -> {}
34 -> {}
35 -> {}
36 -> {}
37 -> {}
38 -> {}
39 -> {1, }
40 -> {}
41 -> {}
42 -> {}
43 -> {}
44 -> {}
45 -> {}
46 -> {}
47 -> {}
48 -> {}
49 -> {}
50 -> {}
51 -> {}
52 -> {}
53 -> {}
54 -> {}
55 -> {}
56 -> {}
57 -> {}
58 -> {}
59 -> {}
60 -> {}
61 -> {}
62 -> {}
63 -> {}
64 -> {}
65 -> {}
66 -> {}
67 -> {}
68 -> {}
69 -> {}
70 -> {}
71 -> {}
72 -> {}

Variable: Int -> Value* mapping
8: @z_output = internal unnamed_addr constant [20 x i64] [i64 -1, i64 9223090561878065152, i64 9223372036854775807, i64 9218868437227405312, i64 -281474976710656, i64 9223372036854775807, i64 9218868437227405312, i64 0, i64 -9223372036854775808, i64 0, i64 -9223372036854775808, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 -4620693217682128896, i64 -4620693217682128896, i64 -4620693217682128896, i64 -4620693217682128896, i64 0], align 8
2: @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
10: @.str = private unnamed_addr constant [11 x i8] c"Result: %d\00", align 1
12: @.str1 = private unnamed_addr constant [13 x i8] c"RESULT: PASS\00", align 1
14: @.str2 = private unnamed_addr constant [13 x i8] c"RESULT: FAIL\00", align 1
4: @a_input = internal unnamed_addr constant [20 x i64] [i64 9218868437227405312, i64 9223090561878065152, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 0, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4607182418800017408, i64 4607182418800017408, i64 4611686018427387904, i64 4598175219545276416, i64 -4611686018427387904, i64 -4625196817309499392, i64 4611686018427387904, i64 -4625196817309499392, i64 -4611686018427387904, i64 4598175219545276416, i64 0], align 8
6: @b_input = internal unnamed_addr constant [20 x i64] [i64 -1, i64 -4503599627370496, i64 0, i64 4607182418800017408, i64 -281474976710656, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4598175219545276416, i64 4611686018427387904, i64 -4625196817309499392, i64 -4611686018427387904, i64 -4625196817309499392, i64 4611686018427387904, i64 4598175219545276416, i64 -4611686018427387904, i64 0], align 8
72:   %2 = phi i32 [ 0, %0 ], [ %200, %float64_mul.exit ]
15:   %scevgep = getelementptr [20 x i64]* @z_output, i32 0, i32 %2
16:   %scevgep2 = getelementptr [20 x i64]* @b_input, i32 0, i32 %2
17:   %scevgep3 = getelementptr [20 x i64]* @a_input, i32 0, i32 %2
18:   %3 = load i64* %scevgep3, align 8, !tbaa !1
19:   %4 = load i64* %scevgep2, align 8, !tbaa !1
21:   %6 = lshr i64 %3, 52
20:   %.tr.i.i = trunc i64 %6 to i32
23:   %9 = lshr i64 %4, 52
22:   %.tr.i17.i = trunc i64 %9 to i32
42:   %shiftCount.1.i.i.i.i = phi i32 [ %105, %104 ], [ %..i.i.i.i, %98 ]
39:   %108 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %107
40:   %109 = load i32* %108, align 4, !tbaa !5
41:   %110 = add i32 %shiftCount.1.i.i.i.i, %109
43:   %111 = add nsw i32 %110, -11
45:   %116 = phi i32 [ %114, %normalizeFloat64Subnormal.exit.i ], [ %10, %91 ]
44:   %118 = add nsw i32 %116, %92
24:   %22 = trunc i64 %4 to i63
25:   %48 = trunc i64 %4 to i63
38:   %101 = shl nuw nsw i64 %99, 16
37:   %102 = trunc i64 %101 to i32
27:   %75 = lshr i64 %5, 32
26:   %extract.t.i.i4.i = trunc i64 %75 to i32
29:   %77 = shl nuw nsw i64 %75, 16
28:   %78 = trunc i64 %77 to i32
33:   %shiftCount.1.i.i.i8.i = phi i32 [ %81, %80 ], [ %..i.i.i6.i, %74 ]
30:   %84 = getelementptr inbounds [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh, i32 0, i32 %83
31:   %85 = load i32* %84, align 4, !tbaa !5
32:   %86 = add i32 %shiftCount.1.i.i.i8.i, %85
34:   %87 = add nsw i32 %86, -11
36:   %99 = lshr i64 %8, 32
35:   %extract.t.i.i.i = trunc i64 %99 to i32
68:   %196 = load i64* %scevgep, align 8, !tbaa !1
70:   %198 = zext i1 %197 to i32
69:   %199 = add nsw i32 %198, %main_result.02
71:   %200 = add nsw i32 %2, 1
47:   %overflow_intrinsic = zext i64 %130 to i65
46:   %overflow_intrinsic2 = add nuw i65 %overflow_intrinsic, %overflow_intrinsic1
48:   %overflow_intrinsic_sum = trunc i65 %overflow_intrinsic2 to i64
50:   %133 = lshr i65 %overflow_intrinsic2, 32
49:   %.tr = trunc i65 %133 to i64
52:   %overflow_intrinsic4 = zext i64 %129 to i65
51:   %overflow_intrinsic6 = add nuw i65 %overflow_intrinsic4, %overflow_intrinsic5
53:   %overflow_intrinsic_sum7 = trunc i65 %overflow_intrinsic6 to i64
55:   %overflow_intrinsic8 = lshr i65 %overflow_intrinsic6, 64
54:   %138 = trunc i65 %overflow_intrinsic8 to i64
56:   %139 = add i64 %138, %132
57:   %140 = add i64 %139, %136
60:   %..i = select i1 %145, i64 %144, i64 %143
58:   %.18.i = add i32 %118, %.18.v.i
59:   %.tr.i1.i = trunc i64 %..i to i32
61:   %154 = add i64 %..i, 512
63:   %z.0.i.i.i = phi i64 [ %173, %164 ], [ %176, %174 ]
62:   %.tr3.i.i = trunc i64 %z.0.i.i.i to i32
65:   %zSig57.i.i = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %zSig5.i.i, %.thread.i2.i ]
64:   %183 = add i64 %zSig57.i.i, 512
67:   %193 = select i1 %190, i64 0, i64 %.op.i.i
66:   %195 = add i64 %193, %194
Memory: Int -> Value* mapping
7: @z_output = internal unnamed_addr constant [20 x i64] [i64 -1, i64 9223090561878065152, i64 9223372036854775807, i64 9218868437227405312, i64 -281474976710656, i64 9223372036854775807, i64 9218868437227405312, i64 0, i64 -9223372036854775808, i64 0, i64 -9223372036854775808, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 -4620693217682128896, i64 -4620693217682128896, i64 -4620693217682128896, i64 -4620693217682128896, i64 0], align 8
1: @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 4
9: @.str = private unnamed_addr constant [11 x i8] c"Result: %d\00", align 1
11: @.str1 = private unnamed_addr constant [13 x i8] c"RESULT: PASS\00", align 1
13: @.str2 = private unnamed_addr constant [13 x i8] c"RESULT: FAIL\00", align 1
3: @a_input = internal unnamed_addr constant [20 x i64] [i64 9218868437227405312, i64 9223090561878065152, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 0, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4607182418800017408, i64 4607182418800017408, i64 4611686018427387904, i64 4598175219545276416, i64 -4611686018427387904, i64 -4625196817309499392, i64 4611686018427387904, i64 -4625196817309499392, i64 -4611686018427387904, i64 4598175219545276416, i64 0], align 8
5: @b_input = internal unnamed_addr constant [20 x i64] [i64 -1, i64 -4503599627370496, i64 0, i64 4607182418800017408, i64 -281474976710656, i64 9218868437227405312, i64 9218868437227405312, i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 -9223372036854775808, i64 4598175219545276416, i64 4611686018427387904, i64 -4625196817309499392, i64 -4611686018427387904, i64 -4625196817309499392, i64 4611686018427387904, i64 4598175219545276416, i64 -4611686018427387904, i64 0], align 8
digraph "_dfmul.bc" {
    1 [label="#1",color=blue,style=solid];
    2 [label="countLeadingZeros32.countLeadingZerosHigh",color=blue,style=solid];
    3 [label="#3",color=blue,style=solid];
    4 [label="a_input",color=blue,style=solid];
    5 [label="#5",color=blue,style=solid];
    6 [label="b_input",color=blue,style=solid];
    7 [label="#7",color=blue,style=solid];
    8 [label="z_output",color=blue,style=solid];
    9 [label="#9",color=blue,style=solid];
    10 [label=".str",color=blue,style=solid];
    11 [label="#11",color=blue,style=solid];
    12 [label=".str1",color=blue,style=solid];
    13 [label="#13",color=blue,style=solid];
    14 [label=".str2",color=blue,style=solid];
    15 [label="scevgep",color=blue,style=solid];
    16 [label="scevgep2",color=blue,style=solid];
    17 [label="scevgep3",color=blue,style=solid];
    18 [label="unknown",color=blue,style=solid];
    19 [label="unknown",color=blue,style=solid];
    20 [label=".tr.i.i",color=blue,style=solid];
    21 [label="unknown",color=blue,style=solid];
    22 [label=".tr.i17.i",color=blue,style=solid];
    23 [label="unknown",color=blue,style=solid];
    24 [label="unknown",color=blue,style=solid];
    25 [label="unknown",color=blue,style=solid];
    26 [label="extract.t.i.i4.i",color=blue,style=solid];
    27 [label="unknown",color=blue,style=solid];
    28 [label="unknown",color=blue,style=solid];
    29 [label="unknown",color=blue,style=solid];
    30 [label="unknown",color=blue,style=solid];
    31 [label="unknown",color=blue,style=solid];
    32 [label="unknown",color=blue,style=solid];
    33 [label="shiftCount.1.i.i.i8.i",color=blue,style=solid];
    34 [label="unknown",color=blue,style=solid];
    35 [label="extract.t.i.i.i",color=blue,style=solid];
    36 [label="unknown",color=blue,style=solid];
    37 [label="unknown",color=blue,style=solid];
    38 [label="unknown",color=blue,style=solid];
    39 [label="unknown",color=blue,style=solid];
    40 [label="unknown",color=blue,style=solid];
    41 [label="unknown",color=blue,style=solid];
    42 [label="shiftCount.1.i.i.i.i",color=blue,style=solid];
    43 [label="unknown",color=blue,style=solid];
    44 [label="unknown",color=blue,style=solid];
    45 [label="unknown",color=blue,style=solid];
    46 [label="overflow_intrinsic2",color=blue,style=solid];
    47 [label="overflow_intrinsic",color=blue,style=solid];
    48 [label="overflow_intrinsic_sum",color=blue,style=solid];
    49 [label=".tr",color=blue,style=solid];
    50 [label="unknown",color=blue,style=solid];
    51 [label="overflow_intrinsic6",color=blue,style=solid];
    52 [label="overflow_intrinsic4",color=blue,style=solid];
    53 [label="overflow_intrinsic_sum7",color=blue,style=solid];
    54 [label="unknown",color=blue,style=solid];
    55 [label="overflow_intrinsic8",color=blue,style=solid];
    56 [label="unknown",color=blue,style=solid];
    57 [label="unknown",color=blue,style=solid];
    58 [label=".18.i",color=blue,style=solid];
    59 [label=".tr.i1.i",color=blue,style=solid];
    60 [label="..i",color=blue,style=solid];
    61 [label="unknown",color=blue,style=solid];
    62 [label=".tr3.i.i",color=blue,style=solid];
    63 [label="z.0.i.i.i",color=blue,style=solid];
    64 [label="unknown",color=blue,style=solid];
    65 [label="zSig57.i.i",color=blue,style=solid];
    66 [label="unknown",color=blue,style=solid];
    67 [label="unknown",color=blue,style=solid];
    68 [label="unknown",color=blue,style=solid];
    69 [label="unknown",color=blue,style=solid];
    70 [label="unknown",color=blue,style=solid];
    71 [label="unknown",color=blue,style=solid];
    72 [label="unknown",color=blue,style=solid];
    1 -> 31;
    1 -> 40;
    2 -> 30;
    2 -> 39;
    3 -> 18;
    4 -> 17;
    5 -> 19;
    6 -> 16;
    7 -> 68;
    8 -> 15;
    19 -> 24;
    19 -> 25;
    21 -> 20;
    23 -> 22;
    27 -> 26;
    29 -> 28;
    31 -> 32;
    32 -> 34;
    33 -> 32;
    36 -> 35;
    38 -> 37;
    40 -> 41;
    41 -> 43;
    42 -> 41;
    44 -> 58;
    45 -> 44;
    46 -> 48;
    47 -> 46;
    50 -> 49;
    51 -> 53;
    52 -> 51;
    54 -> 56;
    55 -> 54;
    56 -> 57;
    60 -> 59;
    60 -> 61;
    63 -> 62;
    65 -> 64;
    67 -> 66;
    70 -> 69;
    72 -> 71;
    pts2 [label="#1",color=red,style=dashed,shape=box];
    2 -> pts2 [color=red,style=dashed];
    pts4 [label="#3",color=red,style=dashed,shape=box];
    4 -> pts4 [color=red,style=dashed];
    pts6 [label="#5",color=red,style=dashed,shape=box];
    6 -> pts6 [color=red,style=dashed];
    pts8 [label="#7",color=red,style=dashed,shape=box];
    8 -> pts8 [color=red,style=dashed];
    pts10 [label="#9",color=red,style=dashed,shape=box];
    10 -> pts10 [color=red,style=dashed];
    pts12 [label="#11",color=red,style=dashed,shape=box];
    12 -> pts12 [color=red,style=dashed];
    pts14 [label="#13",color=red,style=dashed,shape=box];
    14 -> pts14 [color=red,style=dashed];
    pts15 [label="#7",color=red,style=dashed,shape=box];
    15 -> pts15 [color=red,style=dashed];
    pts16 [label="#5",color=red,style=dashed,shape=box];
    16 -> pts16 [color=red,style=dashed];
    pts17 [label="#3",color=red,style=dashed,shape=box];
    17 -> pts17 [color=red,style=dashed];
    pts30 [label="#1",color=red,style=dashed,shape=box];
    30 -> pts30 [color=red,style=dashed];
    pts39 [label="#1",color=red,style=dashed,shape=box];
    39 -> pts39 [color=red,style=dashed];
}
%3 -> { 
	Addr: @a_input
		RAM: a_input
			Adding Local RAM: a_input to Fct: @main
}
%4 -> { 
	Addr: @b_input
		RAM: b_input
			Adding Local RAM: b_input to Fct: @main
}
%85 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%109 -> { 
	Addr: @countLeadingZeros32.countLeadingZerosHigh
		RAM: countLeadingZeros32countLeadingZerosHigh
			Adding Local RAM: countLeadingZeros32countLeadingZerosHigh to Fct: @main
}
%196 -> { 
	Addr: @z_output
		RAM: z_output
			Adding Local RAM: z_output to Fct: @main
}
Final memory allocation:
Global Memories:
Local Memories:
	ROM: countLeadingZeros32countLeadingZerosHigh Function: main
	ROM: a_input Function: main
	ROM: b_input Function: main
	ROM: z_output Function: main
